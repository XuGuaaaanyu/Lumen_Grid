
Zumo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800aee0  0800aee0  0000bee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b444  0800b444  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b444  0800b444  0000c444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b44c  0800b44c  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b44c  0800b44c  0000c44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b450  0800b450  0000c450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b454  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200001d4  0800b628  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  0800b628  0000d558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010304  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002222  00000000  00000000  0001d508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  0001f730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d02  00000000  00000000  000207a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017970  00000000  00000000  000214a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ad7  00000000  00000000  00038e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092850  00000000  00000000  0004b8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de139  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c84  00000000  00000000  000de17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e3e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aec4 	.word	0x0800aec4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800aec4 	.word	0x0800aec4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <HAL_UART_RxCpltCallback>:
// Callback function of UART interrupt
// MODIFIES: pitch, roll, state
// BT message format: P<ppp>,R<rrr>,S<s>
// where each p, r, and s is one digit in ASCII
// the first digit of pitch and roll indicates plus or minus, '1' for negative values
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	//HAL_UART_DMAPause(huart);
	if (huart->Instance == USART6) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a58      	ldr	r2, [pc, #352]	@ (80011a0 <HAL_UART_RxCpltCallback+0x170>)
 800103e:	4293      	cmp	r3, r2
 8001040:	f040 80a5 	bne.w	800118e <HAL_UART_RxCpltCallback+0x15e>
		//HAL_UART_Transmit(&huart2, Data, 12, 1000);

		//Find the starting character: 'P'
		int index = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < RX_BUF_SIZE; i++)
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	e00a      	b.n	8001064 <HAL_UART_RxCpltCallback+0x34>
		{
			if (Data[i] == 'P')
 800104e:	4a55      	ldr	r2, [pc, #340]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4413      	add	r3, r2
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b50      	cmp	r3, #80	@ 0x50
 8001058:	d101      	bne.n	800105e <HAL_UART_RxCpltCallback+0x2e>
				index = i;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < RX_BUF_SIZE; i++)
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	3301      	adds	r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b0b      	cmp	r3, #11
 8001068:	ddf1      	ble.n	800104e <HAL_UART_RxCpltCallback+0x1e>
		}

		pitch = (Data[(2 + index) % RX_BUF_SIZE] - '0') * 10 + (Data[(3 + index) % RX_BUF_SIZE] - '0');
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1c99      	adds	r1, r3, #2
 800106e:	4b4e      	ldr	r3, [pc, #312]	@ (80011a8 <HAL_UART_RxCpltCallback+0x178>)
 8001070:	fb83 2301 	smull	r2, r3, r3, r1
 8001074:	105a      	asrs	r2, r3, #1
 8001076:	17cb      	asrs	r3, r1, #31
 8001078:	1ad2      	subs	r2, r2, r3
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	1aca      	subs	r2, r1, r3
 8001084:	4b47      	ldr	r3, [pc, #284]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 8001086:	5c9b      	ldrb	r3, [r3, r2]
 8001088:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4618      	mov	r0, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	1cd9      	adds	r1, r3, #3
 800109a:	4b43      	ldr	r3, [pc, #268]	@ (80011a8 <HAL_UART_RxCpltCallback+0x178>)
 800109c:	fb83 2301 	smull	r2, r3, r3, r1
 80010a0:	105a      	asrs	r2, r3, #1
 80010a2:	17cb      	asrs	r3, r1, #31
 80010a4:	1ad2      	subs	r2, r2, r3
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	1aca      	subs	r2, r1, r3
 80010b0:	4b3c      	ldr	r3, [pc, #240]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 80010b2:	5c9b      	ldrb	r3, [r3, r2]
 80010b4:	3b30      	subs	r3, #48	@ 0x30
 80010b6:	4403      	add	r3, r0
 80010b8:	4a3c      	ldr	r2, [pc, #240]	@ (80011ac <HAL_UART_RxCpltCallback+0x17c>)
 80010ba:	6013      	str	r3, [r2, #0]
		roll = (Data[(7 + index) % RX_BUF_SIZE] - '0') * 10 + (Data[(8 + index) % RX_BUF_SIZE] - '0');
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	1dd9      	adds	r1, r3, #7
 80010c0:	4b39      	ldr	r3, [pc, #228]	@ (80011a8 <HAL_UART_RxCpltCallback+0x178>)
 80010c2:	fb83 2301 	smull	r2, r3, r3, r1
 80010c6:	105a      	asrs	r2, r3, #1
 80010c8:	17cb      	asrs	r3, r1, #31
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	1aca      	subs	r2, r1, r3
 80010d6:	4b33      	ldr	r3, [pc, #204]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 80010d8:	5c9b      	ldrb	r3, [r3, r2]
 80010da:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4618      	mov	r0, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f103 0108 	add.w	r1, r3, #8
 80010ee:	4b2e      	ldr	r3, [pc, #184]	@ (80011a8 <HAL_UART_RxCpltCallback+0x178>)
 80010f0:	fb83 2301 	smull	r2, r3, r3, r1
 80010f4:	105a      	asrs	r2, r3, #1
 80010f6:	17cb      	asrs	r3, r1, #31
 80010f8:	1ad2      	subs	r2, r2, r3
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	1aca      	subs	r2, r1, r3
 8001104:	4b27      	ldr	r3, [pc, #156]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 8001106:	5c9b      	ldrb	r3, [r3, r2]
 8001108:	3b30      	subs	r3, #48	@ 0x30
 800110a:	4403      	add	r3, r0
 800110c:	4a28      	ldr	r2, [pc, #160]	@ (80011b0 <HAL_UART_RxCpltCallback+0x180>)
 800110e:	6013      	str	r3, [r2, #0]
		state = (Data[(11 + index) % RX_BUF_SIZE] - '0');
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f103 010b 	add.w	r1, r3, #11
 8001116:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <HAL_UART_RxCpltCallback+0x178>)
 8001118:	fb83 2301 	smull	r2, r3, r3, r1
 800111c:	105a      	asrs	r2, r3, #1
 800111e:	17cb      	asrs	r3, r1, #31
 8001120:	1ad2      	subs	r2, r2, r3
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	1aca      	subs	r2, r1, r3
 800112c:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 800112e:	5c9b      	ldrb	r3, [r3, r2]
 8001130:	3b30      	subs	r3, #48	@ 0x30
 8001132:	4a20      	ldr	r2, [pc, #128]	@ (80011b4 <HAL_UART_RxCpltCallback+0x184>)
 8001134:	6013      	str	r3, [r2, #0]

		if (Data[(1 + index) % RX_BUF_SIZE] == '1')
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1c59      	adds	r1, r3, #1
 800113a:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <HAL_UART_RxCpltCallback+0x178>)
 800113c:	fb83 2301 	smull	r2, r3, r3, r1
 8001140:	105a      	asrs	r2, r3, #1
 8001142:	17cb      	asrs	r3, r1, #31
 8001144:	1ad2      	subs	r2, r2, r3
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	1aca      	subs	r2, r1, r3
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 8001152:	5c9b      	ldrb	r3, [r3, r2]
 8001154:	2b31      	cmp	r3, #49	@ 0x31
 8001156:	d104      	bne.n	8001162 <HAL_UART_RxCpltCallback+0x132>
			pitch *= (-1);
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <HAL_UART_RxCpltCallback+0x17c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	425b      	negs	r3, r3
 800115e:	4a13      	ldr	r2, [pc, #76]	@ (80011ac <HAL_UART_RxCpltCallback+0x17c>)
 8001160:	6013      	str	r3, [r2, #0]
		if (Data[(6 + index) % RX_BUF_SIZE] == '1')
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	1d99      	adds	r1, r3, #6
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <HAL_UART_RxCpltCallback+0x178>)
 8001168:	fb83 2301 	smull	r2, r3, r3, r1
 800116c:	105a      	asrs	r2, r3, #1
 800116e:	17cb      	asrs	r3, r1, #31
 8001170:	1ad2      	subs	r2, r2, r3
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	1aca      	subs	r2, r1, r3
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 800117e:	5c9b      	ldrb	r3, [r3, r2]
 8001180:	2b31      	cmp	r3, #49	@ 0x31
 8001182:	d104      	bne.n	800118e <HAL_UART_RxCpltCallback+0x15e>
			roll *= (-1);
 8001184:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_UART_RxCpltCallback+0x180>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	425b      	negs	r3, r3
 800118a:	4a09      	ldr	r2, [pc, #36]	@ (80011b0 <HAL_UART_RxCpltCallback+0x180>)
 800118c:	6013      	str	r3, [r2, #0]
	}
	//HAL_UART_DMAResume(huart);
	HAL_UART_Receive_DMA(&huart6, Data, RX_BUF_SIZE);
 800118e:	220c      	movs	r2, #12
 8001190:	4904      	ldr	r1, [pc, #16]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 8001192:	4809      	ldr	r0, [pc, #36]	@ (80011b8 <HAL_UART_RxCpltCallback+0x188>)
 8001194:	f004 fd87 	bl	8005ca6 <HAL_UART_Receive_DMA>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40011400 	.word	0x40011400
 80011a4:	200003e0 	.word	0x200003e0
 80011a8:	2aaaaaab 	.word	0x2aaaaaab
 80011ac:	200003c8 	.word	0x200003c8
 80011b0:	200003cc 	.word	0x200003cc
 80011b4:	200003d0 	.word	0x200003d0
 80011b8:	2000031c 	.word	0x2000031c
 80011bc:	00000000 	.word	0x00000000

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b08c      	sub	sp, #48	@ 0x30
 80011c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c6:	f001 f9d5 	bl	8002574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ca:	f000 f969 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ce:	f000 fb73 	bl	80018b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011d2:	f000 fb51 	bl	8001878 <MX_DMA_Init>
  MX_I2C1_Init();
 80011d6:	f000 f9cf 	bl	8001578 <MX_I2C1_Init>
  MX_TIM3_Init();
 80011da:	f000 f9fb 	bl	80015d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011de:	f000 fa69 	bl	80016b4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80011e2:	f000 faf5 	bl	80017d0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80011e6:	f000 fb1d 	bl	8001824 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011ea:	2104      	movs	r1, #4
 80011ec:	4892      	ldr	r0, [pc, #584]	@ (8001438 <main+0x278>)
 80011ee:	f003 feff 	bl	8004ff0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80011f2:	2100      	movs	r1, #0
 80011f4:	4891      	ldr	r0, [pc, #580]	@ (800143c <main+0x27c>)
 80011f6:	f003 fefb 	bl	8004ff0 <HAL_TIM_PWM_Start>
  	//i2c_scan();
  	init_accelerometer();
 80011fa:	f000 fdab 	bl	8001d54 <init_accelerometer>
  	init_gyroscope();
 80011fe:	f000 fdd1 	bl	8001da4 <init_gyroscope>
  	init_magnetometer();
 8001202:	f000 fd71 	bl	8001ce8 <init_magnetometer>
  	//HAL_UARTEx_ReceiveToIdle_IT(&huart6, Data, MAX_BUFFER_SIZE);
  //	while((*Trash) != 'P')
  //	{
  //		HAL_UART_Receive(&huart6, Trash, 1, HAL_MAX_DELAY);
  //	}
  	HAL_UART_Receive_DMA(&huart6, Data, RX_BUF_SIZE);
 8001206:	220c      	movs	r2, #12
 8001208:	498d      	ldr	r1, [pc, #564]	@ (8001440 <main+0x280>)
 800120a:	488e      	ldr	r0, [pc, #568]	@ (8001444 <main+0x284>)
 800120c:	f004 fd4b 	bl	8005ca6 <HAL_UART_Receive_DMA>

  	if (HAL_I2C_IsDeviceReady(&hi2c1, 0x6B << 1, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	2201      	movs	r2, #1
 8001216:	21d6      	movs	r1, #214	@ 0xd6
 8001218:	488b      	ldr	r0, [pc, #556]	@ (8001448 <main+0x288>)
 800121a:	f002 fcd1 	bl	8003bc0 <HAL_I2C_IsDeviceReady>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d103      	bne.n	800122c <main+0x6c>
  		printf("L3GD20H detected at 0x6B\r\n");
 8001224:	4889      	ldr	r0, [pc, #548]	@ (800144c <main+0x28c>)
 8001226:	f006 fa03 	bl	8007630 <puts>
 800122a:	e002      	b.n	8001232 <main+0x72>
  	} else {
  		printf("L3GD20H NOT detected!\r\n");
 800122c:	4888      	ldr	r0, [pc, #544]	@ (8001450 <main+0x290>)
 800122e:	f006 f9ff 	bl	8007630 <puts>
  	}
  	if (HAL_I2C_IsDeviceReady(&hi2c1, 0x1D << 1, 1, HAL_MAX_DELAY) == HAL_OK) {
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	2201      	movs	r2, #1
 8001238:	213a      	movs	r1, #58	@ 0x3a
 800123a:	4883      	ldr	r0, [pc, #524]	@ (8001448 <main+0x288>)
 800123c:	f002 fcc0 	bl	8003bc0 <HAL_I2C_IsDeviceReady>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d103      	bne.n	800124e <main+0x8e>
  		printf("LSM303D detected at 0x1D\r\n");
 8001246:	4883      	ldr	r0, [pc, #524]	@ (8001454 <main+0x294>)
 8001248:	f006 f9f2 	bl	8007630 <puts>
 800124c:	e002      	b.n	8001254 <main+0x94>
  	} else {
  		printf("LSM303D NOT detected!\r\n");
 800124e:	4882      	ldr	r0, [pc, #520]	@ (8001458 <main+0x298>)
 8001250:	f006 f9ee 	bl	8007630 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int num1 = (pitch<10&&pitch>-10)?0:pitch;
 8001254:	4b81      	ldr	r3, [pc, #516]	@ (800145c <main+0x29c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b09      	cmp	r3, #9
 800125a:	dc04      	bgt.n	8001266 <main+0xa6>
 800125c:	4b7f      	ldr	r3, [pc, #508]	@ (800145c <main+0x29c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f113 0f09 	cmn.w	r3, #9
 8001264:	da02      	bge.n	800126c <main+0xac>
 8001266:	4b7d      	ldr	r3, [pc, #500]	@ (800145c <main+0x29c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	e000      	b.n	800126e <main+0xae>
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
	  		int num2 = (roll<10&&roll>-10)?0:roll;
 8001270:	4b7b      	ldr	r3, [pc, #492]	@ (8001460 <main+0x2a0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b09      	cmp	r3, #9
 8001276:	dc04      	bgt.n	8001282 <main+0xc2>
 8001278:	4b79      	ldr	r3, [pc, #484]	@ (8001460 <main+0x2a0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f113 0f09 	cmn.w	r3, #9
 8001280:	da02      	bge.n	8001288 <main+0xc8>
 8001282:	4b77      	ldr	r3, [pc, #476]	@ (8001460 <main+0x2a0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	e000      	b.n	800128a <main+0xca>
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
	  		int num3 = state;
 800128c:	4b75      	ldr	r3, [pc, #468]	@ (8001464 <main+0x2a4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	617b      	str	r3, [r7, #20]
	  		// Emergency stop logic
	  		if (num3 == 1) {
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d108      	bne.n	80012aa <main+0xea>
	  			vol = 0.0;
 8001298:	4b73      	ldr	r3, [pc, #460]	@ (8001468 <main+0x2a8>)
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
	  			num1 = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]
	  			num2 = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	e010      	b.n	80012cc <main+0x10c>
	  //				num1 = 0;
	  //			}

	  			// Adjust the speed according to pitch (acceleration/deceleration)
	  			//printf("pitch:%d\r\n",num1);
	  			vol = num1*11.11;
 80012aa:	69b8      	ldr	r0, [r7, #24]
 80012ac:	f7ff f942 	bl	8000534 <__aeabi_i2d>
 80012b0:	a35f      	add	r3, pc, #380	@ (adr r3, 8001430 <main+0x270>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff f9a7 	bl	8000608 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fc99 	bl	8000bf8 <__aeabi_d2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a67      	ldr	r2, [pc, #412]	@ (8001468 <main+0x2a8>)
 80012ca:	6013      	str	r3, [r2, #0]
	  		}

	  		// Compute turning difference based on roll
	  		// Higher roll gives greater difference between wheels for sharper turns
	  		//printf("Roll:%d\r\n",num2);
	  		curve_control(num2,vol);
 80012cc:	4b66      	ldr	r3, [pc, #408]	@ (8001468 <main+0x2a8>)
 80012ce:	edd3 7a00 	vldr	s15, [r3]
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	69f8      	ldr	r0, [r7, #28]
 80012d8:	f000 fb80 	bl	80019dc <curve_control>
//	  		}
//
//	  		// Set PWM values to motors using existing motor control function
//	  		set_pwm(left_pwm, right_pwm);
	  		//if(count == 10){
	  			c = 'S';
 80012dc:	4b63      	ldr	r3, [pc, #396]	@ (800146c <main+0x2ac>)
 80012de:	2253      	movs	r2, #83	@ 0x53
 80012e0:	701a      	strb	r2, [r3, #0]
	  			if(vol<0) ca = '1';
 80012e2:	4b61      	ldr	r3, [pc, #388]	@ (8001468 <main+0x2a8>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	d503      	bpl.n	80012fa <main+0x13a>
 80012f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001470 <main+0x2b0>)
 80012f4:	2231      	movs	r2, #49	@ 0x31
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	e002      	b.n	8001300 <main+0x140>
	  			else ca = '0';
 80012fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001470 <main+0x2b0>)
 80012fc:	2230      	movs	r2, #48	@ 0x30
 80012fe:	701a      	strb	r2, [r3, #0]

	  			int vol_int  = floor(abs(vol));
 8001300:	4b59      	ldr	r3, [pc, #356]	@ (8001468 <main+0x2a8>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800130a:	ee17 3a90 	vmov	r3, s15
 800130e:	2b00      	cmp	r3, #0
 8001310:	bfb8      	it	lt
 8001312:	425b      	neglt	r3, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f90d 	bl	8000534 <__aeabi_i2d>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fc21 	bl	8000b68 <__aeabi_d2iz>
 8001326:	4603      	mov	r3, r0
 8001328:	613b      	str	r3, [r7, #16]
	  			int cbb = (vol_int/1000);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4a51      	ldr	r2, [pc, #324]	@ (8001474 <main+0x2b4>)
 800132e:	fb82 1203 	smull	r1, r2, r2, r3
 8001332:	1192      	asrs	r2, r2, #6
 8001334:	17db      	asrs	r3, r3, #31
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	60fb      	str	r3, [r7, #12]
	  			cb = cbb+'0';
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	3330      	adds	r3, #48	@ 0x30
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b4d      	ldr	r3, [pc, #308]	@ (8001478 <main+0x2b8>)
 8001344:	701a      	strb	r2, [r3, #0]
	  			int ccc = ((vol_int-cbb*1000)/100);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4a4c      	ldr	r2, [pc, #304]	@ (800147c <main+0x2bc>)
 800134a:	fb03 f202 	mul.w	r2, r3, r2
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4413      	add	r3, r2
 8001352:	4a4b      	ldr	r2, [pc, #300]	@ (8001480 <main+0x2c0>)
 8001354:	fb82 1203 	smull	r1, r2, r2, r3
 8001358:	1152      	asrs	r2, r2, #5
 800135a:	17db      	asrs	r3, r3, #31
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	60bb      	str	r3, [r7, #8]
	  			cc = ccc+'0';
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	3330      	adds	r3, #48	@ 0x30
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b46      	ldr	r3, [pc, #280]	@ (8001484 <main+0x2c4>)
 800136a:	701a      	strb	r2, [r3, #0]
	  			int cdd = ((vol_int-cbb*1000-ccc*100)/10);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a43      	ldr	r2, [pc, #268]	@ (800147c <main+0x2bc>)
 8001370:	fb03 f202 	mul.w	r2, r3, r2
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	441a      	add	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 800137e:	fb01 f303 	mul.w	r3, r1, r3
 8001382:	4413      	add	r3, r2
 8001384:	4a40      	ldr	r2, [pc, #256]	@ (8001488 <main+0x2c8>)
 8001386:	fb82 1203 	smull	r1, r2, r2, r3
 800138a:	1092      	asrs	r2, r2, #2
 800138c:	17db      	asrs	r3, r3, #31
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	607b      	str	r3, [r7, #4]
	  			cd = cdd+'0';
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	3330      	adds	r3, #48	@ 0x30
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b3c      	ldr	r3, [pc, #240]	@ (800148c <main+0x2cc>)
 800139c:	701a      	strb	r2, [r3, #0]
	  			int cee = (vol_int-cbb*1000-ccc*100-10*cdd);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4a36      	ldr	r2, [pc, #216]	@ (800147c <main+0x2bc>)
 80013a2:	fb03 f202 	mul.w	r2, r3, r2
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	441a      	add	r2, r3
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 80013b0:	fb01 f303 	mul.w	r3, r1, r3
 80013b4:	441a      	add	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f06f 0109 	mvn.w	r1, #9
 80013bc:	fb01 f303 	mul.w	r3, r1, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	603b      	str	r3, [r7, #0]
	  			ce = cee+'0';
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	3330      	adds	r3, #48	@ 0x30
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <main+0x2d0>)
 80013ce:	701a      	strb	r2, [r3, #0]

	  			sprintf(bt_str, "%c%c%c%c%c%c",c,ca,cb,cc,cd,ce);
 80013d0:	4b26      	ldr	r3, [pc, #152]	@ (800146c <main+0x2ac>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461c      	mov	r4, r3
 80013d6:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <main+0x2b0>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461d      	mov	r5, r3
 80013dc:	4b26      	ldr	r3, [pc, #152]	@ (8001478 <main+0x2b8>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b28      	ldr	r3, [pc, #160]	@ (8001484 <main+0x2c4>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	4619      	mov	r1, r3
 80013e8:	4b28      	ldr	r3, [pc, #160]	@ (800148c <main+0x2cc>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <main+0x2d0>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	9303      	str	r3, [sp, #12]
 80013f4:	9002      	str	r0, [sp, #8]
 80013f6:	9101      	str	r1, [sp, #4]
 80013f8:	9200      	str	r2, [sp, #0]
 80013fa:	462b      	mov	r3, r5
 80013fc:	4622      	mov	r2, r4
 80013fe:	4925      	ldr	r1, [pc, #148]	@ (8001494 <main+0x2d4>)
 8001400:	4825      	ldr	r0, [pc, #148]	@ (8001498 <main+0x2d8>)
 8001402:	f006 f91d 	bl	8007640 <siprintf>
	  			//printf("%c%c%c%c%c%c\r\n",c,ca,cb,cc,cd,ce);

	  			count=0;
 8001406:	4b25      	ldr	r3, [pc, #148]	@ (800149c <main+0x2dc>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
	  			BT_Transmit(bt_str);
 800140c:	4822      	ldr	r0, [pc, #136]	@ (8001498 <main+0x2d8>)
 800140e:	f000 fd63 	bl	8001ed8 <BT_Transmit>
	  		//}
	  		//count++;
	  		// Delay to maintain loop responsiveness (e.g., 10 ms per loop)
	  		HAL_Delay(10);  // Keep loop responsive
 8001412:	200a      	movs	r0, #10
 8001414:	f001 f920 	bl	8002658 <HAL_Delay>
	  		if (num3==1)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2b01      	cmp	r3, #1
 800141c:	f47f af1a 	bne.w	8001254 <main+0x94>
	  			HAL_Delay(1000);
 8001420:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001424:	f001 f918 	bl	8002658 <HAL_Delay>
  {
 8001428:	e714      	b.n	8001254 <main+0x94>
 800142a:	bf00      	nop
 800142c:	f3af 8000 	nop.w
 8001430:	eb851eb8 	.word	0xeb851eb8
 8001434:	40263851 	.word	0x40263851
 8001438:	20000244 	.word	0x20000244
 800143c:	2000028c 	.word	0x2000028c
 8001440:	200003e0 	.word	0x200003e0
 8001444:	2000031c 	.word	0x2000031c
 8001448:	200001f0 	.word	0x200001f0
 800144c:	0800af3c 	.word	0x0800af3c
 8001450:	0800af58 	.word	0x0800af58
 8001454:	0800af70 	.word	0x0800af70
 8001458:	0800af8c 	.word	0x0800af8c
 800145c:	200003c8 	.word	0x200003c8
 8001460:	200003cc 	.word	0x200003cc
 8001464:	200003d0 	.word	0x200003d0
 8001468:	200003c4 	.word	0x200003c4
 800146c:	200003d9 	.word	0x200003d9
 8001470:	200003d4 	.word	0x200003d4
 8001474:	10624dd3 	.word	0x10624dd3
 8001478:	200003d5 	.word	0x200003d5
 800147c:	fffffc18 	.word	0xfffffc18
 8001480:	51eb851f 	.word	0x51eb851f
 8001484:	200003d6 	.word	0x200003d6
 8001488:	66666667 	.word	0x66666667
 800148c:	200003d7 	.word	0x200003d7
 8001490:	200003d8 	.word	0x200003d8
 8001494:	0800afa4 	.word	0x0800afa4
 8001498:	200003ec 	.word	0x200003ec
 800149c:	200003dc 	.word	0x200003dc

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	@ 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	2230      	movs	r2, #48	@ 0x30
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f006 f9c0 	bl	8007834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	4b29      	ldr	r3, [pc, #164]	@ (8001570 <SystemClock_Config+0xd0>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014cc:	4a28      	ldr	r2, [pc, #160]	@ (8001570 <SystemClock_Config+0xd0>)
 80014ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d4:	4b26      	ldr	r3, [pc, #152]	@ (8001570 <SystemClock_Config+0xd0>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <SystemClock_Config+0xd4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014ec:	4a21      	ldr	r2, [pc, #132]	@ (8001574 <SystemClock_Config+0xd4>)
 80014ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <SystemClock_Config+0xd4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001500:	2302      	movs	r3, #2
 8001502:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001504:	2301      	movs	r3, #1
 8001506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001508:	2310      	movs	r3, #16
 800150a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150c:	2302      	movs	r3, #2
 800150e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001510:	2300      	movs	r3, #0
 8001512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001514:	2310      	movs	r3, #16
 8001516:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001518:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800151c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800151e:	2304      	movs	r3, #4
 8001520:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001522:	2307      	movs	r3, #7
 8001524:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001526:	f107 0320 	add.w	r3, r7, #32
 800152a:	4618      	mov	r0, r3
 800152c:	f003 f82a 	bl	8004584 <HAL_RCC_OscConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001536:	f000 fcf7 	bl	8001f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153a:	230f      	movs	r3, #15
 800153c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153e:	2302      	movs	r3, #2
 8001540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001542:	2390      	movs	r3, #144	@ 0x90
 8001544:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001546:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fa8c 	bl	8004a74 <HAL_RCC_ClockConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001562:	f000 fce1 	bl	8001f28 <Error_Handler>
  }
}
 8001566:	bf00      	nop
 8001568:	3750      	adds	r7, #80	@ 0x50
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000

08001578 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <MX_I2C1_Init+0x50>)
 800157e:	4a13      	ldr	r2, [pc, #76]	@ (80015cc <MX_I2C1_Init+0x54>)
 8001580:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <MX_I2C1_Init+0x50>)
 8001584:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <MX_I2C1_Init+0x58>)
 8001586:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001588:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MX_I2C1_Init+0x50>)
 8001596:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800159a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800159c:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <MX_I2C1_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <MX_I2C1_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a8:	4b07      	ldr	r3, [pc, #28]	@ (80015c8 <MX_I2C1_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <MX_I2C1_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b4:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <MX_I2C1_Init+0x50>)
 80015b6:	f001 fe93 	bl	80032e0 <HAL_I2C_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015c0:	f000 fcb2 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200001f0 	.word	0x200001f0
 80015cc:	40005400 	.word	0x40005400
 80015d0:	00061a80 	.word	0x00061a80

080015d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015da:	f107 0320 	add.w	r3, r7, #32
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015f6:	4b2d      	ldr	r3, [pc, #180]	@ (80016ac <MX_TIM3_Init+0xd8>)
 80015f8:	4a2d      	ldr	r2, [pc, #180]	@ (80016b0 <MX_TIM3_Init+0xdc>)
 80015fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 80015fc:	4b2b      	ldr	r3, [pc, #172]	@ (80016ac <MX_TIM3_Init+0xd8>)
 80015fe:	2254      	movs	r2, #84	@ 0x54
 8001600:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	4b2a      	ldr	r3, [pc, #168]	@ (80016ac <MX_TIM3_Init+0xd8>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001608:	4b28      	ldr	r3, [pc, #160]	@ (80016ac <MX_TIM3_Init+0xd8>)
 800160a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800160e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001610:	4b26      	ldr	r3, [pc, #152]	@ (80016ac <MX_TIM3_Init+0xd8>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001616:	4b25      	ldr	r3, [pc, #148]	@ (80016ac <MX_TIM3_Init+0xd8>)
 8001618:	2280      	movs	r2, #128	@ 0x80
 800161a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800161c:	4823      	ldr	r0, [pc, #140]	@ (80016ac <MX_TIM3_Init+0xd8>)
 800161e:	f003 fc98 	bl	8004f52 <HAL_TIM_PWM_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001628:	f000 fc7e 	bl	8001f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	4619      	mov	r1, r3
 800163a:	481c      	ldr	r0, [pc, #112]	@ (80016ac <MX_TIM3_Init+0xd8>)
 800163c:	f004 f9ea 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001646:	f000 fc6f 	bl	8001f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164a:	2360      	movs	r3, #96	@ 0x60
 800164c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2204      	movs	r2, #4
 800165e:	4619      	mov	r1, r3
 8001660:	4812      	ldr	r0, [pc, #72]	@ (80016ac <MX_TIM3_Init+0xd8>)
 8001662:	f003 fd75 	bl	8005150 <HAL_TIM_PWM_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800166c:	f000 fc5c 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001670:	2360      	movs	r3, #96	@ 0x60
 8001672:	607b      	str	r3, [r7, #4]
  	sConfigOC.Pulse = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
  	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2204      	movs	r2, #4
 8001684:	4619      	mov	r1, r3
 8001686:	4809      	ldr	r0, [pc, #36]	@ (80016ac <MX_TIM3_Init+0xd8>)
 8001688:	f003 fd62 	bl	8005150 <HAL_TIM_PWM_ConfigChannel>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM3_Init+0xc2>
  			!= HAL_OK) {
  		Error_Handler();
 8001692:	f000 fc49 	bl	8001f28 <Error_Handler>
  	}

  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001696:	2104      	movs	r1, #4
 8001698:	4804      	ldr	r0, [pc, #16]	@ (80016ac <MX_TIM3_Init+0xd8>)
 800169a:	f003 fca9 	bl	8004ff0 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800169e:	4803      	ldr	r0, [pc, #12]	@ (80016ac <MX_TIM3_Init+0xd8>)
 80016a0:	f000 fcfc 	bl	800209c <HAL_TIM_MspPostInit>

}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	@ 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000244 	.word	0x20000244
 80016b0:	40000400 	.word	0x40000400

080016b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08e      	sub	sp, #56	@ 0x38
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c8:	f107 0320 	add.w	r3, r7, #32
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	615a      	str	r2, [r3, #20]
 80016e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016e4:	4b38      	ldr	r3, [pc, #224]	@ (80017c8 <MX_TIM4_Init+0x114>)
 80016e6:	4a39      	ldr	r2, [pc, #228]	@ (80017cc <MX_TIM4_Init+0x118>)
 80016e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 80016ea:	4b37      	ldr	r3, [pc, #220]	@ (80017c8 <MX_TIM4_Init+0x114>)
 80016ec:	2254      	movs	r2, #84	@ 0x54
 80016ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b35      	ldr	r3, [pc, #212]	@ (80017c8 <MX_TIM4_Init+0x114>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80016f6:	4b34      	ldr	r3, [pc, #208]	@ (80017c8 <MX_TIM4_Init+0x114>)
 80016f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fe:	4b32      	ldr	r3, [pc, #200]	@ (80017c8 <MX_TIM4_Init+0x114>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001704:	4b30      	ldr	r3, [pc, #192]	@ (80017c8 <MX_TIM4_Init+0x114>)
 8001706:	2280      	movs	r2, #128	@ 0x80
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800170a:	482f      	ldr	r0, [pc, #188]	@ (80017c8 <MX_TIM4_Init+0x114>)
 800170c:	f003 fbd2 	bl	8004eb4 <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001716:	f000 fc07 	bl	8001f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001720:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001724:	4619      	mov	r1, r3
 8001726:	4828      	ldr	r0, [pc, #160]	@ (80017c8 <MX_TIM4_Init+0x114>)
 8001728:	f003 fdd4 	bl	80052d4 <HAL_TIM_ConfigClockSource>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001732:	f000 fbf9 	bl	8001f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001736:	4824      	ldr	r0, [pc, #144]	@ (80017c8 <MX_TIM4_Init+0x114>)
 8001738:	f003 fc0b 	bl	8004f52 <HAL_TIM_PWM_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001742:	f000 fbf1 	bl	8001f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800174e:	f107 0320 	add.w	r3, r7, #32
 8001752:	4619      	mov	r1, r3
 8001754:	481c      	ldr	r0, [pc, #112]	@ (80017c8 <MX_TIM4_Init+0x114>)
 8001756:	f004 f95d 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001760:	f000 fbe2 	bl	8001f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001764:	2360      	movs	r3, #96	@ 0x60
 8001766:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	2200      	movs	r2, #0
 8001778:	4619      	mov	r1, r3
 800177a:	4813      	ldr	r0, [pc, #76]	@ (80017c8 <MX_TIM4_Init+0x114>)
 800177c:	f003 fce8 	bl	8005150 <HAL_TIM_PWM_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001786:	f000 fbcf 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178a:	2360      	movs	r3, #96	@ 0x60
 800178c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2200      	movs	r2, #0
 800179e:	4619      	mov	r1, r3
 80017a0:	4809      	ldr	r0, [pc, #36]	@ (80017c8 <MX_TIM4_Init+0x114>)
 80017a2:	f003 fcd5 	bl	8005150 <HAL_TIM_PWM_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM4_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 80017ac:	f000 fbbc 	bl	8001f28 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80017b0:	2100      	movs	r1, #0
 80017b2:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <MX_TIM4_Init+0x114>)
 80017b4:	f003 fc1c 	bl	8004ff0 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017b8:	4803      	ldr	r0, [pc, #12]	@ (80017c8 <MX_TIM4_Init+0x114>)
 80017ba:	f000 fc6f 	bl	800209c <HAL_TIM_MspPostInit>

}
 80017be:	bf00      	nop
 80017c0:	3738      	adds	r7, #56	@ 0x38
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	2000028c 	.word	0x2000028c
 80017cc:	40000800 	.word	0x40000800

080017d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <MX_USART2_UART_Init+0x50>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b09      	ldr	r3, [pc, #36]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	@ (800181c <MX_USART2_UART_Init+0x4c>)
 8001808:	f004 f972 	bl	8005af0 <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001812:	f000 fb89 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200002d4 	.word	0x200002d4
 8001820:	40004400 	.word	0x40004400

08001824 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001828:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <MX_USART6_UART_Init+0x4c>)
 800182a:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <MX_USART6_UART_Init+0x50>)
 800182c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <MX_USART6_UART_Init+0x4c>)
 8001830:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001834:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <MX_USART6_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <MX_USART6_UART_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001842:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <MX_USART6_UART_Init+0x4c>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001848:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <MX_USART6_UART_Init+0x4c>)
 800184a:	220c      	movs	r2, #12
 800184c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184e:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <MX_USART6_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001854:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <MX_USART6_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800185a:	4805      	ldr	r0, [pc, #20]	@ (8001870 <MX_USART6_UART_Init+0x4c>)
 800185c:	f004 f948 	bl	8005af0 <HAL_UART_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001866:	f000 fb5f 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000031c 	.word	0x2000031c
 8001874:	40011400 	.word	0x40011400

08001878 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <MX_DMA_Init+0x3c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a0b      	ldr	r2, [pc, #44]	@ (80018b4 <MX_DMA_Init+0x3c>)
 8001888:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <MX_DMA_Init+0x3c>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	2039      	movs	r0, #57	@ 0x39
 80018a0:	f000 ffd9 	bl	8002856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80018a4:	2039      	movs	r0, #57	@ 0x39
 80018a6:	f000 fff2 	bl	800288e <HAL_NVIC_EnableIRQ>

}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800

080018b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	@ 0x28
 80018bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b3e      	ldr	r3, [pc, #248]	@ (80019cc <MX_GPIO_Init+0x114>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a3d      	ldr	r2, [pc, #244]	@ (80019cc <MX_GPIO_Init+0x114>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b3b      	ldr	r3, [pc, #236]	@ (80019cc <MX_GPIO_Init+0x114>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b37      	ldr	r3, [pc, #220]	@ (80019cc <MX_GPIO_Init+0x114>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a36      	ldr	r2, [pc, #216]	@ (80019cc <MX_GPIO_Init+0x114>)
 80018f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b34      	ldr	r3, [pc, #208]	@ (80019cc <MX_GPIO_Init+0x114>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b30      	ldr	r3, [pc, #192]	@ (80019cc <MX_GPIO_Init+0x114>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a2f      	ldr	r2, [pc, #188]	@ (80019cc <MX_GPIO_Init+0x114>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b2d      	ldr	r3, [pc, #180]	@ (80019cc <MX_GPIO_Init+0x114>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <MX_GPIO_Init+0x114>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a28      	ldr	r2, [pc, #160]	@ (80019cc <MX_GPIO_Init+0x114>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b26      	ldr	r3, [pc, #152]	@ (80019cc <MX_GPIO_Init+0x114>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001944:	4822      	ldr	r0, [pc, #136]	@ (80019d0 <MX_GPIO_Init+0x118>)
 8001946:	f001 fcb1 	bl	80032ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800194a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800194e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001950:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	481c      	ldr	r0, [pc, #112]	@ (80019d4 <MX_GPIO_Init+0x11c>)
 8001962:	f001 fb1f 	bl	8002fa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001966:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	4619      	mov	r1, r3
 800197e:	4814      	ldr	r0, [pc, #80]	@ (80019d0 <MX_GPIO_Init+0x118>)
 8001980:	f001 fb10 	bl	8002fa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
	// TIM3_CH2 -> PC7
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001994:	2302      	movs	r3, #2
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	480d      	ldr	r0, [pc, #52]	@ (80019d4 <MX_GPIO_Init+0x11c>)
 80019a0:	f001 fb00 	bl	8002fa4 <HAL_GPIO_Init>

	// TIM4_CH1 -> PB6
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019a4:	2340      	movs	r3, #64	@ 0x40
 80019a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019b4:	2302      	movs	r3, #2
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	4806      	ldr	r0, [pc, #24]	@ (80019d8 <MX_GPIO_Init+0x120>)
 80019c0:	f001 faf0 	bl	8002fa4 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 80019c4:	bf00      	nop
 80019c6:	3728      	adds	r7, #40	@ 0x28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020800 	.word	0x40020800
 80019d8:	40020400 	.word	0x40020400

080019dc <curve_control>:
void motor_stop(void) {
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); //		RIGHT VAL	PC7		D9	Pin 9
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0); // 		LEFT VAL	PB6		D10	Pin10
}

void curve_control(int target_gz, float signed_speed) {
 80019dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019e0:	b09e      	sub	sp, #120	@ 0x78
 80019e2:	af0a      	add	r7, sp, #40	@ 0x28
 80019e4:	6178      	str	r0, [r7, #20]
 80019e6:	ed87 0a04 	vstr	s0, [r7, #16]
	static float previous_error = 0.0f;
	static float gz_filtered = 0.0f;
	static uint32_t last_time = 0;

	float gx, gy, gz;
	read_gyroscope(&gx, &gy, &gz);
 80019ea:	f107 0218 	add.w	r2, r7, #24
 80019ee:	f107 011c 	add.w	r1, r7, #28
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f904 	bl	8001c04 <read_gyroscope>

	gz_filtered = 0.9f * gz_filtered + 0.1f * gz;
 80019fc:	4b72      	ldr	r3, [pc, #456]	@ (8001bc8 <curve_control+0x1ec>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8001bcc <curve_control+0x1f0>
 8001a06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a0e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8001bd0 <curve_control+0x1f4>
 8001a12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1a:	4b6b      	ldr	r3, [pc, #428]	@ (8001bc8 <curve_control+0x1ec>)
 8001a1c:	edc3 7a00 	vstr	s15, [r3]

	uint32_t now = HAL_GetTick();
 8001a20:	f000 fe0e 	bl	8002640 <HAL_GetTick>
 8001a24:	6478      	str	r0, [r7, #68]	@ 0x44
	float dt = (now - last_time) / 1000.0f;
 8001a26:	4b6b      	ldr	r3, [pc, #428]	@ (8001bd4 <curve_control+0x1f8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a36:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8001bd8 <curve_control+0x1fc>
 8001a3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a3e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	if (dt < 0.01f) dt = 0.01f;
 8001a42:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001a46:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8001bdc <curve_control+0x200>
 8001a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	d501      	bpl.n	8001a58 <curve_control+0x7c>
 8001a54:	4b62      	ldr	r3, [pc, #392]	@ (8001be0 <curve_control+0x204>)
 8001a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
	last_time = now;
 8001a58:	4a5e      	ldr	r2, [pc, #376]	@ (8001bd4 <curve_control+0x1f8>)
 8001a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a5c:	6013      	str	r3, [r2, #0]

	float error = target_gz - gz_filtered;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	ee07 3a90 	vmov	s15, r3
 8001a64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a68:	4b57      	ldr	r3, [pc, #348]	@ (8001bc8 <curve_control+0x1ec>)
 8001a6a:	edd3 7a00 	vldr	s15, [r3]
 8001a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a72:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	integral += error * dt;
 8001a76:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001a7a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001a7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a82:	4b58      	ldr	r3, [pc, #352]	@ (8001be4 <curve_control+0x208>)
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8c:	4b55      	ldr	r3, [pc, #340]	@ (8001be4 <curve_control+0x208>)
 8001a8e:	edc3 7a00 	vstr	s15, [r3]
	float derivative = (error - previous_error) / dt;
 8001a92:	4b55      	ldr	r3, [pc, #340]	@ (8001be8 <curve_control+0x20c>)
 8001a94:	edd3 7a00 	vldr	s15, [r3]
 8001a98:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001a9c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001aa0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aa8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	previous_error = error;
 8001aac:	4a4e      	ldr	r2, [pc, #312]	@ (8001be8 <curve_control+0x20c>)
 8001aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ab0:	6013      	str	r3, [r2, #0]

	float Kp = 10.0f, Ki = 0.05f, Kd = 0.5f;
 8001ab2:	4b4e      	ldr	r3, [pc, #312]	@ (8001bec <curve_control+0x210>)
 8001ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8001bf0 <curve_control+0x214>)
 8001ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aba:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001abe:	633b      	str	r3, [r7, #48]	@ 0x30
	float control = Kp * error + Ki*integral + Kd * derivative;
 8001ac0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001ac4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001ac8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001acc:	4b45      	ldr	r3, [pc, #276]	@ (8001be4 <curve_control+0x208>)
 8001ace:	edd3 6a00 	vldr	s13, [r3]
 8001ad2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ade:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001ae2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001ae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aee:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	float delta_pwm = control;
 8001af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af4:	64bb      	str	r3, [r7, #72]	@ 0x48
	//printf("delta_pwm %d \r\n",delta_pwm);
	if (delta_pwm > 1000.0) delta_pwm = 1000.0;
 8001af6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001afa:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001bd8 <curve_control+0x1fc>
 8001afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b06:	dd01      	ble.n	8001b0c <curve_control+0x130>
 8001b08:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf4 <curve_control+0x218>)
 8001b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (delta_pwm < -1000.0) delta_pwm = -1000.0;
 8001b0c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b10:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001bf8 <curve_control+0x21c>
 8001b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1c:	d501      	bpl.n	8001b22 <curve_control+0x146>
 8001b1e:	4b37      	ldr	r3, [pc, #220]	@ (8001bfc <curve_control+0x220>)
 8001b20:	64bb      	str	r3, [r7, #72]	@ 0x48
if(target_gz==0)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d102      	bne.n	8001b2e <curve_control+0x152>
	delta_pwm=0;
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
	float left_pwm  = signed_speed - delta_pwm;
 8001b2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b32:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float right_pwm = signed_speed + delta_pwm;
 8001b3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b42:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	set_pwm(left_pwm, right_pwm);
 8001b4e:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8001b52:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001b56:	f000 f94d 	bl	8001df4 <set_pwm>

	printf("[CurveCtrl] gz=%.2f, err=%.2f, dt=%.3f, Δ=%.2f, L=%.2f, R=%.2f\r\n",
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc8 <curve_control+0x1ec>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fcfa 	bl	8000558 <__aeabi_f2d>
 8001b64:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b68:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001b6a:	f7fe fcf5 	bl	8000558 <__aeabi_f2d>
 8001b6e:	4604      	mov	r4, r0
 8001b70:	460d      	mov	r5, r1
 8001b72:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001b74:	f7fe fcf0 	bl	8000558 <__aeabi_f2d>
 8001b78:	4680      	mov	r8, r0
 8001b7a:	4689      	mov	r9, r1
 8001b7c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001b7e:	f7fe fceb 	bl	8000558 <__aeabi_f2d>
 8001b82:	4682      	mov	sl, r0
 8001b84:	468b      	mov	fp, r1
 8001b86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b88:	f7fe fce6 	bl	8000558 <__aeabi_f2d>
 8001b8c:	e9c7 0100 	strd	r0, r1, [r7]
 8001b90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b92:	f7fe fce1 	bl	8000558 <__aeabi_f2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001b9e:	ed97 7b00 	vldr	d7, [r7]
 8001ba2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001ba6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001baa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001bae:	e9cd 4500 	strd	r4, r5, [sp]
 8001bb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bb6:	4812      	ldr	r0, [pc, #72]	@ (8001c00 <curve_control+0x224>)
 8001bb8:	f005 fcd2 	bl	8007560 <iprintf>
	       gz_filtered, error, dt, delta_pwm, left_pwm, right_pwm);
}
 8001bbc:	bf00      	nop
 8001bbe:	3750      	adds	r7, #80	@ 0x50
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200003f4 	.word	0x200003f4
 8001bcc:	3f666666 	.word	0x3f666666
 8001bd0:	3dcccccd 	.word	0x3dcccccd
 8001bd4:	200003f8 	.word	0x200003f8
 8001bd8:	447a0000 	.word	0x447a0000
 8001bdc:	3c23d70a 	.word	0x3c23d70a
 8001be0:	3c23d70a 	.word	0x3c23d70a
 8001be4:	200003fc 	.word	0x200003fc
 8001be8:	20000400 	.word	0x20000400
 8001bec:	41200000 	.word	0x41200000
 8001bf0:	3d4ccccd 	.word	0x3d4ccccd
 8001bf4:	447a0000 	.word	0x447a0000
 8001bf8:	c47a0000 	.word	0xc47a0000
 8001bfc:	c47a0000 	.word	0xc47a0000
 8001c00:	0800afb4 	.word	0x0800afb4

08001c04 <read_gyroscope>:
	*ax = raw_ax / 16384.0f; // assuming ±2g range
	*ay = raw_ay / 16384.0f;
	*az = raw_az / 16384.0f;
}

void read_gyroscope(float *gx, float *gy, float *gz) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	@ 0x30
 8001c08:	af04      	add	r7, sp, #16
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
	uint8_t reg = 0x28 | 0x80;
 8001c10:	23a8      	movs	r3, #168	@ 0xa8
 8001c12:	77fb      	strb	r3, [r7, #31]
	uint8_t data[6] = { 0 };
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	809a      	strh	r2, [r3, #4]

	if (HAL_I2C_Mem_Read(&hi2c1, 0x6B << 1, reg, I2C_MEMADD_SIZE_8BIT, data, 6,
 8001c1e:	7ffb      	ldrb	r3, [r7, #31]
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	9302      	str	r3, [sp, #8]
 8001c28:	2306      	movs	r3, #6
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2301      	movs	r3, #1
 8001c34:	21d6      	movs	r1, #214	@ 0xd6
 8001c36:	482a      	ldr	r0, [pc, #168]	@ (8001ce0 <read_gyroscope+0xdc>)
 8001c38:	f001 fd90 	bl	800375c <HAL_I2C_Mem_Read>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00c      	beq.n	8001c5c <read_gyroscope+0x58>
			HAL_MAX_DELAY) != HAL_OK) {
		//printf("Gyro read failed\r\n");
		*gx = *gy = *gz = 0.0f;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e03e      	b.n	8001cda <read_gyroscope+0xd6>
		return;
	}

	int16_t raw_gx = (int16_t) (data[1] << 8 | data[0]);
 8001c5c:	7c7b      	ldrb	r3, [r7, #17]
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	7c3b      	ldrb	r3, [r7, #16]
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	83bb      	strh	r3, [r7, #28]
	int16_t raw_gy = (int16_t) (data[3] << 8 | data[2]);
 8001c6c:	7cfb      	ldrb	r3, [r7, #19]
 8001c6e:	b21b      	sxth	r3, r3
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	b21a      	sxth	r2, r3
 8001c74:	7cbb      	ldrb	r3, [r7, #18]
 8001c76:	b21b      	sxth	r3, r3
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	837b      	strh	r3, [r7, #26]
	int16_t raw_gz = (int16_t) (data[5] << 8 | data[4]);
 8001c7c:	7d7b      	ldrb	r3, [r7, #21]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	7d3b      	ldrb	r3, [r7, #20]
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	833b      	strh	r3, [r7, #24]

	*gx = raw_gx / 131.0f; // assuming ±250 dps range
 8001c8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c98:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001ce4 <read_gyroscope+0xe0>
 8001c9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	edc3 7a00 	vstr	s15, [r3]
	*gy = raw_gy / 131.0f;
 8001ca6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb2:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001ce4 <read_gyroscope+0xe0>
 8001cb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	edc3 7a00 	vstr	s15, [r3]
	*gz = raw_gz / 131.0f;
 8001cc0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ccc:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001ce4 <read_gyroscope+0xe0>
 8001cd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	edc3 7a00 	vstr	s15, [r3]
}
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200001f0 	.word	0x200001f0
 8001ce4:	43030000 	.word	0x43030000

08001ce8 <init_magnetometer>:
	*mx = raw_mx * 0.080f; // assuming ±4 Gauss (80 mG/LSB)
	*my = raw_my * 0.080f;
	*mz = raw_mz * 0.080f;
}

void init_magnetometer(void) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af04      	add	r7, sp, #16
	// CTRL5 (0x24): Enable temperature, set resolution, 6.25Hz output rate
	uint8_t ctrl5 = 0x94;  // 1001 0100
 8001cee:	2394      	movs	r3, #148	@ 0x94
 8001cf0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x1D << 1, 0x24, 1, &ctrl5, 1, HAL_MAX_DELAY);
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf6:	9302      	str	r3, [sp, #8]
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	1dfb      	adds	r3, r7, #7
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2301      	movs	r3, #1
 8001d02:	2224      	movs	r2, #36	@ 0x24
 8001d04:	213a      	movs	r1, #58	@ 0x3a
 8001d06:	4812      	ldr	r0, [pc, #72]	@ (8001d50 <init_magnetometer+0x68>)
 8001d08:	f001 fc2e 	bl	8003568 <HAL_I2C_Mem_Write>

	// CTRL6 (0x25): ±4 gauss range
	uint8_t ctrl6 = 0x00;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, 0x1D << 1, 0x25, 1, &ctrl6, 1, HAL_MAX_DELAY);
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
 8001d14:	9302      	str	r3, [sp, #8]
 8001d16:	2301      	movs	r3, #1
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	1dbb      	adds	r3, r7, #6
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	2225      	movs	r2, #37	@ 0x25
 8001d22:	213a      	movs	r1, #58	@ 0x3a
 8001d24:	480a      	ldr	r0, [pc, #40]	@ (8001d50 <init_magnetometer+0x68>)
 8001d26:	f001 fc1f 	bl	8003568 <HAL_I2C_Mem_Write>

	// CTRL7 (0x26): Continuous conversion mode
	uint8_t ctrl7 = 0x00;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0x1D << 1, 0x26, 1, &ctrl7, 1, HAL_MAX_DELAY);
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d32:	9302      	str	r3, [sp, #8]
 8001d34:	2301      	movs	r3, #1
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	1d7b      	adds	r3, r7, #5
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	2226      	movs	r2, #38	@ 0x26
 8001d40:	213a      	movs	r1, #58	@ 0x3a
 8001d42:	4803      	ldr	r0, [pc, #12]	@ (8001d50 <init_magnetometer+0x68>)
 8001d44:	f001 fc10 	bl	8003568 <HAL_I2C_Mem_Write>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200001f0 	.word	0x200001f0

08001d54 <init_accelerometer>:

void init_accelerometer(void) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af04      	add	r7, sp, #16
	// CTRL1 (0x20): 0x57 = 0b01010111 => 50Hz, all axes enabled
	uint8_t ctrl1 = 0x57;
 8001d5a:	2357      	movs	r3, #87	@ 0x57
 8001d5c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x1D << 1, 0x20, 1, &ctrl1, 1, HAL_MAX_DELAY);
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	9302      	str	r3, [sp, #8]
 8001d64:	2301      	movs	r3, #1
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	1dfb      	adds	r3, r7, #7
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	2220      	movs	r2, #32
 8001d70:	213a      	movs	r1, #58	@ 0x3a
 8001d72:	480b      	ldr	r0, [pc, #44]	@ (8001da0 <init_accelerometer+0x4c>)
 8001d74:	f001 fbf8 	bl	8003568 <HAL_I2C_Mem_Write>

	// CTRL2 (0x21): 0x00 = ±2g, default anti-alias filter
	uint8_t ctrl2 = 0x00;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, 0x1D << 1, 0x21, 1, &ctrl2, 1, HAL_MAX_DELAY);
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	9302      	str	r3, [sp, #8]
 8001d82:	2301      	movs	r3, #1
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	1dbb      	adds	r3, r7, #6
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	2221      	movs	r2, #33	@ 0x21
 8001d8e:	213a      	movs	r1, #58	@ 0x3a
 8001d90:	4803      	ldr	r0, [pc, #12]	@ (8001da0 <init_accelerometer+0x4c>)
 8001d92:	f001 fbe9 	bl	8003568 <HAL_I2C_Mem_Write>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200001f0 	.word	0x200001f0

08001da4 <init_gyroscope>:

void init_gyroscope(void) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af04      	add	r7, sp, #16
	// CTRL1 (0x20): 0x0F = Normal mode, all axes enabled, 95 Hz ODR
	uint8_t ctrl1 = 0x0F;
 8001daa:	230f      	movs	r3, #15
 8001dac:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x6B << 1, 0x20, 1, &ctrl1, 1, HAL_MAX_DELAY);
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	9302      	str	r3, [sp, #8]
 8001db4:	2301      	movs	r3, #1
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	1dfb      	adds	r3, r7, #7
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	21d6      	movs	r1, #214	@ 0xd6
 8001dc2:	480b      	ldr	r0, [pc, #44]	@ (8001df0 <init_gyroscope+0x4c>)
 8001dc4:	f001 fbd0 	bl	8003568 <HAL_I2C_Mem_Write>

	// CTRL4 (0x23): 0x00 = 250 dps (default)
	uint8_t ctrl4 = 0x00;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, 0x6B << 1, 0x23, 1, &ctrl4, 1, HAL_MAX_DELAY);
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd0:	9302      	str	r3, [sp, #8]
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	1dbb      	adds	r3, r7, #6
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2301      	movs	r3, #1
 8001ddc:	2223      	movs	r2, #35	@ 0x23
 8001dde:	21d6      	movs	r1, #214	@ 0xd6
 8001de0:	4803      	ldr	r0, [pc, #12]	@ (8001df0 <init_gyroscope+0x4c>)
 8001de2:	f001 fbc1 	bl	8003568 <HAL_I2C_Mem_Write>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	200001f0 	.word	0x200001f0

08001df4 <set_pwm>:

void set_pwm(float left_pwm, float right_pwm) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	ed87 0a01 	vstr	s0, [r7, #4]
 8001dfe:	edc7 0a00 	vstr	s1, [r7]
	// LEFT motor
	if (left_pwm >= 0) {
 8001e02:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	db06      	blt.n	8001e1e <set_pwm+0x2a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);  // Forward
 8001e10:	2200      	movs	r2, #0
 8001e12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e16:	482b      	ldr	r0, [pc, #172]	@ (8001ec4 <set_pwm+0xd0>)
 8001e18:	f001 fa48 	bl	80032ac <HAL_GPIO_WritePin>
 8001e1c:	e00b      	b.n	8001e36 <set_pwm+0x42>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);    // Backward
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e24:	4827      	ldr	r0, [pc, #156]	@ (8001ec4 <set_pwm+0xd0>)
 8001e26:	f001 fa41 	bl	80032ac <HAL_GPIO_WritePin>
		left_pwm = -left_pwm;
 8001e2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e2e:	eef1 7a67 	vneg.f32	s15, s15
 8001e32:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	// RIGHT motor
	if (right_pwm >= 0) {
 8001e36:	edd7 7a00 	vldr	s15, [r7]
 8001e3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	db06      	blt.n	8001e52 <set_pwm+0x5e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);  // Forward
 8001e44:	2200      	movs	r2, #0
 8001e46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e4a:	481e      	ldr	r0, [pc, #120]	@ (8001ec4 <set_pwm+0xd0>)
 8001e4c:	f001 fa2e 	bl	80032ac <HAL_GPIO_WritePin>
 8001e50:	e00b      	b.n	8001e6a <set_pwm+0x76>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);    // Backward
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e58:	481a      	ldr	r0, [pc, #104]	@ (8001ec4 <set_pwm+0xd0>)
 8001e5a:	f001 fa27 	bl	80032ac <HAL_GPIO_WritePin>
		right_pwm = -right_pwm;
 8001e5e:	edd7 7a00 	vldr	s15, [r7]
 8001e62:	eef1 7a67 	vneg.f32	s15, s15
 8001e66:	edc7 7a00 	vstr	s15, [r7]
	}

	// Clamp values
	if (left_pwm > 1000)
 8001e6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001ec8 <set_pwm+0xd4>
 8001e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7a:	dd01      	ble.n	8001e80 <set_pwm+0x8c>
		left_pwm = 1000;
 8001e7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ecc <set_pwm+0xd8>)
 8001e7e:	607b      	str	r3, [r7, #4]
	if (right_pwm > 1000)
 8001e80:	edd7 7a00 	vldr	s15, [r7]
 8001e84:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001ec8 <set_pwm+0xd4>
 8001e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e90:	dd01      	ble.n	8001e96 <set_pwm+0xa2>
		right_pwm = 1000;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <set_pwm+0xd8>)
 8001e94:	603b      	str	r3, [r7, #0]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, left_pwm/1);   // LEFT (TIM4_CH1)
 8001e96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <set_pwm+0xdc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea2:	ee17 2a90 	vmov	r2, s15
 8001ea6:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, right_pwm/1); // RIGHT (TIM3_CH2)
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <set_pwm+0xe0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	edd7 7a00 	vldr	s15, [r7]
 8001eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eb4:	ee17 2a90 	vmov	r2, s15
 8001eb8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	447a0000 	.word	0x447a0000
 8001ecc:	447a0000 	.word	0x447a0000
 8001ed0:	2000028c 	.word	0x2000028c
 8001ed4:	20000244 	.word	0x20000244

08001ed8 <BT_Transmit>:

void BT_Transmit(char * str)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7fe f9cd 	bl	8000280 <strlen>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4803      	ldr	r0, [pc, #12]	@ (8001f00 <BT_Transmit+0x28>)
 8001ef2:	f003 fe4d 	bl	8005b90 <HAL_UART_Transmit>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000031c 	.word	0x2000031c

08001f04 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001f0c:	1d39      	adds	r1, r7, #4
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	2201      	movs	r2, #1
 8001f14:	4803      	ldr	r0, [pc, #12]	@ (8001f24 <__io_putchar+0x20>)
 8001f16:	f003 fe3b 	bl	8005b90 <HAL_UART_Transmit>
	return ch;
 8001f1a:	687b      	ldr	r3, [r7, #4]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200002d4 	.word	0x200002d4

08001f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f2c:	b672      	cpsid	i
}
 8001f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <Error_Handler+0x8>

08001f34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	4a0f      	ldr	r2, [pc, #60]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	4a08      	ldr	r2, [pc, #32]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_MspInit+0x4c>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f72:	2007      	movs	r0, #7
 8001f74:	f000 fc64 	bl	8002840 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40023800 	.word	0x40023800

08001f84 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	@ 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a19      	ldr	r2, [pc, #100]	@ (8002008 <HAL_I2C_MspInit+0x84>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d12c      	bne.n	8002000 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	4b18      	ldr	r3, [pc, #96]	@ (800200c <HAL_I2C_MspInit+0x88>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	4a17      	ldr	r2, [pc, #92]	@ (800200c <HAL_I2C_MspInit+0x88>)
 8001fb0:	f043 0302 	orr.w	r3, r3, #2
 8001fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <HAL_I2C_MspInit+0x88>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc8:	2312      	movs	r3, #18
 8001fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	480c      	ldr	r0, [pc, #48]	@ (8002010 <HAL_I2C_MspInit+0x8c>)
 8001fe0:	f000 ffe0 	bl	8002fa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	4b08      	ldr	r3, [pc, #32]	@ (800200c <HAL_I2C_MspInit+0x88>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	4a07      	ldr	r2, [pc, #28]	@ (800200c <HAL_I2C_MspInit+0x88>)
 8001fee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ff2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff4:	4b05      	ldr	r3, [pc, #20]	@ (800200c <HAL_I2C_MspInit+0x88>)
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002000:	bf00      	nop
 8002002:	3728      	adds	r7, #40	@ 0x28
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40005400 	.word	0x40005400
 800200c:	40023800 	.word	0x40023800
 8002010:	40020400 	.word	0x40020400

08002014 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0b      	ldr	r2, [pc, #44]	@ (8002050 <HAL_TIM_PWM_MspInit+0x3c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d10d      	bne.n	8002042 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <HAL_TIM_PWM_MspInit+0x40>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	4a09      	ldr	r2, [pc, #36]	@ (8002054 <HAL_TIM_PWM_MspInit+0x40>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	6413      	str	r3, [r2, #64]	@ 0x40
 8002036:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <HAL_TIM_PWM_MspInit+0x40>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40000400 	.word	0x40000400
 8002054:	40023800 	.word	0x40023800

08002058 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0b      	ldr	r2, [pc, #44]	@ (8002094 <HAL_TIM_Base_MspInit+0x3c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10d      	bne.n	8002086 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <HAL_TIM_Base_MspInit+0x40>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <HAL_TIM_Base_MspInit+0x40>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6413      	str	r3, [r2, #64]	@ 0x40
 800207a:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <HAL_TIM_Base_MspInit+0x40>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40000800 	.word	0x40000800
 8002098:	40023800 	.word	0x40023800

0800209c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	@ 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a24      	ldr	r2, [pc, #144]	@ (800214c <HAL_TIM_MspPostInit+0xb0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d11e      	bne.n	80020fc <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <HAL_TIM_MspPostInit+0xb4>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	4a22      	ldr	r2, [pc, #136]	@ (8002150 <HAL_TIM_MspPostInit+0xb4>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ce:	4b20      	ldr	r3, [pc, #128]	@ (8002150 <HAL_TIM_MspPostInit+0xb4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020da:	2380      	movs	r3, #128	@ 0x80
 80020dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020ea:	2302      	movs	r3, #2
 80020ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4619      	mov	r1, r3
 80020f4:	4817      	ldr	r0, [pc, #92]	@ (8002154 <HAL_TIM_MspPostInit+0xb8>)
 80020f6:	f000 ff55 	bl	8002fa4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020fa:	e022      	b.n	8002142 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a15      	ldr	r2, [pc, #84]	@ (8002158 <HAL_TIM_MspPostInit+0xbc>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d11d      	bne.n	8002142 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_TIM_MspPostInit+0xb4>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	4a10      	ldr	r2, [pc, #64]	@ (8002150 <HAL_TIM_MspPostInit+0xb4>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6313      	str	r3, [r2, #48]	@ 0x30
 8002116:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <HAL_TIM_MspPostInit+0xb4>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002122:	2340      	movs	r3, #64	@ 0x40
 8002124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002132:	2302      	movs	r3, #2
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	4807      	ldr	r0, [pc, #28]	@ (800215c <HAL_TIM_MspPostInit+0xc0>)
 800213e:	f000 ff31 	bl	8002fa4 <HAL_GPIO_Init>
}
 8002142:	bf00      	nop
 8002144:	3728      	adds	r7, #40	@ 0x28
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40000400 	.word	0x40000400
 8002150:	40023800 	.word	0x40023800
 8002154:	40020800 	.word	0x40020800
 8002158:	40000800 	.word	0x40000800
 800215c:	40020400 	.word	0x40020400

08002160 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	@ 0x30
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 031c 	add.w	r3, r7, #28
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a58      	ldr	r2, [pc, #352]	@ (80022e0 <HAL_UART_MspInit+0x180>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d12c      	bne.n	80021dc <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	4b57      	ldr	r3, [pc, #348]	@ (80022e4 <HAL_UART_MspInit+0x184>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	4a56      	ldr	r2, [pc, #344]	@ (80022e4 <HAL_UART_MspInit+0x184>)
 800218c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002190:	6413      	str	r3, [r2, #64]	@ 0x40
 8002192:	4b54      	ldr	r3, [pc, #336]	@ (80022e4 <HAL_UART_MspInit+0x184>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	4b50      	ldr	r3, [pc, #320]	@ (80022e4 <HAL_UART_MspInit+0x184>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	4a4f      	ldr	r2, [pc, #316]	@ (80022e4 <HAL_UART_MspInit+0x184>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ae:	4b4d      	ldr	r3, [pc, #308]	@ (80022e4 <HAL_UART_MspInit+0x184>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021ba:	230c      	movs	r3, #12
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021ca:	2307      	movs	r3, #7
 80021cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f107 031c 	add.w	r3, r7, #28
 80021d2:	4619      	mov	r1, r3
 80021d4:	4844      	ldr	r0, [pc, #272]	@ (80022e8 <HAL_UART_MspInit+0x188>)
 80021d6:	f000 fee5 	bl	8002fa4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80021da:	e07d      	b.n	80022d8 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART6)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a42      	ldr	r2, [pc, #264]	@ (80022ec <HAL_UART_MspInit+0x18c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d178      	bne.n	80022d8 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART6_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	4b3e      	ldr	r3, [pc, #248]	@ (80022e4 <HAL_UART_MspInit+0x184>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	4a3d      	ldr	r2, [pc, #244]	@ (80022e4 <HAL_UART_MspInit+0x184>)
 80021f0:	f043 0320 	orr.w	r3, r3, #32
 80021f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021f6:	4b3b      	ldr	r3, [pc, #236]	@ (80022e4 <HAL_UART_MspInit+0x184>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b37      	ldr	r3, [pc, #220]	@ (80022e4 <HAL_UART_MspInit+0x184>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a36      	ldr	r2, [pc, #216]	@ (80022e4 <HAL_UART_MspInit+0x184>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b34      	ldr	r3, [pc, #208]	@ (80022e4 <HAL_UART_MspInit+0x184>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	4b30      	ldr	r3, [pc, #192]	@ (80022e4 <HAL_UART_MspInit+0x184>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a2f      	ldr	r2, [pc, #188]	@ (80022e4 <HAL_UART_MspInit+0x184>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b2d      	ldr	r3, [pc, #180]	@ (80022e4 <HAL_UART_MspInit+0x184>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800223a:	2340      	movs	r3, #64	@ 0x40
 800223c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002246:	2303      	movs	r3, #3
 8002248:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800224a:	2308      	movs	r3, #8
 800224c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224e:	f107 031c 	add.w	r3, r7, #28
 8002252:	4619      	mov	r1, r3
 8002254:	4826      	ldr	r0, [pc, #152]	@ (80022f0 <HAL_UART_MspInit+0x190>)
 8002256:	f000 fea5 	bl	8002fa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800225a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002268:	2303      	movs	r3, #3
 800226a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800226c:	2308      	movs	r3, #8
 800226e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	4619      	mov	r1, r3
 8002276:	481c      	ldr	r0, [pc, #112]	@ (80022e8 <HAL_UART_MspInit+0x188>)
 8002278:	f000 fe94 	bl	8002fa4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800227c:	4b1d      	ldr	r3, [pc, #116]	@ (80022f4 <HAL_UART_MspInit+0x194>)
 800227e:	4a1e      	ldr	r2, [pc, #120]	@ (80022f8 <HAL_UART_MspInit+0x198>)
 8002280:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002282:	4b1c      	ldr	r3, [pc, #112]	@ (80022f4 <HAL_UART_MspInit+0x194>)
 8002284:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002288:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800228a:	4b1a      	ldr	r3, [pc, #104]	@ (80022f4 <HAL_UART_MspInit+0x194>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002290:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <HAL_UART_MspInit+0x194>)
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002296:	4b17      	ldr	r3, [pc, #92]	@ (80022f4 <HAL_UART_MspInit+0x194>)
 8002298:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800229c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800229e:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <HAL_UART_MspInit+0x194>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022a4:	4b13      	ldr	r3, [pc, #76]	@ (80022f4 <HAL_UART_MspInit+0x194>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80022aa:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_UART_MspInit+0x194>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022b0:	4b10      	ldr	r3, [pc, #64]	@ (80022f4 <HAL_UART_MspInit+0x194>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022b6:	4b0f      	ldr	r3, [pc, #60]	@ (80022f4 <HAL_UART_MspInit+0x194>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80022bc:	480d      	ldr	r0, [pc, #52]	@ (80022f4 <HAL_UART_MspInit+0x194>)
 80022be:	f000 fb01 	bl	80028c4 <HAL_DMA_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_UART_MspInit+0x16c>
      Error_Handler();
 80022c8:	f7ff fe2e 	bl	8001f28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a09      	ldr	r2, [pc, #36]	@ (80022f4 <HAL_UART_MspInit+0x194>)
 80022d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022d2:	4a08      	ldr	r2, [pc, #32]	@ (80022f4 <HAL_UART_MspInit+0x194>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80022d8:	bf00      	nop
 80022da:	3730      	adds	r7, #48	@ 0x30
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40004400 	.word	0x40004400
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40020000 	.word	0x40020000
 80022ec:	40011400 	.word	0x40011400
 80022f0:	40020800 	.word	0x40020800
 80022f4:	20000364 	.word	0x20000364
 80022f8:	40026428 	.word	0x40026428

080022fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <NMI_Handler+0x4>

08002304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <HardFault_Handler+0x4>

0800230c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <MemManage_Handler+0x4>

08002314 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002318:	bf00      	nop
 800231a:	e7fd      	b.n	8002318 <BusFault_Handler+0x4>

0800231c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002320:	bf00      	nop
 8002322:	e7fd      	b.n	8002320 <UsageFault_Handler+0x4>

08002324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002352:	f000 f961 	bl	8002618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002360:	4802      	ldr	r0, [pc, #8]	@ (800236c <DMA2_Stream1_IRQHandler+0x10>)
 8002362:	f000 fbb5 	bl	8002ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000364 	.word	0x20000364

08002370 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return 1;
 8002374:	2301      	movs	r3, #1
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <_kill>:

int _kill(int pid, int sig)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800238a:	f005 faa5 	bl	80078d8 <__errno>
 800238e:	4603      	mov	r3, r0
 8002390:	2216      	movs	r2, #22
 8002392:	601a      	str	r2, [r3, #0]
  return -1;
 8002394:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_exit>:

void _exit (int status)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ffe7 	bl	8002380 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023b2:	bf00      	nop
 80023b4:	e7fd      	b.n	80023b2 <_exit+0x12>

080023b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e00a      	b.n	80023de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023c8:	f3af 8000 	nop.w
 80023cc:	4601      	mov	r1, r0
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	60ba      	str	r2, [r7, #8]
 80023d4:	b2ca      	uxtb	r2, r1
 80023d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3301      	adds	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	dbf0      	blt.n	80023c8 <_read+0x12>
  }

  return len;
 80023e6:	687b      	ldr	r3, [r7, #4]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	e009      	b.n	8002416 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	60ba      	str	r2, [r7, #8]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fd7a 	bl	8001f04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3301      	adds	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	dbf1      	blt.n	8002402 <_write+0x12>
  }
  return len;
 800241e:	687b      	ldr	r3, [r7, #4]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_close>:

int _close(int file)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002450:	605a      	str	r2, [r3, #4]
  return 0;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <_isatty>:

int _isatty(int file)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002468:	2301      	movs	r3, #1
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002498:	4a14      	ldr	r2, [pc, #80]	@ (80024ec <_sbrk+0x5c>)
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <_sbrk+0x60>)
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a4:	4b13      	ldr	r3, [pc, #76]	@ (80024f4 <_sbrk+0x64>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024ac:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <_sbrk+0x64>)
 80024ae:	4a12      	ldr	r2, [pc, #72]	@ (80024f8 <_sbrk+0x68>)
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d207      	bcs.n	80024d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c0:	f005 fa0a 	bl	80078d8 <__errno>
 80024c4:	4603      	mov	r3, r0
 80024c6:	220c      	movs	r2, #12
 80024c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295
 80024ce:	e009      	b.n	80024e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d0:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <_sbrk+0x64>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024d6:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <_sbrk+0x64>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	4a05      	ldr	r2, [pc, #20]	@ (80024f4 <_sbrk+0x64>)
 80024e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024e2:	68fb      	ldr	r3, [r7, #12]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20018000 	.word	0x20018000
 80024f0:	00000400 	.word	0x00000400
 80024f4:	20000404 	.word	0x20000404
 80024f8:	20000558 	.word	0x20000558

080024fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002500:	4b06      	ldr	r3, [pc, #24]	@ (800251c <SystemInit+0x20>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002506:	4a05      	ldr	r2, [pc, #20]	@ (800251c <SystemInit+0x20>)
 8002508:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800250c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002520:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002558 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002524:	f7ff ffea 	bl	80024fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002528:	480c      	ldr	r0, [pc, #48]	@ (800255c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800252a:	490d      	ldr	r1, [pc, #52]	@ (8002560 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800252c:	4a0d      	ldr	r2, [pc, #52]	@ (8002564 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800252e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002530:	e002      	b.n	8002538 <LoopCopyDataInit>

08002532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002536:	3304      	adds	r3, #4

08002538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800253c:	d3f9      	bcc.n	8002532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253e:	4a0a      	ldr	r2, [pc, #40]	@ (8002568 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002540:	4c0a      	ldr	r4, [pc, #40]	@ (800256c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002544:	e001      	b.n	800254a <LoopFillZerobss>

08002546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002548:	3204      	adds	r2, #4

0800254a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800254c:	d3fb      	bcc.n	8002546 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800254e:	f005 f9c9 	bl	80078e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002552:	f7fe fe35 	bl	80011c0 <main>
  bx  lr    
 8002556:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002558:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800255c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002560:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002564:	0800b454 	.word	0x0800b454
  ldr r2, =_sbss
 8002568:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800256c:	20000558 	.word	0x20000558

08002570 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002570:	e7fe      	b.n	8002570 <ADC_IRQHandler>
	...

08002574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002578:	4b0e      	ldr	r3, [pc, #56]	@ (80025b4 <HAL_Init+0x40>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0d      	ldr	r2, [pc, #52]	@ (80025b4 <HAL_Init+0x40>)
 800257e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002584:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <HAL_Init+0x40>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0a      	ldr	r2, [pc, #40]	@ (80025b4 <HAL_Init+0x40>)
 800258a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800258e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002590:	4b08      	ldr	r3, [pc, #32]	@ (80025b4 <HAL_Init+0x40>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a07      	ldr	r2, [pc, #28]	@ (80025b4 <HAL_Init+0x40>)
 8002596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800259a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800259c:	2003      	movs	r0, #3
 800259e:	f000 f94f 	bl	8002840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a2:	2000      	movs	r0, #0
 80025a4:	f000 f808 	bl	80025b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a8:	f7ff fcc4 	bl	8001f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40023c00 	.word	0x40023c00

080025b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c0:	4b12      	ldr	r3, [pc, #72]	@ (800260c <HAL_InitTick+0x54>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_InitTick+0x58>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f967 	bl	80028aa <HAL_SYSTICK_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00e      	b.n	8002604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b0f      	cmp	r3, #15
 80025ea:	d80a      	bhi.n	8002602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ec:	2200      	movs	r2, #0
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	f000 f92f 	bl	8002856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f8:	4a06      	ldr	r2, [pc, #24]	@ (8002614 <HAL_InitTick+0x5c>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	e000      	b.n	8002604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000000 	.word	0x20000000
 8002610:	20000008 	.word	0x20000008
 8002614:	20000004 	.word	0x20000004

08002618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800261c:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_IncTick+0x20>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	4b06      	ldr	r3, [pc, #24]	@ (800263c <HAL_IncTick+0x24>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4413      	add	r3, r2
 8002628:	4a04      	ldr	r2, [pc, #16]	@ (800263c <HAL_IncTick+0x24>)
 800262a:	6013      	str	r3, [r2, #0]
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000008 	.word	0x20000008
 800263c:	20000408 	.word	0x20000408

08002640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return uwTick;
 8002644:	4b03      	ldr	r3, [pc, #12]	@ (8002654 <HAL_GetTick+0x14>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000408 	.word	0x20000408

08002658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff ffee 	bl	8002640 <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d005      	beq.n	800267e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002672:	4b0a      	ldr	r3, [pc, #40]	@ (800269c <HAL_Delay+0x44>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4413      	add	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800267e:	bf00      	nop
 8002680:	f7ff ffde 	bl	8002640 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	429a      	cmp	r2, r3
 800268e:	d8f7      	bhi.n	8002680 <HAL_Delay+0x28>
  {
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000008 	.word	0x20000008

080026a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b0:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026bc:	4013      	ands	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d2:	4a04      	ldr	r2, [pc, #16]	@ (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	60d3      	str	r3, [r2, #12]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ec:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <__NVIC_GetPriorityGrouping+0x18>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	f003 0307 	and.w	r3, r3, #7
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	2b00      	cmp	r3, #0
 8002714:	db0b      	blt.n	800272e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	4907      	ldr	r1, [pc, #28]	@ (800273c <__NVIC_EnableIRQ+0x38>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2001      	movs	r0, #1
 8002726:	fa00 f202 	lsl.w	r2, r0, r2
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000e100 	.word	0xe000e100

08002740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	6039      	str	r1, [r7, #0]
 800274a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	2b00      	cmp	r3, #0
 8002752:	db0a      	blt.n	800276a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	b2da      	uxtb	r2, r3
 8002758:	490c      	ldr	r1, [pc, #48]	@ (800278c <__NVIC_SetPriority+0x4c>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	440b      	add	r3, r1
 8002764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002768:	e00a      	b.n	8002780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4908      	ldr	r1, [pc, #32]	@ (8002790 <__NVIC_SetPriority+0x50>)
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	3b04      	subs	r3, #4
 8002778:	0112      	lsls	r2, r2, #4
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	440b      	add	r3, r1
 800277e:	761a      	strb	r2, [r3, #24]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000e100 	.word	0xe000e100
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	@ 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f1c3 0307 	rsb	r3, r3, #7
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	bf28      	it	cs
 80027b2:	2304      	movcs	r3, #4
 80027b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2b06      	cmp	r3, #6
 80027bc:	d902      	bls.n	80027c4 <NVIC_EncodePriority+0x30>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3b03      	subs	r3, #3
 80027c2:	e000      	b.n	80027c6 <NVIC_EncodePriority+0x32>
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	401a      	ands	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027dc:	f04f 31ff 	mov.w	r1, #4294967295
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	43d9      	mvns	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	4313      	orrs	r3, r2
         );
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3724      	adds	r7, #36	@ 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800280c:	d301      	bcc.n	8002812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280e:	2301      	movs	r3, #1
 8002810:	e00f      	b.n	8002832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002812:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <SysTick_Config+0x40>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281a:	210f      	movs	r1, #15
 800281c:	f04f 30ff 	mov.w	r0, #4294967295
 8002820:	f7ff ff8e 	bl	8002740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002824:	4b05      	ldr	r3, [pc, #20]	@ (800283c <SysTick_Config+0x40>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282a:	4b04      	ldr	r3, [pc, #16]	@ (800283c <SysTick_Config+0x40>)
 800282c:	2207      	movs	r2, #7
 800282e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	e000e010 	.word	0xe000e010

08002840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ff29 	bl	80026a0 <__NVIC_SetPriorityGrouping>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002868:	f7ff ff3e 	bl	80026e8 <__NVIC_GetPriorityGrouping>
 800286c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7ff ff8e 	bl	8002794 <NVIC_EncodePriority>
 8002878:	4602      	mov	r2, r0
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff5d 	bl	8002740 <__NVIC_SetPriority>
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff31 	bl	8002704 <__NVIC_EnableIRQ>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ffa2 	bl	80027fc <SysTick_Config>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff feb6 	bl	8002640 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e099      	b.n	8002a14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002900:	e00f      	b.n	8002922 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002902:	f7ff fe9d 	bl	8002640 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b05      	cmp	r3, #5
 800290e:	d908      	bls.n	8002922 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2203      	movs	r2, #3
 800291a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e078      	b.n	8002a14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1e8      	bne.n	8002902 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4b38      	ldr	r3, [pc, #224]	@ (8002a1c <HAL_DMA_Init+0x158>)
 800293c:	4013      	ands	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800294e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002966:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	2b04      	cmp	r3, #4
 800297a:	d107      	bne.n	800298c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	4313      	orrs	r3, r2
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f023 0307 	bic.w	r3, r3, #7
 80029a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d117      	bne.n	80029e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fa6f 	bl	8002eac <DMA_CheckFifoParam>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2240      	movs	r2, #64	@ 0x40
 80029d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80029e2:	2301      	movs	r3, #1
 80029e4:	e016      	b.n	8002a14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fa26 	bl	8002e40 <DMA_CalcBaseAndBitshift>
 80029f4:	4603      	mov	r3, r0
 80029f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fc:	223f      	movs	r2, #63	@ 0x3f
 80029fe:	409a      	lsls	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	f010803f 	.word	0xf010803f

08002a20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_DMA_Start_IT+0x26>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e040      	b.n	8002ac8 <HAL_DMA_Start_IT+0xa8>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d12f      	bne.n	8002aba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f9b8 	bl	8002de4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a78:	223f      	movs	r2, #63	@ 0x3f
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0216 	orr.w	r2, r2, #22
 8002a8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d007      	beq.n	8002aa8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0208 	orr.w	r2, r2, #8
 8002aa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	e005      	b.n	8002ac6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002adc:	4b8e      	ldr	r3, [pc, #568]	@ (8002d18 <HAL_DMA_IRQHandler+0x248>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a8e      	ldr	r2, [pc, #568]	@ (8002d1c <HAL_DMA_IRQHandler+0x24c>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	0a9b      	lsrs	r3, r3, #10
 8002ae8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afa:	2208      	movs	r2, #8
 8002afc:	409a      	lsls	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d01a      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0204 	bic.w	r2, r2, #4
 8002b22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b28:	2208      	movs	r2, #8
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b34:	f043 0201 	orr.w	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b40:	2201      	movs	r2, #1
 8002b42:	409a      	lsls	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d012      	beq.n	8002b72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5e:	2201      	movs	r2, #1
 8002b60:	409a      	lsls	r2, r3
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6a:	f043 0202 	orr.w	r2, r3, #2
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b76:	2204      	movs	r2, #4
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d012      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00b      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b94:	2204      	movs	r2, #4
 8002b96:	409a      	lsls	r2, r3
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba0:	f043 0204 	orr.w	r2, r3, #4
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bac:	2210      	movs	r2, #16
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d043      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d03c      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bca:	2210      	movs	r2, #16
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d018      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d108      	bne.n	8002c00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d024      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	4798      	blx	r3
 8002bfe:	e01f      	b.n	8002c40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01b      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	4798      	blx	r3
 8002c10:	e016      	b.n	8002c40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d107      	bne.n	8002c30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0208 	bic.w	r2, r2, #8
 8002c2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c44:	2220      	movs	r2, #32
 8002c46:	409a      	lsls	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 808f 	beq.w	8002d70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8087 	beq.w	8002d70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c66:	2220      	movs	r2, #32
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	d136      	bne.n	8002ce8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0216 	bic.w	r2, r2, #22
 8002c88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <HAL_DMA_IRQHandler+0x1da>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d007      	beq.n	8002cba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0208 	bic.w	r2, r2, #8
 8002cb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbe:	223f      	movs	r2, #63	@ 0x3f
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d07e      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
        }
        return;
 8002ce6:	e079      	b.n	8002ddc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01d      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10d      	bne.n	8002d20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d031      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
 8002d14:	e02c      	b.n	8002d70 <HAL_DMA_IRQHandler+0x2a0>
 8002d16:	bf00      	nop
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d023      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
 8002d30:	e01e      	b.n	8002d70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10f      	bne.n	8002d60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0210 	bic.w	r2, r2, #16
 8002d4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d032      	beq.n	8002dde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d022      	beq.n	8002dca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2205      	movs	r2, #5
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0201 	bic.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d307      	bcc.n	8002db8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f2      	bne.n	8002d9c <HAL_DMA_IRQHandler+0x2cc>
 8002db6:	e000      	b.n	8002dba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002db8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
 8002dda:	e000      	b.n	8002dde <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ddc:	bf00      	nop
    }
  }
}
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b40      	cmp	r3, #64	@ 0x40
 8002e10:	d108      	bne.n	8002e24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e22:	e007      	b.n	8002e34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	60da      	str	r2, [r3, #12]
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	3b10      	subs	r3, #16
 8002e50:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <DMA_CalcBaseAndBitshift+0x64>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e5a:	4a13      	ldr	r2, [pc, #76]	@ (8002ea8 <DMA_CalcBaseAndBitshift+0x68>)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4413      	add	r3, r2
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d909      	bls.n	8002e82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e76:	f023 0303 	bic.w	r3, r3, #3
 8002e7a:	1d1a      	adds	r2, r3, #4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e80:	e007      	b.n	8002e92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	aaaaaaab 	.word	0xaaaaaaab
 8002ea8:	0800b010 	.word	0x0800b010

08002eac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11f      	bne.n	8002f06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d856      	bhi.n	8002f7a <DMA_CheckFifoParam+0xce>
 8002ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed4 <DMA_CheckFifoParam+0x28>)
 8002ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed2:	bf00      	nop
 8002ed4:	08002ee5 	.word	0x08002ee5
 8002ed8:	08002ef7 	.word	0x08002ef7
 8002edc:	08002ee5 	.word	0x08002ee5
 8002ee0:	08002f7b 	.word	0x08002f7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d046      	beq.n	8002f7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef4:	e043      	b.n	8002f7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002efe:	d140      	bne.n	8002f82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f04:	e03d      	b.n	8002f82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f0e:	d121      	bne.n	8002f54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d837      	bhi.n	8002f86 <DMA_CheckFifoParam+0xda>
 8002f16:	a201      	add	r2, pc, #4	@ (adr r2, 8002f1c <DMA_CheckFifoParam+0x70>)
 8002f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1c:	08002f2d 	.word	0x08002f2d
 8002f20:	08002f33 	.word	0x08002f33
 8002f24:	08002f2d 	.word	0x08002f2d
 8002f28:	08002f45 	.word	0x08002f45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f30:	e030      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d025      	beq.n	8002f8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f42:	e022      	b.n	8002f8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f4c:	d11f      	bne.n	8002f8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f52:	e01c      	b.n	8002f8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d903      	bls.n	8002f62 <DMA_CheckFifoParam+0xb6>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d003      	beq.n	8002f68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f60:	e018      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
      break;
 8002f66:	e015      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00e      	beq.n	8002f92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      break;
 8002f78:	e00b      	b.n	8002f92 <DMA_CheckFifoParam+0xe6>
      break;
 8002f7a:	bf00      	nop
 8002f7c:	e00a      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      break;
 8002f7e:	bf00      	nop
 8002f80:	e008      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      break;
 8002f82:	bf00      	nop
 8002f84:	e006      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      break;
 8002f86:	bf00      	nop
 8002f88:	e004      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e002      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f8e:	bf00      	nop
 8002f90:	e000      	b.n	8002f94 <DMA_CheckFifoParam+0xe8>
      break;
 8002f92:	bf00      	nop
    }
  } 
  
  return status; 
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop

08002fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	@ 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	e159      	b.n	8003274 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	f040 8148 	bne.w	800326e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d005      	beq.n	8002ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d130      	bne.n	8003058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	2203      	movs	r2, #3
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800302c:	2201      	movs	r2, #1
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 0201 	and.w	r2, r3, #1
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b03      	cmp	r3, #3
 8003062:	d017      	beq.n	8003094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2203      	movs	r2, #3
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d123      	bne.n	80030e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	220f      	movs	r2, #15
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	08da      	lsrs	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3208      	adds	r2, #8
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2203      	movs	r2, #3
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0203 	and.w	r2, r3, #3
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80a2 	beq.w	800326e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	4b57      	ldr	r3, [pc, #348]	@ (800328c <HAL_GPIO_Init+0x2e8>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003132:	4a56      	ldr	r2, [pc, #344]	@ (800328c <HAL_GPIO_Init+0x2e8>)
 8003134:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003138:	6453      	str	r3, [r2, #68]	@ 0x44
 800313a:	4b54      	ldr	r3, [pc, #336]	@ (800328c <HAL_GPIO_Init+0x2e8>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003146:	4a52      	ldr	r2, [pc, #328]	@ (8003290 <HAL_GPIO_Init+0x2ec>)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	3302      	adds	r3, #2
 800314e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	220f      	movs	r2, #15
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a49      	ldr	r2, [pc, #292]	@ (8003294 <HAL_GPIO_Init+0x2f0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d019      	beq.n	80031a6 <HAL_GPIO_Init+0x202>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a48      	ldr	r2, [pc, #288]	@ (8003298 <HAL_GPIO_Init+0x2f4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <HAL_GPIO_Init+0x1fe>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a47      	ldr	r2, [pc, #284]	@ (800329c <HAL_GPIO_Init+0x2f8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00d      	beq.n	800319e <HAL_GPIO_Init+0x1fa>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a46      	ldr	r2, [pc, #280]	@ (80032a0 <HAL_GPIO_Init+0x2fc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <HAL_GPIO_Init+0x1f6>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a45      	ldr	r2, [pc, #276]	@ (80032a4 <HAL_GPIO_Init+0x300>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <HAL_GPIO_Init+0x1f2>
 8003192:	2304      	movs	r3, #4
 8003194:	e008      	b.n	80031a8 <HAL_GPIO_Init+0x204>
 8003196:	2307      	movs	r3, #7
 8003198:	e006      	b.n	80031a8 <HAL_GPIO_Init+0x204>
 800319a:	2303      	movs	r3, #3
 800319c:	e004      	b.n	80031a8 <HAL_GPIO_Init+0x204>
 800319e:	2302      	movs	r3, #2
 80031a0:	e002      	b.n	80031a8 <HAL_GPIO_Init+0x204>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_GPIO_Init+0x204>
 80031a6:	2300      	movs	r3, #0
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	f002 0203 	and.w	r2, r2, #3
 80031ae:	0092      	lsls	r2, r2, #2
 80031b0:	4093      	lsls	r3, r2
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031b8:	4935      	ldr	r1, [pc, #212]	@ (8003290 <HAL_GPIO_Init+0x2ec>)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	3302      	adds	r3, #2
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031c6:	4b38      	ldr	r3, [pc, #224]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ea:	4a2f      	ldr	r2, [pc, #188]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f0:	4b2d      	ldr	r3, [pc, #180]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003214:	4a24      	ldr	r2, [pc, #144]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800321a:	4b23      	ldr	r3, [pc, #140]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800323e:	4a1a      	ldr	r2, [pc, #104]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003244:	4b18      	ldr	r3, [pc, #96]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003268:	4a0f      	ldr	r2, [pc, #60]	@ (80032a8 <HAL_GPIO_Init+0x304>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3301      	adds	r3, #1
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b0f      	cmp	r3, #15
 8003278:	f67f aea2 	bls.w	8002fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3724      	adds	r7, #36	@ 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	40013800 	.word	0x40013800
 8003294:	40020000 	.word	0x40020000
 8003298:	40020400 	.word	0x40020400
 800329c:	40020800 	.word	0x40020800
 80032a0:	40020c00 	.word	0x40020c00
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40013c00 	.word	0x40013c00

080032ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	807b      	strh	r3, [r7, #2]
 80032b8:	4613      	mov	r3, r2
 80032ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032bc:	787b      	ldrb	r3, [r7, #1]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032c2:	887a      	ldrh	r2, [r7, #2]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032c8:	e003      	b.n	80032d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ca:	887b      	ldrh	r3, [r7, #2]
 80032cc:	041a      	lsls	r2, r3, #16
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	619a      	str	r2, [r3, #24]
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e12b      	b.n	800354a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fe fe3c 	bl	8001f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2224      	movs	r2, #36	@ 0x24
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003332:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003342:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003344:	f001 fd8e 	bl	8004e64 <HAL_RCC_GetPCLK1Freq>
 8003348:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4a81      	ldr	r2, [pc, #516]	@ (8003554 <HAL_I2C_Init+0x274>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d807      	bhi.n	8003364 <HAL_I2C_Init+0x84>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4a80      	ldr	r2, [pc, #512]	@ (8003558 <HAL_I2C_Init+0x278>)
 8003358:	4293      	cmp	r3, r2
 800335a:	bf94      	ite	ls
 800335c:	2301      	movls	r3, #1
 800335e:	2300      	movhi	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e006      	b.n	8003372 <HAL_I2C_Init+0x92>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4a7d      	ldr	r2, [pc, #500]	@ (800355c <HAL_I2C_Init+0x27c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	bf94      	ite	ls
 800336c:	2301      	movls	r3, #1
 800336e:	2300      	movhi	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0e7      	b.n	800354a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4a78      	ldr	r2, [pc, #480]	@ (8003560 <HAL_I2C_Init+0x280>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	0c9b      	lsrs	r3, r3, #18
 8003384:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003554 <HAL_I2C_Init+0x274>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d802      	bhi.n	80033b4 <HAL_I2C_Init+0xd4>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	3301      	adds	r3, #1
 80033b2:	e009      	b.n	80033c8 <HAL_I2C_Init+0xe8>
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	4a69      	ldr	r2, [pc, #420]	@ (8003564 <HAL_I2C_Init+0x284>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	099b      	lsrs	r3, r3, #6
 80033c6:	3301      	adds	r3, #1
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	495c      	ldr	r1, [pc, #368]	@ (8003554 <HAL_I2C_Init+0x274>)
 80033e4:	428b      	cmp	r3, r1
 80033e6:	d819      	bhi.n	800341c <HAL_I2C_Init+0x13c>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1e59      	subs	r1, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033f6:	1c59      	adds	r1, r3, #1
 80033f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033fc:	400b      	ands	r3, r1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_I2C_Init+0x138>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1e59      	subs	r1, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003410:	3301      	adds	r3, #1
 8003412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003416:	e051      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 8003418:	2304      	movs	r3, #4
 800341a:	e04f      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d111      	bne.n	8003448 <HAL_I2C_Init+0x168>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	1e58      	subs	r0, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	440b      	add	r3, r1
 8003432:	fbb0 f3f3 	udiv	r3, r0, r3
 8003436:	3301      	adds	r3, #1
 8003438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e012      	b.n	800346e <HAL_I2C_Init+0x18e>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	0099      	lsls	r1, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_I2C_Init+0x196>
 8003472:	2301      	movs	r3, #1
 8003474:	e022      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10e      	bne.n	800349c <HAL_I2C_Init+0x1bc>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1e58      	subs	r0, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	440b      	add	r3, r1
 800348c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003490:	3301      	adds	r3, #1
 8003492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800349a:	e00f      	b.n	80034bc <HAL_I2C_Init+0x1dc>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1e58      	subs	r0, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	0099      	lsls	r1, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b2:	3301      	adds	r3, #1
 80034b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	6809      	ldr	r1, [r1, #0]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6911      	ldr	r1, [r2, #16]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68d2      	ldr	r2, [r2, #12]
 80034f6:	4311      	orrs	r1, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	000186a0 	.word	0x000186a0
 8003558:	001e847f 	.word	0x001e847f
 800355c:	003d08ff 	.word	0x003d08ff
 8003560:	431bde83 	.word	0x431bde83
 8003564:	10624dd3 	.word	0x10624dd3

08003568 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	461a      	mov	r2, r3
 8003576:	4603      	mov	r3, r0
 8003578:	817b      	strh	r3, [r7, #10]
 800357a:	460b      	mov	r3, r1
 800357c:	813b      	strh	r3, [r7, #8]
 800357e:	4613      	mov	r3, r2
 8003580:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003582:	f7ff f85d 	bl	8002640 <HAL_GetTick>
 8003586:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b20      	cmp	r3, #32
 8003592:	f040 80d9 	bne.w	8003748 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	2319      	movs	r3, #25
 800359c:	2201      	movs	r2, #1
 800359e:	496d      	ldr	r1, [pc, #436]	@ (8003754 <HAL_I2C_Mem_Write+0x1ec>)
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fdb9 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035ac:	2302      	movs	r3, #2
 80035ae:	e0cc      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_I2C_Mem_Write+0x56>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e0c5      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d007      	beq.n	80035e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2221      	movs	r2, #33	@ 0x21
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2240      	movs	r2, #64	@ 0x40
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a3a      	ldr	r2, [r7, #32]
 800360e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003614:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a4d      	ldr	r2, [pc, #308]	@ (8003758 <HAL_I2C_Mem_Write+0x1f0>)
 8003624:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003626:	88f8      	ldrh	r0, [r7, #6]
 8003628:	893a      	ldrh	r2, [r7, #8]
 800362a:	8979      	ldrh	r1, [r7, #10]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	4603      	mov	r3, r0
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fbf0 	bl	8003e1c <I2C_RequestMemoryWrite>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d052      	beq.n	80036e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e081      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fe7e 	bl	800434c <I2C_WaitOnTXEFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00d      	beq.n	8003672 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	2b04      	cmp	r3, #4
 800365c:	d107      	bne.n	800366e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800366c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06b      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	781a      	ldrb	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d11b      	bne.n	80036e8 <HAL_I2C_Mem_Write+0x180>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d017      	beq.n	80036e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1aa      	bne.n	8003646 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fe71 	bl	80043dc <I2C_WaitOnBTFFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00d      	beq.n	800371c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	2b04      	cmp	r3, #4
 8003706:	d107      	bne.n	8003718 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003716:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e016      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800372a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	00100002 	.word	0x00100002
 8003758:	ffff0000 	.word	0xffff0000

0800375c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08c      	sub	sp, #48	@ 0x30
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	4608      	mov	r0, r1
 8003766:	4611      	mov	r1, r2
 8003768:	461a      	mov	r2, r3
 800376a:	4603      	mov	r3, r0
 800376c:	817b      	strh	r3, [r7, #10]
 800376e:	460b      	mov	r3, r1
 8003770:	813b      	strh	r3, [r7, #8]
 8003772:	4613      	mov	r3, r2
 8003774:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003776:	f7fe ff63 	bl	8002640 <HAL_GetTick>
 800377a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b20      	cmp	r3, #32
 8003786:	f040 8214 	bne.w	8003bb2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	2319      	movs	r3, #25
 8003790:	2201      	movs	r2, #1
 8003792:	497b      	ldr	r1, [pc, #492]	@ (8003980 <HAL_I2C_Mem_Read+0x224>)
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fcbf 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
 80037a2:	e207      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_I2C_Mem_Read+0x56>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e200      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x458>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d007      	beq.n	80037d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2222      	movs	r2, #34	@ 0x22
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2240      	movs	r2, #64	@ 0x40
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003808:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4a5b      	ldr	r2, [pc, #364]	@ (8003984 <HAL_I2C_Mem_Read+0x228>)
 8003818:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800381a:	88f8      	ldrh	r0, [r7, #6]
 800381c:	893a      	ldrh	r2, [r7, #8]
 800381e:	8979      	ldrh	r1, [r7, #10]
 8003820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	4603      	mov	r3, r0
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fb8c 	bl	8003f48 <I2C_RequestMemoryRead>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e1bc      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383e:	2b00      	cmp	r3, #0
 8003840:	d113      	bne.n	800386a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003842:	2300      	movs	r3, #0
 8003844:	623b      	str	r3, [r7, #32]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	623b      	str	r3, [r7, #32]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	623b      	str	r3, [r7, #32]
 8003856:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e190      	b.n	8003b8c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386e:	2b01      	cmp	r3, #1
 8003870:	d11b      	bne.n	80038aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003880:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	e170      	b.n	8003b8c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d11b      	bne.n	80038ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	e150      	b.n	8003b8c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003900:	e144      	b.n	8003b8c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003906:	2b03      	cmp	r3, #3
 8003908:	f200 80f1 	bhi.w	8003aee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003910:	2b01      	cmp	r3, #1
 8003912:	d123      	bne.n	800395c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003916:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fda7 	bl	800446c <I2C_WaitOnRXNEFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e145      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800395a:	e117      	b.n	8003b8c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003960:	2b02      	cmp	r3, #2
 8003962:	d14e      	bne.n	8003a02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396a:	2200      	movs	r2, #0
 800396c:	4906      	ldr	r1, [pc, #24]	@ (8003988 <HAL_I2C_Mem_Read+0x22c>)
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fbd2 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e11a      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x458>
 800397e:	bf00      	nop
 8003980:	00100002 	.word	0x00100002
 8003984:	ffff0000 	.word	0xffff0000
 8003988:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800399a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a00:	e0c4      	b.n	8003b8c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a08:	2200      	movs	r2, #0
 8003a0a:	496c      	ldr	r1, [pc, #432]	@ (8003bbc <HAL_I2C_Mem_Read+0x460>)
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fb83 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0cb      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a64:	2200      	movs	r2, #0
 8003a66:	4955      	ldr	r1, [pc, #340]	@ (8003bbc <HAL_I2C_Mem_Read+0x460>)
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fb55 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e09d      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aec:	e04e      	b.n	8003b8c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 fcba 	bl	800446c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e058      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d124      	bne.n	8003b8c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d107      	bne.n	8003b5a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b58:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f47f aeb6 	bne.w	8003902 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e000      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003bb2:	2302      	movs	r3, #2
  }
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3728      	adds	r7, #40	@ 0x28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	00010004 	.word	0x00010004

08003bc0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	@ 0x28
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003bd0:	f7fe fd36 	bl	8002640 <HAL_GetTick>
 8003bd4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	f040 8111 	bne.w	8003e0a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2319      	movs	r3, #25
 8003bee:	2201      	movs	r2, #1
 8003bf0:	4988      	ldr	r1, [pc, #544]	@ (8003e14 <HAL_I2C_IsDeviceReady+0x254>)
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fa90 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e104      	b.n	8003e0c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_I2C_IsDeviceReady+0x50>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e0fd      	b.n	8003e0c <HAL_I2C_IsDeviceReady+0x24c>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d007      	beq.n	8003c36 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0201 	orr.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2224      	movs	r2, #36	@ 0x24
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4a70      	ldr	r2, [pc, #448]	@ (8003e18 <HAL_I2C_IsDeviceReady+0x258>)
 8003c58:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c68:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fa4e 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00d      	beq.n	8003c9e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c90:	d103      	bne.n	8003c9a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c98:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0b6      	b.n	8003e0c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c9e:	897b      	ldrh	r3, [r7, #10]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003cae:	f7fe fcc7 	bl	8002640 <HAL_GetTick>
 8003cb2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	bf0c      	ite	eq
 8003cc2:	2301      	moveq	r3, #1
 8003cc4:	2300      	movne	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ce2:	e025      	b.n	8003d30 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ce4:	f7fe fcac 	bl	8002640 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <HAL_I2C_IsDeviceReady+0x13a>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d103      	bne.n	8003d02 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	22a0      	movs	r2, #160	@ 0xa0
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	bf0c      	ite	eq
 8003d10:	2301      	moveq	r3, #1
 8003d12:	2300      	movne	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d26:	bf0c      	ite	eq
 8003d28:	2301      	moveq	r3, #1
 8003d2a:	2300      	movne	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d3a:	d005      	beq.n	8003d48 <HAL_I2C_IsDeviceReady+0x188>
 8003d3c:	7dfb      	ldrb	r3, [r7, #23]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <HAL_I2C_IsDeviceReady+0x188>
 8003d42:	7dbb      	ldrb	r3, [r7, #22]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0cd      	beq.n	8003ce4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d129      	bne.n	8003db2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d6c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	2319      	movs	r3, #25
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	4921      	ldr	r1, [pc, #132]	@ (8003e14 <HAL_I2C_IsDeviceReady+0x254>)
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f9c2 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e036      	b.n	8003e0c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	e02c      	b.n	8003e0c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2319      	movs	r3, #25
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	490f      	ldr	r1, [pc, #60]	@ (8003e14 <HAL_I2C_IsDeviceReady+0x254>)
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f99e 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e012      	b.n	8003e0c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	3301      	adds	r3, #1
 8003dea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	f4ff af32 	bcc.w	8003c5a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
  }
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3720      	adds	r7, #32
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	00100002 	.word	0x00100002
 8003e18:	ffff0000 	.word	0xffff0000

08003e1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	4608      	mov	r0, r1
 8003e26:	4611      	mov	r1, r2
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	817b      	strh	r3, [r7, #10]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	813b      	strh	r3, [r7, #8]
 8003e32:	4613      	mov	r3, r2
 8003e34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f960 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e6c:	d103      	bne.n	8003e76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e05f      	b.n	8003f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e7a:	897b      	ldrh	r3, [r7, #10]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8c:	6a3a      	ldr	r2, [r7, #32]
 8003e8e:	492d      	ldr	r1, [pc, #180]	@ (8003f44 <I2C_RequestMemoryWrite+0x128>)
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f9bb 	bl	800420c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e04c      	b.n	8003f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb8:	6a39      	ldr	r1, [r7, #32]
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fa46 	bl	800434c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d107      	bne.n	8003ede <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003edc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e02b      	b.n	8003f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d105      	bne.n	8003ef4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ee8:	893b      	ldrh	r3, [r7, #8]
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	611a      	str	r2, [r3, #16]
 8003ef2:	e021      	b.n	8003f38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ef4:	893b      	ldrh	r3, [r7, #8]
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f04:	6a39      	ldr	r1, [r7, #32]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fa20 	bl	800434c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d107      	bne.n	8003f2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e005      	b.n	8003f3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f2e:	893b      	ldrh	r3, [r7, #8]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	00010002 	.word	0x00010002

08003f48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	4608      	mov	r0, r1
 8003f52:	4611      	mov	r1, r2
 8003f54:	461a      	mov	r2, r3
 8003f56:	4603      	mov	r3, r0
 8003f58:	817b      	strh	r3, [r7, #10]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	813b      	strh	r3, [r7, #8]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f8c2 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00d      	beq.n	8003fb6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fa8:	d103      	bne.n	8003fb2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e0aa      	b.n	800410c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fb6:	897b      	ldrh	r3, [r7, #10]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	6a3a      	ldr	r2, [r7, #32]
 8003fca:	4952      	ldr	r1, [pc, #328]	@ (8004114 <I2C_RequestMemoryRead+0x1cc>)
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f91d 	bl	800420c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e097      	b.n	800410c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff4:	6a39      	ldr	r1, [r7, #32]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f9a8 	bl	800434c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00d      	beq.n	800401e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	2b04      	cmp	r3, #4
 8004008:	d107      	bne.n	800401a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004018:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e076      	b.n	800410c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d105      	bne.n	8004030 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004024:	893b      	ldrh	r3, [r7, #8]
 8004026:	b2da      	uxtb	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	611a      	str	r2, [r3, #16]
 800402e:	e021      	b.n	8004074 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004030:	893b      	ldrh	r3, [r7, #8]
 8004032:	0a1b      	lsrs	r3, r3, #8
 8004034:	b29b      	uxth	r3, r3
 8004036:	b2da      	uxtb	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800403e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004040:	6a39      	ldr	r1, [r7, #32]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f982 	bl	800434c <I2C_WaitOnTXEFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00d      	beq.n	800406a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	2b04      	cmp	r3, #4
 8004054:	d107      	bne.n	8004066 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004064:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e050      	b.n	800410c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800406a:	893b      	ldrh	r3, [r7, #8]
 800406c:	b2da      	uxtb	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004076:	6a39      	ldr	r1, [r7, #32]
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f967 	bl	800434c <I2C_WaitOnTXEFlagUntilTimeout>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00d      	beq.n	80040a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	2b04      	cmp	r3, #4
 800408a:	d107      	bne.n	800409c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800409a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e035      	b.n	800410c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f82b 	bl	8004118 <I2C_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00d      	beq.n	80040e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040d6:	d103      	bne.n	80040e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e013      	b.n	800410c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040e4:	897b      	ldrh	r3, [r7, #10]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	6a3a      	ldr	r2, [r7, #32]
 80040f8:	4906      	ldr	r1, [pc, #24]	@ (8004114 <I2C_RequestMemoryRead+0x1cc>)
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f886 	bl	800420c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	00010002 	.word	0x00010002

08004118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004128:	e048      	b.n	80041bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d044      	beq.n	80041bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004132:	f7fe fa85 	bl	8002640 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d302      	bcc.n	8004148 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d139      	bne.n	80041bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	0c1b      	lsrs	r3, r3, #16
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b01      	cmp	r3, #1
 8004150:	d10d      	bne.n	800416e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	43da      	mvns	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4013      	ands	r3, r2
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf0c      	ite	eq
 8004164:	2301      	moveq	r3, #1
 8004166:	2300      	movne	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	461a      	mov	r2, r3
 800416c:	e00c      	b.n	8004188 <I2C_WaitOnFlagUntilTimeout+0x70>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	43da      	mvns	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	4013      	ands	r3, r2
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	461a      	mov	r2, r3
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	429a      	cmp	r2, r3
 800418c:	d116      	bne.n	80041bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a8:	f043 0220 	orr.w	r2, r3, #32
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e023      	b.n	8004204 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	0c1b      	lsrs	r3, r3, #16
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d10d      	bne.n	80041e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	43da      	mvns	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4013      	ands	r3, r2
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	e00c      	b.n	80041fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	43da      	mvns	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4013      	ands	r3, r2
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d093      	beq.n	800412a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800421a:	e071      	b.n	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800422a:	d123      	bne.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800423a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004244:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	f043 0204 	orr.w	r2, r3, #4
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e067      	b.n	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427a:	d041      	beq.n	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427c:	f7fe f9e0 	bl	8002640 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	429a      	cmp	r2, r3
 800428a:	d302      	bcc.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d136      	bne.n	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	d10c      	bne.n	80042b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	43da      	mvns	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4013      	ands	r3, r2
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bf14      	ite	ne
 80042ae:	2301      	movne	r3, #1
 80042b0:	2300      	moveq	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	e00b      	b.n	80042ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	43da      	mvns	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	4013      	ands	r3, r2
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	bf14      	ite	ne
 80042c8:	2301      	movne	r3, #1
 80042ca:	2300      	moveq	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d016      	beq.n	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ec:	f043 0220 	orr.w	r2, r3, #32
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e021      	b.n	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	0c1b      	lsrs	r3, r3, #16
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b01      	cmp	r3, #1
 8004308:	d10c      	bne.n	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	43da      	mvns	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4013      	ands	r3, r2
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	bf14      	ite	ne
 800431c:	2301      	movne	r3, #1
 800431e:	2300      	moveq	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	e00b      	b.n	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	43da      	mvns	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4013      	ands	r3, r2
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	bf14      	ite	ne
 8004336:	2301      	movne	r3, #1
 8004338:	2300      	moveq	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	f47f af6d 	bne.w	800421c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004358:	e034      	b.n	80043c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f8e3 	bl	8004526 <I2C_IsAcknowledgeFailed>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e034      	b.n	80043d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004370:	d028      	beq.n	80043c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004372:	f7fe f965 	bl	8002640 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	429a      	cmp	r2, r3
 8004380:	d302      	bcc.n	8004388 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d11d      	bne.n	80043c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004392:	2b80      	cmp	r3, #128	@ 0x80
 8004394:	d016      	beq.n	80043c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b0:	f043 0220 	orr.w	r2, r3, #32
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e007      	b.n	80043d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ce:	2b80      	cmp	r3, #128	@ 0x80
 80043d0:	d1c3      	bne.n	800435a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043e8:	e034      	b.n	8004454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f89b 	bl	8004526 <I2C_IsAcknowledgeFailed>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e034      	b.n	8004464 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004400:	d028      	beq.n	8004454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004402:	f7fe f91d 	bl	8002640 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	429a      	cmp	r2, r3
 8004410:	d302      	bcc.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d11d      	bne.n	8004454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b04      	cmp	r3, #4
 8004424:	d016      	beq.n	8004454 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004440:	f043 0220 	orr.w	r2, r3, #32
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e007      	b.n	8004464 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b04      	cmp	r3, #4
 8004460:	d1c3      	bne.n	80043ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004478:	e049      	b.n	800450e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b10      	cmp	r3, #16
 8004486:	d119      	bne.n	80044bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0210 	mvn.w	r2, #16
 8004490:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e030      	b.n	800451e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044bc:	f7fe f8c0 	bl	8002640 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d302      	bcc.n	80044d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d11d      	bne.n	800450e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044dc:	2b40      	cmp	r3, #64	@ 0x40
 80044de:	d016      	beq.n	800450e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	f043 0220 	orr.w	r2, r3, #32
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e007      	b.n	800451e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004518:	2b40      	cmp	r3, #64	@ 0x40
 800451a:	d1ae      	bne.n	800447a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004538:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800453c:	d11b      	bne.n	8004576 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004546:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004562:	f043 0204 	orr.w	r2, r3, #4
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e000      	b.n	8004578 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e267      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d075      	beq.n	800468e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045a2:	4b88      	ldr	r3, [pc, #544]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d00c      	beq.n	80045c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ae:	4b85      	ldr	r3, [pc, #532]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d112      	bne.n	80045e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ba:	4b82      	ldr	r3, [pc, #520]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045c6:	d10b      	bne.n	80045e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c8:	4b7e      	ldr	r3, [pc, #504]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d05b      	beq.n	800468c <HAL_RCC_OscConfig+0x108>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d157      	bne.n	800468c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e242      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e8:	d106      	bne.n	80045f8 <HAL_RCC_OscConfig+0x74>
 80045ea:	4b76      	ldr	r3, [pc, #472]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a75      	ldr	r2, [pc, #468]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	e01d      	b.n	8004634 <HAL_RCC_OscConfig+0xb0>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004600:	d10c      	bne.n	800461c <HAL_RCC_OscConfig+0x98>
 8004602:	4b70      	ldr	r3, [pc, #448]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a6f      	ldr	r2, [pc, #444]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	4b6d      	ldr	r3, [pc, #436]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a6c      	ldr	r2, [pc, #432]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e00b      	b.n	8004634 <HAL_RCC_OscConfig+0xb0>
 800461c:	4b69      	ldr	r3, [pc, #420]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a68      	ldr	r2, [pc, #416]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	4b66      	ldr	r3, [pc, #408]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a65      	ldr	r2, [pc, #404]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 800462e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d013      	beq.n	8004664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7fe f800 	bl	8002640 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004644:	f7fd fffc 	bl	8002640 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	@ 0x64
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e207      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	4b5b      	ldr	r3, [pc, #364]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0xc0>
 8004662:	e014      	b.n	800468e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7fd ffec 	bl	8002640 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800466c:	f7fd ffe8 	bl	8002640 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	@ 0x64
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e1f3      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467e:	4b51      	ldr	r3, [pc, #324]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0xe8>
 800468a:	e000      	b.n	800468e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d063      	beq.n	8004762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800469a:	4b4a      	ldr	r3, [pc, #296]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046a6:	4b47      	ldr	r3, [pc, #284]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d11c      	bne.n	80046ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046b2:	4b44      	ldr	r3, [pc, #272]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d116      	bne.n	80046ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046be:	4b41      	ldr	r3, [pc, #260]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_RCC_OscConfig+0x152>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d001      	beq.n	80046d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e1c7      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d6:	4b3b      	ldr	r3, [pc, #236]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4937      	ldr	r1, [pc, #220]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ea:	e03a      	b.n	8004762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d020      	beq.n	8004736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f4:	4b34      	ldr	r3, [pc, #208]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fa:	f7fd ffa1 	bl	8002640 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004702:	f7fd ff9d 	bl	8002640 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e1a8      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004714:	4b2b      	ldr	r3, [pc, #172]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004720:	4b28      	ldr	r3, [pc, #160]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	4925      	ldr	r1, [pc, #148]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004730:	4313      	orrs	r3, r2
 8004732:	600b      	str	r3, [r1, #0]
 8004734:	e015      	b.n	8004762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004736:	4b24      	ldr	r3, [pc, #144]	@ (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7fd ff80 	bl	8002640 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004744:	f7fd ff7c 	bl	8002640 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e187      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004756:	4b1b      	ldr	r3, [pc, #108]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d036      	beq.n	80047dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d016      	beq.n	80047a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004776:	4b15      	ldr	r3, [pc, #84]	@ (80047cc <HAL_RCC_OscConfig+0x248>)
 8004778:	2201      	movs	r2, #1
 800477a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fd ff60 	bl	8002640 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004784:	f7fd ff5c 	bl	8002640 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e167      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004796:	4b0b      	ldr	r3, [pc, #44]	@ (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0x200>
 80047a2:	e01b      	b.n	80047dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047a4:	4b09      	ldr	r3, [pc, #36]	@ (80047cc <HAL_RCC_OscConfig+0x248>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047aa:	f7fd ff49 	bl	8002640 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b0:	e00e      	b.n	80047d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b2:	f7fd ff45 	bl	8002640 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d907      	bls.n	80047d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e150      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
 80047c4:	40023800 	.word	0x40023800
 80047c8:	42470000 	.word	0x42470000
 80047cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d0:	4b88      	ldr	r3, [pc, #544]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 80047d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1ea      	bne.n	80047b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8097 	beq.w	8004918 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ea:	2300      	movs	r3, #0
 80047ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ee:	4b81      	ldr	r3, [pc, #516]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10f      	bne.n	800481a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	4b7d      	ldr	r3, [pc, #500]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	4a7c      	ldr	r2, [pc, #496]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004808:	6413      	str	r3, [r2, #64]	@ 0x40
 800480a:	4b7a      	ldr	r3, [pc, #488]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004816:	2301      	movs	r3, #1
 8004818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481a:	4b77      	ldr	r3, [pc, #476]	@ (80049f8 <HAL_RCC_OscConfig+0x474>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d118      	bne.n	8004858 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004826:	4b74      	ldr	r3, [pc, #464]	@ (80049f8 <HAL_RCC_OscConfig+0x474>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a73      	ldr	r2, [pc, #460]	@ (80049f8 <HAL_RCC_OscConfig+0x474>)
 800482c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004832:	f7fd ff05 	bl	8002640 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483a:	f7fd ff01 	bl	8002640 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e10c      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484c:	4b6a      	ldr	r3, [pc, #424]	@ (80049f8 <HAL_RCC_OscConfig+0x474>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f0      	beq.n	800483a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d106      	bne.n	800486e <HAL_RCC_OscConfig+0x2ea>
 8004860:	4b64      	ldr	r3, [pc, #400]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004864:	4a63      	ldr	r2, [pc, #396]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	6713      	str	r3, [r2, #112]	@ 0x70
 800486c:	e01c      	b.n	80048a8 <HAL_RCC_OscConfig+0x324>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b05      	cmp	r3, #5
 8004874:	d10c      	bne.n	8004890 <HAL_RCC_OscConfig+0x30c>
 8004876:	4b5f      	ldr	r3, [pc, #380]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487a:	4a5e      	ldr	r2, [pc, #376]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 800487c:	f043 0304 	orr.w	r3, r3, #4
 8004880:	6713      	str	r3, [r2, #112]	@ 0x70
 8004882:	4b5c      	ldr	r3, [pc, #368]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004886:	4a5b      	ldr	r2, [pc, #364]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	6713      	str	r3, [r2, #112]	@ 0x70
 800488e:	e00b      	b.n	80048a8 <HAL_RCC_OscConfig+0x324>
 8004890:	4b58      	ldr	r3, [pc, #352]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004894:	4a57      	ldr	r2, [pc, #348]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	6713      	str	r3, [r2, #112]	@ 0x70
 800489c:	4b55      	ldr	r3, [pc, #340]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a0:	4a54      	ldr	r2, [pc, #336]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 80048a2:	f023 0304 	bic.w	r3, r3, #4
 80048a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d015      	beq.n	80048dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fd fec6 	bl	8002640 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b8:	f7fd fec2 	bl	8002640 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e0cb      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ce:	4b49      	ldr	r3, [pc, #292]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 80048d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0ee      	beq.n	80048b8 <HAL_RCC_OscConfig+0x334>
 80048da:	e014      	b.n	8004906 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048dc:	f7fd feb0 	bl	8002640 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e2:	e00a      	b.n	80048fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e4:	f7fd feac 	bl	8002640 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e0b5      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048fa:	4b3e      	ldr	r3, [pc, #248]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1ee      	bne.n	80048e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004906:	7dfb      	ldrb	r3, [r7, #23]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d105      	bne.n	8004918 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490c:	4b39      	ldr	r3, [pc, #228]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 800490e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004910:	4a38      	ldr	r2, [pc, #224]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004916:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 80a1 	beq.w	8004a64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004922:	4b34      	ldr	r3, [pc, #208]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b08      	cmp	r3, #8
 800492c:	d05c      	beq.n	80049e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d141      	bne.n	80049ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004936:	4b31      	ldr	r3, [pc, #196]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493c:	f7fd fe80 	bl	8002640 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004944:	f7fd fe7c 	bl	8002640 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e087      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	4b27      	ldr	r3, [pc, #156]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69da      	ldr	r2, [r3, #28]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	019b      	lsls	r3, r3, #6
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	3b01      	subs	r3, #1
 800497c:	041b      	lsls	r3, r3, #16
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004984:	061b      	lsls	r3, r3, #24
 8004986:	491b      	ldr	r1, [pc, #108]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004988:	4313      	orrs	r3, r2
 800498a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800498c:	4b1b      	ldr	r3, [pc, #108]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004992:	f7fd fe55 	bl	8002640 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499a:	f7fd fe51 	bl	8002640 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e05c      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ac:	4b11      	ldr	r3, [pc, #68]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x416>
 80049b8:	e054      	b.n	8004a64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ba:	4b10      	ldr	r3, [pc, #64]	@ (80049fc <HAL_RCC_OscConfig+0x478>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c0:	f7fd fe3e 	bl	8002640 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fd fe3a 	bl	8002640 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e045      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	4b06      	ldr	r3, [pc, #24]	@ (80049f4 <HAL_RCC_OscConfig+0x470>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x444>
 80049e6:	e03d      	b.n	8004a64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d107      	bne.n	8004a00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e038      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40007000 	.word	0x40007000
 80049fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a00:	4b1b      	ldr	r3, [pc, #108]	@ (8004a70 <HAL_RCC_OscConfig+0x4ec>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d028      	beq.n	8004a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d121      	bne.n	8004a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d11a      	bne.n	8004a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a30:	4013      	ands	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d111      	bne.n	8004a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d107      	bne.n	8004a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800

08004a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0cc      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a88:	4b68      	ldr	r3, [pc, #416]	@ (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d90c      	bls.n	8004ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a96:	4b65      	ldr	r3, [pc, #404]	@ (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9e:	4b63      	ldr	r3, [pc, #396]	@ (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0b8      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d020      	beq.n	8004afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ac8:	4b59      	ldr	r3, [pc, #356]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4a58      	ldr	r2, [pc, #352]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ad2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ae0:	4b53      	ldr	r3, [pc, #332]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	4a52      	ldr	r2, [pc, #328]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aec:	4b50      	ldr	r3, [pc, #320]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	494d      	ldr	r1, [pc, #308]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d044      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	4b47      	ldr	r3, [pc, #284]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d119      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e07f      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d003      	beq.n	8004b32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d107      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b32:	4b3f      	ldr	r3, [pc, #252]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e06f      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b42:	4b3b      	ldr	r3, [pc, #236]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e067      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b52:	4b37      	ldr	r3, [pc, #220]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f023 0203 	bic.w	r2, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4934      	ldr	r1, [pc, #208]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b64:	f7fd fd6c 	bl	8002640 <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b6c:	f7fd fd68 	bl	8002640 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e04f      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b82:	4b2b      	ldr	r3, [pc, #172]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 020c 	and.w	r2, r3, #12
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d1eb      	bne.n	8004b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b94:	4b25      	ldr	r3, [pc, #148]	@ (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d20c      	bcs.n	8004bbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b22      	ldr	r3, [pc, #136]	@ (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b20      	ldr	r3, [pc, #128]	@ (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e032      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bc8:	4b19      	ldr	r3, [pc, #100]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4916      	ldr	r1, [pc, #88]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004be6:	4b12      	ldr	r3, [pc, #72]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	490e      	ldr	r1, [pc, #56]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bfa:	f000 f821 	bl	8004c40 <HAL_RCC_GetSysClockFreq>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	4b0b      	ldr	r3, [pc, #44]	@ (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	490a      	ldr	r1, [pc, #40]	@ (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004c0c:	5ccb      	ldrb	r3, [r1, r3]
 8004c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c12:	4a09      	ldr	r2, [pc, #36]	@ (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c16:	4b09      	ldr	r3, [pc, #36]	@ (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fd fccc 	bl	80025b8 <HAL_InitTick>

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023c00 	.word	0x40023c00
 8004c30:	40023800 	.word	0x40023800
 8004c34:	0800aff8 	.word	0x0800aff8
 8004c38:	20000000 	.word	0x20000000
 8004c3c:	20000004 	.word	0x20000004

08004c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c44:	b094      	sub	sp, #80	@ 0x50
 8004c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c58:	4b79      	ldr	r3, [pc, #484]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 030c 	and.w	r3, r3, #12
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d00d      	beq.n	8004c80 <HAL_RCC_GetSysClockFreq+0x40>
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	f200 80e1 	bhi.w	8004e2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_RCC_GetSysClockFreq+0x34>
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d003      	beq.n	8004c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c72:	e0db      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c74:	4b73      	ldr	r3, [pc, #460]	@ (8004e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c78:	e0db      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c7a:	4b73      	ldr	r3, [pc, #460]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c7e:	e0d8      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c80:	4b6f      	ldr	r3, [pc, #444]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d063      	beq.n	8004d5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c96:	4b6a      	ldr	r3, [pc, #424]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	099b      	lsrs	r3, r3, #6
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ca0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004caa:	2300      	movs	r3, #0
 8004cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	462b      	mov	r3, r5
 8004cb6:	f04f 0000 	mov.w	r0, #0
 8004cba:	f04f 0100 	mov.w	r1, #0
 8004cbe:	0159      	lsls	r1, r3, #5
 8004cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cc4:	0150      	lsls	r0, r2, #5
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4621      	mov	r1, r4
 8004ccc:	1a51      	subs	r1, r2, r1
 8004cce:	6139      	str	r1, [r7, #16]
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	018b      	lsls	r3, r1, #6
 8004ce8:	4651      	mov	r1, sl
 8004cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cee:	4651      	mov	r1, sl
 8004cf0:	018a      	lsls	r2, r1, #6
 8004cf2:	4651      	mov	r1, sl
 8004cf4:	ebb2 0801 	subs.w	r8, r2, r1
 8004cf8:	4659      	mov	r1, fp
 8004cfa:	eb63 0901 	sbc.w	r9, r3, r1
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d12:	4690      	mov	r8, r2
 8004d14:	4699      	mov	r9, r3
 8004d16:	4623      	mov	r3, r4
 8004d18:	eb18 0303 	adds.w	r3, r8, r3
 8004d1c:	60bb      	str	r3, [r7, #8]
 8004d1e:	462b      	mov	r3, r5
 8004d20:	eb49 0303 	adc.w	r3, r9, r3
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d32:	4629      	mov	r1, r5
 8004d34:	024b      	lsls	r3, r1, #9
 8004d36:	4621      	mov	r1, r4
 8004d38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	024a      	lsls	r2, r1, #9
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d46:	2200      	movs	r2, #0
 8004d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d50:	f7fb ffa2 	bl	8000c98 <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4613      	mov	r3, r2
 8004d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d5c:	e058      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5e:	4b38      	ldr	r3, [pc, #224]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	2200      	movs	r2, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	4611      	mov	r1, r2
 8004d6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d6e:	623b      	str	r3, [r7, #32]
 8004d70:	2300      	movs	r3, #0
 8004d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d78:	4642      	mov	r2, r8
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	f04f 0000 	mov.w	r0, #0
 8004d80:	f04f 0100 	mov.w	r1, #0
 8004d84:	0159      	lsls	r1, r3, #5
 8004d86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d8a:	0150      	lsls	r0, r2, #5
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4641      	mov	r1, r8
 8004d92:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d96:	4649      	mov	r1, r9
 8004d98:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004da8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004db0:	ebb2 040a 	subs.w	r4, r2, sl
 8004db4:	eb63 050b 	sbc.w	r5, r3, fp
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	00eb      	lsls	r3, r5, #3
 8004dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dc6:	00e2      	lsls	r2, r4, #3
 8004dc8:	4614      	mov	r4, r2
 8004dca:	461d      	mov	r5, r3
 8004dcc:	4643      	mov	r3, r8
 8004dce:	18e3      	adds	r3, r4, r3
 8004dd0:	603b      	str	r3, [r7, #0]
 8004dd2:	464b      	mov	r3, r9
 8004dd4:	eb45 0303 	adc.w	r3, r5, r3
 8004dd8:	607b      	str	r3, [r7, #4]
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004de6:	4629      	mov	r1, r5
 8004de8:	028b      	lsls	r3, r1, #10
 8004dea:	4621      	mov	r1, r4
 8004dec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004df0:	4621      	mov	r1, r4
 8004df2:	028a      	lsls	r2, r1, #10
 8004df4:	4610      	mov	r0, r2
 8004df6:	4619      	mov	r1, r3
 8004df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	61fa      	str	r2, [r7, #28]
 8004e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e04:	f7fb ff48 	bl	8000c98 <__aeabi_uldivmod>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e10:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	0c1b      	lsrs	r3, r3, #16
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e2a:	e002      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e2c:	4b05      	ldr	r3, [pc, #20]	@ (8004e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3750      	adds	r7, #80	@ 0x50
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e3e:	bf00      	nop
 8004e40:	40023800 	.word	0x40023800
 8004e44:	00f42400 	.word	0x00f42400
 8004e48:	007a1200 	.word	0x007a1200

08004e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e50:	4b03      	ldr	r3, [pc, #12]	@ (8004e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e52:	681b      	ldr	r3, [r3, #0]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	20000000 	.word	0x20000000

08004e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e68:	f7ff fff0 	bl	8004e4c <HAL_RCC_GetHCLKFreq>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	4b05      	ldr	r3, [pc, #20]	@ (8004e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	0a9b      	lsrs	r3, r3, #10
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	4903      	ldr	r1, [pc, #12]	@ (8004e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e7a:	5ccb      	ldrb	r3, [r1, r3]
 8004e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40023800 	.word	0x40023800
 8004e88:	0800b008 	.word	0x0800b008

08004e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e90:	f7ff ffdc 	bl	8004e4c <HAL_RCC_GetHCLKFreq>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	0b5b      	lsrs	r3, r3, #13
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4903      	ldr	r1, [pc, #12]	@ (8004eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ea2:	5ccb      	ldrb	r3, [r1, r3]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	0800b008 	.word	0x0800b008

08004eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e041      	b.n	8004f4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d106      	bne.n	8004ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fd f8bc 	bl	8002058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	f000 fab6 	bl	8005464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e041      	b.n	8004fe8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d106      	bne.n	8004f7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7fd f84b 	bl	8002014 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f000 fa67 	bl	8005464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d109      	bne.n	8005014 <HAL_TIM_PWM_Start+0x24>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	bf14      	ite	ne
 800500c:	2301      	movne	r3, #1
 800500e:	2300      	moveq	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	e022      	b.n	800505a <HAL_TIM_PWM_Start+0x6a>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b04      	cmp	r3, #4
 8005018:	d109      	bne.n	800502e <HAL_TIM_PWM_Start+0x3e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b01      	cmp	r3, #1
 8005024:	bf14      	ite	ne
 8005026:	2301      	movne	r3, #1
 8005028:	2300      	moveq	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	e015      	b.n	800505a <HAL_TIM_PWM_Start+0x6a>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b08      	cmp	r3, #8
 8005032:	d109      	bne.n	8005048 <HAL_TIM_PWM_Start+0x58>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	bf14      	ite	ne
 8005040:	2301      	movne	r3, #1
 8005042:	2300      	moveq	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	e008      	b.n	800505a <HAL_TIM_PWM_Start+0x6a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	bf14      	ite	ne
 8005054:	2301      	movne	r3, #1
 8005056:	2300      	moveq	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e068      	b.n	8005134 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d104      	bne.n	8005072 <HAL_TIM_PWM_Start+0x82>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005070:	e013      	b.n	800509a <HAL_TIM_PWM_Start+0xaa>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b04      	cmp	r3, #4
 8005076:	d104      	bne.n	8005082 <HAL_TIM_PWM_Start+0x92>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005080:	e00b      	b.n	800509a <HAL_TIM_PWM_Start+0xaa>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b08      	cmp	r3, #8
 8005086:	d104      	bne.n	8005092 <HAL_TIM_PWM_Start+0xa2>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005090:	e003      	b.n	800509a <HAL_TIM_PWM_Start+0xaa>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2201      	movs	r2, #1
 80050a0:	6839      	ldr	r1, [r7, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fc90 	bl	80059c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a23      	ldr	r2, [pc, #140]	@ (800513c <HAL_TIM_PWM_Start+0x14c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d107      	bne.n	80050c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1d      	ldr	r2, [pc, #116]	@ (800513c <HAL_TIM_PWM_Start+0x14c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d018      	beq.n	80050fe <HAL_TIM_PWM_Start+0x10e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d4:	d013      	beq.n	80050fe <HAL_TIM_PWM_Start+0x10e>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a19      	ldr	r2, [pc, #100]	@ (8005140 <HAL_TIM_PWM_Start+0x150>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00e      	beq.n	80050fe <HAL_TIM_PWM_Start+0x10e>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a17      	ldr	r2, [pc, #92]	@ (8005144 <HAL_TIM_PWM_Start+0x154>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_TIM_PWM_Start+0x10e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a16      	ldr	r2, [pc, #88]	@ (8005148 <HAL_TIM_PWM_Start+0x158>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <HAL_TIM_PWM_Start+0x10e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a14      	ldr	r2, [pc, #80]	@ (800514c <HAL_TIM_PWM_Start+0x15c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d111      	bne.n	8005122 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b06      	cmp	r3, #6
 800510e:	d010      	beq.n	8005132 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005120:	e007      	b.n	8005132 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40010000 	.word	0x40010000
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800
 8005148:	40000c00 	.word	0x40000c00
 800514c:	40014000 	.word	0x40014000

08005150 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800516a:	2302      	movs	r3, #2
 800516c:	e0ae      	b.n	80052cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b0c      	cmp	r3, #12
 800517a:	f200 809f 	bhi.w	80052bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800517e:	a201      	add	r2, pc, #4	@ (adr r2, 8005184 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	080051b9 	.word	0x080051b9
 8005188:	080052bd 	.word	0x080052bd
 800518c:	080052bd 	.word	0x080052bd
 8005190:	080052bd 	.word	0x080052bd
 8005194:	080051f9 	.word	0x080051f9
 8005198:	080052bd 	.word	0x080052bd
 800519c:	080052bd 	.word	0x080052bd
 80051a0:	080052bd 	.word	0x080052bd
 80051a4:	0800523b 	.word	0x0800523b
 80051a8:	080052bd 	.word	0x080052bd
 80051ac:	080052bd 	.word	0x080052bd
 80051b0:	080052bd 	.word	0x080052bd
 80051b4:	0800527b 	.word	0x0800527b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f9dc 	bl	800557c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0208 	orr.w	r2, r2, #8
 80051d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0204 	bic.w	r2, r2, #4
 80051e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6999      	ldr	r1, [r3, #24]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	619a      	str	r2, [r3, #24]
      break;
 80051f6:	e064      	b.n	80052c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fa22 	bl	8005648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6999      	ldr	r1, [r3, #24]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	021a      	lsls	r2, r3, #8
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	619a      	str	r2, [r3, #24]
      break;
 8005238:	e043      	b.n	80052c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fa6d 	bl	8005720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0208 	orr.w	r2, r2, #8
 8005254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0204 	bic.w	r2, r2, #4
 8005264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69d9      	ldr	r1, [r3, #28]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	61da      	str	r2, [r3, #28]
      break;
 8005278:	e023      	b.n	80052c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fab7 	bl	80057f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69d9      	ldr	r1, [r3, #28]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	021a      	lsls	r2, r3, #8
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	61da      	str	r2, [r3, #28]
      break;
 80052ba:	e002      	b.n	80052c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	75fb      	strb	r3, [r7, #23]
      break;
 80052c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_TIM_ConfigClockSource+0x1c>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e0b4      	b.n	800545a <HAL_TIM_ConfigClockSource+0x186>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800530e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005328:	d03e      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0xd4>
 800532a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800532e:	f200 8087 	bhi.w	8005440 <HAL_TIM_ConfigClockSource+0x16c>
 8005332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005336:	f000 8086 	beq.w	8005446 <HAL_TIM_ConfigClockSource+0x172>
 800533a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800533e:	d87f      	bhi.n	8005440 <HAL_TIM_ConfigClockSource+0x16c>
 8005340:	2b70      	cmp	r3, #112	@ 0x70
 8005342:	d01a      	beq.n	800537a <HAL_TIM_ConfigClockSource+0xa6>
 8005344:	2b70      	cmp	r3, #112	@ 0x70
 8005346:	d87b      	bhi.n	8005440 <HAL_TIM_ConfigClockSource+0x16c>
 8005348:	2b60      	cmp	r3, #96	@ 0x60
 800534a:	d050      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0x11a>
 800534c:	2b60      	cmp	r3, #96	@ 0x60
 800534e:	d877      	bhi.n	8005440 <HAL_TIM_ConfigClockSource+0x16c>
 8005350:	2b50      	cmp	r3, #80	@ 0x50
 8005352:	d03c      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0xfa>
 8005354:	2b50      	cmp	r3, #80	@ 0x50
 8005356:	d873      	bhi.n	8005440 <HAL_TIM_ConfigClockSource+0x16c>
 8005358:	2b40      	cmp	r3, #64	@ 0x40
 800535a:	d058      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x13a>
 800535c:	2b40      	cmp	r3, #64	@ 0x40
 800535e:	d86f      	bhi.n	8005440 <HAL_TIM_ConfigClockSource+0x16c>
 8005360:	2b30      	cmp	r3, #48	@ 0x30
 8005362:	d064      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x15a>
 8005364:	2b30      	cmp	r3, #48	@ 0x30
 8005366:	d86b      	bhi.n	8005440 <HAL_TIM_ConfigClockSource+0x16c>
 8005368:	2b20      	cmp	r3, #32
 800536a:	d060      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x15a>
 800536c:	2b20      	cmp	r3, #32
 800536e:	d867      	bhi.n	8005440 <HAL_TIM_ConfigClockSource+0x16c>
 8005370:	2b00      	cmp	r3, #0
 8005372:	d05c      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x15a>
 8005374:	2b10      	cmp	r3, #16
 8005376:	d05a      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x15a>
 8005378:	e062      	b.n	8005440 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800538a:	f000 fafd 	bl	8005988 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800539c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	609a      	str	r2, [r3, #8]
      break;
 80053a6:	e04f      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053b8:	f000 fae6 	bl	8005988 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053ca:	609a      	str	r2, [r3, #8]
      break;
 80053cc:	e03c      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053da:	461a      	mov	r2, r3
 80053dc:	f000 fa5a 	bl	8005894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2150      	movs	r1, #80	@ 0x50
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fab3 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 80053ec:	e02c      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053fa:	461a      	mov	r2, r3
 80053fc:	f000 fa79 	bl	80058f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2160      	movs	r1, #96	@ 0x60
 8005406:	4618      	mov	r0, r3
 8005408:	f000 faa3 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 800540c:	e01c      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800541a:	461a      	mov	r2, r3
 800541c:	f000 fa3a 	bl	8005894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2140      	movs	r1, #64	@ 0x40
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fa93 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 800542c:	e00c      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4619      	mov	r1, r3
 8005438:	4610      	mov	r0, r2
 800543a:	f000 fa8a 	bl	8005952 <TIM_ITRx_SetConfig>
      break;
 800543e:	e003      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	73fb      	strb	r3, [r7, #15]
      break;
 8005444:	e000      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005458:	7bfb      	ldrb	r3, [r7, #15]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a3a      	ldr	r2, [pc, #232]	@ (8005560 <TIM_Base_SetConfig+0xfc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00f      	beq.n	800549c <TIM_Base_SetConfig+0x38>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005482:	d00b      	beq.n	800549c <TIM_Base_SetConfig+0x38>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a37      	ldr	r2, [pc, #220]	@ (8005564 <TIM_Base_SetConfig+0x100>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d007      	beq.n	800549c <TIM_Base_SetConfig+0x38>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a36      	ldr	r2, [pc, #216]	@ (8005568 <TIM_Base_SetConfig+0x104>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d003      	beq.n	800549c <TIM_Base_SetConfig+0x38>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a35      	ldr	r2, [pc, #212]	@ (800556c <TIM_Base_SetConfig+0x108>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d108      	bne.n	80054ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005560 <TIM_Base_SetConfig+0xfc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01b      	beq.n	80054ee <TIM_Base_SetConfig+0x8a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054bc:	d017      	beq.n	80054ee <TIM_Base_SetConfig+0x8a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a28      	ldr	r2, [pc, #160]	@ (8005564 <TIM_Base_SetConfig+0x100>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d013      	beq.n	80054ee <TIM_Base_SetConfig+0x8a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a27      	ldr	r2, [pc, #156]	@ (8005568 <TIM_Base_SetConfig+0x104>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00f      	beq.n	80054ee <TIM_Base_SetConfig+0x8a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a26      	ldr	r2, [pc, #152]	@ (800556c <TIM_Base_SetConfig+0x108>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00b      	beq.n	80054ee <TIM_Base_SetConfig+0x8a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a25      	ldr	r2, [pc, #148]	@ (8005570 <TIM_Base_SetConfig+0x10c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d007      	beq.n	80054ee <TIM_Base_SetConfig+0x8a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a24      	ldr	r2, [pc, #144]	@ (8005574 <TIM_Base_SetConfig+0x110>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d003      	beq.n	80054ee <TIM_Base_SetConfig+0x8a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a23      	ldr	r2, [pc, #140]	@ (8005578 <TIM_Base_SetConfig+0x114>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d108      	bne.n	8005500 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a0e      	ldr	r2, [pc, #56]	@ (8005560 <TIM_Base_SetConfig+0xfc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d103      	bne.n	8005534 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b01      	cmp	r3, #1
 8005544:	d105      	bne.n	8005552 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f023 0201 	bic.w	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	611a      	str	r2, [r3, #16]
  }
}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40010000 	.word	0x40010000
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40000c00 	.word	0x40000c00
 8005570:	40014000 	.word	0x40014000
 8005574:	40014400 	.word	0x40014400
 8005578:	40014800 	.word	0x40014800

0800557c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	f023 0201 	bic.w	r2, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0303 	bic.w	r3, r3, #3
 80055b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f023 0302 	bic.w	r3, r3, #2
 80055c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005644 <TIM_OC1_SetConfig+0xc8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d10c      	bne.n	80055f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 0308 	bic.w	r3, r3, #8
 80055de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f023 0304 	bic.w	r3, r3, #4
 80055f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a13      	ldr	r2, [pc, #76]	@ (8005644 <TIM_OC1_SetConfig+0xc8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d111      	bne.n	800561e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	621a      	str	r2, [r3, #32]
}
 8005638:	bf00      	nop
 800563a:	371c      	adds	r7, #28
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	40010000 	.word	0x40010000

08005648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	f023 0210 	bic.w	r2, r3, #16
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800567e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f023 0320 	bic.w	r3, r3, #32
 8005692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a1e      	ldr	r2, [pc, #120]	@ (800571c <TIM_OC2_SetConfig+0xd4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d10d      	bne.n	80056c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a15      	ldr	r2, [pc, #84]	@ (800571c <TIM_OC2_SetConfig+0xd4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d113      	bne.n	80056f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40010000 	.word	0x40010000

08005720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0303 	bic.w	r3, r3, #3
 8005756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a1d      	ldr	r2, [pc, #116]	@ (80057f0 <TIM_OC3_SetConfig+0xd0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d10d      	bne.n	800579a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a14      	ldr	r2, [pc, #80]	@ (80057f0 <TIM_OC3_SetConfig+0xd0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d113      	bne.n	80057ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	621a      	str	r2, [r3, #32]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	40010000 	.word	0x40010000

080057f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800582a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800583e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	031b      	lsls	r3, r3, #12
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a10      	ldr	r2, [pc, #64]	@ (8005890 <TIM_OC4_SetConfig+0x9c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d109      	bne.n	8005868 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800585a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	019b      	lsls	r3, r3, #6
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	621a      	str	r2, [r3, #32]
}
 8005882:	bf00      	nop
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40010000 	.word	0x40010000

08005894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f023 0201 	bic.w	r2, r3, #1
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f023 030a 	bic.w	r3, r3, #10
 80058d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	621a      	str	r2, [r3, #32]
}
 80058e6:	bf00      	nop
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b087      	sub	sp, #28
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	f023 0210 	bic.w	r2, r3, #16
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800591c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	031b      	lsls	r3, r3, #12
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800592e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	621a      	str	r2, [r3, #32]
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005952:	b480      	push	{r7}
 8005954:	b085      	sub	sp, #20
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	f043 0307 	orr.w	r3, r3, #7
 8005974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	609a      	str	r2, [r3, #8]
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	021a      	lsls	r2, r3, #8
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	609a      	str	r2, [r3, #8]
}
 80059bc:	bf00      	nop
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 031f 	and.w	r3, r3, #31
 80059da:	2201      	movs	r2, #1
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a1a      	ldr	r2, [r3, #32]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	43db      	mvns	r3, r3
 80059ea:	401a      	ands	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a1a      	ldr	r2, [r3, #32]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005a00:	431a      	orrs	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
	...

08005a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e050      	b.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d018      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a78:	d013      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a18      	ldr	r2, [pc, #96]	@ (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a16      	ldr	r2, [pc, #88]	@ (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a15      	ldr	r2, [pc, #84]	@ (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a13      	ldr	r2, [pc, #76]	@ (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10c      	bne.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800
 8005ae8:	40000c00 	.word	0x40000c00
 8005aec:	40014000 	.word	0x40014000

08005af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e042      	b.n	8005b88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fc fb22 	bl	8002160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2224      	movs	r2, #36	@ 0x24
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fb79 	bl	800622c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08a      	sub	sp, #40	@ 0x28
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d175      	bne.n	8005c9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_UART_Transmit+0x2c>
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e06e      	b.n	8005c9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2221      	movs	r2, #33	@ 0x21
 8005bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bce:	f7fc fd37 	bl	8002640 <HAL_GetTick>
 8005bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	88fa      	ldrh	r2, [r7, #6]
 8005bd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	88fa      	ldrh	r2, [r7, #6]
 8005bde:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005be8:	d108      	bne.n	8005bfc <HAL_UART_Transmit+0x6c>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d104      	bne.n	8005bfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	e003      	b.n	8005c04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c04:	e02e      	b.n	8005c64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2180      	movs	r1, #128	@ 0x80
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f98b 	bl	8005f2c <UART_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e03a      	b.n	8005c9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10b      	bne.n	8005c46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	3302      	adds	r3, #2
 8005c42:	61bb      	str	r3, [r7, #24]
 8005c44:	e007      	b.n	8005c56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	781a      	ldrb	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	3301      	adds	r3, #1
 8005c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1cb      	bne.n	8005c06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2200      	movs	r2, #0
 8005c76:	2140      	movs	r1, #64	@ 0x40
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f957 	bl	8005f2c <UART_WaitOnFlagUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e006      	b.n	8005c9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e000      	b.n	8005c9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005c9c:	2302      	movs	r3, #2
  }
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b20      	cmp	r3, #32
 8005cbe:	d112      	bne.n	8005ce6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <HAL_UART_Receive_DMA+0x26>
 8005cc6:	88fb      	ldrh	r3, [r7, #6]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e00b      	b.n	8005ce8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f97f 	bl	8005fe0 <UART_Start_Receive_DMA>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	e000      	b.n	8005ce8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005ce6:	2302      	movs	r3, #2
  }
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	460b      	mov	r3, r1
 8005d22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b09c      	sub	sp, #112	@ 0x70
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d172      	bne.n	8005e32 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005d4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d4e:	2200      	movs	r2, #0
 8005d50:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	330c      	adds	r3, #12
 8005d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	330c      	adds	r3, #12
 8005d70:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005d72:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005d74:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d7a:	e841 2300 	strex	r3, r2, [r1]
 8005d7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1e5      	bne.n	8005d52 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3314      	adds	r3, #20
 8005d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3314      	adds	r3, #20
 8005da4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005da6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005da8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e5      	bne.n	8005d86 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3314      	adds	r3, #20
 8005dc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	623b      	str	r3, [r7, #32]
   return(result);
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3314      	adds	r3, #20
 8005dd8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005dda:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e5      	bne.n	8005dba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005dee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005df0:	2220      	movs	r2, #32
 8005df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d119      	bne.n	8005e32 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	330c      	adds	r3, #12
 8005e04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f023 0310 	bic.w	r3, r3, #16
 8005e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e1e:	61fa      	str	r2, [r7, #28]
 8005e20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e22:	69b9      	ldr	r1, [r7, #24]
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	617b      	str	r3, [r7, #20]
   return(result);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e5      	bne.n	8005dfe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e34:	2200      	movs	r2, #0
 8005e36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d106      	bne.n	8005e4e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e44:	4619      	mov	r1, r3
 8005e46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005e48:	f7ff ff66 	bl	8005d18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e4c:	e002      	b.n	8005e54 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005e4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005e50:	f7fb f8ee 	bl	8001030 <HAL_UART_RxCpltCallback>
}
 8005e54:	bf00      	nop
 8005e56:	3770      	adds	r7, #112	@ 0x70
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d108      	bne.n	8005e8a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e7c:	085b      	lsrs	r3, r3, #1
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	4619      	mov	r1, r3
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f7ff ff48 	bl	8005d18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e88:	e002      	b.n	8005e90 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f7ff ff30 	bl	8005cf0 <HAL_UART_RxHalfCpltCallback>
}
 8005e90:	bf00      	nop
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb4:	2b80      	cmp	r3, #128	@ 0x80
 8005eb6:	bf0c      	ite	eq
 8005eb8:	2301      	moveq	r3, #1
 8005eba:	2300      	movne	r3, #0
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b21      	cmp	r3, #33	@ 0x21
 8005eca:	d108      	bne.n	8005ede <UART_DMAError+0x46>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d005      	beq.n	8005ede <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005ed8:	68b8      	ldr	r0, [r7, #8]
 8005eda:	f000 f91b 	bl	8006114 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee8:	2b40      	cmp	r3, #64	@ 0x40
 8005eea:	bf0c      	ite	eq
 8005eec:	2301      	moveq	r3, #1
 8005eee:	2300      	movne	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b22      	cmp	r3, #34	@ 0x22
 8005efe:	d108      	bne.n	8005f12 <UART_DMAError+0x7a>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d005      	beq.n	8005f12 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005f0c:	68b8      	ldr	r0, [r7, #8]
 8005f0e:	f000 f929 	bl	8006164 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f16:	f043 0210 	orr.w	r2, r3, #16
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f1e:	68b8      	ldr	r0, [r7, #8]
 8005f20:	f7ff fef0 	bl	8005d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f24:	bf00      	nop
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	603b      	str	r3, [r7, #0]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f3c:	e03b      	b.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d037      	beq.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f46:	f7fc fb7b 	bl	8002640 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	6a3a      	ldr	r2, [r7, #32]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d302      	bcc.n	8005f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e03a      	b.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f003 0304 	and.w	r3, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d023      	beq.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b80      	cmp	r3, #128	@ 0x80
 8005f72:	d020      	beq.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2b40      	cmp	r3, #64	@ 0x40
 8005f78:	d01d      	beq.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d116      	bne.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f8e0 	bl	8006164 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2208      	movs	r2, #8
 8005fa8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e00f      	b.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	bf0c      	ite	eq
 8005fc6:	2301      	moveq	r3, #1
 8005fc8:	2300      	movne	r3, #0
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	79fb      	ldrb	r3, [r7, #7]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d0b4      	beq.n	8005f3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b098      	sub	sp, #96	@ 0x60
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	4613      	mov	r3, r2
 8005fec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	88fa      	ldrh	r2, [r7, #6]
 8005ff8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2222      	movs	r2, #34	@ 0x22
 8006004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600c:	4a3e      	ldr	r2, [pc, #248]	@ (8006108 <UART_Start_Receive_DMA+0x128>)
 800600e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006014:	4a3d      	ldr	r2, [pc, #244]	@ (800610c <UART_Start_Receive_DMA+0x12c>)
 8006016:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601c:	4a3c      	ldr	r2, [pc, #240]	@ (8006110 <UART_Start_Receive_DMA+0x130>)
 800601e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006024:	2200      	movs	r2, #0
 8006026:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006028:	f107 0308 	add.w	r3, r7, #8
 800602c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3304      	adds	r3, #4
 8006038:	4619      	mov	r1, r3
 800603a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	f7fc fcee 	bl	8002a20 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006044:	2300      	movs	r3, #0
 8006046:	613b      	str	r3, [r7, #16]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	613b      	str	r3, [r7, #16]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d019      	beq.n	8006096 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	330c      	adds	r3, #12
 8006068:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006078:	65bb      	str	r3, [r7, #88]	@ 0x58
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	330c      	adds	r3, #12
 8006080:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006082:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006084:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006088:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e5      	bne.n	8006062 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3314      	adds	r3, #20
 800609c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a8:	f043 0301 	orr.w	r3, r3, #1
 80060ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3314      	adds	r3, #20
 80060b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80060b6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80060b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80060bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e5      	bne.n	8006096 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3314      	adds	r3, #20
 80060d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	617b      	str	r3, [r7, #20]
   return(result);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3314      	adds	r3, #20
 80060e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80060ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80060ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6a39      	ldr	r1, [r7, #32]
 80060f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e5      	bne.n	80060ca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3760      	adds	r7, #96	@ 0x60
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	08005d31 	.word	0x08005d31
 800610c:	08005e5d 	.word	0x08005e5d
 8006110:	08005e99 	.word	0x08005e99

08006114 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b089      	sub	sp, #36	@ 0x24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	330c      	adds	r3, #12
 8006122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	60bb      	str	r3, [r7, #8]
   return(result);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006132:	61fb      	str	r3, [r7, #28]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	330c      	adds	r3, #12
 800613a:	69fa      	ldr	r2, [r7, #28]
 800613c:	61ba      	str	r2, [r7, #24]
 800613e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	6979      	ldr	r1, [r7, #20]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	613b      	str	r3, [r7, #16]
   return(result);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e5      	bne.n	800611c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006158:	bf00      	nop
 800615a:	3724      	adds	r7, #36	@ 0x24
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b095      	sub	sp, #84	@ 0x54
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	330c      	adds	r3, #12
 8006172:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006176:	e853 3f00 	ldrex	r3, [r3]
 800617a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	330c      	adds	r3, #12
 800618a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800618c:	643a      	str	r2, [r7, #64]	@ 0x40
 800618e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006192:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006194:	e841 2300 	strex	r3, r2, [r1]
 8006198:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800619a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e5      	bne.n	800616c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3314      	adds	r3, #20
 80061a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	e853 3f00 	ldrex	r3, [r3]
 80061ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f023 0301 	bic.w	r3, r3, #1
 80061b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3314      	adds	r3, #20
 80061be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061c8:	e841 2300 	strex	r3, r2, [r1]
 80061cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e5      	bne.n	80061a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d119      	bne.n	8006210 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	330c      	adds	r3, #12
 80061e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f023 0310 	bic.w	r3, r3, #16
 80061f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	330c      	adds	r3, #12
 80061fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061fc:	61ba      	str	r2, [r7, #24]
 80061fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	6979      	ldr	r1, [r7, #20]
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	e841 2300 	strex	r3, r2, [r1]
 8006208:	613b      	str	r3, [r7, #16]
   return(result);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e5      	bne.n	80061dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800621e:	bf00      	nop
 8006220:	3754      	adds	r7, #84	@ 0x54
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800622c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006230:	b0c0      	sub	sp, #256	@ 0x100
 8006232:	af00      	add	r7, sp, #0
 8006234:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006248:	68d9      	ldr	r1, [r3, #12]
 800624a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	ea40 0301 	orr.w	r3, r0, r1
 8006254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	431a      	orrs	r2, r3
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	431a      	orrs	r2, r3
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006284:	f021 010c 	bic.w	r1, r1, #12
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006292:	430b      	orrs	r3, r1
 8006294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80062a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a6:	6999      	ldr	r1, [r3, #24]
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	ea40 0301 	orr.w	r3, r0, r1
 80062b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	4b8f      	ldr	r3, [pc, #572]	@ (80064f8 <UART_SetConfig+0x2cc>)
 80062bc:	429a      	cmp	r2, r3
 80062be:	d005      	beq.n	80062cc <UART_SetConfig+0xa0>
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4b8d      	ldr	r3, [pc, #564]	@ (80064fc <UART_SetConfig+0x2d0>)
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d104      	bne.n	80062d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062cc:	f7fe fdde 	bl	8004e8c <HAL_RCC_GetPCLK2Freq>
 80062d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80062d4:	e003      	b.n	80062de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062d6:	f7fe fdc5 	bl	8004e64 <HAL_RCC_GetPCLK1Freq>
 80062da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062e8:	f040 810c 	bne.w	8006504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062f0:	2200      	movs	r2, #0
 80062f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80062fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80062fe:	4622      	mov	r2, r4
 8006300:	462b      	mov	r3, r5
 8006302:	1891      	adds	r1, r2, r2
 8006304:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006306:	415b      	adcs	r3, r3
 8006308:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800630a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800630e:	4621      	mov	r1, r4
 8006310:	eb12 0801 	adds.w	r8, r2, r1
 8006314:	4629      	mov	r1, r5
 8006316:	eb43 0901 	adc.w	r9, r3, r1
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800632a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800632e:	4690      	mov	r8, r2
 8006330:	4699      	mov	r9, r3
 8006332:	4623      	mov	r3, r4
 8006334:	eb18 0303 	adds.w	r3, r8, r3
 8006338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800633c:	462b      	mov	r3, r5
 800633e:	eb49 0303 	adc.w	r3, r9, r3
 8006342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006352:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800635a:	460b      	mov	r3, r1
 800635c:	18db      	adds	r3, r3, r3
 800635e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006360:	4613      	mov	r3, r2
 8006362:	eb42 0303 	adc.w	r3, r2, r3
 8006366:	657b      	str	r3, [r7, #84]	@ 0x54
 8006368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800636c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006370:	f7fa fc92 	bl	8000c98 <__aeabi_uldivmod>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4b61      	ldr	r3, [pc, #388]	@ (8006500 <UART_SetConfig+0x2d4>)
 800637a:	fba3 2302 	umull	r2, r3, r3, r2
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	011c      	lsls	r4, r3, #4
 8006382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006386:	2200      	movs	r2, #0
 8006388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800638c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006394:	4642      	mov	r2, r8
 8006396:	464b      	mov	r3, r9
 8006398:	1891      	adds	r1, r2, r2
 800639a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800639c:	415b      	adcs	r3, r3
 800639e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80063a4:	4641      	mov	r1, r8
 80063a6:	eb12 0a01 	adds.w	sl, r2, r1
 80063aa:	4649      	mov	r1, r9
 80063ac:	eb43 0b01 	adc.w	fp, r3, r1
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063c4:	4692      	mov	sl, r2
 80063c6:	469b      	mov	fp, r3
 80063c8:	4643      	mov	r3, r8
 80063ca:	eb1a 0303 	adds.w	r3, sl, r3
 80063ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063d2:	464b      	mov	r3, r9
 80063d4:	eb4b 0303 	adc.w	r3, fp, r3
 80063d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80063ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80063f0:	460b      	mov	r3, r1
 80063f2:	18db      	adds	r3, r3, r3
 80063f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80063f6:	4613      	mov	r3, r2
 80063f8:	eb42 0303 	adc.w	r3, r2, r3
 80063fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80063fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006406:	f7fa fc47 	bl	8000c98 <__aeabi_uldivmod>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4611      	mov	r1, r2
 8006410:	4b3b      	ldr	r3, [pc, #236]	@ (8006500 <UART_SetConfig+0x2d4>)
 8006412:	fba3 2301 	umull	r2, r3, r3, r1
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	2264      	movs	r2, #100	@ 0x64
 800641a:	fb02 f303 	mul.w	r3, r2, r3
 800641e:	1acb      	subs	r3, r1, r3
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006426:	4b36      	ldr	r3, [pc, #216]	@ (8006500 <UART_SetConfig+0x2d4>)
 8006428:	fba3 2302 	umull	r2, r3, r3, r2
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006434:	441c      	add	r4, r3
 8006436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800643a:	2200      	movs	r2, #0
 800643c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006440:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006448:	4642      	mov	r2, r8
 800644a:	464b      	mov	r3, r9
 800644c:	1891      	adds	r1, r2, r2
 800644e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006450:	415b      	adcs	r3, r3
 8006452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006458:	4641      	mov	r1, r8
 800645a:	1851      	adds	r1, r2, r1
 800645c:	6339      	str	r1, [r7, #48]	@ 0x30
 800645e:	4649      	mov	r1, r9
 8006460:	414b      	adcs	r3, r1
 8006462:	637b      	str	r3, [r7, #52]	@ 0x34
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006470:	4659      	mov	r1, fp
 8006472:	00cb      	lsls	r3, r1, #3
 8006474:	4651      	mov	r1, sl
 8006476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800647a:	4651      	mov	r1, sl
 800647c:	00ca      	lsls	r2, r1, #3
 800647e:	4610      	mov	r0, r2
 8006480:	4619      	mov	r1, r3
 8006482:	4603      	mov	r3, r0
 8006484:	4642      	mov	r2, r8
 8006486:	189b      	adds	r3, r3, r2
 8006488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800648c:	464b      	mov	r3, r9
 800648e:	460a      	mov	r2, r1
 8006490:	eb42 0303 	adc.w	r3, r2, r3
 8006494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80064a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064ac:	460b      	mov	r3, r1
 80064ae:	18db      	adds	r3, r3, r3
 80064b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064b2:	4613      	mov	r3, r2
 80064b4:	eb42 0303 	adc.w	r3, r2, r3
 80064b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80064c2:	f7fa fbe9 	bl	8000c98 <__aeabi_uldivmod>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006500 <UART_SetConfig+0x2d4>)
 80064cc:	fba3 1302 	umull	r1, r3, r3, r2
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	2164      	movs	r1, #100	@ 0x64
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	3332      	adds	r3, #50	@ 0x32
 80064de:	4a08      	ldr	r2, [pc, #32]	@ (8006500 <UART_SetConfig+0x2d4>)
 80064e0:	fba2 2303 	umull	r2, r3, r2, r3
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	f003 0207 	and.w	r2, r3, #7
 80064ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4422      	add	r2, r4
 80064f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064f4:	e106      	b.n	8006704 <UART_SetConfig+0x4d8>
 80064f6:	bf00      	nop
 80064f8:	40011000 	.word	0x40011000
 80064fc:	40011400 	.word	0x40011400
 8006500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006508:	2200      	movs	r2, #0
 800650a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800650e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006516:	4642      	mov	r2, r8
 8006518:	464b      	mov	r3, r9
 800651a:	1891      	adds	r1, r2, r2
 800651c:	6239      	str	r1, [r7, #32]
 800651e:	415b      	adcs	r3, r3
 8006520:	627b      	str	r3, [r7, #36]	@ 0x24
 8006522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006526:	4641      	mov	r1, r8
 8006528:	1854      	adds	r4, r2, r1
 800652a:	4649      	mov	r1, r9
 800652c:	eb43 0501 	adc.w	r5, r3, r1
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	f04f 0300 	mov.w	r3, #0
 8006538:	00eb      	lsls	r3, r5, #3
 800653a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800653e:	00e2      	lsls	r2, r4, #3
 8006540:	4614      	mov	r4, r2
 8006542:	461d      	mov	r5, r3
 8006544:	4643      	mov	r3, r8
 8006546:	18e3      	adds	r3, r4, r3
 8006548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800654c:	464b      	mov	r3, r9
 800654e:	eb45 0303 	adc.w	r3, r5, r3
 8006552:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006562:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006572:	4629      	mov	r1, r5
 8006574:	008b      	lsls	r3, r1, #2
 8006576:	4621      	mov	r1, r4
 8006578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800657c:	4621      	mov	r1, r4
 800657e:	008a      	lsls	r2, r1, #2
 8006580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006584:	f7fa fb88 	bl	8000c98 <__aeabi_uldivmod>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4b60      	ldr	r3, [pc, #384]	@ (8006710 <UART_SetConfig+0x4e4>)
 800658e:	fba3 2302 	umull	r2, r3, r3, r2
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	011c      	lsls	r4, r3, #4
 8006596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800659a:	2200      	movs	r2, #0
 800659c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80065a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80065a8:	4642      	mov	r2, r8
 80065aa:	464b      	mov	r3, r9
 80065ac:	1891      	adds	r1, r2, r2
 80065ae:	61b9      	str	r1, [r7, #24]
 80065b0:	415b      	adcs	r3, r3
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065b8:	4641      	mov	r1, r8
 80065ba:	1851      	adds	r1, r2, r1
 80065bc:	6139      	str	r1, [r7, #16]
 80065be:	4649      	mov	r1, r9
 80065c0:	414b      	adcs	r3, r1
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065d0:	4659      	mov	r1, fp
 80065d2:	00cb      	lsls	r3, r1, #3
 80065d4:	4651      	mov	r1, sl
 80065d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065da:	4651      	mov	r1, sl
 80065dc:	00ca      	lsls	r2, r1, #3
 80065de:	4610      	mov	r0, r2
 80065e0:	4619      	mov	r1, r3
 80065e2:	4603      	mov	r3, r0
 80065e4:	4642      	mov	r2, r8
 80065e6:	189b      	adds	r3, r3, r2
 80065e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065ec:	464b      	mov	r3, r9
 80065ee:	460a      	mov	r2, r1
 80065f0:	eb42 0303 	adc.w	r3, r2, r3
 80065f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006602:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006610:	4649      	mov	r1, r9
 8006612:	008b      	lsls	r3, r1, #2
 8006614:	4641      	mov	r1, r8
 8006616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800661a:	4641      	mov	r1, r8
 800661c:	008a      	lsls	r2, r1, #2
 800661e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006622:	f7fa fb39 	bl	8000c98 <__aeabi_uldivmod>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4611      	mov	r1, r2
 800662c:	4b38      	ldr	r3, [pc, #224]	@ (8006710 <UART_SetConfig+0x4e4>)
 800662e:	fba3 2301 	umull	r2, r3, r3, r1
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	2264      	movs	r2, #100	@ 0x64
 8006636:	fb02 f303 	mul.w	r3, r2, r3
 800663a:	1acb      	subs	r3, r1, r3
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	3332      	adds	r3, #50	@ 0x32
 8006640:	4a33      	ldr	r2, [pc, #204]	@ (8006710 <UART_SetConfig+0x4e4>)
 8006642:	fba2 2303 	umull	r2, r3, r2, r3
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800664c:	441c      	add	r4, r3
 800664e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006652:	2200      	movs	r2, #0
 8006654:	673b      	str	r3, [r7, #112]	@ 0x70
 8006656:	677a      	str	r2, [r7, #116]	@ 0x74
 8006658:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800665c:	4642      	mov	r2, r8
 800665e:	464b      	mov	r3, r9
 8006660:	1891      	adds	r1, r2, r2
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	415b      	adcs	r3, r3
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800666c:	4641      	mov	r1, r8
 800666e:	1851      	adds	r1, r2, r1
 8006670:	6039      	str	r1, [r7, #0]
 8006672:	4649      	mov	r1, r9
 8006674:	414b      	adcs	r3, r1
 8006676:	607b      	str	r3, [r7, #4]
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006684:	4659      	mov	r1, fp
 8006686:	00cb      	lsls	r3, r1, #3
 8006688:	4651      	mov	r1, sl
 800668a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668e:	4651      	mov	r1, sl
 8006690:	00ca      	lsls	r2, r1, #3
 8006692:	4610      	mov	r0, r2
 8006694:	4619      	mov	r1, r3
 8006696:	4603      	mov	r3, r0
 8006698:	4642      	mov	r2, r8
 800669a:	189b      	adds	r3, r3, r2
 800669c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800669e:	464b      	mov	r3, r9
 80066a0:	460a      	mov	r2, r1
 80066a2:	eb42 0303 	adc.w	r3, r2, r3
 80066a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80066b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80066c0:	4649      	mov	r1, r9
 80066c2:	008b      	lsls	r3, r1, #2
 80066c4:	4641      	mov	r1, r8
 80066c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ca:	4641      	mov	r1, r8
 80066cc:	008a      	lsls	r2, r1, #2
 80066ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80066d2:	f7fa fae1 	bl	8000c98 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4b0d      	ldr	r3, [pc, #52]	@ (8006710 <UART_SetConfig+0x4e4>)
 80066dc:	fba3 1302 	umull	r1, r3, r3, r2
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	2164      	movs	r1, #100	@ 0x64
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	3332      	adds	r3, #50	@ 0x32
 80066ee:	4a08      	ldr	r2, [pc, #32]	@ (8006710 <UART_SetConfig+0x4e4>)
 80066f0:	fba2 2303 	umull	r2, r3, r2, r3
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	f003 020f 	and.w	r2, r3, #15
 80066fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4422      	add	r2, r4
 8006702:	609a      	str	r2, [r3, #8]
}
 8006704:	bf00      	nop
 8006706:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800670a:	46bd      	mov	sp, r7
 800670c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006710:	51eb851f 	.word	0x51eb851f

08006714 <__cvt>:
 8006714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006718:	ec57 6b10 	vmov	r6, r7, d0
 800671c:	2f00      	cmp	r7, #0
 800671e:	460c      	mov	r4, r1
 8006720:	4619      	mov	r1, r3
 8006722:	463b      	mov	r3, r7
 8006724:	bfbb      	ittet	lt
 8006726:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800672a:	461f      	movlt	r7, r3
 800672c:	2300      	movge	r3, #0
 800672e:	232d      	movlt	r3, #45	@ 0x2d
 8006730:	700b      	strb	r3, [r1, #0]
 8006732:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006734:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006738:	4691      	mov	r9, r2
 800673a:	f023 0820 	bic.w	r8, r3, #32
 800673e:	bfbc      	itt	lt
 8006740:	4632      	movlt	r2, r6
 8006742:	4616      	movlt	r6, r2
 8006744:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006748:	d005      	beq.n	8006756 <__cvt+0x42>
 800674a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800674e:	d100      	bne.n	8006752 <__cvt+0x3e>
 8006750:	3401      	adds	r4, #1
 8006752:	2102      	movs	r1, #2
 8006754:	e000      	b.n	8006758 <__cvt+0x44>
 8006756:	2103      	movs	r1, #3
 8006758:	ab03      	add	r3, sp, #12
 800675a:	9301      	str	r3, [sp, #4]
 800675c:	ab02      	add	r3, sp, #8
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	ec47 6b10 	vmov	d0, r6, r7
 8006764:	4653      	mov	r3, sl
 8006766:	4622      	mov	r2, r4
 8006768:	f001 f972 	bl	8007a50 <_dtoa_r>
 800676c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006770:	4605      	mov	r5, r0
 8006772:	d119      	bne.n	80067a8 <__cvt+0x94>
 8006774:	f019 0f01 	tst.w	r9, #1
 8006778:	d00e      	beq.n	8006798 <__cvt+0x84>
 800677a:	eb00 0904 	add.w	r9, r0, r4
 800677e:	2200      	movs	r2, #0
 8006780:	2300      	movs	r3, #0
 8006782:	4630      	mov	r0, r6
 8006784:	4639      	mov	r1, r7
 8006786:	f7fa f9a7 	bl	8000ad8 <__aeabi_dcmpeq>
 800678a:	b108      	cbz	r0, 8006790 <__cvt+0x7c>
 800678c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006790:	2230      	movs	r2, #48	@ 0x30
 8006792:	9b03      	ldr	r3, [sp, #12]
 8006794:	454b      	cmp	r3, r9
 8006796:	d31e      	bcc.n	80067d6 <__cvt+0xc2>
 8006798:	9b03      	ldr	r3, [sp, #12]
 800679a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800679c:	1b5b      	subs	r3, r3, r5
 800679e:	4628      	mov	r0, r5
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	b004      	add	sp, #16
 80067a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067ac:	eb00 0904 	add.w	r9, r0, r4
 80067b0:	d1e5      	bne.n	800677e <__cvt+0x6a>
 80067b2:	7803      	ldrb	r3, [r0, #0]
 80067b4:	2b30      	cmp	r3, #48	@ 0x30
 80067b6:	d10a      	bne.n	80067ce <__cvt+0xba>
 80067b8:	2200      	movs	r2, #0
 80067ba:	2300      	movs	r3, #0
 80067bc:	4630      	mov	r0, r6
 80067be:	4639      	mov	r1, r7
 80067c0:	f7fa f98a 	bl	8000ad8 <__aeabi_dcmpeq>
 80067c4:	b918      	cbnz	r0, 80067ce <__cvt+0xba>
 80067c6:	f1c4 0401 	rsb	r4, r4, #1
 80067ca:	f8ca 4000 	str.w	r4, [sl]
 80067ce:	f8da 3000 	ldr.w	r3, [sl]
 80067d2:	4499      	add	r9, r3
 80067d4:	e7d3      	b.n	800677e <__cvt+0x6a>
 80067d6:	1c59      	adds	r1, r3, #1
 80067d8:	9103      	str	r1, [sp, #12]
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	e7d9      	b.n	8006792 <__cvt+0x7e>

080067de <__exponent>:
 80067de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067e0:	2900      	cmp	r1, #0
 80067e2:	bfba      	itte	lt
 80067e4:	4249      	neglt	r1, r1
 80067e6:	232d      	movlt	r3, #45	@ 0x2d
 80067e8:	232b      	movge	r3, #43	@ 0x2b
 80067ea:	2909      	cmp	r1, #9
 80067ec:	7002      	strb	r2, [r0, #0]
 80067ee:	7043      	strb	r3, [r0, #1]
 80067f0:	dd29      	ble.n	8006846 <__exponent+0x68>
 80067f2:	f10d 0307 	add.w	r3, sp, #7
 80067f6:	461d      	mov	r5, r3
 80067f8:	270a      	movs	r7, #10
 80067fa:	461a      	mov	r2, r3
 80067fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8006800:	fb07 1416 	mls	r4, r7, r6, r1
 8006804:	3430      	adds	r4, #48	@ 0x30
 8006806:	f802 4c01 	strb.w	r4, [r2, #-1]
 800680a:	460c      	mov	r4, r1
 800680c:	2c63      	cmp	r4, #99	@ 0x63
 800680e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006812:	4631      	mov	r1, r6
 8006814:	dcf1      	bgt.n	80067fa <__exponent+0x1c>
 8006816:	3130      	adds	r1, #48	@ 0x30
 8006818:	1e94      	subs	r4, r2, #2
 800681a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800681e:	1c41      	adds	r1, r0, #1
 8006820:	4623      	mov	r3, r4
 8006822:	42ab      	cmp	r3, r5
 8006824:	d30a      	bcc.n	800683c <__exponent+0x5e>
 8006826:	f10d 0309 	add.w	r3, sp, #9
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	42ac      	cmp	r4, r5
 800682e:	bf88      	it	hi
 8006830:	2300      	movhi	r3, #0
 8006832:	3302      	adds	r3, #2
 8006834:	4403      	add	r3, r0
 8006836:	1a18      	subs	r0, r3, r0
 8006838:	b003      	add	sp, #12
 800683a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800683c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006840:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006844:	e7ed      	b.n	8006822 <__exponent+0x44>
 8006846:	2330      	movs	r3, #48	@ 0x30
 8006848:	3130      	adds	r1, #48	@ 0x30
 800684a:	7083      	strb	r3, [r0, #2]
 800684c:	70c1      	strb	r1, [r0, #3]
 800684e:	1d03      	adds	r3, r0, #4
 8006850:	e7f1      	b.n	8006836 <__exponent+0x58>
	...

08006854 <_printf_float>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	b08d      	sub	sp, #52	@ 0x34
 800685a:	460c      	mov	r4, r1
 800685c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006860:	4616      	mov	r6, r2
 8006862:	461f      	mov	r7, r3
 8006864:	4605      	mov	r5, r0
 8006866:	f000 ffed 	bl	8007844 <_localeconv_r>
 800686a:	6803      	ldr	r3, [r0, #0]
 800686c:	9304      	str	r3, [sp, #16]
 800686e:	4618      	mov	r0, r3
 8006870:	f7f9 fd06 	bl	8000280 <strlen>
 8006874:	2300      	movs	r3, #0
 8006876:	930a      	str	r3, [sp, #40]	@ 0x28
 8006878:	f8d8 3000 	ldr.w	r3, [r8]
 800687c:	9005      	str	r0, [sp, #20]
 800687e:	3307      	adds	r3, #7
 8006880:	f023 0307 	bic.w	r3, r3, #7
 8006884:	f103 0208 	add.w	r2, r3, #8
 8006888:	f894 a018 	ldrb.w	sl, [r4, #24]
 800688c:	f8d4 b000 	ldr.w	fp, [r4]
 8006890:	f8c8 2000 	str.w	r2, [r8]
 8006894:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006898:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800689c:	9307      	str	r3, [sp, #28]
 800689e:	f8cd 8018 	str.w	r8, [sp, #24]
 80068a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80068a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068aa:	4b9c      	ldr	r3, [pc, #624]	@ (8006b1c <_printf_float+0x2c8>)
 80068ac:	f04f 32ff 	mov.w	r2, #4294967295
 80068b0:	f7fa f944 	bl	8000b3c <__aeabi_dcmpun>
 80068b4:	bb70      	cbnz	r0, 8006914 <_printf_float+0xc0>
 80068b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068ba:	4b98      	ldr	r3, [pc, #608]	@ (8006b1c <_printf_float+0x2c8>)
 80068bc:	f04f 32ff 	mov.w	r2, #4294967295
 80068c0:	f7fa f91e 	bl	8000b00 <__aeabi_dcmple>
 80068c4:	bb30      	cbnz	r0, 8006914 <_printf_float+0xc0>
 80068c6:	2200      	movs	r2, #0
 80068c8:	2300      	movs	r3, #0
 80068ca:	4640      	mov	r0, r8
 80068cc:	4649      	mov	r1, r9
 80068ce:	f7fa f90d 	bl	8000aec <__aeabi_dcmplt>
 80068d2:	b110      	cbz	r0, 80068da <_printf_float+0x86>
 80068d4:	232d      	movs	r3, #45	@ 0x2d
 80068d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068da:	4a91      	ldr	r2, [pc, #580]	@ (8006b20 <_printf_float+0x2cc>)
 80068dc:	4b91      	ldr	r3, [pc, #580]	@ (8006b24 <_printf_float+0x2d0>)
 80068de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80068e2:	bf8c      	ite	hi
 80068e4:	4690      	movhi	r8, r2
 80068e6:	4698      	movls	r8, r3
 80068e8:	2303      	movs	r3, #3
 80068ea:	6123      	str	r3, [r4, #16]
 80068ec:	f02b 0304 	bic.w	r3, fp, #4
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	f04f 0900 	mov.w	r9, #0
 80068f6:	9700      	str	r7, [sp, #0]
 80068f8:	4633      	mov	r3, r6
 80068fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80068fc:	4621      	mov	r1, r4
 80068fe:	4628      	mov	r0, r5
 8006900:	f000 f9d2 	bl	8006ca8 <_printf_common>
 8006904:	3001      	adds	r0, #1
 8006906:	f040 808d 	bne.w	8006a24 <_printf_float+0x1d0>
 800690a:	f04f 30ff 	mov.w	r0, #4294967295
 800690e:	b00d      	add	sp, #52	@ 0x34
 8006910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006914:	4642      	mov	r2, r8
 8006916:	464b      	mov	r3, r9
 8006918:	4640      	mov	r0, r8
 800691a:	4649      	mov	r1, r9
 800691c:	f7fa f90e 	bl	8000b3c <__aeabi_dcmpun>
 8006920:	b140      	cbz	r0, 8006934 <_printf_float+0xe0>
 8006922:	464b      	mov	r3, r9
 8006924:	2b00      	cmp	r3, #0
 8006926:	bfbc      	itt	lt
 8006928:	232d      	movlt	r3, #45	@ 0x2d
 800692a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800692e:	4a7e      	ldr	r2, [pc, #504]	@ (8006b28 <_printf_float+0x2d4>)
 8006930:	4b7e      	ldr	r3, [pc, #504]	@ (8006b2c <_printf_float+0x2d8>)
 8006932:	e7d4      	b.n	80068de <_printf_float+0x8a>
 8006934:	6863      	ldr	r3, [r4, #4]
 8006936:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800693a:	9206      	str	r2, [sp, #24]
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	d13b      	bne.n	80069b8 <_printf_float+0x164>
 8006940:	2306      	movs	r3, #6
 8006942:	6063      	str	r3, [r4, #4]
 8006944:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006948:	2300      	movs	r3, #0
 800694a:	6022      	str	r2, [r4, #0]
 800694c:	9303      	str	r3, [sp, #12]
 800694e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006950:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006954:	ab09      	add	r3, sp, #36	@ 0x24
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	6861      	ldr	r1, [r4, #4]
 800695a:	ec49 8b10 	vmov	d0, r8, r9
 800695e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006962:	4628      	mov	r0, r5
 8006964:	f7ff fed6 	bl	8006714 <__cvt>
 8006968:	9b06      	ldr	r3, [sp, #24]
 800696a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800696c:	2b47      	cmp	r3, #71	@ 0x47
 800696e:	4680      	mov	r8, r0
 8006970:	d129      	bne.n	80069c6 <_printf_float+0x172>
 8006972:	1cc8      	adds	r0, r1, #3
 8006974:	db02      	blt.n	800697c <_printf_float+0x128>
 8006976:	6863      	ldr	r3, [r4, #4]
 8006978:	4299      	cmp	r1, r3
 800697a:	dd41      	ble.n	8006a00 <_printf_float+0x1ac>
 800697c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006980:	fa5f fa8a 	uxtb.w	sl, sl
 8006984:	3901      	subs	r1, #1
 8006986:	4652      	mov	r2, sl
 8006988:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800698c:	9109      	str	r1, [sp, #36]	@ 0x24
 800698e:	f7ff ff26 	bl	80067de <__exponent>
 8006992:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006994:	1813      	adds	r3, r2, r0
 8006996:	2a01      	cmp	r2, #1
 8006998:	4681      	mov	r9, r0
 800699a:	6123      	str	r3, [r4, #16]
 800699c:	dc02      	bgt.n	80069a4 <_printf_float+0x150>
 800699e:	6822      	ldr	r2, [r4, #0]
 80069a0:	07d2      	lsls	r2, r2, #31
 80069a2:	d501      	bpl.n	80069a8 <_printf_float+0x154>
 80069a4:	3301      	adds	r3, #1
 80069a6:	6123      	str	r3, [r4, #16]
 80069a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0a2      	beq.n	80068f6 <_printf_float+0xa2>
 80069b0:	232d      	movs	r3, #45	@ 0x2d
 80069b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069b6:	e79e      	b.n	80068f6 <_printf_float+0xa2>
 80069b8:	9a06      	ldr	r2, [sp, #24]
 80069ba:	2a47      	cmp	r2, #71	@ 0x47
 80069bc:	d1c2      	bne.n	8006944 <_printf_float+0xf0>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1c0      	bne.n	8006944 <_printf_float+0xf0>
 80069c2:	2301      	movs	r3, #1
 80069c4:	e7bd      	b.n	8006942 <_printf_float+0xee>
 80069c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069ca:	d9db      	bls.n	8006984 <_printf_float+0x130>
 80069cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80069d0:	d118      	bne.n	8006a04 <_printf_float+0x1b0>
 80069d2:	2900      	cmp	r1, #0
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	dd0b      	ble.n	80069f0 <_printf_float+0x19c>
 80069d8:	6121      	str	r1, [r4, #16]
 80069da:	b913      	cbnz	r3, 80069e2 <_printf_float+0x18e>
 80069dc:	6822      	ldr	r2, [r4, #0]
 80069de:	07d0      	lsls	r0, r2, #31
 80069e0:	d502      	bpl.n	80069e8 <_printf_float+0x194>
 80069e2:	3301      	adds	r3, #1
 80069e4:	440b      	add	r3, r1
 80069e6:	6123      	str	r3, [r4, #16]
 80069e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80069ea:	f04f 0900 	mov.w	r9, #0
 80069ee:	e7db      	b.n	80069a8 <_printf_float+0x154>
 80069f0:	b913      	cbnz	r3, 80069f8 <_printf_float+0x1a4>
 80069f2:	6822      	ldr	r2, [r4, #0]
 80069f4:	07d2      	lsls	r2, r2, #31
 80069f6:	d501      	bpl.n	80069fc <_printf_float+0x1a8>
 80069f8:	3302      	adds	r3, #2
 80069fa:	e7f4      	b.n	80069e6 <_printf_float+0x192>
 80069fc:	2301      	movs	r3, #1
 80069fe:	e7f2      	b.n	80069e6 <_printf_float+0x192>
 8006a00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a06:	4299      	cmp	r1, r3
 8006a08:	db05      	blt.n	8006a16 <_printf_float+0x1c2>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	6121      	str	r1, [r4, #16]
 8006a0e:	07d8      	lsls	r0, r3, #31
 8006a10:	d5ea      	bpl.n	80069e8 <_printf_float+0x194>
 8006a12:	1c4b      	adds	r3, r1, #1
 8006a14:	e7e7      	b.n	80069e6 <_printf_float+0x192>
 8006a16:	2900      	cmp	r1, #0
 8006a18:	bfd4      	ite	le
 8006a1a:	f1c1 0202 	rsble	r2, r1, #2
 8006a1e:	2201      	movgt	r2, #1
 8006a20:	4413      	add	r3, r2
 8006a22:	e7e0      	b.n	80069e6 <_printf_float+0x192>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	055a      	lsls	r2, r3, #21
 8006a28:	d407      	bmi.n	8006a3a <_printf_float+0x1e6>
 8006a2a:	6923      	ldr	r3, [r4, #16]
 8006a2c:	4642      	mov	r2, r8
 8006a2e:	4631      	mov	r1, r6
 8006a30:	4628      	mov	r0, r5
 8006a32:	47b8      	blx	r7
 8006a34:	3001      	adds	r0, #1
 8006a36:	d12b      	bne.n	8006a90 <_printf_float+0x23c>
 8006a38:	e767      	b.n	800690a <_printf_float+0xb6>
 8006a3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a3e:	f240 80dd 	bls.w	8006bfc <_printf_float+0x3a8>
 8006a42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a46:	2200      	movs	r2, #0
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f7fa f845 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d033      	beq.n	8006aba <_printf_float+0x266>
 8006a52:	4a37      	ldr	r2, [pc, #220]	@ (8006b30 <_printf_float+0x2dc>)
 8006a54:	2301      	movs	r3, #1
 8006a56:	4631      	mov	r1, r6
 8006a58:	4628      	mov	r0, r5
 8006a5a:	47b8      	blx	r7
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	f43f af54 	beq.w	800690a <_printf_float+0xb6>
 8006a62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006a66:	4543      	cmp	r3, r8
 8006a68:	db02      	blt.n	8006a70 <_printf_float+0x21c>
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	07d8      	lsls	r0, r3, #31
 8006a6e:	d50f      	bpl.n	8006a90 <_printf_float+0x23c>
 8006a70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a74:	4631      	mov	r1, r6
 8006a76:	4628      	mov	r0, r5
 8006a78:	47b8      	blx	r7
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	f43f af45 	beq.w	800690a <_printf_float+0xb6>
 8006a80:	f04f 0900 	mov.w	r9, #0
 8006a84:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a88:	f104 0a1a 	add.w	sl, r4, #26
 8006a8c:	45c8      	cmp	r8, r9
 8006a8e:	dc09      	bgt.n	8006aa4 <_printf_float+0x250>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	079b      	lsls	r3, r3, #30
 8006a94:	f100 8103 	bmi.w	8006c9e <_printf_float+0x44a>
 8006a98:	68e0      	ldr	r0, [r4, #12]
 8006a9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a9c:	4298      	cmp	r0, r3
 8006a9e:	bfb8      	it	lt
 8006aa0:	4618      	movlt	r0, r3
 8006aa2:	e734      	b.n	800690e <_printf_float+0xba>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	4652      	mov	r2, sl
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b8      	blx	r7
 8006aae:	3001      	adds	r0, #1
 8006ab0:	f43f af2b 	beq.w	800690a <_printf_float+0xb6>
 8006ab4:	f109 0901 	add.w	r9, r9, #1
 8006ab8:	e7e8      	b.n	8006a8c <_printf_float+0x238>
 8006aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	dc39      	bgt.n	8006b34 <_printf_float+0x2e0>
 8006ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b30 <_printf_float+0x2dc>)
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	47b8      	blx	r7
 8006aca:	3001      	adds	r0, #1
 8006acc:	f43f af1d 	beq.w	800690a <_printf_float+0xb6>
 8006ad0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006ad4:	ea59 0303 	orrs.w	r3, r9, r3
 8006ad8:	d102      	bne.n	8006ae0 <_printf_float+0x28c>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	07d9      	lsls	r1, r3, #31
 8006ade:	d5d7      	bpl.n	8006a90 <_printf_float+0x23c>
 8006ae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	47b8      	blx	r7
 8006aea:	3001      	adds	r0, #1
 8006aec:	f43f af0d 	beq.w	800690a <_printf_float+0xb6>
 8006af0:	f04f 0a00 	mov.w	sl, #0
 8006af4:	f104 0b1a 	add.w	fp, r4, #26
 8006af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006afa:	425b      	negs	r3, r3
 8006afc:	4553      	cmp	r3, sl
 8006afe:	dc01      	bgt.n	8006b04 <_printf_float+0x2b0>
 8006b00:	464b      	mov	r3, r9
 8006b02:	e793      	b.n	8006a2c <_printf_float+0x1d8>
 8006b04:	2301      	movs	r3, #1
 8006b06:	465a      	mov	r2, fp
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	47b8      	blx	r7
 8006b0e:	3001      	adds	r0, #1
 8006b10:	f43f aefb 	beq.w	800690a <_printf_float+0xb6>
 8006b14:	f10a 0a01 	add.w	sl, sl, #1
 8006b18:	e7ee      	b.n	8006af8 <_printf_float+0x2a4>
 8006b1a:	bf00      	nop
 8006b1c:	7fefffff 	.word	0x7fefffff
 8006b20:	0800b01c 	.word	0x0800b01c
 8006b24:	0800b018 	.word	0x0800b018
 8006b28:	0800b024 	.word	0x0800b024
 8006b2c:	0800b020 	.word	0x0800b020
 8006b30:	0800b028 	.word	0x0800b028
 8006b34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b3a:	4553      	cmp	r3, sl
 8006b3c:	bfa8      	it	ge
 8006b3e:	4653      	movge	r3, sl
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	4699      	mov	r9, r3
 8006b44:	dc36      	bgt.n	8006bb4 <_printf_float+0x360>
 8006b46:	f04f 0b00 	mov.w	fp, #0
 8006b4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b4e:	f104 021a 	add.w	r2, r4, #26
 8006b52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b54:	9306      	str	r3, [sp, #24]
 8006b56:	eba3 0309 	sub.w	r3, r3, r9
 8006b5a:	455b      	cmp	r3, fp
 8006b5c:	dc31      	bgt.n	8006bc2 <_printf_float+0x36e>
 8006b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b60:	459a      	cmp	sl, r3
 8006b62:	dc3a      	bgt.n	8006bda <_printf_float+0x386>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	07da      	lsls	r2, r3, #31
 8006b68:	d437      	bmi.n	8006bda <_printf_float+0x386>
 8006b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b6c:	ebaa 0903 	sub.w	r9, sl, r3
 8006b70:	9b06      	ldr	r3, [sp, #24]
 8006b72:	ebaa 0303 	sub.w	r3, sl, r3
 8006b76:	4599      	cmp	r9, r3
 8006b78:	bfa8      	it	ge
 8006b7a:	4699      	movge	r9, r3
 8006b7c:	f1b9 0f00 	cmp.w	r9, #0
 8006b80:	dc33      	bgt.n	8006bea <_printf_float+0x396>
 8006b82:	f04f 0800 	mov.w	r8, #0
 8006b86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b8a:	f104 0b1a 	add.w	fp, r4, #26
 8006b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b90:	ebaa 0303 	sub.w	r3, sl, r3
 8006b94:	eba3 0309 	sub.w	r3, r3, r9
 8006b98:	4543      	cmp	r3, r8
 8006b9a:	f77f af79 	ble.w	8006a90 <_printf_float+0x23c>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	465a      	mov	r2, fp
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	47b8      	blx	r7
 8006ba8:	3001      	adds	r0, #1
 8006baa:	f43f aeae 	beq.w	800690a <_printf_float+0xb6>
 8006bae:	f108 0801 	add.w	r8, r8, #1
 8006bb2:	e7ec      	b.n	8006b8e <_printf_float+0x33a>
 8006bb4:	4642      	mov	r2, r8
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b8      	blx	r7
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d1c2      	bne.n	8006b46 <_printf_float+0x2f2>
 8006bc0:	e6a3      	b.n	800690a <_printf_float+0xb6>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	9206      	str	r2, [sp, #24]
 8006bca:	47b8      	blx	r7
 8006bcc:	3001      	adds	r0, #1
 8006bce:	f43f ae9c 	beq.w	800690a <_printf_float+0xb6>
 8006bd2:	9a06      	ldr	r2, [sp, #24]
 8006bd4:	f10b 0b01 	add.w	fp, fp, #1
 8006bd8:	e7bb      	b.n	8006b52 <_printf_float+0x2fe>
 8006bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bde:	4631      	mov	r1, r6
 8006be0:	4628      	mov	r0, r5
 8006be2:	47b8      	blx	r7
 8006be4:	3001      	adds	r0, #1
 8006be6:	d1c0      	bne.n	8006b6a <_printf_float+0x316>
 8006be8:	e68f      	b.n	800690a <_printf_float+0xb6>
 8006bea:	9a06      	ldr	r2, [sp, #24]
 8006bec:	464b      	mov	r3, r9
 8006bee:	4442      	add	r2, r8
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	47b8      	blx	r7
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	d1c3      	bne.n	8006b82 <_printf_float+0x32e>
 8006bfa:	e686      	b.n	800690a <_printf_float+0xb6>
 8006bfc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c00:	f1ba 0f01 	cmp.w	sl, #1
 8006c04:	dc01      	bgt.n	8006c0a <_printf_float+0x3b6>
 8006c06:	07db      	lsls	r3, r3, #31
 8006c08:	d536      	bpl.n	8006c78 <_printf_float+0x424>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	4642      	mov	r2, r8
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b8      	blx	r7
 8006c14:	3001      	adds	r0, #1
 8006c16:	f43f ae78 	beq.w	800690a <_printf_float+0xb6>
 8006c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c1e:	4631      	mov	r1, r6
 8006c20:	4628      	mov	r0, r5
 8006c22:	47b8      	blx	r7
 8006c24:	3001      	adds	r0, #1
 8006c26:	f43f ae70 	beq.w	800690a <_printf_float+0xb6>
 8006c2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2300      	movs	r3, #0
 8006c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c36:	f7f9 ff4f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c3a:	b9c0      	cbnz	r0, 8006c6e <_printf_float+0x41a>
 8006c3c:	4653      	mov	r3, sl
 8006c3e:	f108 0201 	add.w	r2, r8, #1
 8006c42:	4631      	mov	r1, r6
 8006c44:	4628      	mov	r0, r5
 8006c46:	47b8      	blx	r7
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d10c      	bne.n	8006c66 <_printf_float+0x412>
 8006c4c:	e65d      	b.n	800690a <_printf_float+0xb6>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	465a      	mov	r2, fp
 8006c52:	4631      	mov	r1, r6
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b8      	blx	r7
 8006c58:	3001      	adds	r0, #1
 8006c5a:	f43f ae56 	beq.w	800690a <_printf_float+0xb6>
 8006c5e:	f108 0801 	add.w	r8, r8, #1
 8006c62:	45d0      	cmp	r8, sl
 8006c64:	dbf3      	blt.n	8006c4e <_printf_float+0x3fa>
 8006c66:	464b      	mov	r3, r9
 8006c68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006c6c:	e6df      	b.n	8006a2e <_printf_float+0x1da>
 8006c6e:	f04f 0800 	mov.w	r8, #0
 8006c72:	f104 0b1a 	add.w	fp, r4, #26
 8006c76:	e7f4      	b.n	8006c62 <_printf_float+0x40e>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	4642      	mov	r2, r8
 8006c7c:	e7e1      	b.n	8006c42 <_printf_float+0x3ee>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	464a      	mov	r2, r9
 8006c82:	4631      	mov	r1, r6
 8006c84:	4628      	mov	r0, r5
 8006c86:	47b8      	blx	r7
 8006c88:	3001      	adds	r0, #1
 8006c8a:	f43f ae3e 	beq.w	800690a <_printf_float+0xb6>
 8006c8e:	f108 0801 	add.w	r8, r8, #1
 8006c92:	68e3      	ldr	r3, [r4, #12]
 8006c94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c96:	1a5b      	subs	r3, r3, r1
 8006c98:	4543      	cmp	r3, r8
 8006c9a:	dcf0      	bgt.n	8006c7e <_printf_float+0x42a>
 8006c9c:	e6fc      	b.n	8006a98 <_printf_float+0x244>
 8006c9e:	f04f 0800 	mov.w	r8, #0
 8006ca2:	f104 0919 	add.w	r9, r4, #25
 8006ca6:	e7f4      	b.n	8006c92 <_printf_float+0x43e>

08006ca8 <_printf_common>:
 8006ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cac:	4616      	mov	r6, r2
 8006cae:	4698      	mov	r8, r3
 8006cb0:	688a      	ldr	r2, [r1, #8]
 8006cb2:	690b      	ldr	r3, [r1, #16]
 8006cb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	bfb8      	it	lt
 8006cbc:	4613      	movlt	r3, r2
 8006cbe:	6033      	str	r3, [r6, #0]
 8006cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	b10a      	cbz	r2, 8006cce <_printf_common+0x26>
 8006cca:	3301      	adds	r3, #1
 8006ccc:	6033      	str	r3, [r6, #0]
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	0699      	lsls	r1, r3, #26
 8006cd2:	bf42      	ittt	mi
 8006cd4:	6833      	ldrmi	r3, [r6, #0]
 8006cd6:	3302      	addmi	r3, #2
 8006cd8:	6033      	strmi	r3, [r6, #0]
 8006cda:	6825      	ldr	r5, [r4, #0]
 8006cdc:	f015 0506 	ands.w	r5, r5, #6
 8006ce0:	d106      	bne.n	8006cf0 <_printf_common+0x48>
 8006ce2:	f104 0a19 	add.w	sl, r4, #25
 8006ce6:	68e3      	ldr	r3, [r4, #12]
 8006ce8:	6832      	ldr	r2, [r6, #0]
 8006cea:	1a9b      	subs	r3, r3, r2
 8006cec:	42ab      	cmp	r3, r5
 8006cee:	dc26      	bgt.n	8006d3e <_printf_common+0x96>
 8006cf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006cf4:	6822      	ldr	r2, [r4, #0]
 8006cf6:	3b00      	subs	r3, #0
 8006cf8:	bf18      	it	ne
 8006cfa:	2301      	movne	r3, #1
 8006cfc:	0692      	lsls	r2, r2, #26
 8006cfe:	d42b      	bmi.n	8006d58 <_printf_common+0xb0>
 8006d00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d04:	4641      	mov	r1, r8
 8006d06:	4638      	mov	r0, r7
 8006d08:	47c8      	blx	r9
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	d01e      	beq.n	8006d4c <_printf_common+0xa4>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	6922      	ldr	r2, [r4, #16]
 8006d12:	f003 0306 	and.w	r3, r3, #6
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	bf02      	ittt	eq
 8006d1a:	68e5      	ldreq	r5, [r4, #12]
 8006d1c:	6833      	ldreq	r3, [r6, #0]
 8006d1e:	1aed      	subeq	r5, r5, r3
 8006d20:	68a3      	ldr	r3, [r4, #8]
 8006d22:	bf0c      	ite	eq
 8006d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d28:	2500      	movne	r5, #0
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	bfc4      	itt	gt
 8006d2e:	1a9b      	subgt	r3, r3, r2
 8006d30:	18ed      	addgt	r5, r5, r3
 8006d32:	2600      	movs	r6, #0
 8006d34:	341a      	adds	r4, #26
 8006d36:	42b5      	cmp	r5, r6
 8006d38:	d11a      	bne.n	8006d70 <_printf_common+0xc8>
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	e008      	b.n	8006d50 <_printf_common+0xa8>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4652      	mov	r2, sl
 8006d42:	4641      	mov	r1, r8
 8006d44:	4638      	mov	r0, r7
 8006d46:	47c8      	blx	r9
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d103      	bne.n	8006d54 <_printf_common+0xac>
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d54:	3501      	adds	r5, #1
 8006d56:	e7c6      	b.n	8006ce6 <_printf_common+0x3e>
 8006d58:	18e1      	adds	r1, r4, r3
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	2030      	movs	r0, #48	@ 0x30
 8006d5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d62:	4422      	add	r2, r4
 8006d64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d6c:	3302      	adds	r3, #2
 8006d6e:	e7c7      	b.n	8006d00 <_printf_common+0x58>
 8006d70:	2301      	movs	r3, #1
 8006d72:	4622      	mov	r2, r4
 8006d74:	4641      	mov	r1, r8
 8006d76:	4638      	mov	r0, r7
 8006d78:	47c8      	blx	r9
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	d0e6      	beq.n	8006d4c <_printf_common+0xa4>
 8006d7e:	3601      	adds	r6, #1
 8006d80:	e7d9      	b.n	8006d36 <_printf_common+0x8e>
	...

08006d84 <_printf_i>:
 8006d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d88:	7e0f      	ldrb	r7, [r1, #24]
 8006d8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d8c:	2f78      	cmp	r7, #120	@ 0x78
 8006d8e:	4691      	mov	r9, r2
 8006d90:	4680      	mov	r8, r0
 8006d92:	460c      	mov	r4, r1
 8006d94:	469a      	mov	sl, r3
 8006d96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d9a:	d807      	bhi.n	8006dac <_printf_i+0x28>
 8006d9c:	2f62      	cmp	r7, #98	@ 0x62
 8006d9e:	d80a      	bhi.n	8006db6 <_printf_i+0x32>
 8006da0:	2f00      	cmp	r7, #0
 8006da2:	f000 80d1 	beq.w	8006f48 <_printf_i+0x1c4>
 8006da6:	2f58      	cmp	r7, #88	@ 0x58
 8006da8:	f000 80b8 	beq.w	8006f1c <_printf_i+0x198>
 8006dac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006db0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006db4:	e03a      	b.n	8006e2c <_printf_i+0xa8>
 8006db6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006dba:	2b15      	cmp	r3, #21
 8006dbc:	d8f6      	bhi.n	8006dac <_printf_i+0x28>
 8006dbe:	a101      	add	r1, pc, #4	@ (adr r1, 8006dc4 <_printf_i+0x40>)
 8006dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dc4:	08006e1d 	.word	0x08006e1d
 8006dc8:	08006e31 	.word	0x08006e31
 8006dcc:	08006dad 	.word	0x08006dad
 8006dd0:	08006dad 	.word	0x08006dad
 8006dd4:	08006dad 	.word	0x08006dad
 8006dd8:	08006dad 	.word	0x08006dad
 8006ddc:	08006e31 	.word	0x08006e31
 8006de0:	08006dad 	.word	0x08006dad
 8006de4:	08006dad 	.word	0x08006dad
 8006de8:	08006dad 	.word	0x08006dad
 8006dec:	08006dad 	.word	0x08006dad
 8006df0:	08006f2f 	.word	0x08006f2f
 8006df4:	08006e5b 	.word	0x08006e5b
 8006df8:	08006ee9 	.word	0x08006ee9
 8006dfc:	08006dad 	.word	0x08006dad
 8006e00:	08006dad 	.word	0x08006dad
 8006e04:	08006f51 	.word	0x08006f51
 8006e08:	08006dad 	.word	0x08006dad
 8006e0c:	08006e5b 	.word	0x08006e5b
 8006e10:	08006dad 	.word	0x08006dad
 8006e14:	08006dad 	.word	0x08006dad
 8006e18:	08006ef1 	.word	0x08006ef1
 8006e1c:	6833      	ldr	r3, [r6, #0]
 8006e1e:	1d1a      	adds	r2, r3, #4
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6032      	str	r2, [r6, #0]
 8006e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e09c      	b.n	8006f6a <_printf_i+0x1e6>
 8006e30:	6833      	ldr	r3, [r6, #0]
 8006e32:	6820      	ldr	r0, [r4, #0]
 8006e34:	1d19      	adds	r1, r3, #4
 8006e36:	6031      	str	r1, [r6, #0]
 8006e38:	0606      	lsls	r6, r0, #24
 8006e3a:	d501      	bpl.n	8006e40 <_printf_i+0xbc>
 8006e3c:	681d      	ldr	r5, [r3, #0]
 8006e3e:	e003      	b.n	8006e48 <_printf_i+0xc4>
 8006e40:	0645      	lsls	r5, r0, #25
 8006e42:	d5fb      	bpl.n	8006e3c <_printf_i+0xb8>
 8006e44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e48:	2d00      	cmp	r5, #0
 8006e4a:	da03      	bge.n	8006e54 <_printf_i+0xd0>
 8006e4c:	232d      	movs	r3, #45	@ 0x2d
 8006e4e:	426d      	negs	r5, r5
 8006e50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e54:	4858      	ldr	r0, [pc, #352]	@ (8006fb8 <_printf_i+0x234>)
 8006e56:	230a      	movs	r3, #10
 8006e58:	e011      	b.n	8006e7e <_printf_i+0xfa>
 8006e5a:	6821      	ldr	r1, [r4, #0]
 8006e5c:	6833      	ldr	r3, [r6, #0]
 8006e5e:	0608      	lsls	r0, r1, #24
 8006e60:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e64:	d402      	bmi.n	8006e6c <_printf_i+0xe8>
 8006e66:	0649      	lsls	r1, r1, #25
 8006e68:	bf48      	it	mi
 8006e6a:	b2ad      	uxthmi	r5, r5
 8006e6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e6e:	4852      	ldr	r0, [pc, #328]	@ (8006fb8 <_printf_i+0x234>)
 8006e70:	6033      	str	r3, [r6, #0]
 8006e72:	bf14      	ite	ne
 8006e74:	230a      	movne	r3, #10
 8006e76:	2308      	moveq	r3, #8
 8006e78:	2100      	movs	r1, #0
 8006e7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e7e:	6866      	ldr	r6, [r4, #4]
 8006e80:	60a6      	str	r6, [r4, #8]
 8006e82:	2e00      	cmp	r6, #0
 8006e84:	db05      	blt.n	8006e92 <_printf_i+0x10e>
 8006e86:	6821      	ldr	r1, [r4, #0]
 8006e88:	432e      	orrs	r6, r5
 8006e8a:	f021 0104 	bic.w	r1, r1, #4
 8006e8e:	6021      	str	r1, [r4, #0]
 8006e90:	d04b      	beq.n	8006f2a <_printf_i+0x1a6>
 8006e92:	4616      	mov	r6, r2
 8006e94:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e98:	fb03 5711 	mls	r7, r3, r1, r5
 8006e9c:	5dc7      	ldrb	r7, [r0, r7]
 8006e9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ea2:	462f      	mov	r7, r5
 8006ea4:	42bb      	cmp	r3, r7
 8006ea6:	460d      	mov	r5, r1
 8006ea8:	d9f4      	bls.n	8006e94 <_printf_i+0x110>
 8006eaa:	2b08      	cmp	r3, #8
 8006eac:	d10b      	bne.n	8006ec6 <_printf_i+0x142>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	07df      	lsls	r7, r3, #31
 8006eb2:	d508      	bpl.n	8006ec6 <_printf_i+0x142>
 8006eb4:	6923      	ldr	r3, [r4, #16]
 8006eb6:	6861      	ldr	r1, [r4, #4]
 8006eb8:	4299      	cmp	r1, r3
 8006eba:	bfde      	ittt	le
 8006ebc:	2330      	movle	r3, #48	@ 0x30
 8006ebe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ec2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ec6:	1b92      	subs	r2, r2, r6
 8006ec8:	6122      	str	r2, [r4, #16]
 8006eca:	f8cd a000 	str.w	sl, [sp]
 8006ece:	464b      	mov	r3, r9
 8006ed0:	aa03      	add	r2, sp, #12
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	f7ff fee7 	bl	8006ca8 <_printf_common>
 8006eda:	3001      	adds	r0, #1
 8006edc:	d14a      	bne.n	8006f74 <_printf_i+0x1f0>
 8006ede:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee2:	b004      	add	sp, #16
 8006ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	f043 0320 	orr.w	r3, r3, #32
 8006eee:	6023      	str	r3, [r4, #0]
 8006ef0:	4832      	ldr	r0, [pc, #200]	@ (8006fbc <_printf_i+0x238>)
 8006ef2:	2778      	movs	r7, #120	@ 0x78
 8006ef4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	6831      	ldr	r1, [r6, #0]
 8006efc:	061f      	lsls	r7, r3, #24
 8006efe:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f02:	d402      	bmi.n	8006f0a <_printf_i+0x186>
 8006f04:	065f      	lsls	r7, r3, #25
 8006f06:	bf48      	it	mi
 8006f08:	b2ad      	uxthmi	r5, r5
 8006f0a:	6031      	str	r1, [r6, #0]
 8006f0c:	07d9      	lsls	r1, r3, #31
 8006f0e:	bf44      	itt	mi
 8006f10:	f043 0320 	orrmi.w	r3, r3, #32
 8006f14:	6023      	strmi	r3, [r4, #0]
 8006f16:	b11d      	cbz	r5, 8006f20 <_printf_i+0x19c>
 8006f18:	2310      	movs	r3, #16
 8006f1a:	e7ad      	b.n	8006e78 <_printf_i+0xf4>
 8006f1c:	4826      	ldr	r0, [pc, #152]	@ (8006fb8 <_printf_i+0x234>)
 8006f1e:	e7e9      	b.n	8006ef4 <_printf_i+0x170>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	f023 0320 	bic.w	r3, r3, #32
 8006f26:	6023      	str	r3, [r4, #0]
 8006f28:	e7f6      	b.n	8006f18 <_printf_i+0x194>
 8006f2a:	4616      	mov	r6, r2
 8006f2c:	e7bd      	b.n	8006eaa <_printf_i+0x126>
 8006f2e:	6833      	ldr	r3, [r6, #0]
 8006f30:	6825      	ldr	r5, [r4, #0]
 8006f32:	6961      	ldr	r1, [r4, #20]
 8006f34:	1d18      	adds	r0, r3, #4
 8006f36:	6030      	str	r0, [r6, #0]
 8006f38:	062e      	lsls	r6, r5, #24
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	d501      	bpl.n	8006f42 <_printf_i+0x1be>
 8006f3e:	6019      	str	r1, [r3, #0]
 8006f40:	e002      	b.n	8006f48 <_printf_i+0x1c4>
 8006f42:	0668      	lsls	r0, r5, #25
 8006f44:	d5fb      	bpl.n	8006f3e <_printf_i+0x1ba>
 8006f46:	8019      	strh	r1, [r3, #0]
 8006f48:	2300      	movs	r3, #0
 8006f4a:	6123      	str	r3, [r4, #16]
 8006f4c:	4616      	mov	r6, r2
 8006f4e:	e7bc      	b.n	8006eca <_printf_i+0x146>
 8006f50:	6833      	ldr	r3, [r6, #0]
 8006f52:	1d1a      	adds	r2, r3, #4
 8006f54:	6032      	str	r2, [r6, #0]
 8006f56:	681e      	ldr	r6, [r3, #0]
 8006f58:	6862      	ldr	r2, [r4, #4]
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f7f9 f93f 	bl	80001e0 <memchr>
 8006f62:	b108      	cbz	r0, 8006f68 <_printf_i+0x1e4>
 8006f64:	1b80      	subs	r0, r0, r6
 8006f66:	6060      	str	r0, [r4, #4]
 8006f68:	6863      	ldr	r3, [r4, #4]
 8006f6a:	6123      	str	r3, [r4, #16]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f72:	e7aa      	b.n	8006eca <_printf_i+0x146>
 8006f74:	6923      	ldr	r3, [r4, #16]
 8006f76:	4632      	mov	r2, r6
 8006f78:	4649      	mov	r1, r9
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	47d0      	blx	sl
 8006f7e:	3001      	adds	r0, #1
 8006f80:	d0ad      	beq.n	8006ede <_printf_i+0x15a>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	079b      	lsls	r3, r3, #30
 8006f86:	d413      	bmi.n	8006fb0 <_printf_i+0x22c>
 8006f88:	68e0      	ldr	r0, [r4, #12]
 8006f8a:	9b03      	ldr	r3, [sp, #12]
 8006f8c:	4298      	cmp	r0, r3
 8006f8e:	bfb8      	it	lt
 8006f90:	4618      	movlt	r0, r3
 8006f92:	e7a6      	b.n	8006ee2 <_printf_i+0x15e>
 8006f94:	2301      	movs	r3, #1
 8006f96:	4632      	mov	r2, r6
 8006f98:	4649      	mov	r1, r9
 8006f9a:	4640      	mov	r0, r8
 8006f9c:	47d0      	blx	sl
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d09d      	beq.n	8006ede <_printf_i+0x15a>
 8006fa2:	3501      	adds	r5, #1
 8006fa4:	68e3      	ldr	r3, [r4, #12]
 8006fa6:	9903      	ldr	r1, [sp, #12]
 8006fa8:	1a5b      	subs	r3, r3, r1
 8006faa:	42ab      	cmp	r3, r5
 8006fac:	dcf2      	bgt.n	8006f94 <_printf_i+0x210>
 8006fae:	e7eb      	b.n	8006f88 <_printf_i+0x204>
 8006fb0:	2500      	movs	r5, #0
 8006fb2:	f104 0619 	add.w	r6, r4, #25
 8006fb6:	e7f5      	b.n	8006fa4 <_printf_i+0x220>
 8006fb8:	0800b02a 	.word	0x0800b02a
 8006fbc:	0800b03b 	.word	0x0800b03b

08006fc0 <_scanf_float>:
 8006fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc4:	b087      	sub	sp, #28
 8006fc6:	4691      	mov	r9, r2
 8006fc8:	9303      	str	r3, [sp, #12]
 8006fca:	688b      	ldr	r3, [r1, #8]
 8006fcc:	1e5a      	subs	r2, r3, #1
 8006fce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006fd2:	bf81      	itttt	hi
 8006fd4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006fd8:	eb03 0b05 	addhi.w	fp, r3, r5
 8006fdc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006fe0:	608b      	strhi	r3, [r1, #8]
 8006fe2:	680b      	ldr	r3, [r1, #0]
 8006fe4:	460a      	mov	r2, r1
 8006fe6:	f04f 0500 	mov.w	r5, #0
 8006fea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006fee:	f842 3b1c 	str.w	r3, [r2], #28
 8006ff2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ff6:	4680      	mov	r8, r0
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	bf98      	it	ls
 8006ffc:	f04f 0b00 	movls.w	fp, #0
 8007000:	9201      	str	r2, [sp, #4]
 8007002:	4616      	mov	r6, r2
 8007004:	46aa      	mov	sl, r5
 8007006:	462f      	mov	r7, r5
 8007008:	9502      	str	r5, [sp, #8]
 800700a:	68a2      	ldr	r2, [r4, #8]
 800700c:	b15a      	cbz	r2, 8007026 <_scanf_float+0x66>
 800700e:	f8d9 3000 	ldr.w	r3, [r9]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b4e      	cmp	r3, #78	@ 0x4e
 8007016:	d863      	bhi.n	80070e0 <_scanf_float+0x120>
 8007018:	2b40      	cmp	r3, #64	@ 0x40
 800701a:	d83b      	bhi.n	8007094 <_scanf_float+0xd4>
 800701c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007020:	b2c8      	uxtb	r0, r1
 8007022:	280e      	cmp	r0, #14
 8007024:	d939      	bls.n	800709a <_scanf_float+0xda>
 8007026:	b11f      	cbz	r7, 8007030 <_scanf_float+0x70>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007034:	f1ba 0f01 	cmp.w	sl, #1
 8007038:	f200 8114 	bhi.w	8007264 <_scanf_float+0x2a4>
 800703c:	9b01      	ldr	r3, [sp, #4]
 800703e:	429e      	cmp	r6, r3
 8007040:	f200 8105 	bhi.w	800724e <_scanf_float+0x28e>
 8007044:	2001      	movs	r0, #1
 8007046:	b007      	add	sp, #28
 8007048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007050:	2a0d      	cmp	r2, #13
 8007052:	d8e8      	bhi.n	8007026 <_scanf_float+0x66>
 8007054:	a101      	add	r1, pc, #4	@ (adr r1, 800705c <_scanf_float+0x9c>)
 8007056:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800705a:	bf00      	nop
 800705c:	080071a5 	.word	0x080071a5
 8007060:	08007027 	.word	0x08007027
 8007064:	08007027 	.word	0x08007027
 8007068:	08007027 	.word	0x08007027
 800706c:	08007201 	.word	0x08007201
 8007070:	080071db 	.word	0x080071db
 8007074:	08007027 	.word	0x08007027
 8007078:	08007027 	.word	0x08007027
 800707c:	080071b3 	.word	0x080071b3
 8007080:	08007027 	.word	0x08007027
 8007084:	08007027 	.word	0x08007027
 8007088:	08007027 	.word	0x08007027
 800708c:	08007027 	.word	0x08007027
 8007090:	0800716f 	.word	0x0800716f
 8007094:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007098:	e7da      	b.n	8007050 <_scanf_float+0x90>
 800709a:	290e      	cmp	r1, #14
 800709c:	d8c3      	bhi.n	8007026 <_scanf_float+0x66>
 800709e:	a001      	add	r0, pc, #4	@ (adr r0, 80070a4 <_scanf_float+0xe4>)
 80070a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80070a4:	0800715f 	.word	0x0800715f
 80070a8:	08007027 	.word	0x08007027
 80070ac:	0800715f 	.word	0x0800715f
 80070b0:	080071ef 	.word	0x080071ef
 80070b4:	08007027 	.word	0x08007027
 80070b8:	08007101 	.word	0x08007101
 80070bc:	08007145 	.word	0x08007145
 80070c0:	08007145 	.word	0x08007145
 80070c4:	08007145 	.word	0x08007145
 80070c8:	08007145 	.word	0x08007145
 80070cc:	08007145 	.word	0x08007145
 80070d0:	08007145 	.word	0x08007145
 80070d4:	08007145 	.word	0x08007145
 80070d8:	08007145 	.word	0x08007145
 80070dc:	08007145 	.word	0x08007145
 80070e0:	2b6e      	cmp	r3, #110	@ 0x6e
 80070e2:	d809      	bhi.n	80070f8 <_scanf_float+0x138>
 80070e4:	2b60      	cmp	r3, #96	@ 0x60
 80070e6:	d8b1      	bhi.n	800704c <_scanf_float+0x8c>
 80070e8:	2b54      	cmp	r3, #84	@ 0x54
 80070ea:	d07b      	beq.n	80071e4 <_scanf_float+0x224>
 80070ec:	2b59      	cmp	r3, #89	@ 0x59
 80070ee:	d19a      	bne.n	8007026 <_scanf_float+0x66>
 80070f0:	2d07      	cmp	r5, #7
 80070f2:	d198      	bne.n	8007026 <_scanf_float+0x66>
 80070f4:	2508      	movs	r5, #8
 80070f6:	e02f      	b.n	8007158 <_scanf_float+0x198>
 80070f8:	2b74      	cmp	r3, #116	@ 0x74
 80070fa:	d073      	beq.n	80071e4 <_scanf_float+0x224>
 80070fc:	2b79      	cmp	r3, #121	@ 0x79
 80070fe:	e7f6      	b.n	80070ee <_scanf_float+0x12e>
 8007100:	6821      	ldr	r1, [r4, #0]
 8007102:	05c8      	lsls	r0, r1, #23
 8007104:	d51e      	bpl.n	8007144 <_scanf_float+0x184>
 8007106:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800710a:	6021      	str	r1, [r4, #0]
 800710c:	3701      	adds	r7, #1
 800710e:	f1bb 0f00 	cmp.w	fp, #0
 8007112:	d003      	beq.n	800711c <_scanf_float+0x15c>
 8007114:	3201      	adds	r2, #1
 8007116:	f10b 3bff 	add.w	fp, fp, #4294967295
 800711a:	60a2      	str	r2, [r4, #8]
 800711c:	68a3      	ldr	r3, [r4, #8]
 800711e:	3b01      	subs	r3, #1
 8007120:	60a3      	str	r3, [r4, #8]
 8007122:	6923      	ldr	r3, [r4, #16]
 8007124:	3301      	adds	r3, #1
 8007126:	6123      	str	r3, [r4, #16]
 8007128:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800712c:	3b01      	subs	r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	f8c9 3004 	str.w	r3, [r9, #4]
 8007134:	f340 8082 	ble.w	800723c <_scanf_float+0x27c>
 8007138:	f8d9 3000 	ldr.w	r3, [r9]
 800713c:	3301      	adds	r3, #1
 800713e:	f8c9 3000 	str.w	r3, [r9]
 8007142:	e762      	b.n	800700a <_scanf_float+0x4a>
 8007144:	eb1a 0105 	adds.w	r1, sl, r5
 8007148:	f47f af6d 	bne.w	8007026 <_scanf_float+0x66>
 800714c:	6822      	ldr	r2, [r4, #0]
 800714e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007152:	6022      	str	r2, [r4, #0]
 8007154:	460d      	mov	r5, r1
 8007156:	468a      	mov	sl, r1
 8007158:	f806 3b01 	strb.w	r3, [r6], #1
 800715c:	e7de      	b.n	800711c <_scanf_float+0x15c>
 800715e:	6822      	ldr	r2, [r4, #0]
 8007160:	0610      	lsls	r0, r2, #24
 8007162:	f57f af60 	bpl.w	8007026 <_scanf_float+0x66>
 8007166:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800716a:	6022      	str	r2, [r4, #0]
 800716c:	e7f4      	b.n	8007158 <_scanf_float+0x198>
 800716e:	f1ba 0f00 	cmp.w	sl, #0
 8007172:	d10c      	bne.n	800718e <_scanf_float+0x1ce>
 8007174:	b977      	cbnz	r7, 8007194 <_scanf_float+0x1d4>
 8007176:	6822      	ldr	r2, [r4, #0]
 8007178:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800717c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007180:	d108      	bne.n	8007194 <_scanf_float+0x1d4>
 8007182:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007186:	6022      	str	r2, [r4, #0]
 8007188:	f04f 0a01 	mov.w	sl, #1
 800718c:	e7e4      	b.n	8007158 <_scanf_float+0x198>
 800718e:	f1ba 0f02 	cmp.w	sl, #2
 8007192:	d050      	beq.n	8007236 <_scanf_float+0x276>
 8007194:	2d01      	cmp	r5, #1
 8007196:	d002      	beq.n	800719e <_scanf_float+0x1de>
 8007198:	2d04      	cmp	r5, #4
 800719a:	f47f af44 	bne.w	8007026 <_scanf_float+0x66>
 800719e:	3501      	adds	r5, #1
 80071a0:	b2ed      	uxtb	r5, r5
 80071a2:	e7d9      	b.n	8007158 <_scanf_float+0x198>
 80071a4:	f1ba 0f01 	cmp.w	sl, #1
 80071a8:	f47f af3d 	bne.w	8007026 <_scanf_float+0x66>
 80071ac:	f04f 0a02 	mov.w	sl, #2
 80071b0:	e7d2      	b.n	8007158 <_scanf_float+0x198>
 80071b2:	b975      	cbnz	r5, 80071d2 <_scanf_float+0x212>
 80071b4:	2f00      	cmp	r7, #0
 80071b6:	f47f af37 	bne.w	8007028 <_scanf_float+0x68>
 80071ba:	6822      	ldr	r2, [r4, #0]
 80071bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80071c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80071c4:	f040 8103 	bne.w	80073ce <_scanf_float+0x40e>
 80071c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071cc:	6022      	str	r2, [r4, #0]
 80071ce:	2501      	movs	r5, #1
 80071d0:	e7c2      	b.n	8007158 <_scanf_float+0x198>
 80071d2:	2d03      	cmp	r5, #3
 80071d4:	d0e3      	beq.n	800719e <_scanf_float+0x1de>
 80071d6:	2d05      	cmp	r5, #5
 80071d8:	e7df      	b.n	800719a <_scanf_float+0x1da>
 80071da:	2d02      	cmp	r5, #2
 80071dc:	f47f af23 	bne.w	8007026 <_scanf_float+0x66>
 80071e0:	2503      	movs	r5, #3
 80071e2:	e7b9      	b.n	8007158 <_scanf_float+0x198>
 80071e4:	2d06      	cmp	r5, #6
 80071e6:	f47f af1e 	bne.w	8007026 <_scanf_float+0x66>
 80071ea:	2507      	movs	r5, #7
 80071ec:	e7b4      	b.n	8007158 <_scanf_float+0x198>
 80071ee:	6822      	ldr	r2, [r4, #0]
 80071f0:	0591      	lsls	r1, r2, #22
 80071f2:	f57f af18 	bpl.w	8007026 <_scanf_float+0x66>
 80071f6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80071fa:	6022      	str	r2, [r4, #0]
 80071fc:	9702      	str	r7, [sp, #8]
 80071fe:	e7ab      	b.n	8007158 <_scanf_float+0x198>
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007206:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800720a:	d005      	beq.n	8007218 <_scanf_float+0x258>
 800720c:	0550      	lsls	r0, r2, #21
 800720e:	f57f af0a 	bpl.w	8007026 <_scanf_float+0x66>
 8007212:	2f00      	cmp	r7, #0
 8007214:	f000 80db 	beq.w	80073ce <_scanf_float+0x40e>
 8007218:	0591      	lsls	r1, r2, #22
 800721a:	bf58      	it	pl
 800721c:	9902      	ldrpl	r1, [sp, #8]
 800721e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007222:	bf58      	it	pl
 8007224:	1a79      	subpl	r1, r7, r1
 8007226:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800722a:	bf58      	it	pl
 800722c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007230:	6022      	str	r2, [r4, #0]
 8007232:	2700      	movs	r7, #0
 8007234:	e790      	b.n	8007158 <_scanf_float+0x198>
 8007236:	f04f 0a03 	mov.w	sl, #3
 800723a:	e78d      	b.n	8007158 <_scanf_float+0x198>
 800723c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007240:	4649      	mov	r1, r9
 8007242:	4640      	mov	r0, r8
 8007244:	4798      	blx	r3
 8007246:	2800      	cmp	r0, #0
 8007248:	f43f aedf 	beq.w	800700a <_scanf_float+0x4a>
 800724c:	e6eb      	b.n	8007026 <_scanf_float+0x66>
 800724e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007252:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007256:	464a      	mov	r2, r9
 8007258:	4640      	mov	r0, r8
 800725a:	4798      	blx	r3
 800725c:	6923      	ldr	r3, [r4, #16]
 800725e:	3b01      	subs	r3, #1
 8007260:	6123      	str	r3, [r4, #16]
 8007262:	e6eb      	b.n	800703c <_scanf_float+0x7c>
 8007264:	1e6b      	subs	r3, r5, #1
 8007266:	2b06      	cmp	r3, #6
 8007268:	d824      	bhi.n	80072b4 <_scanf_float+0x2f4>
 800726a:	2d02      	cmp	r5, #2
 800726c:	d836      	bhi.n	80072dc <_scanf_float+0x31c>
 800726e:	9b01      	ldr	r3, [sp, #4]
 8007270:	429e      	cmp	r6, r3
 8007272:	f67f aee7 	bls.w	8007044 <_scanf_float+0x84>
 8007276:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800727a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800727e:	464a      	mov	r2, r9
 8007280:	4640      	mov	r0, r8
 8007282:	4798      	blx	r3
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	3b01      	subs	r3, #1
 8007288:	6123      	str	r3, [r4, #16]
 800728a:	e7f0      	b.n	800726e <_scanf_float+0x2ae>
 800728c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007290:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007294:	464a      	mov	r2, r9
 8007296:	4640      	mov	r0, r8
 8007298:	4798      	blx	r3
 800729a:	6923      	ldr	r3, [r4, #16]
 800729c:	3b01      	subs	r3, #1
 800729e:	6123      	str	r3, [r4, #16]
 80072a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072a4:	fa5f fa8a 	uxtb.w	sl, sl
 80072a8:	f1ba 0f02 	cmp.w	sl, #2
 80072ac:	d1ee      	bne.n	800728c <_scanf_float+0x2cc>
 80072ae:	3d03      	subs	r5, #3
 80072b0:	b2ed      	uxtb	r5, r5
 80072b2:	1b76      	subs	r6, r6, r5
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	05da      	lsls	r2, r3, #23
 80072b8:	d530      	bpl.n	800731c <_scanf_float+0x35c>
 80072ba:	055b      	lsls	r3, r3, #21
 80072bc:	d511      	bpl.n	80072e2 <_scanf_float+0x322>
 80072be:	9b01      	ldr	r3, [sp, #4]
 80072c0:	429e      	cmp	r6, r3
 80072c2:	f67f aebf 	bls.w	8007044 <_scanf_float+0x84>
 80072c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072ce:	464a      	mov	r2, r9
 80072d0:	4640      	mov	r0, r8
 80072d2:	4798      	blx	r3
 80072d4:	6923      	ldr	r3, [r4, #16]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	6123      	str	r3, [r4, #16]
 80072da:	e7f0      	b.n	80072be <_scanf_float+0x2fe>
 80072dc:	46aa      	mov	sl, r5
 80072de:	46b3      	mov	fp, r6
 80072e0:	e7de      	b.n	80072a0 <_scanf_float+0x2e0>
 80072e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80072e6:	6923      	ldr	r3, [r4, #16]
 80072e8:	2965      	cmp	r1, #101	@ 0x65
 80072ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80072ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80072f2:	6123      	str	r3, [r4, #16]
 80072f4:	d00c      	beq.n	8007310 <_scanf_float+0x350>
 80072f6:	2945      	cmp	r1, #69	@ 0x45
 80072f8:	d00a      	beq.n	8007310 <_scanf_float+0x350>
 80072fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072fe:	464a      	mov	r2, r9
 8007300:	4640      	mov	r0, r8
 8007302:	4798      	blx	r3
 8007304:	6923      	ldr	r3, [r4, #16]
 8007306:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800730a:	3b01      	subs	r3, #1
 800730c:	1eb5      	subs	r5, r6, #2
 800730e:	6123      	str	r3, [r4, #16]
 8007310:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007314:	464a      	mov	r2, r9
 8007316:	4640      	mov	r0, r8
 8007318:	4798      	blx	r3
 800731a:	462e      	mov	r6, r5
 800731c:	6822      	ldr	r2, [r4, #0]
 800731e:	f012 0210 	ands.w	r2, r2, #16
 8007322:	d001      	beq.n	8007328 <_scanf_float+0x368>
 8007324:	2000      	movs	r0, #0
 8007326:	e68e      	b.n	8007046 <_scanf_float+0x86>
 8007328:	7032      	strb	r2, [r6, #0]
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007334:	d125      	bne.n	8007382 <_scanf_float+0x3c2>
 8007336:	9b02      	ldr	r3, [sp, #8]
 8007338:	429f      	cmp	r7, r3
 800733a:	d00a      	beq.n	8007352 <_scanf_float+0x392>
 800733c:	1bda      	subs	r2, r3, r7
 800733e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007342:	429e      	cmp	r6, r3
 8007344:	bf28      	it	cs
 8007346:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800734a:	4922      	ldr	r1, [pc, #136]	@ (80073d4 <_scanf_float+0x414>)
 800734c:	4630      	mov	r0, r6
 800734e:	f000 f977 	bl	8007640 <siprintf>
 8007352:	9901      	ldr	r1, [sp, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	4640      	mov	r0, r8
 8007358:	f002 fcf6 	bl	8009d48 <_strtod_r>
 800735c:	9b03      	ldr	r3, [sp, #12]
 800735e:	6821      	ldr	r1, [r4, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f011 0f02 	tst.w	r1, #2
 8007366:	ec57 6b10 	vmov	r6, r7, d0
 800736a:	f103 0204 	add.w	r2, r3, #4
 800736e:	d015      	beq.n	800739c <_scanf_float+0x3dc>
 8007370:	9903      	ldr	r1, [sp, #12]
 8007372:	600a      	str	r2, [r1, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	e9c3 6700 	strd	r6, r7, [r3]
 800737a:	68e3      	ldr	r3, [r4, #12]
 800737c:	3301      	adds	r3, #1
 800737e:	60e3      	str	r3, [r4, #12]
 8007380:	e7d0      	b.n	8007324 <_scanf_float+0x364>
 8007382:	9b04      	ldr	r3, [sp, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0e4      	beq.n	8007352 <_scanf_float+0x392>
 8007388:	9905      	ldr	r1, [sp, #20]
 800738a:	230a      	movs	r3, #10
 800738c:	3101      	adds	r1, #1
 800738e:	4640      	mov	r0, r8
 8007390:	f002 fd5a 	bl	8009e48 <_strtol_r>
 8007394:	9b04      	ldr	r3, [sp, #16]
 8007396:	9e05      	ldr	r6, [sp, #20]
 8007398:	1ac2      	subs	r2, r0, r3
 800739a:	e7d0      	b.n	800733e <_scanf_float+0x37e>
 800739c:	f011 0f04 	tst.w	r1, #4
 80073a0:	9903      	ldr	r1, [sp, #12]
 80073a2:	600a      	str	r2, [r1, #0]
 80073a4:	d1e6      	bne.n	8007374 <_scanf_float+0x3b4>
 80073a6:	681d      	ldr	r5, [r3, #0]
 80073a8:	4632      	mov	r2, r6
 80073aa:	463b      	mov	r3, r7
 80073ac:	4630      	mov	r0, r6
 80073ae:	4639      	mov	r1, r7
 80073b0:	f7f9 fbc4 	bl	8000b3c <__aeabi_dcmpun>
 80073b4:	b128      	cbz	r0, 80073c2 <_scanf_float+0x402>
 80073b6:	4808      	ldr	r0, [pc, #32]	@ (80073d8 <_scanf_float+0x418>)
 80073b8:	f000 fabc 	bl	8007934 <nanf>
 80073bc:	ed85 0a00 	vstr	s0, [r5]
 80073c0:	e7db      	b.n	800737a <_scanf_float+0x3ba>
 80073c2:	4630      	mov	r0, r6
 80073c4:	4639      	mov	r1, r7
 80073c6:	f7f9 fc17 	bl	8000bf8 <__aeabi_d2f>
 80073ca:	6028      	str	r0, [r5, #0]
 80073cc:	e7d5      	b.n	800737a <_scanf_float+0x3ba>
 80073ce:	2700      	movs	r7, #0
 80073d0:	e62e      	b.n	8007030 <_scanf_float+0x70>
 80073d2:	bf00      	nop
 80073d4:	0800b04c 	.word	0x0800b04c
 80073d8:	0800b18d 	.word	0x0800b18d

080073dc <std>:
 80073dc:	2300      	movs	r3, #0
 80073de:	b510      	push	{r4, lr}
 80073e0:	4604      	mov	r4, r0
 80073e2:	e9c0 3300 	strd	r3, r3, [r0]
 80073e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073ea:	6083      	str	r3, [r0, #8]
 80073ec:	8181      	strh	r1, [r0, #12]
 80073ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80073f0:	81c2      	strh	r2, [r0, #14]
 80073f2:	6183      	str	r3, [r0, #24]
 80073f4:	4619      	mov	r1, r3
 80073f6:	2208      	movs	r2, #8
 80073f8:	305c      	adds	r0, #92	@ 0x5c
 80073fa:	f000 fa1b 	bl	8007834 <memset>
 80073fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007434 <std+0x58>)
 8007400:	6263      	str	r3, [r4, #36]	@ 0x24
 8007402:	4b0d      	ldr	r3, [pc, #52]	@ (8007438 <std+0x5c>)
 8007404:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007406:	4b0d      	ldr	r3, [pc, #52]	@ (800743c <std+0x60>)
 8007408:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800740a:	4b0d      	ldr	r3, [pc, #52]	@ (8007440 <std+0x64>)
 800740c:	6323      	str	r3, [r4, #48]	@ 0x30
 800740e:	4b0d      	ldr	r3, [pc, #52]	@ (8007444 <std+0x68>)
 8007410:	6224      	str	r4, [r4, #32]
 8007412:	429c      	cmp	r4, r3
 8007414:	d006      	beq.n	8007424 <std+0x48>
 8007416:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800741a:	4294      	cmp	r4, r2
 800741c:	d002      	beq.n	8007424 <std+0x48>
 800741e:	33d0      	adds	r3, #208	@ 0xd0
 8007420:	429c      	cmp	r4, r3
 8007422:	d105      	bne.n	8007430 <std+0x54>
 8007424:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800742c:	f000 ba7e 	b.w	800792c <__retarget_lock_init_recursive>
 8007430:	bd10      	pop	{r4, pc}
 8007432:	bf00      	nop
 8007434:	08007685 	.word	0x08007685
 8007438:	080076a7 	.word	0x080076a7
 800743c:	080076df 	.word	0x080076df
 8007440:	08007703 	.word	0x08007703
 8007444:	2000040c 	.word	0x2000040c

08007448 <stdio_exit_handler>:
 8007448:	4a02      	ldr	r2, [pc, #8]	@ (8007454 <stdio_exit_handler+0xc>)
 800744a:	4903      	ldr	r1, [pc, #12]	@ (8007458 <stdio_exit_handler+0x10>)
 800744c:	4803      	ldr	r0, [pc, #12]	@ (800745c <stdio_exit_handler+0x14>)
 800744e:	f000 b869 	b.w	8007524 <_fwalk_sglue>
 8007452:	bf00      	nop
 8007454:	2000000c 	.word	0x2000000c
 8007458:	0800a489 	.word	0x0800a489
 800745c:	2000001c 	.word	0x2000001c

08007460 <cleanup_stdio>:
 8007460:	6841      	ldr	r1, [r0, #4]
 8007462:	4b0c      	ldr	r3, [pc, #48]	@ (8007494 <cleanup_stdio+0x34>)
 8007464:	4299      	cmp	r1, r3
 8007466:	b510      	push	{r4, lr}
 8007468:	4604      	mov	r4, r0
 800746a:	d001      	beq.n	8007470 <cleanup_stdio+0x10>
 800746c:	f003 f80c 	bl	800a488 <_fflush_r>
 8007470:	68a1      	ldr	r1, [r4, #8]
 8007472:	4b09      	ldr	r3, [pc, #36]	@ (8007498 <cleanup_stdio+0x38>)
 8007474:	4299      	cmp	r1, r3
 8007476:	d002      	beq.n	800747e <cleanup_stdio+0x1e>
 8007478:	4620      	mov	r0, r4
 800747a:	f003 f805 	bl	800a488 <_fflush_r>
 800747e:	68e1      	ldr	r1, [r4, #12]
 8007480:	4b06      	ldr	r3, [pc, #24]	@ (800749c <cleanup_stdio+0x3c>)
 8007482:	4299      	cmp	r1, r3
 8007484:	d004      	beq.n	8007490 <cleanup_stdio+0x30>
 8007486:	4620      	mov	r0, r4
 8007488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800748c:	f002 bffc 	b.w	800a488 <_fflush_r>
 8007490:	bd10      	pop	{r4, pc}
 8007492:	bf00      	nop
 8007494:	2000040c 	.word	0x2000040c
 8007498:	20000474 	.word	0x20000474
 800749c:	200004dc 	.word	0x200004dc

080074a0 <global_stdio_init.part.0>:
 80074a0:	b510      	push	{r4, lr}
 80074a2:	4b0b      	ldr	r3, [pc, #44]	@ (80074d0 <global_stdio_init.part.0+0x30>)
 80074a4:	4c0b      	ldr	r4, [pc, #44]	@ (80074d4 <global_stdio_init.part.0+0x34>)
 80074a6:	4a0c      	ldr	r2, [pc, #48]	@ (80074d8 <global_stdio_init.part.0+0x38>)
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	4620      	mov	r0, r4
 80074ac:	2200      	movs	r2, #0
 80074ae:	2104      	movs	r1, #4
 80074b0:	f7ff ff94 	bl	80073dc <std>
 80074b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074b8:	2201      	movs	r2, #1
 80074ba:	2109      	movs	r1, #9
 80074bc:	f7ff ff8e 	bl	80073dc <std>
 80074c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80074c4:	2202      	movs	r2, #2
 80074c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ca:	2112      	movs	r1, #18
 80074cc:	f7ff bf86 	b.w	80073dc <std>
 80074d0:	20000544 	.word	0x20000544
 80074d4:	2000040c 	.word	0x2000040c
 80074d8:	08007449 	.word	0x08007449

080074dc <__sfp_lock_acquire>:
 80074dc:	4801      	ldr	r0, [pc, #4]	@ (80074e4 <__sfp_lock_acquire+0x8>)
 80074de:	f000 ba26 	b.w	800792e <__retarget_lock_acquire_recursive>
 80074e2:	bf00      	nop
 80074e4:	2000054d 	.word	0x2000054d

080074e8 <__sfp_lock_release>:
 80074e8:	4801      	ldr	r0, [pc, #4]	@ (80074f0 <__sfp_lock_release+0x8>)
 80074ea:	f000 ba21 	b.w	8007930 <__retarget_lock_release_recursive>
 80074ee:	bf00      	nop
 80074f0:	2000054d 	.word	0x2000054d

080074f4 <__sinit>:
 80074f4:	b510      	push	{r4, lr}
 80074f6:	4604      	mov	r4, r0
 80074f8:	f7ff fff0 	bl	80074dc <__sfp_lock_acquire>
 80074fc:	6a23      	ldr	r3, [r4, #32]
 80074fe:	b11b      	cbz	r3, 8007508 <__sinit+0x14>
 8007500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007504:	f7ff bff0 	b.w	80074e8 <__sfp_lock_release>
 8007508:	4b04      	ldr	r3, [pc, #16]	@ (800751c <__sinit+0x28>)
 800750a:	6223      	str	r3, [r4, #32]
 800750c:	4b04      	ldr	r3, [pc, #16]	@ (8007520 <__sinit+0x2c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1f5      	bne.n	8007500 <__sinit+0xc>
 8007514:	f7ff ffc4 	bl	80074a0 <global_stdio_init.part.0>
 8007518:	e7f2      	b.n	8007500 <__sinit+0xc>
 800751a:	bf00      	nop
 800751c:	08007461 	.word	0x08007461
 8007520:	20000544 	.word	0x20000544

08007524 <_fwalk_sglue>:
 8007524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007528:	4607      	mov	r7, r0
 800752a:	4688      	mov	r8, r1
 800752c:	4614      	mov	r4, r2
 800752e:	2600      	movs	r6, #0
 8007530:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007534:	f1b9 0901 	subs.w	r9, r9, #1
 8007538:	d505      	bpl.n	8007546 <_fwalk_sglue+0x22>
 800753a:	6824      	ldr	r4, [r4, #0]
 800753c:	2c00      	cmp	r4, #0
 800753e:	d1f7      	bne.n	8007530 <_fwalk_sglue+0xc>
 8007540:	4630      	mov	r0, r6
 8007542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007546:	89ab      	ldrh	r3, [r5, #12]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d907      	bls.n	800755c <_fwalk_sglue+0x38>
 800754c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007550:	3301      	adds	r3, #1
 8007552:	d003      	beq.n	800755c <_fwalk_sglue+0x38>
 8007554:	4629      	mov	r1, r5
 8007556:	4638      	mov	r0, r7
 8007558:	47c0      	blx	r8
 800755a:	4306      	orrs	r6, r0
 800755c:	3568      	adds	r5, #104	@ 0x68
 800755e:	e7e9      	b.n	8007534 <_fwalk_sglue+0x10>

08007560 <iprintf>:
 8007560:	b40f      	push	{r0, r1, r2, r3}
 8007562:	b507      	push	{r0, r1, r2, lr}
 8007564:	4906      	ldr	r1, [pc, #24]	@ (8007580 <iprintf+0x20>)
 8007566:	ab04      	add	r3, sp, #16
 8007568:	6808      	ldr	r0, [r1, #0]
 800756a:	f853 2b04 	ldr.w	r2, [r3], #4
 800756e:	6881      	ldr	r1, [r0, #8]
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	f002 fded 	bl	800a150 <_vfiprintf_r>
 8007576:	b003      	add	sp, #12
 8007578:	f85d eb04 	ldr.w	lr, [sp], #4
 800757c:	b004      	add	sp, #16
 800757e:	4770      	bx	lr
 8007580:	20000018 	.word	0x20000018

08007584 <_puts_r>:
 8007584:	6a03      	ldr	r3, [r0, #32]
 8007586:	b570      	push	{r4, r5, r6, lr}
 8007588:	6884      	ldr	r4, [r0, #8]
 800758a:	4605      	mov	r5, r0
 800758c:	460e      	mov	r6, r1
 800758e:	b90b      	cbnz	r3, 8007594 <_puts_r+0x10>
 8007590:	f7ff ffb0 	bl	80074f4 <__sinit>
 8007594:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007596:	07db      	lsls	r3, r3, #31
 8007598:	d405      	bmi.n	80075a6 <_puts_r+0x22>
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	0598      	lsls	r0, r3, #22
 800759e:	d402      	bmi.n	80075a6 <_puts_r+0x22>
 80075a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075a2:	f000 f9c4 	bl	800792e <__retarget_lock_acquire_recursive>
 80075a6:	89a3      	ldrh	r3, [r4, #12]
 80075a8:	0719      	lsls	r1, r3, #28
 80075aa:	d502      	bpl.n	80075b2 <_puts_r+0x2e>
 80075ac:	6923      	ldr	r3, [r4, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d135      	bne.n	800761e <_puts_r+0x9a>
 80075b2:	4621      	mov	r1, r4
 80075b4:	4628      	mov	r0, r5
 80075b6:	f000 f8e7 	bl	8007788 <__swsetup_r>
 80075ba:	b380      	cbz	r0, 800761e <_puts_r+0x9a>
 80075bc:	f04f 35ff 	mov.w	r5, #4294967295
 80075c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075c2:	07da      	lsls	r2, r3, #31
 80075c4:	d405      	bmi.n	80075d2 <_puts_r+0x4e>
 80075c6:	89a3      	ldrh	r3, [r4, #12]
 80075c8:	059b      	lsls	r3, r3, #22
 80075ca:	d402      	bmi.n	80075d2 <_puts_r+0x4e>
 80075cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ce:	f000 f9af 	bl	8007930 <__retarget_lock_release_recursive>
 80075d2:	4628      	mov	r0, r5
 80075d4:	bd70      	pop	{r4, r5, r6, pc}
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	da04      	bge.n	80075e4 <_puts_r+0x60>
 80075da:	69a2      	ldr	r2, [r4, #24]
 80075dc:	429a      	cmp	r2, r3
 80075de:	dc17      	bgt.n	8007610 <_puts_r+0x8c>
 80075e0:	290a      	cmp	r1, #10
 80075e2:	d015      	beq.n	8007610 <_puts_r+0x8c>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	1c5a      	adds	r2, r3, #1
 80075e8:	6022      	str	r2, [r4, #0]
 80075ea:	7019      	strb	r1, [r3, #0]
 80075ec:	68a3      	ldr	r3, [r4, #8]
 80075ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075f2:	3b01      	subs	r3, #1
 80075f4:	60a3      	str	r3, [r4, #8]
 80075f6:	2900      	cmp	r1, #0
 80075f8:	d1ed      	bne.n	80075d6 <_puts_r+0x52>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	da11      	bge.n	8007622 <_puts_r+0x9e>
 80075fe:	4622      	mov	r2, r4
 8007600:	210a      	movs	r1, #10
 8007602:	4628      	mov	r0, r5
 8007604:	f000 f881 	bl	800770a <__swbuf_r>
 8007608:	3001      	adds	r0, #1
 800760a:	d0d7      	beq.n	80075bc <_puts_r+0x38>
 800760c:	250a      	movs	r5, #10
 800760e:	e7d7      	b.n	80075c0 <_puts_r+0x3c>
 8007610:	4622      	mov	r2, r4
 8007612:	4628      	mov	r0, r5
 8007614:	f000 f879 	bl	800770a <__swbuf_r>
 8007618:	3001      	adds	r0, #1
 800761a:	d1e7      	bne.n	80075ec <_puts_r+0x68>
 800761c:	e7ce      	b.n	80075bc <_puts_r+0x38>
 800761e:	3e01      	subs	r6, #1
 8007620:	e7e4      	b.n	80075ec <_puts_r+0x68>
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	6022      	str	r2, [r4, #0]
 8007628:	220a      	movs	r2, #10
 800762a:	701a      	strb	r2, [r3, #0]
 800762c:	e7ee      	b.n	800760c <_puts_r+0x88>
	...

08007630 <puts>:
 8007630:	4b02      	ldr	r3, [pc, #8]	@ (800763c <puts+0xc>)
 8007632:	4601      	mov	r1, r0
 8007634:	6818      	ldr	r0, [r3, #0]
 8007636:	f7ff bfa5 	b.w	8007584 <_puts_r>
 800763a:	bf00      	nop
 800763c:	20000018 	.word	0x20000018

08007640 <siprintf>:
 8007640:	b40e      	push	{r1, r2, r3}
 8007642:	b510      	push	{r4, lr}
 8007644:	b09d      	sub	sp, #116	@ 0x74
 8007646:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007648:	9002      	str	r0, [sp, #8]
 800764a:	9006      	str	r0, [sp, #24]
 800764c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007650:	480a      	ldr	r0, [pc, #40]	@ (800767c <siprintf+0x3c>)
 8007652:	9107      	str	r1, [sp, #28]
 8007654:	9104      	str	r1, [sp, #16]
 8007656:	490a      	ldr	r1, [pc, #40]	@ (8007680 <siprintf+0x40>)
 8007658:	f853 2b04 	ldr.w	r2, [r3], #4
 800765c:	9105      	str	r1, [sp, #20]
 800765e:	2400      	movs	r4, #0
 8007660:	a902      	add	r1, sp, #8
 8007662:	6800      	ldr	r0, [r0, #0]
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007668:	f002 fc4c 	bl	8009f04 <_svfiprintf_r>
 800766c:	9b02      	ldr	r3, [sp, #8]
 800766e:	701c      	strb	r4, [r3, #0]
 8007670:	b01d      	add	sp, #116	@ 0x74
 8007672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007676:	b003      	add	sp, #12
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	20000018 	.word	0x20000018
 8007680:	ffff0208 	.word	0xffff0208

08007684 <__sread>:
 8007684:	b510      	push	{r4, lr}
 8007686:	460c      	mov	r4, r1
 8007688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800768c:	f000 f900 	bl	8007890 <_read_r>
 8007690:	2800      	cmp	r0, #0
 8007692:	bfab      	itete	ge
 8007694:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007696:	89a3      	ldrhlt	r3, [r4, #12]
 8007698:	181b      	addge	r3, r3, r0
 800769a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800769e:	bfac      	ite	ge
 80076a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076a2:	81a3      	strhlt	r3, [r4, #12]
 80076a4:	bd10      	pop	{r4, pc}

080076a6 <__swrite>:
 80076a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076aa:	461f      	mov	r7, r3
 80076ac:	898b      	ldrh	r3, [r1, #12]
 80076ae:	05db      	lsls	r3, r3, #23
 80076b0:	4605      	mov	r5, r0
 80076b2:	460c      	mov	r4, r1
 80076b4:	4616      	mov	r6, r2
 80076b6:	d505      	bpl.n	80076c4 <__swrite+0x1e>
 80076b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076bc:	2302      	movs	r3, #2
 80076be:	2200      	movs	r2, #0
 80076c0:	f000 f8d4 	bl	800786c <_lseek_r>
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076ce:	81a3      	strh	r3, [r4, #12]
 80076d0:	4632      	mov	r2, r6
 80076d2:	463b      	mov	r3, r7
 80076d4:	4628      	mov	r0, r5
 80076d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076da:	f000 b8eb 	b.w	80078b4 <_write_r>

080076de <__sseek>:
 80076de:	b510      	push	{r4, lr}
 80076e0:	460c      	mov	r4, r1
 80076e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e6:	f000 f8c1 	bl	800786c <_lseek_r>
 80076ea:	1c43      	adds	r3, r0, #1
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	bf15      	itete	ne
 80076f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076fa:	81a3      	strheq	r3, [r4, #12]
 80076fc:	bf18      	it	ne
 80076fe:	81a3      	strhne	r3, [r4, #12]
 8007700:	bd10      	pop	{r4, pc}

08007702 <__sclose>:
 8007702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007706:	f000 b8a1 	b.w	800784c <_close_r>

0800770a <__swbuf_r>:
 800770a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770c:	460e      	mov	r6, r1
 800770e:	4614      	mov	r4, r2
 8007710:	4605      	mov	r5, r0
 8007712:	b118      	cbz	r0, 800771c <__swbuf_r+0x12>
 8007714:	6a03      	ldr	r3, [r0, #32]
 8007716:	b90b      	cbnz	r3, 800771c <__swbuf_r+0x12>
 8007718:	f7ff feec 	bl	80074f4 <__sinit>
 800771c:	69a3      	ldr	r3, [r4, #24]
 800771e:	60a3      	str	r3, [r4, #8]
 8007720:	89a3      	ldrh	r3, [r4, #12]
 8007722:	071a      	lsls	r2, r3, #28
 8007724:	d501      	bpl.n	800772a <__swbuf_r+0x20>
 8007726:	6923      	ldr	r3, [r4, #16]
 8007728:	b943      	cbnz	r3, 800773c <__swbuf_r+0x32>
 800772a:	4621      	mov	r1, r4
 800772c:	4628      	mov	r0, r5
 800772e:	f000 f82b 	bl	8007788 <__swsetup_r>
 8007732:	b118      	cbz	r0, 800773c <__swbuf_r+0x32>
 8007734:	f04f 37ff 	mov.w	r7, #4294967295
 8007738:	4638      	mov	r0, r7
 800773a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	6922      	ldr	r2, [r4, #16]
 8007740:	1a98      	subs	r0, r3, r2
 8007742:	6963      	ldr	r3, [r4, #20]
 8007744:	b2f6      	uxtb	r6, r6
 8007746:	4283      	cmp	r3, r0
 8007748:	4637      	mov	r7, r6
 800774a:	dc05      	bgt.n	8007758 <__swbuf_r+0x4e>
 800774c:	4621      	mov	r1, r4
 800774e:	4628      	mov	r0, r5
 8007750:	f002 fe9a 	bl	800a488 <_fflush_r>
 8007754:	2800      	cmp	r0, #0
 8007756:	d1ed      	bne.n	8007734 <__swbuf_r+0x2a>
 8007758:	68a3      	ldr	r3, [r4, #8]
 800775a:	3b01      	subs	r3, #1
 800775c:	60a3      	str	r3, [r4, #8]
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	6022      	str	r2, [r4, #0]
 8007764:	701e      	strb	r6, [r3, #0]
 8007766:	6962      	ldr	r2, [r4, #20]
 8007768:	1c43      	adds	r3, r0, #1
 800776a:	429a      	cmp	r2, r3
 800776c:	d004      	beq.n	8007778 <__swbuf_r+0x6e>
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	07db      	lsls	r3, r3, #31
 8007772:	d5e1      	bpl.n	8007738 <__swbuf_r+0x2e>
 8007774:	2e0a      	cmp	r6, #10
 8007776:	d1df      	bne.n	8007738 <__swbuf_r+0x2e>
 8007778:	4621      	mov	r1, r4
 800777a:	4628      	mov	r0, r5
 800777c:	f002 fe84 	bl	800a488 <_fflush_r>
 8007780:	2800      	cmp	r0, #0
 8007782:	d0d9      	beq.n	8007738 <__swbuf_r+0x2e>
 8007784:	e7d6      	b.n	8007734 <__swbuf_r+0x2a>
	...

08007788 <__swsetup_r>:
 8007788:	b538      	push	{r3, r4, r5, lr}
 800778a:	4b29      	ldr	r3, [pc, #164]	@ (8007830 <__swsetup_r+0xa8>)
 800778c:	4605      	mov	r5, r0
 800778e:	6818      	ldr	r0, [r3, #0]
 8007790:	460c      	mov	r4, r1
 8007792:	b118      	cbz	r0, 800779c <__swsetup_r+0x14>
 8007794:	6a03      	ldr	r3, [r0, #32]
 8007796:	b90b      	cbnz	r3, 800779c <__swsetup_r+0x14>
 8007798:	f7ff feac 	bl	80074f4 <__sinit>
 800779c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a0:	0719      	lsls	r1, r3, #28
 80077a2:	d422      	bmi.n	80077ea <__swsetup_r+0x62>
 80077a4:	06da      	lsls	r2, r3, #27
 80077a6:	d407      	bmi.n	80077b8 <__swsetup_r+0x30>
 80077a8:	2209      	movs	r2, #9
 80077aa:	602a      	str	r2, [r5, #0]
 80077ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077b0:	81a3      	strh	r3, [r4, #12]
 80077b2:	f04f 30ff 	mov.w	r0, #4294967295
 80077b6:	e033      	b.n	8007820 <__swsetup_r+0x98>
 80077b8:	0758      	lsls	r0, r3, #29
 80077ba:	d512      	bpl.n	80077e2 <__swsetup_r+0x5a>
 80077bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077be:	b141      	cbz	r1, 80077d2 <__swsetup_r+0x4a>
 80077c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077c4:	4299      	cmp	r1, r3
 80077c6:	d002      	beq.n	80077ce <__swsetup_r+0x46>
 80077c8:	4628      	mov	r0, r5
 80077ca:	f000 ff11 	bl	80085f0 <_free_r>
 80077ce:	2300      	movs	r3, #0
 80077d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077d8:	81a3      	strh	r3, [r4, #12]
 80077da:	2300      	movs	r3, #0
 80077dc:	6063      	str	r3, [r4, #4]
 80077de:	6923      	ldr	r3, [r4, #16]
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	f043 0308 	orr.w	r3, r3, #8
 80077e8:	81a3      	strh	r3, [r4, #12]
 80077ea:	6923      	ldr	r3, [r4, #16]
 80077ec:	b94b      	cbnz	r3, 8007802 <__swsetup_r+0x7a>
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80077f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077f8:	d003      	beq.n	8007802 <__swsetup_r+0x7a>
 80077fa:	4621      	mov	r1, r4
 80077fc:	4628      	mov	r0, r5
 80077fe:	f002 fe91 	bl	800a524 <__smakebuf_r>
 8007802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007806:	f013 0201 	ands.w	r2, r3, #1
 800780a:	d00a      	beq.n	8007822 <__swsetup_r+0x9a>
 800780c:	2200      	movs	r2, #0
 800780e:	60a2      	str	r2, [r4, #8]
 8007810:	6962      	ldr	r2, [r4, #20]
 8007812:	4252      	negs	r2, r2
 8007814:	61a2      	str	r2, [r4, #24]
 8007816:	6922      	ldr	r2, [r4, #16]
 8007818:	b942      	cbnz	r2, 800782c <__swsetup_r+0xa4>
 800781a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800781e:	d1c5      	bne.n	80077ac <__swsetup_r+0x24>
 8007820:	bd38      	pop	{r3, r4, r5, pc}
 8007822:	0799      	lsls	r1, r3, #30
 8007824:	bf58      	it	pl
 8007826:	6962      	ldrpl	r2, [r4, #20]
 8007828:	60a2      	str	r2, [r4, #8]
 800782a:	e7f4      	b.n	8007816 <__swsetup_r+0x8e>
 800782c:	2000      	movs	r0, #0
 800782e:	e7f7      	b.n	8007820 <__swsetup_r+0x98>
 8007830:	20000018 	.word	0x20000018

08007834 <memset>:
 8007834:	4402      	add	r2, r0
 8007836:	4603      	mov	r3, r0
 8007838:	4293      	cmp	r3, r2
 800783a:	d100      	bne.n	800783e <memset+0xa>
 800783c:	4770      	bx	lr
 800783e:	f803 1b01 	strb.w	r1, [r3], #1
 8007842:	e7f9      	b.n	8007838 <memset+0x4>

08007844 <_localeconv_r>:
 8007844:	4800      	ldr	r0, [pc, #0]	@ (8007848 <_localeconv_r+0x4>)
 8007846:	4770      	bx	lr
 8007848:	20000158 	.word	0x20000158

0800784c <_close_r>:
 800784c:	b538      	push	{r3, r4, r5, lr}
 800784e:	4d06      	ldr	r5, [pc, #24]	@ (8007868 <_close_r+0x1c>)
 8007850:	2300      	movs	r3, #0
 8007852:	4604      	mov	r4, r0
 8007854:	4608      	mov	r0, r1
 8007856:	602b      	str	r3, [r5, #0]
 8007858:	f7fa fde6 	bl	8002428 <_close>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	d102      	bne.n	8007866 <_close_r+0x1a>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	b103      	cbz	r3, 8007866 <_close_r+0x1a>
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	bd38      	pop	{r3, r4, r5, pc}
 8007868:	20000548 	.word	0x20000548

0800786c <_lseek_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	4d07      	ldr	r5, [pc, #28]	@ (800788c <_lseek_r+0x20>)
 8007870:	4604      	mov	r4, r0
 8007872:	4608      	mov	r0, r1
 8007874:	4611      	mov	r1, r2
 8007876:	2200      	movs	r2, #0
 8007878:	602a      	str	r2, [r5, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	f7fa fdfb 	bl	8002476 <_lseek>
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	d102      	bne.n	800788a <_lseek_r+0x1e>
 8007884:	682b      	ldr	r3, [r5, #0]
 8007886:	b103      	cbz	r3, 800788a <_lseek_r+0x1e>
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	bd38      	pop	{r3, r4, r5, pc}
 800788c:	20000548 	.word	0x20000548

08007890 <_read_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4d07      	ldr	r5, [pc, #28]	@ (80078b0 <_read_r+0x20>)
 8007894:	4604      	mov	r4, r0
 8007896:	4608      	mov	r0, r1
 8007898:	4611      	mov	r1, r2
 800789a:	2200      	movs	r2, #0
 800789c:	602a      	str	r2, [r5, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	f7fa fd89 	bl	80023b6 <_read>
 80078a4:	1c43      	adds	r3, r0, #1
 80078a6:	d102      	bne.n	80078ae <_read_r+0x1e>
 80078a8:	682b      	ldr	r3, [r5, #0]
 80078aa:	b103      	cbz	r3, 80078ae <_read_r+0x1e>
 80078ac:	6023      	str	r3, [r4, #0]
 80078ae:	bd38      	pop	{r3, r4, r5, pc}
 80078b0:	20000548 	.word	0x20000548

080078b4 <_write_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	4d07      	ldr	r5, [pc, #28]	@ (80078d4 <_write_r+0x20>)
 80078b8:	4604      	mov	r4, r0
 80078ba:	4608      	mov	r0, r1
 80078bc:	4611      	mov	r1, r2
 80078be:	2200      	movs	r2, #0
 80078c0:	602a      	str	r2, [r5, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	f7fa fd94 	bl	80023f0 <_write>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d102      	bne.n	80078d2 <_write_r+0x1e>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	b103      	cbz	r3, 80078d2 <_write_r+0x1e>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	20000548 	.word	0x20000548

080078d8 <__errno>:
 80078d8:	4b01      	ldr	r3, [pc, #4]	@ (80078e0 <__errno+0x8>)
 80078da:	6818      	ldr	r0, [r3, #0]
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	20000018 	.word	0x20000018

080078e4 <__libc_init_array>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	4d0d      	ldr	r5, [pc, #52]	@ (800791c <__libc_init_array+0x38>)
 80078e8:	4c0d      	ldr	r4, [pc, #52]	@ (8007920 <__libc_init_array+0x3c>)
 80078ea:	1b64      	subs	r4, r4, r5
 80078ec:	10a4      	asrs	r4, r4, #2
 80078ee:	2600      	movs	r6, #0
 80078f0:	42a6      	cmp	r6, r4
 80078f2:	d109      	bne.n	8007908 <__libc_init_array+0x24>
 80078f4:	4d0b      	ldr	r5, [pc, #44]	@ (8007924 <__libc_init_array+0x40>)
 80078f6:	4c0c      	ldr	r4, [pc, #48]	@ (8007928 <__libc_init_array+0x44>)
 80078f8:	f003 fae4 	bl	800aec4 <_init>
 80078fc:	1b64      	subs	r4, r4, r5
 80078fe:	10a4      	asrs	r4, r4, #2
 8007900:	2600      	movs	r6, #0
 8007902:	42a6      	cmp	r6, r4
 8007904:	d105      	bne.n	8007912 <__libc_init_array+0x2e>
 8007906:	bd70      	pop	{r4, r5, r6, pc}
 8007908:	f855 3b04 	ldr.w	r3, [r5], #4
 800790c:	4798      	blx	r3
 800790e:	3601      	adds	r6, #1
 8007910:	e7ee      	b.n	80078f0 <__libc_init_array+0xc>
 8007912:	f855 3b04 	ldr.w	r3, [r5], #4
 8007916:	4798      	blx	r3
 8007918:	3601      	adds	r6, #1
 800791a:	e7f2      	b.n	8007902 <__libc_init_array+0x1e>
 800791c:	0800b44c 	.word	0x0800b44c
 8007920:	0800b44c 	.word	0x0800b44c
 8007924:	0800b44c 	.word	0x0800b44c
 8007928:	0800b450 	.word	0x0800b450

0800792c <__retarget_lock_init_recursive>:
 800792c:	4770      	bx	lr

0800792e <__retarget_lock_acquire_recursive>:
 800792e:	4770      	bx	lr

08007930 <__retarget_lock_release_recursive>:
 8007930:	4770      	bx	lr
	...

08007934 <nanf>:
 8007934:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800793c <nanf+0x8>
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	7fc00000 	.word	0x7fc00000

08007940 <quorem>:
 8007940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007944:	6903      	ldr	r3, [r0, #16]
 8007946:	690c      	ldr	r4, [r1, #16]
 8007948:	42a3      	cmp	r3, r4
 800794a:	4607      	mov	r7, r0
 800794c:	db7e      	blt.n	8007a4c <quorem+0x10c>
 800794e:	3c01      	subs	r4, #1
 8007950:	f101 0814 	add.w	r8, r1, #20
 8007954:	00a3      	lsls	r3, r4, #2
 8007956:	f100 0514 	add.w	r5, r0, #20
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007960:	9301      	str	r3, [sp, #4]
 8007962:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007966:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800796a:	3301      	adds	r3, #1
 800796c:	429a      	cmp	r2, r3
 800796e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007972:	fbb2 f6f3 	udiv	r6, r2, r3
 8007976:	d32e      	bcc.n	80079d6 <quorem+0x96>
 8007978:	f04f 0a00 	mov.w	sl, #0
 800797c:	46c4      	mov	ip, r8
 800797e:	46ae      	mov	lr, r5
 8007980:	46d3      	mov	fp, sl
 8007982:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007986:	b298      	uxth	r0, r3
 8007988:	fb06 a000 	mla	r0, r6, r0, sl
 800798c:	0c02      	lsrs	r2, r0, #16
 800798e:	0c1b      	lsrs	r3, r3, #16
 8007990:	fb06 2303 	mla	r3, r6, r3, r2
 8007994:	f8de 2000 	ldr.w	r2, [lr]
 8007998:	b280      	uxth	r0, r0
 800799a:	b292      	uxth	r2, r2
 800799c:	1a12      	subs	r2, r2, r0
 800799e:	445a      	add	r2, fp
 80079a0:	f8de 0000 	ldr.w	r0, [lr]
 80079a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80079ae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80079b2:	b292      	uxth	r2, r2
 80079b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079b8:	45e1      	cmp	r9, ip
 80079ba:	f84e 2b04 	str.w	r2, [lr], #4
 80079be:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80079c2:	d2de      	bcs.n	8007982 <quorem+0x42>
 80079c4:	9b00      	ldr	r3, [sp, #0]
 80079c6:	58eb      	ldr	r3, [r5, r3]
 80079c8:	b92b      	cbnz	r3, 80079d6 <quorem+0x96>
 80079ca:	9b01      	ldr	r3, [sp, #4]
 80079cc:	3b04      	subs	r3, #4
 80079ce:	429d      	cmp	r5, r3
 80079d0:	461a      	mov	r2, r3
 80079d2:	d32f      	bcc.n	8007a34 <quorem+0xf4>
 80079d4:	613c      	str	r4, [r7, #16]
 80079d6:	4638      	mov	r0, r7
 80079d8:	f001 f9c6 	bl	8008d68 <__mcmp>
 80079dc:	2800      	cmp	r0, #0
 80079de:	db25      	blt.n	8007a2c <quorem+0xec>
 80079e0:	4629      	mov	r1, r5
 80079e2:	2000      	movs	r0, #0
 80079e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80079e8:	f8d1 c000 	ldr.w	ip, [r1]
 80079ec:	fa1f fe82 	uxth.w	lr, r2
 80079f0:	fa1f f38c 	uxth.w	r3, ip
 80079f4:	eba3 030e 	sub.w	r3, r3, lr
 80079f8:	4403      	add	r3, r0
 80079fa:	0c12      	lsrs	r2, r2, #16
 80079fc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a00:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a0a:	45c1      	cmp	r9, r8
 8007a0c:	f841 3b04 	str.w	r3, [r1], #4
 8007a10:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a14:	d2e6      	bcs.n	80079e4 <quorem+0xa4>
 8007a16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a1e:	b922      	cbnz	r2, 8007a2a <quorem+0xea>
 8007a20:	3b04      	subs	r3, #4
 8007a22:	429d      	cmp	r5, r3
 8007a24:	461a      	mov	r2, r3
 8007a26:	d30b      	bcc.n	8007a40 <quorem+0x100>
 8007a28:	613c      	str	r4, [r7, #16]
 8007a2a:	3601      	adds	r6, #1
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	b003      	add	sp, #12
 8007a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a34:	6812      	ldr	r2, [r2, #0]
 8007a36:	3b04      	subs	r3, #4
 8007a38:	2a00      	cmp	r2, #0
 8007a3a:	d1cb      	bne.n	80079d4 <quorem+0x94>
 8007a3c:	3c01      	subs	r4, #1
 8007a3e:	e7c6      	b.n	80079ce <quorem+0x8e>
 8007a40:	6812      	ldr	r2, [r2, #0]
 8007a42:	3b04      	subs	r3, #4
 8007a44:	2a00      	cmp	r2, #0
 8007a46:	d1ef      	bne.n	8007a28 <quorem+0xe8>
 8007a48:	3c01      	subs	r4, #1
 8007a4a:	e7ea      	b.n	8007a22 <quorem+0xe2>
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	e7ee      	b.n	8007a2e <quorem+0xee>

08007a50 <_dtoa_r>:
 8007a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	69c7      	ldr	r7, [r0, #28]
 8007a56:	b097      	sub	sp, #92	@ 0x5c
 8007a58:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007a5c:	ec55 4b10 	vmov	r4, r5, d0
 8007a60:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007a62:	9107      	str	r1, [sp, #28]
 8007a64:	4681      	mov	r9, r0
 8007a66:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a68:	9311      	str	r3, [sp, #68]	@ 0x44
 8007a6a:	b97f      	cbnz	r7, 8007a8c <_dtoa_r+0x3c>
 8007a6c:	2010      	movs	r0, #16
 8007a6e:	f000 fe09 	bl	8008684 <malloc>
 8007a72:	4602      	mov	r2, r0
 8007a74:	f8c9 001c 	str.w	r0, [r9, #28]
 8007a78:	b920      	cbnz	r0, 8007a84 <_dtoa_r+0x34>
 8007a7a:	4ba9      	ldr	r3, [pc, #676]	@ (8007d20 <_dtoa_r+0x2d0>)
 8007a7c:	21ef      	movs	r1, #239	@ 0xef
 8007a7e:	48a9      	ldr	r0, [pc, #676]	@ (8007d24 <_dtoa_r+0x2d4>)
 8007a80:	f002 fe02 	bl	800a688 <__assert_func>
 8007a84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a88:	6007      	str	r7, [r0, #0]
 8007a8a:	60c7      	str	r7, [r0, #12]
 8007a8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a90:	6819      	ldr	r1, [r3, #0]
 8007a92:	b159      	cbz	r1, 8007aac <_dtoa_r+0x5c>
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	604a      	str	r2, [r1, #4]
 8007a98:	2301      	movs	r3, #1
 8007a9a:	4093      	lsls	r3, r2
 8007a9c:	608b      	str	r3, [r1, #8]
 8007a9e:	4648      	mov	r0, r9
 8007aa0:	f000 fee6 	bl	8008870 <_Bfree>
 8007aa4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	1e2b      	subs	r3, r5, #0
 8007aae:	bfb9      	ittee	lt
 8007ab0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ab4:	9305      	strlt	r3, [sp, #20]
 8007ab6:	2300      	movge	r3, #0
 8007ab8:	6033      	strge	r3, [r6, #0]
 8007aba:	9f05      	ldr	r7, [sp, #20]
 8007abc:	4b9a      	ldr	r3, [pc, #616]	@ (8007d28 <_dtoa_r+0x2d8>)
 8007abe:	bfbc      	itt	lt
 8007ac0:	2201      	movlt	r2, #1
 8007ac2:	6032      	strlt	r2, [r6, #0]
 8007ac4:	43bb      	bics	r3, r7
 8007ac6:	d112      	bne.n	8007aee <_dtoa_r+0x9e>
 8007ac8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007aca:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ad4:	4323      	orrs	r3, r4
 8007ad6:	f000 855a 	beq.w	800858e <_dtoa_r+0xb3e>
 8007ada:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007adc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007d3c <_dtoa_r+0x2ec>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 855c 	beq.w	800859e <_dtoa_r+0xb4e>
 8007ae6:	f10a 0303 	add.w	r3, sl, #3
 8007aea:	f000 bd56 	b.w	800859a <_dtoa_r+0xb4a>
 8007aee:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007af2:	2200      	movs	r2, #0
 8007af4:	ec51 0b17 	vmov	r0, r1, d7
 8007af8:	2300      	movs	r3, #0
 8007afa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007afe:	f7f8 ffeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b02:	4680      	mov	r8, r0
 8007b04:	b158      	cbz	r0, 8007b1e <_dtoa_r+0xce>
 8007b06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007b08:	2301      	movs	r3, #1
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b0e:	b113      	cbz	r3, 8007b16 <_dtoa_r+0xc6>
 8007b10:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007b12:	4b86      	ldr	r3, [pc, #536]	@ (8007d2c <_dtoa_r+0x2dc>)
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007d40 <_dtoa_r+0x2f0>
 8007b1a:	f000 bd40 	b.w	800859e <_dtoa_r+0xb4e>
 8007b1e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007b22:	aa14      	add	r2, sp, #80	@ 0x50
 8007b24:	a915      	add	r1, sp, #84	@ 0x54
 8007b26:	4648      	mov	r0, r9
 8007b28:	f001 fa3e 	bl	8008fa8 <__d2b>
 8007b2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007b30:	9002      	str	r0, [sp, #8]
 8007b32:	2e00      	cmp	r6, #0
 8007b34:	d078      	beq.n	8007c28 <_dtoa_r+0x1d8>
 8007b36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b38:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b50:	4619      	mov	r1, r3
 8007b52:	2200      	movs	r2, #0
 8007b54:	4b76      	ldr	r3, [pc, #472]	@ (8007d30 <_dtoa_r+0x2e0>)
 8007b56:	f7f8 fb9f 	bl	8000298 <__aeabi_dsub>
 8007b5a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007d08 <_dtoa_r+0x2b8>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 fd52 	bl	8000608 <__aeabi_dmul>
 8007b64:	a36a      	add	r3, pc, #424	@ (adr r3, 8007d10 <_dtoa_r+0x2c0>)
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	f7f8 fb97 	bl	800029c <__adddf3>
 8007b6e:	4604      	mov	r4, r0
 8007b70:	4630      	mov	r0, r6
 8007b72:	460d      	mov	r5, r1
 8007b74:	f7f8 fcde 	bl	8000534 <__aeabi_i2d>
 8007b78:	a367      	add	r3, pc, #412	@ (adr r3, 8007d18 <_dtoa_r+0x2c8>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	f7f8 fd43 	bl	8000608 <__aeabi_dmul>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	4620      	mov	r0, r4
 8007b88:	4629      	mov	r1, r5
 8007b8a:	f7f8 fb87 	bl	800029c <__adddf3>
 8007b8e:	4604      	mov	r4, r0
 8007b90:	460d      	mov	r5, r1
 8007b92:	f7f8 ffe9 	bl	8000b68 <__aeabi_d2iz>
 8007b96:	2200      	movs	r2, #0
 8007b98:	4607      	mov	r7, r0
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	f7f8 ffa4 	bl	8000aec <__aeabi_dcmplt>
 8007ba4:	b140      	cbz	r0, 8007bb8 <_dtoa_r+0x168>
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	f7f8 fcc4 	bl	8000534 <__aeabi_i2d>
 8007bac:	4622      	mov	r2, r4
 8007bae:	462b      	mov	r3, r5
 8007bb0:	f7f8 ff92 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bb4:	b900      	cbnz	r0, 8007bb8 <_dtoa_r+0x168>
 8007bb6:	3f01      	subs	r7, #1
 8007bb8:	2f16      	cmp	r7, #22
 8007bba:	d852      	bhi.n	8007c62 <_dtoa_r+0x212>
 8007bbc:	4b5d      	ldr	r3, [pc, #372]	@ (8007d34 <_dtoa_r+0x2e4>)
 8007bbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007bca:	f7f8 ff8f 	bl	8000aec <__aeabi_dcmplt>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d049      	beq.n	8007c66 <_dtoa_r+0x216>
 8007bd2:	3f01      	subs	r7, #1
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007bda:	1b9b      	subs	r3, r3, r6
 8007bdc:	1e5a      	subs	r2, r3, #1
 8007bde:	bf45      	ittet	mi
 8007be0:	f1c3 0301 	rsbmi	r3, r3, #1
 8007be4:	9300      	strmi	r3, [sp, #0]
 8007be6:	2300      	movpl	r3, #0
 8007be8:	2300      	movmi	r3, #0
 8007bea:	9206      	str	r2, [sp, #24]
 8007bec:	bf54      	ite	pl
 8007bee:	9300      	strpl	r3, [sp, #0]
 8007bf0:	9306      	strmi	r3, [sp, #24]
 8007bf2:	2f00      	cmp	r7, #0
 8007bf4:	db39      	blt.n	8007c6a <_dtoa_r+0x21a>
 8007bf6:	9b06      	ldr	r3, [sp, #24]
 8007bf8:	970d      	str	r7, [sp, #52]	@ 0x34
 8007bfa:	443b      	add	r3, r7
 8007bfc:	9306      	str	r3, [sp, #24]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9308      	str	r3, [sp, #32]
 8007c02:	9b07      	ldr	r3, [sp, #28]
 8007c04:	2b09      	cmp	r3, #9
 8007c06:	d863      	bhi.n	8007cd0 <_dtoa_r+0x280>
 8007c08:	2b05      	cmp	r3, #5
 8007c0a:	bfc4      	itt	gt
 8007c0c:	3b04      	subgt	r3, #4
 8007c0e:	9307      	strgt	r3, [sp, #28]
 8007c10:	9b07      	ldr	r3, [sp, #28]
 8007c12:	f1a3 0302 	sub.w	r3, r3, #2
 8007c16:	bfcc      	ite	gt
 8007c18:	2400      	movgt	r4, #0
 8007c1a:	2401      	movle	r4, #1
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d863      	bhi.n	8007ce8 <_dtoa_r+0x298>
 8007c20:	e8df f003 	tbb	[pc, r3]
 8007c24:	2b375452 	.word	0x2b375452
 8007c28:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007c2c:	441e      	add	r6, r3
 8007c2e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c32:	2b20      	cmp	r3, #32
 8007c34:	bfc1      	itttt	gt
 8007c36:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c3a:	409f      	lslgt	r7, r3
 8007c3c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c40:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c44:	bfd6      	itet	le
 8007c46:	f1c3 0320 	rsble	r3, r3, #32
 8007c4a:	ea47 0003 	orrgt.w	r0, r7, r3
 8007c4e:	fa04 f003 	lslle.w	r0, r4, r3
 8007c52:	f7f8 fc5f 	bl	8000514 <__aeabi_ui2d>
 8007c56:	2201      	movs	r2, #1
 8007c58:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c5c:	3e01      	subs	r6, #1
 8007c5e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007c60:	e776      	b.n	8007b50 <_dtoa_r+0x100>
 8007c62:	2301      	movs	r3, #1
 8007c64:	e7b7      	b.n	8007bd6 <_dtoa_r+0x186>
 8007c66:	9010      	str	r0, [sp, #64]	@ 0x40
 8007c68:	e7b6      	b.n	8007bd8 <_dtoa_r+0x188>
 8007c6a:	9b00      	ldr	r3, [sp, #0]
 8007c6c:	1bdb      	subs	r3, r3, r7
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	427b      	negs	r3, r7
 8007c72:	9308      	str	r3, [sp, #32]
 8007c74:	2300      	movs	r3, #0
 8007c76:	930d      	str	r3, [sp, #52]	@ 0x34
 8007c78:	e7c3      	b.n	8007c02 <_dtoa_r+0x1b2>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c80:	eb07 0b03 	add.w	fp, r7, r3
 8007c84:	f10b 0301 	add.w	r3, fp, #1
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	9303      	str	r3, [sp, #12]
 8007c8c:	bfb8      	it	lt
 8007c8e:	2301      	movlt	r3, #1
 8007c90:	e006      	b.n	8007ca0 <_dtoa_r+0x250>
 8007c92:	2301      	movs	r3, #1
 8007c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	dd28      	ble.n	8007cee <_dtoa_r+0x29e>
 8007c9c:	469b      	mov	fp, r3
 8007c9e:	9303      	str	r3, [sp, #12]
 8007ca0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	2204      	movs	r2, #4
 8007ca8:	f102 0514 	add.w	r5, r2, #20
 8007cac:	429d      	cmp	r5, r3
 8007cae:	d926      	bls.n	8007cfe <_dtoa_r+0x2ae>
 8007cb0:	6041      	str	r1, [r0, #4]
 8007cb2:	4648      	mov	r0, r9
 8007cb4:	f000 fd9c 	bl	80087f0 <_Balloc>
 8007cb8:	4682      	mov	sl, r0
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d142      	bne.n	8007d44 <_dtoa_r+0x2f4>
 8007cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8007d38 <_dtoa_r+0x2e8>)
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	f240 11af 	movw	r1, #431	@ 0x1af
 8007cc6:	e6da      	b.n	8007a7e <_dtoa_r+0x2e>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e7e3      	b.n	8007c94 <_dtoa_r+0x244>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	e7d5      	b.n	8007c7c <_dtoa_r+0x22c>
 8007cd0:	2401      	movs	r4, #1
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9307      	str	r3, [sp, #28]
 8007cd6:	9409      	str	r4, [sp, #36]	@ 0x24
 8007cd8:	f04f 3bff 	mov.w	fp, #4294967295
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8cd b00c 	str.w	fp, [sp, #12]
 8007ce2:	2312      	movs	r3, #18
 8007ce4:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ce6:	e7db      	b.n	8007ca0 <_dtoa_r+0x250>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cec:	e7f4      	b.n	8007cd8 <_dtoa_r+0x288>
 8007cee:	f04f 0b01 	mov.w	fp, #1
 8007cf2:	f8cd b00c 	str.w	fp, [sp, #12]
 8007cf6:	465b      	mov	r3, fp
 8007cf8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007cfc:	e7d0      	b.n	8007ca0 <_dtoa_r+0x250>
 8007cfe:	3101      	adds	r1, #1
 8007d00:	0052      	lsls	r2, r2, #1
 8007d02:	e7d1      	b.n	8007ca8 <_dtoa_r+0x258>
 8007d04:	f3af 8000 	nop.w
 8007d08:	636f4361 	.word	0x636f4361
 8007d0c:	3fd287a7 	.word	0x3fd287a7
 8007d10:	8b60c8b3 	.word	0x8b60c8b3
 8007d14:	3fc68a28 	.word	0x3fc68a28
 8007d18:	509f79fb 	.word	0x509f79fb
 8007d1c:	3fd34413 	.word	0x3fd34413
 8007d20:	0800b05e 	.word	0x0800b05e
 8007d24:	0800b075 	.word	0x0800b075
 8007d28:	7ff00000 	.word	0x7ff00000
 8007d2c:	0800b029 	.word	0x0800b029
 8007d30:	3ff80000 	.word	0x3ff80000
 8007d34:	0800b228 	.word	0x0800b228
 8007d38:	0800b0cd 	.word	0x0800b0cd
 8007d3c:	0800b05a 	.word	0x0800b05a
 8007d40:	0800b028 	.word	0x0800b028
 8007d44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007d48:	6018      	str	r0, [r3, #0]
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	2b0e      	cmp	r3, #14
 8007d4e:	f200 80a1 	bhi.w	8007e94 <_dtoa_r+0x444>
 8007d52:	2c00      	cmp	r4, #0
 8007d54:	f000 809e 	beq.w	8007e94 <_dtoa_r+0x444>
 8007d58:	2f00      	cmp	r7, #0
 8007d5a:	dd33      	ble.n	8007dc4 <_dtoa_r+0x374>
 8007d5c:	4b9c      	ldr	r3, [pc, #624]	@ (8007fd0 <_dtoa_r+0x580>)
 8007d5e:	f007 020f 	and.w	r2, r7, #15
 8007d62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d66:	ed93 7b00 	vldr	d7, [r3]
 8007d6a:	05f8      	lsls	r0, r7, #23
 8007d6c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007d70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d74:	d516      	bpl.n	8007da4 <_dtoa_r+0x354>
 8007d76:	4b97      	ldr	r3, [pc, #604]	@ (8007fd4 <_dtoa_r+0x584>)
 8007d78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d80:	f7f8 fd6c 	bl	800085c <__aeabi_ddiv>
 8007d84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d88:	f004 040f 	and.w	r4, r4, #15
 8007d8c:	2603      	movs	r6, #3
 8007d8e:	4d91      	ldr	r5, [pc, #580]	@ (8007fd4 <_dtoa_r+0x584>)
 8007d90:	b954      	cbnz	r4, 8007da8 <_dtoa_r+0x358>
 8007d92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d9a:	f7f8 fd5f 	bl	800085c <__aeabi_ddiv>
 8007d9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007da2:	e028      	b.n	8007df6 <_dtoa_r+0x3a6>
 8007da4:	2602      	movs	r6, #2
 8007da6:	e7f2      	b.n	8007d8e <_dtoa_r+0x33e>
 8007da8:	07e1      	lsls	r1, r4, #31
 8007daa:	d508      	bpl.n	8007dbe <_dtoa_r+0x36e>
 8007dac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007db0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007db4:	f7f8 fc28 	bl	8000608 <__aeabi_dmul>
 8007db8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007dbc:	3601      	adds	r6, #1
 8007dbe:	1064      	asrs	r4, r4, #1
 8007dc0:	3508      	adds	r5, #8
 8007dc2:	e7e5      	b.n	8007d90 <_dtoa_r+0x340>
 8007dc4:	f000 80af 	beq.w	8007f26 <_dtoa_r+0x4d6>
 8007dc8:	427c      	negs	r4, r7
 8007dca:	4b81      	ldr	r3, [pc, #516]	@ (8007fd0 <_dtoa_r+0x580>)
 8007dcc:	4d81      	ldr	r5, [pc, #516]	@ (8007fd4 <_dtoa_r+0x584>)
 8007dce:	f004 020f 	and.w	r2, r4, #15
 8007dd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007dde:	f7f8 fc13 	bl	8000608 <__aeabi_dmul>
 8007de2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007de6:	1124      	asrs	r4, r4, #4
 8007de8:	2300      	movs	r3, #0
 8007dea:	2602      	movs	r6, #2
 8007dec:	2c00      	cmp	r4, #0
 8007dee:	f040 808f 	bne.w	8007f10 <_dtoa_r+0x4c0>
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1d3      	bne.n	8007d9e <_dtoa_r+0x34e>
 8007df6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007df8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8094 	beq.w	8007f2a <_dtoa_r+0x4da>
 8007e02:	4b75      	ldr	r3, [pc, #468]	@ (8007fd8 <_dtoa_r+0x588>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	4620      	mov	r0, r4
 8007e08:	4629      	mov	r1, r5
 8007e0a:	f7f8 fe6f 	bl	8000aec <__aeabi_dcmplt>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	f000 808b 	beq.w	8007f2a <_dtoa_r+0x4da>
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f000 8087 	beq.w	8007f2a <_dtoa_r+0x4da>
 8007e1c:	f1bb 0f00 	cmp.w	fp, #0
 8007e20:	dd34      	ble.n	8007e8c <_dtoa_r+0x43c>
 8007e22:	4620      	mov	r0, r4
 8007e24:	4b6d      	ldr	r3, [pc, #436]	@ (8007fdc <_dtoa_r+0x58c>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	4629      	mov	r1, r5
 8007e2a:	f7f8 fbed 	bl	8000608 <__aeabi_dmul>
 8007e2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e32:	f107 38ff 	add.w	r8, r7, #4294967295
 8007e36:	3601      	adds	r6, #1
 8007e38:	465c      	mov	r4, fp
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	f7f8 fb7a 	bl	8000534 <__aeabi_i2d>
 8007e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e44:	f7f8 fbe0 	bl	8000608 <__aeabi_dmul>
 8007e48:	4b65      	ldr	r3, [pc, #404]	@ (8007fe0 <_dtoa_r+0x590>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f7f8 fa26 	bl	800029c <__adddf3>
 8007e50:	4605      	mov	r5, r0
 8007e52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e56:	2c00      	cmp	r4, #0
 8007e58:	d16a      	bne.n	8007f30 <_dtoa_r+0x4e0>
 8007e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e5e:	4b61      	ldr	r3, [pc, #388]	@ (8007fe4 <_dtoa_r+0x594>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	f7f8 fa19 	bl	8000298 <__aeabi_dsub>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e6e:	462a      	mov	r2, r5
 8007e70:	4633      	mov	r3, r6
 8007e72:	f7f8 fe59 	bl	8000b28 <__aeabi_dcmpgt>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	f040 8298 	bne.w	80083ac <_dtoa_r+0x95c>
 8007e7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e80:	462a      	mov	r2, r5
 8007e82:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e86:	f7f8 fe31 	bl	8000aec <__aeabi_dcmplt>
 8007e8a:	bb38      	cbnz	r0, 8007edc <_dtoa_r+0x48c>
 8007e8c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007e90:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e94:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f2c0 8157 	blt.w	800814a <_dtoa_r+0x6fa>
 8007e9c:	2f0e      	cmp	r7, #14
 8007e9e:	f300 8154 	bgt.w	800814a <_dtoa_r+0x6fa>
 8007ea2:	4b4b      	ldr	r3, [pc, #300]	@ (8007fd0 <_dtoa_r+0x580>)
 8007ea4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ea8:	ed93 7b00 	vldr	d7, [r3]
 8007eac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	ed8d 7b00 	vstr	d7, [sp]
 8007eb4:	f280 80e5 	bge.w	8008082 <_dtoa_r+0x632>
 8007eb8:	9b03      	ldr	r3, [sp, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f300 80e1 	bgt.w	8008082 <_dtoa_r+0x632>
 8007ec0:	d10c      	bne.n	8007edc <_dtoa_r+0x48c>
 8007ec2:	4b48      	ldr	r3, [pc, #288]	@ (8007fe4 <_dtoa_r+0x594>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	ec51 0b17 	vmov	r0, r1, d7
 8007eca:	f7f8 fb9d 	bl	8000608 <__aeabi_dmul>
 8007ece:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ed2:	f7f8 fe1f 	bl	8000b14 <__aeabi_dcmpge>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	f000 8266 	beq.w	80083a8 <_dtoa_r+0x958>
 8007edc:	2400      	movs	r4, #0
 8007ede:	4625      	mov	r5, r4
 8007ee0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ee2:	4656      	mov	r6, sl
 8007ee4:	ea6f 0803 	mvn.w	r8, r3
 8007ee8:	2700      	movs	r7, #0
 8007eea:	4621      	mov	r1, r4
 8007eec:	4648      	mov	r0, r9
 8007eee:	f000 fcbf 	bl	8008870 <_Bfree>
 8007ef2:	2d00      	cmp	r5, #0
 8007ef4:	f000 80bd 	beq.w	8008072 <_dtoa_r+0x622>
 8007ef8:	b12f      	cbz	r7, 8007f06 <_dtoa_r+0x4b6>
 8007efa:	42af      	cmp	r7, r5
 8007efc:	d003      	beq.n	8007f06 <_dtoa_r+0x4b6>
 8007efe:	4639      	mov	r1, r7
 8007f00:	4648      	mov	r0, r9
 8007f02:	f000 fcb5 	bl	8008870 <_Bfree>
 8007f06:	4629      	mov	r1, r5
 8007f08:	4648      	mov	r0, r9
 8007f0a:	f000 fcb1 	bl	8008870 <_Bfree>
 8007f0e:	e0b0      	b.n	8008072 <_dtoa_r+0x622>
 8007f10:	07e2      	lsls	r2, r4, #31
 8007f12:	d505      	bpl.n	8007f20 <_dtoa_r+0x4d0>
 8007f14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f18:	f7f8 fb76 	bl	8000608 <__aeabi_dmul>
 8007f1c:	3601      	adds	r6, #1
 8007f1e:	2301      	movs	r3, #1
 8007f20:	1064      	asrs	r4, r4, #1
 8007f22:	3508      	adds	r5, #8
 8007f24:	e762      	b.n	8007dec <_dtoa_r+0x39c>
 8007f26:	2602      	movs	r6, #2
 8007f28:	e765      	b.n	8007df6 <_dtoa_r+0x3a6>
 8007f2a:	9c03      	ldr	r4, [sp, #12]
 8007f2c:	46b8      	mov	r8, r7
 8007f2e:	e784      	b.n	8007e3a <_dtoa_r+0x3ea>
 8007f30:	4b27      	ldr	r3, [pc, #156]	@ (8007fd0 <_dtoa_r+0x580>)
 8007f32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f3c:	4454      	add	r4, sl
 8007f3e:	2900      	cmp	r1, #0
 8007f40:	d054      	beq.n	8007fec <_dtoa_r+0x59c>
 8007f42:	4929      	ldr	r1, [pc, #164]	@ (8007fe8 <_dtoa_r+0x598>)
 8007f44:	2000      	movs	r0, #0
 8007f46:	f7f8 fc89 	bl	800085c <__aeabi_ddiv>
 8007f4a:	4633      	mov	r3, r6
 8007f4c:	462a      	mov	r2, r5
 8007f4e:	f7f8 f9a3 	bl	8000298 <__aeabi_dsub>
 8007f52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f56:	4656      	mov	r6, sl
 8007f58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f5c:	f7f8 fe04 	bl	8000b68 <__aeabi_d2iz>
 8007f60:	4605      	mov	r5, r0
 8007f62:	f7f8 fae7 	bl	8000534 <__aeabi_i2d>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f6e:	f7f8 f993 	bl	8000298 <__aeabi_dsub>
 8007f72:	3530      	adds	r5, #48	@ 0x30
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f7c:	f806 5b01 	strb.w	r5, [r6], #1
 8007f80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f84:	f7f8 fdb2 	bl	8000aec <__aeabi_dcmplt>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d172      	bne.n	8008072 <_dtoa_r+0x622>
 8007f8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f90:	4911      	ldr	r1, [pc, #68]	@ (8007fd8 <_dtoa_r+0x588>)
 8007f92:	2000      	movs	r0, #0
 8007f94:	f7f8 f980 	bl	8000298 <__aeabi_dsub>
 8007f98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f9c:	f7f8 fda6 	bl	8000aec <__aeabi_dcmplt>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	f040 80b4 	bne.w	800810e <_dtoa_r+0x6be>
 8007fa6:	42a6      	cmp	r6, r4
 8007fa8:	f43f af70 	beq.w	8007e8c <_dtoa_r+0x43c>
 8007fac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8007fdc <_dtoa_r+0x58c>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f7f8 fb28 	bl	8000608 <__aeabi_dmul>
 8007fb8:	4b08      	ldr	r3, [pc, #32]	@ (8007fdc <_dtoa_r+0x58c>)
 8007fba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fc4:	f7f8 fb20 	bl	8000608 <__aeabi_dmul>
 8007fc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fcc:	e7c4      	b.n	8007f58 <_dtoa_r+0x508>
 8007fce:	bf00      	nop
 8007fd0:	0800b228 	.word	0x0800b228
 8007fd4:	0800b200 	.word	0x0800b200
 8007fd8:	3ff00000 	.word	0x3ff00000
 8007fdc:	40240000 	.word	0x40240000
 8007fe0:	401c0000 	.word	0x401c0000
 8007fe4:	40140000 	.word	0x40140000
 8007fe8:	3fe00000 	.word	0x3fe00000
 8007fec:	4631      	mov	r1, r6
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f7f8 fb0a 	bl	8000608 <__aeabi_dmul>
 8007ff4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007ff8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007ffa:	4656      	mov	r6, sl
 8007ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008000:	f7f8 fdb2 	bl	8000b68 <__aeabi_d2iz>
 8008004:	4605      	mov	r5, r0
 8008006:	f7f8 fa95 	bl	8000534 <__aeabi_i2d>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008012:	f7f8 f941 	bl	8000298 <__aeabi_dsub>
 8008016:	3530      	adds	r5, #48	@ 0x30
 8008018:	f806 5b01 	strb.w	r5, [r6], #1
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	42a6      	cmp	r6, r4
 8008022:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008026:	f04f 0200 	mov.w	r2, #0
 800802a:	d124      	bne.n	8008076 <_dtoa_r+0x626>
 800802c:	4baf      	ldr	r3, [pc, #700]	@ (80082ec <_dtoa_r+0x89c>)
 800802e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008032:	f7f8 f933 	bl	800029c <__adddf3>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800803e:	f7f8 fd73 	bl	8000b28 <__aeabi_dcmpgt>
 8008042:	2800      	cmp	r0, #0
 8008044:	d163      	bne.n	800810e <_dtoa_r+0x6be>
 8008046:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800804a:	49a8      	ldr	r1, [pc, #672]	@ (80082ec <_dtoa_r+0x89c>)
 800804c:	2000      	movs	r0, #0
 800804e:	f7f8 f923 	bl	8000298 <__aeabi_dsub>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800805a:	f7f8 fd47 	bl	8000aec <__aeabi_dcmplt>
 800805e:	2800      	cmp	r0, #0
 8008060:	f43f af14 	beq.w	8007e8c <_dtoa_r+0x43c>
 8008064:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008066:	1e73      	subs	r3, r6, #1
 8008068:	9313      	str	r3, [sp, #76]	@ 0x4c
 800806a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800806e:	2b30      	cmp	r3, #48	@ 0x30
 8008070:	d0f8      	beq.n	8008064 <_dtoa_r+0x614>
 8008072:	4647      	mov	r7, r8
 8008074:	e03b      	b.n	80080ee <_dtoa_r+0x69e>
 8008076:	4b9e      	ldr	r3, [pc, #632]	@ (80082f0 <_dtoa_r+0x8a0>)
 8008078:	f7f8 fac6 	bl	8000608 <__aeabi_dmul>
 800807c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008080:	e7bc      	b.n	8007ffc <_dtoa_r+0x5ac>
 8008082:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008086:	4656      	mov	r6, sl
 8008088:	e9dd 2300 	ldrd	r2, r3, [sp]
 800808c:	4620      	mov	r0, r4
 800808e:	4629      	mov	r1, r5
 8008090:	f7f8 fbe4 	bl	800085c <__aeabi_ddiv>
 8008094:	f7f8 fd68 	bl	8000b68 <__aeabi_d2iz>
 8008098:	4680      	mov	r8, r0
 800809a:	f7f8 fa4b 	bl	8000534 <__aeabi_i2d>
 800809e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080a2:	f7f8 fab1 	bl	8000608 <__aeabi_dmul>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4620      	mov	r0, r4
 80080ac:	4629      	mov	r1, r5
 80080ae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80080b2:	f7f8 f8f1 	bl	8000298 <__aeabi_dsub>
 80080b6:	f806 4b01 	strb.w	r4, [r6], #1
 80080ba:	9d03      	ldr	r5, [sp, #12]
 80080bc:	eba6 040a 	sub.w	r4, r6, sl
 80080c0:	42a5      	cmp	r5, r4
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	d133      	bne.n	8008130 <_dtoa_r+0x6e0>
 80080c8:	f7f8 f8e8 	bl	800029c <__adddf3>
 80080cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080d0:	4604      	mov	r4, r0
 80080d2:	460d      	mov	r5, r1
 80080d4:	f7f8 fd28 	bl	8000b28 <__aeabi_dcmpgt>
 80080d8:	b9c0      	cbnz	r0, 800810c <_dtoa_r+0x6bc>
 80080da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080de:	4620      	mov	r0, r4
 80080e0:	4629      	mov	r1, r5
 80080e2:	f7f8 fcf9 	bl	8000ad8 <__aeabi_dcmpeq>
 80080e6:	b110      	cbz	r0, 80080ee <_dtoa_r+0x69e>
 80080e8:	f018 0f01 	tst.w	r8, #1
 80080ec:	d10e      	bne.n	800810c <_dtoa_r+0x6bc>
 80080ee:	9902      	ldr	r1, [sp, #8]
 80080f0:	4648      	mov	r0, r9
 80080f2:	f000 fbbd 	bl	8008870 <_Bfree>
 80080f6:	2300      	movs	r3, #0
 80080f8:	7033      	strb	r3, [r6, #0]
 80080fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80080fc:	3701      	adds	r7, #1
 80080fe:	601f      	str	r7, [r3, #0]
 8008100:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 824b 	beq.w	800859e <_dtoa_r+0xb4e>
 8008108:	601e      	str	r6, [r3, #0]
 800810a:	e248      	b.n	800859e <_dtoa_r+0xb4e>
 800810c:	46b8      	mov	r8, r7
 800810e:	4633      	mov	r3, r6
 8008110:	461e      	mov	r6, r3
 8008112:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008116:	2a39      	cmp	r2, #57	@ 0x39
 8008118:	d106      	bne.n	8008128 <_dtoa_r+0x6d8>
 800811a:	459a      	cmp	sl, r3
 800811c:	d1f8      	bne.n	8008110 <_dtoa_r+0x6c0>
 800811e:	2230      	movs	r2, #48	@ 0x30
 8008120:	f108 0801 	add.w	r8, r8, #1
 8008124:	f88a 2000 	strb.w	r2, [sl]
 8008128:	781a      	ldrb	r2, [r3, #0]
 800812a:	3201      	adds	r2, #1
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	e7a0      	b.n	8008072 <_dtoa_r+0x622>
 8008130:	4b6f      	ldr	r3, [pc, #444]	@ (80082f0 <_dtoa_r+0x8a0>)
 8008132:	2200      	movs	r2, #0
 8008134:	f7f8 fa68 	bl	8000608 <__aeabi_dmul>
 8008138:	2200      	movs	r2, #0
 800813a:	2300      	movs	r3, #0
 800813c:	4604      	mov	r4, r0
 800813e:	460d      	mov	r5, r1
 8008140:	f7f8 fcca 	bl	8000ad8 <__aeabi_dcmpeq>
 8008144:	2800      	cmp	r0, #0
 8008146:	d09f      	beq.n	8008088 <_dtoa_r+0x638>
 8008148:	e7d1      	b.n	80080ee <_dtoa_r+0x69e>
 800814a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800814c:	2a00      	cmp	r2, #0
 800814e:	f000 80ea 	beq.w	8008326 <_dtoa_r+0x8d6>
 8008152:	9a07      	ldr	r2, [sp, #28]
 8008154:	2a01      	cmp	r2, #1
 8008156:	f300 80cd 	bgt.w	80082f4 <_dtoa_r+0x8a4>
 800815a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800815c:	2a00      	cmp	r2, #0
 800815e:	f000 80c1 	beq.w	80082e4 <_dtoa_r+0x894>
 8008162:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008166:	9c08      	ldr	r4, [sp, #32]
 8008168:	9e00      	ldr	r6, [sp, #0]
 800816a:	9a00      	ldr	r2, [sp, #0]
 800816c:	441a      	add	r2, r3
 800816e:	9200      	str	r2, [sp, #0]
 8008170:	9a06      	ldr	r2, [sp, #24]
 8008172:	2101      	movs	r1, #1
 8008174:	441a      	add	r2, r3
 8008176:	4648      	mov	r0, r9
 8008178:	9206      	str	r2, [sp, #24]
 800817a:	f000 fc77 	bl	8008a6c <__i2b>
 800817e:	4605      	mov	r5, r0
 8008180:	b166      	cbz	r6, 800819c <_dtoa_r+0x74c>
 8008182:	9b06      	ldr	r3, [sp, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	dd09      	ble.n	800819c <_dtoa_r+0x74c>
 8008188:	42b3      	cmp	r3, r6
 800818a:	9a00      	ldr	r2, [sp, #0]
 800818c:	bfa8      	it	ge
 800818e:	4633      	movge	r3, r6
 8008190:	1ad2      	subs	r2, r2, r3
 8008192:	9200      	str	r2, [sp, #0]
 8008194:	9a06      	ldr	r2, [sp, #24]
 8008196:	1af6      	subs	r6, r6, r3
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	9306      	str	r3, [sp, #24]
 800819c:	9b08      	ldr	r3, [sp, #32]
 800819e:	b30b      	cbz	r3, 80081e4 <_dtoa_r+0x794>
 80081a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 80c6 	beq.w	8008334 <_dtoa_r+0x8e4>
 80081a8:	2c00      	cmp	r4, #0
 80081aa:	f000 80c0 	beq.w	800832e <_dtoa_r+0x8de>
 80081ae:	4629      	mov	r1, r5
 80081b0:	4622      	mov	r2, r4
 80081b2:	4648      	mov	r0, r9
 80081b4:	f000 fd12 	bl	8008bdc <__pow5mult>
 80081b8:	9a02      	ldr	r2, [sp, #8]
 80081ba:	4601      	mov	r1, r0
 80081bc:	4605      	mov	r5, r0
 80081be:	4648      	mov	r0, r9
 80081c0:	f000 fc6a 	bl	8008a98 <__multiply>
 80081c4:	9902      	ldr	r1, [sp, #8]
 80081c6:	4680      	mov	r8, r0
 80081c8:	4648      	mov	r0, r9
 80081ca:	f000 fb51 	bl	8008870 <_Bfree>
 80081ce:	9b08      	ldr	r3, [sp, #32]
 80081d0:	1b1b      	subs	r3, r3, r4
 80081d2:	9308      	str	r3, [sp, #32]
 80081d4:	f000 80b1 	beq.w	800833a <_dtoa_r+0x8ea>
 80081d8:	9a08      	ldr	r2, [sp, #32]
 80081da:	4641      	mov	r1, r8
 80081dc:	4648      	mov	r0, r9
 80081de:	f000 fcfd 	bl	8008bdc <__pow5mult>
 80081e2:	9002      	str	r0, [sp, #8]
 80081e4:	2101      	movs	r1, #1
 80081e6:	4648      	mov	r0, r9
 80081e8:	f000 fc40 	bl	8008a6c <__i2b>
 80081ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081ee:	4604      	mov	r4, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 81d8 	beq.w	80085a6 <_dtoa_r+0xb56>
 80081f6:	461a      	mov	r2, r3
 80081f8:	4601      	mov	r1, r0
 80081fa:	4648      	mov	r0, r9
 80081fc:	f000 fcee 	bl	8008bdc <__pow5mult>
 8008200:	9b07      	ldr	r3, [sp, #28]
 8008202:	2b01      	cmp	r3, #1
 8008204:	4604      	mov	r4, r0
 8008206:	f300 809f 	bgt.w	8008348 <_dtoa_r+0x8f8>
 800820a:	9b04      	ldr	r3, [sp, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	f040 8097 	bne.w	8008340 <_dtoa_r+0x8f0>
 8008212:	9b05      	ldr	r3, [sp, #20]
 8008214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008218:	2b00      	cmp	r3, #0
 800821a:	f040 8093 	bne.w	8008344 <_dtoa_r+0x8f4>
 800821e:	9b05      	ldr	r3, [sp, #20]
 8008220:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008224:	0d1b      	lsrs	r3, r3, #20
 8008226:	051b      	lsls	r3, r3, #20
 8008228:	b133      	cbz	r3, 8008238 <_dtoa_r+0x7e8>
 800822a:	9b00      	ldr	r3, [sp, #0]
 800822c:	3301      	adds	r3, #1
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	9b06      	ldr	r3, [sp, #24]
 8008232:	3301      	adds	r3, #1
 8008234:	9306      	str	r3, [sp, #24]
 8008236:	2301      	movs	r3, #1
 8008238:	9308      	str	r3, [sp, #32]
 800823a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 81b8 	beq.w	80085b2 <_dtoa_r+0xb62>
 8008242:	6923      	ldr	r3, [r4, #16]
 8008244:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008248:	6918      	ldr	r0, [r3, #16]
 800824a:	f000 fbc3 	bl	80089d4 <__hi0bits>
 800824e:	f1c0 0020 	rsb	r0, r0, #32
 8008252:	9b06      	ldr	r3, [sp, #24]
 8008254:	4418      	add	r0, r3
 8008256:	f010 001f 	ands.w	r0, r0, #31
 800825a:	f000 8082 	beq.w	8008362 <_dtoa_r+0x912>
 800825e:	f1c0 0320 	rsb	r3, r0, #32
 8008262:	2b04      	cmp	r3, #4
 8008264:	dd73      	ble.n	800834e <_dtoa_r+0x8fe>
 8008266:	9b00      	ldr	r3, [sp, #0]
 8008268:	f1c0 001c 	rsb	r0, r0, #28
 800826c:	4403      	add	r3, r0
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	9b06      	ldr	r3, [sp, #24]
 8008272:	4403      	add	r3, r0
 8008274:	4406      	add	r6, r0
 8008276:	9306      	str	r3, [sp, #24]
 8008278:	9b00      	ldr	r3, [sp, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	dd05      	ble.n	800828a <_dtoa_r+0x83a>
 800827e:	9902      	ldr	r1, [sp, #8]
 8008280:	461a      	mov	r2, r3
 8008282:	4648      	mov	r0, r9
 8008284:	f000 fd04 	bl	8008c90 <__lshift>
 8008288:	9002      	str	r0, [sp, #8]
 800828a:	9b06      	ldr	r3, [sp, #24]
 800828c:	2b00      	cmp	r3, #0
 800828e:	dd05      	ble.n	800829c <_dtoa_r+0x84c>
 8008290:	4621      	mov	r1, r4
 8008292:	461a      	mov	r2, r3
 8008294:	4648      	mov	r0, r9
 8008296:	f000 fcfb 	bl	8008c90 <__lshift>
 800829a:	4604      	mov	r4, r0
 800829c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d061      	beq.n	8008366 <_dtoa_r+0x916>
 80082a2:	9802      	ldr	r0, [sp, #8]
 80082a4:	4621      	mov	r1, r4
 80082a6:	f000 fd5f 	bl	8008d68 <__mcmp>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	da5b      	bge.n	8008366 <_dtoa_r+0x916>
 80082ae:	2300      	movs	r3, #0
 80082b0:	9902      	ldr	r1, [sp, #8]
 80082b2:	220a      	movs	r2, #10
 80082b4:	4648      	mov	r0, r9
 80082b6:	f000 fafd 	bl	80088b4 <__multadd>
 80082ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082bc:	9002      	str	r0, [sp, #8]
 80082be:	f107 38ff 	add.w	r8, r7, #4294967295
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 8177 	beq.w	80085b6 <_dtoa_r+0xb66>
 80082c8:	4629      	mov	r1, r5
 80082ca:	2300      	movs	r3, #0
 80082cc:	220a      	movs	r2, #10
 80082ce:	4648      	mov	r0, r9
 80082d0:	f000 faf0 	bl	80088b4 <__multadd>
 80082d4:	f1bb 0f00 	cmp.w	fp, #0
 80082d8:	4605      	mov	r5, r0
 80082da:	dc6f      	bgt.n	80083bc <_dtoa_r+0x96c>
 80082dc:	9b07      	ldr	r3, [sp, #28]
 80082de:	2b02      	cmp	r3, #2
 80082e0:	dc49      	bgt.n	8008376 <_dtoa_r+0x926>
 80082e2:	e06b      	b.n	80083bc <_dtoa_r+0x96c>
 80082e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80082ea:	e73c      	b.n	8008166 <_dtoa_r+0x716>
 80082ec:	3fe00000 	.word	0x3fe00000
 80082f0:	40240000 	.word	0x40240000
 80082f4:	9b03      	ldr	r3, [sp, #12]
 80082f6:	1e5c      	subs	r4, r3, #1
 80082f8:	9b08      	ldr	r3, [sp, #32]
 80082fa:	42a3      	cmp	r3, r4
 80082fc:	db09      	blt.n	8008312 <_dtoa_r+0x8c2>
 80082fe:	1b1c      	subs	r4, r3, r4
 8008300:	9b03      	ldr	r3, [sp, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	f6bf af30 	bge.w	8008168 <_dtoa_r+0x718>
 8008308:	9b00      	ldr	r3, [sp, #0]
 800830a:	9a03      	ldr	r2, [sp, #12]
 800830c:	1a9e      	subs	r6, r3, r2
 800830e:	2300      	movs	r3, #0
 8008310:	e72b      	b.n	800816a <_dtoa_r+0x71a>
 8008312:	9b08      	ldr	r3, [sp, #32]
 8008314:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008316:	9408      	str	r4, [sp, #32]
 8008318:	1ae3      	subs	r3, r4, r3
 800831a:	441a      	add	r2, r3
 800831c:	9e00      	ldr	r6, [sp, #0]
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	920d      	str	r2, [sp, #52]	@ 0x34
 8008322:	2400      	movs	r4, #0
 8008324:	e721      	b.n	800816a <_dtoa_r+0x71a>
 8008326:	9c08      	ldr	r4, [sp, #32]
 8008328:	9e00      	ldr	r6, [sp, #0]
 800832a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800832c:	e728      	b.n	8008180 <_dtoa_r+0x730>
 800832e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008332:	e751      	b.n	80081d8 <_dtoa_r+0x788>
 8008334:	9a08      	ldr	r2, [sp, #32]
 8008336:	9902      	ldr	r1, [sp, #8]
 8008338:	e750      	b.n	80081dc <_dtoa_r+0x78c>
 800833a:	f8cd 8008 	str.w	r8, [sp, #8]
 800833e:	e751      	b.n	80081e4 <_dtoa_r+0x794>
 8008340:	2300      	movs	r3, #0
 8008342:	e779      	b.n	8008238 <_dtoa_r+0x7e8>
 8008344:	9b04      	ldr	r3, [sp, #16]
 8008346:	e777      	b.n	8008238 <_dtoa_r+0x7e8>
 8008348:	2300      	movs	r3, #0
 800834a:	9308      	str	r3, [sp, #32]
 800834c:	e779      	b.n	8008242 <_dtoa_r+0x7f2>
 800834e:	d093      	beq.n	8008278 <_dtoa_r+0x828>
 8008350:	9a00      	ldr	r2, [sp, #0]
 8008352:	331c      	adds	r3, #28
 8008354:	441a      	add	r2, r3
 8008356:	9200      	str	r2, [sp, #0]
 8008358:	9a06      	ldr	r2, [sp, #24]
 800835a:	441a      	add	r2, r3
 800835c:	441e      	add	r6, r3
 800835e:	9206      	str	r2, [sp, #24]
 8008360:	e78a      	b.n	8008278 <_dtoa_r+0x828>
 8008362:	4603      	mov	r3, r0
 8008364:	e7f4      	b.n	8008350 <_dtoa_r+0x900>
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	46b8      	mov	r8, r7
 800836c:	dc20      	bgt.n	80083b0 <_dtoa_r+0x960>
 800836e:	469b      	mov	fp, r3
 8008370:	9b07      	ldr	r3, [sp, #28]
 8008372:	2b02      	cmp	r3, #2
 8008374:	dd1e      	ble.n	80083b4 <_dtoa_r+0x964>
 8008376:	f1bb 0f00 	cmp.w	fp, #0
 800837a:	f47f adb1 	bne.w	8007ee0 <_dtoa_r+0x490>
 800837e:	4621      	mov	r1, r4
 8008380:	465b      	mov	r3, fp
 8008382:	2205      	movs	r2, #5
 8008384:	4648      	mov	r0, r9
 8008386:	f000 fa95 	bl	80088b4 <__multadd>
 800838a:	4601      	mov	r1, r0
 800838c:	4604      	mov	r4, r0
 800838e:	9802      	ldr	r0, [sp, #8]
 8008390:	f000 fcea 	bl	8008d68 <__mcmp>
 8008394:	2800      	cmp	r0, #0
 8008396:	f77f ada3 	ble.w	8007ee0 <_dtoa_r+0x490>
 800839a:	4656      	mov	r6, sl
 800839c:	2331      	movs	r3, #49	@ 0x31
 800839e:	f806 3b01 	strb.w	r3, [r6], #1
 80083a2:	f108 0801 	add.w	r8, r8, #1
 80083a6:	e59f      	b.n	8007ee8 <_dtoa_r+0x498>
 80083a8:	9c03      	ldr	r4, [sp, #12]
 80083aa:	46b8      	mov	r8, r7
 80083ac:	4625      	mov	r5, r4
 80083ae:	e7f4      	b.n	800839a <_dtoa_r+0x94a>
 80083b0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80083b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 8101 	beq.w	80085be <_dtoa_r+0xb6e>
 80083bc:	2e00      	cmp	r6, #0
 80083be:	dd05      	ble.n	80083cc <_dtoa_r+0x97c>
 80083c0:	4629      	mov	r1, r5
 80083c2:	4632      	mov	r2, r6
 80083c4:	4648      	mov	r0, r9
 80083c6:	f000 fc63 	bl	8008c90 <__lshift>
 80083ca:	4605      	mov	r5, r0
 80083cc:	9b08      	ldr	r3, [sp, #32]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d05c      	beq.n	800848c <_dtoa_r+0xa3c>
 80083d2:	6869      	ldr	r1, [r5, #4]
 80083d4:	4648      	mov	r0, r9
 80083d6:	f000 fa0b 	bl	80087f0 <_Balloc>
 80083da:	4606      	mov	r6, r0
 80083dc:	b928      	cbnz	r0, 80083ea <_dtoa_r+0x99a>
 80083de:	4b82      	ldr	r3, [pc, #520]	@ (80085e8 <_dtoa_r+0xb98>)
 80083e0:	4602      	mov	r2, r0
 80083e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80083e6:	f7ff bb4a 	b.w	8007a7e <_dtoa_r+0x2e>
 80083ea:	692a      	ldr	r2, [r5, #16]
 80083ec:	3202      	adds	r2, #2
 80083ee:	0092      	lsls	r2, r2, #2
 80083f0:	f105 010c 	add.w	r1, r5, #12
 80083f4:	300c      	adds	r0, #12
 80083f6:	f002 f92f 	bl	800a658 <memcpy>
 80083fa:	2201      	movs	r2, #1
 80083fc:	4631      	mov	r1, r6
 80083fe:	4648      	mov	r0, r9
 8008400:	f000 fc46 	bl	8008c90 <__lshift>
 8008404:	f10a 0301 	add.w	r3, sl, #1
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	eb0a 030b 	add.w	r3, sl, fp
 800840e:	9308      	str	r3, [sp, #32]
 8008410:	9b04      	ldr	r3, [sp, #16]
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	462f      	mov	r7, r5
 8008418:	9306      	str	r3, [sp, #24]
 800841a:	4605      	mov	r5, r0
 800841c:	9b00      	ldr	r3, [sp, #0]
 800841e:	9802      	ldr	r0, [sp, #8]
 8008420:	4621      	mov	r1, r4
 8008422:	f103 3bff 	add.w	fp, r3, #4294967295
 8008426:	f7ff fa8b 	bl	8007940 <quorem>
 800842a:	4603      	mov	r3, r0
 800842c:	3330      	adds	r3, #48	@ 0x30
 800842e:	9003      	str	r0, [sp, #12]
 8008430:	4639      	mov	r1, r7
 8008432:	9802      	ldr	r0, [sp, #8]
 8008434:	9309      	str	r3, [sp, #36]	@ 0x24
 8008436:	f000 fc97 	bl	8008d68 <__mcmp>
 800843a:	462a      	mov	r2, r5
 800843c:	9004      	str	r0, [sp, #16]
 800843e:	4621      	mov	r1, r4
 8008440:	4648      	mov	r0, r9
 8008442:	f000 fcad 	bl	8008da0 <__mdiff>
 8008446:	68c2      	ldr	r2, [r0, #12]
 8008448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800844a:	4606      	mov	r6, r0
 800844c:	bb02      	cbnz	r2, 8008490 <_dtoa_r+0xa40>
 800844e:	4601      	mov	r1, r0
 8008450:	9802      	ldr	r0, [sp, #8]
 8008452:	f000 fc89 	bl	8008d68 <__mcmp>
 8008456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008458:	4602      	mov	r2, r0
 800845a:	4631      	mov	r1, r6
 800845c:	4648      	mov	r0, r9
 800845e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008460:	9309      	str	r3, [sp, #36]	@ 0x24
 8008462:	f000 fa05 	bl	8008870 <_Bfree>
 8008466:	9b07      	ldr	r3, [sp, #28]
 8008468:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800846a:	9e00      	ldr	r6, [sp, #0]
 800846c:	ea42 0103 	orr.w	r1, r2, r3
 8008470:	9b06      	ldr	r3, [sp, #24]
 8008472:	4319      	orrs	r1, r3
 8008474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008476:	d10d      	bne.n	8008494 <_dtoa_r+0xa44>
 8008478:	2b39      	cmp	r3, #57	@ 0x39
 800847a:	d027      	beq.n	80084cc <_dtoa_r+0xa7c>
 800847c:	9a04      	ldr	r2, [sp, #16]
 800847e:	2a00      	cmp	r2, #0
 8008480:	dd01      	ble.n	8008486 <_dtoa_r+0xa36>
 8008482:	9b03      	ldr	r3, [sp, #12]
 8008484:	3331      	adds	r3, #49	@ 0x31
 8008486:	f88b 3000 	strb.w	r3, [fp]
 800848a:	e52e      	b.n	8007eea <_dtoa_r+0x49a>
 800848c:	4628      	mov	r0, r5
 800848e:	e7b9      	b.n	8008404 <_dtoa_r+0x9b4>
 8008490:	2201      	movs	r2, #1
 8008492:	e7e2      	b.n	800845a <_dtoa_r+0xa0a>
 8008494:	9904      	ldr	r1, [sp, #16]
 8008496:	2900      	cmp	r1, #0
 8008498:	db04      	blt.n	80084a4 <_dtoa_r+0xa54>
 800849a:	9807      	ldr	r0, [sp, #28]
 800849c:	4301      	orrs	r1, r0
 800849e:	9806      	ldr	r0, [sp, #24]
 80084a0:	4301      	orrs	r1, r0
 80084a2:	d120      	bne.n	80084e6 <_dtoa_r+0xa96>
 80084a4:	2a00      	cmp	r2, #0
 80084a6:	ddee      	ble.n	8008486 <_dtoa_r+0xa36>
 80084a8:	9902      	ldr	r1, [sp, #8]
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	2201      	movs	r2, #1
 80084ae:	4648      	mov	r0, r9
 80084b0:	f000 fbee 	bl	8008c90 <__lshift>
 80084b4:	4621      	mov	r1, r4
 80084b6:	9002      	str	r0, [sp, #8]
 80084b8:	f000 fc56 	bl	8008d68 <__mcmp>
 80084bc:	2800      	cmp	r0, #0
 80084be:	9b00      	ldr	r3, [sp, #0]
 80084c0:	dc02      	bgt.n	80084c8 <_dtoa_r+0xa78>
 80084c2:	d1e0      	bne.n	8008486 <_dtoa_r+0xa36>
 80084c4:	07da      	lsls	r2, r3, #31
 80084c6:	d5de      	bpl.n	8008486 <_dtoa_r+0xa36>
 80084c8:	2b39      	cmp	r3, #57	@ 0x39
 80084ca:	d1da      	bne.n	8008482 <_dtoa_r+0xa32>
 80084cc:	2339      	movs	r3, #57	@ 0x39
 80084ce:	f88b 3000 	strb.w	r3, [fp]
 80084d2:	4633      	mov	r3, r6
 80084d4:	461e      	mov	r6, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80084dc:	2a39      	cmp	r2, #57	@ 0x39
 80084de:	d04e      	beq.n	800857e <_dtoa_r+0xb2e>
 80084e0:	3201      	adds	r2, #1
 80084e2:	701a      	strb	r2, [r3, #0]
 80084e4:	e501      	b.n	8007eea <_dtoa_r+0x49a>
 80084e6:	2a00      	cmp	r2, #0
 80084e8:	dd03      	ble.n	80084f2 <_dtoa_r+0xaa2>
 80084ea:	2b39      	cmp	r3, #57	@ 0x39
 80084ec:	d0ee      	beq.n	80084cc <_dtoa_r+0xa7c>
 80084ee:	3301      	adds	r3, #1
 80084f0:	e7c9      	b.n	8008486 <_dtoa_r+0xa36>
 80084f2:	9a00      	ldr	r2, [sp, #0]
 80084f4:	9908      	ldr	r1, [sp, #32]
 80084f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80084fa:	428a      	cmp	r2, r1
 80084fc:	d028      	beq.n	8008550 <_dtoa_r+0xb00>
 80084fe:	9902      	ldr	r1, [sp, #8]
 8008500:	2300      	movs	r3, #0
 8008502:	220a      	movs	r2, #10
 8008504:	4648      	mov	r0, r9
 8008506:	f000 f9d5 	bl	80088b4 <__multadd>
 800850a:	42af      	cmp	r7, r5
 800850c:	9002      	str	r0, [sp, #8]
 800850e:	f04f 0300 	mov.w	r3, #0
 8008512:	f04f 020a 	mov.w	r2, #10
 8008516:	4639      	mov	r1, r7
 8008518:	4648      	mov	r0, r9
 800851a:	d107      	bne.n	800852c <_dtoa_r+0xadc>
 800851c:	f000 f9ca 	bl	80088b4 <__multadd>
 8008520:	4607      	mov	r7, r0
 8008522:	4605      	mov	r5, r0
 8008524:	9b00      	ldr	r3, [sp, #0]
 8008526:	3301      	adds	r3, #1
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	e777      	b.n	800841c <_dtoa_r+0x9cc>
 800852c:	f000 f9c2 	bl	80088b4 <__multadd>
 8008530:	4629      	mov	r1, r5
 8008532:	4607      	mov	r7, r0
 8008534:	2300      	movs	r3, #0
 8008536:	220a      	movs	r2, #10
 8008538:	4648      	mov	r0, r9
 800853a:	f000 f9bb 	bl	80088b4 <__multadd>
 800853e:	4605      	mov	r5, r0
 8008540:	e7f0      	b.n	8008524 <_dtoa_r+0xad4>
 8008542:	f1bb 0f00 	cmp.w	fp, #0
 8008546:	bfcc      	ite	gt
 8008548:	465e      	movgt	r6, fp
 800854a:	2601      	movle	r6, #1
 800854c:	4456      	add	r6, sl
 800854e:	2700      	movs	r7, #0
 8008550:	9902      	ldr	r1, [sp, #8]
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	2201      	movs	r2, #1
 8008556:	4648      	mov	r0, r9
 8008558:	f000 fb9a 	bl	8008c90 <__lshift>
 800855c:	4621      	mov	r1, r4
 800855e:	9002      	str	r0, [sp, #8]
 8008560:	f000 fc02 	bl	8008d68 <__mcmp>
 8008564:	2800      	cmp	r0, #0
 8008566:	dcb4      	bgt.n	80084d2 <_dtoa_r+0xa82>
 8008568:	d102      	bne.n	8008570 <_dtoa_r+0xb20>
 800856a:	9b00      	ldr	r3, [sp, #0]
 800856c:	07db      	lsls	r3, r3, #31
 800856e:	d4b0      	bmi.n	80084d2 <_dtoa_r+0xa82>
 8008570:	4633      	mov	r3, r6
 8008572:	461e      	mov	r6, r3
 8008574:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008578:	2a30      	cmp	r2, #48	@ 0x30
 800857a:	d0fa      	beq.n	8008572 <_dtoa_r+0xb22>
 800857c:	e4b5      	b.n	8007eea <_dtoa_r+0x49a>
 800857e:	459a      	cmp	sl, r3
 8008580:	d1a8      	bne.n	80084d4 <_dtoa_r+0xa84>
 8008582:	2331      	movs	r3, #49	@ 0x31
 8008584:	f108 0801 	add.w	r8, r8, #1
 8008588:	f88a 3000 	strb.w	r3, [sl]
 800858c:	e4ad      	b.n	8007eea <_dtoa_r+0x49a>
 800858e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008590:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80085ec <_dtoa_r+0xb9c>
 8008594:	b11b      	cbz	r3, 800859e <_dtoa_r+0xb4e>
 8008596:	f10a 0308 	add.w	r3, sl, #8
 800859a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	4650      	mov	r0, sl
 80085a0:	b017      	add	sp, #92	@ 0x5c
 80085a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a6:	9b07      	ldr	r3, [sp, #28]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	f77f ae2e 	ble.w	800820a <_dtoa_r+0x7ba>
 80085ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085b0:	9308      	str	r3, [sp, #32]
 80085b2:	2001      	movs	r0, #1
 80085b4:	e64d      	b.n	8008252 <_dtoa_r+0x802>
 80085b6:	f1bb 0f00 	cmp.w	fp, #0
 80085ba:	f77f aed9 	ble.w	8008370 <_dtoa_r+0x920>
 80085be:	4656      	mov	r6, sl
 80085c0:	9802      	ldr	r0, [sp, #8]
 80085c2:	4621      	mov	r1, r4
 80085c4:	f7ff f9bc 	bl	8007940 <quorem>
 80085c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80085cc:	f806 3b01 	strb.w	r3, [r6], #1
 80085d0:	eba6 020a 	sub.w	r2, r6, sl
 80085d4:	4593      	cmp	fp, r2
 80085d6:	ddb4      	ble.n	8008542 <_dtoa_r+0xaf2>
 80085d8:	9902      	ldr	r1, [sp, #8]
 80085da:	2300      	movs	r3, #0
 80085dc:	220a      	movs	r2, #10
 80085de:	4648      	mov	r0, r9
 80085e0:	f000 f968 	bl	80088b4 <__multadd>
 80085e4:	9002      	str	r0, [sp, #8]
 80085e6:	e7eb      	b.n	80085c0 <_dtoa_r+0xb70>
 80085e8:	0800b0cd 	.word	0x0800b0cd
 80085ec:	0800b051 	.word	0x0800b051

080085f0 <_free_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4605      	mov	r5, r0
 80085f4:	2900      	cmp	r1, #0
 80085f6:	d041      	beq.n	800867c <_free_r+0x8c>
 80085f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fc:	1f0c      	subs	r4, r1, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfb8      	it	lt
 8008602:	18e4      	addlt	r4, r4, r3
 8008604:	f000 f8e8 	bl	80087d8 <__malloc_lock>
 8008608:	4a1d      	ldr	r2, [pc, #116]	@ (8008680 <_free_r+0x90>)
 800860a:	6813      	ldr	r3, [r2, #0]
 800860c:	b933      	cbnz	r3, 800861c <_free_r+0x2c>
 800860e:	6063      	str	r3, [r4, #4]
 8008610:	6014      	str	r4, [r2, #0]
 8008612:	4628      	mov	r0, r5
 8008614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008618:	f000 b8e4 	b.w	80087e4 <__malloc_unlock>
 800861c:	42a3      	cmp	r3, r4
 800861e:	d908      	bls.n	8008632 <_free_r+0x42>
 8008620:	6820      	ldr	r0, [r4, #0]
 8008622:	1821      	adds	r1, r4, r0
 8008624:	428b      	cmp	r3, r1
 8008626:	bf01      	itttt	eq
 8008628:	6819      	ldreq	r1, [r3, #0]
 800862a:	685b      	ldreq	r3, [r3, #4]
 800862c:	1809      	addeq	r1, r1, r0
 800862e:	6021      	streq	r1, [r4, #0]
 8008630:	e7ed      	b.n	800860e <_free_r+0x1e>
 8008632:	461a      	mov	r2, r3
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	b10b      	cbz	r3, 800863c <_free_r+0x4c>
 8008638:	42a3      	cmp	r3, r4
 800863a:	d9fa      	bls.n	8008632 <_free_r+0x42>
 800863c:	6811      	ldr	r1, [r2, #0]
 800863e:	1850      	adds	r0, r2, r1
 8008640:	42a0      	cmp	r0, r4
 8008642:	d10b      	bne.n	800865c <_free_r+0x6c>
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	4401      	add	r1, r0
 8008648:	1850      	adds	r0, r2, r1
 800864a:	4283      	cmp	r3, r0
 800864c:	6011      	str	r1, [r2, #0]
 800864e:	d1e0      	bne.n	8008612 <_free_r+0x22>
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	6053      	str	r3, [r2, #4]
 8008656:	4408      	add	r0, r1
 8008658:	6010      	str	r0, [r2, #0]
 800865a:	e7da      	b.n	8008612 <_free_r+0x22>
 800865c:	d902      	bls.n	8008664 <_free_r+0x74>
 800865e:	230c      	movs	r3, #12
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	e7d6      	b.n	8008612 <_free_r+0x22>
 8008664:	6820      	ldr	r0, [r4, #0]
 8008666:	1821      	adds	r1, r4, r0
 8008668:	428b      	cmp	r3, r1
 800866a:	bf04      	itt	eq
 800866c:	6819      	ldreq	r1, [r3, #0]
 800866e:	685b      	ldreq	r3, [r3, #4]
 8008670:	6063      	str	r3, [r4, #4]
 8008672:	bf04      	itt	eq
 8008674:	1809      	addeq	r1, r1, r0
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	6054      	str	r4, [r2, #4]
 800867a:	e7ca      	b.n	8008612 <_free_r+0x22>
 800867c:	bd38      	pop	{r3, r4, r5, pc}
 800867e:	bf00      	nop
 8008680:	20000554 	.word	0x20000554

08008684 <malloc>:
 8008684:	4b02      	ldr	r3, [pc, #8]	@ (8008690 <malloc+0xc>)
 8008686:	4601      	mov	r1, r0
 8008688:	6818      	ldr	r0, [r3, #0]
 800868a:	f000 b825 	b.w	80086d8 <_malloc_r>
 800868e:	bf00      	nop
 8008690:	20000018 	.word	0x20000018

08008694 <sbrk_aligned>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	4e0f      	ldr	r6, [pc, #60]	@ (80086d4 <sbrk_aligned+0x40>)
 8008698:	460c      	mov	r4, r1
 800869a:	6831      	ldr	r1, [r6, #0]
 800869c:	4605      	mov	r5, r0
 800869e:	b911      	cbnz	r1, 80086a6 <sbrk_aligned+0x12>
 80086a0:	f001 ffca 	bl	800a638 <_sbrk_r>
 80086a4:	6030      	str	r0, [r6, #0]
 80086a6:	4621      	mov	r1, r4
 80086a8:	4628      	mov	r0, r5
 80086aa:	f001 ffc5 	bl	800a638 <_sbrk_r>
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	d103      	bne.n	80086ba <sbrk_aligned+0x26>
 80086b2:	f04f 34ff 	mov.w	r4, #4294967295
 80086b6:	4620      	mov	r0, r4
 80086b8:	bd70      	pop	{r4, r5, r6, pc}
 80086ba:	1cc4      	adds	r4, r0, #3
 80086bc:	f024 0403 	bic.w	r4, r4, #3
 80086c0:	42a0      	cmp	r0, r4
 80086c2:	d0f8      	beq.n	80086b6 <sbrk_aligned+0x22>
 80086c4:	1a21      	subs	r1, r4, r0
 80086c6:	4628      	mov	r0, r5
 80086c8:	f001 ffb6 	bl	800a638 <_sbrk_r>
 80086cc:	3001      	adds	r0, #1
 80086ce:	d1f2      	bne.n	80086b6 <sbrk_aligned+0x22>
 80086d0:	e7ef      	b.n	80086b2 <sbrk_aligned+0x1e>
 80086d2:	bf00      	nop
 80086d4:	20000550 	.word	0x20000550

080086d8 <_malloc_r>:
 80086d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086dc:	1ccd      	adds	r5, r1, #3
 80086de:	f025 0503 	bic.w	r5, r5, #3
 80086e2:	3508      	adds	r5, #8
 80086e4:	2d0c      	cmp	r5, #12
 80086e6:	bf38      	it	cc
 80086e8:	250c      	movcc	r5, #12
 80086ea:	2d00      	cmp	r5, #0
 80086ec:	4606      	mov	r6, r0
 80086ee:	db01      	blt.n	80086f4 <_malloc_r+0x1c>
 80086f0:	42a9      	cmp	r1, r5
 80086f2:	d904      	bls.n	80086fe <_malloc_r+0x26>
 80086f4:	230c      	movs	r3, #12
 80086f6:	6033      	str	r3, [r6, #0]
 80086f8:	2000      	movs	r0, #0
 80086fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087d4 <_malloc_r+0xfc>
 8008702:	f000 f869 	bl	80087d8 <__malloc_lock>
 8008706:	f8d8 3000 	ldr.w	r3, [r8]
 800870a:	461c      	mov	r4, r3
 800870c:	bb44      	cbnz	r4, 8008760 <_malloc_r+0x88>
 800870e:	4629      	mov	r1, r5
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff ffbf 	bl	8008694 <sbrk_aligned>
 8008716:	1c43      	adds	r3, r0, #1
 8008718:	4604      	mov	r4, r0
 800871a:	d158      	bne.n	80087ce <_malloc_r+0xf6>
 800871c:	f8d8 4000 	ldr.w	r4, [r8]
 8008720:	4627      	mov	r7, r4
 8008722:	2f00      	cmp	r7, #0
 8008724:	d143      	bne.n	80087ae <_malloc_r+0xd6>
 8008726:	2c00      	cmp	r4, #0
 8008728:	d04b      	beq.n	80087c2 <_malloc_r+0xea>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	4639      	mov	r1, r7
 800872e:	4630      	mov	r0, r6
 8008730:	eb04 0903 	add.w	r9, r4, r3
 8008734:	f001 ff80 	bl	800a638 <_sbrk_r>
 8008738:	4581      	cmp	r9, r0
 800873a:	d142      	bne.n	80087c2 <_malloc_r+0xea>
 800873c:	6821      	ldr	r1, [r4, #0]
 800873e:	1a6d      	subs	r5, r5, r1
 8008740:	4629      	mov	r1, r5
 8008742:	4630      	mov	r0, r6
 8008744:	f7ff ffa6 	bl	8008694 <sbrk_aligned>
 8008748:	3001      	adds	r0, #1
 800874a:	d03a      	beq.n	80087c2 <_malloc_r+0xea>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	442b      	add	r3, r5
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	f8d8 3000 	ldr.w	r3, [r8]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	bb62      	cbnz	r2, 80087b4 <_malloc_r+0xdc>
 800875a:	f8c8 7000 	str.w	r7, [r8]
 800875e:	e00f      	b.n	8008780 <_malloc_r+0xa8>
 8008760:	6822      	ldr	r2, [r4, #0]
 8008762:	1b52      	subs	r2, r2, r5
 8008764:	d420      	bmi.n	80087a8 <_malloc_r+0xd0>
 8008766:	2a0b      	cmp	r2, #11
 8008768:	d917      	bls.n	800879a <_malloc_r+0xc2>
 800876a:	1961      	adds	r1, r4, r5
 800876c:	42a3      	cmp	r3, r4
 800876e:	6025      	str	r5, [r4, #0]
 8008770:	bf18      	it	ne
 8008772:	6059      	strne	r1, [r3, #4]
 8008774:	6863      	ldr	r3, [r4, #4]
 8008776:	bf08      	it	eq
 8008778:	f8c8 1000 	streq.w	r1, [r8]
 800877c:	5162      	str	r2, [r4, r5]
 800877e:	604b      	str	r3, [r1, #4]
 8008780:	4630      	mov	r0, r6
 8008782:	f000 f82f 	bl	80087e4 <__malloc_unlock>
 8008786:	f104 000b 	add.w	r0, r4, #11
 800878a:	1d23      	adds	r3, r4, #4
 800878c:	f020 0007 	bic.w	r0, r0, #7
 8008790:	1ac2      	subs	r2, r0, r3
 8008792:	bf1c      	itt	ne
 8008794:	1a1b      	subne	r3, r3, r0
 8008796:	50a3      	strne	r3, [r4, r2]
 8008798:	e7af      	b.n	80086fa <_malloc_r+0x22>
 800879a:	6862      	ldr	r2, [r4, #4]
 800879c:	42a3      	cmp	r3, r4
 800879e:	bf0c      	ite	eq
 80087a0:	f8c8 2000 	streq.w	r2, [r8]
 80087a4:	605a      	strne	r2, [r3, #4]
 80087a6:	e7eb      	b.n	8008780 <_malloc_r+0xa8>
 80087a8:	4623      	mov	r3, r4
 80087aa:	6864      	ldr	r4, [r4, #4]
 80087ac:	e7ae      	b.n	800870c <_malloc_r+0x34>
 80087ae:	463c      	mov	r4, r7
 80087b0:	687f      	ldr	r7, [r7, #4]
 80087b2:	e7b6      	b.n	8008722 <_malloc_r+0x4a>
 80087b4:	461a      	mov	r2, r3
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	42a3      	cmp	r3, r4
 80087ba:	d1fb      	bne.n	80087b4 <_malloc_r+0xdc>
 80087bc:	2300      	movs	r3, #0
 80087be:	6053      	str	r3, [r2, #4]
 80087c0:	e7de      	b.n	8008780 <_malloc_r+0xa8>
 80087c2:	230c      	movs	r3, #12
 80087c4:	6033      	str	r3, [r6, #0]
 80087c6:	4630      	mov	r0, r6
 80087c8:	f000 f80c 	bl	80087e4 <__malloc_unlock>
 80087cc:	e794      	b.n	80086f8 <_malloc_r+0x20>
 80087ce:	6005      	str	r5, [r0, #0]
 80087d0:	e7d6      	b.n	8008780 <_malloc_r+0xa8>
 80087d2:	bf00      	nop
 80087d4:	20000554 	.word	0x20000554

080087d8 <__malloc_lock>:
 80087d8:	4801      	ldr	r0, [pc, #4]	@ (80087e0 <__malloc_lock+0x8>)
 80087da:	f7ff b8a8 	b.w	800792e <__retarget_lock_acquire_recursive>
 80087de:	bf00      	nop
 80087e0:	2000054c 	.word	0x2000054c

080087e4 <__malloc_unlock>:
 80087e4:	4801      	ldr	r0, [pc, #4]	@ (80087ec <__malloc_unlock+0x8>)
 80087e6:	f7ff b8a3 	b.w	8007930 <__retarget_lock_release_recursive>
 80087ea:	bf00      	nop
 80087ec:	2000054c 	.word	0x2000054c

080087f0 <_Balloc>:
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	69c6      	ldr	r6, [r0, #28]
 80087f4:	4604      	mov	r4, r0
 80087f6:	460d      	mov	r5, r1
 80087f8:	b976      	cbnz	r6, 8008818 <_Balloc+0x28>
 80087fa:	2010      	movs	r0, #16
 80087fc:	f7ff ff42 	bl	8008684 <malloc>
 8008800:	4602      	mov	r2, r0
 8008802:	61e0      	str	r0, [r4, #28]
 8008804:	b920      	cbnz	r0, 8008810 <_Balloc+0x20>
 8008806:	4b18      	ldr	r3, [pc, #96]	@ (8008868 <_Balloc+0x78>)
 8008808:	4818      	ldr	r0, [pc, #96]	@ (800886c <_Balloc+0x7c>)
 800880a:	216b      	movs	r1, #107	@ 0x6b
 800880c:	f001 ff3c 	bl	800a688 <__assert_func>
 8008810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008814:	6006      	str	r6, [r0, #0]
 8008816:	60c6      	str	r6, [r0, #12]
 8008818:	69e6      	ldr	r6, [r4, #28]
 800881a:	68f3      	ldr	r3, [r6, #12]
 800881c:	b183      	cbz	r3, 8008840 <_Balloc+0x50>
 800881e:	69e3      	ldr	r3, [r4, #28]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008826:	b9b8      	cbnz	r0, 8008858 <_Balloc+0x68>
 8008828:	2101      	movs	r1, #1
 800882a:	fa01 f605 	lsl.w	r6, r1, r5
 800882e:	1d72      	adds	r2, r6, #5
 8008830:	0092      	lsls	r2, r2, #2
 8008832:	4620      	mov	r0, r4
 8008834:	f001 ff46 	bl	800a6c4 <_calloc_r>
 8008838:	b160      	cbz	r0, 8008854 <_Balloc+0x64>
 800883a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800883e:	e00e      	b.n	800885e <_Balloc+0x6e>
 8008840:	2221      	movs	r2, #33	@ 0x21
 8008842:	2104      	movs	r1, #4
 8008844:	4620      	mov	r0, r4
 8008846:	f001 ff3d 	bl	800a6c4 <_calloc_r>
 800884a:	69e3      	ldr	r3, [r4, #28]
 800884c:	60f0      	str	r0, [r6, #12]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e4      	bne.n	800881e <_Balloc+0x2e>
 8008854:	2000      	movs	r0, #0
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	6802      	ldr	r2, [r0, #0]
 800885a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800885e:	2300      	movs	r3, #0
 8008860:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008864:	e7f7      	b.n	8008856 <_Balloc+0x66>
 8008866:	bf00      	nop
 8008868:	0800b05e 	.word	0x0800b05e
 800886c:	0800b0de 	.word	0x0800b0de

08008870 <_Bfree>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	69c6      	ldr	r6, [r0, #28]
 8008874:	4605      	mov	r5, r0
 8008876:	460c      	mov	r4, r1
 8008878:	b976      	cbnz	r6, 8008898 <_Bfree+0x28>
 800887a:	2010      	movs	r0, #16
 800887c:	f7ff ff02 	bl	8008684 <malloc>
 8008880:	4602      	mov	r2, r0
 8008882:	61e8      	str	r0, [r5, #28]
 8008884:	b920      	cbnz	r0, 8008890 <_Bfree+0x20>
 8008886:	4b09      	ldr	r3, [pc, #36]	@ (80088ac <_Bfree+0x3c>)
 8008888:	4809      	ldr	r0, [pc, #36]	@ (80088b0 <_Bfree+0x40>)
 800888a:	218f      	movs	r1, #143	@ 0x8f
 800888c:	f001 fefc 	bl	800a688 <__assert_func>
 8008890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008894:	6006      	str	r6, [r0, #0]
 8008896:	60c6      	str	r6, [r0, #12]
 8008898:	b13c      	cbz	r4, 80088aa <_Bfree+0x3a>
 800889a:	69eb      	ldr	r3, [r5, #28]
 800889c:	6862      	ldr	r2, [r4, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088a4:	6021      	str	r1, [r4, #0]
 80088a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088aa:	bd70      	pop	{r4, r5, r6, pc}
 80088ac:	0800b05e 	.word	0x0800b05e
 80088b0:	0800b0de 	.word	0x0800b0de

080088b4 <__multadd>:
 80088b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b8:	690d      	ldr	r5, [r1, #16]
 80088ba:	4607      	mov	r7, r0
 80088bc:	460c      	mov	r4, r1
 80088be:	461e      	mov	r6, r3
 80088c0:	f101 0c14 	add.w	ip, r1, #20
 80088c4:	2000      	movs	r0, #0
 80088c6:	f8dc 3000 	ldr.w	r3, [ip]
 80088ca:	b299      	uxth	r1, r3
 80088cc:	fb02 6101 	mla	r1, r2, r1, r6
 80088d0:	0c1e      	lsrs	r6, r3, #16
 80088d2:	0c0b      	lsrs	r3, r1, #16
 80088d4:	fb02 3306 	mla	r3, r2, r6, r3
 80088d8:	b289      	uxth	r1, r1
 80088da:	3001      	adds	r0, #1
 80088dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088e0:	4285      	cmp	r5, r0
 80088e2:	f84c 1b04 	str.w	r1, [ip], #4
 80088e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088ea:	dcec      	bgt.n	80088c6 <__multadd+0x12>
 80088ec:	b30e      	cbz	r6, 8008932 <__multadd+0x7e>
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	42ab      	cmp	r3, r5
 80088f2:	dc19      	bgt.n	8008928 <__multadd+0x74>
 80088f4:	6861      	ldr	r1, [r4, #4]
 80088f6:	4638      	mov	r0, r7
 80088f8:	3101      	adds	r1, #1
 80088fa:	f7ff ff79 	bl	80087f0 <_Balloc>
 80088fe:	4680      	mov	r8, r0
 8008900:	b928      	cbnz	r0, 800890e <__multadd+0x5a>
 8008902:	4602      	mov	r2, r0
 8008904:	4b0c      	ldr	r3, [pc, #48]	@ (8008938 <__multadd+0x84>)
 8008906:	480d      	ldr	r0, [pc, #52]	@ (800893c <__multadd+0x88>)
 8008908:	21ba      	movs	r1, #186	@ 0xba
 800890a:	f001 febd 	bl	800a688 <__assert_func>
 800890e:	6922      	ldr	r2, [r4, #16]
 8008910:	3202      	adds	r2, #2
 8008912:	f104 010c 	add.w	r1, r4, #12
 8008916:	0092      	lsls	r2, r2, #2
 8008918:	300c      	adds	r0, #12
 800891a:	f001 fe9d 	bl	800a658 <memcpy>
 800891e:	4621      	mov	r1, r4
 8008920:	4638      	mov	r0, r7
 8008922:	f7ff ffa5 	bl	8008870 <_Bfree>
 8008926:	4644      	mov	r4, r8
 8008928:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800892c:	3501      	adds	r5, #1
 800892e:	615e      	str	r6, [r3, #20]
 8008930:	6125      	str	r5, [r4, #16]
 8008932:	4620      	mov	r0, r4
 8008934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008938:	0800b0cd 	.word	0x0800b0cd
 800893c:	0800b0de 	.word	0x0800b0de

08008940 <__s2b>:
 8008940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008944:	460c      	mov	r4, r1
 8008946:	4615      	mov	r5, r2
 8008948:	461f      	mov	r7, r3
 800894a:	2209      	movs	r2, #9
 800894c:	3308      	adds	r3, #8
 800894e:	4606      	mov	r6, r0
 8008950:	fb93 f3f2 	sdiv	r3, r3, r2
 8008954:	2100      	movs	r1, #0
 8008956:	2201      	movs	r2, #1
 8008958:	429a      	cmp	r2, r3
 800895a:	db09      	blt.n	8008970 <__s2b+0x30>
 800895c:	4630      	mov	r0, r6
 800895e:	f7ff ff47 	bl	80087f0 <_Balloc>
 8008962:	b940      	cbnz	r0, 8008976 <__s2b+0x36>
 8008964:	4602      	mov	r2, r0
 8008966:	4b19      	ldr	r3, [pc, #100]	@ (80089cc <__s2b+0x8c>)
 8008968:	4819      	ldr	r0, [pc, #100]	@ (80089d0 <__s2b+0x90>)
 800896a:	21d3      	movs	r1, #211	@ 0xd3
 800896c:	f001 fe8c 	bl	800a688 <__assert_func>
 8008970:	0052      	lsls	r2, r2, #1
 8008972:	3101      	adds	r1, #1
 8008974:	e7f0      	b.n	8008958 <__s2b+0x18>
 8008976:	9b08      	ldr	r3, [sp, #32]
 8008978:	6143      	str	r3, [r0, #20]
 800897a:	2d09      	cmp	r5, #9
 800897c:	f04f 0301 	mov.w	r3, #1
 8008980:	6103      	str	r3, [r0, #16]
 8008982:	dd16      	ble.n	80089b2 <__s2b+0x72>
 8008984:	f104 0909 	add.w	r9, r4, #9
 8008988:	46c8      	mov	r8, r9
 800898a:	442c      	add	r4, r5
 800898c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008990:	4601      	mov	r1, r0
 8008992:	3b30      	subs	r3, #48	@ 0x30
 8008994:	220a      	movs	r2, #10
 8008996:	4630      	mov	r0, r6
 8008998:	f7ff ff8c 	bl	80088b4 <__multadd>
 800899c:	45a0      	cmp	r8, r4
 800899e:	d1f5      	bne.n	800898c <__s2b+0x4c>
 80089a0:	f1a5 0408 	sub.w	r4, r5, #8
 80089a4:	444c      	add	r4, r9
 80089a6:	1b2d      	subs	r5, r5, r4
 80089a8:	1963      	adds	r3, r4, r5
 80089aa:	42bb      	cmp	r3, r7
 80089ac:	db04      	blt.n	80089b8 <__s2b+0x78>
 80089ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089b2:	340a      	adds	r4, #10
 80089b4:	2509      	movs	r5, #9
 80089b6:	e7f6      	b.n	80089a6 <__s2b+0x66>
 80089b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089bc:	4601      	mov	r1, r0
 80089be:	3b30      	subs	r3, #48	@ 0x30
 80089c0:	220a      	movs	r2, #10
 80089c2:	4630      	mov	r0, r6
 80089c4:	f7ff ff76 	bl	80088b4 <__multadd>
 80089c8:	e7ee      	b.n	80089a8 <__s2b+0x68>
 80089ca:	bf00      	nop
 80089cc:	0800b0cd 	.word	0x0800b0cd
 80089d0:	0800b0de 	.word	0x0800b0de

080089d4 <__hi0bits>:
 80089d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80089d8:	4603      	mov	r3, r0
 80089da:	bf36      	itet	cc
 80089dc:	0403      	lslcc	r3, r0, #16
 80089de:	2000      	movcs	r0, #0
 80089e0:	2010      	movcc	r0, #16
 80089e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089e6:	bf3c      	itt	cc
 80089e8:	021b      	lslcc	r3, r3, #8
 80089ea:	3008      	addcc	r0, #8
 80089ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089f0:	bf3c      	itt	cc
 80089f2:	011b      	lslcc	r3, r3, #4
 80089f4:	3004      	addcc	r0, #4
 80089f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089fa:	bf3c      	itt	cc
 80089fc:	009b      	lslcc	r3, r3, #2
 80089fe:	3002      	addcc	r0, #2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	db05      	blt.n	8008a10 <__hi0bits+0x3c>
 8008a04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a08:	f100 0001 	add.w	r0, r0, #1
 8008a0c:	bf08      	it	eq
 8008a0e:	2020      	moveq	r0, #32
 8008a10:	4770      	bx	lr

08008a12 <__lo0bits>:
 8008a12:	6803      	ldr	r3, [r0, #0]
 8008a14:	4602      	mov	r2, r0
 8008a16:	f013 0007 	ands.w	r0, r3, #7
 8008a1a:	d00b      	beq.n	8008a34 <__lo0bits+0x22>
 8008a1c:	07d9      	lsls	r1, r3, #31
 8008a1e:	d421      	bmi.n	8008a64 <__lo0bits+0x52>
 8008a20:	0798      	lsls	r0, r3, #30
 8008a22:	bf49      	itett	mi
 8008a24:	085b      	lsrmi	r3, r3, #1
 8008a26:	089b      	lsrpl	r3, r3, #2
 8008a28:	2001      	movmi	r0, #1
 8008a2a:	6013      	strmi	r3, [r2, #0]
 8008a2c:	bf5c      	itt	pl
 8008a2e:	6013      	strpl	r3, [r2, #0]
 8008a30:	2002      	movpl	r0, #2
 8008a32:	4770      	bx	lr
 8008a34:	b299      	uxth	r1, r3
 8008a36:	b909      	cbnz	r1, 8008a3c <__lo0bits+0x2a>
 8008a38:	0c1b      	lsrs	r3, r3, #16
 8008a3a:	2010      	movs	r0, #16
 8008a3c:	b2d9      	uxtb	r1, r3
 8008a3e:	b909      	cbnz	r1, 8008a44 <__lo0bits+0x32>
 8008a40:	3008      	adds	r0, #8
 8008a42:	0a1b      	lsrs	r3, r3, #8
 8008a44:	0719      	lsls	r1, r3, #28
 8008a46:	bf04      	itt	eq
 8008a48:	091b      	lsreq	r3, r3, #4
 8008a4a:	3004      	addeq	r0, #4
 8008a4c:	0799      	lsls	r1, r3, #30
 8008a4e:	bf04      	itt	eq
 8008a50:	089b      	lsreq	r3, r3, #2
 8008a52:	3002      	addeq	r0, #2
 8008a54:	07d9      	lsls	r1, r3, #31
 8008a56:	d403      	bmi.n	8008a60 <__lo0bits+0x4e>
 8008a58:	085b      	lsrs	r3, r3, #1
 8008a5a:	f100 0001 	add.w	r0, r0, #1
 8008a5e:	d003      	beq.n	8008a68 <__lo0bits+0x56>
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	4770      	bx	lr
 8008a64:	2000      	movs	r0, #0
 8008a66:	4770      	bx	lr
 8008a68:	2020      	movs	r0, #32
 8008a6a:	4770      	bx	lr

08008a6c <__i2b>:
 8008a6c:	b510      	push	{r4, lr}
 8008a6e:	460c      	mov	r4, r1
 8008a70:	2101      	movs	r1, #1
 8008a72:	f7ff febd 	bl	80087f0 <_Balloc>
 8008a76:	4602      	mov	r2, r0
 8008a78:	b928      	cbnz	r0, 8008a86 <__i2b+0x1a>
 8008a7a:	4b05      	ldr	r3, [pc, #20]	@ (8008a90 <__i2b+0x24>)
 8008a7c:	4805      	ldr	r0, [pc, #20]	@ (8008a94 <__i2b+0x28>)
 8008a7e:	f240 1145 	movw	r1, #325	@ 0x145
 8008a82:	f001 fe01 	bl	800a688 <__assert_func>
 8008a86:	2301      	movs	r3, #1
 8008a88:	6144      	str	r4, [r0, #20]
 8008a8a:	6103      	str	r3, [r0, #16]
 8008a8c:	bd10      	pop	{r4, pc}
 8008a8e:	bf00      	nop
 8008a90:	0800b0cd 	.word	0x0800b0cd
 8008a94:	0800b0de 	.word	0x0800b0de

08008a98 <__multiply>:
 8008a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9c:	4617      	mov	r7, r2
 8008a9e:	690a      	ldr	r2, [r1, #16]
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	bfa8      	it	ge
 8008aa6:	463b      	movge	r3, r7
 8008aa8:	4689      	mov	r9, r1
 8008aaa:	bfa4      	itt	ge
 8008aac:	460f      	movge	r7, r1
 8008aae:	4699      	movge	r9, r3
 8008ab0:	693d      	ldr	r5, [r7, #16]
 8008ab2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	6879      	ldr	r1, [r7, #4]
 8008aba:	eb05 060a 	add.w	r6, r5, sl
 8008abe:	42b3      	cmp	r3, r6
 8008ac0:	b085      	sub	sp, #20
 8008ac2:	bfb8      	it	lt
 8008ac4:	3101      	addlt	r1, #1
 8008ac6:	f7ff fe93 	bl	80087f0 <_Balloc>
 8008aca:	b930      	cbnz	r0, 8008ada <__multiply+0x42>
 8008acc:	4602      	mov	r2, r0
 8008ace:	4b41      	ldr	r3, [pc, #260]	@ (8008bd4 <__multiply+0x13c>)
 8008ad0:	4841      	ldr	r0, [pc, #260]	@ (8008bd8 <__multiply+0x140>)
 8008ad2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ad6:	f001 fdd7 	bl	800a688 <__assert_func>
 8008ada:	f100 0414 	add.w	r4, r0, #20
 8008ade:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008ae2:	4623      	mov	r3, r4
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	4573      	cmp	r3, lr
 8008ae8:	d320      	bcc.n	8008b2c <__multiply+0x94>
 8008aea:	f107 0814 	add.w	r8, r7, #20
 8008aee:	f109 0114 	add.w	r1, r9, #20
 8008af2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008af6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008afa:	9302      	str	r3, [sp, #8]
 8008afc:	1beb      	subs	r3, r5, r7
 8008afe:	3b15      	subs	r3, #21
 8008b00:	f023 0303 	bic.w	r3, r3, #3
 8008b04:	3304      	adds	r3, #4
 8008b06:	3715      	adds	r7, #21
 8008b08:	42bd      	cmp	r5, r7
 8008b0a:	bf38      	it	cc
 8008b0c:	2304      	movcc	r3, #4
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	9b02      	ldr	r3, [sp, #8]
 8008b12:	9103      	str	r1, [sp, #12]
 8008b14:	428b      	cmp	r3, r1
 8008b16:	d80c      	bhi.n	8008b32 <__multiply+0x9a>
 8008b18:	2e00      	cmp	r6, #0
 8008b1a:	dd03      	ble.n	8008b24 <__multiply+0x8c>
 8008b1c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d055      	beq.n	8008bd0 <__multiply+0x138>
 8008b24:	6106      	str	r6, [r0, #16]
 8008b26:	b005      	add	sp, #20
 8008b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2c:	f843 2b04 	str.w	r2, [r3], #4
 8008b30:	e7d9      	b.n	8008ae6 <__multiply+0x4e>
 8008b32:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b36:	f1ba 0f00 	cmp.w	sl, #0
 8008b3a:	d01f      	beq.n	8008b7c <__multiply+0xe4>
 8008b3c:	46c4      	mov	ip, r8
 8008b3e:	46a1      	mov	r9, r4
 8008b40:	2700      	movs	r7, #0
 8008b42:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b46:	f8d9 3000 	ldr.w	r3, [r9]
 8008b4a:	fa1f fb82 	uxth.w	fp, r2
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b54:	443b      	add	r3, r7
 8008b56:	f8d9 7000 	ldr.w	r7, [r9]
 8008b5a:	0c12      	lsrs	r2, r2, #16
 8008b5c:	0c3f      	lsrs	r7, r7, #16
 8008b5e:	fb0a 7202 	mla	r2, sl, r2, r7
 8008b62:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b6c:	4565      	cmp	r5, ip
 8008b6e:	f849 3b04 	str.w	r3, [r9], #4
 8008b72:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008b76:	d8e4      	bhi.n	8008b42 <__multiply+0xaa>
 8008b78:	9b01      	ldr	r3, [sp, #4]
 8008b7a:	50e7      	str	r7, [r4, r3]
 8008b7c:	9b03      	ldr	r3, [sp, #12]
 8008b7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b82:	3104      	adds	r1, #4
 8008b84:	f1b9 0f00 	cmp.w	r9, #0
 8008b88:	d020      	beq.n	8008bcc <__multiply+0x134>
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	4647      	mov	r7, r8
 8008b8e:	46a4      	mov	ip, r4
 8008b90:	f04f 0a00 	mov.w	sl, #0
 8008b94:	f8b7 b000 	ldrh.w	fp, [r7]
 8008b98:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008b9c:	fb09 220b 	mla	r2, r9, fp, r2
 8008ba0:	4452      	add	r2, sl
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ba8:	f84c 3b04 	str.w	r3, [ip], #4
 8008bac:	f857 3b04 	ldr.w	r3, [r7], #4
 8008bb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bb4:	f8bc 3000 	ldrh.w	r3, [ip]
 8008bb8:	fb09 330a 	mla	r3, r9, sl, r3
 8008bbc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008bc0:	42bd      	cmp	r5, r7
 8008bc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bc6:	d8e5      	bhi.n	8008b94 <__multiply+0xfc>
 8008bc8:	9a01      	ldr	r2, [sp, #4]
 8008bca:	50a3      	str	r3, [r4, r2]
 8008bcc:	3404      	adds	r4, #4
 8008bce:	e79f      	b.n	8008b10 <__multiply+0x78>
 8008bd0:	3e01      	subs	r6, #1
 8008bd2:	e7a1      	b.n	8008b18 <__multiply+0x80>
 8008bd4:	0800b0cd 	.word	0x0800b0cd
 8008bd8:	0800b0de 	.word	0x0800b0de

08008bdc <__pow5mult>:
 8008bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be0:	4615      	mov	r5, r2
 8008be2:	f012 0203 	ands.w	r2, r2, #3
 8008be6:	4607      	mov	r7, r0
 8008be8:	460e      	mov	r6, r1
 8008bea:	d007      	beq.n	8008bfc <__pow5mult+0x20>
 8008bec:	4c25      	ldr	r4, [pc, #148]	@ (8008c84 <__pow5mult+0xa8>)
 8008bee:	3a01      	subs	r2, #1
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bf6:	f7ff fe5d 	bl	80088b4 <__multadd>
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	10ad      	asrs	r5, r5, #2
 8008bfe:	d03d      	beq.n	8008c7c <__pow5mult+0xa0>
 8008c00:	69fc      	ldr	r4, [r7, #28]
 8008c02:	b97c      	cbnz	r4, 8008c24 <__pow5mult+0x48>
 8008c04:	2010      	movs	r0, #16
 8008c06:	f7ff fd3d 	bl	8008684 <malloc>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	61f8      	str	r0, [r7, #28]
 8008c0e:	b928      	cbnz	r0, 8008c1c <__pow5mult+0x40>
 8008c10:	4b1d      	ldr	r3, [pc, #116]	@ (8008c88 <__pow5mult+0xac>)
 8008c12:	481e      	ldr	r0, [pc, #120]	@ (8008c8c <__pow5mult+0xb0>)
 8008c14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c18:	f001 fd36 	bl	800a688 <__assert_func>
 8008c1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c20:	6004      	str	r4, [r0, #0]
 8008c22:	60c4      	str	r4, [r0, #12]
 8008c24:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c2c:	b94c      	cbnz	r4, 8008c42 <__pow5mult+0x66>
 8008c2e:	f240 2171 	movw	r1, #625	@ 0x271
 8008c32:	4638      	mov	r0, r7
 8008c34:	f7ff ff1a 	bl	8008a6c <__i2b>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c3e:	4604      	mov	r4, r0
 8008c40:	6003      	str	r3, [r0, #0]
 8008c42:	f04f 0900 	mov.w	r9, #0
 8008c46:	07eb      	lsls	r3, r5, #31
 8008c48:	d50a      	bpl.n	8008c60 <__pow5mult+0x84>
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	4638      	mov	r0, r7
 8008c50:	f7ff ff22 	bl	8008a98 <__multiply>
 8008c54:	4631      	mov	r1, r6
 8008c56:	4680      	mov	r8, r0
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f7ff fe09 	bl	8008870 <_Bfree>
 8008c5e:	4646      	mov	r6, r8
 8008c60:	106d      	asrs	r5, r5, #1
 8008c62:	d00b      	beq.n	8008c7c <__pow5mult+0xa0>
 8008c64:	6820      	ldr	r0, [r4, #0]
 8008c66:	b938      	cbnz	r0, 8008c78 <__pow5mult+0x9c>
 8008c68:	4622      	mov	r2, r4
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4638      	mov	r0, r7
 8008c6e:	f7ff ff13 	bl	8008a98 <__multiply>
 8008c72:	6020      	str	r0, [r4, #0]
 8008c74:	f8c0 9000 	str.w	r9, [r0]
 8008c78:	4604      	mov	r4, r0
 8008c7a:	e7e4      	b.n	8008c46 <__pow5mult+0x6a>
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c82:	bf00      	nop
 8008c84:	0800b1f0 	.word	0x0800b1f0
 8008c88:	0800b05e 	.word	0x0800b05e
 8008c8c:	0800b0de 	.word	0x0800b0de

08008c90 <__lshift>:
 8008c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c94:	460c      	mov	r4, r1
 8008c96:	6849      	ldr	r1, [r1, #4]
 8008c98:	6923      	ldr	r3, [r4, #16]
 8008c9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c9e:	68a3      	ldr	r3, [r4, #8]
 8008ca0:	4607      	mov	r7, r0
 8008ca2:	4691      	mov	r9, r2
 8008ca4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ca8:	f108 0601 	add.w	r6, r8, #1
 8008cac:	42b3      	cmp	r3, r6
 8008cae:	db0b      	blt.n	8008cc8 <__lshift+0x38>
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f7ff fd9d 	bl	80087f0 <_Balloc>
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	b948      	cbnz	r0, 8008cce <__lshift+0x3e>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	4b28      	ldr	r3, [pc, #160]	@ (8008d60 <__lshift+0xd0>)
 8008cbe:	4829      	ldr	r0, [pc, #164]	@ (8008d64 <__lshift+0xd4>)
 8008cc0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008cc4:	f001 fce0 	bl	800a688 <__assert_func>
 8008cc8:	3101      	adds	r1, #1
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	e7ee      	b.n	8008cac <__lshift+0x1c>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f100 0114 	add.w	r1, r0, #20
 8008cd4:	f100 0210 	add.w	r2, r0, #16
 8008cd8:	4618      	mov	r0, r3
 8008cda:	4553      	cmp	r3, sl
 8008cdc:	db33      	blt.n	8008d46 <__lshift+0xb6>
 8008cde:	6920      	ldr	r0, [r4, #16]
 8008ce0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ce4:	f104 0314 	add.w	r3, r4, #20
 8008ce8:	f019 091f 	ands.w	r9, r9, #31
 8008cec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cf4:	d02b      	beq.n	8008d4e <__lshift+0xbe>
 8008cf6:	f1c9 0e20 	rsb	lr, r9, #32
 8008cfa:	468a      	mov	sl, r1
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	6818      	ldr	r0, [r3, #0]
 8008d00:	fa00 f009 	lsl.w	r0, r0, r9
 8008d04:	4310      	orrs	r0, r2
 8008d06:	f84a 0b04 	str.w	r0, [sl], #4
 8008d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d0e:	459c      	cmp	ip, r3
 8008d10:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d14:	d8f3      	bhi.n	8008cfe <__lshift+0x6e>
 8008d16:	ebac 0304 	sub.w	r3, ip, r4
 8008d1a:	3b15      	subs	r3, #21
 8008d1c:	f023 0303 	bic.w	r3, r3, #3
 8008d20:	3304      	adds	r3, #4
 8008d22:	f104 0015 	add.w	r0, r4, #21
 8008d26:	4560      	cmp	r0, ip
 8008d28:	bf88      	it	hi
 8008d2a:	2304      	movhi	r3, #4
 8008d2c:	50ca      	str	r2, [r1, r3]
 8008d2e:	b10a      	cbz	r2, 8008d34 <__lshift+0xa4>
 8008d30:	f108 0602 	add.w	r6, r8, #2
 8008d34:	3e01      	subs	r6, #1
 8008d36:	4638      	mov	r0, r7
 8008d38:	612e      	str	r6, [r5, #16]
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	f7ff fd98 	bl	8008870 <_Bfree>
 8008d40:	4628      	mov	r0, r5
 8008d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d46:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	e7c5      	b.n	8008cda <__lshift+0x4a>
 8008d4e:	3904      	subs	r1, #4
 8008d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d54:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d58:	459c      	cmp	ip, r3
 8008d5a:	d8f9      	bhi.n	8008d50 <__lshift+0xc0>
 8008d5c:	e7ea      	b.n	8008d34 <__lshift+0xa4>
 8008d5e:	bf00      	nop
 8008d60:	0800b0cd 	.word	0x0800b0cd
 8008d64:	0800b0de 	.word	0x0800b0de

08008d68 <__mcmp>:
 8008d68:	690a      	ldr	r2, [r1, #16]
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	6900      	ldr	r0, [r0, #16]
 8008d6e:	1a80      	subs	r0, r0, r2
 8008d70:	b530      	push	{r4, r5, lr}
 8008d72:	d10e      	bne.n	8008d92 <__mcmp+0x2a>
 8008d74:	3314      	adds	r3, #20
 8008d76:	3114      	adds	r1, #20
 8008d78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d88:	4295      	cmp	r5, r2
 8008d8a:	d003      	beq.n	8008d94 <__mcmp+0x2c>
 8008d8c:	d205      	bcs.n	8008d9a <__mcmp+0x32>
 8008d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d92:	bd30      	pop	{r4, r5, pc}
 8008d94:	42a3      	cmp	r3, r4
 8008d96:	d3f3      	bcc.n	8008d80 <__mcmp+0x18>
 8008d98:	e7fb      	b.n	8008d92 <__mcmp+0x2a>
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	e7f9      	b.n	8008d92 <__mcmp+0x2a>
	...

08008da0 <__mdiff>:
 8008da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da4:	4689      	mov	r9, r1
 8008da6:	4606      	mov	r6, r0
 8008da8:	4611      	mov	r1, r2
 8008daa:	4648      	mov	r0, r9
 8008dac:	4614      	mov	r4, r2
 8008dae:	f7ff ffdb 	bl	8008d68 <__mcmp>
 8008db2:	1e05      	subs	r5, r0, #0
 8008db4:	d112      	bne.n	8008ddc <__mdiff+0x3c>
 8008db6:	4629      	mov	r1, r5
 8008db8:	4630      	mov	r0, r6
 8008dba:	f7ff fd19 	bl	80087f0 <_Balloc>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	b928      	cbnz	r0, 8008dce <__mdiff+0x2e>
 8008dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8008ec0 <__mdiff+0x120>)
 8008dc4:	f240 2137 	movw	r1, #567	@ 0x237
 8008dc8:	483e      	ldr	r0, [pc, #248]	@ (8008ec4 <__mdiff+0x124>)
 8008dca:	f001 fc5d 	bl	800a688 <__assert_func>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	b003      	add	sp, #12
 8008dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ddc:	bfbc      	itt	lt
 8008dde:	464b      	movlt	r3, r9
 8008de0:	46a1      	movlt	r9, r4
 8008de2:	4630      	mov	r0, r6
 8008de4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008de8:	bfba      	itte	lt
 8008dea:	461c      	movlt	r4, r3
 8008dec:	2501      	movlt	r5, #1
 8008dee:	2500      	movge	r5, #0
 8008df0:	f7ff fcfe 	bl	80087f0 <_Balloc>
 8008df4:	4602      	mov	r2, r0
 8008df6:	b918      	cbnz	r0, 8008e00 <__mdiff+0x60>
 8008df8:	4b31      	ldr	r3, [pc, #196]	@ (8008ec0 <__mdiff+0x120>)
 8008dfa:	f240 2145 	movw	r1, #581	@ 0x245
 8008dfe:	e7e3      	b.n	8008dc8 <__mdiff+0x28>
 8008e00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e04:	6926      	ldr	r6, [r4, #16]
 8008e06:	60c5      	str	r5, [r0, #12]
 8008e08:	f109 0310 	add.w	r3, r9, #16
 8008e0c:	f109 0514 	add.w	r5, r9, #20
 8008e10:	f104 0e14 	add.w	lr, r4, #20
 8008e14:	f100 0b14 	add.w	fp, r0, #20
 8008e18:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e1c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	46d9      	mov	r9, fp
 8008e24:	f04f 0c00 	mov.w	ip, #0
 8008e28:	9b01      	ldr	r3, [sp, #4]
 8008e2a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e2e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e32:	9301      	str	r3, [sp, #4]
 8008e34:	fa1f f38a 	uxth.w	r3, sl
 8008e38:	4619      	mov	r1, r3
 8008e3a:	b283      	uxth	r3, r0
 8008e3c:	1acb      	subs	r3, r1, r3
 8008e3e:	0c00      	lsrs	r0, r0, #16
 8008e40:	4463      	add	r3, ip
 8008e42:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e46:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e50:	4576      	cmp	r6, lr
 8008e52:	f849 3b04 	str.w	r3, [r9], #4
 8008e56:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e5a:	d8e5      	bhi.n	8008e28 <__mdiff+0x88>
 8008e5c:	1b33      	subs	r3, r6, r4
 8008e5e:	3b15      	subs	r3, #21
 8008e60:	f023 0303 	bic.w	r3, r3, #3
 8008e64:	3415      	adds	r4, #21
 8008e66:	3304      	adds	r3, #4
 8008e68:	42a6      	cmp	r6, r4
 8008e6a:	bf38      	it	cc
 8008e6c:	2304      	movcc	r3, #4
 8008e6e:	441d      	add	r5, r3
 8008e70:	445b      	add	r3, fp
 8008e72:	461e      	mov	r6, r3
 8008e74:	462c      	mov	r4, r5
 8008e76:	4544      	cmp	r4, r8
 8008e78:	d30e      	bcc.n	8008e98 <__mdiff+0xf8>
 8008e7a:	f108 0103 	add.w	r1, r8, #3
 8008e7e:	1b49      	subs	r1, r1, r5
 8008e80:	f021 0103 	bic.w	r1, r1, #3
 8008e84:	3d03      	subs	r5, #3
 8008e86:	45a8      	cmp	r8, r5
 8008e88:	bf38      	it	cc
 8008e8a:	2100      	movcc	r1, #0
 8008e8c:	440b      	add	r3, r1
 8008e8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e92:	b191      	cbz	r1, 8008eba <__mdiff+0x11a>
 8008e94:	6117      	str	r7, [r2, #16]
 8008e96:	e79d      	b.n	8008dd4 <__mdiff+0x34>
 8008e98:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e9c:	46e6      	mov	lr, ip
 8008e9e:	0c08      	lsrs	r0, r1, #16
 8008ea0:	fa1c fc81 	uxtah	ip, ip, r1
 8008ea4:	4471      	add	r1, lr
 8008ea6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008eaa:	b289      	uxth	r1, r1
 8008eac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008eb0:	f846 1b04 	str.w	r1, [r6], #4
 8008eb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008eb8:	e7dd      	b.n	8008e76 <__mdiff+0xd6>
 8008eba:	3f01      	subs	r7, #1
 8008ebc:	e7e7      	b.n	8008e8e <__mdiff+0xee>
 8008ebe:	bf00      	nop
 8008ec0:	0800b0cd 	.word	0x0800b0cd
 8008ec4:	0800b0de 	.word	0x0800b0de

08008ec8 <__ulp>:
 8008ec8:	b082      	sub	sp, #8
 8008eca:	ed8d 0b00 	vstr	d0, [sp]
 8008ece:	9a01      	ldr	r2, [sp, #4]
 8008ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8008f10 <__ulp+0x48>)
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	dc08      	bgt.n	8008eee <__ulp+0x26>
 8008edc:	425b      	negs	r3, r3
 8008ede:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008ee2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008ee6:	da04      	bge.n	8008ef2 <__ulp+0x2a>
 8008ee8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008eec:	4113      	asrs	r3, r2
 8008eee:	2200      	movs	r2, #0
 8008ef0:	e008      	b.n	8008f04 <__ulp+0x3c>
 8008ef2:	f1a2 0314 	sub.w	r3, r2, #20
 8008ef6:	2b1e      	cmp	r3, #30
 8008ef8:	bfda      	itte	le
 8008efa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008efe:	40da      	lsrle	r2, r3
 8008f00:	2201      	movgt	r2, #1
 8008f02:	2300      	movs	r3, #0
 8008f04:	4619      	mov	r1, r3
 8008f06:	4610      	mov	r0, r2
 8008f08:	ec41 0b10 	vmov	d0, r0, r1
 8008f0c:	b002      	add	sp, #8
 8008f0e:	4770      	bx	lr
 8008f10:	7ff00000 	.word	0x7ff00000

08008f14 <__b2d>:
 8008f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f18:	6906      	ldr	r6, [r0, #16]
 8008f1a:	f100 0814 	add.w	r8, r0, #20
 8008f1e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008f22:	1f37      	subs	r7, r6, #4
 8008f24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f28:	4610      	mov	r0, r2
 8008f2a:	f7ff fd53 	bl	80089d4 <__hi0bits>
 8008f2e:	f1c0 0320 	rsb	r3, r0, #32
 8008f32:	280a      	cmp	r0, #10
 8008f34:	600b      	str	r3, [r1, #0]
 8008f36:	491b      	ldr	r1, [pc, #108]	@ (8008fa4 <__b2d+0x90>)
 8008f38:	dc15      	bgt.n	8008f66 <__b2d+0x52>
 8008f3a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008f3e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008f42:	45b8      	cmp	r8, r7
 8008f44:	ea43 0501 	orr.w	r5, r3, r1
 8008f48:	bf34      	ite	cc
 8008f4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f4e:	2300      	movcs	r3, #0
 8008f50:	3015      	adds	r0, #21
 8008f52:	fa02 f000 	lsl.w	r0, r2, r0
 8008f56:	fa23 f30c 	lsr.w	r3, r3, ip
 8008f5a:	4303      	orrs	r3, r0
 8008f5c:	461c      	mov	r4, r3
 8008f5e:	ec45 4b10 	vmov	d0, r4, r5
 8008f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f66:	45b8      	cmp	r8, r7
 8008f68:	bf3a      	itte	cc
 8008f6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f6e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008f72:	2300      	movcs	r3, #0
 8008f74:	380b      	subs	r0, #11
 8008f76:	d012      	beq.n	8008f9e <__b2d+0x8a>
 8008f78:	f1c0 0120 	rsb	r1, r0, #32
 8008f7c:	fa23 f401 	lsr.w	r4, r3, r1
 8008f80:	4082      	lsls	r2, r0
 8008f82:	4322      	orrs	r2, r4
 8008f84:	4547      	cmp	r7, r8
 8008f86:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008f8a:	bf8c      	ite	hi
 8008f8c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008f90:	2200      	movls	r2, #0
 8008f92:	4083      	lsls	r3, r0
 8008f94:	40ca      	lsrs	r2, r1
 8008f96:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	e7de      	b.n	8008f5c <__b2d+0x48>
 8008f9e:	ea42 0501 	orr.w	r5, r2, r1
 8008fa2:	e7db      	b.n	8008f5c <__b2d+0x48>
 8008fa4:	3ff00000 	.word	0x3ff00000

08008fa8 <__d2b>:
 8008fa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fac:	460f      	mov	r7, r1
 8008fae:	2101      	movs	r1, #1
 8008fb0:	ec59 8b10 	vmov	r8, r9, d0
 8008fb4:	4616      	mov	r6, r2
 8008fb6:	f7ff fc1b 	bl	80087f0 <_Balloc>
 8008fba:	4604      	mov	r4, r0
 8008fbc:	b930      	cbnz	r0, 8008fcc <__d2b+0x24>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	4b23      	ldr	r3, [pc, #140]	@ (8009050 <__d2b+0xa8>)
 8008fc2:	4824      	ldr	r0, [pc, #144]	@ (8009054 <__d2b+0xac>)
 8008fc4:	f240 310f 	movw	r1, #783	@ 0x30f
 8008fc8:	f001 fb5e 	bl	800a688 <__assert_func>
 8008fcc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008fd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fd4:	b10d      	cbz	r5, 8008fda <__d2b+0x32>
 8008fd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	f1b8 0300 	subs.w	r3, r8, #0
 8008fe0:	d023      	beq.n	800902a <__d2b+0x82>
 8008fe2:	4668      	mov	r0, sp
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	f7ff fd14 	bl	8008a12 <__lo0bits>
 8008fea:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008fee:	b1d0      	cbz	r0, 8009026 <__d2b+0x7e>
 8008ff0:	f1c0 0320 	rsb	r3, r0, #32
 8008ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff8:	430b      	orrs	r3, r1
 8008ffa:	40c2      	lsrs	r2, r0
 8008ffc:	6163      	str	r3, [r4, #20]
 8008ffe:	9201      	str	r2, [sp, #4]
 8009000:	9b01      	ldr	r3, [sp, #4]
 8009002:	61a3      	str	r3, [r4, #24]
 8009004:	2b00      	cmp	r3, #0
 8009006:	bf0c      	ite	eq
 8009008:	2201      	moveq	r2, #1
 800900a:	2202      	movne	r2, #2
 800900c:	6122      	str	r2, [r4, #16]
 800900e:	b1a5      	cbz	r5, 800903a <__d2b+0x92>
 8009010:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009014:	4405      	add	r5, r0
 8009016:	603d      	str	r5, [r7, #0]
 8009018:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800901c:	6030      	str	r0, [r6, #0]
 800901e:	4620      	mov	r0, r4
 8009020:	b003      	add	sp, #12
 8009022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009026:	6161      	str	r1, [r4, #20]
 8009028:	e7ea      	b.n	8009000 <__d2b+0x58>
 800902a:	a801      	add	r0, sp, #4
 800902c:	f7ff fcf1 	bl	8008a12 <__lo0bits>
 8009030:	9b01      	ldr	r3, [sp, #4]
 8009032:	6163      	str	r3, [r4, #20]
 8009034:	3020      	adds	r0, #32
 8009036:	2201      	movs	r2, #1
 8009038:	e7e8      	b.n	800900c <__d2b+0x64>
 800903a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800903e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009042:	6038      	str	r0, [r7, #0]
 8009044:	6918      	ldr	r0, [r3, #16]
 8009046:	f7ff fcc5 	bl	80089d4 <__hi0bits>
 800904a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800904e:	e7e5      	b.n	800901c <__d2b+0x74>
 8009050:	0800b0cd 	.word	0x0800b0cd
 8009054:	0800b0de 	.word	0x0800b0de

08009058 <__ratio>:
 8009058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905c:	b085      	sub	sp, #20
 800905e:	e9cd 1000 	strd	r1, r0, [sp]
 8009062:	a902      	add	r1, sp, #8
 8009064:	f7ff ff56 	bl	8008f14 <__b2d>
 8009068:	9800      	ldr	r0, [sp, #0]
 800906a:	a903      	add	r1, sp, #12
 800906c:	ec55 4b10 	vmov	r4, r5, d0
 8009070:	f7ff ff50 	bl	8008f14 <__b2d>
 8009074:	9b01      	ldr	r3, [sp, #4]
 8009076:	6919      	ldr	r1, [r3, #16]
 8009078:	9b00      	ldr	r3, [sp, #0]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	1ac9      	subs	r1, r1, r3
 800907e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	ec5b ab10 	vmov	sl, fp, d0
 8009088:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800908c:	2b00      	cmp	r3, #0
 800908e:	bfce      	itee	gt
 8009090:	462a      	movgt	r2, r5
 8009092:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009096:	465a      	movle	r2, fp
 8009098:	462f      	mov	r7, r5
 800909a:	46d9      	mov	r9, fp
 800909c:	bfcc      	ite	gt
 800909e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80090a2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80090a6:	464b      	mov	r3, r9
 80090a8:	4652      	mov	r2, sl
 80090aa:	4620      	mov	r0, r4
 80090ac:	4639      	mov	r1, r7
 80090ae:	f7f7 fbd5 	bl	800085c <__aeabi_ddiv>
 80090b2:	ec41 0b10 	vmov	d0, r0, r1
 80090b6:	b005      	add	sp, #20
 80090b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090bc <__copybits>:
 80090bc:	3901      	subs	r1, #1
 80090be:	b570      	push	{r4, r5, r6, lr}
 80090c0:	1149      	asrs	r1, r1, #5
 80090c2:	6914      	ldr	r4, [r2, #16]
 80090c4:	3101      	adds	r1, #1
 80090c6:	f102 0314 	add.w	r3, r2, #20
 80090ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80090ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090d2:	1f05      	subs	r5, r0, #4
 80090d4:	42a3      	cmp	r3, r4
 80090d6:	d30c      	bcc.n	80090f2 <__copybits+0x36>
 80090d8:	1aa3      	subs	r3, r4, r2
 80090da:	3b11      	subs	r3, #17
 80090dc:	f023 0303 	bic.w	r3, r3, #3
 80090e0:	3211      	adds	r2, #17
 80090e2:	42a2      	cmp	r2, r4
 80090e4:	bf88      	it	hi
 80090e6:	2300      	movhi	r3, #0
 80090e8:	4418      	add	r0, r3
 80090ea:	2300      	movs	r3, #0
 80090ec:	4288      	cmp	r0, r1
 80090ee:	d305      	bcc.n	80090fc <__copybits+0x40>
 80090f0:	bd70      	pop	{r4, r5, r6, pc}
 80090f2:	f853 6b04 	ldr.w	r6, [r3], #4
 80090f6:	f845 6f04 	str.w	r6, [r5, #4]!
 80090fa:	e7eb      	b.n	80090d4 <__copybits+0x18>
 80090fc:	f840 3b04 	str.w	r3, [r0], #4
 8009100:	e7f4      	b.n	80090ec <__copybits+0x30>

08009102 <__any_on>:
 8009102:	f100 0214 	add.w	r2, r0, #20
 8009106:	6900      	ldr	r0, [r0, #16]
 8009108:	114b      	asrs	r3, r1, #5
 800910a:	4298      	cmp	r0, r3
 800910c:	b510      	push	{r4, lr}
 800910e:	db11      	blt.n	8009134 <__any_on+0x32>
 8009110:	dd0a      	ble.n	8009128 <__any_on+0x26>
 8009112:	f011 011f 	ands.w	r1, r1, #31
 8009116:	d007      	beq.n	8009128 <__any_on+0x26>
 8009118:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800911c:	fa24 f001 	lsr.w	r0, r4, r1
 8009120:	fa00 f101 	lsl.w	r1, r0, r1
 8009124:	428c      	cmp	r4, r1
 8009126:	d10b      	bne.n	8009140 <__any_on+0x3e>
 8009128:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800912c:	4293      	cmp	r3, r2
 800912e:	d803      	bhi.n	8009138 <__any_on+0x36>
 8009130:	2000      	movs	r0, #0
 8009132:	bd10      	pop	{r4, pc}
 8009134:	4603      	mov	r3, r0
 8009136:	e7f7      	b.n	8009128 <__any_on+0x26>
 8009138:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800913c:	2900      	cmp	r1, #0
 800913e:	d0f5      	beq.n	800912c <__any_on+0x2a>
 8009140:	2001      	movs	r0, #1
 8009142:	e7f6      	b.n	8009132 <__any_on+0x30>

08009144 <sulp>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	4604      	mov	r4, r0
 8009148:	460d      	mov	r5, r1
 800914a:	ec45 4b10 	vmov	d0, r4, r5
 800914e:	4616      	mov	r6, r2
 8009150:	f7ff feba 	bl	8008ec8 <__ulp>
 8009154:	ec51 0b10 	vmov	r0, r1, d0
 8009158:	b17e      	cbz	r6, 800917a <sulp+0x36>
 800915a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800915e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009162:	2b00      	cmp	r3, #0
 8009164:	dd09      	ble.n	800917a <sulp+0x36>
 8009166:	051b      	lsls	r3, r3, #20
 8009168:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800916c:	2400      	movs	r4, #0
 800916e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009172:	4622      	mov	r2, r4
 8009174:	462b      	mov	r3, r5
 8009176:	f7f7 fa47 	bl	8000608 <__aeabi_dmul>
 800917a:	ec41 0b10 	vmov	d0, r0, r1
 800917e:	bd70      	pop	{r4, r5, r6, pc}

08009180 <_strtod_l>:
 8009180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	b09f      	sub	sp, #124	@ 0x7c
 8009186:	460c      	mov	r4, r1
 8009188:	9217      	str	r2, [sp, #92]	@ 0x5c
 800918a:	2200      	movs	r2, #0
 800918c:	921a      	str	r2, [sp, #104]	@ 0x68
 800918e:	9005      	str	r0, [sp, #20]
 8009190:	f04f 0a00 	mov.w	sl, #0
 8009194:	f04f 0b00 	mov.w	fp, #0
 8009198:	460a      	mov	r2, r1
 800919a:	9219      	str	r2, [sp, #100]	@ 0x64
 800919c:	7811      	ldrb	r1, [r2, #0]
 800919e:	292b      	cmp	r1, #43	@ 0x2b
 80091a0:	d04a      	beq.n	8009238 <_strtod_l+0xb8>
 80091a2:	d838      	bhi.n	8009216 <_strtod_l+0x96>
 80091a4:	290d      	cmp	r1, #13
 80091a6:	d832      	bhi.n	800920e <_strtod_l+0x8e>
 80091a8:	2908      	cmp	r1, #8
 80091aa:	d832      	bhi.n	8009212 <_strtod_l+0x92>
 80091ac:	2900      	cmp	r1, #0
 80091ae:	d03b      	beq.n	8009228 <_strtod_l+0xa8>
 80091b0:	2200      	movs	r2, #0
 80091b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80091b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80091b6:	782a      	ldrb	r2, [r5, #0]
 80091b8:	2a30      	cmp	r2, #48	@ 0x30
 80091ba:	f040 80b2 	bne.w	8009322 <_strtod_l+0x1a2>
 80091be:	786a      	ldrb	r2, [r5, #1]
 80091c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80091c4:	2a58      	cmp	r2, #88	@ 0x58
 80091c6:	d16e      	bne.n	80092a6 <_strtod_l+0x126>
 80091c8:	9302      	str	r3, [sp, #8]
 80091ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091cc:	9301      	str	r3, [sp, #4]
 80091ce:	ab1a      	add	r3, sp, #104	@ 0x68
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	4a8f      	ldr	r2, [pc, #572]	@ (8009410 <_strtod_l+0x290>)
 80091d4:	9805      	ldr	r0, [sp, #20]
 80091d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80091d8:	a919      	add	r1, sp, #100	@ 0x64
 80091da:	f001 faef 	bl	800a7bc <__gethex>
 80091de:	f010 060f 	ands.w	r6, r0, #15
 80091e2:	4604      	mov	r4, r0
 80091e4:	d005      	beq.n	80091f2 <_strtod_l+0x72>
 80091e6:	2e06      	cmp	r6, #6
 80091e8:	d128      	bne.n	800923c <_strtod_l+0xbc>
 80091ea:	3501      	adds	r5, #1
 80091ec:	2300      	movs	r3, #0
 80091ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80091f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80091f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f040 858e 	bne.w	8009d16 <_strtod_l+0xb96>
 80091fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091fc:	b1cb      	cbz	r3, 8009232 <_strtod_l+0xb2>
 80091fe:	4652      	mov	r2, sl
 8009200:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009204:	ec43 2b10 	vmov	d0, r2, r3
 8009208:	b01f      	add	sp, #124	@ 0x7c
 800920a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920e:	2920      	cmp	r1, #32
 8009210:	d1ce      	bne.n	80091b0 <_strtod_l+0x30>
 8009212:	3201      	adds	r2, #1
 8009214:	e7c1      	b.n	800919a <_strtod_l+0x1a>
 8009216:	292d      	cmp	r1, #45	@ 0x2d
 8009218:	d1ca      	bne.n	80091b0 <_strtod_l+0x30>
 800921a:	2101      	movs	r1, #1
 800921c:	910e      	str	r1, [sp, #56]	@ 0x38
 800921e:	1c51      	adds	r1, r2, #1
 8009220:	9119      	str	r1, [sp, #100]	@ 0x64
 8009222:	7852      	ldrb	r2, [r2, #1]
 8009224:	2a00      	cmp	r2, #0
 8009226:	d1c5      	bne.n	80091b4 <_strtod_l+0x34>
 8009228:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800922a:	9419      	str	r4, [sp, #100]	@ 0x64
 800922c:	2b00      	cmp	r3, #0
 800922e:	f040 8570 	bne.w	8009d12 <_strtod_l+0xb92>
 8009232:	4652      	mov	r2, sl
 8009234:	465b      	mov	r3, fp
 8009236:	e7e5      	b.n	8009204 <_strtod_l+0x84>
 8009238:	2100      	movs	r1, #0
 800923a:	e7ef      	b.n	800921c <_strtod_l+0x9c>
 800923c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800923e:	b13a      	cbz	r2, 8009250 <_strtod_l+0xd0>
 8009240:	2135      	movs	r1, #53	@ 0x35
 8009242:	a81c      	add	r0, sp, #112	@ 0x70
 8009244:	f7ff ff3a 	bl	80090bc <__copybits>
 8009248:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800924a:	9805      	ldr	r0, [sp, #20]
 800924c:	f7ff fb10 	bl	8008870 <_Bfree>
 8009250:	3e01      	subs	r6, #1
 8009252:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009254:	2e04      	cmp	r6, #4
 8009256:	d806      	bhi.n	8009266 <_strtod_l+0xe6>
 8009258:	e8df f006 	tbb	[pc, r6]
 800925c:	201d0314 	.word	0x201d0314
 8009260:	14          	.byte	0x14
 8009261:	00          	.byte	0x00
 8009262:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009266:	05e1      	lsls	r1, r4, #23
 8009268:	bf48      	it	mi
 800926a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800926e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009272:	0d1b      	lsrs	r3, r3, #20
 8009274:	051b      	lsls	r3, r3, #20
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1bb      	bne.n	80091f2 <_strtod_l+0x72>
 800927a:	f7fe fb2d 	bl	80078d8 <__errno>
 800927e:	2322      	movs	r3, #34	@ 0x22
 8009280:	6003      	str	r3, [r0, #0]
 8009282:	e7b6      	b.n	80091f2 <_strtod_l+0x72>
 8009284:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009288:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800928c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009290:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009294:	e7e7      	b.n	8009266 <_strtod_l+0xe6>
 8009296:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009418 <_strtod_l+0x298>
 800929a:	e7e4      	b.n	8009266 <_strtod_l+0xe6>
 800929c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80092a0:	f04f 3aff 	mov.w	sl, #4294967295
 80092a4:	e7df      	b.n	8009266 <_strtod_l+0xe6>
 80092a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80092ac:	785b      	ldrb	r3, [r3, #1]
 80092ae:	2b30      	cmp	r3, #48	@ 0x30
 80092b0:	d0f9      	beq.n	80092a6 <_strtod_l+0x126>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d09d      	beq.n	80091f2 <_strtod_l+0x72>
 80092b6:	2301      	movs	r3, #1
 80092b8:	2700      	movs	r7, #0
 80092ba:	9308      	str	r3, [sp, #32]
 80092bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092be:	930c      	str	r3, [sp, #48]	@ 0x30
 80092c0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80092c2:	46b9      	mov	r9, r7
 80092c4:	220a      	movs	r2, #10
 80092c6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80092c8:	7805      	ldrb	r5, [r0, #0]
 80092ca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80092ce:	b2d9      	uxtb	r1, r3
 80092d0:	2909      	cmp	r1, #9
 80092d2:	d928      	bls.n	8009326 <_strtod_l+0x1a6>
 80092d4:	494f      	ldr	r1, [pc, #316]	@ (8009414 <_strtod_l+0x294>)
 80092d6:	2201      	movs	r2, #1
 80092d8:	f001 f97a 	bl	800a5d0 <strncmp>
 80092dc:	2800      	cmp	r0, #0
 80092de:	d032      	beq.n	8009346 <_strtod_l+0x1c6>
 80092e0:	2000      	movs	r0, #0
 80092e2:	462a      	mov	r2, r5
 80092e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80092e6:	464d      	mov	r5, r9
 80092e8:	4603      	mov	r3, r0
 80092ea:	2a65      	cmp	r2, #101	@ 0x65
 80092ec:	d001      	beq.n	80092f2 <_strtod_l+0x172>
 80092ee:	2a45      	cmp	r2, #69	@ 0x45
 80092f0:	d114      	bne.n	800931c <_strtod_l+0x19c>
 80092f2:	b91d      	cbnz	r5, 80092fc <_strtod_l+0x17c>
 80092f4:	9a08      	ldr	r2, [sp, #32]
 80092f6:	4302      	orrs	r2, r0
 80092f8:	d096      	beq.n	8009228 <_strtod_l+0xa8>
 80092fa:	2500      	movs	r5, #0
 80092fc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80092fe:	1c62      	adds	r2, r4, #1
 8009300:	9219      	str	r2, [sp, #100]	@ 0x64
 8009302:	7862      	ldrb	r2, [r4, #1]
 8009304:	2a2b      	cmp	r2, #43	@ 0x2b
 8009306:	d07a      	beq.n	80093fe <_strtod_l+0x27e>
 8009308:	2a2d      	cmp	r2, #45	@ 0x2d
 800930a:	d07e      	beq.n	800940a <_strtod_l+0x28a>
 800930c:	f04f 0c00 	mov.w	ip, #0
 8009310:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009314:	2909      	cmp	r1, #9
 8009316:	f240 8085 	bls.w	8009424 <_strtod_l+0x2a4>
 800931a:	9419      	str	r4, [sp, #100]	@ 0x64
 800931c:	f04f 0800 	mov.w	r8, #0
 8009320:	e0a5      	b.n	800946e <_strtod_l+0x2ee>
 8009322:	2300      	movs	r3, #0
 8009324:	e7c8      	b.n	80092b8 <_strtod_l+0x138>
 8009326:	f1b9 0f08 	cmp.w	r9, #8
 800932a:	bfd8      	it	le
 800932c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800932e:	f100 0001 	add.w	r0, r0, #1
 8009332:	bfda      	itte	le
 8009334:	fb02 3301 	mlale	r3, r2, r1, r3
 8009338:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800933a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800933e:	f109 0901 	add.w	r9, r9, #1
 8009342:	9019      	str	r0, [sp, #100]	@ 0x64
 8009344:	e7bf      	b.n	80092c6 <_strtod_l+0x146>
 8009346:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	9219      	str	r2, [sp, #100]	@ 0x64
 800934c:	785a      	ldrb	r2, [r3, #1]
 800934e:	f1b9 0f00 	cmp.w	r9, #0
 8009352:	d03b      	beq.n	80093cc <_strtod_l+0x24c>
 8009354:	900a      	str	r0, [sp, #40]	@ 0x28
 8009356:	464d      	mov	r5, r9
 8009358:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800935c:	2b09      	cmp	r3, #9
 800935e:	d912      	bls.n	8009386 <_strtod_l+0x206>
 8009360:	2301      	movs	r3, #1
 8009362:	e7c2      	b.n	80092ea <_strtod_l+0x16a>
 8009364:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009366:	1c5a      	adds	r2, r3, #1
 8009368:	9219      	str	r2, [sp, #100]	@ 0x64
 800936a:	785a      	ldrb	r2, [r3, #1]
 800936c:	3001      	adds	r0, #1
 800936e:	2a30      	cmp	r2, #48	@ 0x30
 8009370:	d0f8      	beq.n	8009364 <_strtod_l+0x1e4>
 8009372:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009376:	2b08      	cmp	r3, #8
 8009378:	f200 84d2 	bhi.w	8009d20 <_strtod_l+0xba0>
 800937c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800937e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009380:	2000      	movs	r0, #0
 8009382:	930c      	str	r3, [sp, #48]	@ 0x30
 8009384:	4605      	mov	r5, r0
 8009386:	3a30      	subs	r2, #48	@ 0x30
 8009388:	f100 0301 	add.w	r3, r0, #1
 800938c:	d018      	beq.n	80093c0 <_strtod_l+0x240>
 800938e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009390:	4419      	add	r1, r3
 8009392:	910a      	str	r1, [sp, #40]	@ 0x28
 8009394:	462e      	mov	r6, r5
 8009396:	f04f 0e0a 	mov.w	lr, #10
 800939a:	1c71      	adds	r1, r6, #1
 800939c:	eba1 0c05 	sub.w	ip, r1, r5
 80093a0:	4563      	cmp	r3, ip
 80093a2:	dc15      	bgt.n	80093d0 <_strtod_l+0x250>
 80093a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80093a8:	182b      	adds	r3, r5, r0
 80093aa:	2b08      	cmp	r3, #8
 80093ac:	f105 0501 	add.w	r5, r5, #1
 80093b0:	4405      	add	r5, r0
 80093b2:	dc1a      	bgt.n	80093ea <_strtod_l+0x26a>
 80093b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093b6:	230a      	movs	r3, #10
 80093b8:	fb03 2301 	mla	r3, r3, r1, r2
 80093bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093be:	2300      	movs	r3, #0
 80093c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093c2:	1c51      	adds	r1, r2, #1
 80093c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80093c6:	7852      	ldrb	r2, [r2, #1]
 80093c8:	4618      	mov	r0, r3
 80093ca:	e7c5      	b.n	8009358 <_strtod_l+0x1d8>
 80093cc:	4648      	mov	r0, r9
 80093ce:	e7ce      	b.n	800936e <_strtod_l+0x1ee>
 80093d0:	2e08      	cmp	r6, #8
 80093d2:	dc05      	bgt.n	80093e0 <_strtod_l+0x260>
 80093d4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80093d6:	fb0e f606 	mul.w	r6, lr, r6
 80093da:	960b      	str	r6, [sp, #44]	@ 0x2c
 80093dc:	460e      	mov	r6, r1
 80093de:	e7dc      	b.n	800939a <_strtod_l+0x21a>
 80093e0:	2910      	cmp	r1, #16
 80093e2:	bfd8      	it	le
 80093e4:	fb0e f707 	mulle.w	r7, lr, r7
 80093e8:	e7f8      	b.n	80093dc <_strtod_l+0x25c>
 80093ea:	2b0f      	cmp	r3, #15
 80093ec:	bfdc      	itt	le
 80093ee:	230a      	movle	r3, #10
 80093f0:	fb03 2707 	mlale	r7, r3, r7, r2
 80093f4:	e7e3      	b.n	80093be <_strtod_l+0x23e>
 80093f6:	2300      	movs	r3, #0
 80093f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80093fa:	2301      	movs	r3, #1
 80093fc:	e77a      	b.n	80092f4 <_strtod_l+0x174>
 80093fe:	f04f 0c00 	mov.w	ip, #0
 8009402:	1ca2      	adds	r2, r4, #2
 8009404:	9219      	str	r2, [sp, #100]	@ 0x64
 8009406:	78a2      	ldrb	r2, [r4, #2]
 8009408:	e782      	b.n	8009310 <_strtod_l+0x190>
 800940a:	f04f 0c01 	mov.w	ip, #1
 800940e:	e7f8      	b.n	8009402 <_strtod_l+0x282>
 8009410:	0800b304 	.word	0x0800b304
 8009414:	0800b137 	.word	0x0800b137
 8009418:	7ff00000 	.word	0x7ff00000
 800941c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800941e:	1c51      	adds	r1, r2, #1
 8009420:	9119      	str	r1, [sp, #100]	@ 0x64
 8009422:	7852      	ldrb	r2, [r2, #1]
 8009424:	2a30      	cmp	r2, #48	@ 0x30
 8009426:	d0f9      	beq.n	800941c <_strtod_l+0x29c>
 8009428:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800942c:	2908      	cmp	r1, #8
 800942e:	f63f af75 	bhi.w	800931c <_strtod_l+0x19c>
 8009432:	3a30      	subs	r2, #48	@ 0x30
 8009434:	9209      	str	r2, [sp, #36]	@ 0x24
 8009436:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009438:	920f      	str	r2, [sp, #60]	@ 0x3c
 800943a:	f04f 080a 	mov.w	r8, #10
 800943e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009440:	1c56      	adds	r6, r2, #1
 8009442:	9619      	str	r6, [sp, #100]	@ 0x64
 8009444:	7852      	ldrb	r2, [r2, #1]
 8009446:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800944a:	f1be 0f09 	cmp.w	lr, #9
 800944e:	d939      	bls.n	80094c4 <_strtod_l+0x344>
 8009450:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009452:	1a76      	subs	r6, r6, r1
 8009454:	2e08      	cmp	r6, #8
 8009456:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800945a:	dc03      	bgt.n	8009464 <_strtod_l+0x2e4>
 800945c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800945e:	4588      	cmp	r8, r1
 8009460:	bfa8      	it	ge
 8009462:	4688      	movge	r8, r1
 8009464:	f1bc 0f00 	cmp.w	ip, #0
 8009468:	d001      	beq.n	800946e <_strtod_l+0x2ee>
 800946a:	f1c8 0800 	rsb	r8, r8, #0
 800946e:	2d00      	cmp	r5, #0
 8009470:	d14e      	bne.n	8009510 <_strtod_l+0x390>
 8009472:	9908      	ldr	r1, [sp, #32]
 8009474:	4308      	orrs	r0, r1
 8009476:	f47f aebc 	bne.w	80091f2 <_strtod_l+0x72>
 800947a:	2b00      	cmp	r3, #0
 800947c:	f47f aed4 	bne.w	8009228 <_strtod_l+0xa8>
 8009480:	2a69      	cmp	r2, #105	@ 0x69
 8009482:	d028      	beq.n	80094d6 <_strtod_l+0x356>
 8009484:	dc25      	bgt.n	80094d2 <_strtod_l+0x352>
 8009486:	2a49      	cmp	r2, #73	@ 0x49
 8009488:	d025      	beq.n	80094d6 <_strtod_l+0x356>
 800948a:	2a4e      	cmp	r2, #78	@ 0x4e
 800948c:	f47f aecc 	bne.w	8009228 <_strtod_l+0xa8>
 8009490:	499a      	ldr	r1, [pc, #616]	@ (80096fc <_strtod_l+0x57c>)
 8009492:	a819      	add	r0, sp, #100	@ 0x64
 8009494:	f001 fbb4 	bl	800ac00 <__match>
 8009498:	2800      	cmp	r0, #0
 800949a:	f43f aec5 	beq.w	8009228 <_strtod_l+0xa8>
 800949e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	2b28      	cmp	r3, #40	@ 0x28
 80094a4:	d12e      	bne.n	8009504 <_strtod_l+0x384>
 80094a6:	4996      	ldr	r1, [pc, #600]	@ (8009700 <_strtod_l+0x580>)
 80094a8:	aa1c      	add	r2, sp, #112	@ 0x70
 80094aa:	a819      	add	r0, sp, #100	@ 0x64
 80094ac:	f001 fbbc 	bl	800ac28 <__hexnan>
 80094b0:	2805      	cmp	r0, #5
 80094b2:	d127      	bne.n	8009504 <_strtod_l+0x384>
 80094b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094b6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80094ba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80094be:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80094c2:	e696      	b.n	80091f2 <_strtod_l+0x72>
 80094c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80094c6:	fb08 2101 	mla	r1, r8, r1, r2
 80094ca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80094ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80094d0:	e7b5      	b.n	800943e <_strtod_l+0x2be>
 80094d2:	2a6e      	cmp	r2, #110	@ 0x6e
 80094d4:	e7da      	b.n	800948c <_strtod_l+0x30c>
 80094d6:	498b      	ldr	r1, [pc, #556]	@ (8009704 <_strtod_l+0x584>)
 80094d8:	a819      	add	r0, sp, #100	@ 0x64
 80094da:	f001 fb91 	bl	800ac00 <__match>
 80094de:	2800      	cmp	r0, #0
 80094e0:	f43f aea2 	beq.w	8009228 <_strtod_l+0xa8>
 80094e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094e6:	4988      	ldr	r1, [pc, #544]	@ (8009708 <_strtod_l+0x588>)
 80094e8:	3b01      	subs	r3, #1
 80094ea:	a819      	add	r0, sp, #100	@ 0x64
 80094ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80094ee:	f001 fb87 	bl	800ac00 <__match>
 80094f2:	b910      	cbnz	r0, 80094fa <_strtod_l+0x37a>
 80094f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094f6:	3301      	adds	r3, #1
 80094f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80094fa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009718 <_strtod_l+0x598>
 80094fe:	f04f 0a00 	mov.w	sl, #0
 8009502:	e676      	b.n	80091f2 <_strtod_l+0x72>
 8009504:	4881      	ldr	r0, [pc, #516]	@ (800970c <_strtod_l+0x58c>)
 8009506:	f001 f8b7 	bl	800a678 <nan>
 800950a:	ec5b ab10 	vmov	sl, fp, d0
 800950e:	e670      	b.n	80091f2 <_strtod_l+0x72>
 8009510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009512:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009514:	eba8 0303 	sub.w	r3, r8, r3
 8009518:	f1b9 0f00 	cmp.w	r9, #0
 800951c:	bf08      	it	eq
 800951e:	46a9      	moveq	r9, r5
 8009520:	2d10      	cmp	r5, #16
 8009522:	9309      	str	r3, [sp, #36]	@ 0x24
 8009524:	462c      	mov	r4, r5
 8009526:	bfa8      	it	ge
 8009528:	2410      	movge	r4, #16
 800952a:	f7f6 fff3 	bl	8000514 <__aeabi_ui2d>
 800952e:	2d09      	cmp	r5, #9
 8009530:	4682      	mov	sl, r0
 8009532:	468b      	mov	fp, r1
 8009534:	dc13      	bgt.n	800955e <_strtod_l+0x3de>
 8009536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009538:	2b00      	cmp	r3, #0
 800953a:	f43f ae5a 	beq.w	80091f2 <_strtod_l+0x72>
 800953e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009540:	dd78      	ble.n	8009634 <_strtod_l+0x4b4>
 8009542:	2b16      	cmp	r3, #22
 8009544:	dc5f      	bgt.n	8009606 <_strtod_l+0x486>
 8009546:	4972      	ldr	r1, [pc, #456]	@ (8009710 <_strtod_l+0x590>)
 8009548:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800954c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009550:	4652      	mov	r2, sl
 8009552:	465b      	mov	r3, fp
 8009554:	f7f7 f858 	bl	8000608 <__aeabi_dmul>
 8009558:	4682      	mov	sl, r0
 800955a:	468b      	mov	fp, r1
 800955c:	e649      	b.n	80091f2 <_strtod_l+0x72>
 800955e:	4b6c      	ldr	r3, [pc, #432]	@ (8009710 <_strtod_l+0x590>)
 8009560:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009564:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009568:	f7f7 f84e 	bl	8000608 <__aeabi_dmul>
 800956c:	4682      	mov	sl, r0
 800956e:	4638      	mov	r0, r7
 8009570:	468b      	mov	fp, r1
 8009572:	f7f6 ffcf 	bl	8000514 <__aeabi_ui2d>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4650      	mov	r0, sl
 800957c:	4659      	mov	r1, fp
 800957e:	f7f6 fe8d 	bl	800029c <__adddf3>
 8009582:	2d0f      	cmp	r5, #15
 8009584:	4682      	mov	sl, r0
 8009586:	468b      	mov	fp, r1
 8009588:	ddd5      	ble.n	8009536 <_strtod_l+0x3b6>
 800958a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800958c:	1b2c      	subs	r4, r5, r4
 800958e:	441c      	add	r4, r3
 8009590:	2c00      	cmp	r4, #0
 8009592:	f340 8093 	ble.w	80096bc <_strtod_l+0x53c>
 8009596:	f014 030f 	ands.w	r3, r4, #15
 800959a:	d00a      	beq.n	80095b2 <_strtod_l+0x432>
 800959c:	495c      	ldr	r1, [pc, #368]	@ (8009710 <_strtod_l+0x590>)
 800959e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095a2:	4652      	mov	r2, sl
 80095a4:	465b      	mov	r3, fp
 80095a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095aa:	f7f7 f82d 	bl	8000608 <__aeabi_dmul>
 80095ae:	4682      	mov	sl, r0
 80095b0:	468b      	mov	fp, r1
 80095b2:	f034 040f 	bics.w	r4, r4, #15
 80095b6:	d073      	beq.n	80096a0 <_strtod_l+0x520>
 80095b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80095bc:	dd49      	ble.n	8009652 <_strtod_l+0x4d2>
 80095be:	2400      	movs	r4, #0
 80095c0:	46a0      	mov	r8, r4
 80095c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80095c4:	46a1      	mov	r9, r4
 80095c6:	9a05      	ldr	r2, [sp, #20]
 80095c8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009718 <_strtod_l+0x598>
 80095cc:	2322      	movs	r3, #34	@ 0x22
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	f04f 0a00 	mov.w	sl, #0
 80095d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f43f ae0b 	beq.w	80091f2 <_strtod_l+0x72>
 80095dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095de:	9805      	ldr	r0, [sp, #20]
 80095e0:	f7ff f946 	bl	8008870 <_Bfree>
 80095e4:	9805      	ldr	r0, [sp, #20]
 80095e6:	4649      	mov	r1, r9
 80095e8:	f7ff f942 	bl	8008870 <_Bfree>
 80095ec:	9805      	ldr	r0, [sp, #20]
 80095ee:	4641      	mov	r1, r8
 80095f0:	f7ff f93e 	bl	8008870 <_Bfree>
 80095f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80095f6:	9805      	ldr	r0, [sp, #20]
 80095f8:	f7ff f93a 	bl	8008870 <_Bfree>
 80095fc:	9805      	ldr	r0, [sp, #20]
 80095fe:	4621      	mov	r1, r4
 8009600:	f7ff f936 	bl	8008870 <_Bfree>
 8009604:	e5f5      	b.n	80091f2 <_strtod_l+0x72>
 8009606:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009608:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800960c:	4293      	cmp	r3, r2
 800960e:	dbbc      	blt.n	800958a <_strtod_l+0x40a>
 8009610:	4c3f      	ldr	r4, [pc, #252]	@ (8009710 <_strtod_l+0x590>)
 8009612:	f1c5 050f 	rsb	r5, r5, #15
 8009616:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800961a:	4652      	mov	r2, sl
 800961c:	465b      	mov	r3, fp
 800961e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009622:	f7f6 fff1 	bl	8000608 <__aeabi_dmul>
 8009626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009628:	1b5d      	subs	r5, r3, r5
 800962a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800962e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009632:	e78f      	b.n	8009554 <_strtod_l+0x3d4>
 8009634:	3316      	adds	r3, #22
 8009636:	dba8      	blt.n	800958a <_strtod_l+0x40a>
 8009638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800963a:	eba3 0808 	sub.w	r8, r3, r8
 800963e:	4b34      	ldr	r3, [pc, #208]	@ (8009710 <_strtod_l+0x590>)
 8009640:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009644:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009648:	4650      	mov	r0, sl
 800964a:	4659      	mov	r1, fp
 800964c:	f7f7 f906 	bl	800085c <__aeabi_ddiv>
 8009650:	e782      	b.n	8009558 <_strtod_l+0x3d8>
 8009652:	2300      	movs	r3, #0
 8009654:	4f2f      	ldr	r7, [pc, #188]	@ (8009714 <_strtod_l+0x594>)
 8009656:	1124      	asrs	r4, r4, #4
 8009658:	4650      	mov	r0, sl
 800965a:	4659      	mov	r1, fp
 800965c:	461e      	mov	r6, r3
 800965e:	2c01      	cmp	r4, #1
 8009660:	dc21      	bgt.n	80096a6 <_strtod_l+0x526>
 8009662:	b10b      	cbz	r3, 8009668 <_strtod_l+0x4e8>
 8009664:	4682      	mov	sl, r0
 8009666:	468b      	mov	fp, r1
 8009668:	492a      	ldr	r1, [pc, #168]	@ (8009714 <_strtod_l+0x594>)
 800966a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800966e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009672:	4652      	mov	r2, sl
 8009674:	465b      	mov	r3, fp
 8009676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800967a:	f7f6 ffc5 	bl	8000608 <__aeabi_dmul>
 800967e:	4b26      	ldr	r3, [pc, #152]	@ (8009718 <_strtod_l+0x598>)
 8009680:	460a      	mov	r2, r1
 8009682:	400b      	ands	r3, r1
 8009684:	4925      	ldr	r1, [pc, #148]	@ (800971c <_strtod_l+0x59c>)
 8009686:	428b      	cmp	r3, r1
 8009688:	4682      	mov	sl, r0
 800968a:	d898      	bhi.n	80095be <_strtod_l+0x43e>
 800968c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009690:	428b      	cmp	r3, r1
 8009692:	bf86      	itte	hi
 8009694:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009720 <_strtod_l+0x5a0>
 8009698:	f04f 3aff 	movhi.w	sl, #4294967295
 800969c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80096a0:	2300      	movs	r3, #0
 80096a2:	9308      	str	r3, [sp, #32]
 80096a4:	e076      	b.n	8009794 <_strtod_l+0x614>
 80096a6:	07e2      	lsls	r2, r4, #31
 80096a8:	d504      	bpl.n	80096b4 <_strtod_l+0x534>
 80096aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ae:	f7f6 ffab 	bl	8000608 <__aeabi_dmul>
 80096b2:	2301      	movs	r3, #1
 80096b4:	3601      	adds	r6, #1
 80096b6:	1064      	asrs	r4, r4, #1
 80096b8:	3708      	adds	r7, #8
 80096ba:	e7d0      	b.n	800965e <_strtod_l+0x4de>
 80096bc:	d0f0      	beq.n	80096a0 <_strtod_l+0x520>
 80096be:	4264      	negs	r4, r4
 80096c0:	f014 020f 	ands.w	r2, r4, #15
 80096c4:	d00a      	beq.n	80096dc <_strtod_l+0x55c>
 80096c6:	4b12      	ldr	r3, [pc, #72]	@ (8009710 <_strtod_l+0x590>)
 80096c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096cc:	4650      	mov	r0, sl
 80096ce:	4659      	mov	r1, fp
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	f7f7 f8c2 	bl	800085c <__aeabi_ddiv>
 80096d8:	4682      	mov	sl, r0
 80096da:	468b      	mov	fp, r1
 80096dc:	1124      	asrs	r4, r4, #4
 80096de:	d0df      	beq.n	80096a0 <_strtod_l+0x520>
 80096e0:	2c1f      	cmp	r4, #31
 80096e2:	dd1f      	ble.n	8009724 <_strtod_l+0x5a4>
 80096e4:	2400      	movs	r4, #0
 80096e6:	46a0      	mov	r8, r4
 80096e8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80096ea:	46a1      	mov	r9, r4
 80096ec:	9a05      	ldr	r2, [sp, #20]
 80096ee:	2322      	movs	r3, #34	@ 0x22
 80096f0:	f04f 0a00 	mov.w	sl, #0
 80096f4:	f04f 0b00 	mov.w	fp, #0
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	e76b      	b.n	80095d4 <_strtod_l+0x454>
 80096fc:	0800b025 	.word	0x0800b025
 8009700:	0800b2f0 	.word	0x0800b2f0
 8009704:	0800b01d 	.word	0x0800b01d
 8009708:	0800b054 	.word	0x0800b054
 800970c:	0800b18d 	.word	0x0800b18d
 8009710:	0800b228 	.word	0x0800b228
 8009714:	0800b200 	.word	0x0800b200
 8009718:	7ff00000 	.word	0x7ff00000
 800971c:	7ca00000 	.word	0x7ca00000
 8009720:	7fefffff 	.word	0x7fefffff
 8009724:	f014 0310 	ands.w	r3, r4, #16
 8009728:	bf18      	it	ne
 800972a:	236a      	movne	r3, #106	@ 0x6a
 800972c:	4ea9      	ldr	r6, [pc, #676]	@ (80099d4 <_strtod_l+0x854>)
 800972e:	9308      	str	r3, [sp, #32]
 8009730:	4650      	mov	r0, sl
 8009732:	4659      	mov	r1, fp
 8009734:	2300      	movs	r3, #0
 8009736:	07e7      	lsls	r7, r4, #31
 8009738:	d504      	bpl.n	8009744 <_strtod_l+0x5c4>
 800973a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800973e:	f7f6 ff63 	bl	8000608 <__aeabi_dmul>
 8009742:	2301      	movs	r3, #1
 8009744:	1064      	asrs	r4, r4, #1
 8009746:	f106 0608 	add.w	r6, r6, #8
 800974a:	d1f4      	bne.n	8009736 <_strtod_l+0x5b6>
 800974c:	b10b      	cbz	r3, 8009752 <_strtod_l+0x5d2>
 800974e:	4682      	mov	sl, r0
 8009750:	468b      	mov	fp, r1
 8009752:	9b08      	ldr	r3, [sp, #32]
 8009754:	b1b3      	cbz	r3, 8009784 <_strtod_l+0x604>
 8009756:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800975a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800975e:	2b00      	cmp	r3, #0
 8009760:	4659      	mov	r1, fp
 8009762:	dd0f      	ble.n	8009784 <_strtod_l+0x604>
 8009764:	2b1f      	cmp	r3, #31
 8009766:	dd56      	ble.n	8009816 <_strtod_l+0x696>
 8009768:	2b34      	cmp	r3, #52	@ 0x34
 800976a:	bfde      	ittt	le
 800976c:	f04f 33ff 	movle.w	r3, #4294967295
 8009770:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009774:	4093      	lslle	r3, r2
 8009776:	f04f 0a00 	mov.w	sl, #0
 800977a:	bfcc      	ite	gt
 800977c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009780:	ea03 0b01 	andle.w	fp, r3, r1
 8009784:	2200      	movs	r2, #0
 8009786:	2300      	movs	r3, #0
 8009788:	4650      	mov	r0, sl
 800978a:	4659      	mov	r1, fp
 800978c:	f7f7 f9a4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009790:	2800      	cmp	r0, #0
 8009792:	d1a7      	bne.n	80096e4 <_strtod_l+0x564>
 8009794:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800979a:	9805      	ldr	r0, [sp, #20]
 800979c:	462b      	mov	r3, r5
 800979e:	464a      	mov	r2, r9
 80097a0:	f7ff f8ce 	bl	8008940 <__s2b>
 80097a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f43f af09 	beq.w	80095be <_strtod_l+0x43e>
 80097ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097b0:	2a00      	cmp	r2, #0
 80097b2:	eba3 0308 	sub.w	r3, r3, r8
 80097b6:	bfa8      	it	ge
 80097b8:	2300      	movge	r3, #0
 80097ba:	9312      	str	r3, [sp, #72]	@ 0x48
 80097bc:	2400      	movs	r4, #0
 80097be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80097c2:	9316      	str	r3, [sp, #88]	@ 0x58
 80097c4:	46a0      	mov	r8, r4
 80097c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097c8:	9805      	ldr	r0, [sp, #20]
 80097ca:	6859      	ldr	r1, [r3, #4]
 80097cc:	f7ff f810 	bl	80087f0 <_Balloc>
 80097d0:	4681      	mov	r9, r0
 80097d2:	2800      	cmp	r0, #0
 80097d4:	f43f aef7 	beq.w	80095c6 <_strtod_l+0x446>
 80097d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097da:	691a      	ldr	r2, [r3, #16]
 80097dc:	3202      	adds	r2, #2
 80097de:	f103 010c 	add.w	r1, r3, #12
 80097e2:	0092      	lsls	r2, r2, #2
 80097e4:	300c      	adds	r0, #12
 80097e6:	f000 ff37 	bl	800a658 <memcpy>
 80097ea:	ec4b ab10 	vmov	d0, sl, fp
 80097ee:	9805      	ldr	r0, [sp, #20]
 80097f0:	aa1c      	add	r2, sp, #112	@ 0x70
 80097f2:	a91b      	add	r1, sp, #108	@ 0x6c
 80097f4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80097f8:	f7ff fbd6 	bl	8008fa8 <__d2b>
 80097fc:	901a      	str	r0, [sp, #104]	@ 0x68
 80097fe:	2800      	cmp	r0, #0
 8009800:	f43f aee1 	beq.w	80095c6 <_strtod_l+0x446>
 8009804:	9805      	ldr	r0, [sp, #20]
 8009806:	2101      	movs	r1, #1
 8009808:	f7ff f930 	bl	8008a6c <__i2b>
 800980c:	4680      	mov	r8, r0
 800980e:	b948      	cbnz	r0, 8009824 <_strtod_l+0x6a4>
 8009810:	f04f 0800 	mov.w	r8, #0
 8009814:	e6d7      	b.n	80095c6 <_strtod_l+0x446>
 8009816:	f04f 32ff 	mov.w	r2, #4294967295
 800981a:	fa02 f303 	lsl.w	r3, r2, r3
 800981e:	ea03 0a0a 	and.w	sl, r3, sl
 8009822:	e7af      	b.n	8009784 <_strtod_l+0x604>
 8009824:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009826:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009828:	2d00      	cmp	r5, #0
 800982a:	bfab      	itete	ge
 800982c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800982e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009830:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009832:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009834:	bfac      	ite	ge
 8009836:	18ef      	addge	r7, r5, r3
 8009838:	1b5e      	sublt	r6, r3, r5
 800983a:	9b08      	ldr	r3, [sp, #32]
 800983c:	1aed      	subs	r5, r5, r3
 800983e:	4415      	add	r5, r2
 8009840:	4b65      	ldr	r3, [pc, #404]	@ (80099d8 <_strtod_l+0x858>)
 8009842:	3d01      	subs	r5, #1
 8009844:	429d      	cmp	r5, r3
 8009846:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800984a:	da50      	bge.n	80098ee <_strtod_l+0x76e>
 800984c:	1b5b      	subs	r3, r3, r5
 800984e:	2b1f      	cmp	r3, #31
 8009850:	eba2 0203 	sub.w	r2, r2, r3
 8009854:	f04f 0101 	mov.w	r1, #1
 8009858:	dc3d      	bgt.n	80098d6 <_strtod_l+0x756>
 800985a:	fa01 f303 	lsl.w	r3, r1, r3
 800985e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009860:	2300      	movs	r3, #0
 8009862:	9310      	str	r3, [sp, #64]	@ 0x40
 8009864:	18bd      	adds	r5, r7, r2
 8009866:	9b08      	ldr	r3, [sp, #32]
 8009868:	42af      	cmp	r7, r5
 800986a:	4416      	add	r6, r2
 800986c:	441e      	add	r6, r3
 800986e:	463b      	mov	r3, r7
 8009870:	bfa8      	it	ge
 8009872:	462b      	movge	r3, r5
 8009874:	42b3      	cmp	r3, r6
 8009876:	bfa8      	it	ge
 8009878:	4633      	movge	r3, r6
 800987a:	2b00      	cmp	r3, #0
 800987c:	bfc2      	ittt	gt
 800987e:	1aed      	subgt	r5, r5, r3
 8009880:	1af6      	subgt	r6, r6, r3
 8009882:	1aff      	subgt	r7, r7, r3
 8009884:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009886:	2b00      	cmp	r3, #0
 8009888:	dd16      	ble.n	80098b8 <_strtod_l+0x738>
 800988a:	4641      	mov	r1, r8
 800988c:	9805      	ldr	r0, [sp, #20]
 800988e:	461a      	mov	r2, r3
 8009890:	f7ff f9a4 	bl	8008bdc <__pow5mult>
 8009894:	4680      	mov	r8, r0
 8009896:	2800      	cmp	r0, #0
 8009898:	d0ba      	beq.n	8009810 <_strtod_l+0x690>
 800989a:	4601      	mov	r1, r0
 800989c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800989e:	9805      	ldr	r0, [sp, #20]
 80098a0:	f7ff f8fa 	bl	8008a98 <__multiply>
 80098a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80098a6:	2800      	cmp	r0, #0
 80098a8:	f43f ae8d 	beq.w	80095c6 <_strtod_l+0x446>
 80098ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098ae:	9805      	ldr	r0, [sp, #20]
 80098b0:	f7fe ffde 	bl	8008870 <_Bfree>
 80098b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80098b8:	2d00      	cmp	r5, #0
 80098ba:	dc1d      	bgt.n	80098f8 <_strtod_l+0x778>
 80098bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098be:	2b00      	cmp	r3, #0
 80098c0:	dd23      	ble.n	800990a <_strtod_l+0x78a>
 80098c2:	4649      	mov	r1, r9
 80098c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80098c6:	9805      	ldr	r0, [sp, #20]
 80098c8:	f7ff f988 	bl	8008bdc <__pow5mult>
 80098cc:	4681      	mov	r9, r0
 80098ce:	b9e0      	cbnz	r0, 800990a <_strtod_l+0x78a>
 80098d0:	f04f 0900 	mov.w	r9, #0
 80098d4:	e677      	b.n	80095c6 <_strtod_l+0x446>
 80098d6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80098da:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80098de:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80098e2:	35e2      	adds	r5, #226	@ 0xe2
 80098e4:	fa01 f305 	lsl.w	r3, r1, r5
 80098e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80098ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 80098ec:	e7ba      	b.n	8009864 <_strtod_l+0x6e4>
 80098ee:	2300      	movs	r3, #0
 80098f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80098f2:	2301      	movs	r3, #1
 80098f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098f6:	e7b5      	b.n	8009864 <_strtod_l+0x6e4>
 80098f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098fa:	9805      	ldr	r0, [sp, #20]
 80098fc:	462a      	mov	r2, r5
 80098fe:	f7ff f9c7 	bl	8008c90 <__lshift>
 8009902:	901a      	str	r0, [sp, #104]	@ 0x68
 8009904:	2800      	cmp	r0, #0
 8009906:	d1d9      	bne.n	80098bc <_strtod_l+0x73c>
 8009908:	e65d      	b.n	80095c6 <_strtod_l+0x446>
 800990a:	2e00      	cmp	r6, #0
 800990c:	dd07      	ble.n	800991e <_strtod_l+0x79e>
 800990e:	4649      	mov	r1, r9
 8009910:	9805      	ldr	r0, [sp, #20]
 8009912:	4632      	mov	r2, r6
 8009914:	f7ff f9bc 	bl	8008c90 <__lshift>
 8009918:	4681      	mov	r9, r0
 800991a:	2800      	cmp	r0, #0
 800991c:	d0d8      	beq.n	80098d0 <_strtod_l+0x750>
 800991e:	2f00      	cmp	r7, #0
 8009920:	dd08      	ble.n	8009934 <_strtod_l+0x7b4>
 8009922:	4641      	mov	r1, r8
 8009924:	9805      	ldr	r0, [sp, #20]
 8009926:	463a      	mov	r2, r7
 8009928:	f7ff f9b2 	bl	8008c90 <__lshift>
 800992c:	4680      	mov	r8, r0
 800992e:	2800      	cmp	r0, #0
 8009930:	f43f ae49 	beq.w	80095c6 <_strtod_l+0x446>
 8009934:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009936:	9805      	ldr	r0, [sp, #20]
 8009938:	464a      	mov	r2, r9
 800993a:	f7ff fa31 	bl	8008da0 <__mdiff>
 800993e:	4604      	mov	r4, r0
 8009940:	2800      	cmp	r0, #0
 8009942:	f43f ae40 	beq.w	80095c6 <_strtod_l+0x446>
 8009946:	68c3      	ldr	r3, [r0, #12]
 8009948:	930f      	str	r3, [sp, #60]	@ 0x3c
 800994a:	2300      	movs	r3, #0
 800994c:	60c3      	str	r3, [r0, #12]
 800994e:	4641      	mov	r1, r8
 8009950:	f7ff fa0a 	bl	8008d68 <__mcmp>
 8009954:	2800      	cmp	r0, #0
 8009956:	da45      	bge.n	80099e4 <_strtod_l+0x864>
 8009958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800995a:	ea53 030a 	orrs.w	r3, r3, sl
 800995e:	d16b      	bne.n	8009a38 <_strtod_l+0x8b8>
 8009960:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009964:	2b00      	cmp	r3, #0
 8009966:	d167      	bne.n	8009a38 <_strtod_l+0x8b8>
 8009968:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800996c:	0d1b      	lsrs	r3, r3, #20
 800996e:	051b      	lsls	r3, r3, #20
 8009970:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009974:	d960      	bls.n	8009a38 <_strtod_l+0x8b8>
 8009976:	6963      	ldr	r3, [r4, #20]
 8009978:	b913      	cbnz	r3, 8009980 <_strtod_l+0x800>
 800997a:	6923      	ldr	r3, [r4, #16]
 800997c:	2b01      	cmp	r3, #1
 800997e:	dd5b      	ble.n	8009a38 <_strtod_l+0x8b8>
 8009980:	4621      	mov	r1, r4
 8009982:	2201      	movs	r2, #1
 8009984:	9805      	ldr	r0, [sp, #20]
 8009986:	f7ff f983 	bl	8008c90 <__lshift>
 800998a:	4641      	mov	r1, r8
 800998c:	4604      	mov	r4, r0
 800998e:	f7ff f9eb 	bl	8008d68 <__mcmp>
 8009992:	2800      	cmp	r0, #0
 8009994:	dd50      	ble.n	8009a38 <_strtod_l+0x8b8>
 8009996:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800999a:	9a08      	ldr	r2, [sp, #32]
 800999c:	0d1b      	lsrs	r3, r3, #20
 800999e:	051b      	lsls	r3, r3, #20
 80099a0:	2a00      	cmp	r2, #0
 80099a2:	d06a      	beq.n	8009a7a <_strtod_l+0x8fa>
 80099a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80099a8:	d867      	bhi.n	8009a7a <_strtod_l+0x8fa>
 80099aa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80099ae:	f67f ae9d 	bls.w	80096ec <_strtod_l+0x56c>
 80099b2:	4b0a      	ldr	r3, [pc, #40]	@ (80099dc <_strtod_l+0x85c>)
 80099b4:	4650      	mov	r0, sl
 80099b6:	4659      	mov	r1, fp
 80099b8:	2200      	movs	r2, #0
 80099ba:	f7f6 fe25 	bl	8000608 <__aeabi_dmul>
 80099be:	4b08      	ldr	r3, [pc, #32]	@ (80099e0 <_strtod_l+0x860>)
 80099c0:	400b      	ands	r3, r1
 80099c2:	4682      	mov	sl, r0
 80099c4:	468b      	mov	fp, r1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f47f ae08 	bne.w	80095dc <_strtod_l+0x45c>
 80099cc:	9a05      	ldr	r2, [sp, #20]
 80099ce:	2322      	movs	r3, #34	@ 0x22
 80099d0:	6013      	str	r3, [r2, #0]
 80099d2:	e603      	b.n	80095dc <_strtod_l+0x45c>
 80099d4:	0800b318 	.word	0x0800b318
 80099d8:	fffffc02 	.word	0xfffffc02
 80099dc:	39500000 	.word	0x39500000
 80099e0:	7ff00000 	.word	0x7ff00000
 80099e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80099e8:	d165      	bne.n	8009ab6 <_strtod_l+0x936>
 80099ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80099ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099f0:	b35a      	cbz	r2, 8009a4a <_strtod_l+0x8ca>
 80099f2:	4a9f      	ldr	r2, [pc, #636]	@ (8009c70 <_strtod_l+0xaf0>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d12b      	bne.n	8009a50 <_strtod_l+0x8d0>
 80099f8:	9b08      	ldr	r3, [sp, #32]
 80099fa:	4651      	mov	r1, sl
 80099fc:	b303      	cbz	r3, 8009a40 <_strtod_l+0x8c0>
 80099fe:	4b9d      	ldr	r3, [pc, #628]	@ (8009c74 <_strtod_l+0xaf4>)
 8009a00:	465a      	mov	r2, fp
 8009a02:	4013      	ands	r3, r2
 8009a04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009a08:	f04f 32ff 	mov.w	r2, #4294967295
 8009a0c:	d81b      	bhi.n	8009a46 <_strtod_l+0x8c6>
 8009a0e:	0d1b      	lsrs	r3, r3, #20
 8009a10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a14:	fa02 f303 	lsl.w	r3, r2, r3
 8009a18:	4299      	cmp	r1, r3
 8009a1a:	d119      	bne.n	8009a50 <_strtod_l+0x8d0>
 8009a1c:	4b96      	ldr	r3, [pc, #600]	@ (8009c78 <_strtod_l+0xaf8>)
 8009a1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d102      	bne.n	8009a2a <_strtod_l+0x8aa>
 8009a24:	3101      	adds	r1, #1
 8009a26:	f43f adce 	beq.w	80095c6 <_strtod_l+0x446>
 8009a2a:	4b92      	ldr	r3, [pc, #584]	@ (8009c74 <_strtod_l+0xaf4>)
 8009a2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a2e:	401a      	ands	r2, r3
 8009a30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009a34:	f04f 0a00 	mov.w	sl, #0
 8009a38:	9b08      	ldr	r3, [sp, #32]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1b9      	bne.n	80099b2 <_strtod_l+0x832>
 8009a3e:	e5cd      	b.n	80095dc <_strtod_l+0x45c>
 8009a40:	f04f 33ff 	mov.w	r3, #4294967295
 8009a44:	e7e8      	b.n	8009a18 <_strtod_l+0x898>
 8009a46:	4613      	mov	r3, r2
 8009a48:	e7e6      	b.n	8009a18 <_strtod_l+0x898>
 8009a4a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a4e:	d0a2      	beq.n	8009996 <_strtod_l+0x816>
 8009a50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a52:	b1db      	cbz	r3, 8009a8c <_strtod_l+0x90c>
 8009a54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a56:	4213      	tst	r3, r2
 8009a58:	d0ee      	beq.n	8009a38 <_strtod_l+0x8b8>
 8009a5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a5c:	9a08      	ldr	r2, [sp, #32]
 8009a5e:	4650      	mov	r0, sl
 8009a60:	4659      	mov	r1, fp
 8009a62:	b1bb      	cbz	r3, 8009a94 <_strtod_l+0x914>
 8009a64:	f7ff fb6e 	bl	8009144 <sulp>
 8009a68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a6c:	ec53 2b10 	vmov	r2, r3, d0
 8009a70:	f7f6 fc14 	bl	800029c <__adddf3>
 8009a74:	4682      	mov	sl, r0
 8009a76:	468b      	mov	fp, r1
 8009a78:	e7de      	b.n	8009a38 <_strtod_l+0x8b8>
 8009a7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009a7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a86:	f04f 3aff 	mov.w	sl, #4294967295
 8009a8a:	e7d5      	b.n	8009a38 <_strtod_l+0x8b8>
 8009a8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a8e:	ea13 0f0a 	tst.w	r3, sl
 8009a92:	e7e1      	b.n	8009a58 <_strtod_l+0x8d8>
 8009a94:	f7ff fb56 	bl	8009144 <sulp>
 8009a98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a9c:	ec53 2b10 	vmov	r2, r3, d0
 8009aa0:	f7f6 fbfa 	bl	8000298 <__aeabi_dsub>
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	4682      	mov	sl, r0
 8009aaa:	468b      	mov	fp, r1
 8009aac:	f7f7 f814 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d0c1      	beq.n	8009a38 <_strtod_l+0x8b8>
 8009ab4:	e61a      	b.n	80096ec <_strtod_l+0x56c>
 8009ab6:	4641      	mov	r1, r8
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f7ff facd 	bl	8009058 <__ratio>
 8009abe:	ec57 6b10 	vmov	r6, r7, d0
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f7 f818 	bl	8000b00 <__aeabi_dcmple>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d06f      	beq.n	8009bb4 <_strtod_l+0xa34>
 8009ad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d17a      	bne.n	8009bd0 <_strtod_l+0xa50>
 8009ada:	f1ba 0f00 	cmp.w	sl, #0
 8009ade:	d158      	bne.n	8009b92 <_strtod_l+0xa12>
 8009ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ae2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d15a      	bne.n	8009ba0 <_strtod_l+0xa20>
 8009aea:	4b64      	ldr	r3, [pc, #400]	@ (8009c7c <_strtod_l+0xafc>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	4630      	mov	r0, r6
 8009af0:	4639      	mov	r1, r7
 8009af2:	f7f6 fffb 	bl	8000aec <__aeabi_dcmplt>
 8009af6:	2800      	cmp	r0, #0
 8009af8:	d159      	bne.n	8009bae <_strtod_l+0xa2e>
 8009afa:	4630      	mov	r0, r6
 8009afc:	4639      	mov	r1, r7
 8009afe:	4b60      	ldr	r3, [pc, #384]	@ (8009c80 <_strtod_l+0xb00>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	f7f6 fd81 	bl	8000608 <__aeabi_dmul>
 8009b06:	4606      	mov	r6, r0
 8009b08:	460f      	mov	r7, r1
 8009b0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009b0e:	9606      	str	r6, [sp, #24]
 8009b10:	9307      	str	r3, [sp, #28]
 8009b12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b16:	4d57      	ldr	r5, [pc, #348]	@ (8009c74 <_strtod_l+0xaf4>)
 8009b18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b1e:	401d      	ands	r5, r3
 8009b20:	4b58      	ldr	r3, [pc, #352]	@ (8009c84 <_strtod_l+0xb04>)
 8009b22:	429d      	cmp	r5, r3
 8009b24:	f040 80b2 	bne.w	8009c8c <_strtod_l+0xb0c>
 8009b28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009b2e:	ec4b ab10 	vmov	d0, sl, fp
 8009b32:	f7ff f9c9 	bl	8008ec8 <__ulp>
 8009b36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b3a:	ec51 0b10 	vmov	r0, r1, d0
 8009b3e:	f7f6 fd63 	bl	8000608 <__aeabi_dmul>
 8009b42:	4652      	mov	r2, sl
 8009b44:	465b      	mov	r3, fp
 8009b46:	f7f6 fba9 	bl	800029c <__adddf3>
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4949      	ldr	r1, [pc, #292]	@ (8009c74 <_strtod_l+0xaf4>)
 8009b4e:	4a4e      	ldr	r2, [pc, #312]	@ (8009c88 <_strtod_l+0xb08>)
 8009b50:	4019      	ands	r1, r3
 8009b52:	4291      	cmp	r1, r2
 8009b54:	4682      	mov	sl, r0
 8009b56:	d942      	bls.n	8009bde <_strtod_l+0xa5e>
 8009b58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b5a:	4b47      	ldr	r3, [pc, #284]	@ (8009c78 <_strtod_l+0xaf8>)
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d103      	bne.n	8009b68 <_strtod_l+0x9e8>
 8009b60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b62:	3301      	adds	r3, #1
 8009b64:	f43f ad2f 	beq.w	80095c6 <_strtod_l+0x446>
 8009b68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009c78 <_strtod_l+0xaf8>
 8009b6c:	f04f 3aff 	mov.w	sl, #4294967295
 8009b70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b72:	9805      	ldr	r0, [sp, #20]
 8009b74:	f7fe fe7c 	bl	8008870 <_Bfree>
 8009b78:	9805      	ldr	r0, [sp, #20]
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	f7fe fe78 	bl	8008870 <_Bfree>
 8009b80:	9805      	ldr	r0, [sp, #20]
 8009b82:	4641      	mov	r1, r8
 8009b84:	f7fe fe74 	bl	8008870 <_Bfree>
 8009b88:	9805      	ldr	r0, [sp, #20]
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	f7fe fe70 	bl	8008870 <_Bfree>
 8009b90:	e619      	b.n	80097c6 <_strtod_l+0x646>
 8009b92:	f1ba 0f01 	cmp.w	sl, #1
 8009b96:	d103      	bne.n	8009ba0 <_strtod_l+0xa20>
 8009b98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f43f ada6 	beq.w	80096ec <_strtod_l+0x56c>
 8009ba0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009c50 <_strtod_l+0xad0>
 8009ba4:	4f35      	ldr	r7, [pc, #212]	@ (8009c7c <_strtod_l+0xafc>)
 8009ba6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009baa:	2600      	movs	r6, #0
 8009bac:	e7b1      	b.n	8009b12 <_strtod_l+0x992>
 8009bae:	4f34      	ldr	r7, [pc, #208]	@ (8009c80 <_strtod_l+0xb00>)
 8009bb0:	2600      	movs	r6, #0
 8009bb2:	e7aa      	b.n	8009b0a <_strtod_l+0x98a>
 8009bb4:	4b32      	ldr	r3, [pc, #200]	@ (8009c80 <_strtod_l+0xb00>)
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	4639      	mov	r1, r7
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f7f6 fd24 	bl	8000608 <__aeabi_dmul>
 8009bc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	460f      	mov	r7, r1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d09f      	beq.n	8009b0a <_strtod_l+0x98a>
 8009bca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009bce:	e7a0      	b.n	8009b12 <_strtod_l+0x992>
 8009bd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009c58 <_strtod_l+0xad8>
 8009bd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009bd8:	ec57 6b17 	vmov	r6, r7, d7
 8009bdc:	e799      	b.n	8009b12 <_strtod_l+0x992>
 8009bde:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009be2:	9b08      	ldr	r3, [sp, #32]
 8009be4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1c1      	bne.n	8009b70 <_strtod_l+0x9f0>
 8009bec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bf0:	0d1b      	lsrs	r3, r3, #20
 8009bf2:	051b      	lsls	r3, r3, #20
 8009bf4:	429d      	cmp	r5, r3
 8009bf6:	d1bb      	bne.n	8009b70 <_strtod_l+0x9f0>
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	f7f7 f864 	bl	8000cc8 <__aeabi_d2lz>
 8009c00:	f7f6 fcd4 	bl	80005ac <__aeabi_l2d>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	4630      	mov	r0, r6
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	f7f6 fb44 	bl	8000298 <__aeabi_dsub>
 8009c10:	460b      	mov	r3, r1
 8009c12:	4602      	mov	r2, r0
 8009c14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009c18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009c1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c1e:	ea46 060a 	orr.w	r6, r6, sl
 8009c22:	431e      	orrs	r6, r3
 8009c24:	d06f      	beq.n	8009d06 <_strtod_l+0xb86>
 8009c26:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c60 <_strtod_l+0xae0>)
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	f7f6 ff5e 	bl	8000aec <__aeabi_dcmplt>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	f47f acd3 	bne.w	80095dc <_strtod_l+0x45c>
 8009c36:	a30c      	add	r3, pc, #48	@ (adr r3, 8009c68 <_strtod_l+0xae8>)
 8009c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c40:	f7f6 ff72 	bl	8000b28 <__aeabi_dcmpgt>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	d093      	beq.n	8009b70 <_strtod_l+0x9f0>
 8009c48:	e4c8      	b.n	80095dc <_strtod_l+0x45c>
 8009c4a:	bf00      	nop
 8009c4c:	f3af 8000 	nop.w
 8009c50:	00000000 	.word	0x00000000
 8009c54:	bff00000 	.word	0xbff00000
 8009c58:	00000000 	.word	0x00000000
 8009c5c:	3ff00000 	.word	0x3ff00000
 8009c60:	94a03595 	.word	0x94a03595
 8009c64:	3fdfffff 	.word	0x3fdfffff
 8009c68:	35afe535 	.word	0x35afe535
 8009c6c:	3fe00000 	.word	0x3fe00000
 8009c70:	000fffff 	.word	0x000fffff
 8009c74:	7ff00000 	.word	0x7ff00000
 8009c78:	7fefffff 	.word	0x7fefffff
 8009c7c:	3ff00000 	.word	0x3ff00000
 8009c80:	3fe00000 	.word	0x3fe00000
 8009c84:	7fe00000 	.word	0x7fe00000
 8009c88:	7c9fffff 	.word	0x7c9fffff
 8009c8c:	9b08      	ldr	r3, [sp, #32]
 8009c8e:	b323      	cbz	r3, 8009cda <_strtod_l+0xb5a>
 8009c90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009c94:	d821      	bhi.n	8009cda <_strtod_l+0xb5a>
 8009c96:	a328      	add	r3, pc, #160	@ (adr r3, 8009d38 <_strtod_l+0xbb8>)
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	4639      	mov	r1, r7
 8009ca0:	f7f6 ff2e 	bl	8000b00 <__aeabi_dcmple>
 8009ca4:	b1a0      	cbz	r0, 8009cd0 <_strtod_l+0xb50>
 8009ca6:	4639      	mov	r1, r7
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f7f6 ff85 	bl	8000bb8 <__aeabi_d2uiz>
 8009cae:	2801      	cmp	r0, #1
 8009cb0:	bf38      	it	cc
 8009cb2:	2001      	movcc	r0, #1
 8009cb4:	f7f6 fc2e 	bl	8000514 <__aeabi_ui2d>
 8009cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cba:	4606      	mov	r6, r0
 8009cbc:	460f      	mov	r7, r1
 8009cbe:	b9fb      	cbnz	r3, 8009d00 <_strtod_l+0xb80>
 8009cc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cc4:	9014      	str	r0, [sp, #80]	@ 0x50
 8009cc6:	9315      	str	r3, [sp, #84]	@ 0x54
 8009cc8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009ccc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009cd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009cd2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009cd6:	1b5b      	subs	r3, r3, r5
 8009cd8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009cda:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009cde:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009ce2:	f7ff f8f1 	bl	8008ec8 <__ulp>
 8009ce6:	4650      	mov	r0, sl
 8009ce8:	ec53 2b10 	vmov	r2, r3, d0
 8009cec:	4659      	mov	r1, fp
 8009cee:	f7f6 fc8b 	bl	8000608 <__aeabi_dmul>
 8009cf2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009cf6:	f7f6 fad1 	bl	800029c <__adddf3>
 8009cfa:	4682      	mov	sl, r0
 8009cfc:	468b      	mov	fp, r1
 8009cfe:	e770      	b.n	8009be2 <_strtod_l+0xa62>
 8009d00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009d04:	e7e0      	b.n	8009cc8 <_strtod_l+0xb48>
 8009d06:	a30e      	add	r3, pc, #56	@ (adr r3, 8009d40 <_strtod_l+0xbc0>)
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f7f6 feee 	bl	8000aec <__aeabi_dcmplt>
 8009d10:	e798      	b.n	8009c44 <_strtod_l+0xac4>
 8009d12:	2300      	movs	r3, #0
 8009d14:	930e      	str	r3, [sp, #56]	@ 0x38
 8009d16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009d18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d1a:	6013      	str	r3, [r2, #0]
 8009d1c:	f7ff ba6d 	b.w	80091fa <_strtod_l+0x7a>
 8009d20:	2a65      	cmp	r2, #101	@ 0x65
 8009d22:	f43f ab68 	beq.w	80093f6 <_strtod_l+0x276>
 8009d26:	2a45      	cmp	r2, #69	@ 0x45
 8009d28:	f43f ab65 	beq.w	80093f6 <_strtod_l+0x276>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f7ff bba0 	b.w	8009472 <_strtod_l+0x2f2>
 8009d32:	bf00      	nop
 8009d34:	f3af 8000 	nop.w
 8009d38:	ffc00000 	.word	0xffc00000
 8009d3c:	41dfffff 	.word	0x41dfffff
 8009d40:	94a03595 	.word	0x94a03595
 8009d44:	3fcfffff 	.word	0x3fcfffff

08009d48 <_strtod_r>:
 8009d48:	4b01      	ldr	r3, [pc, #4]	@ (8009d50 <_strtod_r+0x8>)
 8009d4a:	f7ff ba19 	b.w	8009180 <_strtod_l>
 8009d4e:	bf00      	nop
 8009d50:	20000068 	.word	0x20000068

08009d54 <_strtol_l.isra.0>:
 8009d54:	2b24      	cmp	r3, #36	@ 0x24
 8009d56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d5a:	4686      	mov	lr, r0
 8009d5c:	4690      	mov	r8, r2
 8009d5e:	d801      	bhi.n	8009d64 <_strtol_l.isra.0+0x10>
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d106      	bne.n	8009d72 <_strtol_l.isra.0+0x1e>
 8009d64:	f7fd fdb8 	bl	80078d8 <__errno>
 8009d68:	2316      	movs	r3, #22
 8009d6a:	6003      	str	r3, [r0, #0]
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d72:	4834      	ldr	r0, [pc, #208]	@ (8009e44 <_strtol_l.isra.0+0xf0>)
 8009d74:	460d      	mov	r5, r1
 8009d76:	462a      	mov	r2, r5
 8009d78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d7c:	5d06      	ldrb	r6, [r0, r4]
 8009d7e:	f016 0608 	ands.w	r6, r6, #8
 8009d82:	d1f8      	bne.n	8009d76 <_strtol_l.isra.0+0x22>
 8009d84:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d86:	d110      	bne.n	8009daa <_strtol_l.isra.0+0x56>
 8009d88:	782c      	ldrb	r4, [r5, #0]
 8009d8a:	2601      	movs	r6, #1
 8009d8c:	1c95      	adds	r5, r2, #2
 8009d8e:	f033 0210 	bics.w	r2, r3, #16
 8009d92:	d115      	bne.n	8009dc0 <_strtol_l.isra.0+0x6c>
 8009d94:	2c30      	cmp	r4, #48	@ 0x30
 8009d96:	d10d      	bne.n	8009db4 <_strtol_l.isra.0+0x60>
 8009d98:	782a      	ldrb	r2, [r5, #0]
 8009d9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d9e:	2a58      	cmp	r2, #88	@ 0x58
 8009da0:	d108      	bne.n	8009db4 <_strtol_l.isra.0+0x60>
 8009da2:	786c      	ldrb	r4, [r5, #1]
 8009da4:	3502      	adds	r5, #2
 8009da6:	2310      	movs	r3, #16
 8009da8:	e00a      	b.n	8009dc0 <_strtol_l.isra.0+0x6c>
 8009daa:	2c2b      	cmp	r4, #43	@ 0x2b
 8009dac:	bf04      	itt	eq
 8009dae:	782c      	ldrbeq	r4, [r5, #0]
 8009db0:	1c95      	addeq	r5, r2, #2
 8009db2:	e7ec      	b.n	8009d8e <_strtol_l.isra.0+0x3a>
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1f6      	bne.n	8009da6 <_strtol_l.isra.0+0x52>
 8009db8:	2c30      	cmp	r4, #48	@ 0x30
 8009dba:	bf14      	ite	ne
 8009dbc:	230a      	movne	r3, #10
 8009dbe:	2308      	moveq	r3, #8
 8009dc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009dc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009dc8:	2200      	movs	r2, #0
 8009dca:	fbbc f9f3 	udiv	r9, ip, r3
 8009dce:	4610      	mov	r0, r2
 8009dd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009dd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009dd8:	2f09      	cmp	r7, #9
 8009dda:	d80f      	bhi.n	8009dfc <_strtol_l.isra.0+0xa8>
 8009ddc:	463c      	mov	r4, r7
 8009dde:	42a3      	cmp	r3, r4
 8009de0:	dd1b      	ble.n	8009e1a <_strtol_l.isra.0+0xc6>
 8009de2:	1c57      	adds	r7, r2, #1
 8009de4:	d007      	beq.n	8009df6 <_strtol_l.isra.0+0xa2>
 8009de6:	4581      	cmp	r9, r0
 8009de8:	d314      	bcc.n	8009e14 <_strtol_l.isra.0+0xc0>
 8009dea:	d101      	bne.n	8009df0 <_strtol_l.isra.0+0x9c>
 8009dec:	45a2      	cmp	sl, r4
 8009dee:	db11      	blt.n	8009e14 <_strtol_l.isra.0+0xc0>
 8009df0:	fb00 4003 	mla	r0, r0, r3, r4
 8009df4:	2201      	movs	r2, #1
 8009df6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dfa:	e7eb      	b.n	8009dd4 <_strtol_l.isra.0+0x80>
 8009dfc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009e00:	2f19      	cmp	r7, #25
 8009e02:	d801      	bhi.n	8009e08 <_strtol_l.isra.0+0xb4>
 8009e04:	3c37      	subs	r4, #55	@ 0x37
 8009e06:	e7ea      	b.n	8009dde <_strtol_l.isra.0+0x8a>
 8009e08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009e0c:	2f19      	cmp	r7, #25
 8009e0e:	d804      	bhi.n	8009e1a <_strtol_l.isra.0+0xc6>
 8009e10:	3c57      	subs	r4, #87	@ 0x57
 8009e12:	e7e4      	b.n	8009dde <_strtol_l.isra.0+0x8a>
 8009e14:	f04f 32ff 	mov.w	r2, #4294967295
 8009e18:	e7ed      	b.n	8009df6 <_strtol_l.isra.0+0xa2>
 8009e1a:	1c53      	adds	r3, r2, #1
 8009e1c:	d108      	bne.n	8009e30 <_strtol_l.isra.0+0xdc>
 8009e1e:	2322      	movs	r3, #34	@ 0x22
 8009e20:	f8ce 3000 	str.w	r3, [lr]
 8009e24:	4660      	mov	r0, ip
 8009e26:	f1b8 0f00 	cmp.w	r8, #0
 8009e2a:	d0a0      	beq.n	8009d6e <_strtol_l.isra.0+0x1a>
 8009e2c:	1e69      	subs	r1, r5, #1
 8009e2e:	e006      	b.n	8009e3e <_strtol_l.isra.0+0xea>
 8009e30:	b106      	cbz	r6, 8009e34 <_strtol_l.isra.0+0xe0>
 8009e32:	4240      	negs	r0, r0
 8009e34:	f1b8 0f00 	cmp.w	r8, #0
 8009e38:	d099      	beq.n	8009d6e <_strtol_l.isra.0+0x1a>
 8009e3a:	2a00      	cmp	r2, #0
 8009e3c:	d1f6      	bne.n	8009e2c <_strtol_l.isra.0+0xd8>
 8009e3e:	f8c8 1000 	str.w	r1, [r8]
 8009e42:	e794      	b.n	8009d6e <_strtol_l.isra.0+0x1a>
 8009e44:	0800b341 	.word	0x0800b341

08009e48 <_strtol_r>:
 8009e48:	f7ff bf84 	b.w	8009d54 <_strtol_l.isra.0>

08009e4c <__ssputs_r>:
 8009e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e50:	688e      	ldr	r6, [r1, #8]
 8009e52:	461f      	mov	r7, r3
 8009e54:	42be      	cmp	r6, r7
 8009e56:	680b      	ldr	r3, [r1, #0]
 8009e58:	4682      	mov	sl, r0
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	4690      	mov	r8, r2
 8009e5e:	d82d      	bhi.n	8009ebc <__ssputs_r+0x70>
 8009e60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e68:	d026      	beq.n	8009eb8 <__ssputs_r+0x6c>
 8009e6a:	6965      	ldr	r5, [r4, #20]
 8009e6c:	6909      	ldr	r1, [r1, #16]
 8009e6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e72:	eba3 0901 	sub.w	r9, r3, r1
 8009e76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e7a:	1c7b      	adds	r3, r7, #1
 8009e7c:	444b      	add	r3, r9
 8009e7e:	106d      	asrs	r5, r5, #1
 8009e80:	429d      	cmp	r5, r3
 8009e82:	bf38      	it	cc
 8009e84:	461d      	movcc	r5, r3
 8009e86:	0553      	lsls	r3, r2, #21
 8009e88:	d527      	bpl.n	8009eda <__ssputs_r+0x8e>
 8009e8a:	4629      	mov	r1, r5
 8009e8c:	f7fe fc24 	bl	80086d8 <_malloc_r>
 8009e90:	4606      	mov	r6, r0
 8009e92:	b360      	cbz	r0, 8009eee <__ssputs_r+0xa2>
 8009e94:	6921      	ldr	r1, [r4, #16]
 8009e96:	464a      	mov	r2, r9
 8009e98:	f000 fbde 	bl	800a658 <memcpy>
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ea6:	81a3      	strh	r3, [r4, #12]
 8009ea8:	6126      	str	r6, [r4, #16]
 8009eaa:	6165      	str	r5, [r4, #20]
 8009eac:	444e      	add	r6, r9
 8009eae:	eba5 0509 	sub.w	r5, r5, r9
 8009eb2:	6026      	str	r6, [r4, #0]
 8009eb4:	60a5      	str	r5, [r4, #8]
 8009eb6:	463e      	mov	r6, r7
 8009eb8:	42be      	cmp	r6, r7
 8009eba:	d900      	bls.n	8009ebe <__ssputs_r+0x72>
 8009ebc:	463e      	mov	r6, r7
 8009ebe:	6820      	ldr	r0, [r4, #0]
 8009ec0:	4632      	mov	r2, r6
 8009ec2:	4641      	mov	r1, r8
 8009ec4:	f000 fb6a 	bl	800a59c <memmove>
 8009ec8:	68a3      	ldr	r3, [r4, #8]
 8009eca:	1b9b      	subs	r3, r3, r6
 8009ecc:	60a3      	str	r3, [r4, #8]
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	4433      	add	r3, r6
 8009ed2:	6023      	str	r3, [r4, #0]
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eda:	462a      	mov	r2, r5
 8009edc:	f000 ff51 	bl	800ad82 <_realloc_r>
 8009ee0:	4606      	mov	r6, r0
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d1e0      	bne.n	8009ea8 <__ssputs_r+0x5c>
 8009ee6:	6921      	ldr	r1, [r4, #16]
 8009ee8:	4650      	mov	r0, sl
 8009eea:	f7fe fb81 	bl	80085f0 <_free_r>
 8009eee:	230c      	movs	r3, #12
 8009ef0:	f8ca 3000 	str.w	r3, [sl]
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009efa:	81a3      	strh	r3, [r4, #12]
 8009efc:	f04f 30ff 	mov.w	r0, #4294967295
 8009f00:	e7e9      	b.n	8009ed6 <__ssputs_r+0x8a>
	...

08009f04 <_svfiprintf_r>:
 8009f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f08:	4698      	mov	r8, r3
 8009f0a:	898b      	ldrh	r3, [r1, #12]
 8009f0c:	061b      	lsls	r3, r3, #24
 8009f0e:	b09d      	sub	sp, #116	@ 0x74
 8009f10:	4607      	mov	r7, r0
 8009f12:	460d      	mov	r5, r1
 8009f14:	4614      	mov	r4, r2
 8009f16:	d510      	bpl.n	8009f3a <_svfiprintf_r+0x36>
 8009f18:	690b      	ldr	r3, [r1, #16]
 8009f1a:	b973      	cbnz	r3, 8009f3a <_svfiprintf_r+0x36>
 8009f1c:	2140      	movs	r1, #64	@ 0x40
 8009f1e:	f7fe fbdb 	bl	80086d8 <_malloc_r>
 8009f22:	6028      	str	r0, [r5, #0]
 8009f24:	6128      	str	r0, [r5, #16]
 8009f26:	b930      	cbnz	r0, 8009f36 <_svfiprintf_r+0x32>
 8009f28:	230c      	movs	r3, #12
 8009f2a:	603b      	str	r3, [r7, #0]
 8009f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f30:	b01d      	add	sp, #116	@ 0x74
 8009f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f36:	2340      	movs	r3, #64	@ 0x40
 8009f38:	616b      	str	r3, [r5, #20]
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f3e:	2320      	movs	r3, #32
 8009f40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f48:	2330      	movs	r3, #48	@ 0x30
 8009f4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a0e8 <_svfiprintf_r+0x1e4>
 8009f4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f52:	f04f 0901 	mov.w	r9, #1
 8009f56:	4623      	mov	r3, r4
 8009f58:	469a      	mov	sl, r3
 8009f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f5e:	b10a      	cbz	r2, 8009f64 <_svfiprintf_r+0x60>
 8009f60:	2a25      	cmp	r2, #37	@ 0x25
 8009f62:	d1f9      	bne.n	8009f58 <_svfiprintf_r+0x54>
 8009f64:	ebba 0b04 	subs.w	fp, sl, r4
 8009f68:	d00b      	beq.n	8009f82 <_svfiprintf_r+0x7e>
 8009f6a:	465b      	mov	r3, fp
 8009f6c:	4622      	mov	r2, r4
 8009f6e:	4629      	mov	r1, r5
 8009f70:	4638      	mov	r0, r7
 8009f72:	f7ff ff6b 	bl	8009e4c <__ssputs_r>
 8009f76:	3001      	adds	r0, #1
 8009f78:	f000 80a7 	beq.w	800a0ca <_svfiprintf_r+0x1c6>
 8009f7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f7e:	445a      	add	r2, fp
 8009f80:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f82:	f89a 3000 	ldrb.w	r3, [sl]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f000 809f 	beq.w	800a0ca <_svfiprintf_r+0x1c6>
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f96:	f10a 0a01 	add.w	sl, sl, #1
 8009f9a:	9304      	str	r3, [sp, #16]
 8009f9c:	9307      	str	r3, [sp, #28]
 8009f9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fa2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fa4:	4654      	mov	r4, sl
 8009fa6:	2205      	movs	r2, #5
 8009fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fac:	484e      	ldr	r0, [pc, #312]	@ (800a0e8 <_svfiprintf_r+0x1e4>)
 8009fae:	f7f6 f917 	bl	80001e0 <memchr>
 8009fb2:	9a04      	ldr	r2, [sp, #16]
 8009fb4:	b9d8      	cbnz	r0, 8009fee <_svfiprintf_r+0xea>
 8009fb6:	06d0      	lsls	r0, r2, #27
 8009fb8:	bf44      	itt	mi
 8009fba:	2320      	movmi	r3, #32
 8009fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fc0:	0711      	lsls	r1, r2, #28
 8009fc2:	bf44      	itt	mi
 8009fc4:	232b      	movmi	r3, #43	@ 0x2b
 8009fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fca:	f89a 3000 	ldrb.w	r3, [sl]
 8009fce:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fd0:	d015      	beq.n	8009ffe <_svfiprintf_r+0xfa>
 8009fd2:	9a07      	ldr	r2, [sp, #28]
 8009fd4:	4654      	mov	r4, sl
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	f04f 0c0a 	mov.w	ip, #10
 8009fdc:	4621      	mov	r1, r4
 8009fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fe2:	3b30      	subs	r3, #48	@ 0x30
 8009fe4:	2b09      	cmp	r3, #9
 8009fe6:	d94b      	bls.n	800a080 <_svfiprintf_r+0x17c>
 8009fe8:	b1b0      	cbz	r0, 800a018 <_svfiprintf_r+0x114>
 8009fea:	9207      	str	r2, [sp, #28]
 8009fec:	e014      	b.n	800a018 <_svfiprintf_r+0x114>
 8009fee:	eba0 0308 	sub.w	r3, r0, r8
 8009ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	9304      	str	r3, [sp, #16]
 8009ffa:	46a2      	mov	sl, r4
 8009ffc:	e7d2      	b.n	8009fa4 <_svfiprintf_r+0xa0>
 8009ffe:	9b03      	ldr	r3, [sp, #12]
 800a000:	1d19      	adds	r1, r3, #4
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	9103      	str	r1, [sp, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	bfbb      	ittet	lt
 800a00a:	425b      	neglt	r3, r3
 800a00c:	f042 0202 	orrlt.w	r2, r2, #2
 800a010:	9307      	strge	r3, [sp, #28]
 800a012:	9307      	strlt	r3, [sp, #28]
 800a014:	bfb8      	it	lt
 800a016:	9204      	strlt	r2, [sp, #16]
 800a018:	7823      	ldrb	r3, [r4, #0]
 800a01a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a01c:	d10a      	bne.n	800a034 <_svfiprintf_r+0x130>
 800a01e:	7863      	ldrb	r3, [r4, #1]
 800a020:	2b2a      	cmp	r3, #42	@ 0x2a
 800a022:	d132      	bne.n	800a08a <_svfiprintf_r+0x186>
 800a024:	9b03      	ldr	r3, [sp, #12]
 800a026:	1d1a      	adds	r2, r3, #4
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	9203      	str	r2, [sp, #12]
 800a02c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a030:	3402      	adds	r4, #2
 800a032:	9305      	str	r3, [sp, #20]
 800a034:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a0f8 <_svfiprintf_r+0x1f4>
 800a038:	7821      	ldrb	r1, [r4, #0]
 800a03a:	2203      	movs	r2, #3
 800a03c:	4650      	mov	r0, sl
 800a03e:	f7f6 f8cf 	bl	80001e0 <memchr>
 800a042:	b138      	cbz	r0, 800a054 <_svfiprintf_r+0x150>
 800a044:	9b04      	ldr	r3, [sp, #16]
 800a046:	eba0 000a 	sub.w	r0, r0, sl
 800a04a:	2240      	movs	r2, #64	@ 0x40
 800a04c:	4082      	lsls	r2, r0
 800a04e:	4313      	orrs	r3, r2
 800a050:	3401      	adds	r4, #1
 800a052:	9304      	str	r3, [sp, #16]
 800a054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a058:	4824      	ldr	r0, [pc, #144]	@ (800a0ec <_svfiprintf_r+0x1e8>)
 800a05a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a05e:	2206      	movs	r2, #6
 800a060:	f7f6 f8be 	bl	80001e0 <memchr>
 800a064:	2800      	cmp	r0, #0
 800a066:	d036      	beq.n	800a0d6 <_svfiprintf_r+0x1d2>
 800a068:	4b21      	ldr	r3, [pc, #132]	@ (800a0f0 <_svfiprintf_r+0x1ec>)
 800a06a:	bb1b      	cbnz	r3, 800a0b4 <_svfiprintf_r+0x1b0>
 800a06c:	9b03      	ldr	r3, [sp, #12]
 800a06e:	3307      	adds	r3, #7
 800a070:	f023 0307 	bic.w	r3, r3, #7
 800a074:	3308      	adds	r3, #8
 800a076:	9303      	str	r3, [sp, #12]
 800a078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a07a:	4433      	add	r3, r6
 800a07c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a07e:	e76a      	b.n	8009f56 <_svfiprintf_r+0x52>
 800a080:	fb0c 3202 	mla	r2, ip, r2, r3
 800a084:	460c      	mov	r4, r1
 800a086:	2001      	movs	r0, #1
 800a088:	e7a8      	b.n	8009fdc <_svfiprintf_r+0xd8>
 800a08a:	2300      	movs	r3, #0
 800a08c:	3401      	adds	r4, #1
 800a08e:	9305      	str	r3, [sp, #20]
 800a090:	4619      	mov	r1, r3
 800a092:	f04f 0c0a 	mov.w	ip, #10
 800a096:	4620      	mov	r0, r4
 800a098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a09c:	3a30      	subs	r2, #48	@ 0x30
 800a09e:	2a09      	cmp	r2, #9
 800a0a0:	d903      	bls.n	800a0aa <_svfiprintf_r+0x1a6>
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0c6      	beq.n	800a034 <_svfiprintf_r+0x130>
 800a0a6:	9105      	str	r1, [sp, #20]
 800a0a8:	e7c4      	b.n	800a034 <_svfiprintf_r+0x130>
 800a0aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e7f0      	b.n	800a096 <_svfiprintf_r+0x192>
 800a0b4:	ab03      	add	r3, sp, #12
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	462a      	mov	r2, r5
 800a0ba:	4b0e      	ldr	r3, [pc, #56]	@ (800a0f4 <_svfiprintf_r+0x1f0>)
 800a0bc:	a904      	add	r1, sp, #16
 800a0be:	4638      	mov	r0, r7
 800a0c0:	f7fc fbc8 	bl	8006854 <_printf_float>
 800a0c4:	1c42      	adds	r2, r0, #1
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	d1d6      	bne.n	800a078 <_svfiprintf_r+0x174>
 800a0ca:	89ab      	ldrh	r3, [r5, #12]
 800a0cc:	065b      	lsls	r3, r3, #25
 800a0ce:	f53f af2d 	bmi.w	8009f2c <_svfiprintf_r+0x28>
 800a0d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0d4:	e72c      	b.n	8009f30 <_svfiprintf_r+0x2c>
 800a0d6:	ab03      	add	r3, sp, #12
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	462a      	mov	r2, r5
 800a0dc:	4b05      	ldr	r3, [pc, #20]	@ (800a0f4 <_svfiprintf_r+0x1f0>)
 800a0de:	a904      	add	r1, sp, #16
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	f7fc fe4f 	bl	8006d84 <_printf_i>
 800a0e6:	e7ed      	b.n	800a0c4 <_svfiprintf_r+0x1c0>
 800a0e8:	0800b139 	.word	0x0800b139
 800a0ec:	0800b143 	.word	0x0800b143
 800a0f0:	08006855 	.word	0x08006855
 800a0f4:	08009e4d 	.word	0x08009e4d
 800a0f8:	0800b13f 	.word	0x0800b13f

0800a0fc <__sfputc_r>:
 800a0fc:	6893      	ldr	r3, [r2, #8]
 800a0fe:	3b01      	subs	r3, #1
 800a100:	2b00      	cmp	r3, #0
 800a102:	b410      	push	{r4}
 800a104:	6093      	str	r3, [r2, #8]
 800a106:	da08      	bge.n	800a11a <__sfputc_r+0x1e>
 800a108:	6994      	ldr	r4, [r2, #24]
 800a10a:	42a3      	cmp	r3, r4
 800a10c:	db01      	blt.n	800a112 <__sfputc_r+0x16>
 800a10e:	290a      	cmp	r1, #10
 800a110:	d103      	bne.n	800a11a <__sfputc_r+0x1e>
 800a112:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a116:	f7fd baf8 	b.w	800770a <__swbuf_r>
 800a11a:	6813      	ldr	r3, [r2, #0]
 800a11c:	1c58      	adds	r0, r3, #1
 800a11e:	6010      	str	r0, [r2, #0]
 800a120:	7019      	strb	r1, [r3, #0]
 800a122:	4608      	mov	r0, r1
 800a124:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <__sfputs_r>:
 800a12a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12c:	4606      	mov	r6, r0
 800a12e:	460f      	mov	r7, r1
 800a130:	4614      	mov	r4, r2
 800a132:	18d5      	adds	r5, r2, r3
 800a134:	42ac      	cmp	r4, r5
 800a136:	d101      	bne.n	800a13c <__sfputs_r+0x12>
 800a138:	2000      	movs	r0, #0
 800a13a:	e007      	b.n	800a14c <__sfputs_r+0x22>
 800a13c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a140:	463a      	mov	r2, r7
 800a142:	4630      	mov	r0, r6
 800a144:	f7ff ffda 	bl	800a0fc <__sfputc_r>
 800a148:	1c43      	adds	r3, r0, #1
 800a14a:	d1f3      	bne.n	800a134 <__sfputs_r+0xa>
 800a14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a150 <_vfiprintf_r>:
 800a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	460d      	mov	r5, r1
 800a156:	b09d      	sub	sp, #116	@ 0x74
 800a158:	4614      	mov	r4, r2
 800a15a:	4698      	mov	r8, r3
 800a15c:	4606      	mov	r6, r0
 800a15e:	b118      	cbz	r0, 800a168 <_vfiprintf_r+0x18>
 800a160:	6a03      	ldr	r3, [r0, #32]
 800a162:	b90b      	cbnz	r3, 800a168 <_vfiprintf_r+0x18>
 800a164:	f7fd f9c6 	bl	80074f4 <__sinit>
 800a168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a16a:	07d9      	lsls	r1, r3, #31
 800a16c:	d405      	bmi.n	800a17a <_vfiprintf_r+0x2a>
 800a16e:	89ab      	ldrh	r3, [r5, #12]
 800a170:	059a      	lsls	r2, r3, #22
 800a172:	d402      	bmi.n	800a17a <_vfiprintf_r+0x2a>
 800a174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a176:	f7fd fbda 	bl	800792e <__retarget_lock_acquire_recursive>
 800a17a:	89ab      	ldrh	r3, [r5, #12]
 800a17c:	071b      	lsls	r3, r3, #28
 800a17e:	d501      	bpl.n	800a184 <_vfiprintf_r+0x34>
 800a180:	692b      	ldr	r3, [r5, #16]
 800a182:	b99b      	cbnz	r3, 800a1ac <_vfiprintf_r+0x5c>
 800a184:	4629      	mov	r1, r5
 800a186:	4630      	mov	r0, r6
 800a188:	f7fd fafe 	bl	8007788 <__swsetup_r>
 800a18c:	b170      	cbz	r0, 800a1ac <_vfiprintf_r+0x5c>
 800a18e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a190:	07dc      	lsls	r4, r3, #31
 800a192:	d504      	bpl.n	800a19e <_vfiprintf_r+0x4e>
 800a194:	f04f 30ff 	mov.w	r0, #4294967295
 800a198:	b01d      	add	sp, #116	@ 0x74
 800a19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a19e:	89ab      	ldrh	r3, [r5, #12]
 800a1a0:	0598      	lsls	r0, r3, #22
 800a1a2:	d4f7      	bmi.n	800a194 <_vfiprintf_r+0x44>
 800a1a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1a6:	f7fd fbc3 	bl	8007930 <__retarget_lock_release_recursive>
 800a1aa:	e7f3      	b.n	800a194 <_vfiprintf_r+0x44>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1b0:	2320      	movs	r3, #32
 800a1b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1ba:	2330      	movs	r3, #48	@ 0x30
 800a1bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a36c <_vfiprintf_r+0x21c>
 800a1c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1c4:	f04f 0901 	mov.w	r9, #1
 800a1c8:	4623      	mov	r3, r4
 800a1ca:	469a      	mov	sl, r3
 800a1cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1d0:	b10a      	cbz	r2, 800a1d6 <_vfiprintf_r+0x86>
 800a1d2:	2a25      	cmp	r2, #37	@ 0x25
 800a1d4:	d1f9      	bne.n	800a1ca <_vfiprintf_r+0x7a>
 800a1d6:	ebba 0b04 	subs.w	fp, sl, r4
 800a1da:	d00b      	beq.n	800a1f4 <_vfiprintf_r+0xa4>
 800a1dc:	465b      	mov	r3, fp
 800a1de:	4622      	mov	r2, r4
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	f7ff ffa1 	bl	800a12a <__sfputs_r>
 800a1e8:	3001      	adds	r0, #1
 800a1ea:	f000 80a7 	beq.w	800a33c <_vfiprintf_r+0x1ec>
 800a1ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1f0:	445a      	add	r2, fp
 800a1f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f000 809f 	beq.w	800a33c <_vfiprintf_r+0x1ec>
 800a1fe:	2300      	movs	r3, #0
 800a200:	f04f 32ff 	mov.w	r2, #4294967295
 800a204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a208:	f10a 0a01 	add.w	sl, sl, #1
 800a20c:	9304      	str	r3, [sp, #16]
 800a20e:	9307      	str	r3, [sp, #28]
 800a210:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a214:	931a      	str	r3, [sp, #104]	@ 0x68
 800a216:	4654      	mov	r4, sl
 800a218:	2205      	movs	r2, #5
 800a21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a21e:	4853      	ldr	r0, [pc, #332]	@ (800a36c <_vfiprintf_r+0x21c>)
 800a220:	f7f5 ffde 	bl	80001e0 <memchr>
 800a224:	9a04      	ldr	r2, [sp, #16]
 800a226:	b9d8      	cbnz	r0, 800a260 <_vfiprintf_r+0x110>
 800a228:	06d1      	lsls	r1, r2, #27
 800a22a:	bf44      	itt	mi
 800a22c:	2320      	movmi	r3, #32
 800a22e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a232:	0713      	lsls	r3, r2, #28
 800a234:	bf44      	itt	mi
 800a236:	232b      	movmi	r3, #43	@ 0x2b
 800a238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a23c:	f89a 3000 	ldrb.w	r3, [sl]
 800a240:	2b2a      	cmp	r3, #42	@ 0x2a
 800a242:	d015      	beq.n	800a270 <_vfiprintf_r+0x120>
 800a244:	9a07      	ldr	r2, [sp, #28]
 800a246:	4654      	mov	r4, sl
 800a248:	2000      	movs	r0, #0
 800a24a:	f04f 0c0a 	mov.w	ip, #10
 800a24e:	4621      	mov	r1, r4
 800a250:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a254:	3b30      	subs	r3, #48	@ 0x30
 800a256:	2b09      	cmp	r3, #9
 800a258:	d94b      	bls.n	800a2f2 <_vfiprintf_r+0x1a2>
 800a25a:	b1b0      	cbz	r0, 800a28a <_vfiprintf_r+0x13a>
 800a25c:	9207      	str	r2, [sp, #28]
 800a25e:	e014      	b.n	800a28a <_vfiprintf_r+0x13a>
 800a260:	eba0 0308 	sub.w	r3, r0, r8
 800a264:	fa09 f303 	lsl.w	r3, r9, r3
 800a268:	4313      	orrs	r3, r2
 800a26a:	9304      	str	r3, [sp, #16]
 800a26c:	46a2      	mov	sl, r4
 800a26e:	e7d2      	b.n	800a216 <_vfiprintf_r+0xc6>
 800a270:	9b03      	ldr	r3, [sp, #12]
 800a272:	1d19      	adds	r1, r3, #4
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	9103      	str	r1, [sp, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	bfbb      	ittet	lt
 800a27c:	425b      	neglt	r3, r3
 800a27e:	f042 0202 	orrlt.w	r2, r2, #2
 800a282:	9307      	strge	r3, [sp, #28]
 800a284:	9307      	strlt	r3, [sp, #28]
 800a286:	bfb8      	it	lt
 800a288:	9204      	strlt	r2, [sp, #16]
 800a28a:	7823      	ldrb	r3, [r4, #0]
 800a28c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a28e:	d10a      	bne.n	800a2a6 <_vfiprintf_r+0x156>
 800a290:	7863      	ldrb	r3, [r4, #1]
 800a292:	2b2a      	cmp	r3, #42	@ 0x2a
 800a294:	d132      	bne.n	800a2fc <_vfiprintf_r+0x1ac>
 800a296:	9b03      	ldr	r3, [sp, #12]
 800a298:	1d1a      	adds	r2, r3, #4
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	9203      	str	r2, [sp, #12]
 800a29e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2a2:	3402      	adds	r4, #2
 800a2a4:	9305      	str	r3, [sp, #20]
 800a2a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a37c <_vfiprintf_r+0x22c>
 800a2aa:	7821      	ldrb	r1, [r4, #0]
 800a2ac:	2203      	movs	r2, #3
 800a2ae:	4650      	mov	r0, sl
 800a2b0:	f7f5 ff96 	bl	80001e0 <memchr>
 800a2b4:	b138      	cbz	r0, 800a2c6 <_vfiprintf_r+0x176>
 800a2b6:	9b04      	ldr	r3, [sp, #16]
 800a2b8:	eba0 000a 	sub.w	r0, r0, sl
 800a2bc:	2240      	movs	r2, #64	@ 0x40
 800a2be:	4082      	lsls	r2, r0
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	3401      	adds	r4, #1
 800a2c4:	9304      	str	r3, [sp, #16]
 800a2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ca:	4829      	ldr	r0, [pc, #164]	@ (800a370 <_vfiprintf_r+0x220>)
 800a2cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2d0:	2206      	movs	r2, #6
 800a2d2:	f7f5 ff85 	bl	80001e0 <memchr>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d03f      	beq.n	800a35a <_vfiprintf_r+0x20a>
 800a2da:	4b26      	ldr	r3, [pc, #152]	@ (800a374 <_vfiprintf_r+0x224>)
 800a2dc:	bb1b      	cbnz	r3, 800a326 <_vfiprintf_r+0x1d6>
 800a2de:	9b03      	ldr	r3, [sp, #12]
 800a2e0:	3307      	adds	r3, #7
 800a2e2:	f023 0307 	bic.w	r3, r3, #7
 800a2e6:	3308      	adds	r3, #8
 800a2e8:	9303      	str	r3, [sp, #12]
 800a2ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ec:	443b      	add	r3, r7
 800a2ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2f0:	e76a      	b.n	800a1c8 <_vfiprintf_r+0x78>
 800a2f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	e7a8      	b.n	800a24e <_vfiprintf_r+0xfe>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	3401      	adds	r4, #1
 800a300:	9305      	str	r3, [sp, #20]
 800a302:	4619      	mov	r1, r3
 800a304:	f04f 0c0a 	mov.w	ip, #10
 800a308:	4620      	mov	r0, r4
 800a30a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a30e:	3a30      	subs	r2, #48	@ 0x30
 800a310:	2a09      	cmp	r2, #9
 800a312:	d903      	bls.n	800a31c <_vfiprintf_r+0x1cc>
 800a314:	2b00      	cmp	r3, #0
 800a316:	d0c6      	beq.n	800a2a6 <_vfiprintf_r+0x156>
 800a318:	9105      	str	r1, [sp, #20]
 800a31a:	e7c4      	b.n	800a2a6 <_vfiprintf_r+0x156>
 800a31c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a320:	4604      	mov	r4, r0
 800a322:	2301      	movs	r3, #1
 800a324:	e7f0      	b.n	800a308 <_vfiprintf_r+0x1b8>
 800a326:	ab03      	add	r3, sp, #12
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	462a      	mov	r2, r5
 800a32c:	4b12      	ldr	r3, [pc, #72]	@ (800a378 <_vfiprintf_r+0x228>)
 800a32e:	a904      	add	r1, sp, #16
 800a330:	4630      	mov	r0, r6
 800a332:	f7fc fa8f 	bl	8006854 <_printf_float>
 800a336:	4607      	mov	r7, r0
 800a338:	1c78      	adds	r0, r7, #1
 800a33a:	d1d6      	bne.n	800a2ea <_vfiprintf_r+0x19a>
 800a33c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a33e:	07d9      	lsls	r1, r3, #31
 800a340:	d405      	bmi.n	800a34e <_vfiprintf_r+0x1fe>
 800a342:	89ab      	ldrh	r3, [r5, #12]
 800a344:	059a      	lsls	r2, r3, #22
 800a346:	d402      	bmi.n	800a34e <_vfiprintf_r+0x1fe>
 800a348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a34a:	f7fd faf1 	bl	8007930 <__retarget_lock_release_recursive>
 800a34e:	89ab      	ldrh	r3, [r5, #12]
 800a350:	065b      	lsls	r3, r3, #25
 800a352:	f53f af1f 	bmi.w	800a194 <_vfiprintf_r+0x44>
 800a356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a358:	e71e      	b.n	800a198 <_vfiprintf_r+0x48>
 800a35a:	ab03      	add	r3, sp, #12
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	462a      	mov	r2, r5
 800a360:	4b05      	ldr	r3, [pc, #20]	@ (800a378 <_vfiprintf_r+0x228>)
 800a362:	a904      	add	r1, sp, #16
 800a364:	4630      	mov	r0, r6
 800a366:	f7fc fd0d 	bl	8006d84 <_printf_i>
 800a36a:	e7e4      	b.n	800a336 <_vfiprintf_r+0x1e6>
 800a36c:	0800b139 	.word	0x0800b139
 800a370:	0800b143 	.word	0x0800b143
 800a374:	08006855 	.word	0x08006855
 800a378:	0800a12b 	.word	0x0800a12b
 800a37c:	0800b13f 	.word	0x0800b13f

0800a380 <__sflush_r>:
 800a380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a388:	0716      	lsls	r6, r2, #28
 800a38a:	4605      	mov	r5, r0
 800a38c:	460c      	mov	r4, r1
 800a38e:	d454      	bmi.n	800a43a <__sflush_r+0xba>
 800a390:	684b      	ldr	r3, [r1, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	dc02      	bgt.n	800a39c <__sflush_r+0x1c>
 800a396:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a398:	2b00      	cmp	r3, #0
 800a39a:	dd48      	ble.n	800a42e <__sflush_r+0xae>
 800a39c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a39e:	2e00      	cmp	r6, #0
 800a3a0:	d045      	beq.n	800a42e <__sflush_r+0xae>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a3a8:	682f      	ldr	r7, [r5, #0]
 800a3aa:	6a21      	ldr	r1, [r4, #32]
 800a3ac:	602b      	str	r3, [r5, #0]
 800a3ae:	d030      	beq.n	800a412 <__sflush_r+0x92>
 800a3b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a3b2:	89a3      	ldrh	r3, [r4, #12]
 800a3b4:	0759      	lsls	r1, r3, #29
 800a3b6:	d505      	bpl.n	800a3c4 <__sflush_r+0x44>
 800a3b8:	6863      	ldr	r3, [r4, #4]
 800a3ba:	1ad2      	subs	r2, r2, r3
 800a3bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a3be:	b10b      	cbz	r3, 800a3c4 <__sflush_r+0x44>
 800a3c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3c2:	1ad2      	subs	r2, r2, r3
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3c8:	6a21      	ldr	r1, [r4, #32]
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	47b0      	blx	r6
 800a3ce:	1c43      	adds	r3, r0, #1
 800a3d0:	89a3      	ldrh	r3, [r4, #12]
 800a3d2:	d106      	bne.n	800a3e2 <__sflush_r+0x62>
 800a3d4:	6829      	ldr	r1, [r5, #0]
 800a3d6:	291d      	cmp	r1, #29
 800a3d8:	d82b      	bhi.n	800a432 <__sflush_r+0xb2>
 800a3da:	4a2a      	ldr	r2, [pc, #168]	@ (800a484 <__sflush_r+0x104>)
 800a3dc:	40ca      	lsrs	r2, r1
 800a3de:	07d6      	lsls	r6, r2, #31
 800a3e0:	d527      	bpl.n	800a432 <__sflush_r+0xb2>
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	6062      	str	r2, [r4, #4]
 800a3e6:	04d9      	lsls	r1, r3, #19
 800a3e8:	6922      	ldr	r2, [r4, #16]
 800a3ea:	6022      	str	r2, [r4, #0]
 800a3ec:	d504      	bpl.n	800a3f8 <__sflush_r+0x78>
 800a3ee:	1c42      	adds	r2, r0, #1
 800a3f0:	d101      	bne.n	800a3f6 <__sflush_r+0x76>
 800a3f2:	682b      	ldr	r3, [r5, #0]
 800a3f4:	b903      	cbnz	r3, 800a3f8 <__sflush_r+0x78>
 800a3f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a3f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3fa:	602f      	str	r7, [r5, #0]
 800a3fc:	b1b9      	cbz	r1, 800a42e <__sflush_r+0xae>
 800a3fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a402:	4299      	cmp	r1, r3
 800a404:	d002      	beq.n	800a40c <__sflush_r+0x8c>
 800a406:	4628      	mov	r0, r5
 800a408:	f7fe f8f2 	bl	80085f0 <_free_r>
 800a40c:	2300      	movs	r3, #0
 800a40e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a410:	e00d      	b.n	800a42e <__sflush_r+0xae>
 800a412:	2301      	movs	r3, #1
 800a414:	4628      	mov	r0, r5
 800a416:	47b0      	blx	r6
 800a418:	4602      	mov	r2, r0
 800a41a:	1c50      	adds	r0, r2, #1
 800a41c:	d1c9      	bne.n	800a3b2 <__sflush_r+0x32>
 800a41e:	682b      	ldr	r3, [r5, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d0c6      	beq.n	800a3b2 <__sflush_r+0x32>
 800a424:	2b1d      	cmp	r3, #29
 800a426:	d001      	beq.n	800a42c <__sflush_r+0xac>
 800a428:	2b16      	cmp	r3, #22
 800a42a:	d11e      	bne.n	800a46a <__sflush_r+0xea>
 800a42c:	602f      	str	r7, [r5, #0]
 800a42e:	2000      	movs	r0, #0
 800a430:	e022      	b.n	800a478 <__sflush_r+0xf8>
 800a432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a436:	b21b      	sxth	r3, r3
 800a438:	e01b      	b.n	800a472 <__sflush_r+0xf2>
 800a43a:	690f      	ldr	r7, [r1, #16]
 800a43c:	2f00      	cmp	r7, #0
 800a43e:	d0f6      	beq.n	800a42e <__sflush_r+0xae>
 800a440:	0793      	lsls	r3, r2, #30
 800a442:	680e      	ldr	r6, [r1, #0]
 800a444:	bf08      	it	eq
 800a446:	694b      	ldreq	r3, [r1, #20]
 800a448:	600f      	str	r7, [r1, #0]
 800a44a:	bf18      	it	ne
 800a44c:	2300      	movne	r3, #0
 800a44e:	eba6 0807 	sub.w	r8, r6, r7
 800a452:	608b      	str	r3, [r1, #8]
 800a454:	f1b8 0f00 	cmp.w	r8, #0
 800a458:	dde9      	ble.n	800a42e <__sflush_r+0xae>
 800a45a:	6a21      	ldr	r1, [r4, #32]
 800a45c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a45e:	4643      	mov	r3, r8
 800a460:	463a      	mov	r2, r7
 800a462:	4628      	mov	r0, r5
 800a464:	47b0      	blx	r6
 800a466:	2800      	cmp	r0, #0
 800a468:	dc08      	bgt.n	800a47c <__sflush_r+0xfc>
 800a46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a46e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a472:	81a3      	strh	r3, [r4, #12]
 800a474:	f04f 30ff 	mov.w	r0, #4294967295
 800a478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a47c:	4407      	add	r7, r0
 800a47e:	eba8 0800 	sub.w	r8, r8, r0
 800a482:	e7e7      	b.n	800a454 <__sflush_r+0xd4>
 800a484:	20400001 	.word	0x20400001

0800a488 <_fflush_r>:
 800a488:	b538      	push	{r3, r4, r5, lr}
 800a48a:	690b      	ldr	r3, [r1, #16]
 800a48c:	4605      	mov	r5, r0
 800a48e:	460c      	mov	r4, r1
 800a490:	b913      	cbnz	r3, 800a498 <_fflush_r+0x10>
 800a492:	2500      	movs	r5, #0
 800a494:	4628      	mov	r0, r5
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	b118      	cbz	r0, 800a4a2 <_fflush_r+0x1a>
 800a49a:	6a03      	ldr	r3, [r0, #32]
 800a49c:	b90b      	cbnz	r3, 800a4a2 <_fflush_r+0x1a>
 800a49e:	f7fd f829 	bl	80074f4 <__sinit>
 800a4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d0f3      	beq.n	800a492 <_fflush_r+0xa>
 800a4aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a4ac:	07d0      	lsls	r0, r2, #31
 800a4ae:	d404      	bmi.n	800a4ba <_fflush_r+0x32>
 800a4b0:	0599      	lsls	r1, r3, #22
 800a4b2:	d402      	bmi.n	800a4ba <_fflush_r+0x32>
 800a4b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4b6:	f7fd fa3a 	bl	800792e <__retarget_lock_acquire_recursive>
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	4621      	mov	r1, r4
 800a4be:	f7ff ff5f 	bl	800a380 <__sflush_r>
 800a4c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4c4:	07da      	lsls	r2, r3, #31
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	d4e4      	bmi.n	800a494 <_fflush_r+0xc>
 800a4ca:	89a3      	ldrh	r3, [r4, #12]
 800a4cc:	059b      	lsls	r3, r3, #22
 800a4ce:	d4e1      	bmi.n	800a494 <_fflush_r+0xc>
 800a4d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4d2:	f7fd fa2d 	bl	8007930 <__retarget_lock_release_recursive>
 800a4d6:	e7dd      	b.n	800a494 <_fflush_r+0xc>

0800a4d8 <__swhatbuf_r>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	460c      	mov	r4, r1
 800a4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e0:	2900      	cmp	r1, #0
 800a4e2:	b096      	sub	sp, #88	@ 0x58
 800a4e4:	4615      	mov	r5, r2
 800a4e6:	461e      	mov	r6, r3
 800a4e8:	da0d      	bge.n	800a506 <__swhatbuf_r+0x2e>
 800a4ea:	89a3      	ldrh	r3, [r4, #12]
 800a4ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a4f0:	f04f 0100 	mov.w	r1, #0
 800a4f4:	bf14      	ite	ne
 800a4f6:	2340      	movne	r3, #64	@ 0x40
 800a4f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	6031      	str	r1, [r6, #0]
 800a500:	602b      	str	r3, [r5, #0]
 800a502:	b016      	add	sp, #88	@ 0x58
 800a504:	bd70      	pop	{r4, r5, r6, pc}
 800a506:	466a      	mov	r2, sp
 800a508:	f000 f874 	bl	800a5f4 <_fstat_r>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	dbec      	blt.n	800a4ea <__swhatbuf_r+0x12>
 800a510:	9901      	ldr	r1, [sp, #4]
 800a512:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a516:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a51a:	4259      	negs	r1, r3
 800a51c:	4159      	adcs	r1, r3
 800a51e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a522:	e7eb      	b.n	800a4fc <__swhatbuf_r+0x24>

0800a524 <__smakebuf_r>:
 800a524:	898b      	ldrh	r3, [r1, #12]
 800a526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a528:	079d      	lsls	r5, r3, #30
 800a52a:	4606      	mov	r6, r0
 800a52c:	460c      	mov	r4, r1
 800a52e:	d507      	bpl.n	800a540 <__smakebuf_r+0x1c>
 800a530:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a534:	6023      	str	r3, [r4, #0]
 800a536:	6123      	str	r3, [r4, #16]
 800a538:	2301      	movs	r3, #1
 800a53a:	6163      	str	r3, [r4, #20]
 800a53c:	b003      	add	sp, #12
 800a53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a540:	ab01      	add	r3, sp, #4
 800a542:	466a      	mov	r2, sp
 800a544:	f7ff ffc8 	bl	800a4d8 <__swhatbuf_r>
 800a548:	9f00      	ldr	r7, [sp, #0]
 800a54a:	4605      	mov	r5, r0
 800a54c:	4639      	mov	r1, r7
 800a54e:	4630      	mov	r0, r6
 800a550:	f7fe f8c2 	bl	80086d8 <_malloc_r>
 800a554:	b948      	cbnz	r0, 800a56a <__smakebuf_r+0x46>
 800a556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a55a:	059a      	lsls	r2, r3, #22
 800a55c:	d4ee      	bmi.n	800a53c <__smakebuf_r+0x18>
 800a55e:	f023 0303 	bic.w	r3, r3, #3
 800a562:	f043 0302 	orr.w	r3, r3, #2
 800a566:	81a3      	strh	r3, [r4, #12]
 800a568:	e7e2      	b.n	800a530 <__smakebuf_r+0xc>
 800a56a:	89a3      	ldrh	r3, [r4, #12]
 800a56c:	6020      	str	r0, [r4, #0]
 800a56e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a572:	81a3      	strh	r3, [r4, #12]
 800a574:	9b01      	ldr	r3, [sp, #4]
 800a576:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a57a:	b15b      	cbz	r3, 800a594 <__smakebuf_r+0x70>
 800a57c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a580:	4630      	mov	r0, r6
 800a582:	f000 f849 	bl	800a618 <_isatty_r>
 800a586:	b128      	cbz	r0, 800a594 <__smakebuf_r+0x70>
 800a588:	89a3      	ldrh	r3, [r4, #12]
 800a58a:	f023 0303 	bic.w	r3, r3, #3
 800a58e:	f043 0301 	orr.w	r3, r3, #1
 800a592:	81a3      	strh	r3, [r4, #12]
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	431d      	orrs	r5, r3
 800a598:	81a5      	strh	r5, [r4, #12]
 800a59a:	e7cf      	b.n	800a53c <__smakebuf_r+0x18>

0800a59c <memmove>:
 800a59c:	4288      	cmp	r0, r1
 800a59e:	b510      	push	{r4, lr}
 800a5a0:	eb01 0402 	add.w	r4, r1, r2
 800a5a4:	d902      	bls.n	800a5ac <memmove+0x10>
 800a5a6:	4284      	cmp	r4, r0
 800a5a8:	4623      	mov	r3, r4
 800a5aa:	d807      	bhi.n	800a5bc <memmove+0x20>
 800a5ac:	1e43      	subs	r3, r0, #1
 800a5ae:	42a1      	cmp	r1, r4
 800a5b0:	d008      	beq.n	800a5c4 <memmove+0x28>
 800a5b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5ba:	e7f8      	b.n	800a5ae <memmove+0x12>
 800a5bc:	4402      	add	r2, r0
 800a5be:	4601      	mov	r1, r0
 800a5c0:	428a      	cmp	r2, r1
 800a5c2:	d100      	bne.n	800a5c6 <memmove+0x2a>
 800a5c4:	bd10      	pop	{r4, pc}
 800a5c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5ce:	e7f7      	b.n	800a5c0 <memmove+0x24>

0800a5d0 <strncmp>:
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	b16a      	cbz	r2, 800a5f0 <strncmp+0x20>
 800a5d4:	3901      	subs	r1, #1
 800a5d6:	1884      	adds	r4, r0, r2
 800a5d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d103      	bne.n	800a5ec <strncmp+0x1c>
 800a5e4:	42a0      	cmp	r0, r4
 800a5e6:	d001      	beq.n	800a5ec <strncmp+0x1c>
 800a5e8:	2a00      	cmp	r2, #0
 800a5ea:	d1f5      	bne.n	800a5d8 <strncmp+0x8>
 800a5ec:	1ad0      	subs	r0, r2, r3
 800a5ee:	bd10      	pop	{r4, pc}
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	e7fc      	b.n	800a5ee <strncmp+0x1e>

0800a5f4 <_fstat_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4d07      	ldr	r5, [pc, #28]	@ (800a614 <_fstat_r+0x20>)
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	4608      	mov	r0, r1
 800a5fe:	4611      	mov	r1, r2
 800a600:	602b      	str	r3, [r5, #0]
 800a602:	f7f7 ff1d 	bl	8002440 <_fstat>
 800a606:	1c43      	adds	r3, r0, #1
 800a608:	d102      	bne.n	800a610 <_fstat_r+0x1c>
 800a60a:	682b      	ldr	r3, [r5, #0]
 800a60c:	b103      	cbz	r3, 800a610 <_fstat_r+0x1c>
 800a60e:	6023      	str	r3, [r4, #0]
 800a610:	bd38      	pop	{r3, r4, r5, pc}
 800a612:	bf00      	nop
 800a614:	20000548 	.word	0x20000548

0800a618 <_isatty_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4d06      	ldr	r5, [pc, #24]	@ (800a634 <_isatty_r+0x1c>)
 800a61c:	2300      	movs	r3, #0
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	602b      	str	r3, [r5, #0]
 800a624:	f7f7 ff1c 	bl	8002460 <_isatty>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d102      	bne.n	800a632 <_isatty_r+0x1a>
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	b103      	cbz	r3, 800a632 <_isatty_r+0x1a>
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	bd38      	pop	{r3, r4, r5, pc}
 800a634:	20000548 	.word	0x20000548

0800a638 <_sbrk_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4d06      	ldr	r5, [pc, #24]	@ (800a654 <_sbrk_r+0x1c>)
 800a63c:	2300      	movs	r3, #0
 800a63e:	4604      	mov	r4, r0
 800a640:	4608      	mov	r0, r1
 800a642:	602b      	str	r3, [r5, #0]
 800a644:	f7f7 ff24 	bl	8002490 <_sbrk>
 800a648:	1c43      	adds	r3, r0, #1
 800a64a:	d102      	bne.n	800a652 <_sbrk_r+0x1a>
 800a64c:	682b      	ldr	r3, [r5, #0]
 800a64e:	b103      	cbz	r3, 800a652 <_sbrk_r+0x1a>
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	bd38      	pop	{r3, r4, r5, pc}
 800a654:	20000548 	.word	0x20000548

0800a658 <memcpy>:
 800a658:	440a      	add	r2, r1
 800a65a:	4291      	cmp	r1, r2
 800a65c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a660:	d100      	bne.n	800a664 <memcpy+0xc>
 800a662:	4770      	bx	lr
 800a664:	b510      	push	{r4, lr}
 800a666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a66a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a66e:	4291      	cmp	r1, r2
 800a670:	d1f9      	bne.n	800a666 <memcpy+0xe>
 800a672:	bd10      	pop	{r4, pc}
 800a674:	0000      	movs	r0, r0
	...

0800a678 <nan>:
 800a678:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a680 <nan+0x8>
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	00000000 	.word	0x00000000
 800a684:	7ff80000 	.word	0x7ff80000

0800a688 <__assert_func>:
 800a688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a68a:	4614      	mov	r4, r2
 800a68c:	461a      	mov	r2, r3
 800a68e:	4b09      	ldr	r3, [pc, #36]	@ (800a6b4 <__assert_func+0x2c>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4605      	mov	r5, r0
 800a694:	68d8      	ldr	r0, [r3, #12]
 800a696:	b14c      	cbz	r4, 800a6ac <__assert_func+0x24>
 800a698:	4b07      	ldr	r3, [pc, #28]	@ (800a6b8 <__assert_func+0x30>)
 800a69a:	9100      	str	r1, [sp, #0]
 800a69c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6a0:	4906      	ldr	r1, [pc, #24]	@ (800a6bc <__assert_func+0x34>)
 800a6a2:	462b      	mov	r3, r5
 800a6a4:	f000 fba8 	bl	800adf8 <fiprintf>
 800a6a8:	f000 fbb8 	bl	800ae1c <abort>
 800a6ac:	4b04      	ldr	r3, [pc, #16]	@ (800a6c0 <__assert_func+0x38>)
 800a6ae:	461c      	mov	r4, r3
 800a6b0:	e7f3      	b.n	800a69a <__assert_func+0x12>
 800a6b2:	bf00      	nop
 800a6b4:	20000018 	.word	0x20000018
 800a6b8:	0800b152 	.word	0x0800b152
 800a6bc:	0800b15f 	.word	0x0800b15f
 800a6c0:	0800b18d 	.word	0x0800b18d

0800a6c4 <_calloc_r>:
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	fba1 5402 	umull	r5, r4, r1, r2
 800a6ca:	b934      	cbnz	r4, 800a6da <_calloc_r+0x16>
 800a6cc:	4629      	mov	r1, r5
 800a6ce:	f7fe f803 	bl	80086d8 <_malloc_r>
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	b928      	cbnz	r0, 800a6e2 <_calloc_r+0x1e>
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	bd70      	pop	{r4, r5, r6, pc}
 800a6da:	220c      	movs	r2, #12
 800a6dc:	6002      	str	r2, [r0, #0]
 800a6de:	2600      	movs	r6, #0
 800a6e0:	e7f9      	b.n	800a6d6 <_calloc_r+0x12>
 800a6e2:	462a      	mov	r2, r5
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	f7fd f8a5 	bl	8007834 <memset>
 800a6ea:	e7f4      	b.n	800a6d6 <_calloc_r+0x12>

0800a6ec <rshift>:
 800a6ec:	6903      	ldr	r3, [r0, #16]
 800a6ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a6f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a6fa:	f100 0414 	add.w	r4, r0, #20
 800a6fe:	dd45      	ble.n	800a78c <rshift+0xa0>
 800a700:	f011 011f 	ands.w	r1, r1, #31
 800a704:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a708:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a70c:	d10c      	bne.n	800a728 <rshift+0x3c>
 800a70e:	f100 0710 	add.w	r7, r0, #16
 800a712:	4629      	mov	r1, r5
 800a714:	42b1      	cmp	r1, r6
 800a716:	d334      	bcc.n	800a782 <rshift+0x96>
 800a718:	1a9b      	subs	r3, r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	1eea      	subs	r2, r5, #3
 800a71e:	4296      	cmp	r6, r2
 800a720:	bf38      	it	cc
 800a722:	2300      	movcc	r3, #0
 800a724:	4423      	add	r3, r4
 800a726:	e015      	b.n	800a754 <rshift+0x68>
 800a728:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a72c:	f1c1 0820 	rsb	r8, r1, #32
 800a730:	40cf      	lsrs	r7, r1
 800a732:	f105 0e04 	add.w	lr, r5, #4
 800a736:	46a1      	mov	r9, r4
 800a738:	4576      	cmp	r6, lr
 800a73a:	46f4      	mov	ip, lr
 800a73c:	d815      	bhi.n	800a76a <rshift+0x7e>
 800a73e:	1a9a      	subs	r2, r3, r2
 800a740:	0092      	lsls	r2, r2, #2
 800a742:	3a04      	subs	r2, #4
 800a744:	3501      	adds	r5, #1
 800a746:	42ae      	cmp	r6, r5
 800a748:	bf38      	it	cc
 800a74a:	2200      	movcc	r2, #0
 800a74c:	18a3      	adds	r3, r4, r2
 800a74e:	50a7      	str	r7, [r4, r2]
 800a750:	b107      	cbz	r7, 800a754 <rshift+0x68>
 800a752:	3304      	adds	r3, #4
 800a754:	1b1a      	subs	r2, r3, r4
 800a756:	42a3      	cmp	r3, r4
 800a758:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a75c:	bf08      	it	eq
 800a75e:	2300      	moveq	r3, #0
 800a760:	6102      	str	r2, [r0, #16]
 800a762:	bf08      	it	eq
 800a764:	6143      	streq	r3, [r0, #20]
 800a766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a76a:	f8dc c000 	ldr.w	ip, [ip]
 800a76e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a772:	ea4c 0707 	orr.w	r7, ip, r7
 800a776:	f849 7b04 	str.w	r7, [r9], #4
 800a77a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a77e:	40cf      	lsrs	r7, r1
 800a780:	e7da      	b.n	800a738 <rshift+0x4c>
 800a782:	f851 cb04 	ldr.w	ip, [r1], #4
 800a786:	f847 cf04 	str.w	ip, [r7, #4]!
 800a78a:	e7c3      	b.n	800a714 <rshift+0x28>
 800a78c:	4623      	mov	r3, r4
 800a78e:	e7e1      	b.n	800a754 <rshift+0x68>

0800a790 <__hexdig_fun>:
 800a790:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a794:	2b09      	cmp	r3, #9
 800a796:	d802      	bhi.n	800a79e <__hexdig_fun+0xe>
 800a798:	3820      	subs	r0, #32
 800a79a:	b2c0      	uxtb	r0, r0
 800a79c:	4770      	bx	lr
 800a79e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a7a2:	2b05      	cmp	r3, #5
 800a7a4:	d801      	bhi.n	800a7aa <__hexdig_fun+0x1a>
 800a7a6:	3847      	subs	r0, #71	@ 0x47
 800a7a8:	e7f7      	b.n	800a79a <__hexdig_fun+0xa>
 800a7aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a7ae:	2b05      	cmp	r3, #5
 800a7b0:	d801      	bhi.n	800a7b6 <__hexdig_fun+0x26>
 800a7b2:	3827      	subs	r0, #39	@ 0x27
 800a7b4:	e7f1      	b.n	800a79a <__hexdig_fun+0xa>
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	4770      	bx	lr
	...

0800a7bc <__gethex>:
 800a7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c0:	b085      	sub	sp, #20
 800a7c2:	468a      	mov	sl, r1
 800a7c4:	9302      	str	r3, [sp, #8]
 800a7c6:	680b      	ldr	r3, [r1, #0]
 800a7c8:	9001      	str	r0, [sp, #4]
 800a7ca:	4690      	mov	r8, r2
 800a7cc:	1c9c      	adds	r4, r3, #2
 800a7ce:	46a1      	mov	r9, r4
 800a7d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a7d4:	2830      	cmp	r0, #48	@ 0x30
 800a7d6:	d0fa      	beq.n	800a7ce <__gethex+0x12>
 800a7d8:	eba9 0303 	sub.w	r3, r9, r3
 800a7dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800a7e0:	f7ff ffd6 	bl	800a790 <__hexdig_fun>
 800a7e4:	4605      	mov	r5, r0
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	d168      	bne.n	800a8bc <__gethex+0x100>
 800a7ea:	49a0      	ldr	r1, [pc, #640]	@ (800aa6c <__gethex+0x2b0>)
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	4648      	mov	r0, r9
 800a7f0:	f7ff feee 	bl	800a5d0 <strncmp>
 800a7f4:	4607      	mov	r7, r0
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d167      	bne.n	800a8ca <__gethex+0x10e>
 800a7fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a7fe:	4626      	mov	r6, r4
 800a800:	f7ff ffc6 	bl	800a790 <__hexdig_fun>
 800a804:	2800      	cmp	r0, #0
 800a806:	d062      	beq.n	800a8ce <__gethex+0x112>
 800a808:	4623      	mov	r3, r4
 800a80a:	7818      	ldrb	r0, [r3, #0]
 800a80c:	2830      	cmp	r0, #48	@ 0x30
 800a80e:	4699      	mov	r9, r3
 800a810:	f103 0301 	add.w	r3, r3, #1
 800a814:	d0f9      	beq.n	800a80a <__gethex+0x4e>
 800a816:	f7ff ffbb 	bl	800a790 <__hexdig_fun>
 800a81a:	fab0 f580 	clz	r5, r0
 800a81e:	096d      	lsrs	r5, r5, #5
 800a820:	f04f 0b01 	mov.w	fp, #1
 800a824:	464a      	mov	r2, r9
 800a826:	4616      	mov	r6, r2
 800a828:	3201      	adds	r2, #1
 800a82a:	7830      	ldrb	r0, [r6, #0]
 800a82c:	f7ff ffb0 	bl	800a790 <__hexdig_fun>
 800a830:	2800      	cmp	r0, #0
 800a832:	d1f8      	bne.n	800a826 <__gethex+0x6a>
 800a834:	498d      	ldr	r1, [pc, #564]	@ (800aa6c <__gethex+0x2b0>)
 800a836:	2201      	movs	r2, #1
 800a838:	4630      	mov	r0, r6
 800a83a:	f7ff fec9 	bl	800a5d0 <strncmp>
 800a83e:	2800      	cmp	r0, #0
 800a840:	d13f      	bne.n	800a8c2 <__gethex+0x106>
 800a842:	b944      	cbnz	r4, 800a856 <__gethex+0x9a>
 800a844:	1c74      	adds	r4, r6, #1
 800a846:	4622      	mov	r2, r4
 800a848:	4616      	mov	r6, r2
 800a84a:	3201      	adds	r2, #1
 800a84c:	7830      	ldrb	r0, [r6, #0]
 800a84e:	f7ff ff9f 	bl	800a790 <__hexdig_fun>
 800a852:	2800      	cmp	r0, #0
 800a854:	d1f8      	bne.n	800a848 <__gethex+0x8c>
 800a856:	1ba4      	subs	r4, r4, r6
 800a858:	00a7      	lsls	r7, r4, #2
 800a85a:	7833      	ldrb	r3, [r6, #0]
 800a85c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a860:	2b50      	cmp	r3, #80	@ 0x50
 800a862:	d13e      	bne.n	800a8e2 <__gethex+0x126>
 800a864:	7873      	ldrb	r3, [r6, #1]
 800a866:	2b2b      	cmp	r3, #43	@ 0x2b
 800a868:	d033      	beq.n	800a8d2 <__gethex+0x116>
 800a86a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a86c:	d034      	beq.n	800a8d8 <__gethex+0x11c>
 800a86e:	1c71      	adds	r1, r6, #1
 800a870:	2400      	movs	r4, #0
 800a872:	7808      	ldrb	r0, [r1, #0]
 800a874:	f7ff ff8c 	bl	800a790 <__hexdig_fun>
 800a878:	1e43      	subs	r3, r0, #1
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	2b18      	cmp	r3, #24
 800a87e:	d830      	bhi.n	800a8e2 <__gethex+0x126>
 800a880:	f1a0 0210 	sub.w	r2, r0, #16
 800a884:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a888:	f7ff ff82 	bl	800a790 <__hexdig_fun>
 800a88c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a890:	fa5f fc8c 	uxtb.w	ip, ip
 800a894:	f1bc 0f18 	cmp.w	ip, #24
 800a898:	f04f 030a 	mov.w	r3, #10
 800a89c:	d91e      	bls.n	800a8dc <__gethex+0x120>
 800a89e:	b104      	cbz	r4, 800a8a2 <__gethex+0xe6>
 800a8a0:	4252      	negs	r2, r2
 800a8a2:	4417      	add	r7, r2
 800a8a4:	f8ca 1000 	str.w	r1, [sl]
 800a8a8:	b1ed      	cbz	r5, 800a8e6 <__gethex+0x12a>
 800a8aa:	f1bb 0f00 	cmp.w	fp, #0
 800a8ae:	bf0c      	ite	eq
 800a8b0:	2506      	moveq	r5, #6
 800a8b2:	2500      	movne	r5, #0
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	b005      	add	sp, #20
 800a8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8bc:	2500      	movs	r5, #0
 800a8be:	462c      	mov	r4, r5
 800a8c0:	e7b0      	b.n	800a824 <__gethex+0x68>
 800a8c2:	2c00      	cmp	r4, #0
 800a8c4:	d1c7      	bne.n	800a856 <__gethex+0x9a>
 800a8c6:	4627      	mov	r7, r4
 800a8c8:	e7c7      	b.n	800a85a <__gethex+0x9e>
 800a8ca:	464e      	mov	r6, r9
 800a8cc:	462f      	mov	r7, r5
 800a8ce:	2501      	movs	r5, #1
 800a8d0:	e7c3      	b.n	800a85a <__gethex+0x9e>
 800a8d2:	2400      	movs	r4, #0
 800a8d4:	1cb1      	adds	r1, r6, #2
 800a8d6:	e7cc      	b.n	800a872 <__gethex+0xb6>
 800a8d8:	2401      	movs	r4, #1
 800a8da:	e7fb      	b.n	800a8d4 <__gethex+0x118>
 800a8dc:	fb03 0002 	mla	r0, r3, r2, r0
 800a8e0:	e7ce      	b.n	800a880 <__gethex+0xc4>
 800a8e2:	4631      	mov	r1, r6
 800a8e4:	e7de      	b.n	800a8a4 <__gethex+0xe8>
 800a8e6:	eba6 0309 	sub.w	r3, r6, r9
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	2b07      	cmp	r3, #7
 800a8f0:	dc0a      	bgt.n	800a908 <__gethex+0x14c>
 800a8f2:	9801      	ldr	r0, [sp, #4]
 800a8f4:	f7fd ff7c 	bl	80087f0 <_Balloc>
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	b940      	cbnz	r0, 800a90e <__gethex+0x152>
 800a8fc:	4b5c      	ldr	r3, [pc, #368]	@ (800aa70 <__gethex+0x2b4>)
 800a8fe:	4602      	mov	r2, r0
 800a900:	21e4      	movs	r1, #228	@ 0xe4
 800a902:	485c      	ldr	r0, [pc, #368]	@ (800aa74 <__gethex+0x2b8>)
 800a904:	f7ff fec0 	bl	800a688 <__assert_func>
 800a908:	3101      	adds	r1, #1
 800a90a:	105b      	asrs	r3, r3, #1
 800a90c:	e7ef      	b.n	800a8ee <__gethex+0x132>
 800a90e:	f100 0a14 	add.w	sl, r0, #20
 800a912:	2300      	movs	r3, #0
 800a914:	4655      	mov	r5, sl
 800a916:	469b      	mov	fp, r3
 800a918:	45b1      	cmp	r9, r6
 800a91a:	d337      	bcc.n	800a98c <__gethex+0x1d0>
 800a91c:	f845 bb04 	str.w	fp, [r5], #4
 800a920:	eba5 050a 	sub.w	r5, r5, sl
 800a924:	10ad      	asrs	r5, r5, #2
 800a926:	6125      	str	r5, [r4, #16]
 800a928:	4658      	mov	r0, fp
 800a92a:	f7fe f853 	bl	80089d4 <__hi0bits>
 800a92e:	016d      	lsls	r5, r5, #5
 800a930:	f8d8 6000 	ldr.w	r6, [r8]
 800a934:	1a2d      	subs	r5, r5, r0
 800a936:	42b5      	cmp	r5, r6
 800a938:	dd54      	ble.n	800a9e4 <__gethex+0x228>
 800a93a:	1bad      	subs	r5, r5, r6
 800a93c:	4629      	mov	r1, r5
 800a93e:	4620      	mov	r0, r4
 800a940:	f7fe fbdf 	bl	8009102 <__any_on>
 800a944:	4681      	mov	r9, r0
 800a946:	b178      	cbz	r0, 800a968 <__gethex+0x1ac>
 800a948:	1e6b      	subs	r3, r5, #1
 800a94a:	1159      	asrs	r1, r3, #5
 800a94c:	f003 021f 	and.w	r2, r3, #31
 800a950:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a954:	f04f 0901 	mov.w	r9, #1
 800a958:	fa09 f202 	lsl.w	r2, r9, r2
 800a95c:	420a      	tst	r2, r1
 800a95e:	d003      	beq.n	800a968 <__gethex+0x1ac>
 800a960:	454b      	cmp	r3, r9
 800a962:	dc36      	bgt.n	800a9d2 <__gethex+0x216>
 800a964:	f04f 0902 	mov.w	r9, #2
 800a968:	4629      	mov	r1, r5
 800a96a:	4620      	mov	r0, r4
 800a96c:	f7ff febe 	bl	800a6ec <rshift>
 800a970:	442f      	add	r7, r5
 800a972:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a976:	42bb      	cmp	r3, r7
 800a978:	da42      	bge.n	800aa00 <__gethex+0x244>
 800a97a:	9801      	ldr	r0, [sp, #4]
 800a97c:	4621      	mov	r1, r4
 800a97e:	f7fd ff77 	bl	8008870 <_Bfree>
 800a982:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a984:	2300      	movs	r3, #0
 800a986:	6013      	str	r3, [r2, #0]
 800a988:	25a3      	movs	r5, #163	@ 0xa3
 800a98a:	e793      	b.n	800a8b4 <__gethex+0xf8>
 800a98c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a990:	2a2e      	cmp	r2, #46	@ 0x2e
 800a992:	d012      	beq.n	800a9ba <__gethex+0x1fe>
 800a994:	2b20      	cmp	r3, #32
 800a996:	d104      	bne.n	800a9a2 <__gethex+0x1e6>
 800a998:	f845 bb04 	str.w	fp, [r5], #4
 800a99c:	f04f 0b00 	mov.w	fp, #0
 800a9a0:	465b      	mov	r3, fp
 800a9a2:	7830      	ldrb	r0, [r6, #0]
 800a9a4:	9303      	str	r3, [sp, #12]
 800a9a6:	f7ff fef3 	bl	800a790 <__hexdig_fun>
 800a9aa:	9b03      	ldr	r3, [sp, #12]
 800a9ac:	f000 000f 	and.w	r0, r0, #15
 800a9b0:	4098      	lsls	r0, r3
 800a9b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	e7ae      	b.n	800a918 <__gethex+0x15c>
 800a9ba:	45b1      	cmp	r9, r6
 800a9bc:	d8ea      	bhi.n	800a994 <__gethex+0x1d8>
 800a9be:	492b      	ldr	r1, [pc, #172]	@ (800aa6c <__gethex+0x2b0>)
 800a9c0:	9303      	str	r3, [sp, #12]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f7ff fe03 	bl	800a5d0 <strncmp>
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d1e1      	bne.n	800a994 <__gethex+0x1d8>
 800a9d0:	e7a2      	b.n	800a918 <__gethex+0x15c>
 800a9d2:	1ea9      	subs	r1, r5, #2
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f7fe fb94 	bl	8009102 <__any_on>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d0c2      	beq.n	800a964 <__gethex+0x1a8>
 800a9de:	f04f 0903 	mov.w	r9, #3
 800a9e2:	e7c1      	b.n	800a968 <__gethex+0x1ac>
 800a9e4:	da09      	bge.n	800a9fa <__gethex+0x23e>
 800a9e6:	1b75      	subs	r5, r6, r5
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	9801      	ldr	r0, [sp, #4]
 800a9ec:	462a      	mov	r2, r5
 800a9ee:	f7fe f94f 	bl	8008c90 <__lshift>
 800a9f2:	1b7f      	subs	r7, r7, r5
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	f100 0a14 	add.w	sl, r0, #20
 800a9fa:	f04f 0900 	mov.w	r9, #0
 800a9fe:	e7b8      	b.n	800a972 <__gethex+0x1b6>
 800aa00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa04:	42bd      	cmp	r5, r7
 800aa06:	dd6f      	ble.n	800aae8 <__gethex+0x32c>
 800aa08:	1bed      	subs	r5, r5, r7
 800aa0a:	42ae      	cmp	r6, r5
 800aa0c:	dc34      	bgt.n	800aa78 <__gethex+0x2bc>
 800aa0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d022      	beq.n	800aa5c <__gethex+0x2a0>
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d024      	beq.n	800aa64 <__gethex+0x2a8>
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d115      	bne.n	800aa4a <__gethex+0x28e>
 800aa1e:	42ae      	cmp	r6, r5
 800aa20:	d113      	bne.n	800aa4a <__gethex+0x28e>
 800aa22:	2e01      	cmp	r6, #1
 800aa24:	d10b      	bne.n	800aa3e <__gethex+0x282>
 800aa26:	9a02      	ldr	r2, [sp, #8]
 800aa28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa2c:	6013      	str	r3, [r2, #0]
 800aa2e:	2301      	movs	r3, #1
 800aa30:	6123      	str	r3, [r4, #16]
 800aa32:	f8ca 3000 	str.w	r3, [sl]
 800aa36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa38:	2562      	movs	r5, #98	@ 0x62
 800aa3a:	601c      	str	r4, [r3, #0]
 800aa3c:	e73a      	b.n	800a8b4 <__gethex+0xf8>
 800aa3e:	1e71      	subs	r1, r6, #1
 800aa40:	4620      	mov	r0, r4
 800aa42:	f7fe fb5e 	bl	8009102 <__any_on>
 800aa46:	2800      	cmp	r0, #0
 800aa48:	d1ed      	bne.n	800aa26 <__gethex+0x26a>
 800aa4a:	9801      	ldr	r0, [sp, #4]
 800aa4c:	4621      	mov	r1, r4
 800aa4e:	f7fd ff0f 	bl	8008870 <_Bfree>
 800aa52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa54:	2300      	movs	r3, #0
 800aa56:	6013      	str	r3, [r2, #0]
 800aa58:	2550      	movs	r5, #80	@ 0x50
 800aa5a:	e72b      	b.n	800a8b4 <__gethex+0xf8>
 800aa5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1f3      	bne.n	800aa4a <__gethex+0x28e>
 800aa62:	e7e0      	b.n	800aa26 <__gethex+0x26a>
 800aa64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1dd      	bne.n	800aa26 <__gethex+0x26a>
 800aa6a:	e7ee      	b.n	800aa4a <__gethex+0x28e>
 800aa6c:	0800b137 	.word	0x0800b137
 800aa70:	0800b0cd 	.word	0x0800b0cd
 800aa74:	0800b18e 	.word	0x0800b18e
 800aa78:	1e6f      	subs	r7, r5, #1
 800aa7a:	f1b9 0f00 	cmp.w	r9, #0
 800aa7e:	d130      	bne.n	800aae2 <__gethex+0x326>
 800aa80:	b127      	cbz	r7, 800aa8c <__gethex+0x2d0>
 800aa82:	4639      	mov	r1, r7
 800aa84:	4620      	mov	r0, r4
 800aa86:	f7fe fb3c 	bl	8009102 <__any_on>
 800aa8a:	4681      	mov	r9, r0
 800aa8c:	117a      	asrs	r2, r7, #5
 800aa8e:	2301      	movs	r3, #1
 800aa90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aa94:	f007 071f 	and.w	r7, r7, #31
 800aa98:	40bb      	lsls	r3, r7
 800aa9a:	4213      	tst	r3, r2
 800aa9c:	4629      	mov	r1, r5
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	bf18      	it	ne
 800aaa2:	f049 0902 	orrne.w	r9, r9, #2
 800aaa6:	f7ff fe21 	bl	800a6ec <rshift>
 800aaaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800aaae:	1b76      	subs	r6, r6, r5
 800aab0:	2502      	movs	r5, #2
 800aab2:	f1b9 0f00 	cmp.w	r9, #0
 800aab6:	d047      	beq.n	800ab48 <__gethex+0x38c>
 800aab8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d015      	beq.n	800aaec <__gethex+0x330>
 800aac0:	2b03      	cmp	r3, #3
 800aac2:	d017      	beq.n	800aaf4 <__gethex+0x338>
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d109      	bne.n	800aadc <__gethex+0x320>
 800aac8:	f019 0f02 	tst.w	r9, #2
 800aacc:	d006      	beq.n	800aadc <__gethex+0x320>
 800aace:	f8da 3000 	ldr.w	r3, [sl]
 800aad2:	ea49 0903 	orr.w	r9, r9, r3
 800aad6:	f019 0f01 	tst.w	r9, #1
 800aada:	d10e      	bne.n	800aafa <__gethex+0x33e>
 800aadc:	f045 0510 	orr.w	r5, r5, #16
 800aae0:	e032      	b.n	800ab48 <__gethex+0x38c>
 800aae2:	f04f 0901 	mov.w	r9, #1
 800aae6:	e7d1      	b.n	800aa8c <__gethex+0x2d0>
 800aae8:	2501      	movs	r5, #1
 800aaea:	e7e2      	b.n	800aab2 <__gethex+0x2f6>
 800aaec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaee:	f1c3 0301 	rsb	r3, r3, #1
 800aaf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aaf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d0f0      	beq.n	800aadc <__gethex+0x320>
 800aafa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aafe:	f104 0314 	add.w	r3, r4, #20
 800ab02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ab06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ab0a:	f04f 0c00 	mov.w	ip, #0
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab14:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab18:	d01b      	beq.n	800ab52 <__gethex+0x396>
 800ab1a:	3201      	adds	r2, #1
 800ab1c:	6002      	str	r2, [r0, #0]
 800ab1e:	2d02      	cmp	r5, #2
 800ab20:	f104 0314 	add.w	r3, r4, #20
 800ab24:	d13c      	bne.n	800aba0 <__gethex+0x3e4>
 800ab26:	f8d8 2000 	ldr.w	r2, [r8]
 800ab2a:	3a01      	subs	r2, #1
 800ab2c:	42b2      	cmp	r2, r6
 800ab2e:	d109      	bne.n	800ab44 <__gethex+0x388>
 800ab30:	1171      	asrs	r1, r6, #5
 800ab32:	2201      	movs	r2, #1
 800ab34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab38:	f006 061f 	and.w	r6, r6, #31
 800ab3c:	fa02 f606 	lsl.w	r6, r2, r6
 800ab40:	421e      	tst	r6, r3
 800ab42:	d13a      	bne.n	800abba <__gethex+0x3fe>
 800ab44:	f045 0520 	orr.w	r5, r5, #32
 800ab48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab4a:	601c      	str	r4, [r3, #0]
 800ab4c:	9b02      	ldr	r3, [sp, #8]
 800ab4e:	601f      	str	r7, [r3, #0]
 800ab50:	e6b0      	b.n	800a8b4 <__gethex+0xf8>
 800ab52:	4299      	cmp	r1, r3
 800ab54:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab58:	d8d9      	bhi.n	800ab0e <__gethex+0x352>
 800ab5a:	68a3      	ldr	r3, [r4, #8]
 800ab5c:	459b      	cmp	fp, r3
 800ab5e:	db17      	blt.n	800ab90 <__gethex+0x3d4>
 800ab60:	6861      	ldr	r1, [r4, #4]
 800ab62:	9801      	ldr	r0, [sp, #4]
 800ab64:	3101      	adds	r1, #1
 800ab66:	f7fd fe43 	bl	80087f0 <_Balloc>
 800ab6a:	4681      	mov	r9, r0
 800ab6c:	b918      	cbnz	r0, 800ab76 <__gethex+0x3ba>
 800ab6e:	4b1a      	ldr	r3, [pc, #104]	@ (800abd8 <__gethex+0x41c>)
 800ab70:	4602      	mov	r2, r0
 800ab72:	2184      	movs	r1, #132	@ 0x84
 800ab74:	e6c5      	b.n	800a902 <__gethex+0x146>
 800ab76:	6922      	ldr	r2, [r4, #16]
 800ab78:	3202      	adds	r2, #2
 800ab7a:	f104 010c 	add.w	r1, r4, #12
 800ab7e:	0092      	lsls	r2, r2, #2
 800ab80:	300c      	adds	r0, #12
 800ab82:	f7ff fd69 	bl	800a658 <memcpy>
 800ab86:	4621      	mov	r1, r4
 800ab88:	9801      	ldr	r0, [sp, #4]
 800ab8a:	f7fd fe71 	bl	8008870 <_Bfree>
 800ab8e:	464c      	mov	r4, r9
 800ab90:	6923      	ldr	r3, [r4, #16]
 800ab92:	1c5a      	adds	r2, r3, #1
 800ab94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab98:	6122      	str	r2, [r4, #16]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	615a      	str	r2, [r3, #20]
 800ab9e:	e7be      	b.n	800ab1e <__gethex+0x362>
 800aba0:	6922      	ldr	r2, [r4, #16]
 800aba2:	455a      	cmp	r2, fp
 800aba4:	dd0b      	ble.n	800abbe <__gethex+0x402>
 800aba6:	2101      	movs	r1, #1
 800aba8:	4620      	mov	r0, r4
 800abaa:	f7ff fd9f 	bl	800a6ec <rshift>
 800abae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abb2:	3701      	adds	r7, #1
 800abb4:	42bb      	cmp	r3, r7
 800abb6:	f6ff aee0 	blt.w	800a97a <__gethex+0x1be>
 800abba:	2501      	movs	r5, #1
 800abbc:	e7c2      	b.n	800ab44 <__gethex+0x388>
 800abbe:	f016 061f 	ands.w	r6, r6, #31
 800abc2:	d0fa      	beq.n	800abba <__gethex+0x3fe>
 800abc4:	4453      	add	r3, sl
 800abc6:	f1c6 0620 	rsb	r6, r6, #32
 800abca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800abce:	f7fd ff01 	bl	80089d4 <__hi0bits>
 800abd2:	42b0      	cmp	r0, r6
 800abd4:	dbe7      	blt.n	800aba6 <__gethex+0x3ea>
 800abd6:	e7f0      	b.n	800abba <__gethex+0x3fe>
 800abd8:	0800b0cd 	.word	0x0800b0cd

0800abdc <L_shift>:
 800abdc:	f1c2 0208 	rsb	r2, r2, #8
 800abe0:	0092      	lsls	r2, r2, #2
 800abe2:	b570      	push	{r4, r5, r6, lr}
 800abe4:	f1c2 0620 	rsb	r6, r2, #32
 800abe8:	6843      	ldr	r3, [r0, #4]
 800abea:	6804      	ldr	r4, [r0, #0]
 800abec:	fa03 f506 	lsl.w	r5, r3, r6
 800abf0:	432c      	orrs	r4, r5
 800abf2:	40d3      	lsrs	r3, r2
 800abf4:	6004      	str	r4, [r0, #0]
 800abf6:	f840 3f04 	str.w	r3, [r0, #4]!
 800abfa:	4288      	cmp	r0, r1
 800abfc:	d3f4      	bcc.n	800abe8 <L_shift+0xc>
 800abfe:	bd70      	pop	{r4, r5, r6, pc}

0800ac00 <__match>:
 800ac00:	b530      	push	{r4, r5, lr}
 800ac02:	6803      	ldr	r3, [r0, #0]
 800ac04:	3301      	adds	r3, #1
 800ac06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac0a:	b914      	cbnz	r4, 800ac12 <__match+0x12>
 800ac0c:	6003      	str	r3, [r0, #0]
 800ac0e:	2001      	movs	r0, #1
 800ac10:	bd30      	pop	{r4, r5, pc}
 800ac12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ac1a:	2d19      	cmp	r5, #25
 800ac1c:	bf98      	it	ls
 800ac1e:	3220      	addls	r2, #32
 800ac20:	42a2      	cmp	r2, r4
 800ac22:	d0f0      	beq.n	800ac06 <__match+0x6>
 800ac24:	2000      	movs	r0, #0
 800ac26:	e7f3      	b.n	800ac10 <__match+0x10>

0800ac28 <__hexnan>:
 800ac28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2c:	680b      	ldr	r3, [r1, #0]
 800ac2e:	6801      	ldr	r1, [r0, #0]
 800ac30:	115e      	asrs	r6, r3, #5
 800ac32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac36:	f013 031f 	ands.w	r3, r3, #31
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	bf18      	it	ne
 800ac3e:	3604      	addne	r6, #4
 800ac40:	2500      	movs	r5, #0
 800ac42:	1f37      	subs	r7, r6, #4
 800ac44:	4682      	mov	sl, r0
 800ac46:	4690      	mov	r8, r2
 800ac48:	9301      	str	r3, [sp, #4]
 800ac4a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac4e:	46b9      	mov	r9, r7
 800ac50:	463c      	mov	r4, r7
 800ac52:	9502      	str	r5, [sp, #8]
 800ac54:	46ab      	mov	fp, r5
 800ac56:	784a      	ldrb	r2, [r1, #1]
 800ac58:	1c4b      	adds	r3, r1, #1
 800ac5a:	9303      	str	r3, [sp, #12]
 800ac5c:	b342      	cbz	r2, 800acb0 <__hexnan+0x88>
 800ac5e:	4610      	mov	r0, r2
 800ac60:	9105      	str	r1, [sp, #20]
 800ac62:	9204      	str	r2, [sp, #16]
 800ac64:	f7ff fd94 	bl	800a790 <__hexdig_fun>
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	d151      	bne.n	800ad10 <__hexnan+0xe8>
 800ac6c:	9a04      	ldr	r2, [sp, #16]
 800ac6e:	9905      	ldr	r1, [sp, #20]
 800ac70:	2a20      	cmp	r2, #32
 800ac72:	d818      	bhi.n	800aca6 <__hexnan+0x7e>
 800ac74:	9b02      	ldr	r3, [sp, #8]
 800ac76:	459b      	cmp	fp, r3
 800ac78:	dd13      	ble.n	800aca2 <__hexnan+0x7a>
 800ac7a:	454c      	cmp	r4, r9
 800ac7c:	d206      	bcs.n	800ac8c <__hexnan+0x64>
 800ac7e:	2d07      	cmp	r5, #7
 800ac80:	dc04      	bgt.n	800ac8c <__hexnan+0x64>
 800ac82:	462a      	mov	r2, r5
 800ac84:	4649      	mov	r1, r9
 800ac86:	4620      	mov	r0, r4
 800ac88:	f7ff ffa8 	bl	800abdc <L_shift>
 800ac8c:	4544      	cmp	r4, r8
 800ac8e:	d952      	bls.n	800ad36 <__hexnan+0x10e>
 800ac90:	2300      	movs	r3, #0
 800ac92:	f1a4 0904 	sub.w	r9, r4, #4
 800ac96:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac9a:	f8cd b008 	str.w	fp, [sp, #8]
 800ac9e:	464c      	mov	r4, r9
 800aca0:	461d      	mov	r5, r3
 800aca2:	9903      	ldr	r1, [sp, #12]
 800aca4:	e7d7      	b.n	800ac56 <__hexnan+0x2e>
 800aca6:	2a29      	cmp	r2, #41	@ 0x29
 800aca8:	d157      	bne.n	800ad5a <__hexnan+0x132>
 800acaa:	3102      	adds	r1, #2
 800acac:	f8ca 1000 	str.w	r1, [sl]
 800acb0:	f1bb 0f00 	cmp.w	fp, #0
 800acb4:	d051      	beq.n	800ad5a <__hexnan+0x132>
 800acb6:	454c      	cmp	r4, r9
 800acb8:	d206      	bcs.n	800acc8 <__hexnan+0xa0>
 800acba:	2d07      	cmp	r5, #7
 800acbc:	dc04      	bgt.n	800acc8 <__hexnan+0xa0>
 800acbe:	462a      	mov	r2, r5
 800acc0:	4649      	mov	r1, r9
 800acc2:	4620      	mov	r0, r4
 800acc4:	f7ff ff8a 	bl	800abdc <L_shift>
 800acc8:	4544      	cmp	r4, r8
 800acca:	d936      	bls.n	800ad3a <__hexnan+0x112>
 800accc:	f1a8 0204 	sub.w	r2, r8, #4
 800acd0:	4623      	mov	r3, r4
 800acd2:	f853 1b04 	ldr.w	r1, [r3], #4
 800acd6:	f842 1f04 	str.w	r1, [r2, #4]!
 800acda:	429f      	cmp	r7, r3
 800acdc:	d2f9      	bcs.n	800acd2 <__hexnan+0xaa>
 800acde:	1b3b      	subs	r3, r7, r4
 800ace0:	f023 0303 	bic.w	r3, r3, #3
 800ace4:	3304      	adds	r3, #4
 800ace6:	3401      	adds	r4, #1
 800ace8:	3e03      	subs	r6, #3
 800acea:	42b4      	cmp	r4, r6
 800acec:	bf88      	it	hi
 800acee:	2304      	movhi	r3, #4
 800acf0:	4443      	add	r3, r8
 800acf2:	2200      	movs	r2, #0
 800acf4:	f843 2b04 	str.w	r2, [r3], #4
 800acf8:	429f      	cmp	r7, r3
 800acfa:	d2fb      	bcs.n	800acf4 <__hexnan+0xcc>
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	b91b      	cbnz	r3, 800ad08 <__hexnan+0xe0>
 800ad00:	4547      	cmp	r7, r8
 800ad02:	d128      	bne.n	800ad56 <__hexnan+0x12e>
 800ad04:	2301      	movs	r3, #1
 800ad06:	603b      	str	r3, [r7, #0]
 800ad08:	2005      	movs	r0, #5
 800ad0a:	b007      	add	sp, #28
 800ad0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad10:	3501      	adds	r5, #1
 800ad12:	2d08      	cmp	r5, #8
 800ad14:	f10b 0b01 	add.w	fp, fp, #1
 800ad18:	dd06      	ble.n	800ad28 <__hexnan+0x100>
 800ad1a:	4544      	cmp	r4, r8
 800ad1c:	d9c1      	bls.n	800aca2 <__hexnan+0x7a>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad24:	2501      	movs	r5, #1
 800ad26:	3c04      	subs	r4, #4
 800ad28:	6822      	ldr	r2, [r4, #0]
 800ad2a:	f000 000f 	and.w	r0, r0, #15
 800ad2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ad32:	6020      	str	r0, [r4, #0]
 800ad34:	e7b5      	b.n	800aca2 <__hexnan+0x7a>
 800ad36:	2508      	movs	r5, #8
 800ad38:	e7b3      	b.n	800aca2 <__hexnan+0x7a>
 800ad3a:	9b01      	ldr	r3, [sp, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d0dd      	beq.n	800acfc <__hexnan+0xd4>
 800ad40:	f1c3 0320 	rsb	r3, r3, #32
 800ad44:	f04f 32ff 	mov.w	r2, #4294967295
 800ad48:	40da      	lsrs	r2, r3
 800ad4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ad4e:	4013      	ands	r3, r2
 800ad50:	f846 3c04 	str.w	r3, [r6, #-4]
 800ad54:	e7d2      	b.n	800acfc <__hexnan+0xd4>
 800ad56:	3f04      	subs	r7, #4
 800ad58:	e7d0      	b.n	800acfc <__hexnan+0xd4>
 800ad5a:	2004      	movs	r0, #4
 800ad5c:	e7d5      	b.n	800ad0a <__hexnan+0xe2>

0800ad5e <__ascii_mbtowc>:
 800ad5e:	b082      	sub	sp, #8
 800ad60:	b901      	cbnz	r1, 800ad64 <__ascii_mbtowc+0x6>
 800ad62:	a901      	add	r1, sp, #4
 800ad64:	b142      	cbz	r2, 800ad78 <__ascii_mbtowc+0x1a>
 800ad66:	b14b      	cbz	r3, 800ad7c <__ascii_mbtowc+0x1e>
 800ad68:	7813      	ldrb	r3, [r2, #0]
 800ad6a:	600b      	str	r3, [r1, #0]
 800ad6c:	7812      	ldrb	r2, [r2, #0]
 800ad6e:	1e10      	subs	r0, r2, #0
 800ad70:	bf18      	it	ne
 800ad72:	2001      	movne	r0, #1
 800ad74:	b002      	add	sp, #8
 800ad76:	4770      	bx	lr
 800ad78:	4610      	mov	r0, r2
 800ad7a:	e7fb      	b.n	800ad74 <__ascii_mbtowc+0x16>
 800ad7c:	f06f 0001 	mvn.w	r0, #1
 800ad80:	e7f8      	b.n	800ad74 <__ascii_mbtowc+0x16>

0800ad82 <_realloc_r>:
 800ad82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad86:	4607      	mov	r7, r0
 800ad88:	4614      	mov	r4, r2
 800ad8a:	460d      	mov	r5, r1
 800ad8c:	b921      	cbnz	r1, 800ad98 <_realloc_r+0x16>
 800ad8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad92:	4611      	mov	r1, r2
 800ad94:	f7fd bca0 	b.w	80086d8 <_malloc_r>
 800ad98:	b92a      	cbnz	r2, 800ada6 <_realloc_r+0x24>
 800ad9a:	f7fd fc29 	bl	80085f0 <_free_r>
 800ad9e:	4625      	mov	r5, r4
 800ada0:	4628      	mov	r0, r5
 800ada2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada6:	f000 f840 	bl	800ae2a <_malloc_usable_size_r>
 800adaa:	4284      	cmp	r4, r0
 800adac:	4606      	mov	r6, r0
 800adae:	d802      	bhi.n	800adb6 <_realloc_r+0x34>
 800adb0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adb4:	d8f4      	bhi.n	800ada0 <_realloc_r+0x1e>
 800adb6:	4621      	mov	r1, r4
 800adb8:	4638      	mov	r0, r7
 800adba:	f7fd fc8d 	bl	80086d8 <_malloc_r>
 800adbe:	4680      	mov	r8, r0
 800adc0:	b908      	cbnz	r0, 800adc6 <_realloc_r+0x44>
 800adc2:	4645      	mov	r5, r8
 800adc4:	e7ec      	b.n	800ada0 <_realloc_r+0x1e>
 800adc6:	42b4      	cmp	r4, r6
 800adc8:	4622      	mov	r2, r4
 800adca:	4629      	mov	r1, r5
 800adcc:	bf28      	it	cs
 800adce:	4632      	movcs	r2, r6
 800add0:	f7ff fc42 	bl	800a658 <memcpy>
 800add4:	4629      	mov	r1, r5
 800add6:	4638      	mov	r0, r7
 800add8:	f7fd fc0a 	bl	80085f0 <_free_r>
 800addc:	e7f1      	b.n	800adc2 <_realloc_r+0x40>

0800adde <__ascii_wctomb>:
 800adde:	4603      	mov	r3, r0
 800ade0:	4608      	mov	r0, r1
 800ade2:	b141      	cbz	r1, 800adf6 <__ascii_wctomb+0x18>
 800ade4:	2aff      	cmp	r2, #255	@ 0xff
 800ade6:	d904      	bls.n	800adf2 <__ascii_wctomb+0x14>
 800ade8:	228a      	movs	r2, #138	@ 0x8a
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	f04f 30ff 	mov.w	r0, #4294967295
 800adf0:	4770      	bx	lr
 800adf2:	700a      	strb	r2, [r1, #0]
 800adf4:	2001      	movs	r0, #1
 800adf6:	4770      	bx	lr

0800adf8 <fiprintf>:
 800adf8:	b40e      	push	{r1, r2, r3}
 800adfa:	b503      	push	{r0, r1, lr}
 800adfc:	4601      	mov	r1, r0
 800adfe:	ab03      	add	r3, sp, #12
 800ae00:	4805      	ldr	r0, [pc, #20]	@ (800ae18 <fiprintf+0x20>)
 800ae02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae06:	6800      	ldr	r0, [r0, #0]
 800ae08:	9301      	str	r3, [sp, #4]
 800ae0a:	f7ff f9a1 	bl	800a150 <_vfiprintf_r>
 800ae0e:	b002      	add	sp, #8
 800ae10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae14:	b003      	add	sp, #12
 800ae16:	4770      	bx	lr
 800ae18:	20000018 	.word	0x20000018

0800ae1c <abort>:
 800ae1c:	b508      	push	{r3, lr}
 800ae1e:	2006      	movs	r0, #6
 800ae20:	f000 f834 	bl	800ae8c <raise>
 800ae24:	2001      	movs	r0, #1
 800ae26:	f7f7 fabb 	bl	80023a0 <_exit>

0800ae2a <_malloc_usable_size_r>:
 800ae2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae2e:	1f18      	subs	r0, r3, #4
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	bfbc      	itt	lt
 800ae34:	580b      	ldrlt	r3, [r1, r0]
 800ae36:	18c0      	addlt	r0, r0, r3
 800ae38:	4770      	bx	lr

0800ae3a <_raise_r>:
 800ae3a:	291f      	cmp	r1, #31
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	4605      	mov	r5, r0
 800ae40:	460c      	mov	r4, r1
 800ae42:	d904      	bls.n	800ae4e <_raise_r+0x14>
 800ae44:	2316      	movs	r3, #22
 800ae46:	6003      	str	r3, [r0, #0]
 800ae48:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4c:	bd38      	pop	{r3, r4, r5, pc}
 800ae4e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae50:	b112      	cbz	r2, 800ae58 <_raise_r+0x1e>
 800ae52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae56:	b94b      	cbnz	r3, 800ae6c <_raise_r+0x32>
 800ae58:	4628      	mov	r0, r5
 800ae5a:	f000 f831 	bl	800aec0 <_getpid_r>
 800ae5e:	4622      	mov	r2, r4
 800ae60:	4601      	mov	r1, r0
 800ae62:	4628      	mov	r0, r5
 800ae64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae68:	f000 b818 	b.w	800ae9c <_kill_r>
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d00a      	beq.n	800ae86 <_raise_r+0x4c>
 800ae70:	1c59      	adds	r1, r3, #1
 800ae72:	d103      	bne.n	800ae7c <_raise_r+0x42>
 800ae74:	2316      	movs	r3, #22
 800ae76:	6003      	str	r3, [r0, #0]
 800ae78:	2001      	movs	r0, #1
 800ae7a:	e7e7      	b.n	800ae4c <_raise_r+0x12>
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae82:	4620      	mov	r0, r4
 800ae84:	4798      	blx	r3
 800ae86:	2000      	movs	r0, #0
 800ae88:	e7e0      	b.n	800ae4c <_raise_r+0x12>
	...

0800ae8c <raise>:
 800ae8c:	4b02      	ldr	r3, [pc, #8]	@ (800ae98 <raise+0xc>)
 800ae8e:	4601      	mov	r1, r0
 800ae90:	6818      	ldr	r0, [r3, #0]
 800ae92:	f7ff bfd2 	b.w	800ae3a <_raise_r>
 800ae96:	bf00      	nop
 800ae98:	20000018 	.word	0x20000018

0800ae9c <_kill_r>:
 800ae9c:	b538      	push	{r3, r4, r5, lr}
 800ae9e:	4d07      	ldr	r5, [pc, #28]	@ (800aebc <_kill_r+0x20>)
 800aea0:	2300      	movs	r3, #0
 800aea2:	4604      	mov	r4, r0
 800aea4:	4608      	mov	r0, r1
 800aea6:	4611      	mov	r1, r2
 800aea8:	602b      	str	r3, [r5, #0]
 800aeaa:	f7f7 fa69 	bl	8002380 <_kill>
 800aeae:	1c43      	adds	r3, r0, #1
 800aeb0:	d102      	bne.n	800aeb8 <_kill_r+0x1c>
 800aeb2:	682b      	ldr	r3, [r5, #0]
 800aeb4:	b103      	cbz	r3, 800aeb8 <_kill_r+0x1c>
 800aeb6:	6023      	str	r3, [r4, #0]
 800aeb8:	bd38      	pop	{r3, r4, r5, pc}
 800aeba:	bf00      	nop
 800aebc:	20000548 	.word	0x20000548

0800aec0 <_getpid_r>:
 800aec0:	f7f7 ba56 	b.w	8002370 <_getpid>

0800aec4 <_init>:
 800aec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec6:	bf00      	nop
 800aec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeca:	bc08      	pop	{r3}
 800aecc:	469e      	mov	lr, r3
 800aece:	4770      	bx	lr

0800aed0 <_fini>:
 800aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed2:	bf00      	nop
 800aed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aed6:	bc08      	pop	{r3}
 800aed8:	469e      	mov	lr, r3
 800aeda:	4770      	bx	lr
