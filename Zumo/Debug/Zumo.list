
Zumo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad6c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800af10  0800af10  0000bf10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b474  0800b474  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b474  0800b474  0000c474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b47c  0800b47c  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b47c  0800b47c  0000c47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b480  0800b480  0000c480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b484  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200001d4  0800b658  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  0800b658  0000d558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010315  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002222  00000000  00000000  0001d519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  0001f740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d02  00000000  00000000  000207b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017970  00000000  00000000  000214b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ad6  00000000  00000000  00038e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092859  00000000  00000000  0004b8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de151  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c84  00000000  00000000  000de194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e3e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aef4 	.word	0x0800aef4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800aef4 	.word	0x0800aef4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <HAL_UART_RxCpltCallback>:
// Callback function of UART interrupt
// MODIFIES: pitch, roll, state
// BT message format: P<ppp>,R<rrr>,S<s>
// where each p, r, and s is one digit in ASCII
// the first digit of pitch and roll indicates plus or minus, '1' for negative values
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	//HAL_UART_DMAPause(huart);
	if (huart->Instance == USART6) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a60      	ldr	r2, [pc, #384]	@ (80011c0 <HAL_UART_RxCpltCallback+0x190>)
 800103e:	4293      	cmp	r3, r2
 8001040:	f040 80b4 	bne.w	80011ac <HAL_UART_RxCpltCallback+0x17c>
		//HAL_UART_Transmit(&huart2, Data, 12, 1000);

		//Find the starting character: 'P'
		int index = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
		int if_error = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
		for (int i = 0; i < RX_BUF_SIZE; i++) {
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	e013      	b.n	800107a <HAL_UART_RxCpltCallback+0x4a>
			if (Data[i] == 'P')
 8001052:	4a5c      	ldr	r2, [pc, #368]	@ (80011c4 <HAL_UART_RxCpltCallback+0x194>)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b50      	cmp	r3, #80	@ 0x50
 800105c:	d101      	bne.n	8001062 <HAL_UART_RxCpltCallback+0x32>
				index = i;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	617b      	str	r3, [r7, #20]
			if(Data[i] > 'Z'){
 8001062:	4a58      	ldr	r2, [pc, #352]	@ (80011c4 <HAL_UART_RxCpltCallback+0x194>)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b5a      	cmp	r3, #90	@ 0x5a
 800106c:	d902      	bls.n	8001074 <HAL_UART_RxCpltCallback+0x44>
				if_error = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	613b      	str	r3, [r7, #16]
				break;
 8001072:	e005      	b.n	8001080 <HAL_UART_RxCpltCallback+0x50>
		for (int i = 0; i < RX_BUF_SIZE; i++) {
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b0b      	cmp	r3, #11
 800107e:	dde8      	ble.n	8001052 <HAL_UART_RxCpltCallback+0x22>
			}
		}

		if(!if_error){
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	2b00      	cmp	r3, #0
 8001084:	f040 8092 	bne.w	80011ac <HAL_UART_RxCpltCallback+0x17c>
			pitch = (Data[(2 + index) % RX_BUF_SIZE] - '0') * 10
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	1c99      	adds	r1, r3, #2
 800108c:	4b4e      	ldr	r3, [pc, #312]	@ (80011c8 <HAL_UART_RxCpltCallback+0x198>)
 800108e:	fb83 2301 	smull	r2, r3, r3, r1
 8001092:	105a      	asrs	r2, r3, #1
 8001094:	17cb      	asrs	r3, r1, #31
 8001096:	1ad2      	subs	r2, r2, r3
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	1aca      	subs	r2, r1, r3
 80010a2:	4b48      	ldr	r3, [pc, #288]	@ (80011c4 <HAL_UART_RxCpltCallback+0x194>)
 80010a4:	5c9b      	ldrb	r3, [r3, r2]
 80010a6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4618      	mov	r0, r3
					+ (Data[(3 + index) % RX_BUF_SIZE] - '0');
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	1cd9      	adds	r1, r3, #3
 80010b8:	4b43      	ldr	r3, [pc, #268]	@ (80011c8 <HAL_UART_RxCpltCallback+0x198>)
 80010ba:	fb83 2301 	smull	r2, r3, r3, r1
 80010be:	105a      	asrs	r2, r3, #1
 80010c0:	17cb      	asrs	r3, r1, #31
 80010c2:	1ad2      	subs	r2, r2, r3
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	1aca      	subs	r2, r1, r3
 80010ce:	4b3d      	ldr	r3, [pc, #244]	@ (80011c4 <HAL_UART_RxCpltCallback+0x194>)
 80010d0:	5c9b      	ldrb	r3, [r3, r2]
 80010d2:	3b30      	subs	r3, #48	@ 0x30
 80010d4:	4403      	add	r3, r0
			pitch = (Data[(2 + index) % RX_BUF_SIZE] - '0') * 10
 80010d6:	4a3d      	ldr	r2, [pc, #244]	@ (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 80010d8:	6013      	str	r3, [r2, #0]
			roll = (Data[(7 + index) % RX_BUF_SIZE] - '0') * 10
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	1dd9      	adds	r1, r3, #7
 80010de:	4b3a      	ldr	r3, [pc, #232]	@ (80011c8 <HAL_UART_RxCpltCallback+0x198>)
 80010e0:	fb83 2301 	smull	r2, r3, r3, r1
 80010e4:	105a      	asrs	r2, r3, #1
 80010e6:	17cb      	asrs	r3, r1, #31
 80010e8:	1ad2      	subs	r2, r2, r3
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	1aca      	subs	r2, r1, r3
 80010f4:	4b33      	ldr	r3, [pc, #204]	@ (80011c4 <HAL_UART_RxCpltCallback+0x194>)
 80010f6:	5c9b      	ldrb	r3, [r3, r2]
 80010f8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4618      	mov	r0, r3
					+ (Data[(8 + index) % RX_BUF_SIZE] - '0');
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f103 0108 	add.w	r1, r3, #8
 800110c:	4b2e      	ldr	r3, [pc, #184]	@ (80011c8 <HAL_UART_RxCpltCallback+0x198>)
 800110e:	fb83 2301 	smull	r2, r3, r3, r1
 8001112:	105a      	asrs	r2, r3, #1
 8001114:	17cb      	asrs	r3, r1, #31
 8001116:	1ad2      	subs	r2, r2, r3
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	1aca      	subs	r2, r1, r3
 8001122:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <HAL_UART_RxCpltCallback+0x194>)
 8001124:	5c9b      	ldrb	r3, [r3, r2]
 8001126:	3b30      	subs	r3, #48	@ 0x30
 8001128:	4403      	add	r3, r0
			roll = (Data[(7 + index) % RX_BUF_SIZE] - '0') * 10
 800112a:	4a29      	ldr	r2, [pc, #164]	@ (80011d0 <HAL_UART_RxCpltCallback+0x1a0>)
 800112c:	6013      	str	r3, [r2, #0]
			state = (Data[(11 + index) % RX_BUF_SIZE] - '0');
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f103 010b 	add.w	r1, r3, #11
 8001134:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <HAL_UART_RxCpltCallback+0x198>)
 8001136:	fb83 2301 	smull	r2, r3, r3, r1
 800113a:	105a      	asrs	r2, r3, #1
 800113c:	17cb      	asrs	r3, r1, #31
 800113e:	1ad2      	subs	r2, r2, r3
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	1aca      	subs	r2, r1, r3
 800114a:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <HAL_UART_RxCpltCallback+0x194>)
 800114c:	5c9b      	ldrb	r3, [r3, r2]
 800114e:	3b30      	subs	r3, #48	@ 0x30
 8001150:	4a20      	ldr	r2, [pc, #128]	@ (80011d4 <HAL_UART_RxCpltCallback+0x1a4>)
 8001152:	6013      	str	r3, [r2, #0]

			if (Data[(1 + index) % RX_BUF_SIZE] == '1')
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	1c59      	adds	r1, r3, #1
 8001158:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <HAL_UART_RxCpltCallback+0x198>)
 800115a:	fb83 2301 	smull	r2, r3, r3, r1
 800115e:	105a      	asrs	r2, r3, #1
 8001160:	17cb      	asrs	r3, r1, #31
 8001162:	1ad2      	subs	r2, r2, r3
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	1aca      	subs	r2, r1, r3
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <HAL_UART_RxCpltCallback+0x194>)
 8001170:	5c9b      	ldrb	r3, [r3, r2]
 8001172:	2b31      	cmp	r3, #49	@ 0x31
 8001174:	d104      	bne.n	8001180 <HAL_UART_RxCpltCallback+0x150>
				pitch *= (-1);
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	425b      	negs	r3, r3
 800117c:	4a13      	ldr	r2, [pc, #76]	@ (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 800117e:	6013      	str	r3, [r2, #0]
			if (Data[(6 + index) % RX_BUF_SIZE] == '1')
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	1d99      	adds	r1, r3, #6
 8001184:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <HAL_UART_RxCpltCallback+0x198>)
 8001186:	fb83 2301 	smull	r2, r3, r3, r1
 800118a:	105a      	asrs	r2, r3, #1
 800118c:	17cb      	asrs	r3, r1, #31
 800118e:	1ad2      	subs	r2, r2, r3
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	1aca      	subs	r2, r1, r3
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_UART_RxCpltCallback+0x194>)
 800119c:	5c9b      	ldrb	r3, [r3, r2]
 800119e:	2b31      	cmp	r3, #49	@ 0x31
 80011a0:	d104      	bne.n	80011ac <HAL_UART_RxCpltCallback+0x17c>
				roll *= (-1);
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <HAL_UART_RxCpltCallback+0x1a0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	425b      	negs	r3, r3
 80011a8:	4a09      	ldr	r2, [pc, #36]	@ (80011d0 <HAL_UART_RxCpltCallback+0x1a0>)
 80011aa:	6013      	str	r3, [r2, #0]
		}

	}
	//HAL_UART_DMAResume(huart);
	HAL_UART_Receive_DMA(&huart6, Data, RX_BUF_SIZE);
 80011ac:	220c      	movs	r2, #12
 80011ae:	4905      	ldr	r1, [pc, #20]	@ (80011c4 <HAL_UART_RxCpltCallback+0x194>)
 80011b0:	4809      	ldr	r0, [pc, #36]	@ (80011d8 <HAL_UART_RxCpltCallback+0x1a8>)
 80011b2:	f004 fd8e 	bl	8005cd2 <HAL_UART_Receive_DMA>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40011400 	.word	0x40011400
 80011c4:	200003e0 	.word	0x200003e0
 80011c8:	2aaaaaab 	.word	0x2aaaaaab
 80011cc:	200003c8 	.word	0x200003c8
 80011d0:	200003cc 	.word	0x200003cc
 80011d4:	200003d0 	.word	0x200003d0
 80011d8:	2000031c 	.word	0x2000031c

080011dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b08c      	sub	sp, #48	@ 0x30
 80011e0:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011e2:	f001 f9dd 	bl	80025a0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011e6:	f000 f971 	bl	80014cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011ea:	f000 fb7b 	bl	80018e4 <MX_GPIO_Init>
	MX_DMA_Init();
 80011ee:	f000 fb59 	bl	80018a4 <MX_DMA_Init>
	MX_I2C1_Init();
 80011f2:	f000 f9d7 	bl	80015a4 <MX_I2C1_Init>
	MX_TIM3_Init();
 80011f6:	f000 fa03 	bl	8001600 <MX_TIM3_Init>
	MX_TIM4_Init();
 80011fa:	f000 fa71 	bl	80016e0 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 80011fe:	f000 fafd 	bl	80017fc <MX_USART2_UART_Init>
	MX_USART6_UART_Init();
 8001202:	f000 fb25 	bl	8001850 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001206:	2104      	movs	r1, #4
 8001208:	4894      	ldr	r0, [pc, #592]	@ (800145c <main+0x280>)
 800120a:	f003 ff07 	bl	800501c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800120e:	2100      	movs	r1, #0
 8001210:	4893      	ldr	r0, [pc, #588]	@ (8001460 <main+0x284>)
 8001212:	f003 ff03 	bl	800501c <HAL_TIM_PWM_Start>
	//i2c_scan();
	init_accelerometer();
 8001216:	f000 fdb3 	bl	8001d80 <init_accelerometer>
	init_gyroscope();
 800121a:	f000 fdd9 	bl	8001dd0 <init_gyroscope>
	init_magnetometer();
 800121e:	f000 fd79 	bl	8001d14 <init_magnetometer>
	//HAL_UARTEx_ReceiveToIdle_IT(&huart6, Data, MAX_BUFFER_SIZE);
	//	while((*Trash) != 'P')
	//	{
	//		HAL_UART_Receive(&huart6, Trash, 1, HAL_MAX_DELAY);
	//	}
	HAL_UART_Receive_DMA(&huart6, Data, RX_BUF_SIZE);
 8001222:	220c      	movs	r2, #12
 8001224:	498f      	ldr	r1, [pc, #572]	@ (8001464 <main+0x288>)
 8001226:	4890      	ldr	r0, [pc, #576]	@ (8001468 <main+0x28c>)
 8001228:	f004 fd53 	bl	8005cd2 <HAL_UART_Receive_DMA>

	if (HAL_I2C_IsDeviceReady(&hi2c1, 0x6B << 1, 1, HAL_MAX_DELAY) == HAL_OK) {
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	2201      	movs	r2, #1
 8001232:	21d6      	movs	r1, #214	@ 0xd6
 8001234:	488d      	ldr	r0, [pc, #564]	@ (800146c <main+0x290>)
 8001236:	f002 fcd9 	bl	8003bec <HAL_I2C_IsDeviceReady>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d103      	bne.n	8001248 <main+0x6c>
		printf("L3GD20H detected at 0x6B\r\n");
 8001240:	488b      	ldr	r0, [pc, #556]	@ (8001470 <main+0x294>)
 8001242:	f006 fa0b 	bl	800765c <puts>
 8001246:	e002      	b.n	800124e <main+0x72>
	} else {
		printf("L3GD20H NOT detected!\r\n");
 8001248:	488a      	ldr	r0, [pc, #552]	@ (8001474 <main+0x298>)
 800124a:	f006 fa07 	bl	800765c <puts>
	}
	if (HAL_I2C_IsDeviceReady(&hi2c1, 0x1D << 1, 1, HAL_MAX_DELAY) == HAL_OK) {
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	2201      	movs	r2, #1
 8001254:	213a      	movs	r1, #58	@ 0x3a
 8001256:	4885      	ldr	r0, [pc, #532]	@ (800146c <main+0x290>)
 8001258:	f002 fcc8 	bl	8003bec <HAL_I2C_IsDeviceReady>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d103      	bne.n	800126a <main+0x8e>
		printf("LSM303D detected at 0x1D\r\n");
 8001262:	4885      	ldr	r0, [pc, #532]	@ (8001478 <main+0x29c>)
 8001264:	f006 f9fa 	bl	800765c <puts>
 8001268:	e002      	b.n	8001270 <main+0x94>
	} else {
		printf("LSM303D NOT detected!\r\n");
 800126a:	4884      	ldr	r0, [pc, #528]	@ (800147c <main+0x2a0>)
 800126c:	f006 f9f6 	bl	800765c <puts>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		int num1 = (pitch < 10 && pitch > -10) ? 0 : pitch;
 8001270:	4b83      	ldr	r3, [pc, #524]	@ (8001480 <main+0x2a4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b09      	cmp	r3, #9
 8001276:	dc04      	bgt.n	8001282 <main+0xa6>
 8001278:	4b81      	ldr	r3, [pc, #516]	@ (8001480 <main+0x2a4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f113 0f09 	cmn.w	r3, #9
 8001280:	da02      	bge.n	8001288 <main+0xac>
 8001282:	4b7f      	ldr	r3, [pc, #508]	@ (8001480 <main+0x2a4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	e000      	b.n	800128a <main+0xae>
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
		int num2 = (roll < 10 && roll > -10) ? 0 : roll;
 800128c:	4b7d      	ldr	r3, [pc, #500]	@ (8001484 <main+0x2a8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b09      	cmp	r3, #9
 8001292:	dc04      	bgt.n	800129e <main+0xc2>
 8001294:	4b7b      	ldr	r3, [pc, #492]	@ (8001484 <main+0x2a8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f113 0f09 	cmn.w	r3, #9
 800129c:	da02      	bge.n	80012a4 <main+0xc8>
 800129e:	4b79      	ldr	r3, [pc, #484]	@ (8001484 <main+0x2a8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	e000      	b.n	80012a6 <main+0xca>
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
		int num3 = state;
 80012a8:	4b77      	ldr	r3, [pc, #476]	@ (8001488 <main+0x2ac>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	617b      	str	r3, [r7, #20]
		// Emergency stop logic
		if (num3 == 1) {
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d10e      	bne.n	80012d2 <main+0xf6>
			vol = 0.0;
 80012b4:	4b75      	ldr	r3, [pc, #468]	@ (800148c <main+0x2b0>)
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
			num1 = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
			num2 = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
			set_pwm(0,0);
 80012c4:	eddf 0a72 	vldr	s1, [pc, #456]	@ 8001490 <main+0x2b4>
 80012c8:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 8001490 <main+0x2b4>
 80012cc:	f000 fda8 	bl	8001e20 <set_pwm>
 80012d0:	e025      	b.n	800131e <main+0x142>
			//				num1 = 0;
			//			}

			// Adjust the speed according to pitch (acceleration/deceleration)
			//printf("pitch:%d\r\n",num1);
			if (num1 > 1000)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012d8:	dd01      	ble.n	80012de <main+0x102>
			{
				while(1);
 80012da:	bf00      	nop
 80012dc:	e7fd      	b.n	80012da <main+0xfe>
			}
			vol = num1 * 18;
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f0:	4b66      	ldr	r3, [pc, #408]	@ (800148c <main+0x2b0>)
 80012f2:	edc3 7a00 	vstr	s15, [r3]
			curve_control((int)((float)num2 * 0.95f), vol);
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001300:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001494 <main+0x2b8>
 8001304:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001308:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800130c:	4b5f      	ldr	r3, [pc, #380]	@ (800148c <main+0x2b0>)
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	eeb0 0a67 	vmov.f32	s0, s15
 8001316:	ee17 0a10 	vmov	r0, s14
 800131a:	f000 fb75 	bl	8001a08 <curve_control>
//	  		}
//
//	  		// Set PWM values to motors using existing motor control function
//	  		set_pwm(left_pwm, right_pwm);
		//if(count == 10){
		c = 'S';
 800131e:	4b5e      	ldr	r3, [pc, #376]	@ (8001498 <main+0x2bc>)
 8001320:	2253      	movs	r2, #83	@ 0x53
 8001322:	701a      	strb	r2, [r3, #0]
		if (vol < 0)
 8001324:	4b59      	ldr	r3, [pc, #356]	@ (800148c <main+0x2b0>)
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	d503      	bpl.n	800133c <main+0x160>
			ca = '1';
 8001334:	4b59      	ldr	r3, [pc, #356]	@ (800149c <main+0x2c0>)
 8001336:	2231      	movs	r2, #49	@ 0x31
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	e002      	b.n	8001342 <main+0x166>
		else
			ca = '0';
 800133c:	4b57      	ldr	r3, [pc, #348]	@ (800149c <main+0x2c0>)
 800133e:	2230      	movs	r2, #48	@ 0x30
 8001340:	701a      	strb	r2, [r3, #0]

		int vol_int = floor(abs(vol));
 8001342:	4b52      	ldr	r3, [pc, #328]	@ (800148c <main+0x2b0>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134c:	ee17 3a90 	vmov	r3, s15
 8001350:	2b00      	cmp	r3, #0
 8001352:	bfb8      	it	lt
 8001354:	425b      	neglt	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f8ec 	bl	8000534 <__aeabi_i2d>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc00 	bl	8000b68 <__aeabi_d2iz>
 8001368:	4603      	mov	r3, r0
 800136a:	613b      	str	r3, [r7, #16]
		int cbb = (vol_int / 1000);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4a4c      	ldr	r2, [pc, #304]	@ (80014a0 <main+0x2c4>)
 8001370:	fb82 1203 	smull	r1, r2, r2, r3
 8001374:	1192      	asrs	r2, r2, #6
 8001376:	17db      	asrs	r3, r3, #31
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	60fb      	str	r3, [r7, #12]
		cb = cbb + '0';
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	3330      	adds	r3, #48	@ 0x30
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b47      	ldr	r3, [pc, #284]	@ (80014a4 <main+0x2c8>)
 8001386:	701a      	strb	r2, [r3, #0]
		int ccc = ((vol_int - cbb * 1000) / 100);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4a47      	ldr	r2, [pc, #284]	@ (80014a8 <main+0x2cc>)
 800138c:	fb03 f202 	mul.w	r2, r3, r2
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4413      	add	r3, r2
 8001394:	4a45      	ldr	r2, [pc, #276]	@ (80014ac <main+0x2d0>)
 8001396:	fb82 1203 	smull	r1, r2, r2, r3
 800139a:	1152      	asrs	r2, r2, #5
 800139c:	17db      	asrs	r3, r3, #31
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	60bb      	str	r3, [r7, #8]
		cc = ccc + '0';
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	3330      	adds	r3, #48	@ 0x30
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b41      	ldr	r3, [pc, #260]	@ (80014b0 <main+0x2d4>)
 80013ac:	701a      	strb	r2, [r3, #0]
		int cdd = ((vol_int - cbb * 1000 - ccc * 100) / 10);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4a3d      	ldr	r2, [pc, #244]	@ (80014a8 <main+0x2cc>)
 80013b2:	fb03 f202 	mul.w	r2, r3, r2
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	441a      	add	r2, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 80013c0:	fb01 f303 	mul.w	r3, r1, r3
 80013c4:	4413      	add	r3, r2
 80013c6:	4a3b      	ldr	r2, [pc, #236]	@ (80014b4 <main+0x2d8>)
 80013c8:	fb82 1203 	smull	r1, r2, r2, r3
 80013cc:	1092      	asrs	r2, r2, #2
 80013ce:	17db      	asrs	r3, r3, #31
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	607b      	str	r3, [r7, #4]
		cd = cdd + '0';
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	3330      	adds	r3, #48	@ 0x30
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b36      	ldr	r3, [pc, #216]	@ (80014b8 <main+0x2dc>)
 80013de:	701a      	strb	r2, [r3, #0]
		int cee = (vol_int - cbb * 1000 - ccc * 100 - 10 * cdd);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4a31      	ldr	r2, [pc, #196]	@ (80014a8 <main+0x2cc>)
 80013e4:	fb03 f202 	mul.w	r2, r3, r2
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	441a      	add	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 80013f2:	fb01 f303 	mul.w	r3, r1, r3
 80013f6:	441a      	add	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f06f 0109 	mvn.w	r1, #9
 80013fe:	fb01 f303 	mul.w	r3, r1, r3
 8001402:	4413      	add	r3, r2
 8001404:	603b      	str	r3, [r7, #0]
		ce = cee + '0';
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	3330      	adds	r3, #48	@ 0x30
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <main+0x2e0>)
 8001410:	701a      	strb	r2, [r3, #0]

		sprintf(bt_str, "%c%c%c%c%c%c", c, ca, cb, cc, cd, ce);
 8001412:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <main+0x2bc>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461c      	mov	r4, r3
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <main+0x2c0>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461d      	mov	r5, r3
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <main+0x2c8>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <main+0x2d4>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <main+0x2dc>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <main+0x2e0>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	9303      	str	r3, [sp, #12]
 8001436:	9002      	str	r0, [sp, #8]
 8001438:	9101      	str	r1, [sp, #4]
 800143a:	9200      	str	r2, [sp, #0]
 800143c:	462b      	mov	r3, r5
 800143e:	4622      	mov	r2, r4
 8001440:	491f      	ldr	r1, [pc, #124]	@ (80014c0 <main+0x2e4>)
 8001442:	4820      	ldr	r0, [pc, #128]	@ (80014c4 <main+0x2e8>)
 8001444:	f006 f912 	bl	800766c <siprintf>
		//printf("%c%c%c%c%c%c\r\n",c,ca,cb,cc,cd,ce);

		count = 0;
 8001448:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <main+0x2ec>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
		BT_Transmit(bt_str);
 800144e:	481d      	ldr	r0, [pc, #116]	@ (80014c4 <main+0x2e8>)
 8001450:	f000 fd58 	bl	8001f04 <BT_Transmit>
		//}
		//count++;
		// Delay to maintain loop responsiveness (e.g., 10 ms per loop)
		HAL_Delay(10);  // Keep loop responsive
 8001454:	200a      	movs	r0, #10
 8001456:	f001 f915 	bl	8002684 <HAL_Delay>
	while (1) {
 800145a:	e709      	b.n	8001270 <main+0x94>
 800145c:	20000244 	.word	0x20000244
 8001460:	2000028c 	.word	0x2000028c
 8001464:	200003e0 	.word	0x200003e0
 8001468:	2000031c 	.word	0x2000031c
 800146c:	200001f0 	.word	0x200001f0
 8001470:	0800af6c 	.word	0x0800af6c
 8001474:	0800af88 	.word	0x0800af88
 8001478:	0800afa0 	.word	0x0800afa0
 800147c:	0800afbc 	.word	0x0800afbc
 8001480:	200003c8 	.word	0x200003c8
 8001484:	200003cc 	.word	0x200003cc
 8001488:	200003d0 	.word	0x200003d0
 800148c:	200003c4 	.word	0x200003c4
 8001490:	00000000 	.word	0x00000000
 8001494:	3f733333 	.word	0x3f733333
 8001498:	200003d9 	.word	0x200003d9
 800149c:	200003d4 	.word	0x200003d4
 80014a0:	10624dd3 	.word	0x10624dd3
 80014a4:	200003d5 	.word	0x200003d5
 80014a8:	fffffc18 	.word	0xfffffc18
 80014ac:	51eb851f 	.word	0x51eb851f
 80014b0:	200003d6 	.word	0x200003d6
 80014b4:	66666667 	.word	0x66666667
 80014b8:	200003d7 	.word	0x200003d7
 80014bc:	200003d8 	.word	0x200003d8
 80014c0:	0800afd4 	.word	0x0800afd4
 80014c4:	200003ec 	.word	0x200003ec
 80014c8:	200003dc 	.word	0x200003dc

080014cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b094      	sub	sp, #80	@ 0x50
 80014d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	2230      	movs	r2, #48	@ 0x30
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f006 f9c0 	bl	8007860 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	4b29      	ldr	r3, [pc, #164]	@ (800159c <SystemClock_Config+0xd0>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	4a28      	ldr	r2, [pc, #160]	@ (800159c <SystemClock_Config+0xd0>)
 80014fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001500:	4b26      	ldr	r3, [pc, #152]	@ (800159c <SystemClock_Config+0xd0>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <SystemClock_Config+0xd4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001518:	4a21      	ldr	r2, [pc, #132]	@ (80015a0 <SystemClock_Config+0xd4>)
 800151a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <SystemClock_Config+0xd4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800152c:	2302      	movs	r3, #2
 800152e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001534:	2310      	movs	r3, #16
 8001536:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001538:	2302      	movs	r3, #2
 800153a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800153c:	2300      	movs	r3, #0
 800153e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001540:	2310      	movs	r3, #16
 8001542:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001544:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001548:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800154a:	2304      	movs	r3, #4
 800154c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800154e:	2307      	movs	r3, #7
 8001550:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001552:	f107 0320 	add.w	r3, r7, #32
 8001556:	4618      	mov	r0, r3
 8001558:	f003 f82a 	bl	80045b0 <HAL_RCC_OscConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0x9a>
		Error_Handler();
 8001562:	f000 fcf7 	bl	8001f54 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001566:	230f      	movs	r3, #15
 8001568:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156a:	2302      	movs	r3, #2
 800156c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800156e:	2390      	movs	r3, #144	@ 0x90
 8001570:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001576:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f003 fa8c 	bl	8004aa0 <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0xc6>
		Error_Handler();
 800158e:	f000 fce1 	bl	8001f54 <Error_Handler>
	}
}
 8001592:	bf00      	nop
 8001594:	3750      	adds	r7, #80	@ 0x50
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40007000 	.word	0x40007000

080015a4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015aa:	4a13      	ldr	r2, [pc, #76]	@ (80015f8 <MX_I2C1_Init+0x54>)
 80015ac:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015b0:	4a12      	ldr	r2, [pc, #72]	@ (80015fc <MX_I2C1_Init+0x58>)
 80015b2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015c6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d4:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80015e0:	4804      	ldr	r0, [pc, #16]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015e2:	f001 fe93 	bl	800330c <HAL_I2C_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80015ec:	f000 fcb2 	bl	8001f54 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200001f0 	.word	0x200001f0
 80015f8:	40005400 	.word	0x40005400
 80015fc:	00061a80 	.word	0x00061a80

08001600 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001606:	f107 0320 	add.w	r3, r7, #32
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]
 800161e:	615a      	str	r2, [r3, #20]
 8001620:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001622:	4b2d      	ldr	r3, [pc, #180]	@ (80016d8 <MX_TIM3_Init+0xd8>)
 8001624:	4a2d      	ldr	r2, [pc, #180]	@ (80016dc <MX_TIM3_Init+0xdc>)
 8001626:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84;
 8001628:	4b2b      	ldr	r3, [pc, #172]	@ (80016d8 <MX_TIM3_Init+0xd8>)
 800162a:	2254      	movs	r2, #84	@ 0x54
 800162c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b2a      	ldr	r3, [pc, #168]	@ (80016d8 <MX_TIM3_Init+0xd8>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 8001634:	4b28      	ldr	r3, [pc, #160]	@ (80016d8 <MX_TIM3_Init+0xd8>)
 8001636:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800163a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163c:	4b26      	ldr	r3, [pc, #152]	@ (80016d8 <MX_TIM3_Init+0xd8>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001642:	4b25      	ldr	r3, [pc, #148]	@ (80016d8 <MX_TIM3_Init+0xd8>)
 8001644:	2280      	movs	r2, #128	@ 0x80
 8001646:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001648:	4823      	ldr	r0, [pc, #140]	@ (80016d8 <MX_TIM3_Init+0xd8>)
 800164a:	f003 fc98 	bl	8004f7e <HAL_TIM_PWM_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM3_Init+0x58>
		Error_Handler();
 8001654:	f000 fc7e 	bl	8001f54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001660:	f107 0320 	add.w	r3, r7, #32
 8001664:	4619      	mov	r1, r3
 8001666:	481c      	ldr	r0, [pc, #112]	@ (80016d8 <MX_TIM3_Init+0xd8>)
 8001668:	f004 f9ea 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8001672:	f000 fc6f 	bl	8001f54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001676:	2360      	movs	r3, #96	@ 0x60
 8001678:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2204      	movs	r2, #4
 800168a:	4619      	mov	r1, r3
 800168c:	4812      	ldr	r0, [pc, #72]	@ (80016d8 <MX_TIM3_Init+0xd8>)
 800168e:	f003 fd75 	bl	800517c <HAL_TIM_PWM_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8001698:	f000 fc5c 	bl	8001f54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800169c:	2360      	movs	r3, #96	@ 0x60
 800169e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	2204      	movs	r2, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4809      	ldr	r0, [pc, #36]	@ (80016d8 <MX_TIM3_Init+0xd8>)
 80016b4:	f003 fd62 	bl	800517c <HAL_TIM_PWM_ConfigChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM3_Init+0xc2>
			!= HAL_OK) {
		Error_Handler();
 80016be:	f000 fc49 	bl	8001f54 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016c2:	2104      	movs	r1, #4
 80016c4:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <MX_TIM3_Init+0xd8>)
 80016c6:	f003 fca9 	bl	800501c <HAL_TIM_PWM_Start>
	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80016ca:	4803      	ldr	r0, [pc, #12]	@ (80016d8 <MX_TIM3_Init+0xd8>)
 80016cc:	f000 fcfc 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	@ 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000244 	.word	0x20000244
 80016dc:	40000400 	.word	0x40000400

080016e0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08e      	sub	sp, #56	@ 0x38
 80016e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
 800170c:	615a      	str	r2, [r3, #20]
 800170e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001710:	4b38      	ldr	r3, [pc, #224]	@ (80017f4 <MX_TIM4_Init+0x114>)
 8001712:	4a39      	ldr	r2, [pc, #228]	@ (80017f8 <MX_TIM4_Init+0x118>)
 8001714:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 84;
 8001716:	4b37      	ldr	r3, [pc, #220]	@ (80017f4 <MX_TIM4_Init+0x114>)
 8001718:	2254      	movs	r2, #84	@ 0x54
 800171a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171c:	4b35      	ldr	r3, [pc, #212]	@ (80017f4 <MX_TIM4_Init+0x114>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1000;
 8001722:	4b34      	ldr	r3, [pc, #208]	@ (80017f4 <MX_TIM4_Init+0x114>)
 8001724:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001728:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172a:	4b32      	ldr	r3, [pc, #200]	@ (80017f4 <MX_TIM4_Init+0x114>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001730:	4b30      	ldr	r3, [pc, #192]	@ (80017f4 <MX_TIM4_Init+0x114>)
 8001732:	2280      	movs	r2, #128	@ 0x80
 8001734:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001736:	482f      	ldr	r0, [pc, #188]	@ (80017f4 <MX_TIM4_Init+0x114>)
 8001738:	f003 fbd2 	bl	8004ee0 <HAL_TIM_Base_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM4_Init+0x66>
		Error_Handler();
 8001742:	f000 fc07 	bl	8001f54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800174c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001750:	4619      	mov	r1, r3
 8001752:	4828      	ldr	r0, [pc, #160]	@ (80017f4 <MX_TIM4_Init+0x114>)
 8001754:	f003 fdd4 	bl	8005300 <HAL_TIM_ConfigClockSource>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM4_Init+0x82>
		Error_Handler();
 800175e:	f000 fbf9 	bl	8001f54 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001762:	4824      	ldr	r0, [pc, #144]	@ (80017f4 <MX_TIM4_Init+0x114>)
 8001764:	f003 fc0b 	bl	8004f7e <HAL_TIM_PWM_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM4_Init+0x92>
		Error_Handler();
 800176e:	f000 fbf1 	bl	8001f54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800177a:	f107 0320 	add.w	r3, r7, #32
 800177e:	4619      	mov	r1, r3
 8001780:	481c      	ldr	r0, [pc, #112]	@ (80017f4 <MX_TIM4_Init+0x114>)
 8001782:	f004 f95d 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 800178c:	f000 fbe2 	bl	8001f54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001790:	2360      	movs	r3, #96	@ 0x60
 8001792:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	2200      	movs	r2, #0
 80017a4:	4619      	mov	r1, r3
 80017a6:	4813      	ldr	r0, [pc, #76]	@ (80017f4 <MX_TIM4_Init+0x114>)
 80017a8:	f003 fce8 	bl	800517c <HAL_TIM_PWM_ConfigChannel>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80017b2:	f000 fbcf 	bl	8001f54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b6:	2360      	movs	r3, #96	@ 0x60
 80017b8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	4619      	mov	r1, r3
 80017cc:	4809      	ldr	r0, [pc, #36]	@ (80017f4 <MX_TIM4_Init+0x114>)
 80017ce:	f003 fcd5 	bl	800517c <HAL_TIM_PWM_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM4_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 80017d8:	f000 fbbc 	bl	8001f54 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80017dc:	2100      	movs	r1, #0
 80017de:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <MX_TIM4_Init+0x114>)
 80017e0:	f003 fc1c 	bl	800501c <HAL_TIM_PWM_Start>
	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80017e4:	4803      	ldr	r0, [pc, #12]	@ (80017f4 <MX_TIM4_Init+0x114>)
 80017e6:	f000 fc6f 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 80017ea:	bf00      	nop
 80017ec:	3738      	adds	r7, #56	@ 0x38
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000028c 	.word	0x2000028c
 80017f8:	40000800 	.word	0x40000800

080017fc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <MX_USART2_UART_Init+0x4c>)
 8001802:	4a12      	ldr	r2, [pc, #72]	@ (800184c <MX_USART2_UART_Init+0x50>)
 8001804:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <MX_USART2_UART_Init+0x4c>)
 8001808:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800180c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <MX_USART2_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <MX_USART2_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <MX_USART2_UART_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001820:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <MX_USART2_UART_Init+0x4c>)
 8001822:	220c      	movs	r2, #12
 8001824:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <MX_USART2_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <MX_USART2_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001832:	4805      	ldr	r0, [pc, #20]	@ (8001848 <MX_USART2_UART_Init+0x4c>)
 8001834:	f004 f972 	bl	8005b1c <HAL_UART_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800183e:	f000 fb89 	bl	8001f54 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200002d4 	.word	0x200002d4
 800184c:	40004400 	.word	0x40004400

08001850 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <MX_USART6_UART_Init+0x4c>)
 8001856:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <MX_USART6_UART_Init+0x50>)
 8001858:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <MX_USART6_UART_Init+0x4c>)
 800185c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001860:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <MX_USART6_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <MX_USART6_UART_Init+0x4c>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800186e:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <MX_USART6_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b09      	ldr	r3, [pc, #36]	@ (800189c <MX_USART6_UART_Init+0x4c>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b08      	ldr	r3, [pc, #32]	@ (800189c <MX_USART6_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	4b06      	ldr	r3, [pc, #24]	@ (800189c <MX_USART6_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8001886:	4805      	ldr	r0, [pc, #20]	@ (800189c <MX_USART6_UART_Init+0x4c>)
 8001888:	f004 f948 	bl	8005b1c <HAL_UART_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8001892:	f000 fb5f 	bl	8001f54 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000031c 	.word	0x2000031c
 80018a0:	40011400 	.word	0x40011400

080018a4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <MX_DMA_Init+0x3c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <MX_DMA_Init+0x3c>)
 80018b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <MX_DMA_Init+0x3c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2039      	movs	r0, #57	@ 0x39
 80018cc:	f000 ffd9 	bl	8002882 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80018d0:	2039      	movs	r0, #57	@ 0x39
 80018d2:	f000 fff2 	bl	80028ba <HAL_NVIC_EnableIRQ>

}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	@ 0x28
 80018e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b3e      	ldr	r3, [pc, #248]	@ (80019f8 <MX_GPIO_Init+0x114>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	4a3d      	ldr	r2, [pc, #244]	@ (80019f8 <MX_GPIO_Init+0x114>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6313      	str	r3, [r2, #48]	@ 0x30
 800190a:	4b3b      	ldr	r3, [pc, #236]	@ (80019f8 <MX_GPIO_Init+0x114>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b37      	ldr	r3, [pc, #220]	@ (80019f8 <MX_GPIO_Init+0x114>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	4a36      	ldr	r2, [pc, #216]	@ (80019f8 <MX_GPIO_Init+0x114>)
 8001920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001924:	6313      	str	r3, [r2, #48]	@ 0x30
 8001926:	4b34      	ldr	r3, [pc, #208]	@ (80019f8 <MX_GPIO_Init+0x114>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	4b30      	ldr	r3, [pc, #192]	@ (80019f8 <MX_GPIO_Init+0x114>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a2f      	ldr	r2, [pc, #188]	@ (80019f8 <MX_GPIO_Init+0x114>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b2d      	ldr	r3, [pc, #180]	@ (80019f8 <MX_GPIO_Init+0x114>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b29      	ldr	r3, [pc, #164]	@ (80019f8 <MX_GPIO_Init+0x114>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	4a28      	ldr	r2, [pc, #160]	@ (80019f8 <MX_GPIO_Init+0x114>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	@ 0x30
 800195e:	4b26      	ldr	r3, [pc, #152]	@ (80019f8 <MX_GPIO_Init+0x114>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001970:	4822      	ldr	r0, [pc, #136]	@ (80019fc <MX_GPIO_Init+0x118>)
 8001972:	f001 fcb1 	bl	80032d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001976:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800197a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800197c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001980:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	481c      	ldr	r0, [pc, #112]	@ (8001a00 <MX_GPIO_Init+0x11c>)
 800198e:	f001 fb1f 	bl	8002fd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA8 PA9 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_8 | GPIO_PIN_9;
 8001992:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001996:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	4814      	ldr	r0, [pc, #80]	@ (80019fc <MX_GPIO_Init+0x118>)
 80019ac:	f001 fb10 	bl	8002fd0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	// TIM3_CH2 -> PC7
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019b0:	2380      	movs	r3, #128	@ 0x80
 80019b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019c0:	2302      	movs	r3, #2
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	480d      	ldr	r0, [pc, #52]	@ (8001a00 <MX_GPIO_Init+0x11c>)
 80019cc:	f001 fb00 	bl	8002fd0 <HAL_GPIO_Init>

	// TIM4_CH1 -> PB6
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019d0:	2340      	movs	r3, #64	@ 0x40
 80019d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019e0:	2302      	movs	r3, #2
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <MX_GPIO_Init+0x120>)
 80019ec:	f001 faf0 	bl	8002fd0 <HAL_GPIO_Init>
	/* USER CODE END MX_GPIO_Init_2 */
}
 80019f0:	bf00      	nop
 80019f2:	3728      	adds	r7, #40	@ 0x28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020000 	.word	0x40020000
 8001a00:	40020800 	.word	0x40020800
 8001a04:	40020400 	.word	0x40020400

08001a08 <curve_control>:
void motor_stop(void) {
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); //		RIGHT VAL	PC7		D9	Pin 9
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0); // 		LEFT VAL	PB6		D10	Pin10
}

void curve_control(int target_gz, float signed_speed) {
 8001a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a0c:	b09e      	sub	sp, #120	@ 0x78
 8001a0e:	af0a      	add	r7, sp, #40	@ 0x28
 8001a10:	6178      	str	r0, [r7, #20]
 8001a12:	ed87 0a04 	vstr	s0, [r7, #16]
	static float previous_error = 0.0f;
	static float gz_filtered = 0.0f;
	static uint32_t last_time = 0;

	float gx, gy, gz;
	read_gyroscope(&gx, &gy, &gz);
 8001a16:	f107 0218 	add.w	r2, r7, #24
 8001a1a:	f107 011c 	add.w	r1, r7, #28
 8001a1e:	f107 0320 	add.w	r3, r7, #32
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f904 	bl	8001c30 <read_gyroscope>

	gz_filtered = 0.9f * gz_filtered + 0.1f * gz;
 8001a28:	4b72      	ldr	r3, [pc, #456]	@ (8001bf4 <curve_control+0x1ec>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8001bf8 <curve_control+0x1f0>
 8001a32:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a36:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a3a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8001bfc <curve_control+0x1f4>
 8001a3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a46:	4b6b      	ldr	r3, [pc, #428]	@ (8001bf4 <curve_control+0x1ec>)
 8001a48:	edc3 7a00 	vstr	s15, [r3]

	uint32_t now = HAL_GetTick();
 8001a4c:	f000 fe0e 	bl	800266c <HAL_GetTick>
 8001a50:	6478      	str	r0, [r7, #68]	@ 0x44
	float dt = (now - last_time) / 1000.0f;
 8001a52:	4b6b      	ldr	r3, [pc, #428]	@ (8001c00 <curve_control+0x1f8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	ee07 3a90 	vmov	s15, r3
 8001a5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a62:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8001c04 <curve_control+0x1fc>
 8001a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a6a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	if (dt < 0.01f)
 8001a6e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001a72:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8001c08 <curve_control+0x200>
 8001a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7e:	d501      	bpl.n	8001a84 <curve_control+0x7c>
		dt = 0.01f;
 8001a80:	4b62      	ldr	r3, [pc, #392]	@ (8001c0c <curve_control+0x204>)
 8001a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
	last_time = now;
 8001a84:	4a5e      	ldr	r2, [pc, #376]	@ (8001c00 <curve_control+0x1f8>)
 8001a86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a88:	6013      	str	r3, [r2, #0]

	float error = target_gz - gz_filtered;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a94:	4b57      	ldr	r3, [pc, #348]	@ (8001bf4 <curve_control+0x1ec>)
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a9e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	integral += error * dt;
 8001aa2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001aa6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001aaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aae:	4b58      	ldr	r3, [pc, #352]	@ (8001c10 <curve_control+0x208>)
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab8:	4b55      	ldr	r3, [pc, #340]	@ (8001c10 <curve_control+0x208>)
 8001aba:	edc3 7a00 	vstr	s15, [r3]
	float derivative = (error - previous_error) / dt;
 8001abe:	4b55      	ldr	r3, [pc, #340]	@ (8001c14 <curve_control+0x20c>)
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001ac8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001acc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	previous_error = error;
 8001ad8:	4a4e      	ldr	r2, [pc, #312]	@ (8001c14 <curve_control+0x20c>)
 8001ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001adc:	6013      	str	r3, [r2, #0]

	float Kp = 9.0f, Ki = 0.0f, Kd = 0.05f;
 8001ade:	4b4e      	ldr	r3, [pc, #312]	@ (8001c18 <curve_control+0x210>)
 8001ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	@ (8001c1c <curve_control+0x214>)
 8001aea:	633b      	str	r3, [r7, #48]	@ 0x30
	float control = Kp * error + Ki * integral + Kd * derivative;
 8001aec:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001af0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001af4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af8:	4b45      	ldr	r3, [pc, #276]	@ (8001c10 <curve_control+0x208>)
 8001afa:	edd3 6a00 	vldr	s13, [r3]
 8001afe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b0a:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001b0e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001b12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	float delta_pwm = control;
 8001b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b20:	64bb      	str	r3, [r7, #72]	@ 0x48
	//printf("delta_pwm %d \r\n",delta_pwm);
	if (delta_pwm > 1000.0)
 8001b22:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b26:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001c04 <curve_control+0x1fc>
 8001b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	dd01      	ble.n	8001b38 <curve_control+0x130>
		delta_pwm = 1000.0;
 8001b34:	4b3a      	ldr	r3, [pc, #232]	@ (8001c20 <curve_control+0x218>)
 8001b36:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (delta_pwm < -1000.0)
 8001b38:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b3c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001c24 <curve_control+0x21c>
 8001b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	d501      	bpl.n	8001b4e <curve_control+0x146>
		delta_pwm = -1000.0;
 8001b4a:	4b37      	ldr	r3, [pc, #220]	@ (8001c28 <curve_control+0x220>)
 8001b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (target_gz == 0)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <curve_control+0x152>
		delta_pwm = 0;
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	64bb      	str	r3, [r7, #72]	@ 0x48
	float left_pwm = signed_speed - delta_pwm;
 8001b5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b5e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b66:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float right_pwm = signed_speed + delta_pwm;
 8001b6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b6e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	set_pwm(left_pwm, right_pwm);
 8001b7a:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8001b7e:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001b82:	f000 f94d 	bl	8001e20 <set_pwm>

	printf("[CurveCtrl] gz=%.2f, err=%.2f, dt=%.3f, Δ=%.2f, L=%.2f, R=%.2f\r\n",
 8001b86:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <curve_control+0x1ec>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fce4 	bl	8000558 <__aeabi_f2d>
 8001b90:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b94:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001b96:	f7fe fcdf 	bl	8000558 <__aeabi_f2d>
 8001b9a:	4604      	mov	r4, r0
 8001b9c:	460d      	mov	r5, r1
 8001b9e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001ba0:	f7fe fcda 	bl	8000558 <__aeabi_f2d>
 8001ba4:	4680      	mov	r8, r0
 8001ba6:	4689      	mov	r9, r1
 8001ba8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001baa:	f7fe fcd5 	bl	8000558 <__aeabi_f2d>
 8001bae:	4682      	mov	sl, r0
 8001bb0:	468b      	mov	fp, r1
 8001bb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001bb4:	f7fe fcd0 	bl	8000558 <__aeabi_f2d>
 8001bb8:	e9c7 0100 	strd	r0, r1, [r7]
 8001bbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001bbe:	f7fe fccb 	bl	8000558 <__aeabi_f2d>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001bca:	ed97 7b00 	vldr	d7, [r7]
 8001bce:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001bd2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001bd6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001bda:	e9cd 4500 	strd	r4, r5, [sp]
 8001bde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001be2:	4812      	ldr	r0, [pc, #72]	@ (8001c2c <curve_control+0x224>)
 8001be4:	f005 fcd2 	bl	800758c <iprintf>
			gz_filtered, error, dt, delta_pwm, left_pwm, right_pwm);
}
 8001be8:	bf00      	nop
 8001bea:	3750      	adds	r7, #80	@ 0x50
 8001bec:	46bd      	mov	sp, r7
 8001bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200003f4 	.word	0x200003f4
 8001bf8:	3f666666 	.word	0x3f666666
 8001bfc:	3dcccccd 	.word	0x3dcccccd
 8001c00:	200003f8 	.word	0x200003f8
 8001c04:	447a0000 	.word	0x447a0000
 8001c08:	3c23d70a 	.word	0x3c23d70a
 8001c0c:	3c23d70a 	.word	0x3c23d70a
 8001c10:	200003fc 	.word	0x200003fc
 8001c14:	20000400 	.word	0x20000400
 8001c18:	41100000 	.word	0x41100000
 8001c1c:	3d4ccccd 	.word	0x3d4ccccd
 8001c20:	447a0000 	.word	0x447a0000
 8001c24:	c47a0000 	.word	0xc47a0000
 8001c28:	c47a0000 	.word	0xc47a0000
 8001c2c:	0800afe4 	.word	0x0800afe4

08001c30 <read_gyroscope>:
	*ax = raw_ax / 16384.0f; // assuming ±2g range
	*ay = raw_ay / 16384.0f;
	*az = raw_az / 16384.0f;
}

void read_gyroscope(float *gx, float *gy, float *gz) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	@ 0x30
 8001c34:	af04      	add	r7, sp, #16
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
	uint8_t reg = 0x28 | 0x80;
 8001c3c:	23a8      	movs	r3, #168	@ 0xa8
 8001c3e:	77fb      	strb	r3, [r7, #31]
	uint8_t data[6] = { 0 };
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	809a      	strh	r2, [r3, #4]

	if (HAL_I2C_Mem_Read(&hi2c1, 0x6B << 1, reg, I2C_MEMADD_SIZE_8BIT, data, 6,
 8001c4a:	7ffb      	ldrb	r3, [r7, #31]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	9302      	str	r3, [sp, #8]
 8001c54:	2306      	movs	r3, #6
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2301      	movs	r3, #1
 8001c60:	21d6      	movs	r1, #214	@ 0xd6
 8001c62:	482a      	ldr	r0, [pc, #168]	@ (8001d0c <read_gyroscope+0xdc>)
 8001c64:	f001 fd90 	bl	8003788 <HAL_I2C_Mem_Read>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00c      	beq.n	8001c88 <read_gyroscope+0x58>
	HAL_MAX_DELAY) != HAL_OK) {
		//printf("Gyro read failed\r\n");
		*gx = *gy = *gz = 0.0f;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e03e      	b.n	8001d06 <read_gyroscope+0xd6>
		return;
	}

	int16_t raw_gx = (int16_t) (data[1] << 8 | data[0]);
 8001c88:	7c7b      	ldrb	r3, [r7, #17]
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	7c3b      	ldrb	r3, [r7, #16]
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4313      	orrs	r3, r2
 8001c96:	83bb      	strh	r3, [r7, #28]
	int16_t raw_gy = (int16_t) (data[3] << 8 | data[2]);
 8001c98:	7cfb      	ldrb	r3, [r7, #19]
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	7cbb      	ldrb	r3, [r7, #18]
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	837b      	strh	r3, [r7, #26]
	int16_t raw_gz = (int16_t) (data[5] << 8 | data[4]);
 8001ca8:	7d7b      	ldrb	r3, [r7, #21]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	b21a      	sxth	r2, r3
 8001cb0:	7d3b      	ldrb	r3, [r7, #20]
 8001cb2:	b21b      	sxth	r3, r3
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	833b      	strh	r3, [r7, #24]

	*gx = raw_gx / 131.0f; // assuming ±250 dps range
 8001cb8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc4:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001d10 <read_gyroscope+0xe0>
 8001cc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	edc3 7a00 	vstr	s15, [r3]
	*gy = raw_gy / 131.0f;
 8001cd2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001cd6:	ee07 3a90 	vmov	s15, r3
 8001cda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cde:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001d10 <read_gyroscope+0xe0>
 8001ce2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	edc3 7a00 	vstr	s15, [r3]
	*gz = raw_gz / 131.0f;
 8001cec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001cf0:	ee07 3a90 	vmov	s15, r3
 8001cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf8:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001d10 <read_gyroscope+0xe0>
 8001cfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	edc3 7a00 	vstr	s15, [r3]
}
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200001f0 	.word	0x200001f0
 8001d10:	43030000 	.word	0x43030000

08001d14 <init_magnetometer>:
	*mx = raw_mx * 0.080f; // assuming ±4 Gauss (80 mG/LSB)
	*my = raw_my * 0.080f;
	*mz = raw_mz * 0.080f;
}

void init_magnetometer(void) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af04      	add	r7, sp, #16
	// CTRL5 (0x24): Enable temperature, set resolution, 6.25Hz output rate
	uint8_t ctrl5 = 0x94;  // 1001 0100
 8001d1a:	2394      	movs	r3, #148	@ 0x94
 8001d1c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x1D << 1, 0x24, 1, &ctrl5, 1, HAL_MAX_DELAY);
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d22:	9302      	str	r3, [sp, #8]
 8001d24:	2301      	movs	r3, #1
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	2224      	movs	r2, #36	@ 0x24
 8001d30:	213a      	movs	r1, #58	@ 0x3a
 8001d32:	4812      	ldr	r0, [pc, #72]	@ (8001d7c <init_magnetometer+0x68>)
 8001d34:	f001 fc2e 	bl	8003594 <HAL_I2C_Mem_Write>

	// CTRL6 (0x25): ±4 gauss range
	uint8_t ctrl6 = 0x00;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, 0x1D << 1, 0x25, 1, &ctrl6, 1, HAL_MAX_DELAY);
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d40:	9302      	str	r3, [sp, #8]
 8001d42:	2301      	movs	r3, #1
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	1dbb      	adds	r3, r7, #6
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	2225      	movs	r2, #37	@ 0x25
 8001d4e:	213a      	movs	r1, #58	@ 0x3a
 8001d50:	480a      	ldr	r0, [pc, #40]	@ (8001d7c <init_magnetometer+0x68>)
 8001d52:	f001 fc1f 	bl	8003594 <HAL_I2C_Mem_Write>

	// CTRL7 (0x26): Continuous conversion mode
	uint8_t ctrl7 = 0x00;
 8001d56:	2300      	movs	r3, #0
 8001d58:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0x1D << 1, 0x26, 1, &ctrl7, 1, HAL_MAX_DELAY);
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	9302      	str	r3, [sp, #8]
 8001d60:	2301      	movs	r3, #1
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	1d7b      	adds	r3, r7, #5
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	2226      	movs	r2, #38	@ 0x26
 8001d6c:	213a      	movs	r1, #58	@ 0x3a
 8001d6e:	4803      	ldr	r0, [pc, #12]	@ (8001d7c <init_magnetometer+0x68>)
 8001d70:	f001 fc10 	bl	8003594 <HAL_I2C_Mem_Write>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200001f0 	.word	0x200001f0

08001d80 <init_accelerometer>:

void init_accelerometer(void) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af04      	add	r7, sp, #16
	// CTRL1 (0x20): 0x57 = 0b01010111 => 50Hz, all axes enabled
	uint8_t ctrl1 = 0x57;
 8001d86:	2357      	movs	r3, #87	@ 0x57
 8001d88:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x1D << 1, 0x20, 1, &ctrl1, 1, HAL_MAX_DELAY);
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	9302      	str	r3, [sp, #8]
 8001d90:	2301      	movs	r3, #1
 8001d92:	9301      	str	r3, [sp, #4]
 8001d94:	1dfb      	adds	r3, r7, #7
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	213a      	movs	r1, #58	@ 0x3a
 8001d9e:	480b      	ldr	r0, [pc, #44]	@ (8001dcc <init_accelerometer+0x4c>)
 8001da0:	f001 fbf8 	bl	8003594 <HAL_I2C_Mem_Write>

	// CTRL2 (0x21): 0x00 = ±2g, default anti-alias filter
	uint8_t ctrl2 = 0x00;
 8001da4:	2300      	movs	r3, #0
 8001da6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, 0x1D << 1, 0x21, 1, &ctrl2, 1, HAL_MAX_DELAY);
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dac:	9302      	str	r3, [sp, #8]
 8001dae:	2301      	movs	r3, #1
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	1dbb      	adds	r3, r7, #6
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2301      	movs	r3, #1
 8001db8:	2221      	movs	r2, #33	@ 0x21
 8001dba:	213a      	movs	r1, #58	@ 0x3a
 8001dbc:	4803      	ldr	r0, [pc, #12]	@ (8001dcc <init_accelerometer+0x4c>)
 8001dbe:	f001 fbe9 	bl	8003594 <HAL_I2C_Mem_Write>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200001f0 	.word	0x200001f0

08001dd0 <init_gyroscope>:

void init_gyroscope(void) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af04      	add	r7, sp, #16
	// CTRL1 (0x20): 0x0F = Normal mode, all axes enabled, 95 Hz ODR
	uint8_t ctrl1 = 0x0F;
 8001dd6:	230f      	movs	r3, #15
 8001dd8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x6B << 1, 0x20, 1, &ctrl1, 1, HAL_MAX_DELAY);
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	9302      	str	r3, [sp, #8]
 8001de0:	2301      	movs	r3, #1
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	1dfb      	adds	r3, r7, #7
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2301      	movs	r3, #1
 8001dea:	2220      	movs	r2, #32
 8001dec:	21d6      	movs	r1, #214	@ 0xd6
 8001dee:	480b      	ldr	r0, [pc, #44]	@ (8001e1c <init_gyroscope+0x4c>)
 8001df0:	f001 fbd0 	bl	8003594 <HAL_I2C_Mem_Write>

	// CTRL4 (0x23): 0x00 = 250 dps (default)
	uint8_t ctrl4 = 0x00;
 8001df4:	2300      	movs	r3, #0
 8001df6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, 0x6B << 1, 0x23, 1, &ctrl4, 1, HAL_MAX_DELAY);
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfc:	9302      	str	r3, [sp, #8]
 8001dfe:	2301      	movs	r3, #1
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	1dbb      	adds	r3, r7, #6
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2301      	movs	r3, #1
 8001e08:	2223      	movs	r2, #35	@ 0x23
 8001e0a:	21d6      	movs	r1, #214	@ 0xd6
 8001e0c:	4803      	ldr	r0, [pc, #12]	@ (8001e1c <init_gyroscope+0x4c>)
 8001e0e:	f001 fbc1 	bl	8003594 <HAL_I2C_Mem_Write>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200001f0 	.word	0x200001f0

08001e20 <set_pwm>:

void set_pwm(float left_pwm, float right_pwm) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e2a:	edc7 0a00 	vstr	s1, [r7]
	// LEFT motor
	if (left_pwm >= 0) {
 8001e2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3a:	db06      	blt.n	8001e4a <set_pwm+0x2a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);  // Forward
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e42:	482b      	ldr	r0, [pc, #172]	@ (8001ef0 <set_pwm+0xd0>)
 8001e44:	f001 fa48 	bl	80032d8 <HAL_GPIO_WritePin>
 8001e48:	e00b      	b.n	8001e62 <set_pwm+0x42>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);    // Backward
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e50:	4827      	ldr	r0, [pc, #156]	@ (8001ef0 <set_pwm+0xd0>)
 8001e52:	f001 fa41 	bl	80032d8 <HAL_GPIO_WritePin>
		left_pwm = -left_pwm;
 8001e56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e5a:	eef1 7a67 	vneg.f32	s15, s15
 8001e5e:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	// RIGHT motor
	if (right_pwm >= 0) {
 8001e62:	edd7 7a00 	vldr	s15, [r7]
 8001e66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6e:	db06      	blt.n	8001e7e <set_pwm+0x5e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);  // Forward
 8001e70:	2200      	movs	r2, #0
 8001e72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e76:	481e      	ldr	r0, [pc, #120]	@ (8001ef0 <set_pwm+0xd0>)
 8001e78:	f001 fa2e 	bl	80032d8 <HAL_GPIO_WritePin>
 8001e7c:	e00b      	b.n	8001e96 <set_pwm+0x76>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);    // Backward
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e84:	481a      	ldr	r0, [pc, #104]	@ (8001ef0 <set_pwm+0xd0>)
 8001e86:	f001 fa27 	bl	80032d8 <HAL_GPIO_WritePin>
		right_pwm = -right_pwm;
 8001e8a:	edd7 7a00 	vldr	s15, [r7]
 8001e8e:	eef1 7a67 	vneg.f32	s15, s15
 8001e92:	edc7 7a00 	vstr	s15, [r7]
	}

	// Clamp values
	if (left_pwm > 1000)
 8001e96:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e9a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001ef4 <set_pwm+0xd4>
 8001e9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea6:	dd01      	ble.n	8001eac <set_pwm+0x8c>
		left_pwm = 1000;
 8001ea8:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <set_pwm+0xd8>)
 8001eaa:	607b      	str	r3, [r7, #4]
	if (right_pwm > 1000)
 8001eac:	edd7 7a00 	vldr	s15, [r7]
 8001eb0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001ef4 <set_pwm+0xd4>
 8001eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebc:	dd01      	ble.n	8001ec2 <set_pwm+0xa2>
		right_pwm = 1000;
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <set_pwm+0xd8>)
 8001ec0:	603b      	str	r3, [r7, #0]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, left_pwm / 1); // LEFT (TIM4_CH1)
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <set_pwm+0xdc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ece:	ee17 2a90 	vmov	r2, s15
 8001ed2:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, right_pwm / 1); // RIGHT (TIM3_CH2)
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <set_pwm+0xe0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	edd7 7a00 	vldr	s15, [r7]
 8001edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ee0:	ee17 2a90 	vmov	r2, s15
 8001ee4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	447a0000 	.word	0x447a0000
 8001ef8:	447a0000 	.word	0x447a0000
 8001efc:	2000028c 	.word	0x2000028c
 8001f00:	20000244 	.word	0x20000244

08001f04 <BT_Transmit>:

void BT_Transmit(char *str) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7fe f9b7 	bl	8000280 <strlen>
 8001f12:	4603      	mov	r3, r0
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4803      	ldr	r0, [pc, #12]	@ (8001f2c <BT_Transmit+0x28>)
 8001f1e:	f003 fe4d 	bl	8005bbc <HAL_UART_Transmit>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000031c 	.word	0x2000031c

08001f30 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001f38:	1d39      	adds	r1, r7, #4
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4803      	ldr	r0, [pc, #12]	@ (8001f50 <__io_putchar+0x20>)
 8001f42:	f003 fe3b 	bl	8005bbc <HAL_UART_Transmit>
	return ch;
 8001f46:	687b      	ldr	r3, [r7, #4]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200002d4 	.word	0x200002d4

08001f54 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f58:	b672      	cpsid	i
}
 8001f5a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <Error_Handler+0x8>

08001f60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f76:	4b0d      	ldr	r3, [pc, #52]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	4a08      	ldr	r2, [pc, #32]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f9e:	2007      	movs	r0, #7
 8001fa0:	f000 fc64 	bl	800286c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	@ 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	@ (8002034 <HAL_I2C_MspInit+0x84>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d12c      	bne.n	800202c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	4b18      	ldr	r3, [pc, #96]	@ (8002038 <HAL_I2C_MspInit+0x88>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	4a17      	ldr	r2, [pc, #92]	@ (8002038 <HAL_I2C_MspInit+0x88>)
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe2:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <HAL_I2C_MspInit+0x88>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff4:	2312      	movs	r3, #18
 8001ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002000:	2304      	movs	r3, #4
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4619      	mov	r1, r3
 800200a:	480c      	ldr	r0, [pc, #48]	@ (800203c <HAL_I2C_MspInit+0x8c>)
 800200c:	f000 ffe0 	bl	8002fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <HAL_I2C_MspInit+0x88>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	4a07      	ldr	r2, [pc, #28]	@ (8002038 <HAL_I2C_MspInit+0x88>)
 800201a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800201e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002020:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <HAL_I2C_MspInit+0x88>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800202c:	bf00      	nop
 800202e:	3728      	adds	r7, #40	@ 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40005400 	.word	0x40005400
 8002038:	40023800 	.word	0x40023800
 800203c:	40020400 	.word	0x40020400

08002040 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0b      	ldr	r2, [pc, #44]	@ (800207c <HAL_TIM_PWM_MspInit+0x3c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d10d      	bne.n	800206e <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <HAL_TIM_PWM_MspInit+0x40>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	4a09      	ldr	r2, [pc, #36]	@ (8002080 <HAL_TIM_PWM_MspInit+0x40>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6413      	str	r3, [r2, #64]	@ 0x40
 8002062:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <HAL_TIM_PWM_MspInit+0x40>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40000400 	.word	0x40000400
 8002080:	40023800 	.word	0x40023800

08002084 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0b      	ldr	r2, [pc, #44]	@ (80020c0 <HAL_TIM_Base_MspInit+0x3c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10d      	bne.n	80020b2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <HAL_TIM_Base_MspInit+0x40>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	4a09      	ldr	r2, [pc, #36]	@ (80020c4 <HAL_TIM_Base_MspInit+0x40>)
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a6:	4b07      	ldr	r3, [pc, #28]	@ (80020c4 <HAL_TIM_Base_MspInit+0x40>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40000800 	.word	0x40000800
 80020c4:	40023800 	.word	0x40023800

080020c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	@ 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a24      	ldr	r2, [pc, #144]	@ (8002178 <HAL_TIM_MspPostInit+0xb0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d11e      	bne.n	8002128 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	4b23      	ldr	r3, [pc, #140]	@ (800217c <HAL_TIM_MspPostInit+0xb4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	4a22      	ldr	r2, [pc, #136]	@ (800217c <HAL_TIM_MspPostInit+0xb4>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fa:	4b20      	ldr	r3, [pc, #128]	@ (800217c <HAL_TIM_MspPostInit+0xb4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002106:	2380      	movs	r3, #128	@ 0x80
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002116:	2302      	movs	r3, #2
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4817      	ldr	r0, [pc, #92]	@ (8002180 <HAL_TIM_MspPostInit+0xb8>)
 8002122:	f000 ff55 	bl	8002fd0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002126:	e022      	b.n	800216e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a15      	ldr	r2, [pc, #84]	@ (8002184 <HAL_TIM_MspPostInit+0xbc>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d11d      	bne.n	800216e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b11      	ldr	r3, [pc, #68]	@ (800217c <HAL_TIM_MspPostInit+0xb4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	4a10      	ldr	r2, [pc, #64]	@ (800217c <HAL_TIM_MspPostInit+0xb4>)
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	6313      	str	r3, [r2, #48]	@ 0x30
 8002142:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <HAL_TIM_MspPostInit+0xb4>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800214e:	2340      	movs	r3, #64	@ 0x40
 8002150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800215e:	2302      	movs	r3, #2
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	4619      	mov	r1, r3
 8002168:	4807      	ldr	r0, [pc, #28]	@ (8002188 <HAL_TIM_MspPostInit+0xc0>)
 800216a:	f000 ff31 	bl	8002fd0 <HAL_GPIO_Init>
}
 800216e:	bf00      	nop
 8002170:	3728      	adds	r7, #40	@ 0x28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40000400 	.word	0x40000400
 800217c:	40023800 	.word	0x40023800
 8002180:	40020800 	.word	0x40020800
 8002184:	40000800 	.word	0x40000800
 8002188:	40020400 	.word	0x40020400

0800218c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08c      	sub	sp, #48	@ 0x30
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 031c 	add.w	r3, r7, #28
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a58      	ldr	r2, [pc, #352]	@ (800230c <HAL_UART_MspInit+0x180>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d12c      	bne.n	8002208 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	4b57      	ldr	r3, [pc, #348]	@ (8002310 <HAL_UART_MspInit+0x184>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	4a56      	ldr	r2, [pc, #344]	@ (8002310 <HAL_UART_MspInit+0x184>)
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021be:	4b54      	ldr	r3, [pc, #336]	@ (8002310 <HAL_UART_MspInit+0x184>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	4b50      	ldr	r3, [pc, #320]	@ (8002310 <HAL_UART_MspInit+0x184>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	4a4f      	ldr	r2, [pc, #316]	@ (8002310 <HAL_UART_MspInit+0x184>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021da:	4b4d      	ldr	r3, [pc, #308]	@ (8002310 <HAL_UART_MspInit+0x184>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021e6:	230c      	movs	r3, #12
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021f6:	2307      	movs	r3, #7
 80021f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	4619      	mov	r1, r3
 8002200:	4844      	ldr	r0, [pc, #272]	@ (8002314 <HAL_UART_MspInit+0x188>)
 8002202:	f000 fee5 	bl	8002fd0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002206:	e07d      	b.n	8002304 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART6)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a42      	ldr	r2, [pc, #264]	@ (8002318 <HAL_UART_MspInit+0x18c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d178      	bne.n	8002304 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b3e      	ldr	r3, [pc, #248]	@ (8002310 <HAL_UART_MspInit+0x184>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	4a3d      	ldr	r2, [pc, #244]	@ (8002310 <HAL_UART_MspInit+0x184>)
 800221c:	f043 0320 	orr.w	r3, r3, #32
 8002220:	6453      	str	r3, [r2, #68]	@ 0x44
 8002222:	4b3b      	ldr	r3, [pc, #236]	@ (8002310 <HAL_UART_MspInit+0x184>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b37      	ldr	r3, [pc, #220]	@ (8002310 <HAL_UART_MspInit+0x184>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a36      	ldr	r2, [pc, #216]	@ (8002310 <HAL_UART_MspInit+0x184>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b34      	ldr	r3, [pc, #208]	@ (8002310 <HAL_UART_MspInit+0x184>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	4b30      	ldr	r3, [pc, #192]	@ (8002310 <HAL_UART_MspInit+0x184>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a2f      	ldr	r2, [pc, #188]	@ (8002310 <HAL_UART_MspInit+0x184>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b2d      	ldr	r3, [pc, #180]	@ (8002310 <HAL_UART_MspInit+0x184>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002266:	2340      	movs	r3, #64	@ 0x40
 8002268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002272:	2303      	movs	r3, #3
 8002274:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002276:	2308      	movs	r3, #8
 8002278:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	4619      	mov	r1, r3
 8002280:	4826      	ldr	r0, [pc, #152]	@ (800231c <HAL_UART_MspInit+0x190>)
 8002282:	f000 fea5 	bl	8002fd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002286:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800228a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002298:	2308      	movs	r3, #8
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	4619      	mov	r1, r3
 80022a2:	481c      	ldr	r0, [pc, #112]	@ (8002314 <HAL_UART_MspInit+0x188>)
 80022a4:	f000 fe94 	bl	8002fd0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80022a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <HAL_UART_MspInit+0x194>)
 80022aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002324 <HAL_UART_MspInit+0x198>)
 80022ac:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80022ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002320 <HAL_UART_MspInit+0x194>)
 80022b0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80022b4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <HAL_UART_MspInit+0x194>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022bc:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <HAL_UART_MspInit+0x194>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022c2:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <HAL_UART_MspInit+0x194>)
 80022c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022c8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <HAL_UART_MspInit+0x194>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d0:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <HAL_UART_MspInit+0x194>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80022d6:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_UART_MspInit+0x194>)
 80022d8:	2200      	movs	r2, #0
 80022da:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022dc:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <HAL_UART_MspInit+0x194>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002320 <HAL_UART_MspInit+0x194>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80022e8:	480d      	ldr	r0, [pc, #52]	@ (8002320 <HAL_UART_MspInit+0x194>)
 80022ea:	f000 fb01 	bl	80028f0 <HAL_DMA_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_UART_MspInit+0x16c>
      Error_Handler();
 80022f4:	f7ff fe2e 	bl	8001f54 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a09      	ldr	r2, [pc, #36]	@ (8002320 <HAL_UART_MspInit+0x194>)
 80022fc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80022fe:	4a08      	ldr	r2, [pc, #32]	@ (8002320 <HAL_UART_MspInit+0x194>)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002304:	bf00      	nop
 8002306:	3730      	adds	r7, #48	@ 0x30
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40004400 	.word	0x40004400
 8002310:	40023800 	.word	0x40023800
 8002314:	40020000 	.word	0x40020000
 8002318:	40011400 	.word	0x40011400
 800231c:	40020800 	.word	0x40020800
 8002320:	20000364 	.word	0x20000364
 8002324:	40026428 	.word	0x40026428

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <NMI_Handler+0x4>

08002330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002334:	bf00      	nop
 8002336:	e7fd      	b.n	8002334 <HardFault_Handler+0x4>

08002338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800233c:	bf00      	nop
 800233e:	e7fd      	b.n	800233c <MemManage_Handler+0x4>

08002340 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002344:	bf00      	nop
 8002346:	e7fd      	b.n	8002344 <BusFault_Handler+0x4>

08002348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <UsageFault_Handler+0x4>

08002350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800237e:	f000 f961 	bl	8002644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800238c:	4802      	ldr	r0, [pc, #8]	@ (8002398 <DMA2_Stream1_IRQHandler+0x10>)
 800238e:	f000 fbb5 	bl	8002afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000364 	.word	0x20000364

0800239c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return 1;
 80023a0:	2301      	movs	r3, #1
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_kill>:

int _kill(int pid, int sig)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023b6:	f005 faa5 	bl	8007904 <__errno>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2216      	movs	r2, #22
 80023be:	601a      	str	r2, [r3, #0]
  return -1;
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_exit>:

void _exit (int status)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ffe7 	bl	80023ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80023de:	bf00      	nop
 80023e0:	e7fd      	b.n	80023de <_exit+0x12>

080023e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	e00a      	b.n	800240a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023f4:	f3af 8000 	nop.w
 80023f8:	4601      	mov	r1, r0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	60ba      	str	r2, [r7, #8]
 8002400:	b2ca      	uxtb	r2, r1
 8002402:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3301      	adds	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	dbf0      	blt.n	80023f4 <_read+0x12>
  }

  return len;
 8002412:	687b      	ldr	r3, [r7, #4]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	e009      	b.n	8002442 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	60ba      	str	r2, [r7, #8]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fd7a 	bl	8001f30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3301      	adds	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	429a      	cmp	r2, r3
 8002448:	dbf1      	blt.n	800242e <_write+0x12>
  }
  return len;
 800244a:	687b      	ldr	r3, [r7, #4]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_close>:

int _close(int file)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800245c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800247c:	605a      	str	r2, [r3, #4]
  return 0;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_isatty>:

int _isatty(int file)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002494:	2301      	movs	r3, #1
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c4:	4a14      	ldr	r2, [pc, #80]	@ (8002518 <_sbrk+0x5c>)
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <_sbrk+0x60>)
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <_sbrk+0x64>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d8:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <_sbrk+0x64>)
 80024da:	4a12      	ldr	r2, [pc, #72]	@ (8002524 <_sbrk+0x68>)
 80024dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024de:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <_sbrk+0x64>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d207      	bcs.n	80024fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024ec:	f005 fa0a 	bl	8007904 <__errno>
 80024f0:	4603      	mov	r3, r0
 80024f2:	220c      	movs	r2, #12
 80024f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	e009      	b.n	8002510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024fc:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <_sbrk+0x64>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002502:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <_sbrk+0x64>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	4a05      	ldr	r2, [pc, #20]	@ (8002520 <_sbrk+0x64>)
 800250c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800250e:	68fb      	ldr	r3, [r7, #12]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20018000 	.word	0x20018000
 800251c:	00000400 	.word	0x00000400
 8002520:	20000404 	.word	0x20000404
 8002524:	20000558 	.word	0x20000558

08002528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <SystemInit+0x20>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002532:	4a05      	ldr	r2, [pc, #20]	@ (8002548 <SystemInit+0x20>)
 8002534:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002538:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800254c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002584 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002550:	f7ff ffea 	bl	8002528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002554:	480c      	ldr	r0, [pc, #48]	@ (8002588 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002556:	490d      	ldr	r1, [pc, #52]	@ (800258c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002558:	4a0d      	ldr	r2, [pc, #52]	@ (8002590 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800255a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800255c:	e002      	b.n	8002564 <LoopCopyDataInit>

0800255e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002562:	3304      	adds	r3, #4

08002564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002568:	d3f9      	bcc.n	800255e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256a:	4a0a      	ldr	r2, [pc, #40]	@ (8002594 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800256c:	4c0a      	ldr	r4, [pc, #40]	@ (8002598 <LoopFillZerobss+0x22>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002570:	e001      	b.n	8002576 <LoopFillZerobss>

08002572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002574:	3204      	adds	r2, #4

08002576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002578:	d3fb      	bcc.n	8002572 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800257a:	f005 f9c9 	bl	8007910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800257e:	f7fe fe2d 	bl	80011dc <main>
  bx  lr    
 8002582:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002584:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800258c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002590:	0800b484 	.word	0x0800b484
  ldr r2, =_sbss
 8002594:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002598:	20000558 	.word	0x20000558

0800259c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800259c:	e7fe      	b.n	800259c <ADC_IRQHandler>
	...

080025a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025a4:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <HAL_Init+0x40>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0d      	ldr	r2, [pc, #52]	@ (80025e0 <HAL_Init+0x40>)
 80025aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025b0:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <HAL_Init+0x40>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0a      	ldr	r2, [pc, #40]	@ (80025e0 <HAL_Init+0x40>)
 80025b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025bc:	4b08      	ldr	r3, [pc, #32]	@ (80025e0 <HAL_Init+0x40>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a07      	ldr	r2, [pc, #28]	@ (80025e0 <HAL_Init+0x40>)
 80025c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c8:	2003      	movs	r0, #3
 80025ca:	f000 f94f 	bl	800286c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f000 f808 	bl	80025e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d4:	f7ff fcc4 	bl	8001f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023c00 	.word	0x40023c00

080025e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025ec:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <HAL_InitTick+0x54>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b12      	ldr	r3, [pc, #72]	@ (800263c <HAL_InitTick+0x58>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f967 	bl	80028d6 <HAL_SYSTICK_Config>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e00e      	b.n	8002630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b0f      	cmp	r3, #15
 8002616:	d80a      	bhi.n	800262e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002618:	2200      	movs	r2, #0
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	f000 f92f 	bl	8002882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002624:	4a06      	ldr	r2, [pc, #24]	@ (8002640 <HAL_InitTick+0x5c>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000000 	.word	0x20000000
 800263c:	20000008 	.word	0x20000008
 8002640:	20000004 	.word	0x20000004

08002644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002648:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <HAL_IncTick+0x20>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <HAL_IncTick+0x24>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4413      	add	r3, r2
 8002654:	4a04      	ldr	r2, [pc, #16]	@ (8002668 <HAL_IncTick+0x24>)
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000008 	.word	0x20000008
 8002668:	20000408 	.word	0x20000408

0800266c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return uwTick;
 8002670:	4b03      	ldr	r3, [pc, #12]	@ (8002680 <HAL_GetTick+0x14>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000408 	.word	0x20000408

08002684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800268c:	f7ff ffee 	bl	800266c <HAL_GetTick>
 8002690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269c:	d005      	beq.n	80026aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800269e:	4b0a      	ldr	r3, [pc, #40]	@ (80026c8 <HAL_Delay+0x44>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4413      	add	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026aa:	bf00      	nop
 80026ac:	f7ff ffde 	bl	800266c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d8f7      	bhi.n	80026ac <HAL_Delay+0x28>
  {
  }
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000008 	.word	0x20000008

080026cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002710 <__NVIC_SetPriorityGrouping+0x44>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026e8:	4013      	ands	r3, r2
 80026ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026fe:	4a04      	ldr	r2, [pc, #16]	@ (8002710 <__NVIC_SetPriorityGrouping+0x44>)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	60d3      	str	r3, [r2, #12]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002718:	4b04      	ldr	r3, [pc, #16]	@ (800272c <__NVIC_GetPriorityGrouping+0x18>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	f003 0307 	and.w	r3, r3, #7
}
 8002722:	4618      	mov	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	2b00      	cmp	r3, #0
 8002740:	db0b      	blt.n	800275a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	f003 021f 	and.w	r2, r3, #31
 8002748:	4907      	ldr	r1, [pc, #28]	@ (8002768 <__NVIC_EnableIRQ+0x38>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	2001      	movs	r0, #1
 8002752:	fa00 f202 	lsl.w	r2, r0, r2
 8002756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000e100 	.word	0xe000e100

0800276c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	6039      	str	r1, [r7, #0]
 8002776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277c:	2b00      	cmp	r3, #0
 800277e:	db0a      	blt.n	8002796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	490c      	ldr	r1, [pc, #48]	@ (80027b8 <__NVIC_SetPriority+0x4c>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	0112      	lsls	r2, r2, #4
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	440b      	add	r3, r1
 8002790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002794:	e00a      	b.n	80027ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4908      	ldr	r1, [pc, #32]	@ (80027bc <__NVIC_SetPriority+0x50>)
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	3b04      	subs	r3, #4
 80027a4:	0112      	lsls	r2, r2, #4
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	440b      	add	r3, r1
 80027aa:	761a      	strb	r2, [r3, #24]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000e100 	.word	0xe000e100
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	@ 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f1c3 0307 	rsb	r3, r3, #7
 80027da:	2b04      	cmp	r3, #4
 80027dc:	bf28      	it	cs
 80027de:	2304      	movcs	r3, #4
 80027e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3304      	adds	r3, #4
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d902      	bls.n	80027f0 <NVIC_EncodePriority+0x30>
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3b03      	subs	r3, #3
 80027ee:	e000      	b.n	80027f2 <NVIC_EncodePriority+0x32>
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43da      	mvns	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	401a      	ands	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002808:	f04f 31ff 	mov.w	r1, #4294967295
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	43d9      	mvns	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	4313      	orrs	r3, r2
         );
}
 800281a:	4618      	mov	r0, r3
 800281c:	3724      	adds	r7, #36	@ 0x24
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002838:	d301      	bcc.n	800283e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800283a:	2301      	movs	r3, #1
 800283c:	e00f      	b.n	800285e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283e:	4a0a      	ldr	r2, [pc, #40]	@ (8002868 <SysTick_Config+0x40>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002846:	210f      	movs	r1, #15
 8002848:	f04f 30ff 	mov.w	r0, #4294967295
 800284c:	f7ff ff8e 	bl	800276c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002850:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <SysTick_Config+0x40>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002856:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <SysTick_Config+0x40>)
 8002858:	2207      	movs	r2, #7
 800285a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	e000e010 	.word	0xe000e010

0800286c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff29 	bl	80026cc <__NVIC_SetPriorityGrouping>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002882:	b580      	push	{r7, lr}
 8002884:	b086      	sub	sp, #24
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002894:	f7ff ff3e 	bl	8002714 <__NVIC_GetPriorityGrouping>
 8002898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	6978      	ldr	r0, [r7, #20]
 80028a0:	f7ff ff8e 	bl	80027c0 <NVIC_EncodePriority>
 80028a4:	4602      	mov	r2, r0
 80028a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff5d 	bl	800276c <__NVIC_SetPriority>
}
 80028b2:	bf00      	nop
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff31 	bl	8002730 <__NVIC_EnableIRQ>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ffa2 	bl	8002828 <SysTick_Config>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028fc:	f7ff feb6 	bl	800266c <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e099      	b.n	8002a40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800292c:	e00f      	b.n	800294e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800292e:	f7ff fe9d 	bl	800266c <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b05      	cmp	r3, #5
 800293a:	d908      	bls.n	800294e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2203      	movs	r2, #3
 8002946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e078      	b.n	8002a40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1e8      	bne.n	800292e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4b38      	ldr	r3, [pc, #224]	@ (8002a48 <HAL_DMA_Init+0x158>)
 8002968:	4013      	ands	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800297a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d107      	bne.n	80029b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b0:	4313      	orrs	r3, r2
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f023 0307 	bic.w	r3, r3, #7
 80029ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d117      	bne.n	8002a12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00e      	beq.n	8002a12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fa6f 	bl	8002ed8 <DMA_CheckFifoParam>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2240      	movs	r2, #64	@ 0x40
 8002a04:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e016      	b.n	8002a40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa26 	bl	8002e6c <DMA_CalcBaseAndBitshift>
 8002a20:	4603      	mov	r3, r0
 8002a22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a28:	223f      	movs	r2, #63	@ 0x3f
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	f010803f 	.word	0xf010803f

08002a4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_DMA_Start_IT+0x26>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e040      	b.n	8002af4 <HAL_DMA_Start_IT+0xa8>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d12f      	bne.n	8002ae6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f9b8 	bl	8002e10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa4:	223f      	movs	r2, #63	@ 0x3f
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0216 	orr.w	r2, r2, #22
 8002aba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d007      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0208 	orr.w	r2, r2, #8
 8002ad2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e005      	b.n	8002af2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
 8002af0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b08:	4b8e      	ldr	r3, [pc, #568]	@ (8002d44 <HAL_DMA_IRQHandler+0x248>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a8e      	ldr	r2, [pc, #568]	@ (8002d48 <HAL_DMA_IRQHandler+0x24c>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0a9b      	lsrs	r3, r3, #10
 8002b14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b26:	2208      	movs	r2, #8
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01a      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0204 	bic.w	r2, r2, #4
 8002b4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b54:	2208      	movs	r2, #8
 8002b56:	409a      	lsls	r2, r3
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b60:	f043 0201 	orr.w	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d012      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b96:	f043 0202 	orr.w	r2, r3, #2
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d012      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bcc:	f043 0204 	orr.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd8:	2210      	movs	r2, #16
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d043      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d03c      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d018      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d108      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d024      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
 8002c2a:	e01f      	b.n	8002c6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01b      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
 8002c3c:	e016      	b.n	8002c6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d107      	bne.n	8002c5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0208 	bic.w	r2, r2, #8
 8002c5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c70:	2220      	movs	r2, #32
 8002c72:	409a      	lsls	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 808f 	beq.w	8002d9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8087 	beq.w	8002d9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c92:	2220      	movs	r2, #32
 8002c94:	409a      	lsls	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b05      	cmp	r3, #5
 8002ca4:	d136      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0216 	bic.w	r2, r2, #22
 8002cb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <HAL_DMA_IRQHandler+0x1da>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0208 	bic.w	r2, r2, #8
 8002ce4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	223f      	movs	r2, #63	@ 0x3f
 8002cec:	409a      	lsls	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d07e      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
        }
        return;
 8002d12:	e079      	b.n	8002e08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01d      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10d      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d031      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
 8002d40:	e02c      	b.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
 8002d42:	bf00      	nop
 8002d44:	20000000 	.word	0x20000000
 8002d48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d023      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
 8002d5c:	e01e      	b.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10f      	bne.n	8002d8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0210 	bic.w	r2, r2, #16
 8002d7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d032      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d022      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2205      	movs	r2, #5
 8002db4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d307      	bcc.n	8002de4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f2      	bne.n	8002dc8 <HAL_DMA_IRQHandler+0x2cc>
 8002de2:	e000      	b.n	8002de6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002de4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	4798      	blx	r3
 8002e06:	e000      	b.n	8002e0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e08:	bf00      	nop
    }
  }
}
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b40      	cmp	r3, #64	@ 0x40
 8002e3c:	d108      	bne.n	8002e50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e4e:	e007      	b.n	8002e60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	60da      	str	r2, [r3, #12]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	3b10      	subs	r3, #16
 8002e7c:	4a14      	ldr	r2, [pc, #80]	@ (8002ed0 <DMA_CalcBaseAndBitshift+0x64>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e86:	4a13      	ldr	r2, [pc, #76]	@ (8002ed4 <DMA_CalcBaseAndBitshift+0x68>)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d909      	bls.n	8002eae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	1d1a      	adds	r2, r3, #4
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	659a      	str	r2, [r3, #88]	@ 0x58
 8002eac:	e007      	b.n	8002ebe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	aaaaaaab 	.word	0xaaaaaaab
 8002ed4:	0800b040 	.word	0x0800b040

08002ed8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d11f      	bne.n	8002f32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d856      	bhi.n	8002fa6 <DMA_CheckFifoParam+0xce>
 8002ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8002f00 <DMA_CheckFifoParam+0x28>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f11 	.word	0x08002f11
 8002f04:	08002f23 	.word	0x08002f23
 8002f08:	08002f11 	.word	0x08002f11
 8002f0c:	08002fa7 	.word	0x08002fa7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d046      	beq.n	8002faa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f20:	e043      	b.n	8002faa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f2a:	d140      	bne.n	8002fae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f30:	e03d      	b.n	8002fae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f3a:	d121      	bne.n	8002f80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d837      	bhi.n	8002fb2 <DMA_CheckFifoParam+0xda>
 8002f42:	a201      	add	r2, pc, #4	@ (adr r2, 8002f48 <DMA_CheckFifoParam+0x70>)
 8002f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f48:	08002f59 	.word	0x08002f59
 8002f4c:	08002f5f 	.word	0x08002f5f
 8002f50:	08002f59 	.word	0x08002f59
 8002f54:	08002f71 	.word	0x08002f71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f5c:	e030      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d025      	beq.n	8002fb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f6e:	e022      	b.n	8002fb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f78:	d11f      	bne.n	8002fba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f7e:	e01c      	b.n	8002fba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d903      	bls.n	8002f8e <DMA_CheckFifoParam+0xb6>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d003      	beq.n	8002f94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f8c:	e018      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
      break;
 8002f92:	e015      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00e      	beq.n	8002fbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa4:	e00b      	b.n	8002fbe <DMA_CheckFifoParam+0xe6>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e00a      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002faa:	bf00      	nop
 8002fac:	e008      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e006      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e004      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e002      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8002fbe:	bf00      	nop
    }
  } 
  
  return status; 
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop

08002fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	@ 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	e159      	b.n	80032a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fec:	2201      	movs	r2, #1
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	429a      	cmp	r2, r3
 8003006:	f040 8148 	bne.w	800329a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d005      	beq.n	8003022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800301e:	2b02      	cmp	r3, #2
 8003020:	d130      	bne.n	8003084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003058:	2201      	movs	r2, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 0201 	and.w	r2, r3, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	2b03      	cmp	r3, #3
 800308e:	d017      	beq.n	80030c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d123      	bne.n	8003114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	08da      	lsrs	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3208      	adds	r2, #8
 80030d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	220f      	movs	r2, #15
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	08da      	lsrs	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3208      	adds	r2, #8
 800310e:	69b9      	ldr	r1, [r7, #24]
 8003110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0203 	and.w	r2, r3, #3
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80a2 	beq.w	800329a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	4b57      	ldr	r3, [pc, #348]	@ (80032b8 <HAL_GPIO_Init+0x2e8>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315e:	4a56      	ldr	r2, [pc, #344]	@ (80032b8 <HAL_GPIO_Init+0x2e8>)
 8003160:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003164:	6453      	str	r3, [r2, #68]	@ 0x44
 8003166:	4b54      	ldr	r3, [pc, #336]	@ (80032b8 <HAL_GPIO_Init+0x2e8>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003172:	4a52      	ldr	r2, [pc, #328]	@ (80032bc <HAL_GPIO_Init+0x2ec>)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	3302      	adds	r3, #2
 800317a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	220f      	movs	r2, #15
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a49      	ldr	r2, [pc, #292]	@ (80032c0 <HAL_GPIO_Init+0x2f0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d019      	beq.n	80031d2 <HAL_GPIO_Init+0x202>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a48      	ldr	r2, [pc, #288]	@ (80032c4 <HAL_GPIO_Init+0x2f4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <HAL_GPIO_Init+0x1fe>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a47      	ldr	r2, [pc, #284]	@ (80032c8 <HAL_GPIO_Init+0x2f8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00d      	beq.n	80031ca <HAL_GPIO_Init+0x1fa>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a46      	ldr	r2, [pc, #280]	@ (80032cc <HAL_GPIO_Init+0x2fc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d007      	beq.n	80031c6 <HAL_GPIO_Init+0x1f6>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a45      	ldr	r2, [pc, #276]	@ (80032d0 <HAL_GPIO_Init+0x300>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d101      	bne.n	80031c2 <HAL_GPIO_Init+0x1f2>
 80031be:	2304      	movs	r3, #4
 80031c0:	e008      	b.n	80031d4 <HAL_GPIO_Init+0x204>
 80031c2:	2307      	movs	r3, #7
 80031c4:	e006      	b.n	80031d4 <HAL_GPIO_Init+0x204>
 80031c6:	2303      	movs	r3, #3
 80031c8:	e004      	b.n	80031d4 <HAL_GPIO_Init+0x204>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e002      	b.n	80031d4 <HAL_GPIO_Init+0x204>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <HAL_GPIO_Init+0x204>
 80031d2:	2300      	movs	r3, #0
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	f002 0203 	and.w	r2, r2, #3
 80031da:	0092      	lsls	r2, r2, #2
 80031dc:	4093      	lsls	r3, r2
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031e4:	4935      	ldr	r1, [pc, #212]	@ (80032bc <HAL_GPIO_Init+0x2ec>)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	089b      	lsrs	r3, r3, #2
 80031ea:	3302      	adds	r3, #2
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031f2:	4b38      	ldr	r3, [pc, #224]	@ (80032d4 <HAL_GPIO_Init+0x304>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003216:	4a2f      	ldr	r2, [pc, #188]	@ (80032d4 <HAL_GPIO_Init+0x304>)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800321c:	4b2d      	ldr	r3, [pc, #180]	@ (80032d4 <HAL_GPIO_Init+0x304>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003240:	4a24      	ldr	r2, [pc, #144]	@ (80032d4 <HAL_GPIO_Init+0x304>)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003246:	4b23      	ldr	r3, [pc, #140]	@ (80032d4 <HAL_GPIO_Init+0x304>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	43db      	mvns	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4013      	ands	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800326a:	4a1a      	ldr	r2, [pc, #104]	@ (80032d4 <HAL_GPIO_Init+0x304>)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003270:	4b18      	ldr	r3, [pc, #96]	@ (80032d4 <HAL_GPIO_Init+0x304>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003294:	4a0f      	ldr	r2, [pc, #60]	@ (80032d4 <HAL_GPIO_Init+0x304>)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	3301      	adds	r3, #1
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	2b0f      	cmp	r3, #15
 80032a4:	f67f aea2 	bls.w	8002fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3724      	adds	r7, #36	@ 0x24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40013800 	.word	0x40013800
 80032c0:	40020000 	.word	0x40020000
 80032c4:	40020400 	.word	0x40020400
 80032c8:	40020800 	.word	0x40020800
 80032cc:	40020c00 	.word	0x40020c00
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40013c00 	.word	0x40013c00

080032d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	807b      	strh	r3, [r7, #2]
 80032e4:	4613      	mov	r3, r2
 80032e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e8:	787b      	ldrb	r3, [r7, #1]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ee:	887a      	ldrh	r2, [r7, #2]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032f4:	e003      	b.n	80032fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032f6:	887b      	ldrh	r3, [r7, #2]
 80032f8:	041a      	lsls	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	619a      	str	r2, [r3, #24]
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e12b      	b.n	8003576 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fe fe3c 	bl	8001fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	@ 0x24
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800335e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800336e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003370:	f001 fd8e 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 8003374:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4a81      	ldr	r2, [pc, #516]	@ (8003580 <HAL_I2C_Init+0x274>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d807      	bhi.n	8003390 <HAL_I2C_Init+0x84>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a80      	ldr	r2, [pc, #512]	@ (8003584 <HAL_I2C_Init+0x278>)
 8003384:	4293      	cmp	r3, r2
 8003386:	bf94      	ite	ls
 8003388:	2301      	movls	r3, #1
 800338a:	2300      	movhi	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e006      	b.n	800339e <HAL_I2C_Init+0x92>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4a7d      	ldr	r2, [pc, #500]	@ (8003588 <HAL_I2C_Init+0x27c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	bf94      	ite	ls
 8003398:	2301      	movls	r3, #1
 800339a:	2300      	movhi	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e0e7      	b.n	8003576 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4a78      	ldr	r2, [pc, #480]	@ (800358c <HAL_I2C_Init+0x280>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	0c9b      	lsrs	r3, r3, #18
 80033b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003580 <HAL_I2C_Init+0x274>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d802      	bhi.n	80033e0 <HAL_I2C_Init+0xd4>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	3301      	adds	r3, #1
 80033de:	e009      	b.n	80033f4 <HAL_I2C_Init+0xe8>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	4a69      	ldr	r2, [pc, #420]	@ (8003590 <HAL_I2C_Init+0x284>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	3301      	adds	r3, #1
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003406:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	495c      	ldr	r1, [pc, #368]	@ (8003580 <HAL_I2C_Init+0x274>)
 8003410:	428b      	cmp	r3, r1
 8003412:	d819      	bhi.n	8003448 <HAL_I2C_Init+0x13c>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1e59      	subs	r1, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003422:	1c59      	adds	r1, r3, #1
 8003424:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003428:	400b      	ands	r3, r1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_I2C_Init+0x138>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1e59      	subs	r1, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fbb1 f3f3 	udiv	r3, r1, r3
 800343c:	3301      	adds	r3, #1
 800343e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003442:	e051      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 8003444:	2304      	movs	r3, #4
 8003446:	e04f      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d111      	bne.n	8003474 <HAL_I2C_Init+0x168>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e58      	subs	r0, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	440b      	add	r3, r1
 800345e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003462:	3301      	adds	r3, #1
 8003464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf0c      	ite	eq
 800346c:	2301      	moveq	r3, #1
 800346e:	2300      	movne	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e012      	b.n	800349a <HAL_I2C_Init+0x18e>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1e58      	subs	r0, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	0099      	lsls	r1, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	fbb0 f3f3 	udiv	r3, r0, r3
 800348a:	3301      	adds	r3, #1
 800348c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_Init+0x196>
 800349e:	2301      	movs	r3, #1
 80034a0:	e022      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10e      	bne.n	80034c8 <HAL_I2C_Init+0x1bc>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1e58      	subs	r0, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6859      	ldr	r1, [r3, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	440b      	add	r3, r1
 80034b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034c6:	e00f      	b.n	80034e8 <HAL_I2C_Init+0x1dc>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1e58      	subs	r0, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	0099      	lsls	r1, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	fbb0 f3f3 	udiv	r3, r0, r3
 80034de:	3301      	adds	r3, #1
 80034e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	6809      	ldr	r1, [r1, #0]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003516:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6911      	ldr	r1, [r2, #16]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68d2      	ldr	r2, [r2, #12]
 8003522:	4311      	orrs	r1, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	430b      	orrs	r3, r1
 800352a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	000186a0 	.word	0x000186a0
 8003584:	001e847f 	.word	0x001e847f
 8003588:	003d08ff 	.word	0x003d08ff
 800358c:	431bde83 	.word	0x431bde83
 8003590:	10624dd3 	.word	0x10624dd3

08003594 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	4608      	mov	r0, r1
 800359e:	4611      	mov	r1, r2
 80035a0:	461a      	mov	r2, r3
 80035a2:	4603      	mov	r3, r0
 80035a4:	817b      	strh	r3, [r7, #10]
 80035a6:	460b      	mov	r3, r1
 80035a8:	813b      	strh	r3, [r7, #8]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035ae:	f7ff f85d 	bl	800266c <HAL_GetTick>
 80035b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b20      	cmp	r3, #32
 80035be:	f040 80d9 	bne.w	8003774 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	2319      	movs	r3, #25
 80035c8:	2201      	movs	r2, #1
 80035ca:	496d      	ldr	r1, [pc, #436]	@ (8003780 <HAL_I2C_Mem_Write+0x1ec>)
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fdb9 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035d8:	2302      	movs	r3, #2
 80035da:	e0cc      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_I2C_Mem_Write+0x56>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e0c5      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d007      	beq.n	8003610 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800361e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2221      	movs	r2, #33	@ 0x21
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2240      	movs	r2, #64	@ 0x40
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a3a      	ldr	r2, [r7, #32]
 800363a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003640:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4a4d      	ldr	r2, [pc, #308]	@ (8003784 <HAL_I2C_Mem_Write+0x1f0>)
 8003650:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003652:	88f8      	ldrh	r0, [r7, #6]
 8003654:	893a      	ldrh	r2, [r7, #8]
 8003656:	8979      	ldrh	r1, [r7, #10]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	4603      	mov	r3, r0
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fbf0 	bl	8003e48 <I2C_RequestMemoryWrite>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d052      	beq.n	8003714 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e081      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fe7e 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00d      	beq.n	800369e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	2b04      	cmp	r3, #4
 8003688:	d107      	bne.n	800369a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003698:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e06b      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	781a      	ldrb	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d11b      	bne.n	8003714 <HAL_I2C_Mem_Write+0x180>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d017      	beq.n	8003714 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	781a      	ldrb	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1aa      	bne.n	8003672 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fe71 	bl	8004408 <I2C_WaitOnBTFFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00d      	beq.n	8003748 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	2b04      	cmp	r3, #4
 8003732:	d107      	bne.n	8003744 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003742:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e016      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	e000      	b.n	8003776 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003774:	2302      	movs	r3, #2
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	00100002 	.word	0x00100002
 8003784:	ffff0000 	.word	0xffff0000

08003788 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08c      	sub	sp, #48	@ 0x30
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	4608      	mov	r0, r1
 8003792:	4611      	mov	r1, r2
 8003794:	461a      	mov	r2, r3
 8003796:	4603      	mov	r3, r0
 8003798:	817b      	strh	r3, [r7, #10]
 800379a:	460b      	mov	r3, r1
 800379c:	813b      	strh	r3, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037a2:	f7fe ff63 	bl	800266c <HAL_GetTick>
 80037a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	f040 8214 	bne.w	8003bde <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	2319      	movs	r3, #25
 80037bc:	2201      	movs	r2, #1
 80037be:	497b      	ldr	r1, [pc, #492]	@ (80039ac <HAL_I2C_Mem_Read+0x224>)
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fcbf 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037cc:	2302      	movs	r3, #2
 80037ce:	e207      	b.n	8003be0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_I2C_Mem_Read+0x56>
 80037da:	2302      	movs	r3, #2
 80037dc:	e200      	b.n	8003be0 <HAL_I2C_Mem_Read+0x458>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d007      	beq.n	8003804 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003812:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2222      	movs	r2, #34	@ 0x22
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2240      	movs	r2, #64	@ 0x40
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800382e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003834:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a5b      	ldr	r2, [pc, #364]	@ (80039b0 <HAL_I2C_Mem_Read+0x228>)
 8003844:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003846:	88f8      	ldrh	r0, [r7, #6]
 8003848:	893a      	ldrh	r2, [r7, #8]
 800384a:	8979      	ldrh	r1, [r7, #10]
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	4603      	mov	r3, r0
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 fb8c 	bl	8003f74 <I2C_RequestMemoryRead>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e1bc      	b.n	8003be0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d113      	bne.n	8003896 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800386e:	2300      	movs	r3, #0
 8003870:	623b      	str	r3, [r7, #32]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	623b      	str	r3, [r7, #32]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	623b      	str	r3, [r7, #32]
 8003882:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e190      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389a:	2b01      	cmp	r3, #1
 800389c:	d11b      	bne.n	80038d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e170      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d11b      	bne.n	8003916 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	e150      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800392c:	e144      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003932:	2b03      	cmp	r3, #3
 8003934:	f200 80f1 	bhi.w	8003b1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393c:	2b01      	cmp	r3, #1
 800393e:	d123      	bne.n	8003988 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003942:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 fda7 	bl	8004498 <I2C_WaitOnRXNEFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e145      	b.n	8003be0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003986:	e117      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398c:	2b02      	cmp	r3, #2
 800398e:	d14e      	bne.n	8003a2e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003996:	2200      	movs	r2, #0
 8003998:	4906      	ldr	r1, [pc, #24]	@ (80039b4 <HAL_I2C_Mem_Read+0x22c>)
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fbd2 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d008      	beq.n	80039b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e11a      	b.n	8003be0 <HAL_I2C_Mem_Read+0x458>
 80039aa:	bf00      	nop
 80039ac:	00100002 	.word	0x00100002
 80039b0:	ffff0000 	.word	0xffff0000
 80039b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a2c:	e0c4      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a34:	2200      	movs	r2, #0
 8003a36:	496c      	ldr	r1, [pc, #432]	@ (8003be8 <HAL_I2C_Mem_Read+0x460>)
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 fb83 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0cb      	b.n	8003be0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a90:	2200      	movs	r2, #0
 8003a92:	4955      	ldr	r1, [pc, #340]	@ (8003be8 <HAL_I2C_Mem_Read+0x460>)
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 fb55 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e09d      	b.n	8003be0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b18:	e04e      	b.n	8003bb8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fcba 	bl	8004498 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e058      	b.n	8003be0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d124      	bne.n	8003bb8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d107      	bne.n	8003b86 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b84:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f47f aeb6 	bne.w	800392e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e000      	b.n	8003be0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003bde:	2302      	movs	r3, #2
  }
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3728      	adds	r7, #40	@ 0x28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	00010004 	.word	0x00010004

08003bec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	@ 0x28
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003bfc:	f7fe fd36 	bl	800266c <HAL_GetTick>
 8003c00:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	f040 8111 	bne.w	8003e36 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2319      	movs	r3, #25
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	4988      	ldr	r1, [pc, #544]	@ (8003e40 <HAL_I2C_IsDeviceReady+0x254>)
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 fa90 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e104      	b.n	8003e38 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_I2C_IsDeviceReady+0x50>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e0fd      	b.n	8003e38 <HAL_I2C_IsDeviceReady+0x24c>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d007      	beq.n	8003c62 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2224      	movs	r2, #36	@ 0x24
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4a70      	ldr	r2, [pc, #448]	@ (8003e44 <HAL_I2C_IsDeviceReady+0x258>)
 8003c84:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c94:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 fa4e 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00d      	beq.n	8003cca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cbc:	d103      	bne.n	8003cc6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cc4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0b6      	b.n	8003e38 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cca:	897b      	ldrh	r3, [r7, #10]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cd8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003cda:	f7fe fcc7 	bl	800266c <HAL_GetTick>
 8003cde:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	bf0c      	ite	eq
 8003cee:	2301      	moveq	r3, #1
 8003cf0:	2300      	movne	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d04:	bf0c      	ite	eq
 8003d06:	2301      	moveq	r3, #1
 8003d08:	2300      	movne	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d0e:	e025      	b.n	8003d5c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d10:	f7fe fcac 	bl	800266c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d302      	bcc.n	8003d26 <HAL_I2C_IsDeviceReady+0x13a>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d103      	bne.n	8003d2e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	22a0      	movs	r2, #160	@ 0xa0
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d66:	d005      	beq.n	8003d74 <HAL_I2C_IsDeviceReady+0x188>
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <HAL_I2C_IsDeviceReady+0x188>
 8003d6e:	7dbb      	ldrb	r3, [r7, #22]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0cd      	beq.n	8003d10 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d129      	bne.n	8003dde <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d98:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	2319      	movs	r3, #25
 8003db6:	2201      	movs	r2, #1
 8003db8:	4921      	ldr	r1, [pc, #132]	@ (8003e40 <HAL_I2C_IsDeviceReady+0x254>)
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f9c2 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e036      	b.n	8003e38 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e02c      	b.n	8003e38 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003df6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	2319      	movs	r3, #25
 8003dfe:	2201      	movs	r2, #1
 8003e00:	490f      	ldr	r1, [pc, #60]	@ (8003e40 <HAL_I2C_IsDeviceReady+0x254>)
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f99e 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e012      	b.n	8003e38 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	3301      	adds	r3, #1
 8003e16:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	f4ff af32 	bcc.w	8003c86 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e36:	2302      	movs	r3, #2
  }
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	00100002 	.word	0x00100002
 8003e44:	ffff0000 	.word	0xffff0000

08003e48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	4608      	mov	r0, r1
 8003e52:	4611      	mov	r1, r2
 8003e54:	461a      	mov	r2, r3
 8003e56:	4603      	mov	r3, r0
 8003e58:	817b      	strh	r3, [r7, #10]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	813b      	strh	r3, [r7, #8]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f960 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e98:	d103      	bne.n	8003ea2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ea0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e05f      	b.n	8003f66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ea6:	897b      	ldrh	r3, [r7, #10]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003eb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	6a3a      	ldr	r2, [r7, #32]
 8003eba:	492d      	ldr	r1, [pc, #180]	@ (8003f70 <I2C_RequestMemoryWrite+0x128>)
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f9bb 	bl	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e04c      	b.n	8003f66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee4:	6a39      	ldr	r1, [r7, #32]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fa46 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00d      	beq.n	8003f0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d107      	bne.n	8003f0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e02b      	b.n	8003f66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f14:	893b      	ldrh	r3, [r7, #8]
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	611a      	str	r2, [r3, #16]
 8003f1e:	e021      	b.n	8003f64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f20:	893b      	ldrh	r3, [r7, #8]
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f30:	6a39      	ldr	r1, [r7, #32]
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 fa20 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00d      	beq.n	8003f5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d107      	bne.n	8003f56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e005      	b.n	8003f66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f5a:	893b      	ldrh	r3, [r7, #8]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	00010002 	.word	0x00010002

08003f74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	4608      	mov	r0, r1
 8003f7e:	4611      	mov	r1, r2
 8003f80:	461a      	mov	r2, r3
 8003f82:	4603      	mov	r3, r0
 8003f84:	817b      	strh	r3, [r7, #10]
 8003f86:	460b      	mov	r3, r1
 8003f88:	813b      	strh	r3, [r7, #8]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f8c2 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00d      	beq.n	8003fe2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fd4:	d103      	bne.n	8003fde <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fdc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e0aa      	b.n	8004138 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fe2:	897b      	ldrh	r3, [r7, #10]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ff0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	6a3a      	ldr	r2, [r7, #32]
 8003ff6:	4952      	ldr	r1, [pc, #328]	@ (8004140 <I2C_RequestMemoryRead+0x1cc>)
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 f91d 	bl	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e097      	b.n	8004138 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800401e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004020:	6a39      	ldr	r1, [r7, #32]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f9a8 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00d      	beq.n	800404a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	2b04      	cmp	r3, #4
 8004034:	d107      	bne.n	8004046 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004044:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e076      	b.n	8004138 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d105      	bne.n	800405c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004050:	893b      	ldrh	r3, [r7, #8]
 8004052:	b2da      	uxtb	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	611a      	str	r2, [r3, #16]
 800405a:	e021      	b.n	80040a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800405c:	893b      	ldrh	r3, [r7, #8]
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	b29b      	uxth	r3, r3
 8004062:	b2da      	uxtb	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800406a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406c:	6a39      	ldr	r1, [r7, #32]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f982 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00d      	beq.n	8004096 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	2b04      	cmp	r3, #4
 8004080:	d107      	bne.n	8004092 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004090:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e050      	b.n	8004138 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004096:	893b      	ldrh	r3, [r7, #8]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a2:	6a39      	ldr	r1, [r7, #32]
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f967 	bl	8004378 <I2C_WaitOnTXEFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00d      	beq.n	80040cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d107      	bne.n	80040c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e035      	b.n	8004138 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f82b 	bl	8004144 <I2C_WaitOnFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00d      	beq.n	8004110 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004102:	d103      	bne.n	800410c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800410a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e013      	b.n	8004138 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004110:	897b      	ldrh	r3, [r7, #10]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	b2da      	uxtb	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	6a3a      	ldr	r2, [r7, #32]
 8004124:	4906      	ldr	r1, [pc, #24]	@ (8004140 <I2C_RequestMemoryRead+0x1cc>)
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f886 	bl	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	00010002 	.word	0x00010002

08004144 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	4613      	mov	r3, r2
 8004152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004154:	e048      	b.n	80041e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d044      	beq.n	80041e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415e:	f7fe fa85 	bl	800266c <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d302      	bcc.n	8004174 <I2C_WaitOnFlagUntilTimeout+0x30>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d139      	bne.n	80041e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	0c1b      	lsrs	r3, r3, #16
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	d10d      	bne.n	800419a <I2C_WaitOnFlagUntilTimeout+0x56>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	43da      	mvns	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4013      	ands	r3, r2
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf0c      	ite	eq
 8004190:	2301      	moveq	r3, #1
 8004192:	2300      	movne	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	e00c      	b.n	80041b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	43da      	mvns	r2, r3
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4013      	ands	r3, r2
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d116      	bne.n	80041e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	f043 0220 	orr.w	r2, r3, #32
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e023      	b.n	8004230 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	0c1b      	lsrs	r3, r3, #16
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d10d      	bne.n	800420e <I2C_WaitOnFlagUntilTimeout+0xca>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	43da      	mvns	r2, r3
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	4013      	ands	r3, r2
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	bf0c      	ite	eq
 8004204:	2301      	moveq	r3, #1
 8004206:	2300      	movne	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	e00c      	b.n	8004228 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	43da      	mvns	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4013      	ands	r3, r2
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	bf0c      	ite	eq
 8004220:	2301      	moveq	r3, #1
 8004222:	2300      	movne	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	461a      	mov	r2, r3
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	429a      	cmp	r2, r3
 800422c:	d093      	beq.n	8004156 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004246:	e071      	b.n	800432c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004256:	d123      	bne.n	80042a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004266:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004270:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428c:	f043 0204 	orr.w	r2, r3, #4
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e067      	b.n	8004370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a6:	d041      	beq.n	800432c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a8:	f7fe f9e0 	bl	800266c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d302      	bcc.n	80042be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d136      	bne.n	800432c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d10c      	bne.n	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	43da      	mvns	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4013      	ands	r3, r2
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	bf14      	ite	ne
 80042da:	2301      	movne	r3, #1
 80042dc:	2300      	moveq	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	e00b      	b.n	80042fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	43da      	mvns	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4013      	ands	r3, r2
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf14      	ite	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	2300      	moveq	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d016      	beq.n	800432c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e021      	b.n	8004370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	0c1b      	lsrs	r3, r3, #16
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b01      	cmp	r3, #1
 8004334:	d10c      	bne.n	8004350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	43da      	mvns	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4013      	ands	r3, r2
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf14      	ite	ne
 8004348:	2301      	movne	r3, #1
 800434a:	2300      	moveq	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e00b      	b.n	8004368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	43da      	mvns	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4013      	ands	r3, r2
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	bf14      	ite	ne
 8004362:	2301      	movne	r3, #1
 8004364:	2300      	moveq	r3, #0
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	f47f af6d 	bne.w	8004248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004384:	e034      	b.n	80043f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f8e3 	bl	8004552 <I2C_IsAcknowledgeFailed>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e034      	b.n	8004400 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439c:	d028      	beq.n	80043f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439e:	f7fe f965 	bl	800266c <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d302      	bcc.n	80043b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d11d      	bne.n	80043f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043be:	2b80      	cmp	r3, #128	@ 0x80
 80043c0:	d016      	beq.n	80043f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	f043 0220 	orr.w	r2, r3, #32
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e007      	b.n	8004400 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fa:	2b80      	cmp	r3, #128	@ 0x80
 80043fc:	d1c3      	bne.n	8004386 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004414:	e034      	b.n	8004480 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f89b 	bl	8004552 <I2C_IsAcknowledgeFailed>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e034      	b.n	8004490 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442c:	d028      	beq.n	8004480 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442e:	f7fe f91d 	bl	800266c <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	429a      	cmp	r2, r3
 800443c:	d302      	bcc.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d11d      	bne.n	8004480 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b04      	cmp	r3, #4
 8004450:	d016      	beq.n	8004480 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446c:	f043 0220 	orr.w	r2, r3, #32
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e007      	b.n	8004490 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b04      	cmp	r3, #4
 800448c:	d1c3      	bne.n	8004416 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044a4:	e049      	b.n	800453a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b10      	cmp	r3, #16
 80044b2:	d119      	bne.n	80044e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0210 	mvn.w	r2, #16
 80044bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e030      	b.n	800454a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e8:	f7fe f8c0 	bl	800266c <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d302      	bcc.n	80044fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d11d      	bne.n	800453a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004508:	2b40      	cmp	r3, #64	@ 0x40
 800450a:	d016      	beq.n	800453a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	f043 0220 	orr.w	r2, r3, #32
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e007      	b.n	800454a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004544:	2b40      	cmp	r3, #64	@ 0x40
 8004546:	d1ae      	bne.n	80044a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004568:	d11b      	bne.n	80045a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004572:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	f043 0204 	orr.w	r2, r3, #4
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e267      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d075      	beq.n	80046ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045ce:	4b88      	ldr	r3, [pc, #544]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d00c      	beq.n	80045f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045da:	4b85      	ldr	r3, [pc, #532]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d112      	bne.n	800460c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045e6:	4b82      	ldr	r3, [pc, #520]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045f2:	d10b      	bne.n	800460c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f4:	4b7e      	ldr	r3, [pc, #504]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d05b      	beq.n	80046b8 <HAL_RCC_OscConfig+0x108>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d157      	bne.n	80046b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e242      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004614:	d106      	bne.n	8004624 <HAL_RCC_OscConfig+0x74>
 8004616:	4b76      	ldr	r3, [pc, #472]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a75      	ldr	r2, [pc, #468]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800461c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e01d      	b.n	8004660 <HAL_RCC_OscConfig+0xb0>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800462c:	d10c      	bne.n	8004648 <HAL_RCC_OscConfig+0x98>
 800462e:	4b70      	ldr	r3, [pc, #448]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a6f      	ldr	r2, [pc, #444]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	4b6d      	ldr	r3, [pc, #436]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a6c      	ldr	r2, [pc, #432]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e00b      	b.n	8004660 <HAL_RCC_OscConfig+0xb0>
 8004648:	4b69      	ldr	r3, [pc, #420]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a68      	ldr	r2, [pc, #416]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800464e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	4b66      	ldr	r3, [pc, #408]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a65      	ldr	r2, [pc, #404]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800465a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800465e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d013      	beq.n	8004690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004668:	f7fe f800 	bl	800266c <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004670:	f7fd fffc 	bl	800266c <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	@ 0x64
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e207      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004682:	4b5b      	ldr	r3, [pc, #364]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0xc0>
 800468e:	e014      	b.n	80046ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004690:	f7fd ffec 	bl	800266c <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004698:	f7fd ffe8 	bl	800266c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	@ 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e1f3      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046aa:	4b51      	ldr	r3, [pc, #324]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0xe8>
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d063      	beq.n	800478e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046c6:	4b4a      	ldr	r3, [pc, #296]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046d2:	4b47      	ldr	r3, [pc, #284]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d11c      	bne.n	8004718 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046de:	4b44      	ldr	r3, [pc, #272]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d116      	bne.n	8004718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ea:	4b41      	ldr	r3, [pc, #260]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_RCC_OscConfig+0x152>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d001      	beq.n	8004702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e1c7      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004702:	4b3b      	ldr	r3, [pc, #236]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4937      	ldr	r1, [pc, #220]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004716:	e03a      	b.n	800478e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d020      	beq.n	8004762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004720:	4b34      	ldr	r3, [pc, #208]	@ (80047f4 <HAL_RCC_OscConfig+0x244>)
 8004722:	2201      	movs	r2, #1
 8004724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004726:	f7fd ffa1 	bl	800266c <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472e:	f7fd ff9d 	bl	800266c <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e1a8      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004740:	4b2b      	ldr	r3, [pc, #172]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f0      	beq.n	800472e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474c:	4b28      	ldr	r3, [pc, #160]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4925      	ldr	r1, [pc, #148]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 800475c:	4313      	orrs	r3, r2
 800475e:	600b      	str	r3, [r1, #0]
 8004760:	e015      	b.n	800478e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004762:	4b24      	ldr	r3, [pc, #144]	@ (80047f4 <HAL_RCC_OscConfig+0x244>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7fd ff80 	bl	800266c <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004770:	f7fd ff7c 	bl	800266c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e187      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004782:	4b1b      	ldr	r3, [pc, #108]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d036      	beq.n	8004808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047a2:	4b15      	ldr	r3, [pc, #84]	@ (80047f8 <HAL_RCC_OscConfig+0x248>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7fd ff60 	bl	800266c <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b0:	f7fd ff5c 	bl	800266c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e167      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c2:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <HAL_RCC_OscConfig+0x240>)
 80047c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x200>
 80047ce:	e01b      	b.n	8004808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d0:	4b09      	ldr	r3, [pc, #36]	@ (80047f8 <HAL_RCC_OscConfig+0x248>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d6:	f7fd ff49 	bl	800266c <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047dc:	e00e      	b.n	80047fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047de:	f7fd ff45 	bl	800266c <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d907      	bls.n	80047fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e150      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
 80047f0:	40023800 	.word	0x40023800
 80047f4:	42470000 	.word	0x42470000
 80047f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047fc:	4b88      	ldr	r3, [pc, #544]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80047fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1ea      	bne.n	80047de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8097 	beq.w	8004944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004816:	2300      	movs	r3, #0
 8004818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481a:	4b81      	ldr	r3, [pc, #516]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10f      	bne.n	8004846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004834:	6413      	str	r3, [r2, #64]	@ 0x40
 8004836:	4b7a      	ldr	r3, [pc, #488]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004846:	4b77      	ldr	r3, [pc, #476]	@ (8004a24 <HAL_RCC_OscConfig+0x474>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484e:	2b00      	cmp	r3, #0
 8004850:	d118      	bne.n	8004884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004852:	4b74      	ldr	r3, [pc, #464]	@ (8004a24 <HAL_RCC_OscConfig+0x474>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a73      	ldr	r2, [pc, #460]	@ (8004a24 <HAL_RCC_OscConfig+0x474>)
 8004858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800485c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800485e:	f7fd ff05 	bl	800266c <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004866:	f7fd ff01 	bl	800266c <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e10c      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004878:	4b6a      	ldr	r3, [pc, #424]	@ (8004a24 <HAL_RCC_OscConfig+0x474>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d106      	bne.n	800489a <HAL_RCC_OscConfig+0x2ea>
 800488c:	4b64      	ldr	r3, [pc, #400]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 800488e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004890:	4a63      	ldr	r2, [pc, #396]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	6713      	str	r3, [r2, #112]	@ 0x70
 8004898:	e01c      	b.n	80048d4 <HAL_RCC_OscConfig+0x324>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b05      	cmp	r3, #5
 80048a0:	d10c      	bne.n	80048bc <HAL_RCC_OscConfig+0x30c>
 80048a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048a8:	f043 0304 	orr.w	r3, r3, #4
 80048ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ba:	e00b      	b.n	80048d4 <HAL_RCC_OscConfig+0x324>
 80048bc:	4b58      	ldr	r3, [pc, #352]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c0:	4a57      	ldr	r2, [pc, #348]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048c8:	4b55      	ldr	r3, [pc, #340]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048cc:	4a54      	ldr	r2, [pc, #336]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048ce:	f023 0304 	bic.w	r3, r3, #4
 80048d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d015      	beq.n	8004908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048dc:	f7fd fec6 	bl	800266c <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e2:	e00a      	b.n	80048fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e4:	f7fd fec2 	bl	800266c <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e0cb      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fa:	4b49      	ldr	r3, [pc, #292]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0ee      	beq.n	80048e4 <HAL_RCC_OscConfig+0x334>
 8004906:	e014      	b.n	8004932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004908:	f7fd feb0 	bl	800266c <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800490e:	e00a      	b.n	8004926 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004910:	f7fd feac 	bl	800266c <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e0b5      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004926:	4b3e      	ldr	r3, [pc, #248]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1ee      	bne.n	8004910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d105      	bne.n	8004944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004938:	4b39      	ldr	r3, [pc, #228]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	4a38      	ldr	r2, [pc, #224]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 800493e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004942:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80a1 	beq.w	8004a90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800494e:	4b34      	ldr	r3, [pc, #208]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b08      	cmp	r3, #8
 8004958:	d05c      	beq.n	8004a14 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d141      	bne.n	80049e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004962:	4b31      	ldr	r3, [pc, #196]	@ (8004a28 <HAL_RCC_OscConfig+0x478>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004968:	f7fd fe80 	bl	800266c <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004970:	f7fd fe7c 	bl	800266c <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e087      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004982:	4b27      	ldr	r3, [pc, #156]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69da      	ldr	r2, [r3, #28]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	019b      	lsls	r3, r3, #6
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	3b01      	subs	r3, #1
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b0:	061b      	lsls	r3, r3, #24
 80049b2:	491b      	ldr	r1, [pc, #108]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a28 <HAL_RCC_OscConfig+0x478>)
 80049ba:	2201      	movs	r2, #1
 80049bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049be:	f7fd fe55 	bl	800266c <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c6:	f7fd fe51 	bl	800266c <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e05c      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d8:	4b11      	ldr	r3, [pc, #68]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0f0      	beq.n	80049c6 <HAL_RCC_OscConfig+0x416>
 80049e4:	e054      	b.n	8004a90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e6:	4b10      	ldr	r3, [pc, #64]	@ (8004a28 <HAL_RCC_OscConfig+0x478>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ec:	f7fd fe3e 	bl	800266c <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f4:	f7fd fe3a 	bl	800266c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e045      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a06:	4b06      	ldr	r3, [pc, #24]	@ (8004a20 <HAL_RCC_OscConfig+0x470>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x444>
 8004a12:	e03d      	b.n	8004a90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d107      	bne.n	8004a2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e038      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40007000 	.word	0x40007000
 8004a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a9c <HAL_RCC_OscConfig+0x4ec>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d028      	beq.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d121      	bne.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d11a      	bne.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d111      	bne.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a72:	085b      	lsrs	r3, r3, #1
 8004a74:	3b01      	subs	r3, #1
 8004a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800

08004aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0cc      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b68      	ldr	r3, [pc, #416]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d90c      	bls.n	8004adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b65      	ldr	r3, [pc, #404]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b63      	ldr	r3, [pc, #396]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0b8      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d020      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004af4:	4b59      	ldr	r3, [pc, #356]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4a58      	ldr	r2, [pc, #352]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004afe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b0c:	4b53      	ldr	r3, [pc, #332]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4a52      	ldr	r2, [pc, #328]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b18:	4b50      	ldr	r3, [pc, #320]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	494d      	ldr	r1, [pc, #308]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d044      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d107      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3e:	4b47      	ldr	r3, [pc, #284]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d119      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e07f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d003      	beq.n	8004b5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d109      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e06f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e067      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b7e:	4b37      	ldr	r3, [pc, #220]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f023 0203 	bic.w	r2, r3, #3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4934      	ldr	r1, [pc, #208]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b90:	f7fd fd6c 	bl	800266c <HAL_GetTick>
 8004b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b96:	e00a      	b.n	8004bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b98:	f7fd fd68 	bl	800266c <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e04f      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bae:	4b2b      	ldr	r3, [pc, #172]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 020c 	and.w	r2, r3, #12
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d1eb      	bne.n	8004b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc0:	4b25      	ldr	r3, [pc, #148]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d20c      	bcs.n	8004be8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bce:	4b22      	ldr	r3, [pc, #136]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd6:	4b20      	ldr	r3, [pc, #128]	@ (8004c58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e032      	b.n	8004c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf4:	4b19      	ldr	r3, [pc, #100]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4916      	ldr	r1, [pc, #88]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c12:	4b12      	ldr	r3, [pc, #72]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	490e      	ldr	r1, [pc, #56]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c26:	f000 f821 	bl	8004c6c <HAL_RCC_GetSysClockFreq>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	490a      	ldr	r1, [pc, #40]	@ (8004c60 <HAL_RCC_ClockConfig+0x1c0>)
 8004c38:	5ccb      	ldrb	r3, [r1, r3]
 8004c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3e:	4a09      	ldr	r2, [pc, #36]	@ (8004c64 <HAL_RCC_ClockConfig+0x1c4>)
 8004c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c42:	4b09      	ldr	r3, [pc, #36]	@ (8004c68 <HAL_RCC_ClockConfig+0x1c8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fd fccc 	bl	80025e4 <HAL_InitTick>

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40023c00 	.word	0x40023c00
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	0800b028 	.word	0x0800b028
 8004c64:	20000000 	.word	0x20000000
 8004c68:	20000004 	.word	0x20000004

08004c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c70:	b094      	sub	sp, #80	@ 0x50
 8004c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c84:	4b79      	ldr	r3, [pc, #484]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d00d      	beq.n	8004cac <HAL_RCC_GetSysClockFreq+0x40>
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	f200 80e1 	bhi.w	8004e58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d003      	beq.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c9e:	e0db      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ca0:	4b73      	ldr	r3, [pc, #460]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ca4:	e0db      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ca6:	4b73      	ldr	r3, [pc, #460]	@ (8004e74 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004caa:	e0d8      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cac:	4b6f      	ldr	r3, [pc, #444]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d063      	beq.n	8004d8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	2200      	movs	r2, #0
 8004cca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ccc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004cde:	4622      	mov	r2, r4
 8004ce0:	462b      	mov	r3, r5
 8004ce2:	f04f 0000 	mov.w	r0, #0
 8004ce6:	f04f 0100 	mov.w	r1, #0
 8004cea:	0159      	lsls	r1, r3, #5
 8004cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf0:	0150      	lsls	r0, r2, #5
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	1a51      	subs	r1, r2, r1
 8004cfa:	6139      	str	r1, [r7, #16]
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d10:	4659      	mov	r1, fp
 8004d12:	018b      	lsls	r3, r1, #6
 8004d14:	4651      	mov	r1, sl
 8004d16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d1a:	4651      	mov	r1, sl
 8004d1c:	018a      	lsls	r2, r1, #6
 8004d1e:	4651      	mov	r1, sl
 8004d20:	ebb2 0801 	subs.w	r8, r2, r1
 8004d24:	4659      	mov	r1, fp
 8004d26:	eb63 0901 	sbc.w	r9, r3, r1
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d3e:	4690      	mov	r8, r2
 8004d40:	4699      	mov	r9, r3
 8004d42:	4623      	mov	r3, r4
 8004d44:	eb18 0303 	adds.w	r3, r8, r3
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	462b      	mov	r3, r5
 8004d4c:	eb49 0303 	adc.w	r3, r9, r3
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d5e:	4629      	mov	r1, r5
 8004d60:	024b      	lsls	r3, r1, #9
 8004d62:	4621      	mov	r1, r4
 8004d64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d68:	4621      	mov	r1, r4
 8004d6a:	024a      	lsls	r2, r1, #9
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4619      	mov	r1, r3
 8004d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d72:	2200      	movs	r2, #0
 8004d74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d7c:	f7fb ff8c 	bl	8000c98 <__aeabi_uldivmod>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4613      	mov	r3, r2
 8004d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d88:	e058      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d8a:	4b38      	ldr	r3, [pc, #224]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	099b      	lsrs	r3, r3, #6
 8004d90:	2200      	movs	r2, #0
 8004d92:	4618      	mov	r0, r3
 8004d94:	4611      	mov	r1, r2
 8004d96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d9a:	623b      	str	r3, [r7, #32]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004da0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004da4:	4642      	mov	r2, r8
 8004da6:	464b      	mov	r3, r9
 8004da8:	f04f 0000 	mov.w	r0, #0
 8004dac:	f04f 0100 	mov.w	r1, #0
 8004db0:	0159      	lsls	r1, r3, #5
 8004db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004db6:	0150      	lsls	r0, r2, #5
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ddc:	ebb2 040a 	subs.w	r4, r2, sl
 8004de0:	eb63 050b 	sbc.w	r5, r3, fp
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	00eb      	lsls	r3, r5, #3
 8004dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004df2:	00e2      	lsls	r2, r4, #3
 8004df4:	4614      	mov	r4, r2
 8004df6:	461d      	mov	r5, r3
 8004df8:	4643      	mov	r3, r8
 8004dfa:	18e3      	adds	r3, r4, r3
 8004dfc:	603b      	str	r3, [r7, #0]
 8004dfe:	464b      	mov	r3, r9
 8004e00:	eb45 0303 	adc.w	r3, r5, r3
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e12:	4629      	mov	r1, r5
 8004e14:	028b      	lsls	r3, r1, #10
 8004e16:	4621      	mov	r1, r4
 8004e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	028a      	lsls	r2, r1, #10
 8004e20:	4610      	mov	r0, r2
 8004e22:	4619      	mov	r1, r3
 8004e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e26:	2200      	movs	r2, #0
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	61fa      	str	r2, [r7, #28]
 8004e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e30:	f7fb ff32 	bl	8000c98 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4613      	mov	r3, r2
 8004e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	3301      	adds	r3, #1
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e56:	e002      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3750      	adds	r7, #80	@ 0x50
 8004e64:	46bd      	mov	sp, r7
 8004e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	00f42400 	.word	0x00f42400
 8004e74:	007a1200 	.word	0x007a1200

08004e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e7c:	4b03      	ldr	r3, [pc, #12]	@ (8004e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	20000000 	.word	0x20000000

08004e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e94:	f7ff fff0 	bl	8004e78 <HAL_RCC_GetHCLKFreq>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	4b05      	ldr	r3, [pc, #20]	@ (8004eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	0a9b      	lsrs	r3, r3, #10
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	4903      	ldr	r1, [pc, #12]	@ (8004eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea6:	5ccb      	ldrb	r3, [r1, r3]
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	0800b038 	.word	0x0800b038

08004eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ebc:	f7ff ffdc 	bl	8004e78 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	0b5b      	lsrs	r3, r3, #13
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4903      	ldr	r1, [pc, #12]	@ (8004edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	0800b038 	.word	0x0800b038

08004ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e041      	b.n	8004f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fd f8bc 	bl	8002084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	f000 fab6 	bl	8005490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e041      	b.n	8005014 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d106      	bne.n	8004faa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7fd f84b 	bl	8002040 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2202      	movs	r2, #2
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f000 fa67 	bl	8005490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d109      	bne.n	8005040 <HAL_TIM_PWM_Start+0x24>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	bf14      	ite	ne
 8005038:	2301      	movne	r3, #1
 800503a:	2300      	moveq	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	e022      	b.n	8005086 <HAL_TIM_PWM_Start+0x6a>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b04      	cmp	r3, #4
 8005044:	d109      	bne.n	800505a <HAL_TIM_PWM_Start+0x3e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b01      	cmp	r3, #1
 8005050:	bf14      	ite	ne
 8005052:	2301      	movne	r3, #1
 8005054:	2300      	moveq	r3, #0
 8005056:	b2db      	uxtb	r3, r3
 8005058:	e015      	b.n	8005086 <HAL_TIM_PWM_Start+0x6a>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b08      	cmp	r3, #8
 800505e:	d109      	bne.n	8005074 <HAL_TIM_PWM_Start+0x58>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	bf14      	ite	ne
 800506c:	2301      	movne	r3, #1
 800506e:	2300      	moveq	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	e008      	b.n	8005086 <HAL_TIM_PWM_Start+0x6a>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	bf14      	ite	ne
 8005080:	2301      	movne	r3, #1
 8005082:	2300      	moveq	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e068      	b.n	8005160 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d104      	bne.n	800509e <HAL_TIM_PWM_Start+0x82>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800509c:	e013      	b.n	80050c6 <HAL_TIM_PWM_Start+0xaa>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d104      	bne.n	80050ae <HAL_TIM_PWM_Start+0x92>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050ac:	e00b      	b.n	80050c6 <HAL_TIM_PWM_Start+0xaa>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d104      	bne.n	80050be <HAL_TIM_PWM_Start+0xa2>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050bc:	e003      	b.n	80050c6 <HAL_TIM_PWM_Start+0xaa>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2201      	movs	r2, #1
 80050cc:	6839      	ldr	r1, [r7, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fc90 	bl	80059f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a23      	ldr	r2, [pc, #140]	@ (8005168 <HAL_TIM_PWM_Start+0x14c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d107      	bne.n	80050ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005168 <HAL_TIM_PWM_Start+0x14c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d018      	beq.n	800512a <HAL_TIM_PWM_Start+0x10e>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005100:	d013      	beq.n	800512a <HAL_TIM_PWM_Start+0x10e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a19      	ldr	r2, [pc, #100]	@ (800516c <HAL_TIM_PWM_Start+0x150>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00e      	beq.n	800512a <HAL_TIM_PWM_Start+0x10e>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a17      	ldr	r2, [pc, #92]	@ (8005170 <HAL_TIM_PWM_Start+0x154>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d009      	beq.n	800512a <HAL_TIM_PWM_Start+0x10e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a16      	ldr	r2, [pc, #88]	@ (8005174 <HAL_TIM_PWM_Start+0x158>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d004      	beq.n	800512a <HAL_TIM_PWM_Start+0x10e>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a14      	ldr	r2, [pc, #80]	@ (8005178 <HAL_TIM_PWM_Start+0x15c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d111      	bne.n	800514e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b06      	cmp	r3, #6
 800513a:	d010      	beq.n	800515e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514c:	e007      	b.n	800515e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40010000 	.word	0x40010000
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800
 8005174:	40000c00 	.word	0x40000c00
 8005178:	40014000 	.word	0x40014000

0800517c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005196:	2302      	movs	r3, #2
 8005198:	e0ae      	b.n	80052f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b0c      	cmp	r3, #12
 80051a6:	f200 809f 	bhi.w	80052e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051aa:	a201      	add	r2, pc, #4	@ (adr r2, 80051b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080051e5 	.word	0x080051e5
 80051b4:	080052e9 	.word	0x080052e9
 80051b8:	080052e9 	.word	0x080052e9
 80051bc:	080052e9 	.word	0x080052e9
 80051c0:	08005225 	.word	0x08005225
 80051c4:	080052e9 	.word	0x080052e9
 80051c8:	080052e9 	.word	0x080052e9
 80051cc:	080052e9 	.word	0x080052e9
 80051d0:	08005267 	.word	0x08005267
 80051d4:	080052e9 	.word	0x080052e9
 80051d8:	080052e9 	.word	0x080052e9
 80051dc:	080052e9 	.word	0x080052e9
 80051e0:	080052a7 	.word	0x080052a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 f9dc 	bl	80055a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0208 	orr.w	r2, r2, #8
 80051fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0204 	bic.w	r2, r2, #4
 800520e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6999      	ldr	r1, [r3, #24]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	619a      	str	r2, [r3, #24]
      break;
 8005222:	e064      	b.n	80052ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fa22 	bl	8005674 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800523e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800524e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6999      	ldr	r1, [r3, #24]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	021a      	lsls	r2, r3, #8
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	619a      	str	r2, [r3, #24]
      break;
 8005264:	e043      	b.n	80052ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fa6d 	bl	800574c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0208 	orr.w	r2, r2, #8
 8005280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0204 	bic.w	r2, r2, #4
 8005290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69d9      	ldr	r1, [r3, #28]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	61da      	str	r2, [r3, #28]
      break;
 80052a4:	e023      	b.n	80052ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fab7 	bl	8005820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69d9      	ldr	r1, [r3, #28]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	021a      	lsls	r2, r3, #8
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	61da      	str	r2, [r3, #28]
      break;
 80052e6:	e002      	b.n	80052ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	75fb      	strb	r3, [r7, #23]
      break;
 80052ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_TIM_ConfigClockSource+0x1c>
 8005318:	2302      	movs	r3, #2
 800531a:	e0b4      	b.n	8005486 <HAL_TIM_ConfigClockSource+0x186>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800533a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005342:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005354:	d03e      	beq.n	80053d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005356:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800535a:	f200 8087 	bhi.w	800546c <HAL_TIM_ConfigClockSource+0x16c>
 800535e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005362:	f000 8086 	beq.w	8005472 <HAL_TIM_ConfigClockSource+0x172>
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800536a:	d87f      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 800536c:	2b70      	cmp	r3, #112	@ 0x70
 800536e:	d01a      	beq.n	80053a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005370:	2b70      	cmp	r3, #112	@ 0x70
 8005372:	d87b      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 8005374:	2b60      	cmp	r3, #96	@ 0x60
 8005376:	d050      	beq.n	800541a <HAL_TIM_ConfigClockSource+0x11a>
 8005378:	2b60      	cmp	r3, #96	@ 0x60
 800537a:	d877      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 800537c:	2b50      	cmp	r3, #80	@ 0x50
 800537e:	d03c      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0xfa>
 8005380:	2b50      	cmp	r3, #80	@ 0x50
 8005382:	d873      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 8005384:	2b40      	cmp	r3, #64	@ 0x40
 8005386:	d058      	beq.n	800543a <HAL_TIM_ConfigClockSource+0x13a>
 8005388:	2b40      	cmp	r3, #64	@ 0x40
 800538a:	d86f      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 800538c:	2b30      	cmp	r3, #48	@ 0x30
 800538e:	d064      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15a>
 8005390:	2b30      	cmp	r3, #48	@ 0x30
 8005392:	d86b      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 8005394:	2b20      	cmp	r3, #32
 8005396:	d060      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15a>
 8005398:	2b20      	cmp	r3, #32
 800539a:	d867      	bhi.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
 800539c:	2b00      	cmp	r3, #0
 800539e:	d05c      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15a>
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d05a      	beq.n	800545a <HAL_TIM_ConfigClockSource+0x15a>
 80053a4:	e062      	b.n	800546c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053b6:	f000 fafd 	bl	80059b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	609a      	str	r2, [r3, #8]
      break;
 80053d2:	e04f      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053e4:	f000 fae6 	bl	80059b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053f6:	609a      	str	r2, [r3, #8]
      break;
 80053f8:	e03c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005406:	461a      	mov	r2, r3
 8005408:	f000 fa5a 	bl	80058c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2150      	movs	r1, #80	@ 0x50
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fab3 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005418:	e02c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005426:	461a      	mov	r2, r3
 8005428:	f000 fa79 	bl	800591e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2160      	movs	r1, #96	@ 0x60
 8005432:	4618      	mov	r0, r3
 8005434:	f000 faa3 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005438:	e01c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005446:	461a      	mov	r2, r3
 8005448:	f000 fa3a 	bl	80058c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2140      	movs	r1, #64	@ 0x40
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fa93 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 8005458:	e00c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4619      	mov	r1, r3
 8005464:	4610      	mov	r0, r2
 8005466:	f000 fa8a 	bl	800597e <TIM_ITRx_SetConfig>
      break;
 800546a:	e003      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	73fb      	strb	r3, [r7, #15]
      break;
 8005470:	e000      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005484:	7bfb      	ldrb	r3, [r7, #15]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a3a      	ldr	r2, [pc, #232]	@ (800558c <TIM_Base_SetConfig+0xfc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00f      	beq.n	80054c8 <TIM_Base_SetConfig+0x38>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ae:	d00b      	beq.n	80054c8 <TIM_Base_SetConfig+0x38>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a37      	ldr	r2, [pc, #220]	@ (8005590 <TIM_Base_SetConfig+0x100>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d007      	beq.n	80054c8 <TIM_Base_SetConfig+0x38>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a36      	ldr	r2, [pc, #216]	@ (8005594 <TIM_Base_SetConfig+0x104>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d003      	beq.n	80054c8 <TIM_Base_SetConfig+0x38>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a35      	ldr	r2, [pc, #212]	@ (8005598 <TIM_Base_SetConfig+0x108>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d108      	bne.n	80054da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a2b      	ldr	r2, [pc, #172]	@ (800558c <TIM_Base_SetConfig+0xfc>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01b      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e8:	d017      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a28      	ldr	r2, [pc, #160]	@ (8005590 <TIM_Base_SetConfig+0x100>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d013      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a27      	ldr	r2, [pc, #156]	@ (8005594 <TIM_Base_SetConfig+0x104>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00f      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a26      	ldr	r2, [pc, #152]	@ (8005598 <TIM_Base_SetConfig+0x108>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00b      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a25      	ldr	r2, [pc, #148]	@ (800559c <TIM_Base_SetConfig+0x10c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d007      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a24      	ldr	r2, [pc, #144]	@ (80055a0 <TIM_Base_SetConfig+0x110>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d003      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a23      	ldr	r2, [pc, #140]	@ (80055a4 <TIM_Base_SetConfig+0x114>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d108      	bne.n	800552c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a0e      	ldr	r2, [pc, #56]	@ (800558c <TIM_Base_SetConfig+0xfc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d103      	bne.n	8005560 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b01      	cmp	r3, #1
 8005570:	d105      	bne.n	800557e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f023 0201 	bic.w	r2, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	611a      	str	r2, [r3, #16]
  }
}
 800557e:	bf00      	nop
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40010000 	.word	0x40010000
 8005590:	40000400 	.word	0x40000400
 8005594:	40000800 	.word	0x40000800
 8005598:	40000c00 	.word	0x40000c00
 800559c:	40014000 	.word	0x40014000
 80055a0:	40014400 	.word	0x40014400
 80055a4:	40014800 	.word	0x40014800

080055a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	f023 0201 	bic.w	r2, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0303 	bic.w	r3, r3, #3
 80055de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f023 0302 	bic.w	r3, r3, #2
 80055f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005670 <TIM_OC1_SetConfig+0xc8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d10c      	bne.n	800561e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f023 0308 	bic.w	r3, r3, #8
 800560a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 0304 	bic.w	r3, r3, #4
 800561c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a13      	ldr	r2, [pc, #76]	@ (8005670 <TIM_OC1_SetConfig+0xc8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d111      	bne.n	800564a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800562c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4313      	orrs	r3, r2
 8005648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	621a      	str	r2, [r3, #32]
}
 8005664:	bf00      	nop
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	40010000 	.word	0x40010000

08005674 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f023 0210 	bic.w	r2, r3, #16
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f023 0320 	bic.w	r3, r3, #32
 80056be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005748 <TIM_OC2_SetConfig+0xd4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d10d      	bne.n	80056f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a15      	ldr	r2, [pc, #84]	@ (8005748 <TIM_OC2_SetConfig+0xd4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d113      	bne.n	8005720 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005706:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40010000 	.word	0x40010000

0800574c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800577a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0303 	bic.w	r3, r3, #3
 8005782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a1d      	ldr	r2, [pc, #116]	@ (800581c <TIM_OC3_SetConfig+0xd0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d10d      	bne.n	80057c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a14      	ldr	r2, [pc, #80]	@ (800581c <TIM_OC3_SetConfig+0xd0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d113      	bne.n	80057f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	621a      	str	r2, [r3, #32]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	40010000 	.word	0x40010000

08005820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800584e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800586a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	031b      	lsls	r3, r3, #12
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a10      	ldr	r2, [pc, #64]	@ (80058bc <TIM_OC4_SetConfig+0x9c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d109      	bne.n	8005894 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	019b      	lsls	r3, r3, #6
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40010000 	.word	0x40010000

080058c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	f023 0201 	bic.w	r2, r3, #1
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f023 030a 	bic.w	r3, r3, #10
 80058fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	621a      	str	r2, [r3, #32]
}
 8005912:	bf00      	nop
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800591e:	b480      	push	{r7}
 8005920:	b087      	sub	sp, #28
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f023 0210 	bic.w	r2, r3, #16
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	031b      	lsls	r3, r3, #12
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800595a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	621a      	str	r2, [r3, #32]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	f043 0307 	orr.w	r3, r3, #7
 80059a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	609a      	str	r2, [r3, #8]
}
 80059a8:	bf00      	nop
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	021a      	lsls	r2, r3, #8
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4313      	orrs	r3, r2
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	609a      	str	r2, [r3, #8]
}
 80059e8:	bf00      	nop
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	2201      	movs	r2, #1
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a1a      	ldr	r2, [r3, #32]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	43db      	mvns	r3, r3
 8005a16:	401a      	ands	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1a      	ldr	r2, [r3, #32]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 031f 	and.w	r3, r3, #31
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	621a      	str	r2, [r3, #32]
}
 8005a32:	bf00      	nop
 8005a34:	371c      	adds	r7, #28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
	...

08005a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e050      	b.n	8005afa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a1c      	ldr	r2, [pc, #112]	@ (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d018      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa4:	d013      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a18      	ldr	r2, [pc, #96]	@ (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00e      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a16      	ldr	r2, [pc, #88]	@ (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d009      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a15      	ldr	r2, [pc, #84]	@ (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d004      	beq.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a13      	ldr	r2, [pc, #76]	@ (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d10c      	bne.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40010000 	.word	0x40010000
 8005b0c:	40000400 	.word	0x40000400
 8005b10:	40000800 	.word	0x40000800
 8005b14:	40000c00 	.word	0x40000c00
 8005b18:	40014000 	.word	0x40014000

08005b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e042      	b.n	8005bb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7fc fb22 	bl	800218c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2224      	movs	r2, #36	@ 0x24
 8005b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fb79 	bl	8006258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08a      	sub	sp, #40	@ 0x28
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d175      	bne.n	8005cc8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <HAL_UART_Transmit+0x2c>
 8005be2:	88fb      	ldrh	r3, [r7, #6]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e06e      	b.n	8005cca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2221      	movs	r2, #33	@ 0x21
 8005bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bfa:	f7fc fd37 	bl	800266c <HAL_GetTick>
 8005bfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	88fa      	ldrh	r2, [r7, #6]
 8005c0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c14:	d108      	bne.n	8005c28 <HAL_UART_Transmit+0x6c>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d104      	bne.n	8005c28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	e003      	b.n	8005c30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c30:	e02e      	b.n	8005c90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2180      	movs	r1, #128	@ 0x80
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f98b 	bl	8005f58 <UART_WaitOnFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e03a      	b.n	8005cca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10b      	bne.n	8005c72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	3302      	adds	r3, #2
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	e007      	b.n	8005c82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1cb      	bne.n	8005c32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2140      	movs	r1, #64	@ 0x40
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f957 	bl	8005f58 <UART_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e006      	b.n	8005cca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	e000      	b.n	8005cca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005cc8:	2302      	movs	r3, #2
  }
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3720      	adds	r7, #32
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d112      	bne.n	8005d12 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <HAL_UART_Receive_DMA+0x26>
 8005cf2:	88fb      	ldrh	r3, [r7, #6]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e00b      	b.n	8005d14 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	461a      	mov	r2, r3
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f97f 	bl	800600c <UART_Start_Receive_DMA>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	e000      	b.n	8005d14 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005d12:	2302      	movs	r3, #2
  }
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b09c      	sub	sp, #112	@ 0x70
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d68:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d172      	bne.n	8005e5e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005d78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	330c      	adds	r3, #12
 8005d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005d9e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005da0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005da4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005da6:	e841 2300 	strex	r3, r2, [r1]
 8005daa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005dac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1e5      	bne.n	8005d7e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3314      	adds	r3, #20
 8005db8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc4:	f023 0301 	bic.w	r3, r3, #1
 8005dc8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3314      	adds	r3, #20
 8005dd0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005dd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005dd4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e5      	bne.n	8005db2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3314      	adds	r3, #20
 8005dec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	623b      	str	r3, [r7, #32]
   return(result);
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3314      	adds	r3, #20
 8005e04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005e06:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e5      	bne.n	8005de6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d119      	bne.n	8005e5e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	330c      	adds	r3, #12
 8005e30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f023 0310 	bic.w	r3, r3, #16
 8005e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	330c      	adds	r3, #12
 8005e48:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e4a:	61fa      	str	r2, [r7, #28]
 8005e4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	69b9      	ldr	r1, [r7, #24]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	617b      	str	r3, [r7, #20]
   return(result);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e5      	bne.n	8005e2a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e60:	2200      	movs	r2, #0
 8005e62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d106      	bne.n	8005e7a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e6e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e70:	4619      	mov	r1, r3
 8005e72:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005e74:	f7ff ff66 	bl	8005d44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e78:	e002      	b.n	8005e80 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005e7a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005e7c:	f7fb f8d8 	bl	8001030 <HAL_UART_RxCpltCallback>
}
 8005e80:	bf00      	nop
 8005e82:	3770      	adds	r7, #112	@ 0x70
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d108      	bne.n	8005eb6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ea8:	085b      	lsrs	r3, r3, #1
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	4619      	mov	r1, r3
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7ff ff48 	bl	8005d44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005eb4:	e002      	b.n	8005ebc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f7ff ff30 	bl	8005d1c <HAL_UART_RxHalfCpltCallback>
}
 8005ebc:	bf00      	nop
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ee0:	2b80      	cmp	r3, #128	@ 0x80
 8005ee2:	bf0c      	ite	eq
 8005ee4:	2301      	moveq	r3, #1
 8005ee6:	2300      	movne	r3, #0
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b21      	cmp	r3, #33	@ 0x21
 8005ef6:	d108      	bne.n	8005f0a <UART_DMAError+0x46>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2200      	movs	r2, #0
 8005f02:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005f04:	68b8      	ldr	r0, [r7, #8]
 8005f06:	f000 f91b 	bl	8006140 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f14:	2b40      	cmp	r3, #64	@ 0x40
 8005f16:	bf0c      	ite	eq
 8005f18:	2301      	moveq	r3, #1
 8005f1a:	2300      	movne	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b22      	cmp	r3, #34	@ 0x22
 8005f2a:	d108      	bne.n	8005f3e <UART_DMAError+0x7a>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d005      	beq.n	8005f3e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2200      	movs	r2, #0
 8005f36:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005f38:	68b8      	ldr	r0, [r7, #8]
 8005f3a:	f000 f929 	bl	8006190 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f42:	f043 0210 	orr.w	r2, r3, #16
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f4a:	68b8      	ldr	r0, [r7, #8]
 8005f4c:	f7ff fef0 	bl	8005d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	4613      	mov	r3, r2
 8005f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f68:	e03b      	b.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d037      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f72:	f7fc fb7b 	bl	800266c <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	6a3a      	ldr	r2, [r7, #32]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d302      	bcc.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e03a      	b.n	8006002 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d023      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b80      	cmp	r3, #128	@ 0x80
 8005f9e:	d020      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b40      	cmp	r3, #64	@ 0x40
 8005fa4:	d01d      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d116      	bne.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 f8e0 	bl	8006190 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2208      	movs	r2, #8
 8005fd4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e00f      	b.n	8006002 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4013      	ands	r3, r2
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	bf0c      	ite	eq
 8005ff2:	2301      	moveq	r3, #1
 8005ff4:	2300      	movne	r3, #0
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	79fb      	ldrb	r3, [r7, #7]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d0b4      	beq.n	8005f6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
	...

0800600c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b098      	sub	sp, #96	@ 0x60
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	4613      	mov	r3, r2
 8006018:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	88fa      	ldrh	r2, [r7, #6]
 8006024:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2222      	movs	r2, #34	@ 0x22
 8006030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006038:	4a3e      	ldr	r2, [pc, #248]	@ (8006134 <UART_Start_Receive_DMA+0x128>)
 800603a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006040:	4a3d      	ldr	r2, [pc, #244]	@ (8006138 <UART_Start_Receive_DMA+0x12c>)
 8006042:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006048:	4a3c      	ldr	r2, [pc, #240]	@ (800613c <UART_Start_Receive_DMA+0x130>)
 800604a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006050:	2200      	movs	r2, #0
 8006052:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006054:	f107 0308 	add.w	r3, r7, #8
 8006058:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3304      	adds	r3, #4
 8006064:	4619      	mov	r1, r3
 8006066:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	f7fc fcee 	bl	8002a4c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006070:	2300      	movs	r3, #0
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	613b      	str	r3, [r7, #16]
 8006084:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d019      	beq.n	80060c2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	330c      	adds	r3, #12
 8006094:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800609e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	330c      	adds	r3, #12
 80060ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060ae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80060b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80060b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80060bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e5      	bne.n	800608e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3314      	adds	r3, #20
 80060c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3314      	adds	r3, #20
 80060e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80060e2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80060e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80060e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e5      	bne.n	80060c2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3314      	adds	r3, #20
 80060fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	617b      	str	r3, [r7, #20]
   return(result);
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800610c:	653b      	str	r3, [r7, #80]	@ 0x50
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3314      	adds	r3, #20
 8006114:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006116:	627a      	str	r2, [r7, #36]	@ 0x24
 8006118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611a:	6a39      	ldr	r1, [r7, #32]
 800611c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	61fb      	str	r3, [r7, #28]
   return(result);
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e5      	bne.n	80060f6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3760      	adds	r7, #96	@ 0x60
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	08005d5d 	.word	0x08005d5d
 8006138:	08005e89 	.word	0x08005e89
 800613c:	08005ec5 	.word	0x08005ec5

08006140 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006140:	b480      	push	{r7}
 8006142:	b089      	sub	sp, #36	@ 0x24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	e853 3f00 	ldrex	r3, [r3]
 8006156:	60bb      	str	r3, [r7, #8]
   return(result);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	330c      	adds	r3, #12
 8006166:	69fa      	ldr	r2, [r7, #28]
 8006168:	61ba      	str	r2, [r7, #24]
 800616a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6979      	ldr	r1, [r7, #20]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	613b      	str	r3, [r7, #16]
   return(result);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e5      	bne.n	8006148 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006184:	bf00      	nop
 8006186:	3724      	adds	r7, #36	@ 0x24
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006190:	b480      	push	{r7}
 8006192:	b095      	sub	sp, #84	@ 0x54
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	330c      	adds	r3, #12
 800619e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80061ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e5      	bne.n	8006198 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3314      	adds	r3, #20
 80061d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	61fb      	str	r3, [r7, #28]
   return(result);
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f023 0301 	bic.w	r3, r3, #1
 80061e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3314      	adds	r3, #20
 80061ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e5      	bne.n	80061cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006204:	2b01      	cmp	r3, #1
 8006206:	d119      	bne.n	800623c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	330c      	adds	r3, #12
 800620e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	60bb      	str	r3, [r7, #8]
   return(result);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f023 0310 	bic.w	r3, r3, #16
 800621e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	330c      	adds	r3, #12
 8006226:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006228:	61ba      	str	r2, [r7, #24]
 800622a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6979      	ldr	r1, [r7, #20]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	613b      	str	r3, [r7, #16]
   return(result);
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e5      	bne.n	8006208 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800624a:	bf00      	nop
 800624c:	3754      	adds	r7, #84	@ 0x54
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
	...

08006258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800625c:	b0c0      	sub	sp, #256	@ 0x100
 800625e:	af00      	add	r7, sp, #0
 8006260:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006274:	68d9      	ldr	r1, [r3, #12]
 8006276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	ea40 0301 	orr.w	r3, r0, r1
 8006280:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	431a      	orrs	r2, r3
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	431a      	orrs	r2, r3
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80062b0:	f021 010c 	bic.w	r1, r1, #12
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80062be:	430b      	orrs	r3, r1
 80062c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80062ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d2:	6999      	ldr	r1, [r3, #24]
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	ea40 0301 	orr.w	r3, r0, r1
 80062de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	4b8f      	ldr	r3, [pc, #572]	@ (8006524 <UART_SetConfig+0x2cc>)
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d005      	beq.n	80062f8 <UART_SetConfig+0xa0>
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	4b8d      	ldr	r3, [pc, #564]	@ (8006528 <UART_SetConfig+0x2d0>)
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d104      	bne.n	8006302 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062f8:	f7fe fdde 	bl	8004eb8 <HAL_RCC_GetPCLK2Freq>
 80062fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006300:	e003      	b.n	800630a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006302:	f7fe fdc5 	bl	8004e90 <HAL_RCC_GetPCLK1Freq>
 8006306:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800630a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006314:	f040 810c 	bne.w	8006530 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800631c:	2200      	movs	r2, #0
 800631e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006322:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006326:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800632a:	4622      	mov	r2, r4
 800632c:	462b      	mov	r3, r5
 800632e:	1891      	adds	r1, r2, r2
 8006330:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006332:	415b      	adcs	r3, r3
 8006334:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006336:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800633a:	4621      	mov	r1, r4
 800633c:	eb12 0801 	adds.w	r8, r2, r1
 8006340:	4629      	mov	r1, r5
 8006342:	eb43 0901 	adc.w	r9, r3, r1
 8006346:	f04f 0200 	mov.w	r2, #0
 800634a:	f04f 0300 	mov.w	r3, #0
 800634e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800635a:	4690      	mov	r8, r2
 800635c:	4699      	mov	r9, r3
 800635e:	4623      	mov	r3, r4
 8006360:	eb18 0303 	adds.w	r3, r8, r3
 8006364:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006368:	462b      	mov	r3, r5
 800636a:	eb49 0303 	adc.w	r3, r9, r3
 800636e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800637e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006382:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006386:	460b      	mov	r3, r1
 8006388:	18db      	adds	r3, r3, r3
 800638a:	653b      	str	r3, [r7, #80]	@ 0x50
 800638c:	4613      	mov	r3, r2
 800638e:	eb42 0303 	adc.w	r3, r2, r3
 8006392:	657b      	str	r3, [r7, #84]	@ 0x54
 8006394:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006398:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800639c:	f7fa fc7c 	bl	8000c98 <__aeabi_uldivmod>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4b61      	ldr	r3, [pc, #388]	@ (800652c <UART_SetConfig+0x2d4>)
 80063a6:	fba3 2302 	umull	r2, r3, r3, r2
 80063aa:	095b      	lsrs	r3, r3, #5
 80063ac:	011c      	lsls	r4, r3, #4
 80063ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80063bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80063c0:	4642      	mov	r2, r8
 80063c2:	464b      	mov	r3, r9
 80063c4:	1891      	adds	r1, r2, r2
 80063c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80063c8:	415b      	adcs	r3, r3
 80063ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80063d0:	4641      	mov	r1, r8
 80063d2:	eb12 0a01 	adds.w	sl, r2, r1
 80063d6:	4649      	mov	r1, r9
 80063d8:	eb43 0b01 	adc.w	fp, r3, r1
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063f0:	4692      	mov	sl, r2
 80063f2:	469b      	mov	fp, r3
 80063f4:	4643      	mov	r3, r8
 80063f6:	eb1a 0303 	adds.w	r3, sl, r3
 80063fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063fe:	464b      	mov	r3, r9
 8006400:	eb4b 0303 	adc.w	r3, fp, r3
 8006404:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006414:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006418:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800641c:	460b      	mov	r3, r1
 800641e:	18db      	adds	r3, r3, r3
 8006420:	643b      	str	r3, [r7, #64]	@ 0x40
 8006422:	4613      	mov	r3, r2
 8006424:	eb42 0303 	adc.w	r3, r2, r3
 8006428:	647b      	str	r3, [r7, #68]	@ 0x44
 800642a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800642e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006432:	f7fa fc31 	bl	8000c98 <__aeabi_uldivmod>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4611      	mov	r1, r2
 800643c:	4b3b      	ldr	r3, [pc, #236]	@ (800652c <UART_SetConfig+0x2d4>)
 800643e:	fba3 2301 	umull	r2, r3, r3, r1
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	2264      	movs	r2, #100	@ 0x64
 8006446:	fb02 f303 	mul.w	r3, r2, r3
 800644a:	1acb      	subs	r3, r1, r3
 800644c:	00db      	lsls	r3, r3, #3
 800644e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006452:	4b36      	ldr	r3, [pc, #216]	@ (800652c <UART_SetConfig+0x2d4>)
 8006454:	fba3 2302 	umull	r2, r3, r3, r2
 8006458:	095b      	lsrs	r3, r3, #5
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006460:	441c      	add	r4, r3
 8006462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006466:	2200      	movs	r2, #0
 8006468:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800646c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006470:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006474:	4642      	mov	r2, r8
 8006476:	464b      	mov	r3, r9
 8006478:	1891      	adds	r1, r2, r2
 800647a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800647c:	415b      	adcs	r3, r3
 800647e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006480:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006484:	4641      	mov	r1, r8
 8006486:	1851      	adds	r1, r2, r1
 8006488:	6339      	str	r1, [r7, #48]	@ 0x30
 800648a:	4649      	mov	r1, r9
 800648c:	414b      	adcs	r3, r1
 800648e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800649c:	4659      	mov	r1, fp
 800649e:	00cb      	lsls	r3, r1, #3
 80064a0:	4651      	mov	r1, sl
 80064a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064a6:	4651      	mov	r1, sl
 80064a8:	00ca      	lsls	r2, r1, #3
 80064aa:	4610      	mov	r0, r2
 80064ac:	4619      	mov	r1, r3
 80064ae:	4603      	mov	r3, r0
 80064b0:	4642      	mov	r2, r8
 80064b2:	189b      	adds	r3, r3, r2
 80064b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064b8:	464b      	mov	r3, r9
 80064ba:	460a      	mov	r2, r1
 80064bc:	eb42 0303 	adc.w	r3, r2, r3
 80064c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80064d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064d8:	460b      	mov	r3, r1
 80064da:	18db      	adds	r3, r3, r3
 80064dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064de:	4613      	mov	r3, r2
 80064e0:	eb42 0303 	adc.w	r3, r2, r3
 80064e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80064ee:	f7fa fbd3 	bl	8000c98 <__aeabi_uldivmod>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4b0d      	ldr	r3, [pc, #52]	@ (800652c <UART_SetConfig+0x2d4>)
 80064f8:	fba3 1302 	umull	r1, r3, r3, r2
 80064fc:	095b      	lsrs	r3, r3, #5
 80064fe:	2164      	movs	r1, #100	@ 0x64
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	3332      	adds	r3, #50	@ 0x32
 800650a:	4a08      	ldr	r2, [pc, #32]	@ (800652c <UART_SetConfig+0x2d4>)
 800650c:	fba2 2303 	umull	r2, r3, r2, r3
 8006510:	095b      	lsrs	r3, r3, #5
 8006512:	f003 0207 	and.w	r2, r3, #7
 8006516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4422      	add	r2, r4
 800651e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006520:	e106      	b.n	8006730 <UART_SetConfig+0x4d8>
 8006522:	bf00      	nop
 8006524:	40011000 	.word	0x40011000
 8006528:	40011400 	.word	0x40011400
 800652c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006534:	2200      	movs	r2, #0
 8006536:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800653a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800653e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006542:	4642      	mov	r2, r8
 8006544:	464b      	mov	r3, r9
 8006546:	1891      	adds	r1, r2, r2
 8006548:	6239      	str	r1, [r7, #32]
 800654a:	415b      	adcs	r3, r3
 800654c:	627b      	str	r3, [r7, #36]	@ 0x24
 800654e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006552:	4641      	mov	r1, r8
 8006554:	1854      	adds	r4, r2, r1
 8006556:	4649      	mov	r1, r9
 8006558:	eb43 0501 	adc.w	r5, r3, r1
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	00eb      	lsls	r3, r5, #3
 8006566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800656a:	00e2      	lsls	r2, r4, #3
 800656c:	4614      	mov	r4, r2
 800656e:	461d      	mov	r5, r3
 8006570:	4643      	mov	r3, r8
 8006572:	18e3      	adds	r3, r4, r3
 8006574:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006578:	464b      	mov	r3, r9
 800657a:	eb45 0303 	adc.w	r3, r5, r3
 800657e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800658e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006592:	f04f 0200 	mov.w	r2, #0
 8006596:	f04f 0300 	mov.w	r3, #0
 800659a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800659e:	4629      	mov	r1, r5
 80065a0:	008b      	lsls	r3, r1, #2
 80065a2:	4621      	mov	r1, r4
 80065a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065a8:	4621      	mov	r1, r4
 80065aa:	008a      	lsls	r2, r1, #2
 80065ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80065b0:	f7fa fb72 	bl	8000c98 <__aeabi_uldivmod>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4b60      	ldr	r3, [pc, #384]	@ (800673c <UART_SetConfig+0x4e4>)
 80065ba:	fba3 2302 	umull	r2, r3, r3, r2
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	011c      	lsls	r4, r3, #4
 80065c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80065d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80065d4:	4642      	mov	r2, r8
 80065d6:	464b      	mov	r3, r9
 80065d8:	1891      	adds	r1, r2, r2
 80065da:	61b9      	str	r1, [r7, #24]
 80065dc:	415b      	adcs	r3, r3
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065e4:	4641      	mov	r1, r8
 80065e6:	1851      	adds	r1, r2, r1
 80065e8:	6139      	str	r1, [r7, #16]
 80065ea:	4649      	mov	r1, r9
 80065ec:	414b      	adcs	r3, r1
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065fc:	4659      	mov	r1, fp
 80065fe:	00cb      	lsls	r3, r1, #3
 8006600:	4651      	mov	r1, sl
 8006602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006606:	4651      	mov	r1, sl
 8006608:	00ca      	lsls	r2, r1, #3
 800660a:	4610      	mov	r0, r2
 800660c:	4619      	mov	r1, r3
 800660e:	4603      	mov	r3, r0
 8006610:	4642      	mov	r2, r8
 8006612:	189b      	adds	r3, r3, r2
 8006614:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006618:	464b      	mov	r3, r9
 800661a:	460a      	mov	r2, r1
 800661c:	eb42 0303 	adc.w	r3, r2, r3
 8006620:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800662e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	f04f 0300 	mov.w	r3, #0
 8006638:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800663c:	4649      	mov	r1, r9
 800663e:	008b      	lsls	r3, r1, #2
 8006640:	4641      	mov	r1, r8
 8006642:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006646:	4641      	mov	r1, r8
 8006648:	008a      	lsls	r2, r1, #2
 800664a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800664e:	f7fa fb23 	bl	8000c98 <__aeabi_uldivmod>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4611      	mov	r1, r2
 8006658:	4b38      	ldr	r3, [pc, #224]	@ (800673c <UART_SetConfig+0x4e4>)
 800665a:	fba3 2301 	umull	r2, r3, r3, r1
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	2264      	movs	r2, #100	@ 0x64
 8006662:	fb02 f303 	mul.w	r3, r2, r3
 8006666:	1acb      	subs	r3, r1, r3
 8006668:	011b      	lsls	r3, r3, #4
 800666a:	3332      	adds	r3, #50	@ 0x32
 800666c:	4a33      	ldr	r2, [pc, #204]	@ (800673c <UART_SetConfig+0x4e4>)
 800666e:	fba2 2303 	umull	r2, r3, r2, r3
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006678:	441c      	add	r4, r3
 800667a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800667e:	2200      	movs	r2, #0
 8006680:	673b      	str	r3, [r7, #112]	@ 0x70
 8006682:	677a      	str	r2, [r7, #116]	@ 0x74
 8006684:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006688:	4642      	mov	r2, r8
 800668a:	464b      	mov	r3, r9
 800668c:	1891      	adds	r1, r2, r2
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	415b      	adcs	r3, r3
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006698:	4641      	mov	r1, r8
 800669a:	1851      	adds	r1, r2, r1
 800669c:	6039      	str	r1, [r7, #0]
 800669e:	4649      	mov	r1, r9
 80066a0:	414b      	adcs	r3, r1
 80066a2:	607b      	str	r3, [r7, #4]
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066b0:	4659      	mov	r1, fp
 80066b2:	00cb      	lsls	r3, r1, #3
 80066b4:	4651      	mov	r1, sl
 80066b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066ba:	4651      	mov	r1, sl
 80066bc:	00ca      	lsls	r2, r1, #3
 80066be:	4610      	mov	r0, r2
 80066c0:	4619      	mov	r1, r3
 80066c2:	4603      	mov	r3, r0
 80066c4:	4642      	mov	r2, r8
 80066c6:	189b      	adds	r3, r3, r2
 80066c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066ca:	464b      	mov	r3, r9
 80066cc:	460a      	mov	r2, r1
 80066ce:	eb42 0303 	adc.w	r3, r2, r3
 80066d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80066de:	667a      	str	r2, [r7, #100]	@ 0x64
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	f04f 0300 	mov.w	r3, #0
 80066e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80066ec:	4649      	mov	r1, r9
 80066ee:	008b      	lsls	r3, r1, #2
 80066f0:	4641      	mov	r1, r8
 80066f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066f6:	4641      	mov	r1, r8
 80066f8:	008a      	lsls	r2, r1, #2
 80066fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80066fe:	f7fa facb 	bl	8000c98 <__aeabi_uldivmod>
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	4b0d      	ldr	r3, [pc, #52]	@ (800673c <UART_SetConfig+0x4e4>)
 8006708:	fba3 1302 	umull	r1, r3, r3, r2
 800670c:	095b      	lsrs	r3, r3, #5
 800670e:	2164      	movs	r1, #100	@ 0x64
 8006710:	fb01 f303 	mul.w	r3, r1, r3
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	3332      	adds	r3, #50	@ 0x32
 800671a:	4a08      	ldr	r2, [pc, #32]	@ (800673c <UART_SetConfig+0x4e4>)
 800671c:	fba2 2303 	umull	r2, r3, r2, r3
 8006720:	095b      	lsrs	r3, r3, #5
 8006722:	f003 020f 	and.w	r2, r3, #15
 8006726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4422      	add	r2, r4
 800672e:	609a      	str	r2, [r3, #8]
}
 8006730:	bf00      	nop
 8006732:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006736:	46bd      	mov	sp, r7
 8006738:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800673c:	51eb851f 	.word	0x51eb851f

08006740 <__cvt>:
 8006740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006744:	ec57 6b10 	vmov	r6, r7, d0
 8006748:	2f00      	cmp	r7, #0
 800674a:	460c      	mov	r4, r1
 800674c:	4619      	mov	r1, r3
 800674e:	463b      	mov	r3, r7
 8006750:	bfbb      	ittet	lt
 8006752:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006756:	461f      	movlt	r7, r3
 8006758:	2300      	movge	r3, #0
 800675a:	232d      	movlt	r3, #45	@ 0x2d
 800675c:	700b      	strb	r3, [r1, #0]
 800675e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006760:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006764:	4691      	mov	r9, r2
 8006766:	f023 0820 	bic.w	r8, r3, #32
 800676a:	bfbc      	itt	lt
 800676c:	4632      	movlt	r2, r6
 800676e:	4616      	movlt	r6, r2
 8006770:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006774:	d005      	beq.n	8006782 <__cvt+0x42>
 8006776:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800677a:	d100      	bne.n	800677e <__cvt+0x3e>
 800677c:	3401      	adds	r4, #1
 800677e:	2102      	movs	r1, #2
 8006780:	e000      	b.n	8006784 <__cvt+0x44>
 8006782:	2103      	movs	r1, #3
 8006784:	ab03      	add	r3, sp, #12
 8006786:	9301      	str	r3, [sp, #4]
 8006788:	ab02      	add	r3, sp, #8
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	ec47 6b10 	vmov	d0, r6, r7
 8006790:	4653      	mov	r3, sl
 8006792:	4622      	mov	r2, r4
 8006794:	f001 f974 	bl	8007a80 <_dtoa_r>
 8006798:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800679c:	4605      	mov	r5, r0
 800679e:	d119      	bne.n	80067d4 <__cvt+0x94>
 80067a0:	f019 0f01 	tst.w	r9, #1
 80067a4:	d00e      	beq.n	80067c4 <__cvt+0x84>
 80067a6:	eb00 0904 	add.w	r9, r0, r4
 80067aa:	2200      	movs	r2, #0
 80067ac:	2300      	movs	r3, #0
 80067ae:	4630      	mov	r0, r6
 80067b0:	4639      	mov	r1, r7
 80067b2:	f7fa f991 	bl	8000ad8 <__aeabi_dcmpeq>
 80067b6:	b108      	cbz	r0, 80067bc <__cvt+0x7c>
 80067b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80067bc:	2230      	movs	r2, #48	@ 0x30
 80067be:	9b03      	ldr	r3, [sp, #12]
 80067c0:	454b      	cmp	r3, r9
 80067c2:	d31e      	bcc.n	8006802 <__cvt+0xc2>
 80067c4:	9b03      	ldr	r3, [sp, #12]
 80067c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067c8:	1b5b      	subs	r3, r3, r5
 80067ca:	4628      	mov	r0, r5
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	b004      	add	sp, #16
 80067d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067d8:	eb00 0904 	add.w	r9, r0, r4
 80067dc:	d1e5      	bne.n	80067aa <__cvt+0x6a>
 80067de:	7803      	ldrb	r3, [r0, #0]
 80067e0:	2b30      	cmp	r3, #48	@ 0x30
 80067e2:	d10a      	bne.n	80067fa <__cvt+0xba>
 80067e4:	2200      	movs	r2, #0
 80067e6:	2300      	movs	r3, #0
 80067e8:	4630      	mov	r0, r6
 80067ea:	4639      	mov	r1, r7
 80067ec:	f7fa f974 	bl	8000ad8 <__aeabi_dcmpeq>
 80067f0:	b918      	cbnz	r0, 80067fa <__cvt+0xba>
 80067f2:	f1c4 0401 	rsb	r4, r4, #1
 80067f6:	f8ca 4000 	str.w	r4, [sl]
 80067fa:	f8da 3000 	ldr.w	r3, [sl]
 80067fe:	4499      	add	r9, r3
 8006800:	e7d3      	b.n	80067aa <__cvt+0x6a>
 8006802:	1c59      	adds	r1, r3, #1
 8006804:	9103      	str	r1, [sp, #12]
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	e7d9      	b.n	80067be <__cvt+0x7e>

0800680a <__exponent>:
 800680a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800680c:	2900      	cmp	r1, #0
 800680e:	bfba      	itte	lt
 8006810:	4249      	neglt	r1, r1
 8006812:	232d      	movlt	r3, #45	@ 0x2d
 8006814:	232b      	movge	r3, #43	@ 0x2b
 8006816:	2909      	cmp	r1, #9
 8006818:	7002      	strb	r2, [r0, #0]
 800681a:	7043      	strb	r3, [r0, #1]
 800681c:	dd29      	ble.n	8006872 <__exponent+0x68>
 800681e:	f10d 0307 	add.w	r3, sp, #7
 8006822:	461d      	mov	r5, r3
 8006824:	270a      	movs	r7, #10
 8006826:	461a      	mov	r2, r3
 8006828:	fbb1 f6f7 	udiv	r6, r1, r7
 800682c:	fb07 1416 	mls	r4, r7, r6, r1
 8006830:	3430      	adds	r4, #48	@ 0x30
 8006832:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006836:	460c      	mov	r4, r1
 8006838:	2c63      	cmp	r4, #99	@ 0x63
 800683a:	f103 33ff 	add.w	r3, r3, #4294967295
 800683e:	4631      	mov	r1, r6
 8006840:	dcf1      	bgt.n	8006826 <__exponent+0x1c>
 8006842:	3130      	adds	r1, #48	@ 0x30
 8006844:	1e94      	subs	r4, r2, #2
 8006846:	f803 1c01 	strb.w	r1, [r3, #-1]
 800684a:	1c41      	adds	r1, r0, #1
 800684c:	4623      	mov	r3, r4
 800684e:	42ab      	cmp	r3, r5
 8006850:	d30a      	bcc.n	8006868 <__exponent+0x5e>
 8006852:	f10d 0309 	add.w	r3, sp, #9
 8006856:	1a9b      	subs	r3, r3, r2
 8006858:	42ac      	cmp	r4, r5
 800685a:	bf88      	it	hi
 800685c:	2300      	movhi	r3, #0
 800685e:	3302      	adds	r3, #2
 8006860:	4403      	add	r3, r0
 8006862:	1a18      	subs	r0, r3, r0
 8006864:	b003      	add	sp, #12
 8006866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006868:	f813 6b01 	ldrb.w	r6, [r3], #1
 800686c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006870:	e7ed      	b.n	800684e <__exponent+0x44>
 8006872:	2330      	movs	r3, #48	@ 0x30
 8006874:	3130      	adds	r1, #48	@ 0x30
 8006876:	7083      	strb	r3, [r0, #2]
 8006878:	70c1      	strb	r1, [r0, #3]
 800687a:	1d03      	adds	r3, r0, #4
 800687c:	e7f1      	b.n	8006862 <__exponent+0x58>
	...

08006880 <_printf_float>:
 8006880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006884:	b08d      	sub	sp, #52	@ 0x34
 8006886:	460c      	mov	r4, r1
 8006888:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800688c:	4616      	mov	r6, r2
 800688e:	461f      	mov	r7, r3
 8006890:	4605      	mov	r5, r0
 8006892:	f000 ffed 	bl	8007870 <_localeconv_r>
 8006896:	6803      	ldr	r3, [r0, #0]
 8006898:	9304      	str	r3, [sp, #16]
 800689a:	4618      	mov	r0, r3
 800689c:	f7f9 fcf0 	bl	8000280 <strlen>
 80068a0:	2300      	movs	r3, #0
 80068a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80068a4:	f8d8 3000 	ldr.w	r3, [r8]
 80068a8:	9005      	str	r0, [sp, #20]
 80068aa:	3307      	adds	r3, #7
 80068ac:	f023 0307 	bic.w	r3, r3, #7
 80068b0:	f103 0208 	add.w	r2, r3, #8
 80068b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80068b8:	f8d4 b000 	ldr.w	fp, [r4]
 80068bc:	f8c8 2000 	str.w	r2, [r8]
 80068c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80068c8:	9307      	str	r3, [sp, #28]
 80068ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80068ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80068d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068d6:	4b9c      	ldr	r3, [pc, #624]	@ (8006b48 <_printf_float+0x2c8>)
 80068d8:	f04f 32ff 	mov.w	r2, #4294967295
 80068dc:	f7fa f92e 	bl	8000b3c <__aeabi_dcmpun>
 80068e0:	bb70      	cbnz	r0, 8006940 <_printf_float+0xc0>
 80068e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068e6:	4b98      	ldr	r3, [pc, #608]	@ (8006b48 <_printf_float+0x2c8>)
 80068e8:	f04f 32ff 	mov.w	r2, #4294967295
 80068ec:	f7fa f908 	bl	8000b00 <__aeabi_dcmple>
 80068f0:	bb30      	cbnz	r0, 8006940 <_printf_float+0xc0>
 80068f2:	2200      	movs	r2, #0
 80068f4:	2300      	movs	r3, #0
 80068f6:	4640      	mov	r0, r8
 80068f8:	4649      	mov	r1, r9
 80068fa:	f7fa f8f7 	bl	8000aec <__aeabi_dcmplt>
 80068fe:	b110      	cbz	r0, 8006906 <_printf_float+0x86>
 8006900:	232d      	movs	r3, #45	@ 0x2d
 8006902:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006906:	4a91      	ldr	r2, [pc, #580]	@ (8006b4c <_printf_float+0x2cc>)
 8006908:	4b91      	ldr	r3, [pc, #580]	@ (8006b50 <_printf_float+0x2d0>)
 800690a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800690e:	bf8c      	ite	hi
 8006910:	4690      	movhi	r8, r2
 8006912:	4698      	movls	r8, r3
 8006914:	2303      	movs	r3, #3
 8006916:	6123      	str	r3, [r4, #16]
 8006918:	f02b 0304 	bic.w	r3, fp, #4
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	f04f 0900 	mov.w	r9, #0
 8006922:	9700      	str	r7, [sp, #0]
 8006924:	4633      	mov	r3, r6
 8006926:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006928:	4621      	mov	r1, r4
 800692a:	4628      	mov	r0, r5
 800692c:	f000 f9d2 	bl	8006cd4 <_printf_common>
 8006930:	3001      	adds	r0, #1
 8006932:	f040 808d 	bne.w	8006a50 <_printf_float+0x1d0>
 8006936:	f04f 30ff 	mov.w	r0, #4294967295
 800693a:	b00d      	add	sp, #52	@ 0x34
 800693c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006940:	4642      	mov	r2, r8
 8006942:	464b      	mov	r3, r9
 8006944:	4640      	mov	r0, r8
 8006946:	4649      	mov	r1, r9
 8006948:	f7fa f8f8 	bl	8000b3c <__aeabi_dcmpun>
 800694c:	b140      	cbz	r0, 8006960 <_printf_float+0xe0>
 800694e:	464b      	mov	r3, r9
 8006950:	2b00      	cmp	r3, #0
 8006952:	bfbc      	itt	lt
 8006954:	232d      	movlt	r3, #45	@ 0x2d
 8006956:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800695a:	4a7e      	ldr	r2, [pc, #504]	@ (8006b54 <_printf_float+0x2d4>)
 800695c:	4b7e      	ldr	r3, [pc, #504]	@ (8006b58 <_printf_float+0x2d8>)
 800695e:	e7d4      	b.n	800690a <_printf_float+0x8a>
 8006960:	6863      	ldr	r3, [r4, #4]
 8006962:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006966:	9206      	str	r2, [sp, #24]
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	d13b      	bne.n	80069e4 <_printf_float+0x164>
 800696c:	2306      	movs	r3, #6
 800696e:	6063      	str	r3, [r4, #4]
 8006970:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006974:	2300      	movs	r3, #0
 8006976:	6022      	str	r2, [r4, #0]
 8006978:	9303      	str	r3, [sp, #12]
 800697a:	ab0a      	add	r3, sp, #40	@ 0x28
 800697c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006980:	ab09      	add	r3, sp, #36	@ 0x24
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	6861      	ldr	r1, [r4, #4]
 8006986:	ec49 8b10 	vmov	d0, r8, r9
 800698a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800698e:	4628      	mov	r0, r5
 8006990:	f7ff fed6 	bl	8006740 <__cvt>
 8006994:	9b06      	ldr	r3, [sp, #24]
 8006996:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006998:	2b47      	cmp	r3, #71	@ 0x47
 800699a:	4680      	mov	r8, r0
 800699c:	d129      	bne.n	80069f2 <_printf_float+0x172>
 800699e:	1cc8      	adds	r0, r1, #3
 80069a0:	db02      	blt.n	80069a8 <_printf_float+0x128>
 80069a2:	6863      	ldr	r3, [r4, #4]
 80069a4:	4299      	cmp	r1, r3
 80069a6:	dd41      	ble.n	8006a2c <_printf_float+0x1ac>
 80069a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80069ac:	fa5f fa8a 	uxtb.w	sl, sl
 80069b0:	3901      	subs	r1, #1
 80069b2:	4652      	mov	r2, sl
 80069b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80069b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80069ba:	f7ff ff26 	bl	800680a <__exponent>
 80069be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069c0:	1813      	adds	r3, r2, r0
 80069c2:	2a01      	cmp	r2, #1
 80069c4:	4681      	mov	r9, r0
 80069c6:	6123      	str	r3, [r4, #16]
 80069c8:	dc02      	bgt.n	80069d0 <_printf_float+0x150>
 80069ca:	6822      	ldr	r2, [r4, #0]
 80069cc:	07d2      	lsls	r2, r2, #31
 80069ce:	d501      	bpl.n	80069d4 <_printf_float+0x154>
 80069d0:	3301      	adds	r3, #1
 80069d2:	6123      	str	r3, [r4, #16]
 80069d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0a2      	beq.n	8006922 <_printf_float+0xa2>
 80069dc:	232d      	movs	r3, #45	@ 0x2d
 80069de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069e2:	e79e      	b.n	8006922 <_printf_float+0xa2>
 80069e4:	9a06      	ldr	r2, [sp, #24]
 80069e6:	2a47      	cmp	r2, #71	@ 0x47
 80069e8:	d1c2      	bne.n	8006970 <_printf_float+0xf0>
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1c0      	bne.n	8006970 <_printf_float+0xf0>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e7bd      	b.n	800696e <_printf_float+0xee>
 80069f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069f6:	d9db      	bls.n	80069b0 <_printf_float+0x130>
 80069f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80069fc:	d118      	bne.n	8006a30 <_printf_float+0x1b0>
 80069fe:	2900      	cmp	r1, #0
 8006a00:	6863      	ldr	r3, [r4, #4]
 8006a02:	dd0b      	ble.n	8006a1c <_printf_float+0x19c>
 8006a04:	6121      	str	r1, [r4, #16]
 8006a06:	b913      	cbnz	r3, 8006a0e <_printf_float+0x18e>
 8006a08:	6822      	ldr	r2, [r4, #0]
 8006a0a:	07d0      	lsls	r0, r2, #31
 8006a0c:	d502      	bpl.n	8006a14 <_printf_float+0x194>
 8006a0e:	3301      	adds	r3, #1
 8006a10:	440b      	add	r3, r1
 8006a12:	6123      	str	r3, [r4, #16]
 8006a14:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a16:	f04f 0900 	mov.w	r9, #0
 8006a1a:	e7db      	b.n	80069d4 <_printf_float+0x154>
 8006a1c:	b913      	cbnz	r3, 8006a24 <_printf_float+0x1a4>
 8006a1e:	6822      	ldr	r2, [r4, #0]
 8006a20:	07d2      	lsls	r2, r2, #31
 8006a22:	d501      	bpl.n	8006a28 <_printf_float+0x1a8>
 8006a24:	3302      	adds	r3, #2
 8006a26:	e7f4      	b.n	8006a12 <_printf_float+0x192>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e7f2      	b.n	8006a12 <_printf_float+0x192>
 8006a2c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a32:	4299      	cmp	r1, r3
 8006a34:	db05      	blt.n	8006a42 <_printf_float+0x1c2>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	6121      	str	r1, [r4, #16]
 8006a3a:	07d8      	lsls	r0, r3, #31
 8006a3c:	d5ea      	bpl.n	8006a14 <_printf_float+0x194>
 8006a3e:	1c4b      	adds	r3, r1, #1
 8006a40:	e7e7      	b.n	8006a12 <_printf_float+0x192>
 8006a42:	2900      	cmp	r1, #0
 8006a44:	bfd4      	ite	le
 8006a46:	f1c1 0202 	rsble	r2, r1, #2
 8006a4a:	2201      	movgt	r2, #1
 8006a4c:	4413      	add	r3, r2
 8006a4e:	e7e0      	b.n	8006a12 <_printf_float+0x192>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	055a      	lsls	r2, r3, #21
 8006a54:	d407      	bmi.n	8006a66 <_printf_float+0x1e6>
 8006a56:	6923      	ldr	r3, [r4, #16]
 8006a58:	4642      	mov	r2, r8
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	47b8      	blx	r7
 8006a60:	3001      	adds	r0, #1
 8006a62:	d12b      	bne.n	8006abc <_printf_float+0x23c>
 8006a64:	e767      	b.n	8006936 <_printf_float+0xb6>
 8006a66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a6a:	f240 80dd 	bls.w	8006c28 <_printf_float+0x3a8>
 8006a6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a72:	2200      	movs	r2, #0
 8006a74:	2300      	movs	r3, #0
 8006a76:	f7fa f82f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d033      	beq.n	8006ae6 <_printf_float+0x266>
 8006a7e:	4a37      	ldr	r2, [pc, #220]	@ (8006b5c <_printf_float+0x2dc>)
 8006a80:	2301      	movs	r3, #1
 8006a82:	4631      	mov	r1, r6
 8006a84:	4628      	mov	r0, r5
 8006a86:	47b8      	blx	r7
 8006a88:	3001      	adds	r0, #1
 8006a8a:	f43f af54 	beq.w	8006936 <_printf_float+0xb6>
 8006a8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006a92:	4543      	cmp	r3, r8
 8006a94:	db02      	blt.n	8006a9c <_printf_float+0x21c>
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	07d8      	lsls	r0, r3, #31
 8006a9a:	d50f      	bpl.n	8006abc <_printf_float+0x23c>
 8006a9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	47b8      	blx	r7
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	f43f af45 	beq.w	8006936 <_printf_float+0xb6>
 8006aac:	f04f 0900 	mov.w	r9, #0
 8006ab0:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ab4:	f104 0a1a 	add.w	sl, r4, #26
 8006ab8:	45c8      	cmp	r8, r9
 8006aba:	dc09      	bgt.n	8006ad0 <_printf_float+0x250>
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	079b      	lsls	r3, r3, #30
 8006ac0:	f100 8103 	bmi.w	8006cca <_printf_float+0x44a>
 8006ac4:	68e0      	ldr	r0, [r4, #12]
 8006ac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ac8:	4298      	cmp	r0, r3
 8006aca:	bfb8      	it	lt
 8006acc:	4618      	movlt	r0, r3
 8006ace:	e734      	b.n	800693a <_printf_float+0xba>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	4652      	mov	r2, sl
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	47b8      	blx	r7
 8006ada:	3001      	adds	r0, #1
 8006adc:	f43f af2b 	beq.w	8006936 <_printf_float+0xb6>
 8006ae0:	f109 0901 	add.w	r9, r9, #1
 8006ae4:	e7e8      	b.n	8006ab8 <_printf_float+0x238>
 8006ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	dc39      	bgt.n	8006b60 <_printf_float+0x2e0>
 8006aec:	4a1b      	ldr	r2, [pc, #108]	@ (8006b5c <_printf_float+0x2dc>)
 8006aee:	2301      	movs	r3, #1
 8006af0:	4631      	mov	r1, r6
 8006af2:	4628      	mov	r0, r5
 8006af4:	47b8      	blx	r7
 8006af6:	3001      	adds	r0, #1
 8006af8:	f43f af1d 	beq.w	8006936 <_printf_float+0xb6>
 8006afc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b00:	ea59 0303 	orrs.w	r3, r9, r3
 8006b04:	d102      	bne.n	8006b0c <_printf_float+0x28c>
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	07d9      	lsls	r1, r3, #31
 8006b0a:	d5d7      	bpl.n	8006abc <_printf_float+0x23c>
 8006b0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b10:	4631      	mov	r1, r6
 8006b12:	4628      	mov	r0, r5
 8006b14:	47b8      	blx	r7
 8006b16:	3001      	adds	r0, #1
 8006b18:	f43f af0d 	beq.w	8006936 <_printf_float+0xb6>
 8006b1c:	f04f 0a00 	mov.w	sl, #0
 8006b20:	f104 0b1a 	add.w	fp, r4, #26
 8006b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b26:	425b      	negs	r3, r3
 8006b28:	4553      	cmp	r3, sl
 8006b2a:	dc01      	bgt.n	8006b30 <_printf_float+0x2b0>
 8006b2c:	464b      	mov	r3, r9
 8006b2e:	e793      	b.n	8006a58 <_printf_float+0x1d8>
 8006b30:	2301      	movs	r3, #1
 8006b32:	465a      	mov	r2, fp
 8006b34:	4631      	mov	r1, r6
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b8      	blx	r7
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	f43f aefb 	beq.w	8006936 <_printf_float+0xb6>
 8006b40:	f10a 0a01 	add.w	sl, sl, #1
 8006b44:	e7ee      	b.n	8006b24 <_printf_float+0x2a4>
 8006b46:	bf00      	nop
 8006b48:	7fefffff 	.word	0x7fefffff
 8006b4c:	0800b04c 	.word	0x0800b04c
 8006b50:	0800b048 	.word	0x0800b048
 8006b54:	0800b054 	.word	0x0800b054
 8006b58:	0800b050 	.word	0x0800b050
 8006b5c:	0800b058 	.word	0x0800b058
 8006b60:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b62:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b66:	4553      	cmp	r3, sl
 8006b68:	bfa8      	it	ge
 8006b6a:	4653      	movge	r3, sl
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	4699      	mov	r9, r3
 8006b70:	dc36      	bgt.n	8006be0 <_printf_float+0x360>
 8006b72:	f04f 0b00 	mov.w	fp, #0
 8006b76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b7a:	f104 021a 	add.w	r2, r4, #26
 8006b7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b80:	9306      	str	r3, [sp, #24]
 8006b82:	eba3 0309 	sub.w	r3, r3, r9
 8006b86:	455b      	cmp	r3, fp
 8006b88:	dc31      	bgt.n	8006bee <_printf_float+0x36e>
 8006b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b8c:	459a      	cmp	sl, r3
 8006b8e:	dc3a      	bgt.n	8006c06 <_printf_float+0x386>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	07da      	lsls	r2, r3, #31
 8006b94:	d437      	bmi.n	8006c06 <_printf_float+0x386>
 8006b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b98:	ebaa 0903 	sub.w	r9, sl, r3
 8006b9c:	9b06      	ldr	r3, [sp, #24]
 8006b9e:	ebaa 0303 	sub.w	r3, sl, r3
 8006ba2:	4599      	cmp	r9, r3
 8006ba4:	bfa8      	it	ge
 8006ba6:	4699      	movge	r9, r3
 8006ba8:	f1b9 0f00 	cmp.w	r9, #0
 8006bac:	dc33      	bgt.n	8006c16 <_printf_float+0x396>
 8006bae:	f04f 0800 	mov.w	r8, #0
 8006bb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bb6:	f104 0b1a 	add.w	fp, r4, #26
 8006bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bbc:	ebaa 0303 	sub.w	r3, sl, r3
 8006bc0:	eba3 0309 	sub.w	r3, r3, r9
 8006bc4:	4543      	cmp	r3, r8
 8006bc6:	f77f af79 	ble.w	8006abc <_printf_float+0x23c>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	465a      	mov	r2, fp
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b8      	blx	r7
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	f43f aeae 	beq.w	8006936 <_printf_float+0xb6>
 8006bda:	f108 0801 	add.w	r8, r8, #1
 8006bde:	e7ec      	b.n	8006bba <_printf_float+0x33a>
 8006be0:	4642      	mov	r2, r8
 8006be2:	4631      	mov	r1, r6
 8006be4:	4628      	mov	r0, r5
 8006be6:	47b8      	blx	r7
 8006be8:	3001      	adds	r0, #1
 8006bea:	d1c2      	bne.n	8006b72 <_printf_float+0x2f2>
 8006bec:	e6a3      	b.n	8006936 <_printf_float+0xb6>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	9206      	str	r2, [sp, #24]
 8006bf6:	47b8      	blx	r7
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	f43f ae9c 	beq.w	8006936 <_printf_float+0xb6>
 8006bfe:	9a06      	ldr	r2, [sp, #24]
 8006c00:	f10b 0b01 	add.w	fp, fp, #1
 8006c04:	e7bb      	b.n	8006b7e <_printf_float+0x2fe>
 8006c06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	47b8      	blx	r7
 8006c10:	3001      	adds	r0, #1
 8006c12:	d1c0      	bne.n	8006b96 <_printf_float+0x316>
 8006c14:	e68f      	b.n	8006936 <_printf_float+0xb6>
 8006c16:	9a06      	ldr	r2, [sp, #24]
 8006c18:	464b      	mov	r3, r9
 8006c1a:	4442      	add	r2, r8
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4628      	mov	r0, r5
 8006c20:	47b8      	blx	r7
 8006c22:	3001      	adds	r0, #1
 8006c24:	d1c3      	bne.n	8006bae <_printf_float+0x32e>
 8006c26:	e686      	b.n	8006936 <_printf_float+0xb6>
 8006c28:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c2c:	f1ba 0f01 	cmp.w	sl, #1
 8006c30:	dc01      	bgt.n	8006c36 <_printf_float+0x3b6>
 8006c32:	07db      	lsls	r3, r3, #31
 8006c34:	d536      	bpl.n	8006ca4 <_printf_float+0x424>
 8006c36:	2301      	movs	r3, #1
 8006c38:	4642      	mov	r2, r8
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b8      	blx	r7
 8006c40:	3001      	adds	r0, #1
 8006c42:	f43f ae78 	beq.w	8006936 <_printf_float+0xb6>
 8006c46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b8      	blx	r7
 8006c50:	3001      	adds	r0, #1
 8006c52:	f43f ae70 	beq.w	8006936 <_printf_float+0xb6>
 8006c56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c62:	f7f9 ff39 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c66:	b9c0      	cbnz	r0, 8006c9a <_printf_float+0x41a>
 8006c68:	4653      	mov	r3, sl
 8006c6a:	f108 0201 	add.w	r2, r8, #1
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4628      	mov	r0, r5
 8006c72:	47b8      	blx	r7
 8006c74:	3001      	adds	r0, #1
 8006c76:	d10c      	bne.n	8006c92 <_printf_float+0x412>
 8006c78:	e65d      	b.n	8006936 <_printf_float+0xb6>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	465a      	mov	r2, fp
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b8      	blx	r7
 8006c84:	3001      	adds	r0, #1
 8006c86:	f43f ae56 	beq.w	8006936 <_printf_float+0xb6>
 8006c8a:	f108 0801 	add.w	r8, r8, #1
 8006c8e:	45d0      	cmp	r8, sl
 8006c90:	dbf3      	blt.n	8006c7a <_printf_float+0x3fa>
 8006c92:	464b      	mov	r3, r9
 8006c94:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006c98:	e6df      	b.n	8006a5a <_printf_float+0x1da>
 8006c9a:	f04f 0800 	mov.w	r8, #0
 8006c9e:	f104 0b1a 	add.w	fp, r4, #26
 8006ca2:	e7f4      	b.n	8006c8e <_printf_float+0x40e>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	4642      	mov	r2, r8
 8006ca8:	e7e1      	b.n	8006c6e <_printf_float+0x3ee>
 8006caa:	2301      	movs	r3, #1
 8006cac:	464a      	mov	r2, r9
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	f43f ae3e 	beq.w	8006936 <_printf_float+0xb6>
 8006cba:	f108 0801 	add.w	r8, r8, #1
 8006cbe:	68e3      	ldr	r3, [r4, #12]
 8006cc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cc2:	1a5b      	subs	r3, r3, r1
 8006cc4:	4543      	cmp	r3, r8
 8006cc6:	dcf0      	bgt.n	8006caa <_printf_float+0x42a>
 8006cc8:	e6fc      	b.n	8006ac4 <_printf_float+0x244>
 8006cca:	f04f 0800 	mov.w	r8, #0
 8006cce:	f104 0919 	add.w	r9, r4, #25
 8006cd2:	e7f4      	b.n	8006cbe <_printf_float+0x43e>

08006cd4 <_printf_common>:
 8006cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd8:	4616      	mov	r6, r2
 8006cda:	4698      	mov	r8, r3
 8006cdc:	688a      	ldr	r2, [r1, #8]
 8006cde:	690b      	ldr	r3, [r1, #16]
 8006ce0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	bfb8      	it	lt
 8006ce8:	4613      	movlt	r3, r2
 8006cea:	6033      	str	r3, [r6, #0]
 8006cec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	b10a      	cbz	r2, 8006cfa <_printf_common+0x26>
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	6033      	str	r3, [r6, #0]
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	0699      	lsls	r1, r3, #26
 8006cfe:	bf42      	ittt	mi
 8006d00:	6833      	ldrmi	r3, [r6, #0]
 8006d02:	3302      	addmi	r3, #2
 8006d04:	6033      	strmi	r3, [r6, #0]
 8006d06:	6825      	ldr	r5, [r4, #0]
 8006d08:	f015 0506 	ands.w	r5, r5, #6
 8006d0c:	d106      	bne.n	8006d1c <_printf_common+0x48>
 8006d0e:	f104 0a19 	add.w	sl, r4, #25
 8006d12:	68e3      	ldr	r3, [r4, #12]
 8006d14:	6832      	ldr	r2, [r6, #0]
 8006d16:	1a9b      	subs	r3, r3, r2
 8006d18:	42ab      	cmp	r3, r5
 8006d1a:	dc26      	bgt.n	8006d6a <_printf_common+0x96>
 8006d1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d20:	6822      	ldr	r2, [r4, #0]
 8006d22:	3b00      	subs	r3, #0
 8006d24:	bf18      	it	ne
 8006d26:	2301      	movne	r3, #1
 8006d28:	0692      	lsls	r2, r2, #26
 8006d2a:	d42b      	bmi.n	8006d84 <_printf_common+0xb0>
 8006d2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d30:	4641      	mov	r1, r8
 8006d32:	4638      	mov	r0, r7
 8006d34:	47c8      	blx	r9
 8006d36:	3001      	adds	r0, #1
 8006d38:	d01e      	beq.n	8006d78 <_printf_common+0xa4>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	6922      	ldr	r2, [r4, #16]
 8006d3e:	f003 0306 	and.w	r3, r3, #6
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	bf02      	ittt	eq
 8006d46:	68e5      	ldreq	r5, [r4, #12]
 8006d48:	6833      	ldreq	r3, [r6, #0]
 8006d4a:	1aed      	subeq	r5, r5, r3
 8006d4c:	68a3      	ldr	r3, [r4, #8]
 8006d4e:	bf0c      	ite	eq
 8006d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d54:	2500      	movne	r5, #0
 8006d56:	4293      	cmp	r3, r2
 8006d58:	bfc4      	itt	gt
 8006d5a:	1a9b      	subgt	r3, r3, r2
 8006d5c:	18ed      	addgt	r5, r5, r3
 8006d5e:	2600      	movs	r6, #0
 8006d60:	341a      	adds	r4, #26
 8006d62:	42b5      	cmp	r5, r6
 8006d64:	d11a      	bne.n	8006d9c <_printf_common+0xc8>
 8006d66:	2000      	movs	r0, #0
 8006d68:	e008      	b.n	8006d7c <_printf_common+0xa8>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	4652      	mov	r2, sl
 8006d6e:	4641      	mov	r1, r8
 8006d70:	4638      	mov	r0, r7
 8006d72:	47c8      	blx	r9
 8006d74:	3001      	adds	r0, #1
 8006d76:	d103      	bne.n	8006d80 <_printf_common+0xac>
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d80:	3501      	adds	r5, #1
 8006d82:	e7c6      	b.n	8006d12 <_printf_common+0x3e>
 8006d84:	18e1      	adds	r1, r4, r3
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	2030      	movs	r0, #48	@ 0x30
 8006d8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d8e:	4422      	add	r2, r4
 8006d90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d98:	3302      	adds	r3, #2
 8006d9a:	e7c7      	b.n	8006d2c <_printf_common+0x58>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	4622      	mov	r2, r4
 8006da0:	4641      	mov	r1, r8
 8006da2:	4638      	mov	r0, r7
 8006da4:	47c8      	blx	r9
 8006da6:	3001      	adds	r0, #1
 8006da8:	d0e6      	beq.n	8006d78 <_printf_common+0xa4>
 8006daa:	3601      	adds	r6, #1
 8006dac:	e7d9      	b.n	8006d62 <_printf_common+0x8e>
	...

08006db0 <_printf_i>:
 8006db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006db4:	7e0f      	ldrb	r7, [r1, #24]
 8006db6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006db8:	2f78      	cmp	r7, #120	@ 0x78
 8006dba:	4691      	mov	r9, r2
 8006dbc:	4680      	mov	r8, r0
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	469a      	mov	sl, r3
 8006dc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006dc6:	d807      	bhi.n	8006dd8 <_printf_i+0x28>
 8006dc8:	2f62      	cmp	r7, #98	@ 0x62
 8006dca:	d80a      	bhi.n	8006de2 <_printf_i+0x32>
 8006dcc:	2f00      	cmp	r7, #0
 8006dce:	f000 80d1 	beq.w	8006f74 <_printf_i+0x1c4>
 8006dd2:	2f58      	cmp	r7, #88	@ 0x58
 8006dd4:	f000 80b8 	beq.w	8006f48 <_printf_i+0x198>
 8006dd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ddc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006de0:	e03a      	b.n	8006e58 <_printf_i+0xa8>
 8006de2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006de6:	2b15      	cmp	r3, #21
 8006de8:	d8f6      	bhi.n	8006dd8 <_printf_i+0x28>
 8006dea:	a101      	add	r1, pc, #4	@ (adr r1, 8006df0 <_printf_i+0x40>)
 8006dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006df0:	08006e49 	.word	0x08006e49
 8006df4:	08006e5d 	.word	0x08006e5d
 8006df8:	08006dd9 	.word	0x08006dd9
 8006dfc:	08006dd9 	.word	0x08006dd9
 8006e00:	08006dd9 	.word	0x08006dd9
 8006e04:	08006dd9 	.word	0x08006dd9
 8006e08:	08006e5d 	.word	0x08006e5d
 8006e0c:	08006dd9 	.word	0x08006dd9
 8006e10:	08006dd9 	.word	0x08006dd9
 8006e14:	08006dd9 	.word	0x08006dd9
 8006e18:	08006dd9 	.word	0x08006dd9
 8006e1c:	08006f5b 	.word	0x08006f5b
 8006e20:	08006e87 	.word	0x08006e87
 8006e24:	08006f15 	.word	0x08006f15
 8006e28:	08006dd9 	.word	0x08006dd9
 8006e2c:	08006dd9 	.word	0x08006dd9
 8006e30:	08006f7d 	.word	0x08006f7d
 8006e34:	08006dd9 	.word	0x08006dd9
 8006e38:	08006e87 	.word	0x08006e87
 8006e3c:	08006dd9 	.word	0x08006dd9
 8006e40:	08006dd9 	.word	0x08006dd9
 8006e44:	08006f1d 	.word	0x08006f1d
 8006e48:	6833      	ldr	r3, [r6, #0]
 8006e4a:	1d1a      	adds	r2, r3, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6032      	str	r2, [r6, #0]
 8006e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e09c      	b.n	8006f96 <_printf_i+0x1e6>
 8006e5c:	6833      	ldr	r3, [r6, #0]
 8006e5e:	6820      	ldr	r0, [r4, #0]
 8006e60:	1d19      	adds	r1, r3, #4
 8006e62:	6031      	str	r1, [r6, #0]
 8006e64:	0606      	lsls	r6, r0, #24
 8006e66:	d501      	bpl.n	8006e6c <_printf_i+0xbc>
 8006e68:	681d      	ldr	r5, [r3, #0]
 8006e6a:	e003      	b.n	8006e74 <_printf_i+0xc4>
 8006e6c:	0645      	lsls	r5, r0, #25
 8006e6e:	d5fb      	bpl.n	8006e68 <_printf_i+0xb8>
 8006e70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e74:	2d00      	cmp	r5, #0
 8006e76:	da03      	bge.n	8006e80 <_printf_i+0xd0>
 8006e78:	232d      	movs	r3, #45	@ 0x2d
 8006e7a:	426d      	negs	r5, r5
 8006e7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e80:	4858      	ldr	r0, [pc, #352]	@ (8006fe4 <_printf_i+0x234>)
 8006e82:	230a      	movs	r3, #10
 8006e84:	e011      	b.n	8006eaa <_printf_i+0xfa>
 8006e86:	6821      	ldr	r1, [r4, #0]
 8006e88:	6833      	ldr	r3, [r6, #0]
 8006e8a:	0608      	lsls	r0, r1, #24
 8006e8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e90:	d402      	bmi.n	8006e98 <_printf_i+0xe8>
 8006e92:	0649      	lsls	r1, r1, #25
 8006e94:	bf48      	it	mi
 8006e96:	b2ad      	uxthmi	r5, r5
 8006e98:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e9a:	4852      	ldr	r0, [pc, #328]	@ (8006fe4 <_printf_i+0x234>)
 8006e9c:	6033      	str	r3, [r6, #0]
 8006e9e:	bf14      	ite	ne
 8006ea0:	230a      	movne	r3, #10
 8006ea2:	2308      	moveq	r3, #8
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006eaa:	6866      	ldr	r6, [r4, #4]
 8006eac:	60a6      	str	r6, [r4, #8]
 8006eae:	2e00      	cmp	r6, #0
 8006eb0:	db05      	blt.n	8006ebe <_printf_i+0x10e>
 8006eb2:	6821      	ldr	r1, [r4, #0]
 8006eb4:	432e      	orrs	r6, r5
 8006eb6:	f021 0104 	bic.w	r1, r1, #4
 8006eba:	6021      	str	r1, [r4, #0]
 8006ebc:	d04b      	beq.n	8006f56 <_printf_i+0x1a6>
 8006ebe:	4616      	mov	r6, r2
 8006ec0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ec4:	fb03 5711 	mls	r7, r3, r1, r5
 8006ec8:	5dc7      	ldrb	r7, [r0, r7]
 8006eca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ece:	462f      	mov	r7, r5
 8006ed0:	42bb      	cmp	r3, r7
 8006ed2:	460d      	mov	r5, r1
 8006ed4:	d9f4      	bls.n	8006ec0 <_printf_i+0x110>
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d10b      	bne.n	8006ef2 <_printf_i+0x142>
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	07df      	lsls	r7, r3, #31
 8006ede:	d508      	bpl.n	8006ef2 <_printf_i+0x142>
 8006ee0:	6923      	ldr	r3, [r4, #16]
 8006ee2:	6861      	ldr	r1, [r4, #4]
 8006ee4:	4299      	cmp	r1, r3
 8006ee6:	bfde      	ittt	le
 8006ee8:	2330      	movle	r3, #48	@ 0x30
 8006eea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006eee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ef2:	1b92      	subs	r2, r2, r6
 8006ef4:	6122      	str	r2, [r4, #16]
 8006ef6:	f8cd a000 	str.w	sl, [sp]
 8006efa:	464b      	mov	r3, r9
 8006efc:	aa03      	add	r2, sp, #12
 8006efe:	4621      	mov	r1, r4
 8006f00:	4640      	mov	r0, r8
 8006f02:	f7ff fee7 	bl	8006cd4 <_printf_common>
 8006f06:	3001      	adds	r0, #1
 8006f08:	d14a      	bne.n	8006fa0 <_printf_i+0x1f0>
 8006f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0e:	b004      	add	sp, #16
 8006f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	f043 0320 	orr.w	r3, r3, #32
 8006f1a:	6023      	str	r3, [r4, #0]
 8006f1c:	4832      	ldr	r0, [pc, #200]	@ (8006fe8 <_printf_i+0x238>)
 8006f1e:	2778      	movs	r7, #120	@ 0x78
 8006f20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	6831      	ldr	r1, [r6, #0]
 8006f28:	061f      	lsls	r7, r3, #24
 8006f2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f2e:	d402      	bmi.n	8006f36 <_printf_i+0x186>
 8006f30:	065f      	lsls	r7, r3, #25
 8006f32:	bf48      	it	mi
 8006f34:	b2ad      	uxthmi	r5, r5
 8006f36:	6031      	str	r1, [r6, #0]
 8006f38:	07d9      	lsls	r1, r3, #31
 8006f3a:	bf44      	itt	mi
 8006f3c:	f043 0320 	orrmi.w	r3, r3, #32
 8006f40:	6023      	strmi	r3, [r4, #0]
 8006f42:	b11d      	cbz	r5, 8006f4c <_printf_i+0x19c>
 8006f44:	2310      	movs	r3, #16
 8006f46:	e7ad      	b.n	8006ea4 <_printf_i+0xf4>
 8006f48:	4826      	ldr	r0, [pc, #152]	@ (8006fe4 <_printf_i+0x234>)
 8006f4a:	e7e9      	b.n	8006f20 <_printf_i+0x170>
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	f023 0320 	bic.w	r3, r3, #32
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	e7f6      	b.n	8006f44 <_printf_i+0x194>
 8006f56:	4616      	mov	r6, r2
 8006f58:	e7bd      	b.n	8006ed6 <_printf_i+0x126>
 8006f5a:	6833      	ldr	r3, [r6, #0]
 8006f5c:	6825      	ldr	r5, [r4, #0]
 8006f5e:	6961      	ldr	r1, [r4, #20]
 8006f60:	1d18      	adds	r0, r3, #4
 8006f62:	6030      	str	r0, [r6, #0]
 8006f64:	062e      	lsls	r6, r5, #24
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	d501      	bpl.n	8006f6e <_printf_i+0x1be>
 8006f6a:	6019      	str	r1, [r3, #0]
 8006f6c:	e002      	b.n	8006f74 <_printf_i+0x1c4>
 8006f6e:	0668      	lsls	r0, r5, #25
 8006f70:	d5fb      	bpl.n	8006f6a <_printf_i+0x1ba>
 8006f72:	8019      	strh	r1, [r3, #0]
 8006f74:	2300      	movs	r3, #0
 8006f76:	6123      	str	r3, [r4, #16]
 8006f78:	4616      	mov	r6, r2
 8006f7a:	e7bc      	b.n	8006ef6 <_printf_i+0x146>
 8006f7c:	6833      	ldr	r3, [r6, #0]
 8006f7e:	1d1a      	adds	r2, r3, #4
 8006f80:	6032      	str	r2, [r6, #0]
 8006f82:	681e      	ldr	r6, [r3, #0]
 8006f84:	6862      	ldr	r2, [r4, #4]
 8006f86:	2100      	movs	r1, #0
 8006f88:	4630      	mov	r0, r6
 8006f8a:	f7f9 f929 	bl	80001e0 <memchr>
 8006f8e:	b108      	cbz	r0, 8006f94 <_printf_i+0x1e4>
 8006f90:	1b80      	subs	r0, r0, r6
 8006f92:	6060      	str	r0, [r4, #4]
 8006f94:	6863      	ldr	r3, [r4, #4]
 8006f96:	6123      	str	r3, [r4, #16]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f9e:	e7aa      	b.n	8006ef6 <_printf_i+0x146>
 8006fa0:	6923      	ldr	r3, [r4, #16]
 8006fa2:	4632      	mov	r2, r6
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	47d0      	blx	sl
 8006faa:	3001      	adds	r0, #1
 8006fac:	d0ad      	beq.n	8006f0a <_printf_i+0x15a>
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	079b      	lsls	r3, r3, #30
 8006fb2:	d413      	bmi.n	8006fdc <_printf_i+0x22c>
 8006fb4:	68e0      	ldr	r0, [r4, #12]
 8006fb6:	9b03      	ldr	r3, [sp, #12]
 8006fb8:	4298      	cmp	r0, r3
 8006fba:	bfb8      	it	lt
 8006fbc:	4618      	movlt	r0, r3
 8006fbe:	e7a6      	b.n	8006f0e <_printf_i+0x15e>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4632      	mov	r2, r6
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	47d0      	blx	sl
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d09d      	beq.n	8006f0a <_printf_i+0x15a>
 8006fce:	3501      	adds	r5, #1
 8006fd0:	68e3      	ldr	r3, [r4, #12]
 8006fd2:	9903      	ldr	r1, [sp, #12]
 8006fd4:	1a5b      	subs	r3, r3, r1
 8006fd6:	42ab      	cmp	r3, r5
 8006fd8:	dcf2      	bgt.n	8006fc0 <_printf_i+0x210>
 8006fda:	e7eb      	b.n	8006fb4 <_printf_i+0x204>
 8006fdc:	2500      	movs	r5, #0
 8006fde:	f104 0619 	add.w	r6, r4, #25
 8006fe2:	e7f5      	b.n	8006fd0 <_printf_i+0x220>
 8006fe4:	0800b05a 	.word	0x0800b05a
 8006fe8:	0800b06b 	.word	0x0800b06b

08006fec <_scanf_float>:
 8006fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff0:	b087      	sub	sp, #28
 8006ff2:	4691      	mov	r9, r2
 8006ff4:	9303      	str	r3, [sp, #12]
 8006ff6:	688b      	ldr	r3, [r1, #8]
 8006ff8:	1e5a      	subs	r2, r3, #1
 8006ffa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006ffe:	bf81      	itttt	hi
 8007000:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007004:	eb03 0b05 	addhi.w	fp, r3, r5
 8007008:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800700c:	608b      	strhi	r3, [r1, #8]
 800700e:	680b      	ldr	r3, [r1, #0]
 8007010:	460a      	mov	r2, r1
 8007012:	f04f 0500 	mov.w	r5, #0
 8007016:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800701a:	f842 3b1c 	str.w	r3, [r2], #28
 800701e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007022:	4680      	mov	r8, r0
 8007024:	460c      	mov	r4, r1
 8007026:	bf98      	it	ls
 8007028:	f04f 0b00 	movls.w	fp, #0
 800702c:	9201      	str	r2, [sp, #4]
 800702e:	4616      	mov	r6, r2
 8007030:	46aa      	mov	sl, r5
 8007032:	462f      	mov	r7, r5
 8007034:	9502      	str	r5, [sp, #8]
 8007036:	68a2      	ldr	r2, [r4, #8]
 8007038:	b15a      	cbz	r2, 8007052 <_scanf_float+0x66>
 800703a:	f8d9 3000 	ldr.w	r3, [r9]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b4e      	cmp	r3, #78	@ 0x4e
 8007042:	d863      	bhi.n	800710c <_scanf_float+0x120>
 8007044:	2b40      	cmp	r3, #64	@ 0x40
 8007046:	d83b      	bhi.n	80070c0 <_scanf_float+0xd4>
 8007048:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800704c:	b2c8      	uxtb	r0, r1
 800704e:	280e      	cmp	r0, #14
 8007050:	d939      	bls.n	80070c6 <_scanf_float+0xda>
 8007052:	b11f      	cbz	r7, 800705c <_scanf_float+0x70>
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007060:	f1ba 0f01 	cmp.w	sl, #1
 8007064:	f200 8114 	bhi.w	8007290 <_scanf_float+0x2a4>
 8007068:	9b01      	ldr	r3, [sp, #4]
 800706a:	429e      	cmp	r6, r3
 800706c:	f200 8105 	bhi.w	800727a <_scanf_float+0x28e>
 8007070:	2001      	movs	r0, #1
 8007072:	b007      	add	sp, #28
 8007074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007078:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800707c:	2a0d      	cmp	r2, #13
 800707e:	d8e8      	bhi.n	8007052 <_scanf_float+0x66>
 8007080:	a101      	add	r1, pc, #4	@ (adr r1, 8007088 <_scanf_float+0x9c>)
 8007082:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007086:	bf00      	nop
 8007088:	080071d1 	.word	0x080071d1
 800708c:	08007053 	.word	0x08007053
 8007090:	08007053 	.word	0x08007053
 8007094:	08007053 	.word	0x08007053
 8007098:	0800722d 	.word	0x0800722d
 800709c:	08007207 	.word	0x08007207
 80070a0:	08007053 	.word	0x08007053
 80070a4:	08007053 	.word	0x08007053
 80070a8:	080071df 	.word	0x080071df
 80070ac:	08007053 	.word	0x08007053
 80070b0:	08007053 	.word	0x08007053
 80070b4:	08007053 	.word	0x08007053
 80070b8:	08007053 	.word	0x08007053
 80070bc:	0800719b 	.word	0x0800719b
 80070c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80070c4:	e7da      	b.n	800707c <_scanf_float+0x90>
 80070c6:	290e      	cmp	r1, #14
 80070c8:	d8c3      	bhi.n	8007052 <_scanf_float+0x66>
 80070ca:	a001      	add	r0, pc, #4	@ (adr r0, 80070d0 <_scanf_float+0xe4>)
 80070cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80070d0:	0800718b 	.word	0x0800718b
 80070d4:	08007053 	.word	0x08007053
 80070d8:	0800718b 	.word	0x0800718b
 80070dc:	0800721b 	.word	0x0800721b
 80070e0:	08007053 	.word	0x08007053
 80070e4:	0800712d 	.word	0x0800712d
 80070e8:	08007171 	.word	0x08007171
 80070ec:	08007171 	.word	0x08007171
 80070f0:	08007171 	.word	0x08007171
 80070f4:	08007171 	.word	0x08007171
 80070f8:	08007171 	.word	0x08007171
 80070fc:	08007171 	.word	0x08007171
 8007100:	08007171 	.word	0x08007171
 8007104:	08007171 	.word	0x08007171
 8007108:	08007171 	.word	0x08007171
 800710c:	2b6e      	cmp	r3, #110	@ 0x6e
 800710e:	d809      	bhi.n	8007124 <_scanf_float+0x138>
 8007110:	2b60      	cmp	r3, #96	@ 0x60
 8007112:	d8b1      	bhi.n	8007078 <_scanf_float+0x8c>
 8007114:	2b54      	cmp	r3, #84	@ 0x54
 8007116:	d07b      	beq.n	8007210 <_scanf_float+0x224>
 8007118:	2b59      	cmp	r3, #89	@ 0x59
 800711a:	d19a      	bne.n	8007052 <_scanf_float+0x66>
 800711c:	2d07      	cmp	r5, #7
 800711e:	d198      	bne.n	8007052 <_scanf_float+0x66>
 8007120:	2508      	movs	r5, #8
 8007122:	e02f      	b.n	8007184 <_scanf_float+0x198>
 8007124:	2b74      	cmp	r3, #116	@ 0x74
 8007126:	d073      	beq.n	8007210 <_scanf_float+0x224>
 8007128:	2b79      	cmp	r3, #121	@ 0x79
 800712a:	e7f6      	b.n	800711a <_scanf_float+0x12e>
 800712c:	6821      	ldr	r1, [r4, #0]
 800712e:	05c8      	lsls	r0, r1, #23
 8007130:	d51e      	bpl.n	8007170 <_scanf_float+0x184>
 8007132:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007136:	6021      	str	r1, [r4, #0]
 8007138:	3701      	adds	r7, #1
 800713a:	f1bb 0f00 	cmp.w	fp, #0
 800713e:	d003      	beq.n	8007148 <_scanf_float+0x15c>
 8007140:	3201      	adds	r2, #1
 8007142:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007146:	60a2      	str	r2, [r4, #8]
 8007148:	68a3      	ldr	r3, [r4, #8]
 800714a:	3b01      	subs	r3, #1
 800714c:	60a3      	str	r3, [r4, #8]
 800714e:	6923      	ldr	r3, [r4, #16]
 8007150:	3301      	adds	r3, #1
 8007152:	6123      	str	r3, [r4, #16]
 8007154:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007158:	3b01      	subs	r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	f8c9 3004 	str.w	r3, [r9, #4]
 8007160:	f340 8082 	ble.w	8007268 <_scanf_float+0x27c>
 8007164:	f8d9 3000 	ldr.w	r3, [r9]
 8007168:	3301      	adds	r3, #1
 800716a:	f8c9 3000 	str.w	r3, [r9]
 800716e:	e762      	b.n	8007036 <_scanf_float+0x4a>
 8007170:	eb1a 0105 	adds.w	r1, sl, r5
 8007174:	f47f af6d 	bne.w	8007052 <_scanf_float+0x66>
 8007178:	6822      	ldr	r2, [r4, #0]
 800717a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800717e:	6022      	str	r2, [r4, #0]
 8007180:	460d      	mov	r5, r1
 8007182:	468a      	mov	sl, r1
 8007184:	f806 3b01 	strb.w	r3, [r6], #1
 8007188:	e7de      	b.n	8007148 <_scanf_float+0x15c>
 800718a:	6822      	ldr	r2, [r4, #0]
 800718c:	0610      	lsls	r0, r2, #24
 800718e:	f57f af60 	bpl.w	8007052 <_scanf_float+0x66>
 8007192:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007196:	6022      	str	r2, [r4, #0]
 8007198:	e7f4      	b.n	8007184 <_scanf_float+0x198>
 800719a:	f1ba 0f00 	cmp.w	sl, #0
 800719e:	d10c      	bne.n	80071ba <_scanf_float+0x1ce>
 80071a0:	b977      	cbnz	r7, 80071c0 <_scanf_float+0x1d4>
 80071a2:	6822      	ldr	r2, [r4, #0]
 80071a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80071a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80071ac:	d108      	bne.n	80071c0 <_scanf_float+0x1d4>
 80071ae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071b2:	6022      	str	r2, [r4, #0]
 80071b4:	f04f 0a01 	mov.w	sl, #1
 80071b8:	e7e4      	b.n	8007184 <_scanf_float+0x198>
 80071ba:	f1ba 0f02 	cmp.w	sl, #2
 80071be:	d050      	beq.n	8007262 <_scanf_float+0x276>
 80071c0:	2d01      	cmp	r5, #1
 80071c2:	d002      	beq.n	80071ca <_scanf_float+0x1de>
 80071c4:	2d04      	cmp	r5, #4
 80071c6:	f47f af44 	bne.w	8007052 <_scanf_float+0x66>
 80071ca:	3501      	adds	r5, #1
 80071cc:	b2ed      	uxtb	r5, r5
 80071ce:	e7d9      	b.n	8007184 <_scanf_float+0x198>
 80071d0:	f1ba 0f01 	cmp.w	sl, #1
 80071d4:	f47f af3d 	bne.w	8007052 <_scanf_float+0x66>
 80071d8:	f04f 0a02 	mov.w	sl, #2
 80071dc:	e7d2      	b.n	8007184 <_scanf_float+0x198>
 80071de:	b975      	cbnz	r5, 80071fe <_scanf_float+0x212>
 80071e0:	2f00      	cmp	r7, #0
 80071e2:	f47f af37 	bne.w	8007054 <_scanf_float+0x68>
 80071e6:	6822      	ldr	r2, [r4, #0]
 80071e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80071ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80071f0:	f040 8103 	bne.w	80073fa <_scanf_float+0x40e>
 80071f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071f8:	6022      	str	r2, [r4, #0]
 80071fa:	2501      	movs	r5, #1
 80071fc:	e7c2      	b.n	8007184 <_scanf_float+0x198>
 80071fe:	2d03      	cmp	r5, #3
 8007200:	d0e3      	beq.n	80071ca <_scanf_float+0x1de>
 8007202:	2d05      	cmp	r5, #5
 8007204:	e7df      	b.n	80071c6 <_scanf_float+0x1da>
 8007206:	2d02      	cmp	r5, #2
 8007208:	f47f af23 	bne.w	8007052 <_scanf_float+0x66>
 800720c:	2503      	movs	r5, #3
 800720e:	e7b9      	b.n	8007184 <_scanf_float+0x198>
 8007210:	2d06      	cmp	r5, #6
 8007212:	f47f af1e 	bne.w	8007052 <_scanf_float+0x66>
 8007216:	2507      	movs	r5, #7
 8007218:	e7b4      	b.n	8007184 <_scanf_float+0x198>
 800721a:	6822      	ldr	r2, [r4, #0]
 800721c:	0591      	lsls	r1, r2, #22
 800721e:	f57f af18 	bpl.w	8007052 <_scanf_float+0x66>
 8007222:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007226:	6022      	str	r2, [r4, #0]
 8007228:	9702      	str	r7, [sp, #8]
 800722a:	e7ab      	b.n	8007184 <_scanf_float+0x198>
 800722c:	6822      	ldr	r2, [r4, #0]
 800722e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007232:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007236:	d005      	beq.n	8007244 <_scanf_float+0x258>
 8007238:	0550      	lsls	r0, r2, #21
 800723a:	f57f af0a 	bpl.w	8007052 <_scanf_float+0x66>
 800723e:	2f00      	cmp	r7, #0
 8007240:	f000 80db 	beq.w	80073fa <_scanf_float+0x40e>
 8007244:	0591      	lsls	r1, r2, #22
 8007246:	bf58      	it	pl
 8007248:	9902      	ldrpl	r1, [sp, #8]
 800724a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800724e:	bf58      	it	pl
 8007250:	1a79      	subpl	r1, r7, r1
 8007252:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007256:	bf58      	it	pl
 8007258:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800725c:	6022      	str	r2, [r4, #0]
 800725e:	2700      	movs	r7, #0
 8007260:	e790      	b.n	8007184 <_scanf_float+0x198>
 8007262:	f04f 0a03 	mov.w	sl, #3
 8007266:	e78d      	b.n	8007184 <_scanf_float+0x198>
 8007268:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800726c:	4649      	mov	r1, r9
 800726e:	4640      	mov	r0, r8
 8007270:	4798      	blx	r3
 8007272:	2800      	cmp	r0, #0
 8007274:	f43f aedf 	beq.w	8007036 <_scanf_float+0x4a>
 8007278:	e6eb      	b.n	8007052 <_scanf_float+0x66>
 800727a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800727e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007282:	464a      	mov	r2, r9
 8007284:	4640      	mov	r0, r8
 8007286:	4798      	blx	r3
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	3b01      	subs	r3, #1
 800728c:	6123      	str	r3, [r4, #16]
 800728e:	e6eb      	b.n	8007068 <_scanf_float+0x7c>
 8007290:	1e6b      	subs	r3, r5, #1
 8007292:	2b06      	cmp	r3, #6
 8007294:	d824      	bhi.n	80072e0 <_scanf_float+0x2f4>
 8007296:	2d02      	cmp	r5, #2
 8007298:	d836      	bhi.n	8007308 <_scanf_float+0x31c>
 800729a:	9b01      	ldr	r3, [sp, #4]
 800729c:	429e      	cmp	r6, r3
 800729e:	f67f aee7 	bls.w	8007070 <_scanf_float+0x84>
 80072a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072aa:	464a      	mov	r2, r9
 80072ac:	4640      	mov	r0, r8
 80072ae:	4798      	blx	r3
 80072b0:	6923      	ldr	r3, [r4, #16]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	6123      	str	r3, [r4, #16]
 80072b6:	e7f0      	b.n	800729a <_scanf_float+0x2ae>
 80072b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80072c0:	464a      	mov	r2, r9
 80072c2:	4640      	mov	r0, r8
 80072c4:	4798      	blx	r3
 80072c6:	6923      	ldr	r3, [r4, #16]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	6123      	str	r3, [r4, #16]
 80072cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072d0:	fa5f fa8a 	uxtb.w	sl, sl
 80072d4:	f1ba 0f02 	cmp.w	sl, #2
 80072d8:	d1ee      	bne.n	80072b8 <_scanf_float+0x2cc>
 80072da:	3d03      	subs	r5, #3
 80072dc:	b2ed      	uxtb	r5, r5
 80072de:	1b76      	subs	r6, r6, r5
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	05da      	lsls	r2, r3, #23
 80072e4:	d530      	bpl.n	8007348 <_scanf_float+0x35c>
 80072e6:	055b      	lsls	r3, r3, #21
 80072e8:	d511      	bpl.n	800730e <_scanf_float+0x322>
 80072ea:	9b01      	ldr	r3, [sp, #4]
 80072ec:	429e      	cmp	r6, r3
 80072ee:	f67f aebf 	bls.w	8007070 <_scanf_float+0x84>
 80072f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072fa:	464a      	mov	r2, r9
 80072fc:	4640      	mov	r0, r8
 80072fe:	4798      	blx	r3
 8007300:	6923      	ldr	r3, [r4, #16]
 8007302:	3b01      	subs	r3, #1
 8007304:	6123      	str	r3, [r4, #16]
 8007306:	e7f0      	b.n	80072ea <_scanf_float+0x2fe>
 8007308:	46aa      	mov	sl, r5
 800730a:	46b3      	mov	fp, r6
 800730c:	e7de      	b.n	80072cc <_scanf_float+0x2e0>
 800730e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007312:	6923      	ldr	r3, [r4, #16]
 8007314:	2965      	cmp	r1, #101	@ 0x65
 8007316:	f103 33ff 	add.w	r3, r3, #4294967295
 800731a:	f106 35ff 	add.w	r5, r6, #4294967295
 800731e:	6123      	str	r3, [r4, #16]
 8007320:	d00c      	beq.n	800733c <_scanf_float+0x350>
 8007322:	2945      	cmp	r1, #69	@ 0x45
 8007324:	d00a      	beq.n	800733c <_scanf_float+0x350>
 8007326:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800732a:	464a      	mov	r2, r9
 800732c:	4640      	mov	r0, r8
 800732e:	4798      	blx	r3
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007336:	3b01      	subs	r3, #1
 8007338:	1eb5      	subs	r5, r6, #2
 800733a:	6123      	str	r3, [r4, #16]
 800733c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007340:	464a      	mov	r2, r9
 8007342:	4640      	mov	r0, r8
 8007344:	4798      	blx	r3
 8007346:	462e      	mov	r6, r5
 8007348:	6822      	ldr	r2, [r4, #0]
 800734a:	f012 0210 	ands.w	r2, r2, #16
 800734e:	d001      	beq.n	8007354 <_scanf_float+0x368>
 8007350:	2000      	movs	r0, #0
 8007352:	e68e      	b.n	8007072 <_scanf_float+0x86>
 8007354:	7032      	strb	r2, [r6, #0]
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800735c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007360:	d125      	bne.n	80073ae <_scanf_float+0x3c2>
 8007362:	9b02      	ldr	r3, [sp, #8]
 8007364:	429f      	cmp	r7, r3
 8007366:	d00a      	beq.n	800737e <_scanf_float+0x392>
 8007368:	1bda      	subs	r2, r3, r7
 800736a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800736e:	429e      	cmp	r6, r3
 8007370:	bf28      	it	cs
 8007372:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007376:	4922      	ldr	r1, [pc, #136]	@ (8007400 <_scanf_float+0x414>)
 8007378:	4630      	mov	r0, r6
 800737a:	f000 f977 	bl	800766c <siprintf>
 800737e:	9901      	ldr	r1, [sp, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	4640      	mov	r0, r8
 8007384:	f002 fcf8 	bl	8009d78 <_strtod_r>
 8007388:	9b03      	ldr	r3, [sp, #12]
 800738a:	6821      	ldr	r1, [r4, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f011 0f02 	tst.w	r1, #2
 8007392:	ec57 6b10 	vmov	r6, r7, d0
 8007396:	f103 0204 	add.w	r2, r3, #4
 800739a:	d015      	beq.n	80073c8 <_scanf_float+0x3dc>
 800739c:	9903      	ldr	r1, [sp, #12]
 800739e:	600a      	str	r2, [r1, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	e9c3 6700 	strd	r6, r7, [r3]
 80073a6:	68e3      	ldr	r3, [r4, #12]
 80073a8:	3301      	adds	r3, #1
 80073aa:	60e3      	str	r3, [r4, #12]
 80073ac:	e7d0      	b.n	8007350 <_scanf_float+0x364>
 80073ae:	9b04      	ldr	r3, [sp, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d0e4      	beq.n	800737e <_scanf_float+0x392>
 80073b4:	9905      	ldr	r1, [sp, #20]
 80073b6:	230a      	movs	r3, #10
 80073b8:	3101      	adds	r1, #1
 80073ba:	4640      	mov	r0, r8
 80073bc:	f002 fd5c 	bl	8009e78 <_strtol_r>
 80073c0:	9b04      	ldr	r3, [sp, #16]
 80073c2:	9e05      	ldr	r6, [sp, #20]
 80073c4:	1ac2      	subs	r2, r0, r3
 80073c6:	e7d0      	b.n	800736a <_scanf_float+0x37e>
 80073c8:	f011 0f04 	tst.w	r1, #4
 80073cc:	9903      	ldr	r1, [sp, #12]
 80073ce:	600a      	str	r2, [r1, #0]
 80073d0:	d1e6      	bne.n	80073a0 <_scanf_float+0x3b4>
 80073d2:	681d      	ldr	r5, [r3, #0]
 80073d4:	4632      	mov	r2, r6
 80073d6:	463b      	mov	r3, r7
 80073d8:	4630      	mov	r0, r6
 80073da:	4639      	mov	r1, r7
 80073dc:	f7f9 fbae 	bl	8000b3c <__aeabi_dcmpun>
 80073e0:	b128      	cbz	r0, 80073ee <_scanf_float+0x402>
 80073e2:	4808      	ldr	r0, [pc, #32]	@ (8007404 <_scanf_float+0x418>)
 80073e4:	f000 fabc 	bl	8007960 <nanf>
 80073e8:	ed85 0a00 	vstr	s0, [r5]
 80073ec:	e7db      	b.n	80073a6 <_scanf_float+0x3ba>
 80073ee:	4630      	mov	r0, r6
 80073f0:	4639      	mov	r1, r7
 80073f2:	f7f9 fc01 	bl	8000bf8 <__aeabi_d2f>
 80073f6:	6028      	str	r0, [r5, #0]
 80073f8:	e7d5      	b.n	80073a6 <_scanf_float+0x3ba>
 80073fa:	2700      	movs	r7, #0
 80073fc:	e62e      	b.n	800705c <_scanf_float+0x70>
 80073fe:	bf00      	nop
 8007400:	0800b07c 	.word	0x0800b07c
 8007404:	0800b1bd 	.word	0x0800b1bd

08007408 <std>:
 8007408:	2300      	movs	r3, #0
 800740a:	b510      	push	{r4, lr}
 800740c:	4604      	mov	r4, r0
 800740e:	e9c0 3300 	strd	r3, r3, [r0]
 8007412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007416:	6083      	str	r3, [r0, #8]
 8007418:	8181      	strh	r1, [r0, #12]
 800741a:	6643      	str	r3, [r0, #100]	@ 0x64
 800741c:	81c2      	strh	r2, [r0, #14]
 800741e:	6183      	str	r3, [r0, #24]
 8007420:	4619      	mov	r1, r3
 8007422:	2208      	movs	r2, #8
 8007424:	305c      	adds	r0, #92	@ 0x5c
 8007426:	f000 fa1b 	bl	8007860 <memset>
 800742a:	4b0d      	ldr	r3, [pc, #52]	@ (8007460 <std+0x58>)
 800742c:	6263      	str	r3, [r4, #36]	@ 0x24
 800742e:	4b0d      	ldr	r3, [pc, #52]	@ (8007464 <std+0x5c>)
 8007430:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007432:	4b0d      	ldr	r3, [pc, #52]	@ (8007468 <std+0x60>)
 8007434:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007436:	4b0d      	ldr	r3, [pc, #52]	@ (800746c <std+0x64>)
 8007438:	6323      	str	r3, [r4, #48]	@ 0x30
 800743a:	4b0d      	ldr	r3, [pc, #52]	@ (8007470 <std+0x68>)
 800743c:	6224      	str	r4, [r4, #32]
 800743e:	429c      	cmp	r4, r3
 8007440:	d006      	beq.n	8007450 <std+0x48>
 8007442:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007446:	4294      	cmp	r4, r2
 8007448:	d002      	beq.n	8007450 <std+0x48>
 800744a:	33d0      	adds	r3, #208	@ 0xd0
 800744c:	429c      	cmp	r4, r3
 800744e:	d105      	bne.n	800745c <std+0x54>
 8007450:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007458:	f000 ba7e 	b.w	8007958 <__retarget_lock_init_recursive>
 800745c:	bd10      	pop	{r4, pc}
 800745e:	bf00      	nop
 8007460:	080076b1 	.word	0x080076b1
 8007464:	080076d3 	.word	0x080076d3
 8007468:	0800770b 	.word	0x0800770b
 800746c:	0800772f 	.word	0x0800772f
 8007470:	2000040c 	.word	0x2000040c

08007474 <stdio_exit_handler>:
 8007474:	4a02      	ldr	r2, [pc, #8]	@ (8007480 <stdio_exit_handler+0xc>)
 8007476:	4903      	ldr	r1, [pc, #12]	@ (8007484 <stdio_exit_handler+0x10>)
 8007478:	4803      	ldr	r0, [pc, #12]	@ (8007488 <stdio_exit_handler+0x14>)
 800747a:	f000 b869 	b.w	8007550 <_fwalk_sglue>
 800747e:	bf00      	nop
 8007480:	2000000c 	.word	0x2000000c
 8007484:	0800a4b9 	.word	0x0800a4b9
 8007488:	2000001c 	.word	0x2000001c

0800748c <cleanup_stdio>:
 800748c:	6841      	ldr	r1, [r0, #4]
 800748e:	4b0c      	ldr	r3, [pc, #48]	@ (80074c0 <cleanup_stdio+0x34>)
 8007490:	4299      	cmp	r1, r3
 8007492:	b510      	push	{r4, lr}
 8007494:	4604      	mov	r4, r0
 8007496:	d001      	beq.n	800749c <cleanup_stdio+0x10>
 8007498:	f003 f80e 	bl	800a4b8 <_fflush_r>
 800749c:	68a1      	ldr	r1, [r4, #8]
 800749e:	4b09      	ldr	r3, [pc, #36]	@ (80074c4 <cleanup_stdio+0x38>)
 80074a0:	4299      	cmp	r1, r3
 80074a2:	d002      	beq.n	80074aa <cleanup_stdio+0x1e>
 80074a4:	4620      	mov	r0, r4
 80074a6:	f003 f807 	bl	800a4b8 <_fflush_r>
 80074aa:	68e1      	ldr	r1, [r4, #12]
 80074ac:	4b06      	ldr	r3, [pc, #24]	@ (80074c8 <cleanup_stdio+0x3c>)
 80074ae:	4299      	cmp	r1, r3
 80074b0:	d004      	beq.n	80074bc <cleanup_stdio+0x30>
 80074b2:	4620      	mov	r0, r4
 80074b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074b8:	f002 bffe 	b.w	800a4b8 <_fflush_r>
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	bf00      	nop
 80074c0:	2000040c 	.word	0x2000040c
 80074c4:	20000474 	.word	0x20000474
 80074c8:	200004dc 	.word	0x200004dc

080074cc <global_stdio_init.part.0>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	4b0b      	ldr	r3, [pc, #44]	@ (80074fc <global_stdio_init.part.0+0x30>)
 80074d0:	4c0b      	ldr	r4, [pc, #44]	@ (8007500 <global_stdio_init.part.0+0x34>)
 80074d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007504 <global_stdio_init.part.0+0x38>)
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	4620      	mov	r0, r4
 80074d8:	2200      	movs	r2, #0
 80074da:	2104      	movs	r1, #4
 80074dc:	f7ff ff94 	bl	8007408 <std>
 80074e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074e4:	2201      	movs	r2, #1
 80074e6:	2109      	movs	r1, #9
 80074e8:	f7ff ff8e 	bl	8007408 <std>
 80074ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80074f0:	2202      	movs	r2, #2
 80074f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f6:	2112      	movs	r1, #18
 80074f8:	f7ff bf86 	b.w	8007408 <std>
 80074fc:	20000544 	.word	0x20000544
 8007500:	2000040c 	.word	0x2000040c
 8007504:	08007475 	.word	0x08007475

08007508 <__sfp_lock_acquire>:
 8007508:	4801      	ldr	r0, [pc, #4]	@ (8007510 <__sfp_lock_acquire+0x8>)
 800750a:	f000 ba26 	b.w	800795a <__retarget_lock_acquire_recursive>
 800750e:	bf00      	nop
 8007510:	2000054d 	.word	0x2000054d

08007514 <__sfp_lock_release>:
 8007514:	4801      	ldr	r0, [pc, #4]	@ (800751c <__sfp_lock_release+0x8>)
 8007516:	f000 ba21 	b.w	800795c <__retarget_lock_release_recursive>
 800751a:	bf00      	nop
 800751c:	2000054d 	.word	0x2000054d

08007520 <__sinit>:
 8007520:	b510      	push	{r4, lr}
 8007522:	4604      	mov	r4, r0
 8007524:	f7ff fff0 	bl	8007508 <__sfp_lock_acquire>
 8007528:	6a23      	ldr	r3, [r4, #32]
 800752a:	b11b      	cbz	r3, 8007534 <__sinit+0x14>
 800752c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007530:	f7ff bff0 	b.w	8007514 <__sfp_lock_release>
 8007534:	4b04      	ldr	r3, [pc, #16]	@ (8007548 <__sinit+0x28>)
 8007536:	6223      	str	r3, [r4, #32]
 8007538:	4b04      	ldr	r3, [pc, #16]	@ (800754c <__sinit+0x2c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f5      	bne.n	800752c <__sinit+0xc>
 8007540:	f7ff ffc4 	bl	80074cc <global_stdio_init.part.0>
 8007544:	e7f2      	b.n	800752c <__sinit+0xc>
 8007546:	bf00      	nop
 8007548:	0800748d 	.word	0x0800748d
 800754c:	20000544 	.word	0x20000544

08007550 <_fwalk_sglue>:
 8007550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007554:	4607      	mov	r7, r0
 8007556:	4688      	mov	r8, r1
 8007558:	4614      	mov	r4, r2
 800755a:	2600      	movs	r6, #0
 800755c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007560:	f1b9 0901 	subs.w	r9, r9, #1
 8007564:	d505      	bpl.n	8007572 <_fwalk_sglue+0x22>
 8007566:	6824      	ldr	r4, [r4, #0]
 8007568:	2c00      	cmp	r4, #0
 800756a:	d1f7      	bne.n	800755c <_fwalk_sglue+0xc>
 800756c:	4630      	mov	r0, r6
 800756e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007572:	89ab      	ldrh	r3, [r5, #12]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d907      	bls.n	8007588 <_fwalk_sglue+0x38>
 8007578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800757c:	3301      	adds	r3, #1
 800757e:	d003      	beq.n	8007588 <_fwalk_sglue+0x38>
 8007580:	4629      	mov	r1, r5
 8007582:	4638      	mov	r0, r7
 8007584:	47c0      	blx	r8
 8007586:	4306      	orrs	r6, r0
 8007588:	3568      	adds	r5, #104	@ 0x68
 800758a:	e7e9      	b.n	8007560 <_fwalk_sglue+0x10>

0800758c <iprintf>:
 800758c:	b40f      	push	{r0, r1, r2, r3}
 800758e:	b507      	push	{r0, r1, r2, lr}
 8007590:	4906      	ldr	r1, [pc, #24]	@ (80075ac <iprintf+0x20>)
 8007592:	ab04      	add	r3, sp, #16
 8007594:	6808      	ldr	r0, [r1, #0]
 8007596:	f853 2b04 	ldr.w	r2, [r3], #4
 800759a:	6881      	ldr	r1, [r0, #8]
 800759c:	9301      	str	r3, [sp, #4]
 800759e:	f002 fdef 	bl	800a180 <_vfiprintf_r>
 80075a2:	b003      	add	sp, #12
 80075a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075a8:	b004      	add	sp, #16
 80075aa:	4770      	bx	lr
 80075ac:	20000018 	.word	0x20000018

080075b0 <_puts_r>:
 80075b0:	6a03      	ldr	r3, [r0, #32]
 80075b2:	b570      	push	{r4, r5, r6, lr}
 80075b4:	6884      	ldr	r4, [r0, #8]
 80075b6:	4605      	mov	r5, r0
 80075b8:	460e      	mov	r6, r1
 80075ba:	b90b      	cbnz	r3, 80075c0 <_puts_r+0x10>
 80075bc:	f7ff ffb0 	bl	8007520 <__sinit>
 80075c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075c2:	07db      	lsls	r3, r3, #31
 80075c4:	d405      	bmi.n	80075d2 <_puts_r+0x22>
 80075c6:	89a3      	ldrh	r3, [r4, #12]
 80075c8:	0598      	lsls	r0, r3, #22
 80075ca:	d402      	bmi.n	80075d2 <_puts_r+0x22>
 80075cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ce:	f000 f9c4 	bl	800795a <__retarget_lock_acquire_recursive>
 80075d2:	89a3      	ldrh	r3, [r4, #12]
 80075d4:	0719      	lsls	r1, r3, #28
 80075d6:	d502      	bpl.n	80075de <_puts_r+0x2e>
 80075d8:	6923      	ldr	r3, [r4, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d135      	bne.n	800764a <_puts_r+0x9a>
 80075de:	4621      	mov	r1, r4
 80075e0:	4628      	mov	r0, r5
 80075e2:	f000 f8e7 	bl	80077b4 <__swsetup_r>
 80075e6:	b380      	cbz	r0, 800764a <_puts_r+0x9a>
 80075e8:	f04f 35ff 	mov.w	r5, #4294967295
 80075ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075ee:	07da      	lsls	r2, r3, #31
 80075f0:	d405      	bmi.n	80075fe <_puts_r+0x4e>
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	059b      	lsls	r3, r3, #22
 80075f6:	d402      	bmi.n	80075fe <_puts_r+0x4e>
 80075f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075fa:	f000 f9af 	bl	800795c <__retarget_lock_release_recursive>
 80075fe:	4628      	mov	r0, r5
 8007600:	bd70      	pop	{r4, r5, r6, pc}
 8007602:	2b00      	cmp	r3, #0
 8007604:	da04      	bge.n	8007610 <_puts_r+0x60>
 8007606:	69a2      	ldr	r2, [r4, #24]
 8007608:	429a      	cmp	r2, r3
 800760a:	dc17      	bgt.n	800763c <_puts_r+0x8c>
 800760c:	290a      	cmp	r1, #10
 800760e:	d015      	beq.n	800763c <_puts_r+0x8c>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	6022      	str	r2, [r4, #0]
 8007616:	7019      	strb	r1, [r3, #0]
 8007618:	68a3      	ldr	r3, [r4, #8]
 800761a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800761e:	3b01      	subs	r3, #1
 8007620:	60a3      	str	r3, [r4, #8]
 8007622:	2900      	cmp	r1, #0
 8007624:	d1ed      	bne.n	8007602 <_puts_r+0x52>
 8007626:	2b00      	cmp	r3, #0
 8007628:	da11      	bge.n	800764e <_puts_r+0x9e>
 800762a:	4622      	mov	r2, r4
 800762c:	210a      	movs	r1, #10
 800762e:	4628      	mov	r0, r5
 8007630:	f000 f881 	bl	8007736 <__swbuf_r>
 8007634:	3001      	adds	r0, #1
 8007636:	d0d7      	beq.n	80075e8 <_puts_r+0x38>
 8007638:	250a      	movs	r5, #10
 800763a:	e7d7      	b.n	80075ec <_puts_r+0x3c>
 800763c:	4622      	mov	r2, r4
 800763e:	4628      	mov	r0, r5
 8007640:	f000 f879 	bl	8007736 <__swbuf_r>
 8007644:	3001      	adds	r0, #1
 8007646:	d1e7      	bne.n	8007618 <_puts_r+0x68>
 8007648:	e7ce      	b.n	80075e8 <_puts_r+0x38>
 800764a:	3e01      	subs	r6, #1
 800764c:	e7e4      	b.n	8007618 <_puts_r+0x68>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	6022      	str	r2, [r4, #0]
 8007654:	220a      	movs	r2, #10
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	e7ee      	b.n	8007638 <_puts_r+0x88>
	...

0800765c <puts>:
 800765c:	4b02      	ldr	r3, [pc, #8]	@ (8007668 <puts+0xc>)
 800765e:	4601      	mov	r1, r0
 8007660:	6818      	ldr	r0, [r3, #0]
 8007662:	f7ff bfa5 	b.w	80075b0 <_puts_r>
 8007666:	bf00      	nop
 8007668:	20000018 	.word	0x20000018

0800766c <siprintf>:
 800766c:	b40e      	push	{r1, r2, r3}
 800766e:	b510      	push	{r4, lr}
 8007670:	b09d      	sub	sp, #116	@ 0x74
 8007672:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007674:	9002      	str	r0, [sp, #8]
 8007676:	9006      	str	r0, [sp, #24]
 8007678:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800767c:	480a      	ldr	r0, [pc, #40]	@ (80076a8 <siprintf+0x3c>)
 800767e:	9107      	str	r1, [sp, #28]
 8007680:	9104      	str	r1, [sp, #16]
 8007682:	490a      	ldr	r1, [pc, #40]	@ (80076ac <siprintf+0x40>)
 8007684:	f853 2b04 	ldr.w	r2, [r3], #4
 8007688:	9105      	str	r1, [sp, #20]
 800768a:	2400      	movs	r4, #0
 800768c:	a902      	add	r1, sp, #8
 800768e:	6800      	ldr	r0, [r0, #0]
 8007690:	9301      	str	r3, [sp, #4]
 8007692:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007694:	f002 fc4e 	bl	8009f34 <_svfiprintf_r>
 8007698:	9b02      	ldr	r3, [sp, #8]
 800769a:	701c      	strb	r4, [r3, #0]
 800769c:	b01d      	add	sp, #116	@ 0x74
 800769e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a2:	b003      	add	sp, #12
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	20000018 	.word	0x20000018
 80076ac:	ffff0208 	.word	0xffff0208

080076b0 <__sread>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	460c      	mov	r4, r1
 80076b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b8:	f000 f900 	bl	80078bc <_read_r>
 80076bc:	2800      	cmp	r0, #0
 80076be:	bfab      	itete	ge
 80076c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076c2:	89a3      	ldrhlt	r3, [r4, #12]
 80076c4:	181b      	addge	r3, r3, r0
 80076c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076ca:	bfac      	ite	ge
 80076cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076ce:	81a3      	strhlt	r3, [r4, #12]
 80076d0:	bd10      	pop	{r4, pc}

080076d2 <__swrite>:
 80076d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d6:	461f      	mov	r7, r3
 80076d8:	898b      	ldrh	r3, [r1, #12]
 80076da:	05db      	lsls	r3, r3, #23
 80076dc:	4605      	mov	r5, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	4616      	mov	r6, r2
 80076e2:	d505      	bpl.n	80076f0 <__swrite+0x1e>
 80076e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e8:	2302      	movs	r3, #2
 80076ea:	2200      	movs	r2, #0
 80076ec:	f000 f8d4 	bl	8007898 <_lseek_r>
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076fa:	81a3      	strh	r3, [r4, #12]
 80076fc:	4632      	mov	r2, r6
 80076fe:	463b      	mov	r3, r7
 8007700:	4628      	mov	r0, r5
 8007702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007706:	f000 b8eb 	b.w	80078e0 <_write_r>

0800770a <__sseek>:
 800770a:	b510      	push	{r4, lr}
 800770c:	460c      	mov	r4, r1
 800770e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007712:	f000 f8c1 	bl	8007898 <_lseek_r>
 8007716:	1c43      	adds	r3, r0, #1
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	bf15      	itete	ne
 800771c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800771e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007722:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007726:	81a3      	strheq	r3, [r4, #12]
 8007728:	bf18      	it	ne
 800772a:	81a3      	strhne	r3, [r4, #12]
 800772c:	bd10      	pop	{r4, pc}

0800772e <__sclose>:
 800772e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007732:	f000 b8a1 	b.w	8007878 <_close_r>

08007736 <__swbuf_r>:
 8007736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007738:	460e      	mov	r6, r1
 800773a:	4614      	mov	r4, r2
 800773c:	4605      	mov	r5, r0
 800773e:	b118      	cbz	r0, 8007748 <__swbuf_r+0x12>
 8007740:	6a03      	ldr	r3, [r0, #32]
 8007742:	b90b      	cbnz	r3, 8007748 <__swbuf_r+0x12>
 8007744:	f7ff feec 	bl	8007520 <__sinit>
 8007748:	69a3      	ldr	r3, [r4, #24]
 800774a:	60a3      	str	r3, [r4, #8]
 800774c:	89a3      	ldrh	r3, [r4, #12]
 800774e:	071a      	lsls	r2, r3, #28
 8007750:	d501      	bpl.n	8007756 <__swbuf_r+0x20>
 8007752:	6923      	ldr	r3, [r4, #16]
 8007754:	b943      	cbnz	r3, 8007768 <__swbuf_r+0x32>
 8007756:	4621      	mov	r1, r4
 8007758:	4628      	mov	r0, r5
 800775a:	f000 f82b 	bl	80077b4 <__swsetup_r>
 800775e:	b118      	cbz	r0, 8007768 <__swbuf_r+0x32>
 8007760:	f04f 37ff 	mov.w	r7, #4294967295
 8007764:	4638      	mov	r0, r7
 8007766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	6922      	ldr	r2, [r4, #16]
 800776c:	1a98      	subs	r0, r3, r2
 800776e:	6963      	ldr	r3, [r4, #20]
 8007770:	b2f6      	uxtb	r6, r6
 8007772:	4283      	cmp	r3, r0
 8007774:	4637      	mov	r7, r6
 8007776:	dc05      	bgt.n	8007784 <__swbuf_r+0x4e>
 8007778:	4621      	mov	r1, r4
 800777a:	4628      	mov	r0, r5
 800777c:	f002 fe9c 	bl	800a4b8 <_fflush_r>
 8007780:	2800      	cmp	r0, #0
 8007782:	d1ed      	bne.n	8007760 <__swbuf_r+0x2a>
 8007784:	68a3      	ldr	r3, [r4, #8]
 8007786:	3b01      	subs	r3, #1
 8007788:	60a3      	str	r3, [r4, #8]
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	6022      	str	r2, [r4, #0]
 8007790:	701e      	strb	r6, [r3, #0]
 8007792:	6962      	ldr	r2, [r4, #20]
 8007794:	1c43      	adds	r3, r0, #1
 8007796:	429a      	cmp	r2, r3
 8007798:	d004      	beq.n	80077a4 <__swbuf_r+0x6e>
 800779a:	89a3      	ldrh	r3, [r4, #12]
 800779c:	07db      	lsls	r3, r3, #31
 800779e:	d5e1      	bpl.n	8007764 <__swbuf_r+0x2e>
 80077a0:	2e0a      	cmp	r6, #10
 80077a2:	d1df      	bne.n	8007764 <__swbuf_r+0x2e>
 80077a4:	4621      	mov	r1, r4
 80077a6:	4628      	mov	r0, r5
 80077a8:	f002 fe86 	bl	800a4b8 <_fflush_r>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d0d9      	beq.n	8007764 <__swbuf_r+0x2e>
 80077b0:	e7d6      	b.n	8007760 <__swbuf_r+0x2a>
	...

080077b4 <__swsetup_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4b29      	ldr	r3, [pc, #164]	@ (800785c <__swsetup_r+0xa8>)
 80077b8:	4605      	mov	r5, r0
 80077ba:	6818      	ldr	r0, [r3, #0]
 80077bc:	460c      	mov	r4, r1
 80077be:	b118      	cbz	r0, 80077c8 <__swsetup_r+0x14>
 80077c0:	6a03      	ldr	r3, [r0, #32]
 80077c2:	b90b      	cbnz	r3, 80077c8 <__swsetup_r+0x14>
 80077c4:	f7ff feac 	bl	8007520 <__sinit>
 80077c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077cc:	0719      	lsls	r1, r3, #28
 80077ce:	d422      	bmi.n	8007816 <__swsetup_r+0x62>
 80077d0:	06da      	lsls	r2, r3, #27
 80077d2:	d407      	bmi.n	80077e4 <__swsetup_r+0x30>
 80077d4:	2209      	movs	r2, #9
 80077d6:	602a      	str	r2, [r5, #0]
 80077d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	f04f 30ff 	mov.w	r0, #4294967295
 80077e2:	e033      	b.n	800784c <__swsetup_r+0x98>
 80077e4:	0758      	lsls	r0, r3, #29
 80077e6:	d512      	bpl.n	800780e <__swsetup_r+0x5a>
 80077e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077ea:	b141      	cbz	r1, 80077fe <__swsetup_r+0x4a>
 80077ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077f0:	4299      	cmp	r1, r3
 80077f2:	d002      	beq.n	80077fa <__swsetup_r+0x46>
 80077f4:	4628      	mov	r0, r5
 80077f6:	f000 ff13 	bl	8008620 <_free_r>
 80077fa:	2300      	movs	r3, #0
 80077fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007804:	81a3      	strh	r3, [r4, #12]
 8007806:	2300      	movs	r3, #0
 8007808:	6063      	str	r3, [r4, #4]
 800780a:	6923      	ldr	r3, [r4, #16]
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	89a3      	ldrh	r3, [r4, #12]
 8007810:	f043 0308 	orr.w	r3, r3, #8
 8007814:	81a3      	strh	r3, [r4, #12]
 8007816:	6923      	ldr	r3, [r4, #16]
 8007818:	b94b      	cbnz	r3, 800782e <__swsetup_r+0x7a>
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007824:	d003      	beq.n	800782e <__swsetup_r+0x7a>
 8007826:	4621      	mov	r1, r4
 8007828:	4628      	mov	r0, r5
 800782a:	f002 fe93 	bl	800a554 <__smakebuf_r>
 800782e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007832:	f013 0201 	ands.w	r2, r3, #1
 8007836:	d00a      	beq.n	800784e <__swsetup_r+0x9a>
 8007838:	2200      	movs	r2, #0
 800783a:	60a2      	str	r2, [r4, #8]
 800783c:	6962      	ldr	r2, [r4, #20]
 800783e:	4252      	negs	r2, r2
 8007840:	61a2      	str	r2, [r4, #24]
 8007842:	6922      	ldr	r2, [r4, #16]
 8007844:	b942      	cbnz	r2, 8007858 <__swsetup_r+0xa4>
 8007846:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800784a:	d1c5      	bne.n	80077d8 <__swsetup_r+0x24>
 800784c:	bd38      	pop	{r3, r4, r5, pc}
 800784e:	0799      	lsls	r1, r3, #30
 8007850:	bf58      	it	pl
 8007852:	6962      	ldrpl	r2, [r4, #20]
 8007854:	60a2      	str	r2, [r4, #8]
 8007856:	e7f4      	b.n	8007842 <__swsetup_r+0x8e>
 8007858:	2000      	movs	r0, #0
 800785a:	e7f7      	b.n	800784c <__swsetup_r+0x98>
 800785c:	20000018 	.word	0x20000018

08007860 <memset>:
 8007860:	4402      	add	r2, r0
 8007862:	4603      	mov	r3, r0
 8007864:	4293      	cmp	r3, r2
 8007866:	d100      	bne.n	800786a <memset+0xa>
 8007868:	4770      	bx	lr
 800786a:	f803 1b01 	strb.w	r1, [r3], #1
 800786e:	e7f9      	b.n	8007864 <memset+0x4>

08007870 <_localeconv_r>:
 8007870:	4800      	ldr	r0, [pc, #0]	@ (8007874 <_localeconv_r+0x4>)
 8007872:	4770      	bx	lr
 8007874:	20000158 	.word	0x20000158

08007878 <_close_r>:
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4d06      	ldr	r5, [pc, #24]	@ (8007894 <_close_r+0x1c>)
 800787c:	2300      	movs	r3, #0
 800787e:	4604      	mov	r4, r0
 8007880:	4608      	mov	r0, r1
 8007882:	602b      	str	r3, [r5, #0]
 8007884:	f7fa fde6 	bl	8002454 <_close>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	d102      	bne.n	8007892 <_close_r+0x1a>
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	b103      	cbz	r3, 8007892 <_close_r+0x1a>
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	bd38      	pop	{r3, r4, r5, pc}
 8007894:	20000548 	.word	0x20000548

08007898 <_lseek_r>:
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	4d07      	ldr	r5, [pc, #28]	@ (80078b8 <_lseek_r+0x20>)
 800789c:	4604      	mov	r4, r0
 800789e:	4608      	mov	r0, r1
 80078a0:	4611      	mov	r1, r2
 80078a2:	2200      	movs	r2, #0
 80078a4:	602a      	str	r2, [r5, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	f7fa fdfb 	bl	80024a2 <_lseek>
 80078ac:	1c43      	adds	r3, r0, #1
 80078ae:	d102      	bne.n	80078b6 <_lseek_r+0x1e>
 80078b0:	682b      	ldr	r3, [r5, #0]
 80078b2:	b103      	cbz	r3, 80078b6 <_lseek_r+0x1e>
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	bd38      	pop	{r3, r4, r5, pc}
 80078b8:	20000548 	.word	0x20000548

080078bc <_read_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4d07      	ldr	r5, [pc, #28]	@ (80078dc <_read_r+0x20>)
 80078c0:	4604      	mov	r4, r0
 80078c2:	4608      	mov	r0, r1
 80078c4:	4611      	mov	r1, r2
 80078c6:	2200      	movs	r2, #0
 80078c8:	602a      	str	r2, [r5, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	f7fa fd89 	bl	80023e2 <_read>
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	d102      	bne.n	80078da <_read_r+0x1e>
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	b103      	cbz	r3, 80078da <_read_r+0x1e>
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	bd38      	pop	{r3, r4, r5, pc}
 80078dc:	20000548 	.word	0x20000548

080078e0 <_write_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4d07      	ldr	r5, [pc, #28]	@ (8007900 <_write_r+0x20>)
 80078e4:	4604      	mov	r4, r0
 80078e6:	4608      	mov	r0, r1
 80078e8:	4611      	mov	r1, r2
 80078ea:	2200      	movs	r2, #0
 80078ec:	602a      	str	r2, [r5, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	f7fa fd94 	bl	800241c <_write>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_write_r+0x1e>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_write_r+0x1e>
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	20000548 	.word	0x20000548

08007904 <__errno>:
 8007904:	4b01      	ldr	r3, [pc, #4]	@ (800790c <__errno+0x8>)
 8007906:	6818      	ldr	r0, [r3, #0]
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	20000018 	.word	0x20000018

08007910 <__libc_init_array>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	4d0d      	ldr	r5, [pc, #52]	@ (8007948 <__libc_init_array+0x38>)
 8007914:	4c0d      	ldr	r4, [pc, #52]	@ (800794c <__libc_init_array+0x3c>)
 8007916:	1b64      	subs	r4, r4, r5
 8007918:	10a4      	asrs	r4, r4, #2
 800791a:	2600      	movs	r6, #0
 800791c:	42a6      	cmp	r6, r4
 800791e:	d109      	bne.n	8007934 <__libc_init_array+0x24>
 8007920:	4d0b      	ldr	r5, [pc, #44]	@ (8007950 <__libc_init_array+0x40>)
 8007922:	4c0c      	ldr	r4, [pc, #48]	@ (8007954 <__libc_init_array+0x44>)
 8007924:	f003 fae6 	bl	800aef4 <_init>
 8007928:	1b64      	subs	r4, r4, r5
 800792a:	10a4      	asrs	r4, r4, #2
 800792c:	2600      	movs	r6, #0
 800792e:	42a6      	cmp	r6, r4
 8007930:	d105      	bne.n	800793e <__libc_init_array+0x2e>
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	f855 3b04 	ldr.w	r3, [r5], #4
 8007938:	4798      	blx	r3
 800793a:	3601      	adds	r6, #1
 800793c:	e7ee      	b.n	800791c <__libc_init_array+0xc>
 800793e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007942:	4798      	blx	r3
 8007944:	3601      	adds	r6, #1
 8007946:	e7f2      	b.n	800792e <__libc_init_array+0x1e>
 8007948:	0800b47c 	.word	0x0800b47c
 800794c:	0800b47c 	.word	0x0800b47c
 8007950:	0800b47c 	.word	0x0800b47c
 8007954:	0800b480 	.word	0x0800b480

08007958 <__retarget_lock_init_recursive>:
 8007958:	4770      	bx	lr

0800795a <__retarget_lock_acquire_recursive>:
 800795a:	4770      	bx	lr

0800795c <__retarget_lock_release_recursive>:
 800795c:	4770      	bx	lr
	...

08007960 <nanf>:
 8007960:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007968 <nanf+0x8>
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	7fc00000 	.word	0x7fc00000

0800796c <quorem>:
 800796c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007970:	6903      	ldr	r3, [r0, #16]
 8007972:	690c      	ldr	r4, [r1, #16]
 8007974:	42a3      	cmp	r3, r4
 8007976:	4607      	mov	r7, r0
 8007978:	db7e      	blt.n	8007a78 <quorem+0x10c>
 800797a:	3c01      	subs	r4, #1
 800797c:	f101 0814 	add.w	r8, r1, #20
 8007980:	00a3      	lsls	r3, r4, #2
 8007982:	f100 0514 	add.w	r5, r0, #20
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007992:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007996:	3301      	adds	r3, #1
 8007998:	429a      	cmp	r2, r3
 800799a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800799e:	fbb2 f6f3 	udiv	r6, r2, r3
 80079a2:	d32e      	bcc.n	8007a02 <quorem+0x96>
 80079a4:	f04f 0a00 	mov.w	sl, #0
 80079a8:	46c4      	mov	ip, r8
 80079aa:	46ae      	mov	lr, r5
 80079ac:	46d3      	mov	fp, sl
 80079ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079b2:	b298      	uxth	r0, r3
 80079b4:	fb06 a000 	mla	r0, r6, r0, sl
 80079b8:	0c02      	lsrs	r2, r0, #16
 80079ba:	0c1b      	lsrs	r3, r3, #16
 80079bc:	fb06 2303 	mla	r3, r6, r3, r2
 80079c0:	f8de 2000 	ldr.w	r2, [lr]
 80079c4:	b280      	uxth	r0, r0
 80079c6:	b292      	uxth	r2, r2
 80079c8:	1a12      	subs	r2, r2, r0
 80079ca:	445a      	add	r2, fp
 80079cc:	f8de 0000 	ldr.w	r0, [lr]
 80079d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80079da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80079de:	b292      	uxth	r2, r2
 80079e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079e4:	45e1      	cmp	r9, ip
 80079e6:	f84e 2b04 	str.w	r2, [lr], #4
 80079ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80079ee:	d2de      	bcs.n	80079ae <quorem+0x42>
 80079f0:	9b00      	ldr	r3, [sp, #0]
 80079f2:	58eb      	ldr	r3, [r5, r3]
 80079f4:	b92b      	cbnz	r3, 8007a02 <quorem+0x96>
 80079f6:	9b01      	ldr	r3, [sp, #4]
 80079f8:	3b04      	subs	r3, #4
 80079fa:	429d      	cmp	r5, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	d32f      	bcc.n	8007a60 <quorem+0xf4>
 8007a00:	613c      	str	r4, [r7, #16]
 8007a02:	4638      	mov	r0, r7
 8007a04:	f001 f9c8 	bl	8008d98 <__mcmp>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	db25      	blt.n	8007a58 <quorem+0xec>
 8007a0c:	4629      	mov	r1, r5
 8007a0e:	2000      	movs	r0, #0
 8007a10:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a14:	f8d1 c000 	ldr.w	ip, [r1]
 8007a18:	fa1f fe82 	uxth.w	lr, r2
 8007a1c:	fa1f f38c 	uxth.w	r3, ip
 8007a20:	eba3 030e 	sub.w	r3, r3, lr
 8007a24:	4403      	add	r3, r0
 8007a26:	0c12      	lsrs	r2, r2, #16
 8007a28:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a2c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a36:	45c1      	cmp	r9, r8
 8007a38:	f841 3b04 	str.w	r3, [r1], #4
 8007a3c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a40:	d2e6      	bcs.n	8007a10 <quorem+0xa4>
 8007a42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a4a:	b922      	cbnz	r2, 8007a56 <quorem+0xea>
 8007a4c:	3b04      	subs	r3, #4
 8007a4e:	429d      	cmp	r5, r3
 8007a50:	461a      	mov	r2, r3
 8007a52:	d30b      	bcc.n	8007a6c <quorem+0x100>
 8007a54:	613c      	str	r4, [r7, #16]
 8007a56:	3601      	adds	r6, #1
 8007a58:	4630      	mov	r0, r6
 8007a5a:	b003      	add	sp, #12
 8007a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a60:	6812      	ldr	r2, [r2, #0]
 8007a62:	3b04      	subs	r3, #4
 8007a64:	2a00      	cmp	r2, #0
 8007a66:	d1cb      	bne.n	8007a00 <quorem+0x94>
 8007a68:	3c01      	subs	r4, #1
 8007a6a:	e7c6      	b.n	80079fa <quorem+0x8e>
 8007a6c:	6812      	ldr	r2, [r2, #0]
 8007a6e:	3b04      	subs	r3, #4
 8007a70:	2a00      	cmp	r2, #0
 8007a72:	d1ef      	bne.n	8007a54 <quorem+0xe8>
 8007a74:	3c01      	subs	r4, #1
 8007a76:	e7ea      	b.n	8007a4e <quorem+0xe2>
 8007a78:	2000      	movs	r0, #0
 8007a7a:	e7ee      	b.n	8007a5a <quorem+0xee>
 8007a7c:	0000      	movs	r0, r0
	...

08007a80 <_dtoa_r>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	69c7      	ldr	r7, [r0, #28]
 8007a86:	b097      	sub	sp, #92	@ 0x5c
 8007a88:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007a8c:	ec55 4b10 	vmov	r4, r5, d0
 8007a90:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007a92:	9107      	str	r1, [sp, #28]
 8007a94:	4681      	mov	r9, r0
 8007a96:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a98:	9311      	str	r3, [sp, #68]	@ 0x44
 8007a9a:	b97f      	cbnz	r7, 8007abc <_dtoa_r+0x3c>
 8007a9c:	2010      	movs	r0, #16
 8007a9e:	f000 fe09 	bl	80086b4 <malloc>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	f8c9 001c 	str.w	r0, [r9, #28]
 8007aa8:	b920      	cbnz	r0, 8007ab4 <_dtoa_r+0x34>
 8007aaa:	4ba9      	ldr	r3, [pc, #676]	@ (8007d50 <_dtoa_r+0x2d0>)
 8007aac:	21ef      	movs	r1, #239	@ 0xef
 8007aae:	48a9      	ldr	r0, [pc, #676]	@ (8007d54 <_dtoa_r+0x2d4>)
 8007ab0:	f002 fe02 	bl	800a6b8 <__assert_func>
 8007ab4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ab8:	6007      	str	r7, [r0, #0]
 8007aba:	60c7      	str	r7, [r0, #12]
 8007abc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ac0:	6819      	ldr	r1, [r3, #0]
 8007ac2:	b159      	cbz	r1, 8007adc <_dtoa_r+0x5c>
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	604a      	str	r2, [r1, #4]
 8007ac8:	2301      	movs	r3, #1
 8007aca:	4093      	lsls	r3, r2
 8007acc:	608b      	str	r3, [r1, #8]
 8007ace:	4648      	mov	r0, r9
 8007ad0:	f000 fee6 	bl	80088a0 <_Bfree>
 8007ad4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	1e2b      	subs	r3, r5, #0
 8007ade:	bfb9      	ittee	lt
 8007ae0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ae4:	9305      	strlt	r3, [sp, #20]
 8007ae6:	2300      	movge	r3, #0
 8007ae8:	6033      	strge	r3, [r6, #0]
 8007aea:	9f05      	ldr	r7, [sp, #20]
 8007aec:	4b9a      	ldr	r3, [pc, #616]	@ (8007d58 <_dtoa_r+0x2d8>)
 8007aee:	bfbc      	itt	lt
 8007af0:	2201      	movlt	r2, #1
 8007af2:	6032      	strlt	r2, [r6, #0]
 8007af4:	43bb      	bics	r3, r7
 8007af6:	d112      	bne.n	8007b1e <_dtoa_r+0x9e>
 8007af8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007afa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b04:	4323      	orrs	r3, r4
 8007b06:	f000 855a 	beq.w	80085be <_dtoa_r+0xb3e>
 8007b0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b0c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007d6c <_dtoa_r+0x2ec>
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 855c 	beq.w	80085ce <_dtoa_r+0xb4e>
 8007b16:	f10a 0303 	add.w	r3, sl, #3
 8007b1a:	f000 bd56 	b.w	80085ca <_dtoa_r+0xb4a>
 8007b1e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007b22:	2200      	movs	r2, #0
 8007b24:	ec51 0b17 	vmov	r0, r1, d7
 8007b28:	2300      	movs	r3, #0
 8007b2a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007b2e:	f7f8 ffd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b32:	4680      	mov	r8, r0
 8007b34:	b158      	cbz	r0, 8007b4e <_dtoa_r+0xce>
 8007b36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007b38:	2301      	movs	r3, #1
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b3e:	b113      	cbz	r3, 8007b46 <_dtoa_r+0xc6>
 8007b40:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007b42:	4b86      	ldr	r3, [pc, #536]	@ (8007d5c <_dtoa_r+0x2dc>)
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007d70 <_dtoa_r+0x2f0>
 8007b4a:	f000 bd40 	b.w	80085ce <_dtoa_r+0xb4e>
 8007b4e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007b52:	aa14      	add	r2, sp, #80	@ 0x50
 8007b54:	a915      	add	r1, sp, #84	@ 0x54
 8007b56:	4648      	mov	r0, r9
 8007b58:	f001 fa3e 	bl	8008fd8 <__d2b>
 8007b5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007b60:	9002      	str	r0, [sp, #8]
 8007b62:	2e00      	cmp	r6, #0
 8007b64:	d078      	beq.n	8007c58 <_dtoa_r+0x1d8>
 8007b66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b68:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b80:	4619      	mov	r1, r3
 8007b82:	2200      	movs	r2, #0
 8007b84:	4b76      	ldr	r3, [pc, #472]	@ (8007d60 <_dtoa_r+0x2e0>)
 8007b86:	f7f8 fb87 	bl	8000298 <__aeabi_dsub>
 8007b8a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007d38 <_dtoa_r+0x2b8>)
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	f7f8 fd3a 	bl	8000608 <__aeabi_dmul>
 8007b94:	a36a      	add	r3, pc, #424	@ (adr r3, 8007d40 <_dtoa_r+0x2c0>)
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	f7f8 fb7f 	bl	800029c <__adddf3>
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	460d      	mov	r5, r1
 8007ba4:	f7f8 fcc6 	bl	8000534 <__aeabi_i2d>
 8007ba8:	a367      	add	r3, pc, #412	@ (adr r3, 8007d48 <_dtoa_r+0x2c8>)
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	f7f8 fd2b 	bl	8000608 <__aeabi_dmul>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7f8 fb6f 	bl	800029c <__adddf3>
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	460d      	mov	r5, r1
 8007bc2:	f7f8 ffd1 	bl	8000b68 <__aeabi_d2iz>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	4607      	mov	r7, r0
 8007bca:	2300      	movs	r3, #0
 8007bcc:	4620      	mov	r0, r4
 8007bce:	4629      	mov	r1, r5
 8007bd0:	f7f8 ff8c 	bl	8000aec <__aeabi_dcmplt>
 8007bd4:	b140      	cbz	r0, 8007be8 <_dtoa_r+0x168>
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	f7f8 fcac 	bl	8000534 <__aeabi_i2d>
 8007bdc:	4622      	mov	r2, r4
 8007bde:	462b      	mov	r3, r5
 8007be0:	f7f8 ff7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007be4:	b900      	cbnz	r0, 8007be8 <_dtoa_r+0x168>
 8007be6:	3f01      	subs	r7, #1
 8007be8:	2f16      	cmp	r7, #22
 8007bea:	d852      	bhi.n	8007c92 <_dtoa_r+0x212>
 8007bec:	4b5d      	ldr	r3, [pc, #372]	@ (8007d64 <_dtoa_r+0x2e4>)
 8007bee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007bfa:	f7f8 ff77 	bl	8000aec <__aeabi_dcmplt>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d049      	beq.n	8007c96 <_dtoa_r+0x216>
 8007c02:	3f01      	subs	r7, #1
 8007c04:	2300      	movs	r3, #0
 8007c06:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c0a:	1b9b      	subs	r3, r3, r6
 8007c0c:	1e5a      	subs	r2, r3, #1
 8007c0e:	bf45      	ittet	mi
 8007c10:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c14:	9300      	strmi	r3, [sp, #0]
 8007c16:	2300      	movpl	r3, #0
 8007c18:	2300      	movmi	r3, #0
 8007c1a:	9206      	str	r2, [sp, #24]
 8007c1c:	bf54      	ite	pl
 8007c1e:	9300      	strpl	r3, [sp, #0]
 8007c20:	9306      	strmi	r3, [sp, #24]
 8007c22:	2f00      	cmp	r7, #0
 8007c24:	db39      	blt.n	8007c9a <_dtoa_r+0x21a>
 8007c26:	9b06      	ldr	r3, [sp, #24]
 8007c28:	970d      	str	r7, [sp, #52]	@ 0x34
 8007c2a:	443b      	add	r3, r7
 8007c2c:	9306      	str	r3, [sp, #24]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9308      	str	r3, [sp, #32]
 8007c32:	9b07      	ldr	r3, [sp, #28]
 8007c34:	2b09      	cmp	r3, #9
 8007c36:	d863      	bhi.n	8007d00 <_dtoa_r+0x280>
 8007c38:	2b05      	cmp	r3, #5
 8007c3a:	bfc4      	itt	gt
 8007c3c:	3b04      	subgt	r3, #4
 8007c3e:	9307      	strgt	r3, [sp, #28]
 8007c40:	9b07      	ldr	r3, [sp, #28]
 8007c42:	f1a3 0302 	sub.w	r3, r3, #2
 8007c46:	bfcc      	ite	gt
 8007c48:	2400      	movgt	r4, #0
 8007c4a:	2401      	movle	r4, #1
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d863      	bhi.n	8007d18 <_dtoa_r+0x298>
 8007c50:	e8df f003 	tbb	[pc, r3]
 8007c54:	2b375452 	.word	0x2b375452
 8007c58:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007c5c:	441e      	add	r6, r3
 8007c5e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	bfc1      	itttt	gt
 8007c66:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c6a:	409f      	lslgt	r7, r3
 8007c6c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c70:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c74:	bfd6      	itet	le
 8007c76:	f1c3 0320 	rsble	r3, r3, #32
 8007c7a:	ea47 0003 	orrgt.w	r0, r7, r3
 8007c7e:	fa04 f003 	lslle.w	r0, r4, r3
 8007c82:	f7f8 fc47 	bl	8000514 <__aeabi_ui2d>
 8007c86:	2201      	movs	r2, #1
 8007c88:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c8c:	3e01      	subs	r6, #1
 8007c8e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007c90:	e776      	b.n	8007b80 <_dtoa_r+0x100>
 8007c92:	2301      	movs	r3, #1
 8007c94:	e7b7      	b.n	8007c06 <_dtoa_r+0x186>
 8007c96:	9010      	str	r0, [sp, #64]	@ 0x40
 8007c98:	e7b6      	b.n	8007c08 <_dtoa_r+0x188>
 8007c9a:	9b00      	ldr	r3, [sp, #0]
 8007c9c:	1bdb      	subs	r3, r3, r7
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	427b      	negs	r3, r7
 8007ca2:	9308      	str	r3, [sp, #32]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007ca8:	e7c3      	b.n	8007c32 <_dtoa_r+0x1b2>
 8007caa:	2301      	movs	r3, #1
 8007cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007cb0:	eb07 0b03 	add.w	fp, r7, r3
 8007cb4:	f10b 0301 	add.w	r3, fp, #1
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	9303      	str	r3, [sp, #12]
 8007cbc:	bfb8      	it	lt
 8007cbe:	2301      	movlt	r3, #1
 8007cc0:	e006      	b.n	8007cd0 <_dtoa_r+0x250>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	dd28      	ble.n	8007d1e <_dtoa_r+0x29e>
 8007ccc:	469b      	mov	fp, r3
 8007cce:	9303      	str	r3, [sp, #12]
 8007cd0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	2204      	movs	r2, #4
 8007cd8:	f102 0514 	add.w	r5, r2, #20
 8007cdc:	429d      	cmp	r5, r3
 8007cde:	d926      	bls.n	8007d2e <_dtoa_r+0x2ae>
 8007ce0:	6041      	str	r1, [r0, #4]
 8007ce2:	4648      	mov	r0, r9
 8007ce4:	f000 fd9c 	bl	8008820 <_Balloc>
 8007ce8:	4682      	mov	sl, r0
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d142      	bne.n	8007d74 <_dtoa_r+0x2f4>
 8007cee:	4b1e      	ldr	r3, [pc, #120]	@ (8007d68 <_dtoa_r+0x2e8>)
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	f240 11af 	movw	r1, #431	@ 0x1af
 8007cf6:	e6da      	b.n	8007aae <_dtoa_r+0x2e>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	e7e3      	b.n	8007cc4 <_dtoa_r+0x244>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e7d5      	b.n	8007cac <_dtoa_r+0x22c>
 8007d00:	2401      	movs	r4, #1
 8007d02:	2300      	movs	r3, #0
 8007d04:	9307      	str	r3, [sp, #28]
 8007d06:	9409      	str	r4, [sp, #36]	@ 0x24
 8007d08:	f04f 3bff 	mov.w	fp, #4294967295
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007d12:	2312      	movs	r3, #18
 8007d14:	920c      	str	r2, [sp, #48]	@ 0x30
 8007d16:	e7db      	b.n	8007cd0 <_dtoa_r+0x250>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d1c:	e7f4      	b.n	8007d08 <_dtoa_r+0x288>
 8007d1e:	f04f 0b01 	mov.w	fp, #1
 8007d22:	f8cd b00c 	str.w	fp, [sp, #12]
 8007d26:	465b      	mov	r3, fp
 8007d28:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007d2c:	e7d0      	b.n	8007cd0 <_dtoa_r+0x250>
 8007d2e:	3101      	adds	r1, #1
 8007d30:	0052      	lsls	r2, r2, #1
 8007d32:	e7d1      	b.n	8007cd8 <_dtoa_r+0x258>
 8007d34:	f3af 8000 	nop.w
 8007d38:	636f4361 	.word	0x636f4361
 8007d3c:	3fd287a7 	.word	0x3fd287a7
 8007d40:	8b60c8b3 	.word	0x8b60c8b3
 8007d44:	3fc68a28 	.word	0x3fc68a28
 8007d48:	509f79fb 	.word	0x509f79fb
 8007d4c:	3fd34413 	.word	0x3fd34413
 8007d50:	0800b08e 	.word	0x0800b08e
 8007d54:	0800b0a5 	.word	0x0800b0a5
 8007d58:	7ff00000 	.word	0x7ff00000
 8007d5c:	0800b059 	.word	0x0800b059
 8007d60:	3ff80000 	.word	0x3ff80000
 8007d64:	0800b258 	.word	0x0800b258
 8007d68:	0800b0fd 	.word	0x0800b0fd
 8007d6c:	0800b08a 	.word	0x0800b08a
 8007d70:	0800b058 	.word	0x0800b058
 8007d74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007d78:	6018      	str	r0, [r3, #0]
 8007d7a:	9b03      	ldr	r3, [sp, #12]
 8007d7c:	2b0e      	cmp	r3, #14
 8007d7e:	f200 80a1 	bhi.w	8007ec4 <_dtoa_r+0x444>
 8007d82:	2c00      	cmp	r4, #0
 8007d84:	f000 809e 	beq.w	8007ec4 <_dtoa_r+0x444>
 8007d88:	2f00      	cmp	r7, #0
 8007d8a:	dd33      	ble.n	8007df4 <_dtoa_r+0x374>
 8007d8c:	4b9c      	ldr	r3, [pc, #624]	@ (8008000 <_dtoa_r+0x580>)
 8007d8e:	f007 020f 	and.w	r2, r7, #15
 8007d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d96:	ed93 7b00 	vldr	d7, [r3]
 8007d9a:	05f8      	lsls	r0, r7, #23
 8007d9c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007da0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007da4:	d516      	bpl.n	8007dd4 <_dtoa_r+0x354>
 8007da6:	4b97      	ldr	r3, [pc, #604]	@ (8008004 <_dtoa_r+0x584>)
 8007da8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007dac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007db0:	f7f8 fd54 	bl	800085c <__aeabi_ddiv>
 8007db4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007db8:	f004 040f 	and.w	r4, r4, #15
 8007dbc:	2603      	movs	r6, #3
 8007dbe:	4d91      	ldr	r5, [pc, #580]	@ (8008004 <_dtoa_r+0x584>)
 8007dc0:	b954      	cbnz	r4, 8007dd8 <_dtoa_r+0x358>
 8007dc2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007dc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dca:	f7f8 fd47 	bl	800085c <__aeabi_ddiv>
 8007dce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dd2:	e028      	b.n	8007e26 <_dtoa_r+0x3a6>
 8007dd4:	2602      	movs	r6, #2
 8007dd6:	e7f2      	b.n	8007dbe <_dtoa_r+0x33e>
 8007dd8:	07e1      	lsls	r1, r4, #31
 8007dda:	d508      	bpl.n	8007dee <_dtoa_r+0x36e>
 8007ddc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007de0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007de4:	f7f8 fc10 	bl	8000608 <__aeabi_dmul>
 8007de8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007dec:	3601      	adds	r6, #1
 8007dee:	1064      	asrs	r4, r4, #1
 8007df0:	3508      	adds	r5, #8
 8007df2:	e7e5      	b.n	8007dc0 <_dtoa_r+0x340>
 8007df4:	f000 80af 	beq.w	8007f56 <_dtoa_r+0x4d6>
 8007df8:	427c      	negs	r4, r7
 8007dfa:	4b81      	ldr	r3, [pc, #516]	@ (8008000 <_dtoa_r+0x580>)
 8007dfc:	4d81      	ldr	r5, [pc, #516]	@ (8008004 <_dtoa_r+0x584>)
 8007dfe:	f004 020f 	and.w	r2, r4, #15
 8007e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007e0e:	f7f8 fbfb 	bl	8000608 <__aeabi_dmul>
 8007e12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e16:	1124      	asrs	r4, r4, #4
 8007e18:	2300      	movs	r3, #0
 8007e1a:	2602      	movs	r6, #2
 8007e1c:	2c00      	cmp	r4, #0
 8007e1e:	f040 808f 	bne.w	8007f40 <_dtoa_r+0x4c0>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1d3      	bne.n	8007dce <_dtoa_r+0x34e>
 8007e26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e28:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 8094 	beq.w	8007f5a <_dtoa_r+0x4da>
 8007e32:	4b75      	ldr	r3, [pc, #468]	@ (8008008 <_dtoa_r+0x588>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	4620      	mov	r0, r4
 8007e38:	4629      	mov	r1, r5
 8007e3a:	f7f8 fe57 	bl	8000aec <__aeabi_dcmplt>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f000 808b 	beq.w	8007f5a <_dtoa_r+0x4da>
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 8087 	beq.w	8007f5a <_dtoa_r+0x4da>
 8007e4c:	f1bb 0f00 	cmp.w	fp, #0
 8007e50:	dd34      	ble.n	8007ebc <_dtoa_r+0x43c>
 8007e52:	4620      	mov	r0, r4
 8007e54:	4b6d      	ldr	r3, [pc, #436]	@ (800800c <_dtoa_r+0x58c>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	4629      	mov	r1, r5
 8007e5a:	f7f8 fbd5 	bl	8000608 <__aeabi_dmul>
 8007e5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e62:	f107 38ff 	add.w	r8, r7, #4294967295
 8007e66:	3601      	adds	r6, #1
 8007e68:	465c      	mov	r4, fp
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f7f8 fb62 	bl	8000534 <__aeabi_i2d>
 8007e70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e74:	f7f8 fbc8 	bl	8000608 <__aeabi_dmul>
 8007e78:	4b65      	ldr	r3, [pc, #404]	@ (8008010 <_dtoa_r+0x590>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f7f8 fa0e 	bl	800029c <__adddf3>
 8007e80:	4605      	mov	r5, r0
 8007e82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e86:	2c00      	cmp	r4, #0
 8007e88:	d16a      	bne.n	8007f60 <_dtoa_r+0x4e0>
 8007e8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e8e:	4b61      	ldr	r3, [pc, #388]	@ (8008014 <_dtoa_r+0x594>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	f7f8 fa01 	bl	8000298 <__aeabi_dsub>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e9e:	462a      	mov	r2, r5
 8007ea0:	4633      	mov	r3, r6
 8007ea2:	f7f8 fe41 	bl	8000b28 <__aeabi_dcmpgt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	f040 8298 	bne.w	80083dc <_dtoa_r+0x95c>
 8007eac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eb0:	462a      	mov	r2, r5
 8007eb2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007eb6:	f7f8 fe19 	bl	8000aec <__aeabi_dcmplt>
 8007eba:	bb38      	cbnz	r0, 8007f0c <_dtoa_r+0x48c>
 8007ebc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007ec0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ec4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f2c0 8157 	blt.w	800817a <_dtoa_r+0x6fa>
 8007ecc:	2f0e      	cmp	r7, #14
 8007ece:	f300 8154 	bgt.w	800817a <_dtoa_r+0x6fa>
 8007ed2:	4b4b      	ldr	r3, [pc, #300]	@ (8008000 <_dtoa_r+0x580>)
 8007ed4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ed8:	ed93 7b00 	vldr	d7, [r3]
 8007edc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	ed8d 7b00 	vstr	d7, [sp]
 8007ee4:	f280 80e5 	bge.w	80080b2 <_dtoa_r+0x632>
 8007ee8:	9b03      	ldr	r3, [sp, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f300 80e1 	bgt.w	80080b2 <_dtoa_r+0x632>
 8007ef0:	d10c      	bne.n	8007f0c <_dtoa_r+0x48c>
 8007ef2:	4b48      	ldr	r3, [pc, #288]	@ (8008014 <_dtoa_r+0x594>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	ec51 0b17 	vmov	r0, r1, d7
 8007efa:	f7f8 fb85 	bl	8000608 <__aeabi_dmul>
 8007efe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f02:	f7f8 fe07 	bl	8000b14 <__aeabi_dcmpge>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	f000 8266 	beq.w	80083d8 <_dtoa_r+0x958>
 8007f0c:	2400      	movs	r4, #0
 8007f0e:	4625      	mov	r5, r4
 8007f10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f12:	4656      	mov	r6, sl
 8007f14:	ea6f 0803 	mvn.w	r8, r3
 8007f18:	2700      	movs	r7, #0
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	4648      	mov	r0, r9
 8007f1e:	f000 fcbf 	bl	80088a0 <_Bfree>
 8007f22:	2d00      	cmp	r5, #0
 8007f24:	f000 80bd 	beq.w	80080a2 <_dtoa_r+0x622>
 8007f28:	b12f      	cbz	r7, 8007f36 <_dtoa_r+0x4b6>
 8007f2a:	42af      	cmp	r7, r5
 8007f2c:	d003      	beq.n	8007f36 <_dtoa_r+0x4b6>
 8007f2e:	4639      	mov	r1, r7
 8007f30:	4648      	mov	r0, r9
 8007f32:	f000 fcb5 	bl	80088a0 <_Bfree>
 8007f36:	4629      	mov	r1, r5
 8007f38:	4648      	mov	r0, r9
 8007f3a:	f000 fcb1 	bl	80088a0 <_Bfree>
 8007f3e:	e0b0      	b.n	80080a2 <_dtoa_r+0x622>
 8007f40:	07e2      	lsls	r2, r4, #31
 8007f42:	d505      	bpl.n	8007f50 <_dtoa_r+0x4d0>
 8007f44:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f48:	f7f8 fb5e 	bl	8000608 <__aeabi_dmul>
 8007f4c:	3601      	adds	r6, #1
 8007f4e:	2301      	movs	r3, #1
 8007f50:	1064      	asrs	r4, r4, #1
 8007f52:	3508      	adds	r5, #8
 8007f54:	e762      	b.n	8007e1c <_dtoa_r+0x39c>
 8007f56:	2602      	movs	r6, #2
 8007f58:	e765      	b.n	8007e26 <_dtoa_r+0x3a6>
 8007f5a:	9c03      	ldr	r4, [sp, #12]
 8007f5c:	46b8      	mov	r8, r7
 8007f5e:	e784      	b.n	8007e6a <_dtoa_r+0x3ea>
 8007f60:	4b27      	ldr	r3, [pc, #156]	@ (8008000 <_dtoa_r+0x580>)
 8007f62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f6c:	4454      	add	r4, sl
 8007f6e:	2900      	cmp	r1, #0
 8007f70:	d054      	beq.n	800801c <_dtoa_r+0x59c>
 8007f72:	4929      	ldr	r1, [pc, #164]	@ (8008018 <_dtoa_r+0x598>)
 8007f74:	2000      	movs	r0, #0
 8007f76:	f7f8 fc71 	bl	800085c <__aeabi_ddiv>
 8007f7a:	4633      	mov	r3, r6
 8007f7c:	462a      	mov	r2, r5
 8007f7e:	f7f8 f98b 	bl	8000298 <__aeabi_dsub>
 8007f82:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f86:	4656      	mov	r6, sl
 8007f88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f8c:	f7f8 fdec 	bl	8000b68 <__aeabi_d2iz>
 8007f90:	4605      	mov	r5, r0
 8007f92:	f7f8 facf 	bl	8000534 <__aeabi_i2d>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f9e:	f7f8 f97b 	bl	8000298 <__aeabi_dsub>
 8007fa2:	3530      	adds	r5, #48	@ 0x30
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fac:	f806 5b01 	strb.w	r5, [r6], #1
 8007fb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007fb4:	f7f8 fd9a 	bl	8000aec <__aeabi_dcmplt>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d172      	bne.n	80080a2 <_dtoa_r+0x622>
 8007fbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fc0:	4911      	ldr	r1, [pc, #68]	@ (8008008 <_dtoa_r+0x588>)
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	f7f8 f968 	bl	8000298 <__aeabi_dsub>
 8007fc8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007fcc:	f7f8 fd8e 	bl	8000aec <__aeabi_dcmplt>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	f040 80b4 	bne.w	800813e <_dtoa_r+0x6be>
 8007fd6:	42a6      	cmp	r6, r4
 8007fd8:	f43f af70 	beq.w	8007ebc <_dtoa_r+0x43c>
 8007fdc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800800c <_dtoa_r+0x58c>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f7f8 fb10 	bl	8000608 <__aeabi_dmul>
 8007fe8:	4b08      	ldr	r3, [pc, #32]	@ (800800c <_dtoa_r+0x58c>)
 8007fea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007fee:	2200      	movs	r2, #0
 8007ff0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ff4:	f7f8 fb08 	bl	8000608 <__aeabi_dmul>
 8007ff8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ffc:	e7c4      	b.n	8007f88 <_dtoa_r+0x508>
 8007ffe:	bf00      	nop
 8008000:	0800b258 	.word	0x0800b258
 8008004:	0800b230 	.word	0x0800b230
 8008008:	3ff00000 	.word	0x3ff00000
 800800c:	40240000 	.word	0x40240000
 8008010:	401c0000 	.word	0x401c0000
 8008014:	40140000 	.word	0x40140000
 8008018:	3fe00000 	.word	0x3fe00000
 800801c:	4631      	mov	r1, r6
 800801e:	4628      	mov	r0, r5
 8008020:	f7f8 faf2 	bl	8000608 <__aeabi_dmul>
 8008024:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008028:	9413      	str	r4, [sp, #76]	@ 0x4c
 800802a:	4656      	mov	r6, sl
 800802c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008030:	f7f8 fd9a 	bl	8000b68 <__aeabi_d2iz>
 8008034:	4605      	mov	r5, r0
 8008036:	f7f8 fa7d 	bl	8000534 <__aeabi_i2d>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008042:	f7f8 f929 	bl	8000298 <__aeabi_dsub>
 8008046:	3530      	adds	r5, #48	@ 0x30
 8008048:	f806 5b01 	strb.w	r5, [r6], #1
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	42a6      	cmp	r6, r4
 8008052:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008056:	f04f 0200 	mov.w	r2, #0
 800805a:	d124      	bne.n	80080a6 <_dtoa_r+0x626>
 800805c:	4baf      	ldr	r3, [pc, #700]	@ (800831c <_dtoa_r+0x89c>)
 800805e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008062:	f7f8 f91b 	bl	800029c <__adddf3>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800806e:	f7f8 fd5b 	bl	8000b28 <__aeabi_dcmpgt>
 8008072:	2800      	cmp	r0, #0
 8008074:	d163      	bne.n	800813e <_dtoa_r+0x6be>
 8008076:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800807a:	49a8      	ldr	r1, [pc, #672]	@ (800831c <_dtoa_r+0x89c>)
 800807c:	2000      	movs	r0, #0
 800807e:	f7f8 f90b 	bl	8000298 <__aeabi_dsub>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800808a:	f7f8 fd2f 	bl	8000aec <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	f43f af14 	beq.w	8007ebc <_dtoa_r+0x43c>
 8008094:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008096:	1e73      	subs	r3, r6, #1
 8008098:	9313      	str	r3, [sp, #76]	@ 0x4c
 800809a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800809e:	2b30      	cmp	r3, #48	@ 0x30
 80080a0:	d0f8      	beq.n	8008094 <_dtoa_r+0x614>
 80080a2:	4647      	mov	r7, r8
 80080a4:	e03b      	b.n	800811e <_dtoa_r+0x69e>
 80080a6:	4b9e      	ldr	r3, [pc, #632]	@ (8008320 <_dtoa_r+0x8a0>)
 80080a8:	f7f8 faae 	bl	8000608 <__aeabi_dmul>
 80080ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080b0:	e7bc      	b.n	800802c <_dtoa_r+0x5ac>
 80080b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80080b6:	4656      	mov	r6, sl
 80080b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080bc:	4620      	mov	r0, r4
 80080be:	4629      	mov	r1, r5
 80080c0:	f7f8 fbcc 	bl	800085c <__aeabi_ddiv>
 80080c4:	f7f8 fd50 	bl	8000b68 <__aeabi_d2iz>
 80080c8:	4680      	mov	r8, r0
 80080ca:	f7f8 fa33 	bl	8000534 <__aeabi_i2d>
 80080ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080d2:	f7f8 fa99 	bl	8000608 <__aeabi_dmul>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	4620      	mov	r0, r4
 80080dc:	4629      	mov	r1, r5
 80080de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80080e2:	f7f8 f8d9 	bl	8000298 <__aeabi_dsub>
 80080e6:	f806 4b01 	strb.w	r4, [r6], #1
 80080ea:	9d03      	ldr	r5, [sp, #12]
 80080ec:	eba6 040a 	sub.w	r4, r6, sl
 80080f0:	42a5      	cmp	r5, r4
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	d133      	bne.n	8008160 <_dtoa_r+0x6e0>
 80080f8:	f7f8 f8d0 	bl	800029c <__adddf3>
 80080fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008100:	4604      	mov	r4, r0
 8008102:	460d      	mov	r5, r1
 8008104:	f7f8 fd10 	bl	8000b28 <__aeabi_dcmpgt>
 8008108:	b9c0      	cbnz	r0, 800813c <_dtoa_r+0x6bc>
 800810a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800810e:	4620      	mov	r0, r4
 8008110:	4629      	mov	r1, r5
 8008112:	f7f8 fce1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008116:	b110      	cbz	r0, 800811e <_dtoa_r+0x69e>
 8008118:	f018 0f01 	tst.w	r8, #1
 800811c:	d10e      	bne.n	800813c <_dtoa_r+0x6bc>
 800811e:	9902      	ldr	r1, [sp, #8]
 8008120:	4648      	mov	r0, r9
 8008122:	f000 fbbd 	bl	80088a0 <_Bfree>
 8008126:	2300      	movs	r3, #0
 8008128:	7033      	strb	r3, [r6, #0]
 800812a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800812c:	3701      	adds	r7, #1
 800812e:	601f      	str	r7, [r3, #0]
 8008130:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 824b 	beq.w	80085ce <_dtoa_r+0xb4e>
 8008138:	601e      	str	r6, [r3, #0]
 800813a:	e248      	b.n	80085ce <_dtoa_r+0xb4e>
 800813c:	46b8      	mov	r8, r7
 800813e:	4633      	mov	r3, r6
 8008140:	461e      	mov	r6, r3
 8008142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008146:	2a39      	cmp	r2, #57	@ 0x39
 8008148:	d106      	bne.n	8008158 <_dtoa_r+0x6d8>
 800814a:	459a      	cmp	sl, r3
 800814c:	d1f8      	bne.n	8008140 <_dtoa_r+0x6c0>
 800814e:	2230      	movs	r2, #48	@ 0x30
 8008150:	f108 0801 	add.w	r8, r8, #1
 8008154:	f88a 2000 	strb.w	r2, [sl]
 8008158:	781a      	ldrb	r2, [r3, #0]
 800815a:	3201      	adds	r2, #1
 800815c:	701a      	strb	r2, [r3, #0]
 800815e:	e7a0      	b.n	80080a2 <_dtoa_r+0x622>
 8008160:	4b6f      	ldr	r3, [pc, #444]	@ (8008320 <_dtoa_r+0x8a0>)
 8008162:	2200      	movs	r2, #0
 8008164:	f7f8 fa50 	bl	8000608 <__aeabi_dmul>
 8008168:	2200      	movs	r2, #0
 800816a:	2300      	movs	r3, #0
 800816c:	4604      	mov	r4, r0
 800816e:	460d      	mov	r5, r1
 8008170:	f7f8 fcb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008174:	2800      	cmp	r0, #0
 8008176:	d09f      	beq.n	80080b8 <_dtoa_r+0x638>
 8008178:	e7d1      	b.n	800811e <_dtoa_r+0x69e>
 800817a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800817c:	2a00      	cmp	r2, #0
 800817e:	f000 80ea 	beq.w	8008356 <_dtoa_r+0x8d6>
 8008182:	9a07      	ldr	r2, [sp, #28]
 8008184:	2a01      	cmp	r2, #1
 8008186:	f300 80cd 	bgt.w	8008324 <_dtoa_r+0x8a4>
 800818a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800818c:	2a00      	cmp	r2, #0
 800818e:	f000 80c1 	beq.w	8008314 <_dtoa_r+0x894>
 8008192:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008196:	9c08      	ldr	r4, [sp, #32]
 8008198:	9e00      	ldr	r6, [sp, #0]
 800819a:	9a00      	ldr	r2, [sp, #0]
 800819c:	441a      	add	r2, r3
 800819e:	9200      	str	r2, [sp, #0]
 80081a0:	9a06      	ldr	r2, [sp, #24]
 80081a2:	2101      	movs	r1, #1
 80081a4:	441a      	add	r2, r3
 80081a6:	4648      	mov	r0, r9
 80081a8:	9206      	str	r2, [sp, #24]
 80081aa:	f000 fc77 	bl	8008a9c <__i2b>
 80081ae:	4605      	mov	r5, r0
 80081b0:	b166      	cbz	r6, 80081cc <_dtoa_r+0x74c>
 80081b2:	9b06      	ldr	r3, [sp, #24]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dd09      	ble.n	80081cc <_dtoa_r+0x74c>
 80081b8:	42b3      	cmp	r3, r6
 80081ba:	9a00      	ldr	r2, [sp, #0]
 80081bc:	bfa8      	it	ge
 80081be:	4633      	movge	r3, r6
 80081c0:	1ad2      	subs	r2, r2, r3
 80081c2:	9200      	str	r2, [sp, #0]
 80081c4:	9a06      	ldr	r2, [sp, #24]
 80081c6:	1af6      	subs	r6, r6, r3
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	9306      	str	r3, [sp, #24]
 80081cc:	9b08      	ldr	r3, [sp, #32]
 80081ce:	b30b      	cbz	r3, 8008214 <_dtoa_r+0x794>
 80081d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 80c6 	beq.w	8008364 <_dtoa_r+0x8e4>
 80081d8:	2c00      	cmp	r4, #0
 80081da:	f000 80c0 	beq.w	800835e <_dtoa_r+0x8de>
 80081de:	4629      	mov	r1, r5
 80081e0:	4622      	mov	r2, r4
 80081e2:	4648      	mov	r0, r9
 80081e4:	f000 fd12 	bl	8008c0c <__pow5mult>
 80081e8:	9a02      	ldr	r2, [sp, #8]
 80081ea:	4601      	mov	r1, r0
 80081ec:	4605      	mov	r5, r0
 80081ee:	4648      	mov	r0, r9
 80081f0:	f000 fc6a 	bl	8008ac8 <__multiply>
 80081f4:	9902      	ldr	r1, [sp, #8]
 80081f6:	4680      	mov	r8, r0
 80081f8:	4648      	mov	r0, r9
 80081fa:	f000 fb51 	bl	80088a0 <_Bfree>
 80081fe:	9b08      	ldr	r3, [sp, #32]
 8008200:	1b1b      	subs	r3, r3, r4
 8008202:	9308      	str	r3, [sp, #32]
 8008204:	f000 80b1 	beq.w	800836a <_dtoa_r+0x8ea>
 8008208:	9a08      	ldr	r2, [sp, #32]
 800820a:	4641      	mov	r1, r8
 800820c:	4648      	mov	r0, r9
 800820e:	f000 fcfd 	bl	8008c0c <__pow5mult>
 8008212:	9002      	str	r0, [sp, #8]
 8008214:	2101      	movs	r1, #1
 8008216:	4648      	mov	r0, r9
 8008218:	f000 fc40 	bl	8008a9c <__i2b>
 800821c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800821e:	4604      	mov	r4, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 81d8 	beq.w	80085d6 <_dtoa_r+0xb56>
 8008226:	461a      	mov	r2, r3
 8008228:	4601      	mov	r1, r0
 800822a:	4648      	mov	r0, r9
 800822c:	f000 fcee 	bl	8008c0c <__pow5mult>
 8008230:	9b07      	ldr	r3, [sp, #28]
 8008232:	2b01      	cmp	r3, #1
 8008234:	4604      	mov	r4, r0
 8008236:	f300 809f 	bgt.w	8008378 <_dtoa_r+0x8f8>
 800823a:	9b04      	ldr	r3, [sp, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f040 8097 	bne.w	8008370 <_dtoa_r+0x8f0>
 8008242:	9b05      	ldr	r3, [sp, #20]
 8008244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008248:	2b00      	cmp	r3, #0
 800824a:	f040 8093 	bne.w	8008374 <_dtoa_r+0x8f4>
 800824e:	9b05      	ldr	r3, [sp, #20]
 8008250:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008254:	0d1b      	lsrs	r3, r3, #20
 8008256:	051b      	lsls	r3, r3, #20
 8008258:	b133      	cbz	r3, 8008268 <_dtoa_r+0x7e8>
 800825a:	9b00      	ldr	r3, [sp, #0]
 800825c:	3301      	adds	r3, #1
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	9b06      	ldr	r3, [sp, #24]
 8008262:	3301      	adds	r3, #1
 8008264:	9306      	str	r3, [sp, #24]
 8008266:	2301      	movs	r3, #1
 8008268:	9308      	str	r3, [sp, #32]
 800826a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 81b8 	beq.w	80085e2 <_dtoa_r+0xb62>
 8008272:	6923      	ldr	r3, [r4, #16]
 8008274:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008278:	6918      	ldr	r0, [r3, #16]
 800827a:	f000 fbc3 	bl	8008a04 <__hi0bits>
 800827e:	f1c0 0020 	rsb	r0, r0, #32
 8008282:	9b06      	ldr	r3, [sp, #24]
 8008284:	4418      	add	r0, r3
 8008286:	f010 001f 	ands.w	r0, r0, #31
 800828a:	f000 8082 	beq.w	8008392 <_dtoa_r+0x912>
 800828e:	f1c0 0320 	rsb	r3, r0, #32
 8008292:	2b04      	cmp	r3, #4
 8008294:	dd73      	ble.n	800837e <_dtoa_r+0x8fe>
 8008296:	9b00      	ldr	r3, [sp, #0]
 8008298:	f1c0 001c 	rsb	r0, r0, #28
 800829c:	4403      	add	r3, r0
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	9b06      	ldr	r3, [sp, #24]
 80082a2:	4403      	add	r3, r0
 80082a4:	4406      	add	r6, r0
 80082a6:	9306      	str	r3, [sp, #24]
 80082a8:	9b00      	ldr	r3, [sp, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	dd05      	ble.n	80082ba <_dtoa_r+0x83a>
 80082ae:	9902      	ldr	r1, [sp, #8]
 80082b0:	461a      	mov	r2, r3
 80082b2:	4648      	mov	r0, r9
 80082b4:	f000 fd04 	bl	8008cc0 <__lshift>
 80082b8:	9002      	str	r0, [sp, #8]
 80082ba:	9b06      	ldr	r3, [sp, #24]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dd05      	ble.n	80082cc <_dtoa_r+0x84c>
 80082c0:	4621      	mov	r1, r4
 80082c2:	461a      	mov	r2, r3
 80082c4:	4648      	mov	r0, r9
 80082c6:	f000 fcfb 	bl	8008cc0 <__lshift>
 80082ca:	4604      	mov	r4, r0
 80082cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d061      	beq.n	8008396 <_dtoa_r+0x916>
 80082d2:	9802      	ldr	r0, [sp, #8]
 80082d4:	4621      	mov	r1, r4
 80082d6:	f000 fd5f 	bl	8008d98 <__mcmp>
 80082da:	2800      	cmp	r0, #0
 80082dc:	da5b      	bge.n	8008396 <_dtoa_r+0x916>
 80082de:	2300      	movs	r3, #0
 80082e0:	9902      	ldr	r1, [sp, #8]
 80082e2:	220a      	movs	r2, #10
 80082e4:	4648      	mov	r0, r9
 80082e6:	f000 fafd 	bl	80088e4 <__multadd>
 80082ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ec:	9002      	str	r0, [sp, #8]
 80082ee:	f107 38ff 	add.w	r8, r7, #4294967295
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 8177 	beq.w	80085e6 <_dtoa_r+0xb66>
 80082f8:	4629      	mov	r1, r5
 80082fa:	2300      	movs	r3, #0
 80082fc:	220a      	movs	r2, #10
 80082fe:	4648      	mov	r0, r9
 8008300:	f000 faf0 	bl	80088e4 <__multadd>
 8008304:	f1bb 0f00 	cmp.w	fp, #0
 8008308:	4605      	mov	r5, r0
 800830a:	dc6f      	bgt.n	80083ec <_dtoa_r+0x96c>
 800830c:	9b07      	ldr	r3, [sp, #28]
 800830e:	2b02      	cmp	r3, #2
 8008310:	dc49      	bgt.n	80083a6 <_dtoa_r+0x926>
 8008312:	e06b      	b.n	80083ec <_dtoa_r+0x96c>
 8008314:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008316:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800831a:	e73c      	b.n	8008196 <_dtoa_r+0x716>
 800831c:	3fe00000 	.word	0x3fe00000
 8008320:	40240000 	.word	0x40240000
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	1e5c      	subs	r4, r3, #1
 8008328:	9b08      	ldr	r3, [sp, #32]
 800832a:	42a3      	cmp	r3, r4
 800832c:	db09      	blt.n	8008342 <_dtoa_r+0x8c2>
 800832e:	1b1c      	subs	r4, r3, r4
 8008330:	9b03      	ldr	r3, [sp, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	f6bf af30 	bge.w	8008198 <_dtoa_r+0x718>
 8008338:	9b00      	ldr	r3, [sp, #0]
 800833a:	9a03      	ldr	r2, [sp, #12]
 800833c:	1a9e      	subs	r6, r3, r2
 800833e:	2300      	movs	r3, #0
 8008340:	e72b      	b.n	800819a <_dtoa_r+0x71a>
 8008342:	9b08      	ldr	r3, [sp, #32]
 8008344:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008346:	9408      	str	r4, [sp, #32]
 8008348:	1ae3      	subs	r3, r4, r3
 800834a:	441a      	add	r2, r3
 800834c:	9e00      	ldr	r6, [sp, #0]
 800834e:	9b03      	ldr	r3, [sp, #12]
 8008350:	920d      	str	r2, [sp, #52]	@ 0x34
 8008352:	2400      	movs	r4, #0
 8008354:	e721      	b.n	800819a <_dtoa_r+0x71a>
 8008356:	9c08      	ldr	r4, [sp, #32]
 8008358:	9e00      	ldr	r6, [sp, #0]
 800835a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800835c:	e728      	b.n	80081b0 <_dtoa_r+0x730>
 800835e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008362:	e751      	b.n	8008208 <_dtoa_r+0x788>
 8008364:	9a08      	ldr	r2, [sp, #32]
 8008366:	9902      	ldr	r1, [sp, #8]
 8008368:	e750      	b.n	800820c <_dtoa_r+0x78c>
 800836a:	f8cd 8008 	str.w	r8, [sp, #8]
 800836e:	e751      	b.n	8008214 <_dtoa_r+0x794>
 8008370:	2300      	movs	r3, #0
 8008372:	e779      	b.n	8008268 <_dtoa_r+0x7e8>
 8008374:	9b04      	ldr	r3, [sp, #16]
 8008376:	e777      	b.n	8008268 <_dtoa_r+0x7e8>
 8008378:	2300      	movs	r3, #0
 800837a:	9308      	str	r3, [sp, #32]
 800837c:	e779      	b.n	8008272 <_dtoa_r+0x7f2>
 800837e:	d093      	beq.n	80082a8 <_dtoa_r+0x828>
 8008380:	9a00      	ldr	r2, [sp, #0]
 8008382:	331c      	adds	r3, #28
 8008384:	441a      	add	r2, r3
 8008386:	9200      	str	r2, [sp, #0]
 8008388:	9a06      	ldr	r2, [sp, #24]
 800838a:	441a      	add	r2, r3
 800838c:	441e      	add	r6, r3
 800838e:	9206      	str	r2, [sp, #24]
 8008390:	e78a      	b.n	80082a8 <_dtoa_r+0x828>
 8008392:	4603      	mov	r3, r0
 8008394:	e7f4      	b.n	8008380 <_dtoa_r+0x900>
 8008396:	9b03      	ldr	r3, [sp, #12]
 8008398:	2b00      	cmp	r3, #0
 800839a:	46b8      	mov	r8, r7
 800839c:	dc20      	bgt.n	80083e0 <_dtoa_r+0x960>
 800839e:	469b      	mov	fp, r3
 80083a0:	9b07      	ldr	r3, [sp, #28]
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	dd1e      	ble.n	80083e4 <_dtoa_r+0x964>
 80083a6:	f1bb 0f00 	cmp.w	fp, #0
 80083aa:	f47f adb1 	bne.w	8007f10 <_dtoa_r+0x490>
 80083ae:	4621      	mov	r1, r4
 80083b0:	465b      	mov	r3, fp
 80083b2:	2205      	movs	r2, #5
 80083b4:	4648      	mov	r0, r9
 80083b6:	f000 fa95 	bl	80088e4 <__multadd>
 80083ba:	4601      	mov	r1, r0
 80083bc:	4604      	mov	r4, r0
 80083be:	9802      	ldr	r0, [sp, #8]
 80083c0:	f000 fcea 	bl	8008d98 <__mcmp>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	f77f ada3 	ble.w	8007f10 <_dtoa_r+0x490>
 80083ca:	4656      	mov	r6, sl
 80083cc:	2331      	movs	r3, #49	@ 0x31
 80083ce:	f806 3b01 	strb.w	r3, [r6], #1
 80083d2:	f108 0801 	add.w	r8, r8, #1
 80083d6:	e59f      	b.n	8007f18 <_dtoa_r+0x498>
 80083d8:	9c03      	ldr	r4, [sp, #12]
 80083da:	46b8      	mov	r8, r7
 80083dc:	4625      	mov	r5, r4
 80083de:	e7f4      	b.n	80083ca <_dtoa_r+0x94a>
 80083e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80083e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 8101 	beq.w	80085ee <_dtoa_r+0xb6e>
 80083ec:	2e00      	cmp	r6, #0
 80083ee:	dd05      	ble.n	80083fc <_dtoa_r+0x97c>
 80083f0:	4629      	mov	r1, r5
 80083f2:	4632      	mov	r2, r6
 80083f4:	4648      	mov	r0, r9
 80083f6:	f000 fc63 	bl	8008cc0 <__lshift>
 80083fa:	4605      	mov	r5, r0
 80083fc:	9b08      	ldr	r3, [sp, #32]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d05c      	beq.n	80084bc <_dtoa_r+0xa3c>
 8008402:	6869      	ldr	r1, [r5, #4]
 8008404:	4648      	mov	r0, r9
 8008406:	f000 fa0b 	bl	8008820 <_Balloc>
 800840a:	4606      	mov	r6, r0
 800840c:	b928      	cbnz	r0, 800841a <_dtoa_r+0x99a>
 800840e:	4b82      	ldr	r3, [pc, #520]	@ (8008618 <_dtoa_r+0xb98>)
 8008410:	4602      	mov	r2, r0
 8008412:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008416:	f7ff bb4a 	b.w	8007aae <_dtoa_r+0x2e>
 800841a:	692a      	ldr	r2, [r5, #16]
 800841c:	3202      	adds	r2, #2
 800841e:	0092      	lsls	r2, r2, #2
 8008420:	f105 010c 	add.w	r1, r5, #12
 8008424:	300c      	adds	r0, #12
 8008426:	f002 f92f 	bl	800a688 <memcpy>
 800842a:	2201      	movs	r2, #1
 800842c:	4631      	mov	r1, r6
 800842e:	4648      	mov	r0, r9
 8008430:	f000 fc46 	bl	8008cc0 <__lshift>
 8008434:	f10a 0301 	add.w	r3, sl, #1
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	eb0a 030b 	add.w	r3, sl, fp
 800843e:	9308      	str	r3, [sp, #32]
 8008440:	9b04      	ldr	r3, [sp, #16]
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	462f      	mov	r7, r5
 8008448:	9306      	str	r3, [sp, #24]
 800844a:	4605      	mov	r5, r0
 800844c:	9b00      	ldr	r3, [sp, #0]
 800844e:	9802      	ldr	r0, [sp, #8]
 8008450:	4621      	mov	r1, r4
 8008452:	f103 3bff 	add.w	fp, r3, #4294967295
 8008456:	f7ff fa89 	bl	800796c <quorem>
 800845a:	4603      	mov	r3, r0
 800845c:	3330      	adds	r3, #48	@ 0x30
 800845e:	9003      	str	r0, [sp, #12]
 8008460:	4639      	mov	r1, r7
 8008462:	9802      	ldr	r0, [sp, #8]
 8008464:	9309      	str	r3, [sp, #36]	@ 0x24
 8008466:	f000 fc97 	bl	8008d98 <__mcmp>
 800846a:	462a      	mov	r2, r5
 800846c:	9004      	str	r0, [sp, #16]
 800846e:	4621      	mov	r1, r4
 8008470:	4648      	mov	r0, r9
 8008472:	f000 fcad 	bl	8008dd0 <__mdiff>
 8008476:	68c2      	ldr	r2, [r0, #12]
 8008478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800847a:	4606      	mov	r6, r0
 800847c:	bb02      	cbnz	r2, 80084c0 <_dtoa_r+0xa40>
 800847e:	4601      	mov	r1, r0
 8008480:	9802      	ldr	r0, [sp, #8]
 8008482:	f000 fc89 	bl	8008d98 <__mcmp>
 8008486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008488:	4602      	mov	r2, r0
 800848a:	4631      	mov	r1, r6
 800848c:	4648      	mov	r0, r9
 800848e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008490:	9309      	str	r3, [sp, #36]	@ 0x24
 8008492:	f000 fa05 	bl	80088a0 <_Bfree>
 8008496:	9b07      	ldr	r3, [sp, #28]
 8008498:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800849a:	9e00      	ldr	r6, [sp, #0]
 800849c:	ea42 0103 	orr.w	r1, r2, r3
 80084a0:	9b06      	ldr	r3, [sp, #24]
 80084a2:	4319      	orrs	r1, r3
 80084a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a6:	d10d      	bne.n	80084c4 <_dtoa_r+0xa44>
 80084a8:	2b39      	cmp	r3, #57	@ 0x39
 80084aa:	d027      	beq.n	80084fc <_dtoa_r+0xa7c>
 80084ac:	9a04      	ldr	r2, [sp, #16]
 80084ae:	2a00      	cmp	r2, #0
 80084b0:	dd01      	ble.n	80084b6 <_dtoa_r+0xa36>
 80084b2:	9b03      	ldr	r3, [sp, #12]
 80084b4:	3331      	adds	r3, #49	@ 0x31
 80084b6:	f88b 3000 	strb.w	r3, [fp]
 80084ba:	e52e      	b.n	8007f1a <_dtoa_r+0x49a>
 80084bc:	4628      	mov	r0, r5
 80084be:	e7b9      	b.n	8008434 <_dtoa_r+0x9b4>
 80084c0:	2201      	movs	r2, #1
 80084c2:	e7e2      	b.n	800848a <_dtoa_r+0xa0a>
 80084c4:	9904      	ldr	r1, [sp, #16]
 80084c6:	2900      	cmp	r1, #0
 80084c8:	db04      	blt.n	80084d4 <_dtoa_r+0xa54>
 80084ca:	9807      	ldr	r0, [sp, #28]
 80084cc:	4301      	orrs	r1, r0
 80084ce:	9806      	ldr	r0, [sp, #24]
 80084d0:	4301      	orrs	r1, r0
 80084d2:	d120      	bne.n	8008516 <_dtoa_r+0xa96>
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	ddee      	ble.n	80084b6 <_dtoa_r+0xa36>
 80084d8:	9902      	ldr	r1, [sp, #8]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	2201      	movs	r2, #1
 80084de:	4648      	mov	r0, r9
 80084e0:	f000 fbee 	bl	8008cc0 <__lshift>
 80084e4:	4621      	mov	r1, r4
 80084e6:	9002      	str	r0, [sp, #8]
 80084e8:	f000 fc56 	bl	8008d98 <__mcmp>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	9b00      	ldr	r3, [sp, #0]
 80084f0:	dc02      	bgt.n	80084f8 <_dtoa_r+0xa78>
 80084f2:	d1e0      	bne.n	80084b6 <_dtoa_r+0xa36>
 80084f4:	07da      	lsls	r2, r3, #31
 80084f6:	d5de      	bpl.n	80084b6 <_dtoa_r+0xa36>
 80084f8:	2b39      	cmp	r3, #57	@ 0x39
 80084fa:	d1da      	bne.n	80084b2 <_dtoa_r+0xa32>
 80084fc:	2339      	movs	r3, #57	@ 0x39
 80084fe:	f88b 3000 	strb.w	r3, [fp]
 8008502:	4633      	mov	r3, r6
 8008504:	461e      	mov	r6, r3
 8008506:	3b01      	subs	r3, #1
 8008508:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800850c:	2a39      	cmp	r2, #57	@ 0x39
 800850e:	d04e      	beq.n	80085ae <_dtoa_r+0xb2e>
 8008510:	3201      	adds	r2, #1
 8008512:	701a      	strb	r2, [r3, #0]
 8008514:	e501      	b.n	8007f1a <_dtoa_r+0x49a>
 8008516:	2a00      	cmp	r2, #0
 8008518:	dd03      	ble.n	8008522 <_dtoa_r+0xaa2>
 800851a:	2b39      	cmp	r3, #57	@ 0x39
 800851c:	d0ee      	beq.n	80084fc <_dtoa_r+0xa7c>
 800851e:	3301      	adds	r3, #1
 8008520:	e7c9      	b.n	80084b6 <_dtoa_r+0xa36>
 8008522:	9a00      	ldr	r2, [sp, #0]
 8008524:	9908      	ldr	r1, [sp, #32]
 8008526:	f802 3c01 	strb.w	r3, [r2, #-1]
 800852a:	428a      	cmp	r2, r1
 800852c:	d028      	beq.n	8008580 <_dtoa_r+0xb00>
 800852e:	9902      	ldr	r1, [sp, #8]
 8008530:	2300      	movs	r3, #0
 8008532:	220a      	movs	r2, #10
 8008534:	4648      	mov	r0, r9
 8008536:	f000 f9d5 	bl	80088e4 <__multadd>
 800853a:	42af      	cmp	r7, r5
 800853c:	9002      	str	r0, [sp, #8]
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	f04f 020a 	mov.w	r2, #10
 8008546:	4639      	mov	r1, r7
 8008548:	4648      	mov	r0, r9
 800854a:	d107      	bne.n	800855c <_dtoa_r+0xadc>
 800854c:	f000 f9ca 	bl	80088e4 <__multadd>
 8008550:	4607      	mov	r7, r0
 8008552:	4605      	mov	r5, r0
 8008554:	9b00      	ldr	r3, [sp, #0]
 8008556:	3301      	adds	r3, #1
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	e777      	b.n	800844c <_dtoa_r+0x9cc>
 800855c:	f000 f9c2 	bl	80088e4 <__multadd>
 8008560:	4629      	mov	r1, r5
 8008562:	4607      	mov	r7, r0
 8008564:	2300      	movs	r3, #0
 8008566:	220a      	movs	r2, #10
 8008568:	4648      	mov	r0, r9
 800856a:	f000 f9bb 	bl	80088e4 <__multadd>
 800856e:	4605      	mov	r5, r0
 8008570:	e7f0      	b.n	8008554 <_dtoa_r+0xad4>
 8008572:	f1bb 0f00 	cmp.w	fp, #0
 8008576:	bfcc      	ite	gt
 8008578:	465e      	movgt	r6, fp
 800857a:	2601      	movle	r6, #1
 800857c:	4456      	add	r6, sl
 800857e:	2700      	movs	r7, #0
 8008580:	9902      	ldr	r1, [sp, #8]
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	2201      	movs	r2, #1
 8008586:	4648      	mov	r0, r9
 8008588:	f000 fb9a 	bl	8008cc0 <__lshift>
 800858c:	4621      	mov	r1, r4
 800858e:	9002      	str	r0, [sp, #8]
 8008590:	f000 fc02 	bl	8008d98 <__mcmp>
 8008594:	2800      	cmp	r0, #0
 8008596:	dcb4      	bgt.n	8008502 <_dtoa_r+0xa82>
 8008598:	d102      	bne.n	80085a0 <_dtoa_r+0xb20>
 800859a:	9b00      	ldr	r3, [sp, #0]
 800859c:	07db      	lsls	r3, r3, #31
 800859e:	d4b0      	bmi.n	8008502 <_dtoa_r+0xa82>
 80085a0:	4633      	mov	r3, r6
 80085a2:	461e      	mov	r6, r3
 80085a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085a8:	2a30      	cmp	r2, #48	@ 0x30
 80085aa:	d0fa      	beq.n	80085a2 <_dtoa_r+0xb22>
 80085ac:	e4b5      	b.n	8007f1a <_dtoa_r+0x49a>
 80085ae:	459a      	cmp	sl, r3
 80085b0:	d1a8      	bne.n	8008504 <_dtoa_r+0xa84>
 80085b2:	2331      	movs	r3, #49	@ 0x31
 80085b4:	f108 0801 	add.w	r8, r8, #1
 80085b8:	f88a 3000 	strb.w	r3, [sl]
 80085bc:	e4ad      	b.n	8007f1a <_dtoa_r+0x49a>
 80085be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085c0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800861c <_dtoa_r+0xb9c>
 80085c4:	b11b      	cbz	r3, 80085ce <_dtoa_r+0xb4e>
 80085c6:	f10a 0308 	add.w	r3, sl, #8
 80085ca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	4650      	mov	r0, sl
 80085d0:	b017      	add	sp, #92	@ 0x5c
 80085d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d6:	9b07      	ldr	r3, [sp, #28]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	f77f ae2e 	ble.w	800823a <_dtoa_r+0x7ba>
 80085de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085e0:	9308      	str	r3, [sp, #32]
 80085e2:	2001      	movs	r0, #1
 80085e4:	e64d      	b.n	8008282 <_dtoa_r+0x802>
 80085e6:	f1bb 0f00 	cmp.w	fp, #0
 80085ea:	f77f aed9 	ble.w	80083a0 <_dtoa_r+0x920>
 80085ee:	4656      	mov	r6, sl
 80085f0:	9802      	ldr	r0, [sp, #8]
 80085f2:	4621      	mov	r1, r4
 80085f4:	f7ff f9ba 	bl	800796c <quorem>
 80085f8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80085fc:	f806 3b01 	strb.w	r3, [r6], #1
 8008600:	eba6 020a 	sub.w	r2, r6, sl
 8008604:	4593      	cmp	fp, r2
 8008606:	ddb4      	ble.n	8008572 <_dtoa_r+0xaf2>
 8008608:	9902      	ldr	r1, [sp, #8]
 800860a:	2300      	movs	r3, #0
 800860c:	220a      	movs	r2, #10
 800860e:	4648      	mov	r0, r9
 8008610:	f000 f968 	bl	80088e4 <__multadd>
 8008614:	9002      	str	r0, [sp, #8]
 8008616:	e7eb      	b.n	80085f0 <_dtoa_r+0xb70>
 8008618:	0800b0fd 	.word	0x0800b0fd
 800861c:	0800b081 	.word	0x0800b081

08008620 <_free_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4605      	mov	r5, r0
 8008624:	2900      	cmp	r1, #0
 8008626:	d041      	beq.n	80086ac <_free_r+0x8c>
 8008628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800862c:	1f0c      	subs	r4, r1, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	bfb8      	it	lt
 8008632:	18e4      	addlt	r4, r4, r3
 8008634:	f000 f8e8 	bl	8008808 <__malloc_lock>
 8008638:	4a1d      	ldr	r2, [pc, #116]	@ (80086b0 <_free_r+0x90>)
 800863a:	6813      	ldr	r3, [r2, #0]
 800863c:	b933      	cbnz	r3, 800864c <_free_r+0x2c>
 800863e:	6063      	str	r3, [r4, #4]
 8008640:	6014      	str	r4, [r2, #0]
 8008642:	4628      	mov	r0, r5
 8008644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008648:	f000 b8e4 	b.w	8008814 <__malloc_unlock>
 800864c:	42a3      	cmp	r3, r4
 800864e:	d908      	bls.n	8008662 <_free_r+0x42>
 8008650:	6820      	ldr	r0, [r4, #0]
 8008652:	1821      	adds	r1, r4, r0
 8008654:	428b      	cmp	r3, r1
 8008656:	bf01      	itttt	eq
 8008658:	6819      	ldreq	r1, [r3, #0]
 800865a:	685b      	ldreq	r3, [r3, #4]
 800865c:	1809      	addeq	r1, r1, r0
 800865e:	6021      	streq	r1, [r4, #0]
 8008660:	e7ed      	b.n	800863e <_free_r+0x1e>
 8008662:	461a      	mov	r2, r3
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	b10b      	cbz	r3, 800866c <_free_r+0x4c>
 8008668:	42a3      	cmp	r3, r4
 800866a:	d9fa      	bls.n	8008662 <_free_r+0x42>
 800866c:	6811      	ldr	r1, [r2, #0]
 800866e:	1850      	adds	r0, r2, r1
 8008670:	42a0      	cmp	r0, r4
 8008672:	d10b      	bne.n	800868c <_free_r+0x6c>
 8008674:	6820      	ldr	r0, [r4, #0]
 8008676:	4401      	add	r1, r0
 8008678:	1850      	adds	r0, r2, r1
 800867a:	4283      	cmp	r3, r0
 800867c:	6011      	str	r1, [r2, #0]
 800867e:	d1e0      	bne.n	8008642 <_free_r+0x22>
 8008680:	6818      	ldr	r0, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	6053      	str	r3, [r2, #4]
 8008686:	4408      	add	r0, r1
 8008688:	6010      	str	r0, [r2, #0]
 800868a:	e7da      	b.n	8008642 <_free_r+0x22>
 800868c:	d902      	bls.n	8008694 <_free_r+0x74>
 800868e:	230c      	movs	r3, #12
 8008690:	602b      	str	r3, [r5, #0]
 8008692:	e7d6      	b.n	8008642 <_free_r+0x22>
 8008694:	6820      	ldr	r0, [r4, #0]
 8008696:	1821      	adds	r1, r4, r0
 8008698:	428b      	cmp	r3, r1
 800869a:	bf04      	itt	eq
 800869c:	6819      	ldreq	r1, [r3, #0]
 800869e:	685b      	ldreq	r3, [r3, #4]
 80086a0:	6063      	str	r3, [r4, #4]
 80086a2:	bf04      	itt	eq
 80086a4:	1809      	addeq	r1, r1, r0
 80086a6:	6021      	streq	r1, [r4, #0]
 80086a8:	6054      	str	r4, [r2, #4]
 80086aa:	e7ca      	b.n	8008642 <_free_r+0x22>
 80086ac:	bd38      	pop	{r3, r4, r5, pc}
 80086ae:	bf00      	nop
 80086b0:	20000554 	.word	0x20000554

080086b4 <malloc>:
 80086b4:	4b02      	ldr	r3, [pc, #8]	@ (80086c0 <malloc+0xc>)
 80086b6:	4601      	mov	r1, r0
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	f000 b825 	b.w	8008708 <_malloc_r>
 80086be:	bf00      	nop
 80086c0:	20000018 	.word	0x20000018

080086c4 <sbrk_aligned>:
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	4e0f      	ldr	r6, [pc, #60]	@ (8008704 <sbrk_aligned+0x40>)
 80086c8:	460c      	mov	r4, r1
 80086ca:	6831      	ldr	r1, [r6, #0]
 80086cc:	4605      	mov	r5, r0
 80086ce:	b911      	cbnz	r1, 80086d6 <sbrk_aligned+0x12>
 80086d0:	f001 ffca 	bl	800a668 <_sbrk_r>
 80086d4:	6030      	str	r0, [r6, #0]
 80086d6:	4621      	mov	r1, r4
 80086d8:	4628      	mov	r0, r5
 80086da:	f001 ffc5 	bl	800a668 <_sbrk_r>
 80086de:	1c43      	adds	r3, r0, #1
 80086e0:	d103      	bne.n	80086ea <sbrk_aligned+0x26>
 80086e2:	f04f 34ff 	mov.w	r4, #4294967295
 80086e6:	4620      	mov	r0, r4
 80086e8:	bd70      	pop	{r4, r5, r6, pc}
 80086ea:	1cc4      	adds	r4, r0, #3
 80086ec:	f024 0403 	bic.w	r4, r4, #3
 80086f0:	42a0      	cmp	r0, r4
 80086f2:	d0f8      	beq.n	80086e6 <sbrk_aligned+0x22>
 80086f4:	1a21      	subs	r1, r4, r0
 80086f6:	4628      	mov	r0, r5
 80086f8:	f001 ffb6 	bl	800a668 <_sbrk_r>
 80086fc:	3001      	adds	r0, #1
 80086fe:	d1f2      	bne.n	80086e6 <sbrk_aligned+0x22>
 8008700:	e7ef      	b.n	80086e2 <sbrk_aligned+0x1e>
 8008702:	bf00      	nop
 8008704:	20000550 	.word	0x20000550

08008708 <_malloc_r>:
 8008708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800870c:	1ccd      	adds	r5, r1, #3
 800870e:	f025 0503 	bic.w	r5, r5, #3
 8008712:	3508      	adds	r5, #8
 8008714:	2d0c      	cmp	r5, #12
 8008716:	bf38      	it	cc
 8008718:	250c      	movcc	r5, #12
 800871a:	2d00      	cmp	r5, #0
 800871c:	4606      	mov	r6, r0
 800871e:	db01      	blt.n	8008724 <_malloc_r+0x1c>
 8008720:	42a9      	cmp	r1, r5
 8008722:	d904      	bls.n	800872e <_malloc_r+0x26>
 8008724:	230c      	movs	r3, #12
 8008726:	6033      	str	r3, [r6, #0]
 8008728:	2000      	movs	r0, #0
 800872a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008804 <_malloc_r+0xfc>
 8008732:	f000 f869 	bl	8008808 <__malloc_lock>
 8008736:	f8d8 3000 	ldr.w	r3, [r8]
 800873a:	461c      	mov	r4, r3
 800873c:	bb44      	cbnz	r4, 8008790 <_malloc_r+0x88>
 800873e:	4629      	mov	r1, r5
 8008740:	4630      	mov	r0, r6
 8008742:	f7ff ffbf 	bl	80086c4 <sbrk_aligned>
 8008746:	1c43      	adds	r3, r0, #1
 8008748:	4604      	mov	r4, r0
 800874a:	d158      	bne.n	80087fe <_malloc_r+0xf6>
 800874c:	f8d8 4000 	ldr.w	r4, [r8]
 8008750:	4627      	mov	r7, r4
 8008752:	2f00      	cmp	r7, #0
 8008754:	d143      	bne.n	80087de <_malloc_r+0xd6>
 8008756:	2c00      	cmp	r4, #0
 8008758:	d04b      	beq.n	80087f2 <_malloc_r+0xea>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	4639      	mov	r1, r7
 800875e:	4630      	mov	r0, r6
 8008760:	eb04 0903 	add.w	r9, r4, r3
 8008764:	f001 ff80 	bl	800a668 <_sbrk_r>
 8008768:	4581      	cmp	r9, r0
 800876a:	d142      	bne.n	80087f2 <_malloc_r+0xea>
 800876c:	6821      	ldr	r1, [r4, #0]
 800876e:	1a6d      	subs	r5, r5, r1
 8008770:	4629      	mov	r1, r5
 8008772:	4630      	mov	r0, r6
 8008774:	f7ff ffa6 	bl	80086c4 <sbrk_aligned>
 8008778:	3001      	adds	r0, #1
 800877a:	d03a      	beq.n	80087f2 <_malloc_r+0xea>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	442b      	add	r3, r5
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	f8d8 3000 	ldr.w	r3, [r8]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	bb62      	cbnz	r2, 80087e4 <_malloc_r+0xdc>
 800878a:	f8c8 7000 	str.w	r7, [r8]
 800878e:	e00f      	b.n	80087b0 <_malloc_r+0xa8>
 8008790:	6822      	ldr	r2, [r4, #0]
 8008792:	1b52      	subs	r2, r2, r5
 8008794:	d420      	bmi.n	80087d8 <_malloc_r+0xd0>
 8008796:	2a0b      	cmp	r2, #11
 8008798:	d917      	bls.n	80087ca <_malloc_r+0xc2>
 800879a:	1961      	adds	r1, r4, r5
 800879c:	42a3      	cmp	r3, r4
 800879e:	6025      	str	r5, [r4, #0]
 80087a0:	bf18      	it	ne
 80087a2:	6059      	strne	r1, [r3, #4]
 80087a4:	6863      	ldr	r3, [r4, #4]
 80087a6:	bf08      	it	eq
 80087a8:	f8c8 1000 	streq.w	r1, [r8]
 80087ac:	5162      	str	r2, [r4, r5]
 80087ae:	604b      	str	r3, [r1, #4]
 80087b0:	4630      	mov	r0, r6
 80087b2:	f000 f82f 	bl	8008814 <__malloc_unlock>
 80087b6:	f104 000b 	add.w	r0, r4, #11
 80087ba:	1d23      	adds	r3, r4, #4
 80087bc:	f020 0007 	bic.w	r0, r0, #7
 80087c0:	1ac2      	subs	r2, r0, r3
 80087c2:	bf1c      	itt	ne
 80087c4:	1a1b      	subne	r3, r3, r0
 80087c6:	50a3      	strne	r3, [r4, r2]
 80087c8:	e7af      	b.n	800872a <_malloc_r+0x22>
 80087ca:	6862      	ldr	r2, [r4, #4]
 80087cc:	42a3      	cmp	r3, r4
 80087ce:	bf0c      	ite	eq
 80087d0:	f8c8 2000 	streq.w	r2, [r8]
 80087d4:	605a      	strne	r2, [r3, #4]
 80087d6:	e7eb      	b.n	80087b0 <_malloc_r+0xa8>
 80087d8:	4623      	mov	r3, r4
 80087da:	6864      	ldr	r4, [r4, #4]
 80087dc:	e7ae      	b.n	800873c <_malloc_r+0x34>
 80087de:	463c      	mov	r4, r7
 80087e0:	687f      	ldr	r7, [r7, #4]
 80087e2:	e7b6      	b.n	8008752 <_malloc_r+0x4a>
 80087e4:	461a      	mov	r2, r3
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	42a3      	cmp	r3, r4
 80087ea:	d1fb      	bne.n	80087e4 <_malloc_r+0xdc>
 80087ec:	2300      	movs	r3, #0
 80087ee:	6053      	str	r3, [r2, #4]
 80087f0:	e7de      	b.n	80087b0 <_malloc_r+0xa8>
 80087f2:	230c      	movs	r3, #12
 80087f4:	6033      	str	r3, [r6, #0]
 80087f6:	4630      	mov	r0, r6
 80087f8:	f000 f80c 	bl	8008814 <__malloc_unlock>
 80087fc:	e794      	b.n	8008728 <_malloc_r+0x20>
 80087fe:	6005      	str	r5, [r0, #0]
 8008800:	e7d6      	b.n	80087b0 <_malloc_r+0xa8>
 8008802:	bf00      	nop
 8008804:	20000554 	.word	0x20000554

08008808 <__malloc_lock>:
 8008808:	4801      	ldr	r0, [pc, #4]	@ (8008810 <__malloc_lock+0x8>)
 800880a:	f7ff b8a6 	b.w	800795a <__retarget_lock_acquire_recursive>
 800880e:	bf00      	nop
 8008810:	2000054c 	.word	0x2000054c

08008814 <__malloc_unlock>:
 8008814:	4801      	ldr	r0, [pc, #4]	@ (800881c <__malloc_unlock+0x8>)
 8008816:	f7ff b8a1 	b.w	800795c <__retarget_lock_release_recursive>
 800881a:	bf00      	nop
 800881c:	2000054c 	.word	0x2000054c

08008820 <_Balloc>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	69c6      	ldr	r6, [r0, #28]
 8008824:	4604      	mov	r4, r0
 8008826:	460d      	mov	r5, r1
 8008828:	b976      	cbnz	r6, 8008848 <_Balloc+0x28>
 800882a:	2010      	movs	r0, #16
 800882c:	f7ff ff42 	bl	80086b4 <malloc>
 8008830:	4602      	mov	r2, r0
 8008832:	61e0      	str	r0, [r4, #28]
 8008834:	b920      	cbnz	r0, 8008840 <_Balloc+0x20>
 8008836:	4b18      	ldr	r3, [pc, #96]	@ (8008898 <_Balloc+0x78>)
 8008838:	4818      	ldr	r0, [pc, #96]	@ (800889c <_Balloc+0x7c>)
 800883a:	216b      	movs	r1, #107	@ 0x6b
 800883c:	f001 ff3c 	bl	800a6b8 <__assert_func>
 8008840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008844:	6006      	str	r6, [r0, #0]
 8008846:	60c6      	str	r6, [r0, #12]
 8008848:	69e6      	ldr	r6, [r4, #28]
 800884a:	68f3      	ldr	r3, [r6, #12]
 800884c:	b183      	cbz	r3, 8008870 <_Balloc+0x50>
 800884e:	69e3      	ldr	r3, [r4, #28]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008856:	b9b8      	cbnz	r0, 8008888 <_Balloc+0x68>
 8008858:	2101      	movs	r1, #1
 800885a:	fa01 f605 	lsl.w	r6, r1, r5
 800885e:	1d72      	adds	r2, r6, #5
 8008860:	0092      	lsls	r2, r2, #2
 8008862:	4620      	mov	r0, r4
 8008864:	f001 ff46 	bl	800a6f4 <_calloc_r>
 8008868:	b160      	cbz	r0, 8008884 <_Balloc+0x64>
 800886a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800886e:	e00e      	b.n	800888e <_Balloc+0x6e>
 8008870:	2221      	movs	r2, #33	@ 0x21
 8008872:	2104      	movs	r1, #4
 8008874:	4620      	mov	r0, r4
 8008876:	f001 ff3d 	bl	800a6f4 <_calloc_r>
 800887a:	69e3      	ldr	r3, [r4, #28]
 800887c:	60f0      	str	r0, [r6, #12]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1e4      	bne.n	800884e <_Balloc+0x2e>
 8008884:	2000      	movs	r0, #0
 8008886:	bd70      	pop	{r4, r5, r6, pc}
 8008888:	6802      	ldr	r2, [r0, #0]
 800888a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800888e:	2300      	movs	r3, #0
 8008890:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008894:	e7f7      	b.n	8008886 <_Balloc+0x66>
 8008896:	bf00      	nop
 8008898:	0800b08e 	.word	0x0800b08e
 800889c:	0800b10e 	.word	0x0800b10e

080088a0 <_Bfree>:
 80088a0:	b570      	push	{r4, r5, r6, lr}
 80088a2:	69c6      	ldr	r6, [r0, #28]
 80088a4:	4605      	mov	r5, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	b976      	cbnz	r6, 80088c8 <_Bfree+0x28>
 80088aa:	2010      	movs	r0, #16
 80088ac:	f7ff ff02 	bl	80086b4 <malloc>
 80088b0:	4602      	mov	r2, r0
 80088b2:	61e8      	str	r0, [r5, #28]
 80088b4:	b920      	cbnz	r0, 80088c0 <_Bfree+0x20>
 80088b6:	4b09      	ldr	r3, [pc, #36]	@ (80088dc <_Bfree+0x3c>)
 80088b8:	4809      	ldr	r0, [pc, #36]	@ (80088e0 <_Bfree+0x40>)
 80088ba:	218f      	movs	r1, #143	@ 0x8f
 80088bc:	f001 fefc 	bl	800a6b8 <__assert_func>
 80088c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088c4:	6006      	str	r6, [r0, #0]
 80088c6:	60c6      	str	r6, [r0, #12]
 80088c8:	b13c      	cbz	r4, 80088da <_Bfree+0x3a>
 80088ca:	69eb      	ldr	r3, [r5, #28]
 80088cc:	6862      	ldr	r2, [r4, #4]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088d4:	6021      	str	r1, [r4, #0]
 80088d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088da:	bd70      	pop	{r4, r5, r6, pc}
 80088dc:	0800b08e 	.word	0x0800b08e
 80088e0:	0800b10e 	.word	0x0800b10e

080088e4 <__multadd>:
 80088e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e8:	690d      	ldr	r5, [r1, #16]
 80088ea:	4607      	mov	r7, r0
 80088ec:	460c      	mov	r4, r1
 80088ee:	461e      	mov	r6, r3
 80088f0:	f101 0c14 	add.w	ip, r1, #20
 80088f4:	2000      	movs	r0, #0
 80088f6:	f8dc 3000 	ldr.w	r3, [ip]
 80088fa:	b299      	uxth	r1, r3
 80088fc:	fb02 6101 	mla	r1, r2, r1, r6
 8008900:	0c1e      	lsrs	r6, r3, #16
 8008902:	0c0b      	lsrs	r3, r1, #16
 8008904:	fb02 3306 	mla	r3, r2, r6, r3
 8008908:	b289      	uxth	r1, r1
 800890a:	3001      	adds	r0, #1
 800890c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008910:	4285      	cmp	r5, r0
 8008912:	f84c 1b04 	str.w	r1, [ip], #4
 8008916:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800891a:	dcec      	bgt.n	80088f6 <__multadd+0x12>
 800891c:	b30e      	cbz	r6, 8008962 <__multadd+0x7e>
 800891e:	68a3      	ldr	r3, [r4, #8]
 8008920:	42ab      	cmp	r3, r5
 8008922:	dc19      	bgt.n	8008958 <__multadd+0x74>
 8008924:	6861      	ldr	r1, [r4, #4]
 8008926:	4638      	mov	r0, r7
 8008928:	3101      	adds	r1, #1
 800892a:	f7ff ff79 	bl	8008820 <_Balloc>
 800892e:	4680      	mov	r8, r0
 8008930:	b928      	cbnz	r0, 800893e <__multadd+0x5a>
 8008932:	4602      	mov	r2, r0
 8008934:	4b0c      	ldr	r3, [pc, #48]	@ (8008968 <__multadd+0x84>)
 8008936:	480d      	ldr	r0, [pc, #52]	@ (800896c <__multadd+0x88>)
 8008938:	21ba      	movs	r1, #186	@ 0xba
 800893a:	f001 febd 	bl	800a6b8 <__assert_func>
 800893e:	6922      	ldr	r2, [r4, #16]
 8008940:	3202      	adds	r2, #2
 8008942:	f104 010c 	add.w	r1, r4, #12
 8008946:	0092      	lsls	r2, r2, #2
 8008948:	300c      	adds	r0, #12
 800894a:	f001 fe9d 	bl	800a688 <memcpy>
 800894e:	4621      	mov	r1, r4
 8008950:	4638      	mov	r0, r7
 8008952:	f7ff ffa5 	bl	80088a0 <_Bfree>
 8008956:	4644      	mov	r4, r8
 8008958:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800895c:	3501      	adds	r5, #1
 800895e:	615e      	str	r6, [r3, #20]
 8008960:	6125      	str	r5, [r4, #16]
 8008962:	4620      	mov	r0, r4
 8008964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008968:	0800b0fd 	.word	0x0800b0fd
 800896c:	0800b10e 	.word	0x0800b10e

08008970 <__s2b>:
 8008970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008974:	460c      	mov	r4, r1
 8008976:	4615      	mov	r5, r2
 8008978:	461f      	mov	r7, r3
 800897a:	2209      	movs	r2, #9
 800897c:	3308      	adds	r3, #8
 800897e:	4606      	mov	r6, r0
 8008980:	fb93 f3f2 	sdiv	r3, r3, r2
 8008984:	2100      	movs	r1, #0
 8008986:	2201      	movs	r2, #1
 8008988:	429a      	cmp	r2, r3
 800898a:	db09      	blt.n	80089a0 <__s2b+0x30>
 800898c:	4630      	mov	r0, r6
 800898e:	f7ff ff47 	bl	8008820 <_Balloc>
 8008992:	b940      	cbnz	r0, 80089a6 <__s2b+0x36>
 8008994:	4602      	mov	r2, r0
 8008996:	4b19      	ldr	r3, [pc, #100]	@ (80089fc <__s2b+0x8c>)
 8008998:	4819      	ldr	r0, [pc, #100]	@ (8008a00 <__s2b+0x90>)
 800899a:	21d3      	movs	r1, #211	@ 0xd3
 800899c:	f001 fe8c 	bl	800a6b8 <__assert_func>
 80089a0:	0052      	lsls	r2, r2, #1
 80089a2:	3101      	adds	r1, #1
 80089a4:	e7f0      	b.n	8008988 <__s2b+0x18>
 80089a6:	9b08      	ldr	r3, [sp, #32]
 80089a8:	6143      	str	r3, [r0, #20]
 80089aa:	2d09      	cmp	r5, #9
 80089ac:	f04f 0301 	mov.w	r3, #1
 80089b0:	6103      	str	r3, [r0, #16]
 80089b2:	dd16      	ble.n	80089e2 <__s2b+0x72>
 80089b4:	f104 0909 	add.w	r9, r4, #9
 80089b8:	46c8      	mov	r8, r9
 80089ba:	442c      	add	r4, r5
 80089bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80089c0:	4601      	mov	r1, r0
 80089c2:	3b30      	subs	r3, #48	@ 0x30
 80089c4:	220a      	movs	r2, #10
 80089c6:	4630      	mov	r0, r6
 80089c8:	f7ff ff8c 	bl	80088e4 <__multadd>
 80089cc:	45a0      	cmp	r8, r4
 80089ce:	d1f5      	bne.n	80089bc <__s2b+0x4c>
 80089d0:	f1a5 0408 	sub.w	r4, r5, #8
 80089d4:	444c      	add	r4, r9
 80089d6:	1b2d      	subs	r5, r5, r4
 80089d8:	1963      	adds	r3, r4, r5
 80089da:	42bb      	cmp	r3, r7
 80089dc:	db04      	blt.n	80089e8 <__s2b+0x78>
 80089de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089e2:	340a      	adds	r4, #10
 80089e4:	2509      	movs	r5, #9
 80089e6:	e7f6      	b.n	80089d6 <__s2b+0x66>
 80089e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089ec:	4601      	mov	r1, r0
 80089ee:	3b30      	subs	r3, #48	@ 0x30
 80089f0:	220a      	movs	r2, #10
 80089f2:	4630      	mov	r0, r6
 80089f4:	f7ff ff76 	bl	80088e4 <__multadd>
 80089f8:	e7ee      	b.n	80089d8 <__s2b+0x68>
 80089fa:	bf00      	nop
 80089fc:	0800b0fd 	.word	0x0800b0fd
 8008a00:	0800b10e 	.word	0x0800b10e

08008a04 <__hi0bits>:
 8008a04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a08:	4603      	mov	r3, r0
 8008a0a:	bf36      	itet	cc
 8008a0c:	0403      	lslcc	r3, r0, #16
 8008a0e:	2000      	movcs	r0, #0
 8008a10:	2010      	movcc	r0, #16
 8008a12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a16:	bf3c      	itt	cc
 8008a18:	021b      	lslcc	r3, r3, #8
 8008a1a:	3008      	addcc	r0, #8
 8008a1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a20:	bf3c      	itt	cc
 8008a22:	011b      	lslcc	r3, r3, #4
 8008a24:	3004      	addcc	r0, #4
 8008a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a2a:	bf3c      	itt	cc
 8008a2c:	009b      	lslcc	r3, r3, #2
 8008a2e:	3002      	addcc	r0, #2
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	db05      	blt.n	8008a40 <__hi0bits+0x3c>
 8008a34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a38:	f100 0001 	add.w	r0, r0, #1
 8008a3c:	bf08      	it	eq
 8008a3e:	2020      	moveq	r0, #32
 8008a40:	4770      	bx	lr

08008a42 <__lo0bits>:
 8008a42:	6803      	ldr	r3, [r0, #0]
 8008a44:	4602      	mov	r2, r0
 8008a46:	f013 0007 	ands.w	r0, r3, #7
 8008a4a:	d00b      	beq.n	8008a64 <__lo0bits+0x22>
 8008a4c:	07d9      	lsls	r1, r3, #31
 8008a4e:	d421      	bmi.n	8008a94 <__lo0bits+0x52>
 8008a50:	0798      	lsls	r0, r3, #30
 8008a52:	bf49      	itett	mi
 8008a54:	085b      	lsrmi	r3, r3, #1
 8008a56:	089b      	lsrpl	r3, r3, #2
 8008a58:	2001      	movmi	r0, #1
 8008a5a:	6013      	strmi	r3, [r2, #0]
 8008a5c:	bf5c      	itt	pl
 8008a5e:	6013      	strpl	r3, [r2, #0]
 8008a60:	2002      	movpl	r0, #2
 8008a62:	4770      	bx	lr
 8008a64:	b299      	uxth	r1, r3
 8008a66:	b909      	cbnz	r1, 8008a6c <__lo0bits+0x2a>
 8008a68:	0c1b      	lsrs	r3, r3, #16
 8008a6a:	2010      	movs	r0, #16
 8008a6c:	b2d9      	uxtb	r1, r3
 8008a6e:	b909      	cbnz	r1, 8008a74 <__lo0bits+0x32>
 8008a70:	3008      	adds	r0, #8
 8008a72:	0a1b      	lsrs	r3, r3, #8
 8008a74:	0719      	lsls	r1, r3, #28
 8008a76:	bf04      	itt	eq
 8008a78:	091b      	lsreq	r3, r3, #4
 8008a7a:	3004      	addeq	r0, #4
 8008a7c:	0799      	lsls	r1, r3, #30
 8008a7e:	bf04      	itt	eq
 8008a80:	089b      	lsreq	r3, r3, #2
 8008a82:	3002      	addeq	r0, #2
 8008a84:	07d9      	lsls	r1, r3, #31
 8008a86:	d403      	bmi.n	8008a90 <__lo0bits+0x4e>
 8008a88:	085b      	lsrs	r3, r3, #1
 8008a8a:	f100 0001 	add.w	r0, r0, #1
 8008a8e:	d003      	beq.n	8008a98 <__lo0bits+0x56>
 8008a90:	6013      	str	r3, [r2, #0]
 8008a92:	4770      	bx	lr
 8008a94:	2000      	movs	r0, #0
 8008a96:	4770      	bx	lr
 8008a98:	2020      	movs	r0, #32
 8008a9a:	4770      	bx	lr

08008a9c <__i2b>:
 8008a9c:	b510      	push	{r4, lr}
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	f7ff febd 	bl	8008820 <_Balloc>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	b928      	cbnz	r0, 8008ab6 <__i2b+0x1a>
 8008aaa:	4b05      	ldr	r3, [pc, #20]	@ (8008ac0 <__i2b+0x24>)
 8008aac:	4805      	ldr	r0, [pc, #20]	@ (8008ac4 <__i2b+0x28>)
 8008aae:	f240 1145 	movw	r1, #325	@ 0x145
 8008ab2:	f001 fe01 	bl	800a6b8 <__assert_func>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	6144      	str	r4, [r0, #20]
 8008aba:	6103      	str	r3, [r0, #16]
 8008abc:	bd10      	pop	{r4, pc}
 8008abe:	bf00      	nop
 8008ac0:	0800b0fd 	.word	0x0800b0fd
 8008ac4:	0800b10e 	.word	0x0800b10e

08008ac8 <__multiply>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	4617      	mov	r7, r2
 8008ace:	690a      	ldr	r2, [r1, #16]
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	bfa8      	it	ge
 8008ad6:	463b      	movge	r3, r7
 8008ad8:	4689      	mov	r9, r1
 8008ada:	bfa4      	itt	ge
 8008adc:	460f      	movge	r7, r1
 8008ade:	4699      	movge	r9, r3
 8008ae0:	693d      	ldr	r5, [r7, #16]
 8008ae2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	6879      	ldr	r1, [r7, #4]
 8008aea:	eb05 060a 	add.w	r6, r5, sl
 8008aee:	42b3      	cmp	r3, r6
 8008af0:	b085      	sub	sp, #20
 8008af2:	bfb8      	it	lt
 8008af4:	3101      	addlt	r1, #1
 8008af6:	f7ff fe93 	bl	8008820 <_Balloc>
 8008afa:	b930      	cbnz	r0, 8008b0a <__multiply+0x42>
 8008afc:	4602      	mov	r2, r0
 8008afe:	4b41      	ldr	r3, [pc, #260]	@ (8008c04 <__multiply+0x13c>)
 8008b00:	4841      	ldr	r0, [pc, #260]	@ (8008c08 <__multiply+0x140>)
 8008b02:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b06:	f001 fdd7 	bl	800a6b8 <__assert_func>
 8008b0a:	f100 0414 	add.w	r4, r0, #20
 8008b0e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008b12:	4623      	mov	r3, r4
 8008b14:	2200      	movs	r2, #0
 8008b16:	4573      	cmp	r3, lr
 8008b18:	d320      	bcc.n	8008b5c <__multiply+0x94>
 8008b1a:	f107 0814 	add.w	r8, r7, #20
 8008b1e:	f109 0114 	add.w	r1, r9, #20
 8008b22:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008b26:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008b2a:	9302      	str	r3, [sp, #8]
 8008b2c:	1beb      	subs	r3, r5, r7
 8008b2e:	3b15      	subs	r3, #21
 8008b30:	f023 0303 	bic.w	r3, r3, #3
 8008b34:	3304      	adds	r3, #4
 8008b36:	3715      	adds	r7, #21
 8008b38:	42bd      	cmp	r5, r7
 8008b3a:	bf38      	it	cc
 8008b3c:	2304      	movcc	r3, #4
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	9b02      	ldr	r3, [sp, #8]
 8008b42:	9103      	str	r1, [sp, #12]
 8008b44:	428b      	cmp	r3, r1
 8008b46:	d80c      	bhi.n	8008b62 <__multiply+0x9a>
 8008b48:	2e00      	cmp	r6, #0
 8008b4a:	dd03      	ble.n	8008b54 <__multiply+0x8c>
 8008b4c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d055      	beq.n	8008c00 <__multiply+0x138>
 8008b54:	6106      	str	r6, [r0, #16]
 8008b56:	b005      	add	sp, #20
 8008b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5c:	f843 2b04 	str.w	r2, [r3], #4
 8008b60:	e7d9      	b.n	8008b16 <__multiply+0x4e>
 8008b62:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b66:	f1ba 0f00 	cmp.w	sl, #0
 8008b6a:	d01f      	beq.n	8008bac <__multiply+0xe4>
 8008b6c:	46c4      	mov	ip, r8
 8008b6e:	46a1      	mov	r9, r4
 8008b70:	2700      	movs	r7, #0
 8008b72:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b76:	f8d9 3000 	ldr.w	r3, [r9]
 8008b7a:	fa1f fb82 	uxth.w	fp, r2
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b84:	443b      	add	r3, r7
 8008b86:	f8d9 7000 	ldr.w	r7, [r9]
 8008b8a:	0c12      	lsrs	r2, r2, #16
 8008b8c:	0c3f      	lsrs	r7, r7, #16
 8008b8e:	fb0a 7202 	mla	r2, sl, r2, r7
 8008b92:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b9c:	4565      	cmp	r5, ip
 8008b9e:	f849 3b04 	str.w	r3, [r9], #4
 8008ba2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008ba6:	d8e4      	bhi.n	8008b72 <__multiply+0xaa>
 8008ba8:	9b01      	ldr	r3, [sp, #4]
 8008baa:	50e7      	str	r7, [r4, r3]
 8008bac:	9b03      	ldr	r3, [sp, #12]
 8008bae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008bb2:	3104      	adds	r1, #4
 8008bb4:	f1b9 0f00 	cmp.w	r9, #0
 8008bb8:	d020      	beq.n	8008bfc <__multiply+0x134>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	4647      	mov	r7, r8
 8008bbe:	46a4      	mov	ip, r4
 8008bc0:	f04f 0a00 	mov.w	sl, #0
 8008bc4:	f8b7 b000 	ldrh.w	fp, [r7]
 8008bc8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008bcc:	fb09 220b 	mla	r2, r9, fp, r2
 8008bd0:	4452      	add	r2, sl
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bd8:	f84c 3b04 	str.w	r3, [ip], #4
 8008bdc:	f857 3b04 	ldr.w	r3, [r7], #4
 8008be0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008be4:	f8bc 3000 	ldrh.w	r3, [ip]
 8008be8:	fb09 330a 	mla	r3, r9, sl, r3
 8008bec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008bf0:	42bd      	cmp	r5, r7
 8008bf2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bf6:	d8e5      	bhi.n	8008bc4 <__multiply+0xfc>
 8008bf8:	9a01      	ldr	r2, [sp, #4]
 8008bfa:	50a3      	str	r3, [r4, r2]
 8008bfc:	3404      	adds	r4, #4
 8008bfe:	e79f      	b.n	8008b40 <__multiply+0x78>
 8008c00:	3e01      	subs	r6, #1
 8008c02:	e7a1      	b.n	8008b48 <__multiply+0x80>
 8008c04:	0800b0fd 	.word	0x0800b0fd
 8008c08:	0800b10e 	.word	0x0800b10e

08008c0c <__pow5mult>:
 8008c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c10:	4615      	mov	r5, r2
 8008c12:	f012 0203 	ands.w	r2, r2, #3
 8008c16:	4607      	mov	r7, r0
 8008c18:	460e      	mov	r6, r1
 8008c1a:	d007      	beq.n	8008c2c <__pow5mult+0x20>
 8008c1c:	4c25      	ldr	r4, [pc, #148]	@ (8008cb4 <__pow5mult+0xa8>)
 8008c1e:	3a01      	subs	r2, #1
 8008c20:	2300      	movs	r3, #0
 8008c22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c26:	f7ff fe5d 	bl	80088e4 <__multadd>
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	10ad      	asrs	r5, r5, #2
 8008c2e:	d03d      	beq.n	8008cac <__pow5mult+0xa0>
 8008c30:	69fc      	ldr	r4, [r7, #28]
 8008c32:	b97c      	cbnz	r4, 8008c54 <__pow5mult+0x48>
 8008c34:	2010      	movs	r0, #16
 8008c36:	f7ff fd3d 	bl	80086b4 <malloc>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	61f8      	str	r0, [r7, #28]
 8008c3e:	b928      	cbnz	r0, 8008c4c <__pow5mult+0x40>
 8008c40:	4b1d      	ldr	r3, [pc, #116]	@ (8008cb8 <__pow5mult+0xac>)
 8008c42:	481e      	ldr	r0, [pc, #120]	@ (8008cbc <__pow5mult+0xb0>)
 8008c44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c48:	f001 fd36 	bl	800a6b8 <__assert_func>
 8008c4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c50:	6004      	str	r4, [r0, #0]
 8008c52:	60c4      	str	r4, [r0, #12]
 8008c54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c5c:	b94c      	cbnz	r4, 8008c72 <__pow5mult+0x66>
 8008c5e:	f240 2171 	movw	r1, #625	@ 0x271
 8008c62:	4638      	mov	r0, r7
 8008c64:	f7ff ff1a 	bl	8008a9c <__i2b>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c6e:	4604      	mov	r4, r0
 8008c70:	6003      	str	r3, [r0, #0]
 8008c72:	f04f 0900 	mov.w	r9, #0
 8008c76:	07eb      	lsls	r3, r5, #31
 8008c78:	d50a      	bpl.n	8008c90 <__pow5mult+0x84>
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	4638      	mov	r0, r7
 8008c80:	f7ff ff22 	bl	8008ac8 <__multiply>
 8008c84:	4631      	mov	r1, r6
 8008c86:	4680      	mov	r8, r0
 8008c88:	4638      	mov	r0, r7
 8008c8a:	f7ff fe09 	bl	80088a0 <_Bfree>
 8008c8e:	4646      	mov	r6, r8
 8008c90:	106d      	asrs	r5, r5, #1
 8008c92:	d00b      	beq.n	8008cac <__pow5mult+0xa0>
 8008c94:	6820      	ldr	r0, [r4, #0]
 8008c96:	b938      	cbnz	r0, 8008ca8 <__pow5mult+0x9c>
 8008c98:	4622      	mov	r2, r4
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	4638      	mov	r0, r7
 8008c9e:	f7ff ff13 	bl	8008ac8 <__multiply>
 8008ca2:	6020      	str	r0, [r4, #0]
 8008ca4:	f8c0 9000 	str.w	r9, [r0]
 8008ca8:	4604      	mov	r4, r0
 8008caa:	e7e4      	b.n	8008c76 <__pow5mult+0x6a>
 8008cac:	4630      	mov	r0, r6
 8008cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cb2:	bf00      	nop
 8008cb4:	0800b220 	.word	0x0800b220
 8008cb8:	0800b08e 	.word	0x0800b08e
 8008cbc:	0800b10e 	.word	0x0800b10e

08008cc0 <__lshift>:
 8008cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	6849      	ldr	r1, [r1, #4]
 8008cc8:	6923      	ldr	r3, [r4, #16]
 8008cca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cce:	68a3      	ldr	r3, [r4, #8]
 8008cd0:	4607      	mov	r7, r0
 8008cd2:	4691      	mov	r9, r2
 8008cd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cd8:	f108 0601 	add.w	r6, r8, #1
 8008cdc:	42b3      	cmp	r3, r6
 8008cde:	db0b      	blt.n	8008cf8 <__lshift+0x38>
 8008ce0:	4638      	mov	r0, r7
 8008ce2:	f7ff fd9d 	bl	8008820 <_Balloc>
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	b948      	cbnz	r0, 8008cfe <__lshift+0x3e>
 8008cea:	4602      	mov	r2, r0
 8008cec:	4b28      	ldr	r3, [pc, #160]	@ (8008d90 <__lshift+0xd0>)
 8008cee:	4829      	ldr	r0, [pc, #164]	@ (8008d94 <__lshift+0xd4>)
 8008cf0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008cf4:	f001 fce0 	bl	800a6b8 <__assert_func>
 8008cf8:	3101      	adds	r1, #1
 8008cfa:	005b      	lsls	r3, r3, #1
 8008cfc:	e7ee      	b.n	8008cdc <__lshift+0x1c>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f100 0114 	add.w	r1, r0, #20
 8008d04:	f100 0210 	add.w	r2, r0, #16
 8008d08:	4618      	mov	r0, r3
 8008d0a:	4553      	cmp	r3, sl
 8008d0c:	db33      	blt.n	8008d76 <__lshift+0xb6>
 8008d0e:	6920      	ldr	r0, [r4, #16]
 8008d10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d14:	f104 0314 	add.w	r3, r4, #20
 8008d18:	f019 091f 	ands.w	r9, r9, #31
 8008d1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d24:	d02b      	beq.n	8008d7e <__lshift+0xbe>
 8008d26:	f1c9 0e20 	rsb	lr, r9, #32
 8008d2a:	468a      	mov	sl, r1
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	6818      	ldr	r0, [r3, #0]
 8008d30:	fa00 f009 	lsl.w	r0, r0, r9
 8008d34:	4310      	orrs	r0, r2
 8008d36:	f84a 0b04 	str.w	r0, [sl], #4
 8008d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d3e:	459c      	cmp	ip, r3
 8008d40:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d44:	d8f3      	bhi.n	8008d2e <__lshift+0x6e>
 8008d46:	ebac 0304 	sub.w	r3, ip, r4
 8008d4a:	3b15      	subs	r3, #21
 8008d4c:	f023 0303 	bic.w	r3, r3, #3
 8008d50:	3304      	adds	r3, #4
 8008d52:	f104 0015 	add.w	r0, r4, #21
 8008d56:	4560      	cmp	r0, ip
 8008d58:	bf88      	it	hi
 8008d5a:	2304      	movhi	r3, #4
 8008d5c:	50ca      	str	r2, [r1, r3]
 8008d5e:	b10a      	cbz	r2, 8008d64 <__lshift+0xa4>
 8008d60:	f108 0602 	add.w	r6, r8, #2
 8008d64:	3e01      	subs	r6, #1
 8008d66:	4638      	mov	r0, r7
 8008d68:	612e      	str	r6, [r5, #16]
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	f7ff fd98 	bl	80088a0 <_Bfree>
 8008d70:	4628      	mov	r0, r5
 8008d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d76:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	e7c5      	b.n	8008d0a <__lshift+0x4a>
 8008d7e:	3904      	subs	r1, #4
 8008d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d84:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d88:	459c      	cmp	ip, r3
 8008d8a:	d8f9      	bhi.n	8008d80 <__lshift+0xc0>
 8008d8c:	e7ea      	b.n	8008d64 <__lshift+0xa4>
 8008d8e:	bf00      	nop
 8008d90:	0800b0fd 	.word	0x0800b0fd
 8008d94:	0800b10e 	.word	0x0800b10e

08008d98 <__mcmp>:
 8008d98:	690a      	ldr	r2, [r1, #16]
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6900      	ldr	r0, [r0, #16]
 8008d9e:	1a80      	subs	r0, r0, r2
 8008da0:	b530      	push	{r4, r5, lr}
 8008da2:	d10e      	bne.n	8008dc2 <__mcmp+0x2a>
 8008da4:	3314      	adds	r3, #20
 8008da6:	3114      	adds	r1, #20
 8008da8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008dac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008db0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008db4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008db8:	4295      	cmp	r5, r2
 8008dba:	d003      	beq.n	8008dc4 <__mcmp+0x2c>
 8008dbc:	d205      	bcs.n	8008dca <__mcmp+0x32>
 8008dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc2:	bd30      	pop	{r4, r5, pc}
 8008dc4:	42a3      	cmp	r3, r4
 8008dc6:	d3f3      	bcc.n	8008db0 <__mcmp+0x18>
 8008dc8:	e7fb      	b.n	8008dc2 <__mcmp+0x2a>
 8008dca:	2001      	movs	r0, #1
 8008dcc:	e7f9      	b.n	8008dc2 <__mcmp+0x2a>
	...

08008dd0 <__mdiff>:
 8008dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd4:	4689      	mov	r9, r1
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	4611      	mov	r1, r2
 8008dda:	4648      	mov	r0, r9
 8008ddc:	4614      	mov	r4, r2
 8008dde:	f7ff ffdb 	bl	8008d98 <__mcmp>
 8008de2:	1e05      	subs	r5, r0, #0
 8008de4:	d112      	bne.n	8008e0c <__mdiff+0x3c>
 8008de6:	4629      	mov	r1, r5
 8008de8:	4630      	mov	r0, r6
 8008dea:	f7ff fd19 	bl	8008820 <_Balloc>
 8008dee:	4602      	mov	r2, r0
 8008df0:	b928      	cbnz	r0, 8008dfe <__mdiff+0x2e>
 8008df2:	4b3f      	ldr	r3, [pc, #252]	@ (8008ef0 <__mdiff+0x120>)
 8008df4:	f240 2137 	movw	r1, #567	@ 0x237
 8008df8:	483e      	ldr	r0, [pc, #248]	@ (8008ef4 <__mdiff+0x124>)
 8008dfa:	f001 fc5d 	bl	800a6b8 <__assert_func>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e04:	4610      	mov	r0, r2
 8008e06:	b003      	add	sp, #12
 8008e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0c:	bfbc      	itt	lt
 8008e0e:	464b      	movlt	r3, r9
 8008e10:	46a1      	movlt	r9, r4
 8008e12:	4630      	mov	r0, r6
 8008e14:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e18:	bfba      	itte	lt
 8008e1a:	461c      	movlt	r4, r3
 8008e1c:	2501      	movlt	r5, #1
 8008e1e:	2500      	movge	r5, #0
 8008e20:	f7ff fcfe 	bl	8008820 <_Balloc>
 8008e24:	4602      	mov	r2, r0
 8008e26:	b918      	cbnz	r0, 8008e30 <__mdiff+0x60>
 8008e28:	4b31      	ldr	r3, [pc, #196]	@ (8008ef0 <__mdiff+0x120>)
 8008e2a:	f240 2145 	movw	r1, #581	@ 0x245
 8008e2e:	e7e3      	b.n	8008df8 <__mdiff+0x28>
 8008e30:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e34:	6926      	ldr	r6, [r4, #16]
 8008e36:	60c5      	str	r5, [r0, #12]
 8008e38:	f109 0310 	add.w	r3, r9, #16
 8008e3c:	f109 0514 	add.w	r5, r9, #20
 8008e40:	f104 0e14 	add.w	lr, r4, #20
 8008e44:	f100 0b14 	add.w	fp, r0, #20
 8008e48:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e4c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e50:	9301      	str	r3, [sp, #4]
 8008e52:	46d9      	mov	r9, fp
 8008e54:	f04f 0c00 	mov.w	ip, #0
 8008e58:	9b01      	ldr	r3, [sp, #4]
 8008e5a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e5e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e62:	9301      	str	r3, [sp, #4]
 8008e64:	fa1f f38a 	uxth.w	r3, sl
 8008e68:	4619      	mov	r1, r3
 8008e6a:	b283      	uxth	r3, r0
 8008e6c:	1acb      	subs	r3, r1, r3
 8008e6e:	0c00      	lsrs	r0, r0, #16
 8008e70:	4463      	add	r3, ip
 8008e72:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e76:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e80:	4576      	cmp	r6, lr
 8008e82:	f849 3b04 	str.w	r3, [r9], #4
 8008e86:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e8a:	d8e5      	bhi.n	8008e58 <__mdiff+0x88>
 8008e8c:	1b33      	subs	r3, r6, r4
 8008e8e:	3b15      	subs	r3, #21
 8008e90:	f023 0303 	bic.w	r3, r3, #3
 8008e94:	3415      	adds	r4, #21
 8008e96:	3304      	adds	r3, #4
 8008e98:	42a6      	cmp	r6, r4
 8008e9a:	bf38      	it	cc
 8008e9c:	2304      	movcc	r3, #4
 8008e9e:	441d      	add	r5, r3
 8008ea0:	445b      	add	r3, fp
 8008ea2:	461e      	mov	r6, r3
 8008ea4:	462c      	mov	r4, r5
 8008ea6:	4544      	cmp	r4, r8
 8008ea8:	d30e      	bcc.n	8008ec8 <__mdiff+0xf8>
 8008eaa:	f108 0103 	add.w	r1, r8, #3
 8008eae:	1b49      	subs	r1, r1, r5
 8008eb0:	f021 0103 	bic.w	r1, r1, #3
 8008eb4:	3d03      	subs	r5, #3
 8008eb6:	45a8      	cmp	r8, r5
 8008eb8:	bf38      	it	cc
 8008eba:	2100      	movcc	r1, #0
 8008ebc:	440b      	add	r3, r1
 8008ebe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ec2:	b191      	cbz	r1, 8008eea <__mdiff+0x11a>
 8008ec4:	6117      	str	r7, [r2, #16]
 8008ec6:	e79d      	b.n	8008e04 <__mdiff+0x34>
 8008ec8:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ecc:	46e6      	mov	lr, ip
 8008ece:	0c08      	lsrs	r0, r1, #16
 8008ed0:	fa1c fc81 	uxtah	ip, ip, r1
 8008ed4:	4471      	add	r1, lr
 8008ed6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008eda:	b289      	uxth	r1, r1
 8008edc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ee0:	f846 1b04 	str.w	r1, [r6], #4
 8008ee4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ee8:	e7dd      	b.n	8008ea6 <__mdiff+0xd6>
 8008eea:	3f01      	subs	r7, #1
 8008eec:	e7e7      	b.n	8008ebe <__mdiff+0xee>
 8008eee:	bf00      	nop
 8008ef0:	0800b0fd 	.word	0x0800b0fd
 8008ef4:	0800b10e 	.word	0x0800b10e

08008ef8 <__ulp>:
 8008ef8:	b082      	sub	sp, #8
 8008efa:	ed8d 0b00 	vstr	d0, [sp]
 8008efe:	9a01      	ldr	r2, [sp, #4]
 8008f00:	4b0f      	ldr	r3, [pc, #60]	@ (8008f40 <__ulp+0x48>)
 8008f02:	4013      	ands	r3, r2
 8008f04:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	dc08      	bgt.n	8008f1e <__ulp+0x26>
 8008f0c:	425b      	negs	r3, r3
 8008f0e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008f12:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f16:	da04      	bge.n	8008f22 <__ulp+0x2a>
 8008f18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008f1c:	4113      	asrs	r3, r2
 8008f1e:	2200      	movs	r2, #0
 8008f20:	e008      	b.n	8008f34 <__ulp+0x3c>
 8008f22:	f1a2 0314 	sub.w	r3, r2, #20
 8008f26:	2b1e      	cmp	r3, #30
 8008f28:	bfda      	itte	le
 8008f2a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008f2e:	40da      	lsrle	r2, r3
 8008f30:	2201      	movgt	r2, #1
 8008f32:	2300      	movs	r3, #0
 8008f34:	4619      	mov	r1, r3
 8008f36:	4610      	mov	r0, r2
 8008f38:	ec41 0b10 	vmov	d0, r0, r1
 8008f3c:	b002      	add	sp, #8
 8008f3e:	4770      	bx	lr
 8008f40:	7ff00000 	.word	0x7ff00000

08008f44 <__b2d>:
 8008f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f48:	6906      	ldr	r6, [r0, #16]
 8008f4a:	f100 0814 	add.w	r8, r0, #20
 8008f4e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008f52:	1f37      	subs	r7, r6, #4
 8008f54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f58:	4610      	mov	r0, r2
 8008f5a:	f7ff fd53 	bl	8008a04 <__hi0bits>
 8008f5e:	f1c0 0320 	rsb	r3, r0, #32
 8008f62:	280a      	cmp	r0, #10
 8008f64:	600b      	str	r3, [r1, #0]
 8008f66:	491b      	ldr	r1, [pc, #108]	@ (8008fd4 <__b2d+0x90>)
 8008f68:	dc15      	bgt.n	8008f96 <__b2d+0x52>
 8008f6a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008f6e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008f72:	45b8      	cmp	r8, r7
 8008f74:	ea43 0501 	orr.w	r5, r3, r1
 8008f78:	bf34      	ite	cc
 8008f7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f7e:	2300      	movcs	r3, #0
 8008f80:	3015      	adds	r0, #21
 8008f82:	fa02 f000 	lsl.w	r0, r2, r0
 8008f86:	fa23 f30c 	lsr.w	r3, r3, ip
 8008f8a:	4303      	orrs	r3, r0
 8008f8c:	461c      	mov	r4, r3
 8008f8e:	ec45 4b10 	vmov	d0, r4, r5
 8008f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f96:	45b8      	cmp	r8, r7
 8008f98:	bf3a      	itte	cc
 8008f9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008f9e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008fa2:	2300      	movcs	r3, #0
 8008fa4:	380b      	subs	r0, #11
 8008fa6:	d012      	beq.n	8008fce <__b2d+0x8a>
 8008fa8:	f1c0 0120 	rsb	r1, r0, #32
 8008fac:	fa23 f401 	lsr.w	r4, r3, r1
 8008fb0:	4082      	lsls	r2, r0
 8008fb2:	4322      	orrs	r2, r4
 8008fb4:	4547      	cmp	r7, r8
 8008fb6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008fba:	bf8c      	ite	hi
 8008fbc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008fc0:	2200      	movls	r2, #0
 8008fc2:	4083      	lsls	r3, r0
 8008fc4:	40ca      	lsrs	r2, r1
 8008fc6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	e7de      	b.n	8008f8c <__b2d+0x48>
 8008fce:	ea42 0501 	orr.w	r5, r2, r1
 8008fd2:	e7db      	b.n	8008f8c <__b2d+0x48>
 8008fd4:	3ff00000 	.word	0x3ff00000

08008fd8 <__d2b>:
 8008fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fdc:	460f      	mov	r7, r1
 8008fde:	2101      	movs	r1, #1
 8008fe0:	ec59 8b10 	vmov	r8, r9, d0
 8008fe4:	4616      	mov	r6, r2
 8008fe6:	f7ff fc1b 	bl	8008820 <_Balloc>
 8008fea:	4604      	mov	r4, r0
 8008fec:	b930      	cbnz	r0, 8008ffc <__d2b+0x24>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	4b23      	ldr	r3, [pc, #140]	@ (8009080 <__d2b+0xa8>)
 8008ff2:	4824      	ldr	r0, [pc, #144]	@ (8009084 <__d2b+0xac>)
 8008ff4:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ff8:	f001 fb5e 	bl	800a6b8 <__assert_func>
 8008ffc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009000:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009004:	b10d      	cbz	r5, 800900a <__d2b+0x32>
 8009006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	f1b8 0300 	subs.w	r3, r8, #0
 8009010:	d023      	beq.n	800905a <__d2b+0x82>
 8009012:	4668      	mov	r0, sp
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	f7ff fd14 	bl	8008a42 <__lo0bits>
 800901a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800901e:	b1d0      	cbz	r0, 8009056 <__d2b+0x7e>
 8009020:	f1c0 0320 	rsb	r3, r0, #32
 8009024:	fa02 f303 	lsl.w	r3, r2, r3
 8009028:	430b      	orrs	r3, r1
 800902a:	40c2      	lsrs	r2, r0
 800902c:	6163      	str	r3, [r4, #20]
 800902e:	9201      	str	r2, [sp, #4]
 8009030:	9b01      	ldr	r3, [sp, #4]
 8009032:	61a3      	str	r3, [r4, #24]
 8009034:	2b00      	cmp	r3, #0
 8009036:	bf0c      	ite	eq
 8009038:	2201      	moveq	r2, #1
 800903a:	2202      	movne	r2, #2
 800903c:	6122      	str	r2, [r4, #16]
 800903e:	b1a5      	cbz	r5, 800906a <__d2b+0x92>
 8009040:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009044:	4405      	add	r5, r0
 8009046:	603d      	str	r5, [r7, #0]
 8009048:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800904c:	6030      	str	r0, [r6, #0]
 800904e:	4620      	mov	r0, r4
 8009050:	b003      	add	sp, #12
 8009052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009056:	6161      	str	r1, [r4, #20]
 8009058:	e7ea      	b.n	8009030 <__d2b+0x58>
 800905a:	a801      	add	r0, sp, #4
 800905c:	f7ff fcf1 	bl	8008a42 <__lo0bits>
 8009060:	9b01      	ldr	r3, [sp, #4]
 8009062:	6163      	str	r3, [r4, #20]
 8009064:	3020      	adds	r0, #32
 8009066:	2201      	movs	r2, #1
 8009068:	e7e8      	b.n	800903c <__d2b+0x64>
 800906a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800906e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009072:	6038      	str	r0, [r7, #0]
 8009074:	6918      	ldr	r0, [r3, #16]
 8009076:	f7ff fcc5 	bl	8008a04 <__hi0bits>
 800907a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800907e:	e7e5      	b.n	800904c <__d2b+0x74>
 8009080:	0800b0fd 	.word	0x0800b0fd
 8009084:	0800b10e 	.word	0x0800b10e

08009088 <__ratio>:
 8009088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	b085      	sub	sp, #20
 800908e:	e9cd 1000 	strd	r1, r0, [sp]
 8009092:	a902      	add	r1, sp, #8
 8009094:	f7ff ff56 	bl	8008f44 <__b2d>
 8009098:	9800      	ldr	r0, [sp, #0]
 800909a:	a903      	add	r1, sp, #12
 800909c:	ec55 4b10 	vmov	r4, r5, d0
 80090a0:	f7ff ff50 	bl	8008f44 <__b2d>
 80090a4:	9b01      	ldr	r3, [sp, #4]
 80090a6:	6919      	ldr	r1, [r3, #16]
 80090a8:	9b00      	ldr	r3, [sp, #0]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	1ac9      	subs	r1, r1, r3
 80090ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80090b2:	1a9b      	subs	r3, r3, r2
 80090b4:	ec5b ab10 	vmov	sl, fp, d0
 80090b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80090bc:	2b00      	cmp	r3, #0
 80090be:	bfce      	itee	gt
 80090c0:	462a      	movgt	r2, r5
 80090c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090c6:	465a      	movle	r2, fp
 80090c8:	462f      	mov	r7, r5
 80090ca:	46d9      	mov	r9, fp
 80090cc:	bfcc      	ite	gt
 80090ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80090d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80090d6:	464b      	mov	r3, r9
 80090d8:	4652      	mov	r2, sl
 80090da:	4620      	mov	r0, r4
 80090dc:	4639      	mov	r1, r7
 80090de:	f7f7 fbbd 	bl	800085c <__aeabi_ddiv>
 80090e2:	ec41 0b10 	vmov	d0, r0, r1
 80090e6:	b005      	add	sp, #20
 80090e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090ec <__copybits>:
 80090ec:	3901      	subs	r1, #1
 80090ee:	b570      	push	{r4, r5, r6, lr}
 80090f0:	1149      	asrs	r1, r1, #5
 80090f2:	6914      	ldr	r4, [r2, #16]
 80090f4:	3101      	adds	r1, #1
 80090f6:	f102 0314 	add.w	r3, r2, #20
 80090fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80090fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009102:	1f05      	subs	r5, r0, #4
 8009104:	42a3      	cmp	r3, r4
 8009106:	d30c      	bcc.n	8009122 <__copybits+0x36>
 8009108:	1aa3      	subs	r3, r4, r2
 800910a:	3b11      	subs	r3, #17
 800910c:	f023 0303 	bic.w	r3, r3, #3
 8009110:	3211      	adds	r2, #17
 8009112:	42a2      	cmp	r2, r4
 8009114:	bf88      	it	hi
 8009116:	2300      	movhi	r3, #0
 8009118:	4418      	add	r0, r3
 800911a:	2300      	movs	r3, #0
 800911c:	4288      	cmp	r0, r1
 800911e:	d305      	bcc.n	800912c <__copybits+0x40>
 8009120:	bd70      	pop	{r4, r5, r6, pc}
 8009122:	f853 6b04 	ldr.w	r6, [r3], #4
 8009126:	f845 6f04 	str.w	r6, [r5, #4]!
 800912a:	e7eb      	b.n	8009104 <__copybits+0x18>
 800912c:	f840 3b04 	str.w	r3, [r0], #4
 8009130:	e7f4      	b.n	800911c <__copybits+0x30>

08009132 <__any_on>:
 8009132:	f100 0214 	add.w	r2, r0, #20
 8009136:	6900      	ldr	r0, [r0, #16]
 8009138:	114b      	asrs	r3, r1, #5
 800913a:	4298      	cmp	r0, r3
 800913c:	b510      	push	{r4, lr}
 800913e:	db11      	blt.n	8009164 <__any_on+0x32>
 8009140:	dd0a      	ble.n	8009158 <__any_on+0x26>
 8009142:	f011 011f 	ands.w	r1, r1, #31
 8009146:	d007      	beq.n	8009158 <__any_on+0x26>
 8009148:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800914c:	fa24 f001 	lsr.w	r0, r4, r1
 8009150:	fa00 f101 	lsl.w	r1, r0, r1
 8009154:	428c      	cmp	r4, r1
 8009156:	d10b      	bne.n	8009170 <__any_on+0x3e>
 8009158:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800915c:	4293      	cmp	r3, r2
 800915e:	d803      	bhi.n	8009168 <__any_on+0x36>
 8009160:	2000      	movs	r0, #0
 8009162:	bd10      	pop	{r4, pc}
 8009164:	4603      	mov	r3, r0
 8009166:	e7f7      	b.n	8009158 <__any_on+0x26>
 8009168:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800916c:	2900      	cmp	r1, #0
 800916e:	d0f5      	beq.n	800915c <__any_on+0x2a>
 8009170:	2001      	movs	r0, #1
 8009172:	e7f6      	b.n	8009162 <__any_on+0x30>

08009174 <sulp>:
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	4604      	mov	r4, r0
 8009178:	460d      	mov	r5, r1
 800917a:	ec45 4b10 	vmov	d0, r4, r5
 800917e:	4616      	mov	r6, r2
 8009180:	f7ff feba 	bl	8008ef8 <__ulp>
 8009184:	ec51 0b10 	vmov	r0, r1, d0
 8009188:	b17e      	cbz	r6, 80091aa <sulp+0x36>
 800918a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800918e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009192:	2b00      	cmp	r3, #0
 8009194:	dd09      	ble.n	80091aa <sulp+0x36>
 8009196:	051b      	lsls	r3, r3, #20
 8009198:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800919c:	2400      	movs	r4, #0
 800919e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80091a2:	4622      	mov	r2, r4
 80091a4:	462b      	mov	r3, r5
 80091a6:	f7f7 fa2f 	bl	8000608 <__aeabi_dmul>
 80091aa:	ec41 0b10 	vmov	d0, r0, r1
 80091ae:	bd70      	pop	{r4, r5, r6, pc}

080091b0 <_strtod_l>:
 80091b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b4:	b09f      	sub	sp, #124	@ 0x7c
 80091b6:	460c      	mov	r4, r1
 80091b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80091ba:	2200      	movs	r2, #0
 80091bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80091be:	9005      	str	r0, [sp, #20]
 80091c0:	f04f 0a00 	mov.w	sl, #0
 80091c4:	f04f 0b00 	mov.w	fp, #0
 80091c8:	460a      	mov	r2, r1
 80091ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80091cc:	7811      	ldrb	r1, [r2, #0]
 80091ce:	292b      	cmp	r1, #43	@ 0x2b
 80091d0:	d04a      	beq.n	8009268 <_strtod_l+0xb8>
 80091d2:	d838      	bhi.n	8009246 <_strtod_l+0x96>
 80091d4:	290d      	cmp	r1, #13
 80091d6:	d832      	bhi.n	800923e <_strtod_l+0x8e>
 80091d8:	2908      	cmp	r1, #8
 80091da:	d832      	bhi.n	8009242 <_strtod_l+0x92>
 80091dc:	2900      	cmp	r1, #0
 80091de:	d03b      	beq.n	8009258 <_strtod_l+0xa8>
 80091e0:	2200      	movs	r2, #0
 80091e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80091e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80091e6:	782a      	ldrb	r2, [r5, #0]
 80091e8:	2a30      	cmp	r2, #48	@ 0x30
 80091ea:	f040 80b2 	bne.w	8009352 <_strtod_l+0x1a2>
 80091ee:	786a      	ldrb	r2, [r5, #1]
 80091f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80091f4:	2a58      	cmp	r2, #88	@ 0x58
 80091f6:	d16e      	bne.n	80092d6 <_strtod_l+0x126>
 80091f8:	9302      	str	r3, [sp, #8]
 80091fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091fc:	9301      	str	r3, [sp, #4]
 80091fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	4a8f      	ldr	r2, [pc, #572]	@ (8009440 <_strtod_l+0x290>)
 8009204:	9805      	ldr	r0, [sp, #20]
 8009206:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009208:	a919      	add	r1, sp, #100	@ 0x64
 800920a:	f001 faef 	bl	800a7ec <__gethex>
 800920e:	f010 060f 	ands.w	r6, r0, #15
 8009212:	4604      	mov	r4, r0
 8009214:	d005      	beq.n	8009222 <_strtod_l+0x72>
 8009216:	2e06      	cmp	r6, #6
 8009218:	d128      	bne.n	800926c <_strtod_l+0xbc>
 800921a:	3501      	adds	r5, #1
 800921c:	2300      	movs	r3, #0
 800921e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009220:	930e      	str	r3, [sp, #56]	@ 0x38
 8009222:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009224:	2b00      	cmp	r3, #0
 8009226:	f040 858e 	bne.w	8009d46 <_strtod_l+0xb96>
 800922a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800922c:	b1cb      	cbz	r3, 8009262 <_strtod_l+0xb2>
 800922e:	4652      	mov	r2, sl
 8009230:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009234:	ec43 2b10 	vmov	d0, r2, r3
 8009238:	b01f      	add	sp, #124	@ 0x7c
 800923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923e:	2920      	cmp	r1, #32
 8009240:	d1ce      	bne.n	80091e0 <_strtod_l+0x30>
 8009242:	3201      	adds	r2, #1
 8009244:	e7c1      	b.n	80091ca <_strtod_l+0x1a>
 8009246:	292d      	cmp	r1, #45	@ 0x2d
 8009248:	d1ca      	bne.n	80091e0 <_strtod_l+0x30>
 800924a:	2101      	movs	r1, #1
 800924c:	910e      	str	r1, [sp, #56]	@ 0x38
 800924e:	1c51      	adds	r1, r2, #1
 8009250:	9119      	str	r1, [sp, #100]	@ 0x64
 8009252:	7852      	ldrb	r2, [r2, #1]
 8009254:	2a00      	cmp	r2, #0
 8009256:	d1c5      	bne.n	80091e4 <_strtod_l+0x34>
 8009258:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800925a:	9419      	str	r4, [sp, #100]	@ 0x64
 800925c:	2b00      	cmp	r3, #0
 800925e:	f040 8570 	bne.w	8009d42 <_strtod_l+0xb92>
 8009262:	4652      	mov	r2, sl
 8009264:	465b      	mov	r3, fp
 8009266:	e7e5      	b.n	8009234 <_strtod_l+0x84>
 8009268:	2100      	movs	r1, #0
 800926a:	e7ef      	b.n	800924c <_strtod_l+0x9c>
 800926c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800926e:	b13a      	cbz	r2, 8009280 <_strtod_l+0xd0>
 8009270:	2135      	movs	r1, #53	@ 0x35
 8009272:	a81c      	add	r0, sp, #112	@ 0x70
 8009274:	f7ff ff3a 	bl	80090ec <__copybits>
 8009278:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800927a:	9805      	ldr	r0, [sp, #20]
 800927c:	f7ff fb10 	bl	80088a0 <_Bfree>
 8009280:	3e01      	subs	r6, #1
 8009282:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009284:	2e04      	cmp	r6, #4
 8009286:	d806      	bhi.n	8009296 <_strtod_l+0xe6>
 8009288:	e8df f006 	tbb	[pc, r6]
 800928c:	201d0314 	.word	0x201d0314
 8009290:	14          	.byte	0x14
 8009291:	00          	.byte	0x00
 8009292:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009296:	05e1      	lsls	r1, r4, #23
 8009298:	bf48      	it	mi
 800929a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800929e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092a2:	0d1b      	lsrs	r3, r3, #20
 80092a4:	051b      	lsls	r3, r3, #20
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1bb      	bne.n	8009222 <_strtod_l+0x72>
 80092aa:	f7fe fb2b 	bl	8007904 <__errno>
 80092ae:	2322      	movs	r3, #34	@ 0x22
 80092b0:	6003      	str	r3, [r0, #0]
 80092b2:	e7b6      	b.n	8009222 <_strtod_l+0x72>
 80092b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80092b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80092bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80092c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80092c4:	e7e7      	b.n	8009296 <_strtod_l+0xe6>
 80092c6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009448 <_strtod_l+0x298>
 80092ca:	e7e4      	b.n	8009296 <_strtod_l+0xe6>
 80092cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80092d0:	f04f 3aff 	mov.w	sl, #4294967295
 80092d4:	e7df      	b.n	8009296 <_strtod_l+0xe6>
 80092d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092d8:	1c5a      	adds	r2, r3, #1
 80092da:	9219      	str	r2, [sp, #100]	@ 0x64
 80092dc:	785b      	ldrb	r3, [r3, #1]
 80092de:	2b30      	cmp	r3, #48	@ 0x30
 80092e0:	d0f9      	beq.n	80092d6 <_strtod_l+0x126>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d09d      	beq.n	8009222 <_strtod_l+0x72>
 80092e6:	2301      	movs	r3, #1
 80092e8:	2700      	movs	r7, #0
 80092ea:	9308      	str	r3, [sp, #32]
 80092ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80092f0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80092f2:	46b9      	mov	r9, r7
 80092f4:	220a      	movs	r2, #10
 80092f6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80092f8:	7805      	ldrb	r5, [r0, #0]
 80092fa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80092fe:	b2d9      	uxtb	r1, r3
 8009300:	2909      	cmp	r1, #9
 8009302:	d928      	bls.n	8009356 <_strtod_l+0x1a6>
 8009304:	494f      	ldr	r1, [pc, #316]	@ (8009444 <_strtod_l+0x294>)
 8009306:	2201      	movs	r2, #1
 8009308:	f001 f97a 	bl	800a600 <strncmp>
 800930c:	2800      	cmp	r0, #0
 800930e:	d032      	beq.n	8009376 <_strtod_l+0x1c6>
 8009310:	2000      	movs	r0, #0
 8009312:	462a      	mov	r2, r5
 8009314:	900a      	str	r0, [sp, #40]	@ 0x28
 8009316:	464d      	mov	r5, r9
 8009318:	4603      	mov	r3, r0
 800931a:	2a65      	cmp	r2, #101	@ 0x65
 800931c:	d001      	beq.n	8009322 <_strtod_l+0x172>
 800931e:	2a45      	cmp	r2, #69	@ 0x45
 8009320:	d114      	bne.n	800934c <_strtod_l+0x19c>
 8009322:	b91d      	cbnz	r5, 800932c <_strtod_l+0x17c>
 8009324:	9a08      	ldr	r2, [sp, #32]
 8009326:	4302      	orrs	r2, r0
 8009328:	d096      	beq.n	8009258 <_strtod_l+0xa8>
 800932a:	2500      	movs	r5, #0
 800932c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800932e:	1c62      	adds	r2, r4, #1
 8009330:	9219      	str	r2, [sp, #100]	@ 0x64
 8009332:	7862      	ldrb	r2, [r4, #1]
 8009334:	2a2b      	cmp	r2, #43	@ 0x2b
 8009336:	d07a      	beq.n	800942e <_strtod_l+0x27e>
 8009338:	2a2d      	cmp	r2, #45	@ 0x2d
 800933a:	d07e      	beq.n	800943a <_strtod_l+0x28a>
 800933c:	f04f 0c00 	mov.w	ip, #0
 8009340:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009344:	2909      	cmp	r1, #9
 8009346:	f240 8085 	bls.w	8009454 <_strtod_l+0x2a4>
 800934a:	9419      	str	r4, [sp, #100]	@ 0x64
 800934c:	f04f 0800 	mov.w	r8, #0
 8009350:	e0a5      	b.n	800949e <_strtod_l+0x2ee>
 8009352:	2300      	movs	r3, #0
 8009354:	e7c8      	b.n	80092e8 <_strtod_l+0x138>
 8009356:	f1b9 0f08 	cmp.w	r9, #8
 800935a:	bfd8      	it	le
 800935c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800935e:	f100 0001 	add.w	r0, r0, #1
 8009362:	bfda      	itte	le
 8009364:	fb02 3301 	mlale	r3, r2, r1, r3
 8009368:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800936a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800936e:	f109 0901 	add.w	r9, r9, #1
 8009372:	9019      	str	r0, [sp, #100]	@ 0x64
 8009374:	e7bf      	b.n	80092f6 <_strtod_l+0x146>
 8009376:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	9219      	str	r2, [sp, #100]	@ 0x64
 800937c:	785a      	ldrb	r2, [r3, #1]
 800937e:	f1b9 0f00 	cmp.w	r9, #0
 8009382:	d03b      	beq.n	80093fc <_strtod_l+0x24c>
 8009384:	900a      	str	r0, [sp, #40]	@ 0x28
 8009386:	464d      	mov	r5, r9
 8009388:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800938c:	2b09      	cmp	r3, #9
 800938e:	d912      	bls.n	80093b6 <_strtod_l+0x206>
 8009390:	2301      	movs	r3, #1
 8009392:	e7c2      	b.n	800931a <_strtod_l+0x16a>
 8009394:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009396:	1c5a      	adds	r2, r3, #1
 8009398:	9219      	str	r2, [sp, #100]	@ 0x64
 800939a:	785a      	ldrb	r2, [r3, #1]
 800939c:	3001      	adds	r0, #1
 800939e:	2a30      	cmp	r2, #48	@ 0x30
 80093a0:	d0f8      	beq.n	8009394 <_strtod_l+0x1e4>
 80093a2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80093a6:	2b08      	cmp	r3, #8
 80093a8:	f200 84d2 	bhi.w	8009d50 <_strtod_l+0xba0>
 80093ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80093b0:	2000      	movs	r0, #0
 80093b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80093b4:	4605      	mov	r5, r0
 80093b6:	3a30      	subs	r2, #48	@ 0x30
 80093b8:	f100 0301 	add.w	r3, r0, #1
 80093bc:	d018      	beq.n	80093f0 <_strtod_l+0x240>
 80093be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093c0:	4419      	add	r1, r3
 80093c2:	910a      	str	r1, [sp, #40]	@ 0x28
 80093c4:	462e      	mov	r6, r5
 80093c6:	f04f 0e0a 	mov.w	lr, #10
 80093ca:	1c71      	adds	r1, r6, #1
 80093cc:	eba1 0c05 	sub.w	ip, r1, r5
 80093d0:	4563      	cmp	r3, ip
 80093d2:	dc15      	bgt.n	8009400 <_strtod_l+0x250>
 80093d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80093d8:	182b      	adds	r3, r5, r0
 80093da:	2b08      	cmp	r3, #8
 80093dc:	f105 0501 	add.w	r5, r5, #1
 80093e0:	4405      	add	r5, r0
 80093e2:	dc1a      	bgt.n	800941a <_strtod_l+0x26a>
 80093e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093e6:	230a      	movs	r3, #10
 80093e8:	fb03 2301 	mla	r3, r3, r1, r2
 80093ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093ee:	2300      	movs	r3, #0
 80093f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093f2:	1c51      	adds	r1, r2, #1
 80093f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80093f6:	7852      	ldrb	r2, [r2, #1]
 80093f8:	4618      	mov	r0, r3
 80093fa:	e7c5      	b.n	8009388 <_strtod_l+0x1d8>
 80093fc:	4648      	mov	r0, r9
 80093fe:	e7ce      	b.n	800939e <_strtod_l+0x1ee>
 8009400:	2e08      	cmp	r6, #8
 8009402:	dc05      	bgt.n	8009410 <_strtod_l+0x260>
 8009404:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009406:	fb0e f606 	mul.w	r6, lr, r6
 800940a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800940c:	460e      	mov	r6, r1
 800940e:	e7dc      	b.n	80093ca <_strtod_l+0x21a>
 8009410:	2910      	cmp	r1, #16
 8009412:	bfd8      	it	le
 8009414:	fb0e f707 	mulle.w	r7, lr, r7
 8009418:	e7f8      	b.n	800940c <_strtod_l+0x25c>
 800941a:	2b0f      	cmp	r3, #15
 800941c:	bfdc      	itt	le
 800941e:	230a      	movle	r3, #10
 8009420:	fb03 2707 	mlale	r7, r3, r7, r2
 8009424:	e7e3      	b.n	80093ee <_strtod_l+0x23e>
 8009426:	2300      	movs	r3, #0
 8009428:	930a      	str	r3, [sp, #40]	@ 0x28
 800942a:	2301      	movs	r3, #1
 800942c:	e77a      	b.n	8009324 <_strtod_l+0x174>
 800942e:	f04f 0c00 	mov.w	ip, #0
 8009432:	1ca2      	adds	r2, r4, #2
 8009434:	9219      	str	r2, [sp, #100]	@ 0x64
 8009436:	78a2      	ldrb	r2, [r4, #2]
 8009438:	e782      	b.n	8009340 <_strtod_l+0x190>
 800943a:	f04f 0c01 	mov.w	ip, #1
 800943e:	e7f8      	b.n	8009432 <_strtod_l+0x282>
 8009440:	0800b334 	.word	0x0800b334
 8009444:	0800b167 	.word	0x0800b167
 8009448:	7ff00000 	.word	0x7ff00000
 800944c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800944e:	1c51      	adds	r1, r2, #1
 8009450:	9119      	str	r1, [sp, #100]	@ 0x64
 8009452:	7852      	ldrb	r2, [r2, #1]
 8009454:	2a30      	cmp	r2, #48	@ 0x30
 8009456:	d0f9      	beq.n	800944c <_strtod_l+0x29c>
 8009458:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800945c:	2908      	cmp	r1, #8
 800945e:	f63f af75 	bhi.w	800934c <_strtod_l+0x19c>
 8009462:	3a30      	subs	r2, #48	@ 0x30
 8009464:	9209      	str	r2, [sp, #36]	@ 0x24
 8009466:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009468:	920f      	str	r2, [sp, #60]	@ 0x3c
 800946a:	f04f 080a 	mov.w	r8, #10
 800946e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009470:	1c56      	adds	r6, r2, #1
 8009472:	9619      	str	r6, [sp, #100]	@ 0x64
 8009474:	7852      	ldrb	r2, [r2, #1]
 8009476:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800947a:	f1be 0f09 	cmp.w	lr, #9
 800947e:	d939      	bls.n	80094f4 <_strtod_l+0x344>
 8009480:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009482:	1a76      	subs	r6, r6, r1
 8009484:	2e08      	cmp	r6, #8
 8009486:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800948a:	dc03      	bgt.n	8009494 <_strtod_l+0x2e4>
 800948c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800948e:	4588      	cmp	r8, r1
 8009490:	bfa8      	it	ge
 8009492:	4688      	movge	r8, r1
 8009494:	f1bc 0f00 	cmp.w	ip, #0
 8009498:	d001      	beq.n	800949e <_strtod_l+0x2ee>
 800949a:	f1c8 0800 	rsb	r8, r8, #0
 800949e:	2d00      	cmp	r5, #0
 80094a0:	d14e      	bne.n	8009540 <_strtod_l+0x390>
 80094a2:	9908      	ldr	r1, [sp, #32]
 80094a4:	4308      	orrs	r0, r1
 80094a6:	f47f aebc 	bne.w	8009222 <_strtod_l+0x72>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f47f aed4 	bne.w	8009258 <_strtod_l+0xa8>
 80094b0:	2a69      	cmp	r2, #105	@ 0x69
 80094b2:	d028      	beq.n	8009506 <_strtod_l+0x356>
 80094b4:	dc25      	bgt.n	8009502 <_strtod_l+0x352>
 80094b6:	2a49      	cmp	r2, #73	@ 0x49
 80094b8:	d025      	beq.n	8009506 <_strtod_l+0x356>
 80094ba:	2a4e      	cmp	r2, #78	@ 0x4e
 80094bc:	f47f aecc 	bne.w	8009258 <_strtod_l+0xa8>
 80094c0:	499a      	ldr	r1, [pc, #616]	@ (800972c <_strtod_l+0x57c>)
 80094c2:	a819      	add	r0, sp, #100	@ 0x64
 80094c4:	f001 fbb4 	bl	800ac30 <__match>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	f43f aec5 	beq.w	8009258 <_strtod_l+0xa8>
 80094ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	2b28      	cmp	r3, #40	@ 0x28
 80094d4:	d12e      	bne.n	8009534 <_strtod_l+0x384>
 80094d6:	4996      	ldr	r1, [pc, #600]	@ (8009730 <_strtod_l+0x580>)
 80094d8:	aa1c      	add	r2, sp, #112	@ 0x70
 80094da:	a819      	add	r0, sp, #100	@ 0x64
 80094dc:	f001 fbbc 	bl	800ac58 <__hexnan>
 80094e0:	2805      	cmp	r0, #5
 80094e2:	d127      	bne.n	8009534 <_strtod_l+0x384>
 80094e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094e6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80094ea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80094ee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80094f2:	e696      	b.n	8009222 <_strtod_l+0x72>
 80094f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80094f6:	fb08 2101 	mla	r1, r8, r1, r2
 80094fa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80094fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8009500:	e7b5      	b.n	800946e <_strtod_l+0x2be>
 8009502:	2a6e      	cmp	r2, #110	@ 0x6e
 8009504:	e7da      	b.n	80094bc <_strtod_l+0x30c>
 8009506:	498b      	ldr	r1, [pc, #556]	@ (8009734 <_strtod_l+0x584>)
 8009508:	a819      	add	r0, sp, #100	@ 0x64
 800950a:	f001 fb91 	bl	800ac30 <__match>
 800950e:	2800      	cmp	r0, #0
 8009510:	f43f aea2 	beq.w	8009258 <_strtod_l+0xa8>
 8009514:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009516:	4988      	ldr	r1, [pc, #544]	@ (8009738 <_strtod_l+0x588>)
 8009518:	3b01      	subs	r3, #1
 800951a:	a819      	add	r0, sp, #100	@ 0x64
 800951c:	9319      	str	r3, [sp, #100]	@ 0x64
 800951e:	f001 fb87 	bl	800ac30 <__match>
 8009522:	b910      	cbnz	r0, 800952a <_strtod_l+0x37a>
 8009524:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009526:	3301      	adds	r3, #1
 8009528:	9319      	str	r3, [sp, #100]	@ 0x64
 800952a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009748 <_strtod_l+0x598>
 800952e:	f04f 0a00 	mov.w	sl, #0
 8009532:	e676      	b.n	8009222 <_strtod_l+0x72>
 8009534:	4881      	ldr	r0, [pc, #516]	@ (800973c <_strtod_l+0x58c>)
 8009536:	f001 f8b7 	bl	800a6a8 <nan>
 800953a:	ec5b ab10 	vmov	sl, fp, d0
 800953e:	e670      	b.n	8009222 <_strtod_l+0x72>
 8009540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009542:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009544:	eba8 0303 	sub.w	r3, r8, r3
 8009548:	f1b9 0f00 	cmp.w	r9, #0
 800954c:	bf08      	it	eq
 800954e:	46a9      	moveq	r9, r5
 8009550:	2d10      	cmp	r5, #16
 8009552:	9309      	str	r3, [sp, #36]	@ 0x24
 8009554:	462c      	mov	r4, r5
 8009556:	bfa8      	it	ge
 8009558:	2410      	movge	r4, #16
 800955a:	f7f6 ffdb 	bl	8000514 <__aeabi_ui2d>
 800955e:	2d09      	cmp	r5, #9
 8009560:	4682      	mov	sl, r0
 8009562:	468b      	mov	fp, r1
 8009564:	dc13      	bgt.n	800958e <_strtod_l+0x3de>
 8009566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009568:	2b00      	cmp	r3, #0
 800956a:	f43f ae5a 	beq.w	8009222 <_strtod_l+0x72>
 800956e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009570:	dd78      	ble.n	8009664 <_strtod_l+0x4b4>
 8009572:	2b16      	cmp	r3, #22
 8009574:	dc5f      	bgt.n	8009636 <_strtod_l+0x486>
 8009576:	4972      	ldr	r1, [pc, #456]	@ (8009740 <_strtod_l+0x590>)
 8009578:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800957c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009580:	4652      	mov	r2, sl
 8009582:	465b      	mov	r3, fp
 8009584:	f7f7 f840 	bl	8000608 <__aeabi_dmul>
 8009588:	4682      	mov	sl, r0
 800958a:	468b      	mov	fp, r1
 800958c:	e649      	b.n	8009222 <_strtod_l+0x72>
 800958e:	4b6c      	ldr	r3, [pc, #432]	@ (8009740 <_strtod_l+0x590>)
 8009590:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009594:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009598:	f7f7 f836 	bl	8000608 <__aeabi_dmul>
 800959c:	4682      	mov	sl, r0
 800959e:	4638      	mov	r0, r7
 80095a0:	468b      	mov	fp, r1
 80095a2:	f7f6 ffb7 	bl	8000514 <__aeabi_ui2d>
 80095a6:	4602      	mov	r2, r0
 80095a8:	460b      	mov	r3, r1
 80095aa:	4650      	mov	r0, sl
 80095ac:	4659      	mov	r1, fp
 80095ae:	f7f6 fe75 	bl	800029c <__adddf3>
 80095b2:	2d0f      	cmp	r5, #15
 80095b4:	4682      	mov	sl, r0
 80095b6:	468b      	mov	fp, r1
 80095b8:	ddd5      	ble.n	8009566 <_strtod_l+0x3b6>
 80095ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095bc:	1b2c      	subs	r4, r5, r4
 80095be:	441c      	add	r4, r3
 80095c0:	2c00      	cmp	r4, #0
 80095c2:	f340 8093 	ble.w	80096ec <_strtod_l+0x53c>
 80095c6:	f014 030f 	ands.w	r3, r4, #15
 80095ca:	d00a      	beq.n	80095e2 <_strtod_l+0x432>
 80095cc:	495c      	ldr	r1, [pc, #368]	@ (8009740 <_strtod_l+0x590>)
 80095ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095d2:	4652      	mov	r2, sl
 80095d4:	465b      	mov	r3, fp
 80095d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095da:	f7f7 f815 	bl	8000608 <__aeabi_dmul>
 80095de:	4682      	mov	sl, r0
 80095e0:	468b      	mov	fp, r1
 80095e2:	f034 040f 	bics.w	r4, r4, #15
 80095e6:	d073      	beq.n	80096d0 <_strtod_l+0x520>
 80095e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80095ec:	dd49      	ble.n	8009682 <_strtod_l+0x4d2>
 80095ee:	2400      	movs	r4, #0
 80095f0:	46a0      	mov	r8, r4
 80095f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80095f4:	46a1      	mov	r9, r4
 80095f6:	9a05      	ldr	r2, [sp, #20]
 80095f8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009748 <_strtod_l+0x598>
 80095fc:	2322      	movs	r3, #34	@ 0x22
 80095fe:	6013      	str	r3, [r2, #0]
 8009600:	f04f 0a00 	mov.w	sl, #0
 8009604:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009606:	2b00      	cmp	r3, #0
 8009608:	f43f ae0b 	beq.w	8009222 <_strtod_l+0x72>
 800960c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800960e:	9805      	ldr	r0, [sp, #20]
 8009610:	f7ff f946 	bl	80088a0 <_Bfree>
 8009614:	9805      	ldr	r0, [sp, #20]
 8009616:	4649      	mov	r1, r9
 8009618:	f7ff f942 	bl	80088a0 <_Bfree>
 800961c:	9805      	ldr	r0, [sp, #20]
 800961e:	4641      	mov	r1, r8
 8009620:	f7ff f93e 	bl	80088a0 <_Bfree>
 8009624:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009626:	9805      	ldr	r0, [sp, #20]
 8009628:	f7ff f93a 	bl	80088a0 <_Bfree>
 800962c:	9805      	ldr	r0, [sp, #20]
 800962e:	4621      	mov	r1, r4
 8009630:	f7ff f936 	bl	80088a0 <_Bfree>
 8009634:	e5f5      	b.n	8009222 <_strtod_l+0x72>
 8009636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009638:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800963c:	4293      	cmp	r3, r2
 800963e:	dbbc      	blt.n	80095ba <_strtod_l+0x40a>
 8009640:	4c3f      	ldr	r4, [pc, #252]	@ (8009740 <_strtod_l+0x590>)
 8009642:	f1c5 050f 	rsb	r5, r5, #15
 8009646:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800964a:	4652      	mov	r2, sl
 800964c:	465b      	mov	r3, fp
 800964e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009652:	f7f6 ffd9 	bl	8000608 <__aeabi_dmul>
 8009656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009658:	1b5d      	subs	r5, r3, r5
 800965a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800965e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009662:	e78f      	b.n	8009584 <_strtod_l+0x3d4>
 8009664:	3316      	adds	r3, #22
 8009666:	dba8      	blt.n	80095ba <_strtod_l+0x40a>
 8009668:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800966a:	eba3 0808 	sub.w	r8, r3, r8
 800966e:	4b34      	ldr	r3, [pc, #208]	@ (8009740 <_strtod_l+0x590>)
 8009670:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009674:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009678:	4650      	mov	r0, sl
 800967a:	4659      	mov	r1, fp
 800967c:	f7f7 f8ee 	bl	800085c <__aeabi_ddiv>
 8009680:	e782      	b.n	8009588 <_strtod_l+0x3d8>
 8009682:	2300      	movs	r3, #0
 8009684:	4f2f      	ldr	r7, [pc, #188]	@ (8009744 <_strtod_l+0x594>)
 8009686:	1124      	asrs	r4, r4, #4
 8009688:	4650      	mov	r0, sl
 800968a:	4659      	mov	r1, fp
 800968c:	461e      	mov	r6, r3
 800968e:	2c01      	cmp	r4, #1
 8009690:	dc21      	bgt.n	80096d6 <_strtod_l+0x526>
 8009692:	b10b      	cbz	r3, 8009698 <_strtod_l+0x4e8>
 8009694:	4682      	mov	sl, r0
 8009696:	468b      	mov	fp, r1
 8009698:	492a      	ldr	r1, [pc, #168]	@ (8009744 <_strtod_l+0x594>)
 800969a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800969e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80096a2:	4652      	mov	r2, sl
 80096a4:	465b      	mov	r3, fp
 80096a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096aa:	f7f6 ffad 	bl	8000608 <__aeabi_dmul>
 80096ae:	4b26      	ldr	r3, [pc, #152]	@ (8009748 <_strtod_l+0x598>)
 80096b0:	460a      	mov	r2, r1
 80096b2:	400b      	ands	r3, r1
 80096b4:	4925      	ldr	r1, [pc, #148]	@ (800974c <_strtod_l+0x59c>)
 80096b6:	428b      	cmp	r3, r1
 80096b8:	4682      	mov	sl, r0
 80096ba:	d898      	bhi.n	80095ee <_strtod_l+0x43e>
 80096bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80096c0:	428b      	cmp	r3, r1
 80096c2:	bf86      	itte	hi
 80096c4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009750 <_strtod_l+0x5a0>
 80096c8:	f04f 3aff 	movhi.w	sl, #4294967295
 80096cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80096d0:	2300      	movs	r3, #0
 80096d2:	9308      	str	r3, [sp, #32]
 80096d4:	e076      	b.n	80097c4 <_strtod_l+0x614>
 80096d6:	07e2      	lsls	r2, r4, #31
 80096d8:	d504      	bpl.n	80096e4 <_strtod_l+0x534>
 80096da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096de:	f7f6 ff93 	bl	8000608 <__aeabi_dmul>
 80096e2:	2301      	movs	r3, #1
 80096e4:	3601      	adds	r6, #1
 80096e6:	1064      	asrs	r4, r4, #1
 80096e8:	3708      	adds	r7, #8
 80096ea:	e7d0      	b.n	800968e <_strtod_l+0x4de>
 80096ec:	d0f0      	beq.n	80096d0 <_strtod_l+0x520>
 80096ee:	4264      	negs	r4, r4
 80096f0:	f014 020f 	ands.w	r2, r4, #15
 80096f4:	d00a      	beq.n	800970c <_strtod_l+0x55c>
 80096f6:	4b12      	ldr	r3, [pc, #72]	@ (8009740 <_strtod_l+0x590>)
 80096f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096fc:	4650      	mov	r0, sl
 80096fe:	4659      	mov	r1, fp
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	f7f7 f8aa 	bl	800085c <__aeabi_ddiv>
 8009708:	4682      	mov	sl, r0
 800970a:	468b      	mov	fp, r1
 800970c:	1124      	asrs	r4, r4, #4
 800970e:	d0df      	beq.n	80096d0 <_strtod_l+0x520>
 8009710:	2c1f      	cmp	r4, #31
 8009712:	dd1f      	ble.n	8009754 <_strtod_l+0x5a4>
 8009714:	2400      	movs	r4, #0
 8009716:	46a0      	mov	r8, r4
 8009718:	940b      	str	r4, [sp, #44]	@ 0x2c
 800971a:	46a1      	mov	r9, r4
 800971c:	9a05      	ldr	r2, [sp, #20]
 800971e:	2322      	movs	r3, #34	@ 0x22
 8009720:	f04f 0a00 	mov.w	sl, #0
 8009724:	f04f 0b00 	mov.w	fp, #0
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	e76b      	b.n	8009604 <_strtod_l+0x454>
 800972c:	0800b055 	.word	0x0800b055
 8009730:	0800b320 	.word	0x0800b320
 8009734:	0800b04d 	.word	0x0800b04d
 8009738:	0800b084 	.word	0x0800b084
 800973c:	0800b1bd 	.word	0x0800b1bd
 8009740:	0800b258 	.word	0x0800b258
 8009744:	0800b230 	.word	0x0800b230
 8009748:	7ff00000 	.word	0x7ff00000
 800974c:	7ca00000 	.word	0x7ca00000
 8009750:	7fefffff 	.word	0x7fefffff
 8009754:	f014 0310 	ands.w	r3, r4, #16
 8009758:	bf18      	it	ne
 800975a:	236a      	movne	r3, #106	@ 0x6a
 800975c:	4ea9      	ldr	r6, [pc, #676]	@ (8009a04 <_strtod_l+0x854>)
 800975e:	9308      	str	r3, [sp, #32]
 8009760:	4650      	mov	r0, sl
 8009762:	4659      	mov	r1, fp
 8009764:	2300      	movs	r3, #0
 8009766:	07e7      	lsls	r7, r4, #31
 8009768:	d504      	bpl.n	8009774 <_strtod_l+0x5c4>
 800976a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800976e:	f7f6 ff4b 	bl	8000608 <__aeabi_dmul>
 8009772:	2301      	movs	r3, #1
 8009774:	1064      	asrs	r4, r4, #1
 8009776:	f106 0608 	add.w	r6, r6, #8
 800977a:	d1f4      	bne.n	8009766 <_strtod_l+0x5b6>
 800977c:	b10b      	cbz	r3, 8009782 <_strtod_l+0x5d2>
 800977e:	4682      	mov	sl, r0
 8009780:	468b      	mov	fp, r1
 8009782:	9b08      	ldr	r3, [sp, #32]
 8009784:	b1b3      	cbz	r3, 80097b4 <_strtod_l+0x604>
 8009786:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800978a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800978e:	2b00      	cmp	r3, #0
 8009790:	4659      	mov	r1, fp
 8009792:	dd0f      	ble.n	80097b4 <_strtod_l+0x604>
 8009794:	2b1f      	cmp	r3, #31
 8009796:	dd56      	ble.n	8009846 <_strtod_l+0x696>
 8009798:	2b34      	cmp	r3, #52	@ 0x34
 800979a:	bfde      	ittt	le
 800979c:	f04f 33ff 	movle.w	r3, #4294967295
 80097a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80097a4:	4093      	lslle	r3, r2
 80097a6:	f04f 0a00 	mov.w	sl, #0
 80097aa:	bfcc      	ite	gt
 80097ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80097b0:	ea03 0b01 	andle.w	fp, r3, r1
 80097b4:	2200      	movs	r2, #0
 80097b6:	2300      	movs	r3, #0
 80097b8:	4650      	mov	r0, sl
 80097ba:	4659      	mov	r1, fp
 80097bc:	f7f7 f98c 	bl	8000ad8 <__aeabi_dcmpeq>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d1a7      	bne.n	8009714 <_strtod_l+0x564>
 80097c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80097ca:	9805      	ldr	r0, [sp, #20]
 80097cc:	462b      	mov	r3, r5
 80097ce:	464a      	mov	r2, r9
 80097d0:	f7ff f8ce 	bl	8008970 <__s2b>
 80097d4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80097d6:	2800      	cmp	r0, #0
 80097d8:	f43f af09 	beq.w	80095ee <_strtod_l+0x43e>
 80097dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097e0:	2a00      	cmp	r2, #0
 80097e2:	eba3 0308 	sub.w	r3, r3, r8
 80097e6:	bfa8      	it	ge
 80097e8:	2300      	movge	r3, #0
 80097ea:	9312      	str	r3, [sp, #72]	@ 0x48
 80097ec:	2400      	movs	r4, #0
 80097ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80097f2:	9316      	str	r3, [sp, #88]	@ 0x58
 80097f4:	46a0      	mov	r8, r4
 80097f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097f8:	9805      	ldr	r0, [sp, #20]
 80097fa:	6859      	ldr	r1, [r3, #4]
 80097fc:	f7ff f810 	bl	8008820 <_Balloc>
 8009800:	4681      	mov	r9, r0
 8009802:	2800      	cmp	r0, #0
 8009804:	f43f aef7 	beq.w	80095f6 <_strtod_l+0x446>
 8009808:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800980a:	691a      	ldr	r2, [r3, #16]
 800980c:	3202      	adds	r2, #2
 800980e:	f103 010c 	add.w	r1, r3, #12
 8009812:	0092      	lsls	r2, r2, #2
 8009814:	300c      	adds	r0, #12
 8009816:	f000 ff37 	bl	800a688 <memcpy>
 800981a:	ec4b ab10 	vmov	d0, sl, fp
 800981e:	9805      	ldr	r0, [sp, #20]
 8009820:	aa1c      	add	r2, sp, #112	@ 0x70
 8009822:	a91b      	add	r1, sp, #108	@ 0x6c
 8009824:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009828:	f7ff fbd6 	bl	8008fd8 <__d2b>
 800982c:	901a      	str	r0, [sp, #104]	@ 0x68
 800982e:	2800      	cmp	r0, #0
 8009830:	f43f aee1 	beq.w	80095f6 <_strtod_l+0x446>
 8009834:	9805      	ldr	r0, [sp, #20]
 8009836:	2101      	movs	r1, #1
 8009838:	f7ff f930 	bl	8008a9c <__i2b>
 800983c:	4680      	mov	r8, r0
 800983e:	b948      	cbnz	r0, 8009854 <_strtod_l+0x6a4>
 8009840:	f04f 0800 	mov.w	r8, #0
 8009844:	e6d7      	b.n	80095f6 <_strtod_l+0x446>
 8009846:	f04f 32ff 	mov.w	r2, #4294967295
 800984a:	fa02 f303 	lsl.w	r3, r2, r3
 800984e:	ea03 0a0a 	and.w	sl, r3, sl
 8009852:	e7af      	b.n	80097b4 <_strtod_l+0x604>
 8009854:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009856:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009858:	2d00      	cmp	r5, #0
 800985a:	bfab      	itete	ge
 800985c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800985e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009860:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009862:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009864:	bfac      	ite	ge
 8009866:	18ef      	addge	r7, r5, r3
 8009868:	1b5e      	sublt	r6, r3, r5
 800986a:	9b08      	ldr	r3, [sp, #32]
 800986c:	1aed      	subs	r5, r5, r3
 800986e:	4415      	add	r5, r2
 8009870:	4b65      	ldr	r3, [pc, #404]	@ (8009a08 <_strtod_l+0x858>)
 8009872:	3d01      	subs	r5, #1
 8009874:	429d      	cmp	r5, r3
 8009876:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800987a:	da50      	bge.n	800991e <_strtod_l+0x76e>
 800987c:	1b5b      	subs	r3, r3, r5
 800987e:	2b1f      	cmp	r3, #31
 8009880:	eba2 0203 	sub.w	r2, r2, r3
 8009884:	f04f 0101 	mov.w	r1, #1
 8009888:	dc3d      	bgt.n	8009906 <_strtod_l+0x756>
 800988a:	fa01 f303 	lsl.w	r3, r1, r3
 800988e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009890:	2300      	movs	r3, #0
 8009892:	9310      	str	r3, [sp, #64]	@ 0x40
 8009894:	18bd      	adds	r5, r7, r2
 8009896:	9b08      	ldr	r3, [sp, #32]
 8009898:	42af      	cmp	r7, r5
 800989a:	4416      	add	r6, r2
 800989c:	441e      	add	r6, r3
 800989e:	463b      	mov	r3, r7
 80098a0:	bfa8      	it	ge
 80098a2:	462b      	movge	r3, r5
 80098a4:	42b3      	cmp	r3, r6
 80098a6:	bfa8      	it	ge
 80098a8:	4633      	movge	r3, r6
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	bfc2      	ittt	gt
 80098ae:	1aed      	subgt	r5, r5, r3
 80098b0:	1af6      	subgt	r6, r6, r3
 80098b2:	1aff      	subgt	r7, r7, r3
 80098b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	dd16      	ble.n	80098e8 <_strtod_l+0x738>
 80098ba:	4641      	mov	r1, r8
 80098bc:	9805      	ldr	r0, [sp, #20]
 80098be:	461a      	mov	r2, r3
 80098c0:	f7ff f9a4 	bl	8008c0c <__pow5mult>
 80098c4:	4680      	mov	r8, r0
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d0ba      	beq.n	8009840 <_strtod_l+0x690>
 80098ca:	4601      	mov	r1, r0
 80098cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80098ce:	9805      	ldr	r0, [sp, #20]
 80098d0:	f7ff f8fa 	bl	8008ac8 <__multiply>
 80098d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80098d6:	2800      	cmp	r0, #0
 80098d8:	f43f ae8d 	beq.w	80095f6 <_strtod_l+0x446>
 80098dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098de:	9805      	ldr	r0, [sp, #20]
 80098e0:	f7fe ffde 	bl	80088a0 <_Bfree>
 80098e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80098e8:	2d00      	cmp	r5, #0
 80098ea:	dc1d      	bgt.n	8009928 <_strtod_l+0x778>
 80098ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dd23      	ble.n	800993a <_strtod_l+0x78a>
 80098f2:	4649      	mov	r1, r9
 80098f4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80098f6:	9805      	ldr	r0, [sp, #20]
 80098f8:	f7ff f988 	bl	8008c0c <__pow5mult>
 80098fc:	4681      	mov	r9, r0
 80098fe:	b9e0      	cbnz	r0, 800993a <_strtod_l+0x78a>
 8009900:	f04f 0900 	mov.w	r9, #0
 8009904:	e677      	b.n	80095f6 <_strtod_l+0x446>
 8009906:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800990a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800990e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009912:	35e2      	adds	r5, #226	@ 0xe2
 8009914:	fa01 f305 	lsl.w	r3, r1, r5
 8009918:	9310      	str	r3, [sp, #64]	@ 0x40
 800991a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800991c:	e7ba      	b.n	8009894 <_strtod_l+0x6e4>
 800991e:	2300      	movs	r3, #0
 8009920:	9310      	str	r3, [sp, #64]	@ 0x40
 8009922:	2301      	movs	r3, #1
 8009924:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009926:	e7b5      	b.n	8009894 <_strtod_l+0x6e4>
 8009928:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800992a:	9805      	ldr	r0, [sp, #20]
 800992c:	462a      	mov	r2, r5
 800992e:	f7ff f9c7 	bl	8008cc0 <__lshift>
 8009932:	901a      	str	r0, [sp, #104]	@ 0x68
 8009934:	2800      	cmp	r0, #0
 8009936:	d1d9      	bne.n	80098ec <_strtod_l+0x73c>
 8009938:	e65d      	b.n	80095f6 <_strtod_l+0x446>
 800993a:	2e00      	cmp	r6, #0
 800993c:	dd07      	ble.n	800994e <_strtod_l+0x79e>
 800993e:	4649      	mov	r1, r9
 8009940:	9805      	ldr	r0, [sp, #20]
 8009942:	4632      	mov	r2, r6
 8009944:	f7ff f9bc 	bl	8008cc0 <__lshift>
 8009948:	4681      	mov	r9, r0
 800994a:	2800      	cmp	r0, #0
 800994c:	d0d8      	beq.n	8009900 <_strtod_l+0x750>
 800994e:	2f00      	cmp	r7, #0
 8009950:	dd08      	ble.n	8009964 <_strtod_l+0x7b4>
 8009952:	4641      	mov	r1, r8
 8009954:	9805      	ldr	r0, [sp, #20]
 8009956:	463a      	mov	r2, r7
 8009958:	f7ff f9b2 	bl	8008cc0 <__lshift>
 800995c:	4680      	mov	r8, r0
 800995e:	2800      	cmp	r0, #0
 8009960:	f43f ae49 	beq.w	80095f6 <_strtod_l+0x446>
 8009964:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009966:	9805      	ldr	r0, [sp, #20]
 8009968:	464a      	mov	r2, r9
 800996a:	f7ff fa31 	bl	8008dd0 <__mdiff>
 800996e:	4604      	mov	r4, r0
 8009970:	2800      	cmp	r0, #0
 8009972:	f43f ae40 	beq.w	80095f6 <_strtod_l+0x446>
 8009976:	68c3      	ldr	r3, [r0, #12]
 8009978:	930f      	str	r3, [sp, #60]	@ 0x3c
 800997a:	2300      	movs	r3, #0
 800997c:	60c3      	str	r3, [r0, #12]
 800997e:	4641      	mov	r1, r8
 8009980:	f7ff fa0a 	bl	8008d98 <__mcmp>
 8009984:	2800      	cmp	r0, #0
 8009986:	da45      	bge.n	8009a14 <_strtod_l+0x864>
 8009988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800998a:	ea53 030a 	orrs.w	r3, r3, sl
 800998e:	d16b      	bne.n	8009a68 <_strtod_l+0x8b8>
 8009990:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009994:	2b00      	cmp	r3, #0
 8009996:	d167      	bne.n	8009a68 <_strtod_l+0x8b8>
 8009998:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800999c:	0d1b      	lsrs	r3, r3, #20
 800999e:	051b      	lsls	r3, r3, #20
 80099a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80099a4:	d960      	bls.n	8009a68 <_strtod_l+0x8b8>
 80099a6:	6963      	ldr	r3, [r4, #20]
 80099a8:	b913      	cbnz	r3, 80099b0 <_strtod_l+0x800>
 80099aa:	6923      	ldr	r3, [r4, #16]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	dd5b      	ble.n	8009a68 <_strtod_l+0x8b8>
 80099b0:	4621      	mov	r1, r4
 80099b2:	2201      	movs	r2, #1
 80099b4:	9805      	ldr	r0, [sp, #20]
 80099b6:	f7ff f983 	bl	8008cc0 <__lshift>
 80099ba:	4641      	mov	r1, r8
 80099bc:	4604      	mov	r4, r0
 80099be:	f7ff f9eb 	bl	8008d98 <__mcmp>
 80099c2:	2800      	cmp	r0, #0
 80099c4:	dd50      	ble.n	8009a68 <_strtod_l+0x8b8>
 80099c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80099ca:	9a08      	ldr	r2, [sp, #32]
 80099cc:	0d1b      	lsrs	r3, r3, #20
 80099ce:	051b      	lsls	r3, r3, #20
 80099d0:	2a00      	cmp	r2, #0
 80099d2:	d06a      	beq.n	8009aaa <_strtod_l+0x8fa>
 80099d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80099d8:	d867      	bhi.n	8009aaa <_strtod_l+0x8fa>
 80099da:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80099de:	f67f ae9d 	bls.w	800971c <_strtod_l+0x56c>
 80099e2:	4b0a      	ldr	r3, [pc, #40]	@ (8009a0c <_strtod_l+0x85c>)
 80099e4:	4650      	mov	r0, sl
 80099e6:	4659      	mov	r1, fp
 80099e8:	2200      	movs	r2, #0
 80099ea:	f7f6 fe0d 	bl	8000608 <__aeabi_dmul>
 80099ee:	4b08      	ldr	r3, [pc, #32]	@ (8009a10 <_strtod_l+0x860>)
 80099f0:	400b      	ands	r3, r1
 80099f2:	4682      	mov	sl, r0
 80099f4:	468b      	mov	fp, r1
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f47f ae08 	bne.w	800960c <_strtod_l+0x45c>
 80099fc:	9a05      	ldr	r2, [sp, #20]
 80099fe:	2322      	movs	r3, #34	@ 0x22
 8009a00:	6013      	str	r3, [r2, #0]
 8009a02:	e603      	b.n	800960c <_strtod_l+0x45c>
 8009a04:	0800b348 	.word	0x0800b348
 8009a08:	fffffc02 	.word	0xfffffc02
 8009a0c:	39500000 	.word	0x39500000
 8009a10:	7ff00000 	.word	0x7ff00000
 8009a14:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009a18:	d165      	bne.n	8009ae6 <_strtod_l+0x936>
 8009a1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009a1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a20:	b35a      	cbz	r2, 8009a7a <_strtod_l+0x8ca>
 8009a22:	4a9f      	ldr	r2, [pc, #636]	@ (8009ca0 <_strtod_l+0xaf0>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d12b      	bne.n	8009a80 <_strtod_l+0x8d0>
 8009a28:	9b08      	ldr	r3, [sp, #32]
 8009a2a:	4651      	mov	r1, sl
 8009a2c:	b303      	cbz	r3, 8009a70 <_strtod_l+0x8c0>
 8009a2e:	4b9d      	ldr	r3, [pc, #628]	@ (8009ca4 <_strtod_l+0xaf4>)
 8009a30:	465a      	mov	r2, fp
 8009a32:	4013      	ands	r3, r2
 8009a34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009a38:	f04f 32ff 	mov.w	r2, #4294967295
 8009a3c:	d81b      	bhi.n	8009a76 <_strtod_l+0x8c6>
 8009a3e:	0d1b      	lsrs	r3, r3, #20
 8009a40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a44:	fa02 f303 	lsl.w	r3, r2, r3
 8009a48:	4299      	cmp	r1, r3
 8009a4a:	d119      	bne.n	8009a80 <_strtod_l+0x8d0>
 8009a4c:	4b96      	ldr	r3, [pc, #600]	@ (8009ca8 <_strtod_l+0xaf8>)
 8009a4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d102      	bne.n	8009a5a <_strtod_l+0x8aa>
 8009a54:	3101      	adds	r1, #1
 8009a56:	f43f adce 	beq.w	80095f6 <_strtod_l+0x446>
 8009a5a:	4b92      	ldr	r3, [pc, #584]	@ (8009ca4 <_strtod_l+0xaf4>)
 8009a5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a5e:	401a      	ands	r2, r3
 8009a60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009a64:	f04f 0a00 	mov.w	sl, #0
 8009a68:	9b08      	ldr	r3, [sp, #32]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1b9      	bne.n	80099e2 <_strtod_l+0x832>
 8009a6e:	e5cd      	b.n	800960c <_strtod_l+0x45c>
 8009a70:	f04f 33ff 	mov.w	r3, #4294967295
 8009a74:	e7e8      	b.n	8009a48 <_strtod_l+0x898>
 8009a76:	4613      	mov	r3, r2
 8009a78:	e7e6      	b.n	8009a48 <_strtod_l+0x898>
 8009a7a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a7e:	d0a2      	beq.n	80099c6 <_strtod_l+0x816>
 8009a80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a82:	b1db      	cbz	r3, 8009abc <_strtod_l+0x90c>
 8009a84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a86:	4213      	tst	r3, r2
 8009a88:	d0ee      	beq.n	8009a68 <_strtod_l+0x8b8>
 8009a8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a8c:	9a08      	ldr	r2, [sp, #32]
 8009a8e:	4650      	mov	r0, sl
 8009a90:	4659      	mov	r1, fp
 8009a92:	b1bb      	cbz	r3, 8009ac4 <_strtod_l+0x914>
 8009a94:	f7ff fb6e 	bl	8009174 <sulp>
 8009a98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a9c:	ec53 2b10 	vmov	r2, r3, d0
 8009aa0:	f7f6 fbfc 	bl	800029c <__adddf3>
 8009aa4:	4682      	mov	sl, r0
 8009aa6:	468b      	mov	fp, r1
 8009aa8:	e7de      	b.n	8009a68 <_strtod_l+0x8b8>
 8009aaa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009aae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009ab2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ab6:	f04f 3aff 	mov.w	sl, #4294967295
 8009aba:	e7d5      	b.n	8009a68 <_strtod_l+0x8b8>
 8009abc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009abe:	ea13 0f0a 	tst.w	r3, sl
 8009ac2:	e7e1      	b.n	8009a88 <_strtod_l+0x8d8>
 8009ac4:	f7ff fb56 	bl	8009174 <sulp>
 8009ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009acc:	ec53 2b10 	vmov	r2, r3, d0
 8009ad0:	f7f6 fbe2 	bl	8000298 <__aeabi_dsub>
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	4682      	mov	sl, r0
 8009ada:	468b      	mov	fp, r1
 8009adc:	f7f6 fffc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d0c1      	beq.n	8009a68 <_strtod_l+0x8b8>
 8009ae4:	e61a      	b.n	800971c <_strtod_l+0x56c>
 8009ae6:	4641      	mov	r1, r8
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f7ff facd 	bl	8009088 <__ratio>
 8009aee:	ec57 6b10 	vmov	r6, r7, d0
 8009af2:	2200      	movs	r2, #0
 8009af4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009af8:	4630      	mov	r0, r6
 8009afa:	4639      	mov	r1, r7
 8009afc:	f7f7 f800 	bl	8000b00 <__aeabi_dcmple>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	d06f      	beq.n	8009be4 <_strtod_l+0xa34>
 8009b04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d17a      	bne.n	8009c00 <_strtod_l+0xa50>
 8009b0a:	f1ba 0f00 	cmp.w	sl, #0
 8009b0e:	d158      	bne.n	8009bc2 <_strtod_l+0xa12>
 8009b10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d15a      	bne.n	8009bd0 <_strtod_l+0xa20>
 8009b1a:	4b64      	ldr	r3, [pc, #400]	@ (8009cac <_strtod_l+0xafc>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	4630      	mov	r0, r6
 8009b20:	4639      	mov	r1, r7
 8009b22:	f7f6 ffe3 	bl	8000aec <__aeabi_dcmplt>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d159      	bne.n	8009bde <_strtod_l+0xa2e>
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	4b60      	ldr	r3, [pc, #384]	@ (8009cb0 <_strtod_l+0xb00>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	f7f6 fd69 	bl	8000608 <__aeabi_dmul>
 8009b36:	4606      	mov	r6, r0
 8009b38:	460f      	mov	r7, r1
 8009b3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009b3e:	9606      	str	r6, [sp, #24]
 8009b40:	9307      	str	r3, [sp, #28]
 8009b42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b46:	4d57      	ldr	r5, [pc, #348]	@ (8009ca4 <_strtod_l+0xaf4>)
 8009b48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b4e:	401d      	ands	r5, r3
 8009b50:	4b58      	ldr	r3, [pc, #352]	@ (8009cb4 <_strtod_l+0xb04>)
 8009b52:	429d      	cmp	r5, r3
 8009b54:	f040 80b2 	bne.w	8009cbc <_strtod_l+0xb0c>
 8009b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009b5e:	ec4b ab10 	vmov	d0, sl, fp
 8009b62:	f7ff f9c9 	bl	8008ef8 <__ulp>
 8009b66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b6a:	ec51 0b10 	vmov	r0, r1, d0
 8009b6e:	f7f6 fd4b 	bl	8000608 <__aeabi_dmul>
 8009b72:	4652      	mov	r2, sl
 8009b74:	465b      	mov	r3, fp
 8009b76:	f7f6 fb91 	bl	800029c <__adddf3>
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4949      	ldr	r1, [pc, #292]	@ (8009ca4 <_strtod_l+0xaf4>)
 8009b7e:	4a4e      	ldr	r2, [pc, #312]	@ (8009cb8 <_strtod_l+0xb08>)
 8009b80:	4019      	ands	r1, r3
 8009b82:	4291      	cmp	r1, r2
 8009b84:	4682      	mov	sl, r0
 8009b86:	d942      	bls.n	8009c0e <_strtod_l+0xa5e>
 8009b88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b8a:	4b47      	ldr	r3, [pc, #284]	@ (8009ca8 <_strtod_l+0xaf8>)
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d103      	bne.n	8009b98 <_strtod_l+0x9e8>
 8009b90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b92:	3301      	adds	r3, #1
 8009b94:	f43f ad2f 	beq.w	80095f6 <_strtod_l+0x446>
 8009b98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009ca8 <_strtod_l+0xaf8>
 8009b9c:	f04f 3aff 	mov.w	sl, #4294967295
 8009ba0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ba2:	9805      	ldr	r0, [sp, #20]
 8009ba4:	f7fe fe7c 	bl	80088a0 <_Bfree>
 8009ba8:	9805      	ldr	r0, [sp, #20]
 8009baa:	4649      	mov	r1, r9
 8009bac:	f7fe fe78 	bl	80088a0 <_Bfree>
 8009bb0:	9805      	ldr	r0, [sp, #20]
 8009bb2:	4641      	mov	r1, r8
 8009bb4:	f7fe fe74 	bl	80088a0 <_Bfree>
 8009bb8:	9805      	ldr	r0, [sp, #20]
 8009bba:	4621      	mov	r1, r4
 8009bbc:	f7fe fe70 	bl	80088a0 <_Bfree>
 8009bc0:	e619      	b.n	80097f6 <_strtod_l+0x646>
 8009bc2:	f1ba 0f01 	cmp.w	sl, #1
 8009bc6:	d103      	bne.n	8009bd0 <_strtod_l+0xa20>
 8009bc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	f43f ada6 	beq.w	800971c <_strtod_l+0x56c>
 8009bd0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009c80 <_strtod_l+0xad0>
 8009bd4:	4f35      	ldr	r7, [pc, #212]	@ (8009cac <_strtod_l+0xafc>)
 8009bd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009bda:	2600      	movs	r6, #0
 8009bdc:	e7b1      	b.n	8009b42 <_strtod_l+0x992>
 8009bde:	4f34      	ldr	r7, [pc, #208]	@ (8009cb0 <_strtod_l+0xb00>)
 8009be0:	2600      	movs	r6, #0
 8009be2:	e7aa      	b.n	8009b3a <_strtod_l+0x98a>
 8009be4:	4b32      	ldr	r3, [pc, #200]	@ (8009cb0 <_strtod_l+0xb00>)
 8009be6:	4630      	mov	r0, r6
 8009be8:	4639      	mov	r1, r7
 8009bea:	2200      	movs	r2, #0
 8009bec:	f7f6 fd0c 	bl	8000608 <__aeabi_dmul>
 8009bf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	460f      	mov	r7, r1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d09f      	beq.n	8009b3a <_strtod_l+0x98a>
 8009bfa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009bfe:	e7a0      	b.n	8009b42 <_strtod_l+0x992>
 8009c00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009c88 <_strtod_l+0xad8>
 8009c04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c08:	ec57 6b17 	vmov	r6, r7, d7
 8009c0c:	e799      	b.n	8009b42 <_strtod_l+0x992>
 8009c0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009c12:	9b08      	ldr	r3, [sp, #32]
 8009c14:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1c1      	bne.n	8009ba0 <_strtod_l+0x9f0>
 8009c1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c20:	0d1b      	lsrs	r3, r3, #20
 8009c22:	051b      	lsls	r3, r3, #20
 8009c24:	429d      	cmp	r5, r3
 8009c26:	d1bb      	bne.n	8009ba0 <_strtod_l+0x9f0>
 8009c28:	4630      	mov	r0, r6
 8009c2a:	4639      	mov	r1, r7
 8009c2c:	f7f7 f84c 	bl	8000cc8 <__aeabi_d2lz>
 8009c30:	f7f6 fcbc 	bl	80005ac <__aeabi_l2d>
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	4630      	mov	r0, r6
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	f7f6 fb2c 	bl	8000298 <__aeabi_dsub>
 8009c40:	460b      	mov	r3, r1
 8009c42:	4602      	mov	r2, r0
 8009c44:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009c48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009c4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c4e:	ea46 060a 	orr.w	r6, r6, sl
 8009c52:	431e      	orrs	r6, r3
 8009c54:	d06f      	beq.n	8009d36 <_strtod_l+0xb86>
 8009c56:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c90 <_strtod_l+0xae0>)
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	f7f6 ff46 	bl	8000aec <__aeabi_dcmplt>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	f47f acd3 	bne.w	800960c <_strtod_l+0x45c>
 8009c66:	a30c      	add	r3, pc, #48	@ (adr r3, 8009c98 <_strtod_l+0xae8>)
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c70:	f7f6 ff5a 	bl	8000b28 <__aeabi_dcmpgt>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d093      	beq.n	8009ba0 <_strtod_l+0x9f0>
 8009c78:	e4c8      	b.n	800960c <_strtod_l+0x45c>
 8009c7a:	bf00      	nop
 8009c7c:	f3af 8000 	nop.w
 8009c80:	00000000 	.word	0x00000000
 8009c84:	bff00000 	.word	0xbff00000
 8009c88:	00000000 	.word	0x00000000
 8009c8c:	3ff00000 	.word	0x3ff00000
 8009c90:	94a03595 	.word	0x94a03595
 8009c94:	3fdfffff 	.word	0x3fdfffff
 8009c98:	35afe535 	.word	0x35afe535
 8009c9c:	3fe00000 	.word	0x3fe00000
 8009ca0:	000fffff 	.word	0x000fffff
 8009ca4:	7ff00000 	.word	0x7ff00000
 8009ca8:	7fefffff 	.word	0x7fefffff
 8009cac:	3ff00000 	.word	0x3ff00000
 8009cb0:	3fe00000 	.word	0x3fe00000
 8009cb4:	7fe00000 	.word	0x7fe00000
 8009cb8:	7c9fffff 	.word	0x7c9fffff
 8009cbc:	9b08      	ldr	r3, [sp, #32]
 8009cbe:	b323      	cbz	r3, 8009d0a <_strtod_l+0xb5a>
 8009cc0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009cc4:	d821      	bhi.n	8009d0a <_strtod_l+0xb5a>
 8009cc6:	a328      	add	r3, pc, #160	@ (adr r3, 8009d68 <_strtod_l+0xbb8>)
 8009cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ccc:	4630      	mov	r0, r6
 8009cce:	4639      	mov	r1, r7
 8009cd0:	f7f6 ff16 	bl	8000b00 <__aeabi_dcmple>
 8009cd4:	b1a0      	cbz	r0, 8009d00 <_strtod_l+0xb50>
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f7f6 ff6d 	bl	8000bb8 <__aeabi_d2uiz>
 8009cde:	2801      	cmp	r0, #1
 8009ce0:	bf38      	it	cc
 8009ce2:	2001      	movcc	r0, #1
 8009ce4:	f7f6 fc16 	bl	8000514 <__aeabi_ui2d>
 8009ce8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cea:	4606      	mov	r6, r0
 8009cec:	460f      	mov	r7, r1
 8009cee:	b9fb      	cbnz	r3, 8009d30 <_strtod_l+0xb80>
 8009cf0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cf4:	9014      	str	r0, [sp, #80]	@ 0x50
 8009cf6:	9315      	str	r3, [sp, #84]	@ 0x54
 8009cf8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009cfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009d02:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009d06:	1b5b      	subs	r3, r3, r5
 8009d08:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d0a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009d0e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009d12:	f7ff f8f1 	bl	8008ef8 <__ulp>
 8009d16:	4650      	mov	r0, sl
 8009d18:	ec53 2b10 	vmov	r2, r3, d0
 8009d1c:	4659      	mov	r1, fp
 8009d1e:	f7f6 fc73 	bl	8000608 <__aeabi_dmul>
 8009d22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009d26:	f7f6 fab9 	bl	800029c <__adddf3>
 8009d2a:	4682      	mov	sl, r0
 8009d2c:	468b      	mov	fp, r1
 8009d2e:	e770      	b.n	8009c12 <_strtod_l+0xa62>
 8009d30:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009d34:	e7e0      	b.n	8009cf8 <_strtod_l+0xb48>
 8009d36:	a30e      	add	r3, pc, #56	@ (adr r3, 8009d70 <_strtod_l+0xbc0>)
 8009d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3c:	f7f6 fed6 	bl	8000aec <__aeabi_dcmplt>
 8009d40:	e798      	b.n	8009c74 <_strtod_l+0xac4>
 8009d42:	2300      	movs	r3, #0
 8009d44:	930e      	str	r3, [sp, #56]	@ 0x38
 8009d46:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009d48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	f7ff ba6d 	b.w	800922a <_strtod_l+0x7a>
 8009d50:	2a65      	cmp	r2, #101	@ 0x65
 8009d52:	f43f ab68 	beq.w	8009426 <_strtod_l+0x276>
 8009d56:	2a45      	cmp	r2, #69	@ 0x45
 8009d58:	f43f ab65 	beq.w	8009426 <_strtod_l+0x276>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	f7ff bba0 	b.w	80094a2 <_strtod_l+0x2f2>
 8009d62:	bf00      	nop
 8009d64:	f3af 8000 	nop.w
 8009d68:	ffc00000 	.word	0xffc00000
 8009d6c:	41dfffff 	.word	0x41dfffff
 8009d70:	94a03595 	.word	0x94a03595
 8009d74:	3fcfffff 	.word	0x3fcfffff

08009d78 <_strtod_r>:
 8009d78:	4b01      	ldr	r3, [pc, #4]	@ (8009d80 <_strtod_r+0x8>)
 8009d7a:	f7ff ba19 	b.w	80091b0 <_strtod_l>
 8009d7e:	bf00      	nop
 8009d80:	20000068 	.word	0x20000068

08009d84 <_strtol_l.isra.0>:
 8009d84:	2b24      	cmp	r3, #36	@ 0x24
 8009d86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d8a:	4686      	mov	lr, r0
 8009d8c:	4690      	mov	r8, r2
 8009d8e:	d801      	bhi.n	8009d94 <_strtol_l.isra.0+0x10>
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d106      	bne.n	8009da2 <_strtol_l.isra.0+0x1e>
 8009d94:	f7fd fdb6 	bl	8007904 <__errno>
 8009d98:	2316      	movs	r3, #22
 8009d9a:	6003      	str	r3, [r0, #0]
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da2:	4834      	ldr	r0, [pc, #208]	@ (8009e74 <_strtol_l.isra.0+0xf0>)
 8009da4:	460d      	mov	r5, r1
 8009da6:	462a      	mov	r2, r5
 8009da8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dac:	5d06      	ldrb	r6, [r0, r4]
 8009dae:	f016 0608 	ands.w	r6, r6, #8
 8009db2:	d1f8      	bne.n	8009da6 <_strtol_l.isra.0+0x22>
 8009db4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009db6:	d110      	bne.n	8009dda <_strtol_l.isra.0+0x56>
 8009db8:	782c      	ldrb	r4, [r5, #0]
 8009dba:	2601      	movs	r6, #1
 8009dbc:	1c95      	adds	r5, r2, #2
 8009dbe:	f033 0210 	bics.w	r2, r3, #16
 8009dc2:	d115      	bne.n	8009df0 <_strtol_l.isra.0+0x6c>
 8009dc4:	2c30      	cmp	r4, #48	@ 0x30
 8009dc6:	d10d      	bne.n	8009de4 <_strtol_l.isra.0+0x60>
 8009dc8:	782a      	ldrb	r2, [r5, #0]
 8009dca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009dce:	2a58      	cmp	r2, #88	@ 0x58
 8009dd0:	d108      	bne.n	8009de4 <_strtol_l.isra.0+0x60>
 8009dd2:	786c      	ldrb	r4, [r5, #1]
 8009dd4:	3502      	adds	r5, #2
 8009dd6:	2310      	movs	r3, #16
 8009dd8:	e00a      	b.n	8009df0 <_strtol_l.isra.0+0x6c>
 8009dda:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ddc:	bf04      	itt	eq
 8009dde:	782c      	ldrbeq	r4, [r5, #0]
 8009de0:	1c95      	addeq	r5, r2, #2
 8009de2:	e7ec      	b.n	8009dbe <_strtol_l.isra.0+0x3a>
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1f6      	bne.n	8009dd6 <_strtol_l.isra.0+0x52>
 8009de8:	2c30      	cmp	r4, #48	@ 0x30
 8009dea:	bf14      	ite	ne
 8009dec:	230a      	movne	r3, #10
 8009dee:	2308      	moveq	r3, #8
 8009df0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009df4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009df8:	2200      	movs	r2, #0
 8009dfa:	fbbc f9f3 	udiv	r9, ip, r3
 8009dfe:	4610      	mov	r0, r2
 8009e00:	fb03 ca19 	mls	sl, r3, r9, ip
 8009e04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009e08:	2f09      	cmp	r7, #9
 8009e0a:	d80f      	bhi.n	8009e2c <_strtol_l.isra.0+0xa8>
 8009e0c:	463c      	mov	r4, r7
 8009e0e:	42a3      	cmp	r3, r4
 8009e10:	dd1b      	ble.n	8009e4a <_strtol_l.isra.0+0xc6>
 8009e12:	1c57      	adds	r7, r2, #1
 8009e14:	d007      	beq.n	8009e26 <_strtol_l.isra.0+0xa2>
 8009e16:	4581      	cmp	r9, r0
 8009e18:	d314      	bcc.n	8009e44 <_strtol_l.isra.0+0xc0>
 8009e1a:	d101      	bne.n	8009e20 <_strtol_l.isra.0+0x9c>
 8009e1c:	45a2      	cmp	sl, r4
 8009e1e:	db11      	blt.n	8009e44 <_strtol_l.isra.0+0xc0>
 8009e20:	fb00 4003 	mla	r0, r0, r3, r4
 8009e24:	2201      	movs	r2, #1
 8009e26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e2a:	e7eb      	b.n	8009e04 <_strtol_l.isra.0+0x80>
 8009e2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009e30:	2f19      	cmp	r7, #25
 8009e32:	d801      	bhi.n	8009e38 <_strtol_l.isra.0+0xb4>
 8009e34:	3c37      	subs	r4, #55	@ 0x37
 8009e36:	e7ea      	b.n	8009e0e <_strtol_l.isra.0+0x8a>
 8009e38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009e3c:	2f19      	cmp	r7, #25
 8009e3e:	d804      	bhi.n	8009e4a <_strtol_l.isra.0+0xc6>
 8009e40:	3c57      	subs	r4, #87	@ 0x57
 8009e42:	e7e4      	b.n	8009e0e <_strtol_l.isra.0+0x8a>
 8009e44:	f04f 32ff 	mov.w	r2, #4294967295
 8009e48:	e7ed      	b.n	8009e26 <_strtol_l.isra.0+0xa2>
 8009e4a:	1c53      	adds	r3, r2, #1
 8009e4c:	d108      	bne.n	8009e60 <_strtol_l.isra.0+0xdc>
 8009e4e:	2322      	movs	r3, #34	@ 0x22
 8009e50:	f8ce 3000 	str.w	r3, [lr]
 8009e54:	4660      	mov	r0, ip
 8009e56:	f1b8 0f00 	cmp.w	r8, #0
 8009e5a:	d0a0      	beq.n	8009d9e <_strtol_l.isra.0+0x1a>
 8009e5c:	1e69      	subs	r1, r5, #1
 8009e5e:	e006      	b.n	8009e6e <_strtol_l.isra.0+0xea>
 8009e60:	b106      	cbz	r6, 8009e64 <_strtol_l.isra.0+0xe0>
 8009e62:	4240      	negs	r0, r0
 8009e64:	f1b8 0f00 	cmp.w	r8, #0
 8009e68:	d099      	beq.n	8009d9e <_strtol_l.isra.0+0x1a>
 8009e6a:	2a00      	cmp	r2, #0
 8009e6c:	d1f6      	bne.n	8009e5c <_strtol_l.isra.0+0xd8>
 8009e6e:	f8c8 1000 	str.w	r1, [r8]
 8009e72:	e794      	b.n	8009d9e <_strtol_l.isra.0+0x1a>
 8009e74:	0800b371 	.word	0x0800b371

08009e78 <_strtol_r>:
 8009e78:	f7ff bf84 	b.w	8009d84 <_strtol_l.isra.0>

08009e7c <__ssputs_r>:
 8009e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e80:	688e      	ldr	r6, [r1, #8]
 8009e82:	461f      	mov	r7, r3
 8009e84:	42be      	cmp	r6, r7
 8009e86:	680b      	ldr	r3, [r1, #0]
 8009e88:	4682      	mov	sl, r0
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	4690      	mov	r8, r2
 8009e8e:	d82d      	bhi.n	8009eec <__ssputs_r+0x70>
 8009e90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e98:	d026      	beq.n	8009ee8 <__ssputs_r+0x6c>
 8009e9a:	6965      	ldr	r5, [r4, #20]
 8009e9c:	6909      	ldr	r1, [r1, #16]
 8009e9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ea2:	eba3 0901 	sub.w	r9, r3, r1
 8009ea6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009eaa:	1c7b      	adds	r3, r7, #1
 8009eac:	444b      	add	r3, r9
 8009eae:	106d      	asrs	r5, r5, #1
 8009eb0:	429d      	cmp	r5, r3
 8009eb2:	bf38      	it	cc
 8009eb4:	461d      	movcc	r5, r3
 8009eb6:	0553      	lsls	r3, r2, #21
 8009eb8:	d527      	bpl.n	8009f0a <__ssputs_r+0x8e>
 8009eba:	4629      	mov	r1, r5
 8009ebc:	f7fe fc24 	bl	8008708 <_malloc_r>
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	b360      	cbz	r0, 8009f1e <__ssputs_r+0xa2>
 8009ec4:	6921      	ldr	r1, [r4, #16]
 8009ec6:	464a      	mov	r2, r9
 8009ec8:	f000 fbde 	bl	800a688 <memcpy>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ed6:	81a3      	strh	r3, [r4, #12]
 8009ed8:	6126      	str	r6, [r4, #16]
 8009eda:	6165      	str	r5, [r4, #20]
 8009edc:	444e      	add	r6, r9
 8009ede:	eba5 0509 	sub.w	r5, r5, r9
 8009ee2:	6026      	str	r6, [r4, #0]
 8009ee4:	60a5      	str	r5, [r4, #8]
 8009ee6:	463e      	mov	r6, r7
 8009ee8:	42be      	cmp	r6, r7
 8009eea:	d900      	bls.n	8009eee <__ssputs_r+0x72>
 8009eec:	463e      	mov	r6, r7
 8009eee:	6820      	ldr	r0, [r4, #0]
 8009ef0:	4632      	mov	r2, r6
 8009ef2:	4641      	mov	r1, r8
 8009ef4:	f000 fb6a 	bl	800a5cc <memmove>
 8009ef8:	68a3      	ldr	r3, [r4, #8]
 8009efa:	1b9b      	subs	r3, r3, r6
 8009efc:	60a3      	str	r3, [r4, #8]
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	4433      	add	r3, r6
 8009f02:	6023      	str	r3, [r4, #0]
 8009f04:	2000      	movs	r0, #0
 8009f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0a:	462a      	mov	r2, r5
 8009f0c:	f000 ff51 	bl	800adb2 <_realloc_r>
 8009f10:	4606      	mov	r6, r0
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d1e0      	bne.n	8009ed8 <__ssputs_r+0x5c>
 8009f16:	6921      	ldr	r1, [r4, #16]
 8009f18:	4650      	mov	r0, sl
 8009f1a:	f7fe fb81 	bl	8008620 <_free_r>
 8009f1e:	230c      	movs	r3, #12
 8009f20:	f8ca 3000 	str.w	r3, [sl]
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f2a:	81a3      	strh	r3, [r4, #12]
 8009f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f30:	e7e9      	b.n	8009f06 <__ssputs_r+0x8a>
	...

08009f34 <_svfiprintf_r>:
 8009f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f38:	4698      	mov	r8, r3
 8009f3a:	898b      	ldrh	r3, [r1, #12]
 8009f3c:	061b      	lsls	r3, r3, #24
 8009f3e:	b09d      	sub	sp, #116	@ 0x74
 8009f40:	4607      	mov	r7, r0
 8009f42:	460d      	mov	r5, r1
 8009f44:	4614      	mov	r4, r2
 8009f46:	d510      	bpl.n	8009f6a <_svfiprintf_r+0x36>
 8009f48:	690b      	ldr	r3, [r1, #16]
 8009f4a:	b973      	cbnz	r3, 8009f6a <_svfiprintf_r+0x36>
 8009f4c:	2140      	movs	r1, #64	@ 0x40
 8009f4e:	f7fe fbdb 	bl	8008708 <_malloc_r>
 8009f52:	6028      	str	r0, [r5, #0]
 8009f54:	6128      	str	r0, [r5, #16]
 8009f56:	b930      	cbnz	r0, 8009f66 <_svfiprintf_r+0x32>
 8009f58:	230c      	movs	r3, #12
 8009f5a:	603b      	str	r3, [r7, #0]
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f60:	b01d      	add	sp, #116	@ 0x74
 8009f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f66:	2340      	movs	r3, #64	@ 0x40
 8009f68:	616b      	str	r3, [r5, #20]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f6e:	2320      	movs	r3, #32
 8009f70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f78:	2330      	movs	r3, #48	@ 0x30
 8009f7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a118 <_svfiprintf_r+0x1e4>
 8009f7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f82:	f04f 0901 	mov.w	r9, #1
 8009f86:	4623      	mov	r3, r4
 8009f88:	469a      	mov	sl, r3
 8009f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f8e:	b10a      	cbz	r2, 8009f94 <_svfiprintf_r+0x60>
 8009f90:	2a25      	cmp	r2, #37	@ 0x25
 8009f92:	d1f9      	bne.n	8009f88 <_svfiprintf_r+0x54>
 8009f94:	ebba 0b04 	subs.w	fp, sl, r4
 8009f98:	d00b      	beq.n	8009fb2 <_svfiprintf_r+0x7e>
 8009f9a:	465b      	mov	r3, fp
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f7ff ff6b 	bl	8009e7c <__ssputs_r>
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	f000 80a7 	beq.w	800a0fa <_svfiprintf_r+0x1c6>
 8009fac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fae:	445a      	add	r2, fp
 8009fb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f000 809f 	beq.w	800a0fa <_svfiprintf_r+0x1c6>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fc6:	f10a 0a01 	add.w	sl, sl, #1
 8009fca:	9304      	str	r3, [sp, #16]
 8009fcc:	9307      	str	r3, [sp, #28]
 8009fce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fd4:	4654      	mov	r4, sl
 8009fd6:	2205      	movs	r2, #5
 8009fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fdc:	484e      	ldr	r0, [pc, #312]	@ (800a118 <_svfiprintf_r+0x1e4>)
 8009fde:	f7f6 f8ff 	bl	80001e0 <memchr>
 8009fe2:	9a04      	ldr	r2, [sp, #16]
 8009fe4:	b9d8      	cbnz	r0, 800a01e <_svfiprintf_r+0xea>
 8009fe6:	06d0      	lsls	r0, r2, #27
 8009fe8:	bf44      	itt	mi
 8009fea:	2320      	movmi	r3, #32
 8009fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ff0:	0711      	lsls	r1, r2, #28
 8009ff2:	bf44      	itt	mi
 8009ff4:	232b      	movmi	r3, #43	@ 0x2b
 8009ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8009ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 800a000:	d015      	beq.n	800a02e <_svfiprintf_r+0xfa>
 800a002:	9a07      	ldr	r2, [sp, #28]
 800a004:	4654      	mov	r4, sl
 800a006:	2000      	movs	r0, #0
 800a008:	f04f 0c0a 	mov.w	ip, #10
 800a00c:	4621      	mov	r1, r4
 800a00e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a012:	3b30      	subs	r3, #48	@ 0x30
 800a014:	2b09      	cmp	r3, #9
 800a016:	d94b      	bls.n	800a0b0 <_svfiprintf_r+0x17c>
 800a018:	b1b0      	cbz	r0, 800a048 <_svfiprintf_r+0x114>
 800a01a:	9207      	str	r2, [sp, #28]
 800a01c:	e014      	b.n	800a048 <_svfiprintf_r+0x114>
 800a01e:	eba0 0308 	sub.w	r3, r0, r8
 800a022:	fa09 f303 	lsl.w	r3, r9, r3
 800a026:	4313      	orrs	r3, r2
 800a028:	9304      	str	r3, [sp, #16]
 800a02a:	46a2      	mov	sl, r4
 800a02c:	e7d2      	b.n	8009fd4 <_svfiprintf_r+0xa0>
 800a02e:	9b03      	ldr	r3, [sp, #12]
 800a030:	1d19      	adds	r1, r3, #4
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	9103      	str	r1, [sp, #12]
 800a036:	2b00      	cmp	r3, #0
 800a038:	bfbb      	ittet	lt
 800a03a:	425b      	neglt	r3, r3
 800a03c:	f042 0202 	orrlt.w	r2, r2, #2
 800a040:	9307      	strge	r3, [sp, #28]
 800a042:	9307      	strlt	r3, [sp, #28]
 800a044:	bfb8      	it	lt
 800a046:	9204      	strlt	r2, [sp, #16]
 800a048:	7823      	ldrb	r3, [r4, #0]
 800a04a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a04c:	d10a      	bne.n	800a064 <_svfiprintf_r+0x130>
 800a04e:	7863      	ldrb	r3, [r4, #1]
 800a050:	2b2a      	cmp	r3, #42	@ 0x2a
 800a052:	d132      	bne.n	800a0ba <_svfiprintf_r+0x186>
 800a054:	9b03      	ldr	r3, [sp, #12]
 800a056:	1d1a      	adds	r2, r3, #4
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	9203      	str	r2, [sp, #12]
 800a05c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a060:	3402      	adds	r4, #2
 800a062:	9305      	str	r3, [sp, #20]
 800a064:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a128 <_svfiprintf_r+0x1f4>
 800a068:	7821      	ldrb	r1, [r4, #0]
 800a06a:	2203      	movs	r2, #3
 800a06c:	4650      	mov	r0, sl
 800a06e:	f7f6 f8b7 	bl	80001e0 <memchr>
 800a072:	b138      	cbz	r0, 800a084 <_svfiprintf_r+0x150>
 800a074:	9b04      	ldr	r3, [sp, #16]
 800a076:	eba0 000a 	sub.w	r0, r0, sl
 800a07a:	2240      	movs	r2, #64	@ 0x40
 800a07c:	4082      	lsls	r2, r0
 800a07e:	4313      	orrs	r3, r2
 800a080:	3401      	adds	r4, #1
 800a082:	9304      	str	r3, [sp, #16]
 800a084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a088:	4824      	ldr	r0, [pc, #144]	@ (800a11c <_svfiprintf_r+0x1e8>)
 800a08a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a08e:	2206      	movs	r2, #6
 800a090:	f7f6 f8a6 	bl	80001e0 <memchr>
 800a094:	2800      	cmp	r0, #0
 800a096:	d036      	beq.n	800a106 <_svfiprintf_r+0x1d2>
 800a098:	4b21      	ldr	r3, [pc, #132]	@ (800a120 <_svfiprintf_r+0x1ec>)
 800a09a:	bb1b      	cbnz	r3, 800a0e4 <_svfiprintf_r+0x1b0>
 800a09c:	9b03      	ldr	r3, [sp, #12]
 800a09e:	3307      	adds	r3, #7
 800a0a0:	f023 0307 	bic.w	r3, r3, #7
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	9303      	str	r3, [sp, #12]
 800a0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0aa:	4433      	add	r3, r6
 800a0ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0ae:	e76a      	b.n	8009f86 <_svfiprintf_r+0x52>
 800a0b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0b4:	460c      	mov	r4, r1
 800a0b6:	2001      	movs	r0, #1
 800a0b8:	e7a8      	b.n	800a00c <_svfiprintf_r+0xd8>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	3401      	adds	r4, #1
 800a0be:	9305      	str	r3, [sp, #20]
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	f04f 0c0a 	mov.w	ip, #10
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0cc:	3a30      	subs	r2, #48	@ 0x30
 800a0ce:	2a09      	cmp	r2, #9
 800a0d0:	d903      	bls.n	800a0da <_svfiprintf_r+0x1a6>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0c6      	beq.n	800a064 <_svfiprintf_r+0x130>
 800a0d6:	9105      	str	r1, [sp, #20]
 800a0d8:	e7c4      	b.n	800a064 <_svfiprintf_r+0x130>
 800a0da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0de:	4604      	mov	r4, r0
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e7f0      	b.n	800a0c6 <_svfiprintf_r+0x192>
 800a0e4:	ab03      	add	r3, sp, #12
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	462a      	mov	r2, r5
 800a0ea:	4b0e      	ldr	r3, [pc, #56]	@ (800a124 <_svfiprintf_r+0x1f0>)
 800a0ec:	a904      	add	r1, sp, #16
 800a0ee:	4638      	mov	r0, r7
 800a0f0:	f7fc fbc6 	bl	8006880 <_printf_float>
 800a0f4:	1c42      	adds	r2, r0, #1
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	d1d6      	bne.n	800a0a8 <_svfiprintf_r+0x174>
 800a0fa:	89ab      	ldrh	r3, [r5, #12]
 800a0fc:	065b      	lsls	r3, r3, #25
 800a0fe:	f53f af2d 	bmi.w	8009f5c <_svfiprintf_r+0x28>
 800a102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a104:	e72c      	b.n	8009f60 <_svfiprintf_r+0x2c>
 800a106:	ab03      	add	r3, sp, #12
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	462a      	mov	r2, r5
 800a10c:	4b05      	ldr	r3, [pc, #20]	@ (800a124 <_svfiprintf_r+0x1f0>)
 800a10e:	a904      	add	r1, sp, #16
 800a110:	4638      	mov	r0, r7
 800a112:	f7fc fe4d 	bl	8006db0 <_printf_i>
 800a116:	e7ed      	b.n	800a0f4 <_svfiprintf_r+0x1c0>
 800a118:	0800b169 	.word	0x0800b169
 800a11c:	0800b173 	.word	0x0800b173
 800a120:	08006881 	.word	0x08006881
 800a124:	08009e7d 	.word	0x08009e7d
 800a128:	0800b16f 	.word	0x0800b16f

0800a12c <__sfputc_r>:
 800a12c:	6893      	ldr	r3, [r2, #8]
 800a12e:	3b01      	subs	r3, #1
 800a130:	2b00      	cmp	r3, #0
 800a132:	b410      	push	{r4}
 800a134:	6093      	str	r3, [r2, #8]
 800a136:	da08      	bge.n	800a14a <__sfputc_r+0x1e>
 800a138:	6994      	ldr	r4, [r2, #24]
 800a13a:	42a3      	cmp	r3, r4
 800a13c:	db01      	blt.n	800a142 <__sfputc_r+0x16>
 800a13e:	290a      	cmp	r1, #10
 800a140:	d103      	bne.n	800a14a <__sfputc_r+0x1e>
 800a142:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a146:	f7fd baf6 	b.w	8007736 <__swbuf_r>
 800a14a:	6813      	ldr	r3, [r2, #0]
 800a14c:	1c58      	adds	r0, r3, #1
 800a14e:	6010      	str	r0, [r2, #0]
 800a150:	7019      	strb	r1, [r3, #0]
 800a152:	4608      	mov	r0, r1
 800a154:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <__sfputs_r>:
 800a15a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15c:	4606      	mov	r6, r0
 800a15e:	460f      	mov	r7, r1
 800a160:	4614      	mov	r4, r2
 800a162:	18d5      	adds	r5, r2, r3
 800a164:	42ac      	cmp	r4, r5
 800a166:	d101      	bne.n	800a16c <__sfputs_r+0x12>
 800a168:	2000      	movs	r0, #0
 800a16a:	e007      	b.n	800a17c <__sfputs_r+0x22>
 800a16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a170:	463a      	mov	r2, r7
 800a172:	4630      	mov	r0, r6
 800a174:	f7ff ffda 	bl	800a12c <__sfputc_r>
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	d1f3      	bne.n	800a164 <__sfputs_r+0xa>
 800a17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a180 <_vfiprintf_r>:
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	460d      	mov	r5, r1
 800a186:	b09d      	sub	sp, #116	@ 0x74
 800a188:	4614      	mov	r4, r2
 800a18a:	4698      	mov	r8, r3
 800a18c:	4606      	mov	r6, r0
 800a18e:	b118      	cbz	r0, 800a198 <_vfiprintf_r+0x18>
 800a190:	6a03      	ldr	r3, [r0, #32]
 800a192:	b90b      	cbnz	r3, 800a198 <_vfiprintf_r+0x18>
 800a194:	f7fd f9c4 	bl	8007520 <__sinit>
 800a198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a19a:	07d9      	lsls	r1, r3, #31
 800a19c:	d405      	bmi.n	800a1aa <_vfiprintf_r+0x2a>
 800a19e:	89ab      	ldrh	r3, [r5, #12]
 800a1a0:	059a      	lsls	r2, r3, #22
 800a1a2:	d402      	bmi.n	800a1aa <_vfiprintf_r+0x2a>
 800a1a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1a6:	f7fd fbd8 	bl	800795a <__retarget_lock_acquire_recursive>
 800a1aa:	89ab      	ldrh	r3, [r5, #12]
 800a1ac:	071b      	lsls	r3, r3, #28
 800a1ae:	d501      	bpl.n	800a1b4 <_vfiprintf_r+0x34>
 800a1b0:	692b      	ldr	r3, [r5, #16]
 800a1b2:	b99b      	cbnz	r3, 800a1dc <_vfiprintf_r+0x5c>
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f7fd fafc 	bl	80077b4 <__swsetup_r>
 800a1bc:	b170      	cbz	r0, 800a1dc <_vfiprintf_r+0x5c>
 800a1be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1c0:	07dc      	lsls	r4, r3, #31
 800a1c2:	d504      	bpl.n	800a1ce <_vfiprintf_r+0x4e>
 800a1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c8:	b01d      	add	sp, #116	@ 0x74
 800a1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ce:	89ab      	ldrh	r3, [r5, #12]
 800a1d0:	0598      	lsls	r0, r3, #22
 800a1d2:	d4f7      	bmi.n	800a1c4 <_vfiprintf_r+0x44>
 800a1d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1d6:	f7fd fbc1 	bl	800795c <__retarget_lock_release_recursive>
 800a1da:	e7f3      	b.n	800a1c4 <_vfiprintf_r+0x44>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1e0:	2320      	movs	r3, #32
 800a1e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1ea:	2330      	movs	r3, #48	@ 0x30
 800a1ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a39c <_vfiprintf_r+0x21c>
 800a1f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1f4:	f04f 0901 	mov.w	r9, #1
 800a1f8:	4623      	mov	r3, r4
 800a1fa:	469a      	mov	sl, r3
 800a1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a200:	b10a      	cbz	r2, 800a206 <_vfiprintf_r+0x86>
 800a202:	2a25      	cmp	r2, #37	@ 0x25
 800a204:	d1f9      	bne.n	800a1fa <_vfiprintf_r+0x7a>
 800a206:	ebba 0b04 	subs.w	fp, sl, r4
 800a20a:	d00b      	beq.n	800a224 <_vfiprintf_r+0xa4>
 800a20c:	465b      	mov	r3, fp
 800a20e:	4622      	mov	r2, r4
 800a210:	4629      	mov	r1, r5
 800a212:	4630      	mov	r0, r6
 800a214:	f7ff ffa1 	bl	800a15a <__sfputs_r>
 800a218:	3001      	adds	r0, #1
 800a21a:	f000 80a7 	beq.w	800a36c <_vfiprintf_r+0x1ec>
 800a21e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a220:	445a      	add	r2, fp
 800a222:	9209      	str	r2, [sp, #36]	@ 0x24
 800a224:	f89a 3000 	ldrb.w	r3, [sl]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 809f 	beq.w	800a36c <_vfiprintf_r+0x1ec>
 800a22e:	2300      	movs	r3, #0
 800a230:	f04f 32ff 	mov.w	r2, #4294967295
 800a234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a238:	f10a 0a01 	add.w	sl, sl, #1
 800a23c:	9304      	str	r3, [sp, #16]
 800a23e:	9307      	str	r3, [sp, #28]
 800a240:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a244:	931a      	str	r3, [sp, #104]	@ 0x68
 800a246:	4654      	mov	r4, sl
 800a248:	2205      	movs	r2, #5
 800a24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a24e:	4853      	ldr	r0, [pc, #332]	@ (800a39c <_vfiprintf_r+0x21c>)
 800a250:	f7f5 ffc6 	bl	80001e0 <memchr>
 800a254:	9a04      	ldr	r2, [sp, #16]
 800a256:	b9d8      	cbnz	r0, 800a290 <_vfiprintf_r+0x110>
 800a258:	06d1      	lsls	r1, r2, #27
 800a25a:	bf44      	itt	mi
 800a25c:	2320      	movmi	r3, #32
 800a25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a262:	0713      	lsls	r3, r2, #28
 800a264:	bf44      	itt	mi
 800a266:	232b      	movmi	r3, #43	@ 0x2b
 800a268:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a26c:	f89a 3000 	ldrb.w	r3, [sl]
 800a270:	2b2a      	cmp	r3, #42	@ 0x2a
 800a272:	d015      	beq.n	800a2a0 <_vfiprintf_r+0x120>
 800a274:	9a07      	ldr	r2, [sp, #28]
 800a276:	4654      	mov	r4, sl
 800a278:	2000      	movs	r0, #0
 800a27a:	f04f 0c0a 	mov.w	ip, #10
 800a27e:	4621      	mov	r1, r4
 800a280:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a284:	3b30      	subs	r3, #48	@ 0x30
 800a286:	2b09      	cmp	r3, #9
 800a288:	d94b      	bls.n	800a322 <_vfiprintf_r+0x1a2>
 800a28a:	b1b0      	cbz	r0, 800a2ba <_vfiprintf_r+0x13a>
 800a28c:	9207      	str	r2, [sp, #28]
 800a28e:	e014      	b.n	800a2ba <_vfiprintf_r+0x13a>
 800a290:	eba0 0308 	sub.w	r3, r0, r8
 800a294:	fa09 f303 	lsl.w	r3, r9, r3
 800a298:	4313      	orrs	r3, r2
 800a29a:	9304      	str	r3, [sp, #16]
 800a29c:	46a2      	mov	sl, r4
 800a29e:	e7d2      	b.n	800a246 <_vfiprintf_r+0xc6>
 800a2a0:	9b03      	ldr	r3, [sp, #12]
 800a2a2:	1d19      	adds	r1, r3, #4
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	9103      	str	r1, [sp, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	bfbb      	ittet	lt
 800a2ac:	425b      	neglt	r3, r3
 800a2ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a2b2:	9307      	strge	r3, [sp, #28]
 800a2b4:	9307      	strlt	r3, [sp, #28]
 800a2b6:	bfb8      	it	lt
 800a2b8:	9204      	strlt	r2, [sp, #16]
 800a2ba:	7823      	ldrb	r3, [r4, #0]
 800a2bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2be:	d10a      	bne.n	800a2d6 <_vfiprintf_r+0x156>
 800a2c0:	7863      	ldrb	r3, [r4, #1]
 800a2c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2c4:	d132      	bne.n	800a32c <_vfiprintf_r+0x1ac>
 800a2c6:	9b03      	ldr	r3, [sp, #12]
 800a2c8:	1d1a      	adds	r2, r3, #4
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	9203      	str	r2, [sp, #12]
 800a2ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2d2:	3402      	adds	r4, #2
 800a2d4:	9305      	str	r3, [sp, #20]
 800a2d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a3ac <_vfiprintf_r+0x22c>
 800a2da:	7821      	ldrb	r1, [r4, #0]
 800a2dc:	2203      	movs	r2, #3
 800a2de:	4650      	mov	r0, sl
 800a2e0:	f7f5 ff7e 	bl	80001e0 <memchr>
 800a2e4:	b138      	cbz	r0, 800a2f6 <_vfiprintf_r+0x176>
 800a2e6:	9b04      	ldr	r3, [sp, #16]
 800a2e8:	eba0 000a 	sub.w	r0, r0, sl
 800a2ec:	2240      	movs	r2, #64	@ 0x40
 800a2ee:	4082      	lsls	r2, r0
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	3401      	adds	r4, #1
 800a2f4:	9304      	str	r3, [sp, #16]
 800a2f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2fa:	4829      	ldr	r0, [pc, #164]	@ (800a3a0 <_vfiprintf_r+0x220>)
 800a2fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a300:	2206      	movs	r2, #6
 800a302:	f7f5 ff6d 	bl	80001e0 <memchr>
 800a306:	2800      	cmp	r0, #0
 800a308:	d03f      	beq.n	800a38a <_vfiprintf_r+0x20a>
 800a30a:	4b26      	ldr	r3, [pc, #152]	@ (800a3a4 <_vfiprintf_r+0x224>)
 800a30c:	bb1b      	cbnz	r3, 800a356 <_vfiprintf_r+0x1d6>
 800a30e:	9b03      	ldr	r3, [sp, #12]
 800a310:	3307      	adds	r3, #7
 800a312:	f023 0307 	bic.w	r3, r3, #7
 800a316:	3308      	adds	r3, #8
 800a318:	9303      	str	r3, [sp, #12]
 800a31a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a31c:	443b      	add	r3, r7
 800a31e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a320:	e76a      	b.n	800a1f8 <_vfiprintf_r+0x78>
 800a322:	fb0c 3202 	mla	r2, ip, r2, r3
 800a326:	460c      	mov	r4, r1
 800a328:	2001      	movs	r0, #1
 800a32a:	e7a8      	b.n	800a27e <_vfiprintf_r+0xfe>
 800a32c:	2300      	movs	r3, #0
 800a32e:	3401      	adds	r4, #1
 800a330:	9305      	str	r3, [sp, #20]
 800a332:	4619      	mov	r1, r3
 800a334:	f04f 0c0a 	mov.w	ip, #10
 800a338:	4620      	mov	r0, r4
 800a33a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a33e:	3a30      	subs	r2, #48	@ 0x30
 800a340:	2a09      	cmp	r2, #9
 800a342:	d903      	bls.n	800a34c <_vfiprintf_r+0x1cc>
 800a344:	2b00      	cmp	r3, #0
 800a346:	d0c6      	beq.n	800a2d6 <_vfiprintf_r+0x156>
 800a348:	9105      	str	r1, [sp, #20]
 800a34a:	e7c4      	b.n	800a2d6 <_vfiprintf_r+0x156>
 800a34c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a350:	4604      	mov	r4, r0
 800a352:	2301      	movs	r3, #1
 800a354:	e7f0      	b.n	800a338 <_vfiprintf_r+0x1b8>
 800a356:	ab03      	add	r3, sp, #12
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	462a      	mov	r2, r5
 800a35c:	4b12      	ldr	r3, [pc, #72]	@ (800a3a8 <_vfiprintf_r+0x228>)
 800a35e:	a904      	add	r1, sp, #16
 800a360:	4630      	mov	r0, r6
 800a362:	f7fc fa8d 	bl	8006880 <_printf_float>
 800a366:	4607      	mov	r7, r0
 800a368:	1c78      	adds	r0, r7, #1
 800a36a:	d1d6      	bne.n	800a31a <_vfiprintf_r+0x19a>
 800a36c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a36e:	07d9      	lsls	r1, r3, #31
 800a370:	d405      	bmi.n	800a37e <_vfiprintf_r+0x1fe>
 800a372:	89ab      	ldrh	r3, [r5, #12]
 800a374:	059a      	lsls	r2, r3, #22
 800a376:	d402      	bmi.n	800a37e <_vfiprintf_r+0x1fe>
 800a378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a37a:	f7fd faef 	bl	800795c <__retarget_lock_release_recursive>
 800a37e:	89ab      	ldrh	r3, [r5, #12]
 800a380:	065b      	lsls	r3, r3, #25
 800a382:	f53f af1f 	bmi.w	800a1c4 <_vfiprintf_r+0x44>
 800a386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a388:	e71e      	b.n	800a1c8 <_vfiprintf_r+0x48>
 800a38a:	ab03      	add	r3, sp, #12
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	462a      	mov	r2, r5
 800a390:	4b05      	ldr	r3, [pc, #20]	@ (800a3a8 <_vfiprintf_r+0x228>)
 800a392:	a904      	add	r1, sp, #16
 800a394:	4630      	mov	r0, r6
 800a396:	f7fc fd0b 	bl	8006db0 <_printf_i>
 800a39a:	e7e4      	b.n	800a366 <_vfiprintf_r+0x1e6>
 800a39c:	0800b169 	.word	0x0800b169
 800a3a0:	0800b173 	.word	0x0800b173
 800a3a4:	08006881 	.word	0x08006881
 800a3a8:	0800a15b 	.word	0x0800a15b
 800a3ac:	0800b16f 	.word	0x0800b16f

0800a3b0 <__sflush_r>:
 800a3b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b8:	0716      	lsls	r6, r2, #28
 800a3ba:	4605      	mov	r5, r0
 800a3bc:	460c      	mov	r4, r1
 800a3be:	d454      	bmi.n	800a46a <__sflush_r+0xba>
 800a3c0:	684b      	ldr	r3, [r1, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	dc02      	bgt.n	800a3cc <__sflush_r+0x1c>
 800a3c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	dd48      	ble.n	800a45e <__sflush_r+0xae>
 800a3cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3ce:	2e00      	cmp	r6, #0
 800a3d0:	d045      	beq.n	800a45e <__sflush_r+0xae>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a3d8:	682f      	ldr	r7, [r5, #0]
 800a3da:	6a21      	ldr	r1, [r4, #32]
 800a3dc:	602b      	str	r3, [r5, #0]
 800a3de:	d030      	beq.n	800a442 <__sflush_r+0x92>
 800a3e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a3e2:	89a3      	ldrh	r3, [r4, #12]
 800a3e4:	0759      	lsls	r1, r3, #29
 800a3e6:	d505      	bpl.n	800a3f4 <__sflush_r+0x44>
 800a3e8:	6863      	ldr	r3, [r4, #4]
 800a3ea:	1ad2      	subs	r2, r2, r3
 800a3ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a3ee:	b10b      	cbz	r3, 800a3f4 <__sflush_r+0x44>
 800a3f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3f2:	1ad2      	subs	r2, r2, r3
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3f8:	6a21      	ldr	r1, [r4, #32]
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	47b0      	blx	r6
 800a3fe:	1c43      	adds	r3, r0, #1
 800a400:	89a3      	ldrh	r3, [r4, #12]
 800a402:	d106      	bne.n	800a412 <__sflush_r+0x62>
 800a404:	6829      	ldr	r1, [r5, #0]
 800a406:	291d      	cmp	r1, #29
 800a408:	d82b      	bhi.n	800a462 <__sflush_r+0xb2>
 800a40a:	4a2a      	ldr	r2, [pc, #168]	@ (800a4b4 <__sflush_r+0x104>)
 800a40c:	40ca      	lsrs	r2, r1
 800a40e:	07d6      	lsls	r6, r2, #31
 800a410:	d527      	bpl.n	800a462 <__sflush_r+0xb2>
 800a412:	2200      	movs	r2, #0
 800a414:	6062      	str	r2, [r4, #4]
 800a416:	04d9      	lsls	r1, r3, #19
 800a418:	6922      	ldr	r2, [r4, #16]
 800a41a:	6022      	str	r2, [r4, #0]
 800a41c:	d504      	bpl.n	800a428 <__sflush_r+0x78>
 800a41e:	1c42      	adds	r2, r0, #1
 800a420:	d101      	bne.n	800a426 <__sflush_r+0x76>
 800a422:	682b      	ldr	r3, [r5, #0]
 800a424:	b903      	cbnz	r3, 800a428 <__sflush_r+0x78>
 800a426:	6560      	str	r0, [r4, #84]	@ 0x54
 800a428:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a42a:	602f      	str	r7, [r5, #0]
 800a42c:	b1b9      	cbz	r1, 800a45e <__sflush_r+0xae>
 800a42e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a432:	4299      	cmp	r1, r3
 800a434:	d002      	beq.n	800a43c <__sflush_r+0x8c>
 800a436:	4628      	mov	r0, r5
 800a438:	f7fe f8f2 	bl	8008620 <_free_r>
 800a43c:	2300      	movs	r3, #0
 800a43e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a440:	e00d      	b.n	800a45e <__sflush_r+0xae>
 800a442:	2301      	movs	r3, #1
 800a444:	4628      	mov	r0, r5
 800a446:	47b0      	blx	r6
 800a448:	4602      	mov	r2, r0
 800a44a:	1c50      	adds	r0, r2, #1
 800a44c:	d1c9      	bne.n	800a3e2 <__sflush_r+0x32>
 800a44e:	682b      	ldr	r3, [r5, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d0c6      	beq.n	800a3e2 <__sflush_r+0x32>
 800a454:	2b1d      	cmp	r3, #29
 800a456:	d001      	beq.n	800a45c <__sflush_r+0xac>
 800a458:	2b16      	cmp	r3, #22
 800a45a:	d11e      	bne.n	800a49a <__sflush_r+0xea>
 800a45c:	602f      	str	r7, [r5, #0]
 800a45e:	2000      	movs	r0, #0
 800a460:	e022      	b.n	800a4a8 <__sflush_r+0xf8>
 800a462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a466:	b21b      	sxth	r3, r3
 800a468:	e01b      	b.n	800a4a2 <__sflush_r+0xf2>
 800a46a:	690f      	ldr	r7, [r1, #16]
 800a46c:	2f00      	cmp	r7, #0
 800a46e:	d0f6      	beq.n	800a45e <__sflush_r+0xae>
 800a470:	0793      	lsls	r3, r2, #30
 800a472:	680e      	ldr	r6, [r1, #0]
 800a474:	bf08      	it	eq
 800a476:	694b      	ldreq	r3, [r1, #20]
 800a478:	600f      	str	r7, [r1, #0]
 800a47a:	bf18      	it	ne
 800a47c:	2300      	movne	r3, #0
 800a47e:	eba6 0807 	sub.w	r8, r6, r7
 800a482:	608b      	str	r3, [r1, #8]
 800a484:	f1b8 0f00 	cmp.w	r8, #0
 800a488:	dde9      	ble.n	800a45e <__sflush_r+0xae>
 800a48a:	6a21      	ldr	r1, [r4, #32]
 800a48c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a48e:	4643      	mov	r3, r8
 800a490:	463a      	mov	r2, r7
 800a492:	4628      	mov	r0, r5
 800a494:	47b0      	blx	r6
 800a496:	2800      	cmp	r0, #0
 800a498:	dc08      	bgt.n	800a4ac <__sflush_r+0xfc>
 800a49a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a49e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4a2:	81a3      	strh	r3, [r4, #12]
 800a4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ac:	4407      	add	r7, r0
 800a4ae:	eba8 0800 	sub.w	r8, r8, r0
 800a4b2:	e7e7      	b.n	800a484 <__sflush_r+0xd4>
 800a4b4:	20400001 	.word	0x20400001

0800a4b8 <_fflush_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	690b      	ldr	r3, [r1, #16]
 800a4bc:	4605      	mov	r5, r0
 800a4be:	460c      	mov	r4, r1
 800a4c0:	b913      	cbnz	r3, 800a4c8 <_fflush_r+0x10>
 800a4c2:	2500      	movs	r5, #0
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	bd38      	pop	{r3, r4, r5, pc}
 800a4c8:	b118      	cbz	r0, 800a4d2 <_fflush_r+0x1a>
 800a4ca:	6a03      	ldr	r3, [r0, #32]
 800a4cc:	b90b      	cbnz	r3, 800a4d2 <_fflush_r+0x1a>
 800a4ce:	f7fd f827 	bl	8007520 <__sinit>
 800a4d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d0f3      	beq.n	800a4c2 <_fflush_r+0xa>
 800a4da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a4dc:	07d0      	lsls	r0, r2, #31
 800a4de:	d404      	bmi.n	800a4ea <_fflush_r+0x32>
 800a4e0:	0599      	lsls	r1, r3, #22
 800a4e2:	d402      	bmi.n	800a4ea <_fflush_r+0x32>
 800a4e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4e6:	f7fd fa38 	bl	800795a <__retarget_lock_acquire_recursive>
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	f7ff ff5f 	bl	800a3b0 <__sflush_r>
 800a4f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4f4:	07da      	lsls	r2, r3, #31
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	d4e4      	bmi.n	800a4c4 <_fflush_r+0xc>
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	059b      	lsls	r3, r3, #22
 800a4fe:	d4e1      	bmi.n	800a4c4 <_fflush_r+0xc>
 800a500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a502:	f7fd fa2b 	bl	800795c <__retarget_lock_release_recursive>
 800a506:	e7dd      	b.n	800a4c4 <_fflush_r+0xc>

0800a508 <__swhatbuf_r>:
 800a508:	b570      	push	{r4, r5, r6, lr}
 800a50a:	460c      	mov	r4, r1
 800a50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a510:	2900      	cmp	r1, #0
 800a512:	b096      	sub	sp, #88	@ 0x58
 800a514:	4615      	mov	r5, r2
 800a516:	461e      	mov	r6, r3
 800a518:	da0d      	bge.n	800a536 <__swhatbuf_r+0x2e>
 800a51a:	89a3      	ldrh	r3, [r4, #12]
 800a51c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a520:	f04f 0100 	mov.w	r1, #0
 800a524:	bf14      	ite	ne
 800a526:	2340      	movne	r3, #64	@ 0x40
 800a528:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a52c:	2000      	movs	r0, #0
 800a52e:	6031      	str	r1, [r6, #0]
 800a530:	602b      	str	r3, [r5, #0]
 800a532:	b016      	add	sp, #88	@ 0x58
 800a534:	bd70      	pop	{r4, r5, r6, pc}
 800a536:	466a      	mov	r2, sp
 800a538:	f000 f874 	bl	800a624 <_fstat_r>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	dbec      	blt.n	800a51a <__swhatbuf_r+0x12>
 800a540:	9901      	ldr	r1, [sp, #4]
 800a542:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a546:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a54a:	4259      	negs	r1, r3
 800a54c:	4159      	adcs	r1, r3
 800a54e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a552:	e7eb      	b.n	800a52c <__swhatbuf_r+0x24>

0800a554 <__smakebuf_r>:
 800a554:	898b      	ldrh	r3, [r1, #12]
 800a556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a558:	079d      	lsls	r5, r3, #30
 800a55a:	4606      	mov	r6, r0
 800a55c:	460c      	mov	r4, r1
 800a55e:	d507      	bpl.n	800a570 <__smakebuf_r+0x1c>
 800a560:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a564:	6023      	str	r3, [r4, #0]
 800a566:	6123      	str	r3, [r4, #16]
 800a568:	2301      	movs	r3, #1
 800a56a:	6163      	str	r3, [r4, #20]
 800a56c:	b003      	add	sp, #12
 800a56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a570:	ab01      	add	r3, sp, #4
 800a572:	466a      	mov	r2, sp
 800a574:	f7ff ffc8 	bl	800a508 <__swhatbuf_r>
 800a578:	9f00      	ldr	r7, [sp, #0]
 800a57a:	4605      	mov	r5, r0
 800a57c:	4639      	mov	r1, r7
 800a57e:	4630      	mov	r0, r6
 800a580:	f7fe f8c2 	bl	8008708 <_malloc_r>
 800a584:	b948      	cbnz	r0, 800a59a <__smakebuf_r+0x46>
 800a586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a58a:	059a      	lsls	r2, r3, #22
 800a58c:	d4ee      	bmi.n	800a56c <__smakebuf_r+0x18>
 800a58e:	f023 0303 	bic.w	r3, r3, #3
 800a592:	f043 0302 	orr.w	r3, r3, #2
 800a596:	81a3      	strh	r3, [r4, #12]
 800a598:	e7e2      	b.n	800a560 <__smakebuf_r+0xc>
 800a59a:	89a3      	ldrh	r3, [r4, #12]
 800a59c:	6020      	str	r0, [r4, #0]
 800a59e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5a2:	81a3      	strh	r3, [r4, #12]
 800a5a4:	9b01      	ldr	r3, [sp, #4]
 800a5a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a5aa:	b15b      	cbz	r3, 800a5c4 <__smakebuf_r+0x70>
 800a5ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f000 f849 	bl	800a648 <_isatty_r>
 800a5b6:	b128      	cbz	r0, 800a5c4 <__smakebuf_r+0x70>
 800a5b8:	89a3      	ldrh	r3, [r4, #12]
 800a5ba:	f023 0303 	bic.w	r3, r3, #3
 800a5be:	f043 0301 	orr.w	r3, r3, #1
 800a5c2:	81a3      	strh	r3, [r4, #12]
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	431d      	orrs	r5, r3
 800a5c8:	81a5      	strh	r5, [r4, #12]
 800a5ca:	e7cf      	b.n	800a56c <__smakebuf_r+0x18>

0800a5cc <memmove>:
 800a5cc:	4288      	cmp	r0, r1
 800a5ce:	b510      	push	{r4, lr}
 800a5d0:	eb01 0402 	add.w	r4, r1, r2
 800a5d4:	d902      	bls.n	800a5dc <memmove+0x10>
 800a5d6:	4284      	cmp	r4, r0
 800a5d8:	4623      	mov	r3, r4
 800a5da:	d807      	bhi.n	800a5ec <memmove+0x20>
 800a5dc:	1e43      	subs	r3, r0, #1
 800a5de:	42a1      	cmp	r1, r4
 800a5e0:	d008      	beq.n	800a5f4 <memmove+0x28>
 800a5e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5ea:	e7f8      	b.n	800a5de <memmove+0x12>
 800a5ec:	4402      	add	r2, r0
 800a5ee:	4601      	mov	r1, r0
 800a5f0:	428a      	cmp	r2, r1
 800a5f2:	d100      	bne.n	800a5f6 <memmove+0x2a>
 800a5f4:	bd10      	pop	{r4, pc}
 800a5f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5fe:	e7f7      	b.n	800a5f0 <memmove+0x24>

0800a600 <strncmp>:
 800a600:	b510      	push	{r4, lr}
 800a602:	b16a      	cbz	r2, 800a620 <strncmp+0x20>
 800a604:	3901      	subs	r1, #1
 800a606:	1884      	adds	r4, r0, r2
 800a608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a60c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a610:	429a      	cmp	r2, r3
 800a612:	d103      	bne.n	800a61c <strncmp+0x1c>
 800a614:	42a0      	cmp	r0, r4
 800a616:	d001      	beq.n	800a61c <strncmp+0x1c>
 800a618:	2a00      	cmp	r2, #0
 800a61a:	d1f5      	bne.n	800a608 <strncmp+0x8>
 800a61c:	1ad0      	subs	r0, r2, r3
 800a61e:	bd10      	pop	{r4, pc}
 800a620:	4610      	mov	r0, r2
 800a622:	e7fc      	b.n	800a61e <strncmp+0x1e>

0800a624 <_fstat_r>:
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4d07      	ldr	r5, [pc, #28]	@ (800a644 <_fstat_r+0x20>)
 800a628:	2300      	movs	r3, #0
 800a62a:	4604      	mov	r4, r0
 800a62c:	4608      	mov	r0, r1
 800a62e:	4611      	mov	r1, r2
 800a630:	602b      	str	r3, [r5, #0]
 800a632:	f7f7 ff1b 	bl	800246c <_fstat>
 800a636:	1c43      	adds	r3, r0, #1
 800a638:	d102      	bne.n	800a640 <_fstat_r+0x1c>
 800a63a:	682b      	ldr	r3, [r5, #0]
 800a63c:	b103      	cbz	r3, 800a640 <_fstat_r+0x1c>
 800a63e:	6023      	str	r3, [r4, #0]
 800a640:	bd38      	pop	{r3, r4, r5, pc}
 800a642:	bf00      	nop
 800a644:	20000548 	.word	0x20000548

0800a648 <_isatty_r>:
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4d06      	ldr	r5, [pc, #24]	@ (800a664 <_isatty_r+0x1c>)
 800a64c:	2300      	movs	r3, #0
 800a64e:	4604      	mov	r4, r0
 800a650:	4608      	mov	r0, r1
 800a652:	602b      	str	r3, [r5, #0]
 800a654:	f7f7 ff1a 	bl	800248c <_isatty>
 800a658:	1c43      	adds	r3, r0, #1
 800a65a:	d102      	bne.n	800a662 <_isatty_r+0x1a>
 800a65c:	682b      	ldr	r3, [r5, #0]
 800a65e:	b103      	cbz	r3, 800a662 <_isatty_r+0x1a>
 800a660:	6023      	str	r3, [r4, #0]
 800a662:	bd38      	pop	{r3, r4, r5, pc}
 800a664:	20000548 	.word	0x20000548

0800a668 <_sbrk_r>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	4d06      	ldr	r5, [pc, #24]	@ (800a684 <_sbrk_r+0x1c>)
 800a66c:	2300      	movs	r3, #0
 800a66e:	4604      	mov	r4, r0
 800a670:	4608      	mov	r0, r1
 800a672:	602b      	str	r3, [r5, #0]
 800a674:	f7f7 ff22 	bl	80024bc <_sbrk>
 800a678:	1c43      	adds	r3, r0, #1
 800a67a:	d102      	bne.n	800a682 <_sbrk_r+0x1a>
 800a67c:	682b      	ldr	r3, [r5, #0]
 800a67e:	b103      	cbz	r3, 800a682 <_sbrk_r+0x1a>
 800a680:	6023      	str	r3, [r4, #0]
 800a682:	bd38      	pop	{r3, r4, r5, pc}
 800a684:	20000548 	.word	0x20000548

0800a688 <memcpy>:
 800a688:	440a      	add	r2, r1
 800a68a:	4291      	cmp	r1, r2
 800a68c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a690:	d100      	bne.n	800a694 <memcpy+0xc>
 800a692:	4770      	bx	lr
 800a694:	b510      	push	{r4, lr}
 800a696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a69a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a69e:	4291      	cmp	r1, r2
 800a6a0:	d1f9      	bne.n	800a696 <memcpy+0xe>
 800a6a2:	bd10      	pop	{r4, pc}
 800a6a4:	0000      	movs	r0, r0
	...

0800a6a8 <nan>:
 800a6a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a6b0 <nan+0x8>
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	00000000 	.word	0x00000000
 800a6b4:	7ff80000 	.word	0x7ff80000

0800a6b8 <__assert_func>:
 800a6b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6ba:	4614      	mov	r4, r2
 800a6bc:	461a      	mov	r2, r3
 800a6be:	4b09      	ldr	r3, [pc, #36]	@ (800a6e4 <__assert_func+0x2c>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4605      	mov	r5, r0
 800a6c4:	68d8      	ldr	r0, [r3, #12]
 800a6c6:	b14c      	cbz	r4, 800a6dc <__assert_func+0x24>
 800a6c8:	4b07      	ldr	r3, [pc, #28]	@ (800a6e8 <__assert_func+0x30>)
 800a6ca:	9100      	str	r1, [sp, #0]
 800a6cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6d0:	4906      	ldr	r1, [pc, #24]	@ (800a6ec <__assert_func+0x34>)
 800a6d2:	462b      	mov	r3, r5
 800a6d4:	f000 fba8 	bl	800ae28 <fiprintf>
 800a6d8:	f000 fbb8 	bl	800ae4c <abort>
 800a6dc:	4b04      	ldr	r3, [pc, #16]	@ (800a6f0 <__assert_func+0x38>)
 800a6de:	461c      	mov	r4, r3
 800a6e0:	e7f3      	b.n	800a6ca <__assert_func+0x12>
 800a6e2:	bf00      	nop
 800a6e4:	20000018 	.word	0x20000018
 800a6e8:	0800b182 	.word	0x0800b182
 800a6ec:	0800b18f 	.word	0x0800b18f
 800a6f0:	0800b1bd 	.word	0x0800b1bd

0800a6f4 <_calloc_r>:
 800a6f4:	b570      	push	{r4, r5, r6, lr}
 800a6f6:	fba1 5402 	umull	r5, r4, r1, r2
 800a6fa:	b934      	cbnz	r4, 800a70a <_calloc_r+0x16>
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	f7fe f803 	bl	8008708 <_malloc_r>
 800a702:	4606      	mov	r6, r0
 800a704:	b928      	cbnz	r0, 800a712 <_calloc_r+0x1e>
 800a706:	4630      	mov	r0, r6
 800a708:	bd70      	pop	{r4, r5, r6, pc}
 800a70a:	220c      	movs	r2, #12
 800a70c:	6002      	str	r2, [r0, #0]
 800a70e:	2600      	movs	r6, #0
 800a710:	e7f9      	b.n	800a706 <_calloc_r+0x12>
 800a712:	462a      	mov	r2, r5
 800a714:	4621      	mov	r1, r4
 800a716:	f7fd f8a3 	bl	8007860 <memset>
 800a71a:	e7f4      	b.n	800a706 <_calloc_r+0x12>

0800a71c <rshift>:
 800a71c:	6903      	ldr	r3, [r0, #16]
 800a71e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a722:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a726:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a72a:	f100 0414 	add.w	r4, r0, #20
 800a72e:	dd45      	ble.n	800a7bc <rshift+0xa0>
 800a730:	f011 011f 	ands.w	r1, r1, #31
 800a734:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a738:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a73c:	d10c      	bne.n	800a758 <rshift+0x3c>
 800a73e:	f100 0710 	add.w	r7, r0, #16
 800a742:	4629      	mov	r1, r5
 800a744:	42b1      	cmp	r1, r6
 800a746:	d334      	bcc.n	800a7b2 <rshift+0x96>
 800a748:	1a9b      	subs	r3, r3, r2
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	1eea      	subs	r2, r5, #3
 800a74e:	4296      	cmp	r6, r2
 800a750:	bf38      	it	cc
 800a752:	2300      	movcc	r3, #0
 800a754:	4423      	add	r3, r4
 800a756:	e015      	b.n	800a784 <rshift+0x68>
 800a758:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a75c:	f1c1 0820 	rsb	r8, r1, #32
 800a760:	40cf      	lsrs	r7, r1
 800a762:	f105 0e04 	add.w	lr, r5, #4
 800a766:	46a1      	mov	r9, r4
 800a768:	4576      	cmp	r6, lr
 800a76a:	46f4      	mov	ip, lr
 800a76c:	d815      	bhi.n	800a79a <rshift+0x7e>
 800a76e:	1a9a      	subs	r2, r3, r2
 800a770:	0092      	lsls	r2, r2, #2
 800a772:	3a04      	subs	r2, #4
 800a774:	3501      	adds	r5, #1
 800a776:	42ae      	cmp	r6, r5
 800a778:	bf38      	it	cc
 800a77a:	2200      	movcc	r2, #0
 800a77c:	18a3      	adds	r3, r4, r2
 800a77e:	50a7      	str	r7, [r4, r2]
 800a780:	b107      	cbz	r7, 800a784 <rshift+0x68>
 800a782:	3304      	adds	r3, #4
 800a784:	1b1a      	subs	r2, r3, r4
 800a786:	42a3      	cmp	r3, r4
 800a788:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a78c:	bf08      	it	eq
 800a78e:	2300      	moveq	r3, #0
 800a790:	6102      	str	r2, [r0, #16]
 800a792:	bf08      	it	eq
 800a794:	6143      	streq	r3, [r0, #20]
 800a796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a79a:	f8dc c000 	ldr.w	ip, [ip]
 800a79e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a7a2:	ea4c 0707 	orr.w	r7, ip, r7
 800a7a6:	f849 7b04 	str.w	r7, [r9], #4
 800a7aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7ae:	40cf      	lsrs	r7, r1
 800a7b0:	e7da      	b.n	800a768 <rshift+0x4c>
 800a7b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a7b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a7ba:	e7c3      	b.n	800a744 <rshift+0x28>
 800a7bc:	4623      	mov	r3, r4
 800a7be:	e7e1      	b.n	800a784 <rshift+0x68>

0800a7c0 <__hexdig_fun>:
 800a7c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a7c4:	2b09      	cmp	r3, #9
 800a7c6:	d802      	bhi.n	800a7ce <__hexdig_fun+0xe>
 800a7c8:	3820      	subs	r0, #32
 800a7ca:	b2c0      	uxtb	r0, r0
 800a7cc:	4770      	bx	lr
 800a7ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a7d2:	2b05      	cmp	r3, #5
 800a7d4:	d801      	bhi.n	800a7da <__hexdig_fun+0x1a>
 800a7d6:	3847      	subs	r0, #71	@ 0x47
 800a7d8:	e7f7      	b.n	800a7ca <__hexdig_fun+0xa>
 800a7da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a7de:	2b05      	cmp	r3, #5
 800a7e0:	d801      	bhi.n	800a7e6 <__hexdig_fun+0x26>
 800a7e2:	3827      	subs	r0, #39	@ 0x27
 800a7e4:	e7f1      	b.n	800a7ca <__hexdig_fun+0xa>
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	4770      	bx	lr
	...

0800a7ec <__gethex>:
 800a7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f0:	b085      	sub	sp, #20
 800a7f2:	468a      	mov	sl, r1
 800a7f4:	9302      	str	r3, [sp, #8]
 800a7f6:	680b      	ldr	r3, [r1, #0]
 800a7f8:	9001      	str	r0, [sp, #4]
 800a7fa:	4690      	mov	r8, r2
 800a7fc:	1c9c      	adds	r4, r3, #2
 800a7fe:	46a1      	mov	r9, r4
 800a800:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a804:	2830      	cmp	r0, #48	@ 0x30
 800a806:	d0fa      	beq.n	800a7fe <__gethex+0x12>
 800a808:	eba9 0303 	sub.w	r3, r9, r3
 800a80c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a810:	f7ff ffd6 	bl	800a7c0 <__hexdig_fun>
 800a814:	4605      	mov	r5, r0
 800a816:	2800      	cmp	r0, #0
 800a818:	d168      	bne.n	800a8ec <__gethex+0x100>
 800a81a:	49a0      	ldr	r1, [pc, #640]	@ (800aa9c <__gethex+0x2b0>)
 800a81c:	2201      	movs	r2, #1
 800a81e:	4648      	mov	r0, r9
 800a820:	f7ff feee 	bl	800a600 <strncmp>
 800a824:	4607      	mov	r7, r0
 800a826:	2800      	cmp	r0, #0
 800a828:	d167      	bne.n	800a8fa <__gethex+0x10e>
 800a82a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a82e:	4626      	mov	r6, r4
 800a830:	f7ff ffc6 	bl	800a7c0 <__hexdig_fun>
 800a834:	2800      	cmp	r0, #0
 800a836:	d062      	beq.n	800a8fe <__gethex+0x112>
 800a838:	4623      	mov	r3, r4
 800a83a:	7818      	ldrb	r0, [r3, #0]
 800a83c:	2830      	cmp	r0, #48	@ 0x30
 800a83e:	4699      	mov	r9, r3
 800a840:	f103 0301 	add.w	r3, r3, #1
 800a844:	d0f9      	beq.n	800a83a <__gethex+0x4e>
 800a846:	f7ff ffbb 	bl	800a7c0 <__hexdig_fun>
 800a84a:	fab0 f580 	clz	r5, r0
 800a84e:	096d      	lsrs	r5, r5, #5
 800a850:	f04f 0b01 	mov.w	fp, #1
 800a854:	464a      	mov	r2, r9
 800a856:	4616      	mov	r6, r2
 800a858:	3201      	adds	r2, #1
 800a85a:	7830      	ldrb	r0, [r6, #0]
 800a85c:	f7ff ffb0 	bl	800a7c0 <__hexdig_fun>
 800a860:	2800      	cmp	r0, #0
 800a862:	d1f8      	bne.n	800a856 <__gethex+0x6a>
 800a864:	498d      	ldr	r1, [pc, #564]	@ (800aa9c <__gethex+0x2b0>)
 800a866:	2201      	movs	r2, #1
 800a868:	4630      	mov	r0, r6
 800a86a:	f7ff fec9 	bl	800a600 <strncmp>
 800a86e:	2800      	cmp	r0, #0
 800a870:	d13f      	bne.n	800a8f2 <__gethex+0x106>
 800a872:	b944      	cbnz	r4, 800a886 <__gethex+0x9a>
 800a874:	1c74      	adds	r4, r6, #1
 800a876:	4622      	mov	r2, r4
 800a878:	4616      	mov	r6, r2
 800a87a:	3201      	adds	r2, #1
 800a87c:	7830      	ldrb	r0, [r6, #0]
 800a87e:	f7ff ff9f 	bl	800a7c0 <__hexdig_fun>
 800a882:	2800      	cmp	r0, #0
 800a884:	d1f8      	bne.n	800a878 <__gethex+0x8c>
 800a886:	1ba4      	subs	r4, r4, r6
 800a888:	00a7      	lsls	r7, r4, #2
 800a88a:	7833      	ldrb	r3, [r6, #0]
 800a88c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a890:	2b50      	cmp	r3, #80	@ 0x50
 800a892:	d13e      	bne.n	800a912 <__gethex+0x126>
 800a894:	7873      	ldrb	r3, [r6, #1]
 800a896:	2b2b      	cmp	r3, #43	@ 0x2b
 800a898:	d033      	beq.n	800a902 <__gethex+0x116>
 800a89a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a89c:	d034      	beq.n	800a908 <__gethex+0x11c>
 800a89e:	1c71      	adds	r1, r6, #1
 800a8a0:	2400      	movs	r4, #0
 800a8a2:	7808      	ldrb	r0, [r1, #0]
 800a8a4:	f7ff ff8c 	bl	800a7c0 <__hexdig_fun>
 800a8a8:	1e43      	subs	r3, r0, #1
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b18      	cmp	r3, #24
 800a8ae:	d830      	bhi.n	800a912 <__gethex+0x126>
 800a8b0:	f1a0 0210 	sub.w	r2, r0, #16
 800a8b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a8b8:	f7ff ff82 	bl	800a7c0 <__hexdig_fun>
 800a8bc:	f100 3cff 	add.w	ip, r0, #4294967295
 800a8c0:	fa5f fc8c 	uxtb.w	ip, ip
 800a8c4:	f1bc 0f18 	cmp.w	ip, #24
 800a8c8:	f04f 030a 	mov.w	r3, #10
 800a8cc:	d91e      	bls.n	800a90c <__gethex+0x120>
 800a8ce:	b104      	cbz	r4, 800a8d2 <__gethex+0xe6>
 800a8d0:	4252      	negs	r2, r2
 800a8d2:	4417      	add	r7, r2
 800a8d4:	f8ca 1000 	str.w	r1, [sl]
 800a8d8:	b1ed      	cbz	r5, 800a916 <__gethex+0x12a>
 800a8da:	f1bb 0f00 	cmp.w	fp, #0
 800a8de:	bf0c      	ite	eq
 800a8e0:	2506      	moveq	r5, #6
 800a8e2:	2500      	movne	r5, #0
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	b005      	add	sp, #20
 800a8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ec:	2500      	movs	r5, #0
 800a8ee:	462c      	mov	r4, r5
 800a8f0:	e7b0      	b.n	800a854 <__gethex+0x68>
 800a8f2:	2c00      	cmp	r4, #0
 800a8f4:	d1c7      	bne.n	800a886 <__gethex+0x9a>
 800a8f6:	4627      	mov	r7, r4
 800a8f8:	e7c7      	b.n	800a88a <__gethex+0x9e>
 800a8fa:	464e      	mov	r6, r9
 800a8fc:	462f      	mov	r7, r5
 800a8fe:	2501      	movs	r5, #1
 800a900:	e7c3      	b.n	800a88a <__gethex+0x9e>
 800a902:	2400      	movs	r4, #0
 800a904:	1cb1      	adds	r1, r6, #2
 800a906:	e7cc      	b.n	800a8a2 <__gethex+0xb6>
 800a908:	2401      	movs	r4, #1
 800a90a:	e7fb      	b.n	800a904 <__gethex+0x118>
 800a90c:	fb03 0002 	mla	r0, r3, r2, r0
 800a910:	e7ce      	b.n	800a8b0 <__gethex+0xc4>
 800a912:	4631      	mov	r1, r6
 800a914:	e7de      	b.n	800a8d4 <__gethex+0xe8>
 800a916:	eba6 0309 	sub.w	r3, r6, r9
 800a91a:	3b01      	subs	r3, #1
 800a91c:	4629      	mov	r1, r5
 800a91e:	2b07      	cmp	r3, #7
 800a920:	dc0a      	bgt.n	800a938 <__gethex+0x14c>
 800a922:	9801      	ldr	r0, [sp, #4]
 800a924:	f7fd ff7c 	bl	8008820 <_Balloc>
 800a928:	4604      	mov	r4, r0
 800a92a:	b940      	cbnz	r0, 800a93e <__gethex+0x152>
 800a92c:	4b5c      	ldr	r3, [pc, #368]	@ (800aaa0 <__gethex+0x2b4>)
 800a92e:	4602      	mov	r2, r0
 800a930:	21e4      	movs	r1, #228	@ 0xe4
 800a932:	485c      	ldr	r0, [pc, #368]	@ (800aaa4 <__gethex+0x2b8>)
 800a934:	f7ff fec0 	bl	800a6b8 <__assert_func>
 800a938:	3101      	adds	r1, #1
 800a93a:	105b      	asrs	r3, r3, #1
 800a93c:	e7ef      	b.n	800a91e <__gethex+0x132>
 800a93e:	f100 0a14 	add.w	sl, r0, #20
 800a942:	2300      	movs	r3, #0
 800a944:	4655      	mov	r5, sl
 800a946:	469b      	mov	fp, r3
 800a948:	45b1      	cmp	r9, r6
 800a94a:	d337      	bcc.n	800a9bc <__gethex+0x1d0>
 800a94c:	f845 bb04 	str.w	fp, [r5], #4
 800a950:	eba5 050a 	sub.w	r5, r5, sl
 800a954:	10ad      	asrs	r5, r5, #2
 800a956:	6125      	str	r5, [r4, #16]
 800a958:	4658      	mov	r0, fp
 800a95a:	f7fe f853 	bl	8008a04 <__hi0bits>
 800a95e:	016d      	lsls	r5, r5, #5
 800a960:	f8d8 6000 	ldr.w	r6, [r8]
 800a964:	1a2d      	subs	r5, r5, r0
 800a966:	42b5      	cmp	r5, r6
 800a968:	dd54      	ble.n	800aa14 <__gethex+0x228>
 800a96a:	1bad      	subs	r5, r5, r6
 800a96c:	4629      	mov	r1, r5
 800a96e:	4620      	mov	r0, r4
 800a970:	f7fe fbdf 	bl	8009132 <__any_on>
 800a974:	4681      	mov	r9, r0
 800a976:	b178      	cbz	r0, 800a998 <__gethex+0x1ac>
 800a978:	1e6b      	subs	r3, r5, #1
 800a97a:	1159      	asrs	r1, r3, #5
 800a97c:	f003 021f 	and.w	r2, r3, #31
 800a980:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a984:	f04f 0901 	mov.w	r9, #1
 800a988:	fa09 f202 	lsl.w	r2, r9, r2
 800a98c:	420a      	tst	r2, r1
 800a98e:	d003      	beq.n	800a998 <__gethex+0x1ac>
 800a990:	454b      	cmp	r3, r9
 800a992:	dc36      	bgt.n	800aa02 <__gethex+0x216>
 800a994:	f04f 0902 	mov.w	r9, #2
 800a998:	4629      	mov	r1, r5
 800a99a:	4620      	mov	r0, r4
 800a99c:	f7ff febe 	bl	800a71c <rshift>
 800a9a0:	442f      	add	r7, r5
 800a9a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9a6:	42bb      	cmp	r3, r7
 800a9a8:	da42      	bge.n	800aa30 <__gethex+0x244>
 800a9aa:	9801      	ldr	r0, [sp, #4]
 800a9ac:	4621      	mov	r1, r4
 800a9ae:	f7fd ff77 	bl	80088a0 <_Bfree>
 800a9b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	6013      	str	r3, [r2, #0]
 800a9b8:	25a3      	movs	r5, #163	@ 0xa3
 800a9ba:	e793      	b.n	800a8e4 <__gethex+0xf8>
 800a9bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a9c0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a9c2:	d012      	beq.n	800a9ea <__gethex+0x1fe>
 800a9c4:	2b20      	cmp	r3, #32
 800a9c6:	d104      	bne.n	800a9d2 <__gethex+0x1e6>
 800a9c8:	f845 bb04 	str.w	fp, [r5], #4
 800a9cc:	f04f 0b00 	mov.w	fp, #0
 800a9d0:	465b      	mov	r3, fp
 800a9d2:	7830      	ldrb	r0, [r6, #0]
 800a9d4:	9303      	str	r3, [sp, #12]
 800a9d6:	f7ff fef3 	bl	800a7c0 <__hexdig_fun>
 800a9da:	9b03      	ldr	r3, [sp, #12]
 800a9dc:	f000 000f 	and.w	r0, r0, #15
 800a9e0:	4098      	lsls	r0, r3
 800a9e2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	e7ae      	b.n	800a948 <__gethex+0x15c>
 800a9ea:	45b1      	cmp	r9, r6
 800a9ec:	d8ea      	bhi.n	800a9c4 <__gethex+0x1d8>
 800a9ee:	492b      	ldr	r1, [pc, #172]	@ (800aa9c <__gethex+0x2b0>)
 800a9f0:	9303      	str	r3, [sp, #12]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f7ff fe03 	bl	800a600 <strncmp>
 800a9fa:	9b03      	ldr	r3, [sp, #12]
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	d1e1      	bne.n	800a9c4 <__gethex+0x1d8>
 800aa00:	e7a2      	b.n	800a948 <__gethex+0x15c>
 800aa02:	1ea9      	subs	r1, r5, #2
 800aa04:	4620      	mov	r0, r4
 800aa06:	f7fe fb94 	bl	8009132 <__any_on>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	d0c2      	beq.n	800a994 <__gethex+0x1a8>
 800aa0e:	f04f 0903 	mov.w	r9, #3
 800aa12:	e7c1      	b.n	800a998 <__gethex+0x1ac>
 800aa14:	da09      	bge.n	800aa2a <__gethex+0x23e>
 800aa16:	1b75      	subs	r5, r6, r5
 800aa18:	4621      	mov	r1, r4
 800aa1a:	9801      	ldr	r0, [sp, #4]
 800aa1c:	462a      	mov	r2, r5
 800aa1e:	f7fe f94f 	bl	8008cc0 <__lshift>
 800aa22:	1b7f      	subs	r7, r7, r5
 800aa24:	4604      	mov	r4, r0
 800aa26:	f100 0a14 	add.w	sl, r0, #20
 800aa2a:	f04f 0900 	mov.w	r9, #0
 800aa2e:	e7b8      	b.n	800a9a2 <__gethex+0x1b6>
 800aa30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa34:	42bd      	cmp	r5, r7
 800aa36:	dd6f      	ble.n	800ab18 <__gethex+0x32c>
 800aa38:	1bed      	subs	r5, r5, r7
 800aa3a:	42ae      	cmp	r6, r5
 800aa3c:	dc34      	bgt.n	800aaa8 <__gethex+0x2bc>
 800aa3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d022      	beq.n	800aa8c <__gethex+0x2a0>
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d024      	beq.n	800aa94 <__gethex+0x2a8>
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d115      	bne.n	800aa7a <__gethex+0x28e>
 800aa4e:	42ae      	cmp	r6, r5
 800aa50:	d113      	bne.n	800aa7a <__gethex+0x28e>
 800aa52:	2e01      	cmp	r6, #1
 800aa54:	d10b      	bne.n	800aa6e <__gethex+0x282>
 800aa56:	9a02      	ldr	r2, [sp, #8]
 800aa58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa5c:	6013      	str	r3, [r2, #0]
 800aa5e:	2301      	movs	r3, #1
 800aa60:	6123      	str	r3, [r4, #16]
 800aa62:	f8ca 3000 	str.w	r3, [sl]
 800aa66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa68:	2562      	movs	r5, #98	@ 0x62
 800aa6a:	601c      	str	r4, [r3, #0]
 800aa6c:	e73a      	b.n	800a8e4 <__gethex+0xf8>
 800aa6e:	1e71      	subs	r1, r6, #1
 800aa70:	4620      	mov	r0, r4
 800aa72:	f7fe fb5e 	bl	8009132 <__any_on>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d1ed      	bne.n	800aa56 <__gethex+0x26a>
 800aa7a:	9801      	ldr	r0, [sp, #4]
 800aa7c:	4621      	mov	r1, r4
 800aa7e:	f7fd ff0f 	bl	80088a0 <_Bfree>
 800aa82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa84:	2300      	movs	r3, #0
 800aa86:	6013      	str	r3, [r2, #0]
 800aa88:	2550      	movs	r5, #80	@ 0x50
 800aa8a:	e72b      	b.n	800a8e4 <__gethex+0xf8>
 800aa8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1f3      	bne.n	800aa7a <__gethex+0x28e>
 800aa92:	e7e0      	b.n	800aa56 <__gethex+0x26a>
 800aa94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1dd      	bne.n	800aa56 <__gethex+0x26a>
 800aa9a:	e7ee      	b.n	800aa7a <__gethex+0x28e>
 800aa9c:	0800b167 	.word	0x0800b167
 800aaa0:	0800b0fd 	.word	0x0800b0fd
 800aaa4:	0800b1be 	.word	0x0800b1be
 800aaa8:	1e6f      	subs	r7, r5, #1
 800aaaa:	f1b9 0f00 	cmp.w	r9, #0
 800aaae:	d130      	bne.n	800ab12 <__gethex+0x326>
 800aab0:	b127      	cbz	r7, 800aabc <__gethex+0x2d0>
 800aab2:	4639      	mov	r1, r7
 800aab4:	4620      	mov	r0, r4
 800aab6:	f7fe fb3c 	bl	8009132 <__any_on>
 800aaba:	4681      	mov	r9, r0
 800aabc:	117a      	asrs	r2, r7, #5
 800aabe:	2301      	movs	r3, #1
 800aac0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aac4:	f007 071f 	and.w	r7, r7, #31
 800aac8:	40bb      	lsls	r3, r7
 800aaca:	4213      	tst	r3, r2
 800aacc:	4629      	mov	r1, r5
 800aace:	4620      	mov	r0, r4
 800aad0:	bf18      	it	ne
 800aad2:	f049 0902 	orrne.w	r9, r9, #2
 800aad6:	f7ff fe21 	bl	800a71c <rshift>
 800aada:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800aade:	1b76      	subs	r6, r6, r5
 800aae0:	2502      	movs	r5, #2
 800aae2:	f1b9 0f00 	cmp.w	r9, #0
 800aae6:	d047      	beq.n	800ab78 <__gethex+0x38c>
 800aae8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d015      	beq.n	800ab1c <__gethex+0x330>
 800aaf0:	2b03      	cmp	r3, #3
 800aaf2:	d017      	beq.n	800ab24 <__gethex+0x338>
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d109      	bne.n	800ab0c <__gethex+0x320>
 800aaf8:	f019 0f02 	tst.w	r9, #2
 800aafc:	d006      	beq.n	800ab0c <__gethex+0x320>
 800aafe:	f8da 3000 	ldr.w	r3, [sl]
 800ab02:	ea49 0903 	orr.w	r9, r9, r3
 800ab06:	f019 0f01 	tst.w	r9, #1
 800ab0a:	d10e      	bne.n	800ab2a <__gethex+0x33e>
 800ab0c:	f045 0510 	orr.w	r5, r5, #16
 800ab10:	e032      	b.n	800ab78 <__gethex+0x38c>
 800ab12:	f04f 0901 	mov.w	r9, #1
 800ab16:	e7d1      	b.n	800aabc <__gethex+0x2d0>
 800ab18:	2501      	movs	r5, #1
 800ab1a:	e7e2      	b.n	800aae2 <__gethex+0x2f6>
 800ab1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab1e:	f1c3 0301 	rsb	r3, r3, #1
 800ab22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d0f0      	beq.n	800ab0c <__gethex+0x320>
 800ab2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ab2e:	f104 0314 	add.w	r3, r4, #20
 800ab32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ab36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ab3a:	f04f 0c00 	mov.w	ip, #0
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab44:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab48:	d01b      	beq.n	800ab82 <__gethex+0x396>
 800ab4a:	3201      	adds	r2, #1
 800ab4c:	6002      	str	r2, [r0, #0]
 800ab4e:	2d02      	cmp	r5, #2
 800ab50:	f104 0314 	add.w	r3, r4, #20
 800ab54:	d13c      	bne.n	800abd0 <__gethex+0x3e4>
 800ab56:	f8d8 2000 	ldr.w	r2, [r8]
 800ab5a:	3a01      	subs	r2, #1
 800ab5c:	42b2      	cmp	r2, r6
 800ab5e:	d109      	bne.n	800ab74 <__gethex+0x388>
 800ab60:	1171      	asrs	r1, r6, #5
 800ab62:	2201      	movs	r2, #1
 800ab64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab68:	f006 061f 	and.w	r6, r6, #31
 800ab6c:	fa02 f606 	lsl.w	r6, r2, r6
 800ab70:	421e      	tst	r6, r3
 800ab72:	d13a      	bne.n	800abea <__gethex+0x3fe>
 800ab74:	f045 0520 	orr.w	r5, r5, #32
 800ab78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab7a:	601c      	str	r4, [r3, #0]
 800ab7c:	9b02      	ldr	r3, [sp, #8]
 800ab7e:	601f      	str	r7, [r3, #0]
 800ab80:	e6b0      	b.n	800a8e4 <__gethex+0xf8>
 800ab82:	4299      	cmp	r1, r3
 800ab84:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab88:	d8d9      	bhi.n	800ab3e <__gethex+0x352>
 800ab8a:	68a3      	ldr	r3, [r4, #8]
 800ab8c:	459b      	cmp	fp, r3
 800ab8e:	db17      	blt.n	800abc0 <__gethex+0x3d4>
 800ab90:	6861      	ldr	r1, [r4, #4]
 800ab92:	9801      	ldr	r0, [sp, #4]
 800ab94:	3101      	adds	r1, #1
 800ab96:	f7fd fe43 	bl	8008820 <_Balloc>
 800ab9a:	4681      	mov	r9, r0
 800ab9c:	b918      	cbnz	r0, 800aba6 <__gethex+0x3ba>
 800ab9e:	4b1a      	ldr	r3, [pc, #104]	@ (800ac08 <__gethex+0x41c>)
 800aba0:	4602      	mov	r2, r0
 800aba2:	2184      	movs	r1, #132	@ 0x84
 800aba4:	e6c5      	b.n	800a932 <__gethex+0x146>
 800aba6:	6922      	ldr	r2, [r4, #16]
 800aba8:	3202      	adds	r2, #2
 800abaa:	f104 010c 	add.w	r1, r4, #12
 800abae:	0092      	lsls	r2, r2, #2
 800abb0:	300c      	adds	r0, #12
 800abb2:	f7ff fd69 	bl	800a688 <memcpy>
 800abb6:	4621      	mov	r1, r4
 800abb8:	9801      	ldr	r0, [sp, #4]
 800abba:	f7fd fe71 	bl	80088a0 <_Bfree>
 800abbe:	464c      	mov	r4, r9
 800abc0:	6923      	ldr	r3, [r4, #16]
 800abc2:	1c5a      	adds	r2, r3, #1
 800abc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abc8:	6122      	str	r2, [r4, #16]
 800abca:	2201      	movs	r2, #1
 800abcc:	615a      	str	r2, [r3, #20]
 800abce:	e7be      	b.n	800ab4e <__gethex+0x362>
 800abd0:	6922      	ldr	r2, [r4, #16]
 800abd2:	455a      	cmp	r2, fp
 800abd4:	dd0b      	ble.n	800abee <__gethex+0x402>
 800abd6:	2101      	movs	r1, #1
 800abd8:	4620      	mov	r0, r4
 800abda:	f7ff fd9f 	bl	800a71c <rshift>
 800abde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abe2:	3701      	adds	r7, #1
 800abe4:	42bb      	cmp	r3, r7
 800abe6:	f6ff aee0 	blt.w	800a9aa <__gethex+0x1be>
 800abea:	2501      	movs	r5, #1
 800abec:	e7c2      	b.n	800ab74 <__gethex+0x388>
 800abee:	f016 061f 	ands.w	r6, r6, #31
 800abf2:	d0fa      	beq.n	800abea <__gethex+0x3fe>
 800abf4:	4453      	add	r3, sl
 800abf6:	f1c6 0620 	rsb	r6, r6, #32
 800abfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800abfe:	f7fd ff01 	bl	8008a04 <__hi0bits>
 800ac02:	42b0      	cmp	r0, r6
 800ac04:	dbe7      	blt.n	800abd6 <__gethex+0x3ea>
 800ac06:	e7f0      	b.n	800abea <__gethex+0x3fe>
 800ac08:	0800b0fd 	.word	0x0800b0fd

0800ac0c <L_shift>:
 800ac0c:	f1c2 0208 	rsb	r2, r2, #8
 800ac10:	0092      	lsls	r2, r2, #2
 800ac12:	b570      	push	{r4, r5, r6, lr}
 800ac14:	f1c2 0620 	rsb	r6, r2, #32
 800ac18:	6843      	ldr	r3, [r0, #4]
 800ac1a:	6804      	ldr	r4, [r0, #0]
 800ac1c:	fa03 f506 	lsl.w	r5, r3, r6
 800ac20:	432c      	orrs	r4, r5
 800ac22:	40d3      	lsrs	r3, r2
 800ac24:	6004      	str	r4, [r0, #0]
 800ac26:	f840 3f04 	str.w	r3, [r0, #4]!
 800ac2a:	4288      	cmp	r0, r1
 800ac2c:	d3f4      	bcc.n	800ac18 <L_shift+0xc>
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}

0800ac30 <__match>:
 800ac30:	b530      	push	{r4, r5, lr}
 800ac32:	6803      	ldr	r3, [r0, #0]
 800ac34:	3301      	adds	r3, #1
 800ac36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac3a:	b914      	cbnz	r4, 800ac42 <__match+0x12>
 800ac3c:	6003      	str	r3, [r0, #0]
 800ac3e:	2001      	movs	r0, #1
 800ac40:	bd30      	pop	{r4, r5, pc}
 800ac42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ac4a:	2d19      	cmp	r5, #25
 800ac4c:	bf98      	it	ls
 800ac4e:	3220      	addls	r2, #32
 800ac50:	42a2      	cmp	r2, r4
 800ac52:	d0f0      	beq.n	800ac36 <__match+0x6>
 800ac54:	2000      	movs	r0, #0
 800ac56:	e7f3      	b.n	800ac40 <__match+0x10>

0800ac58 <__hexnan>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	680b      	ldr	r3, [r1, #0]
 800ac5e:	6801      	ldr	r1, [r0, #0]
 800ac60:	115e      	asrs	r6, r3, #5
 800ac62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac66:	f013 031f 	ands.w	r3, r3, #31
 800ac6a:	b087      	sub	sp, #28
 800ac6c:	bf18      	it	ne
 800ac6e:	3604      	addne	r6, #4
 800ac70:	2500      	movs	r5, #0
 800ac72:	1f37      	subs	r7, r6, #4
 800ac74:	4682      	mov	sl, r0
 800ac76:	4690      	mov	r8, r2
 800ac78:	9301      	str	r3, [sp, #4]
 800ac7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac7e:	46b9      	mov	r9, r7
 800ac80:	463c      	mov	r4, r7
 800ac82:	9502      	str	r5, [sp, #8]
 800ac84:	46ab      	mov	fp, r5
 800ac86:	784a      	ldrb	r2, [r1, #1]
 800ac88:	1c4b      	adds	r3, r1, #1
 800ac8a:	9303      	str	r3, [sp, #12]
 800ac8c:	b342      	cbz	r2, 800ace0 <__hexnan+0x88>
 800ac8e:	4610      	mov	r0, r2
 800ac90:	9105      	str	r1, [sp, #20]
 800ac92:	9204      	str	r2, [sp, #16]
 800ac94:	f7ff fd94 	bl	800a7c0 <__hexdig_fun>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d151      	bne.n	800ad40 <__hexnan+0xe8>
 800ac9c:	9a04      	ldr	r2, [sp, #16]
 800ac9e:	9905      	ldr	r1, [sp, #20]
 800aca0:	2a20      	cmp	r2, #32
 800aca2:	d818      	bhi.n	800acd6 <__hexnan+0x7e>
 800aca4:	9b02      	ldr	r3, [sp, #8]
 800aca6:	459b      	cmp	fp, r3
 800aca8:	dd13      	ble.n	800acd2 <__hexnan+0x7a>
 800acaa:	454c      	cmp	r4, r9
 800acac:	d206      	bcs.n	800acbc <__hexnan+0x64>
 800acae:	2d07      	cmp	r5, #7
 800acb0:	dc04      	bgt.n	800acbc <__hexnan+0x64>
 800acb2:	462a      	mov	r2, r5
 800acb4:	4649      	mov	r1, r9
 800acb6:	4620      	mov	r0, r4
 800acb8:	f7ff ffa8 	bl	800ac0c <L_shift>
 800acbc:	4544      	cmp	r4, r8
 800acbe:	d952      	bls.n	800ad66 <__hexnan+0x10e>
 800acc0:	2300      	movs	r3, #0
 800acc2:	f1a4 0904 	sub.w	r9, r4, #4
 800acc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800acca:	f8cd b008 	str.w	fp, [sp, #8]
 800acce:	464c      	mov	r4, r9
 800acd0:	461d      	mov	r5, r3
 800acd2:	9903      	ldr	r1, [sp, #12]
 800acd4:	e7d7      	b.n	800ac86 <__hexnan+0x2e>
 800acd6:	2a29      	cmp	r2, #41	@ 0x29
 800acd8:	d157      	bne.n	800ad8a <__hexnan+0x132>
 800acda:	3102      	adds	r1, #2
 800acdc:	f8ca 1000 	str.w	r1, [sl]
 800ace0:	f1bb 0f00 	cmp.w	fp, #0
 800ace4:	d051      	beq.n	800ad8a <__hexnan+0x132>
 800ace6:	454c      	cmp	r4, r9
 800ace8:	d206      	bcs.n	800acf8 <__hexnan+0xa0>
 800acea:	2d07      	cmp	r5, #7
 800acec:	dc04      	bgt.n	800acf8 <__hexnan+0xa0>
 800acee:	462a      	mov	r2, r5
 800acf0:	4649      	mov	r1, r9
 800acf2:	4620      	mov	r0, r4
 800acf4:	f7ff ff8a 	bl	800ac0c <L_shift>
 800acf8:	4544      	cmp	r4, r8
 800acfa:	d936      	bls.n	800ad6a <__hexnan+0x112>
 800acfc:	f1a8 0204 	sub.w	r2, r8, #4
 800ad00:	4623      	mov	r3, r4
 800ad02:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad06:	f842 1f04 	str.w	r1, [r2, #4]!
 800ad0a:	429f      	cmp	r7, r3
 800ad0c:	d2f9      	bcs.n	800ad02 <__hexnan+0xaa>
 800ad0e:	1b3b      	subs	r3, r7, r4
 800ad10:	f023 0303 	bic.w	r3, r3, #3
 800ad14:	3304      	adds	r3, #4
 800ad16:	3401      	adds	r4, #1
 800ad18:	3e03      	subs	r6, #3
 800ad1a:	42b4      	cmp	r4, r6
 800ad1c:	bf88      	it	hi
 800ad1e:	2304      	movhi	r3, #4
 800ad20:	4443      	add	r3, r8
 800ad22:	2200      	movs	r2, #0
 800ad24:	f843 2b04 	str.w	r2, [r3], #4
 800ad28:	429f      	cmp	r7, r3
 800ad2a:	d2fb      	bcs.n	800ad24 <__hexnan+0xcc>
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	b91b      	cbnz	r3, 800ad38 <__hexnan+0xe0>
 800ad30:	4547      	cmp	r7, r8
 800ad32:	d128      	bne.n	800ad86 <__hexnan+0x12e>
 800ad34:	2301      	movs	r3, #1
 800ad36:	603b      	str	r3, [r7, #0]
 800ad38:	2005      	movs	r0, #5
 800ad3a:	b007      	add	sp, #28
 800ad3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad40:	3501      	adds	r5, #1
 800ad42:	2d08      	cmp	r5, #8
 800ad44:	f10b 0b01 	add.w	fp, fp, #1
 800ad48:	dd06      	ble.n	800ad58 <__hexnan+0x100>
 800ad4a:	4544      	cmp	r4, r8
 800ad4c:	d9c1      	bls.n	800acd2 <__hexnan+0x7a>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad54:	2501      	movs	r5, #1
 800ad56:	3c04      	subs	r4, #4
 800ad58:	6822      	ldr	r2, [r4, #0]
 800ad5a:	f000 000f 	and.w	r0, r0, #15
 800ad5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ad62:	6020      	str	r0, [r4, #0]
 800ad64:	e7b5      	b.n	800acd2 <__hexnan+0x7a>
 800ad66:	2508      	movs	r5, #8
 800ad68:	e7b3      	b.n	800acd2 <__hexnan+0x7a>
 800ad6a:	9b01      	ldr	r3, [sp, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d0dd      	beq.n	800ad2c <__hexnan+0xd4>
 800ad70:	f1c3 0320 	rsb	r3, r3, #32
 800ad74:	f04f 32ff 	mov.w	r2, #4294967295
 800ad78:	40da      	lsrs	r2, r3
 800ad7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ad7e:	4013      	ands	r3, r2
 800ad80:	f846 3c04 	str.w	r3, [r6, #-4]
 800ad84:	e7d2      	b.n	800ad2c <__hexnan+0xd4>
 800ad86:	3f04      	subs	r7, #4
 800ad88:	e7d0      	b.n	800ad2c <__hexnan+0xd4>
 800ad8a:	2004      	movs	r0, #4
 800ad8c:	e7d5      	b.n	800ad3a <__hexnan+0xe2>

0800ad8e <__ascii_mbtowc>:
 800ad8e:	b082      	sub	sp, #8
 800ad90:	b901      	cbnz	r1, 800ad94 <__ascii_mbtowc+0x6>
 800ad92:	a901      	add	r1, sp, #4
 800ad94:	b142      	cbz	r2, 800ada8 <__ascii_mbtowc+0x1a>
 800ad96:	b14b      	cbz	r3, 800adac <__ascii_mbtowc+0x1e>
 800ad98:	7813      	ldrb	r3, [r2, #0]
 800ad9a:	600b      	str	r3, [r1, #0]
 800ad9c:	7812      	ldrb	r2, [r2, #0]
 800ad9e:	1e10      	subs	r0, r2, #0
 800ada0:	bf18      	it	ne
 800ada2:	2001      	movne	r0, #1
 800ada4:	b002      	add	sp, #8
 800ada6:	4770      	bx	lr
 800ada8:	4610      	mov	r0, r2
 800adaa:	e7fb      	b.n	800ada4 <__ascii_mbtowc+0x16>
 800adac:	f06f 0001 	mvn.w	r0, #1
 800adb0:	e7f8      	b.n	800ada4 <__ascii_mbtowc+0x16>

0800adb2 <_realloc_r>:
 800adb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adb6:	4607      	mov	r7, r0
 800adb8:	4614      	mov	r4, r2
 800adba:	460d      	mov	r5, r1
 800adbc:	b921      	cbnz	r1, 800adc8 <_realloc_r+0x16>
 800adbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adc2:	4611      	mov	r1, r2
 800adc4:	f7fd bca0 	b.w	8008708 <_malloc_r>
 800adc8:	b92a      	cbnz	r2, 800add6 <_realloc_r+0x24>
 800adca:	f7fd fc29 	bl	8008620 <_free_r>
 800adce:	4625      	mov	r5, r4
 800add0:	4628      	mov	r0, r5
 800add2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add6:	f000 f840 	bl	800ae5a <_malloc_usable_size_r>
 800adda:	4284      	cmp	r4, r0
 800addc:	4606      	mov	r6, r0
 800adde:	d802      	bhi.n	800ade6 <_realloc_r+0x34>
 800ade0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ade4:	d8f4      	bhi.n	800add0 <_realloc_r+0x1e>
 800ade6:	4621      	mov	r1, r4
 800ade8:	4638      	mov	r0, r7
 800adea:	f7fd fc8d 	bl	8008708 <_malloc_r>
 800adee:	4680      	mov	r8, r0
 800adf0:	b908      	cbnz	r0, 800adf6 <_realloc_r+0x44>
 800adf2:	4645      	mov	r5, r8
 800adf4:	e7ec      	b.n	800add0 <_realloc_r+0x1e>
 800adf6:	42b4      	cmp	r4, r6
 800adf8:	4622      	mov	r2, r4
 800adfa:	4629      	mov	r1, r5
 800adfc:	bf28      	it	cs
 800adfe:	4632      	movcs	r2, r6
 800ae00:	f7ff fc42 	bl	800a688 <memcpy>
 800ae04:	4629      	mov	r1, r5
 800ae06:	4638      	mov	r0, r7
 800ae08:	f7fd fc0a 	bl	8008620 <_free_r>
 800ae0c:	e7f1      	b.n	800adf2 <_realloc_r+0x40>

0800ae0e <__ascii_wctomb>:
 800ae0e:	4603      	mov	r3, r0
 800ae10:	4608      	mov	r0, r1
 800ae12:	b141      	cbz	r1, 800ae26 <__ascii_wctomb+0x18>
 800ae14:	2aff      	cmp	r2, #255	@ 0xff
 800ae16:	d904      	bls.n	800ae22 <__ascii_wctomb+0x14>
 800ae18:	228a      	movs	r2, #138	@ 0x8a
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae20:	4770      	bx	lr
 800ae22:	700a      	strb	r2, [r1, #0]
 800ae24:	2001      	movs	r0, #1
 800ae26:	4770      	bx	lr

0800ae28 <fiprintf>:
 800ae28:	b40e      	push	{r1, r2, r3}
 800ae2a:	b503      	push	{r0, r1, lr}
 800ae2c:	4601      	mov	r1, r0
 800ae2e:	ab03      	add	r3, sp, #12
 800ae30:	4805      	ldr	r0, [pc, #20]	@ (800ae48 <fiprintf+0x20>)
 800ae32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae36:	6800      	ldr	r0, [r0, #0]
 800ae38:	9301      	str	r3, [sp, #4]
 800ae3a:	f7ff f9a1 	bl	800a180 <_vfiprintf_r>
 800ae3e:	b002      	add	sp, #8
 800ae40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae44:	b003      	add	sp, #12
 800ae46:	4770      	bx	lr
 800ae48:	20000018 	.word	0x20000018

0800ae4c <abort>:
 800ae4c:	b508      	push	{r3, lr}
 800ae4e:	2006      	movs	r0, #6
 800ae50:	f000 f834 	bl	800aebc <raise>
 800ae54:	2001      	movs	r0, #1
 800ae56:	f7f7 fab9 	bl	80023cc <_exit>

0800ae5a <_malloc_usable_size_r>:
 800ae5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae5e:	1f18      	subs	r0, r3, #4
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	bfbc      	itt	lt
 800ae64:	580b      	ldrlt	r3, [r1, r0]
 800ae66:	18c0      	addlt	r0, r0, r3
 800ae68:	4770      	bx	lr

0800ae6a <_raise_r>:
 800ae6a:	291f      	cmp	r1, #31
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	4605      	mov	r5, r0
 800ae70:	460c      	mov	r4, r1
 800ae72:	d904      	bls.n	800ae7e <_raise_r+0x14>
 800ae74:	2316      	movs	r3, #22
 800ae76:	6003      	str	r3, [r0, #0]
 800ae78:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7c:	bd38      	pop	{r3, r4, r5, pc}
 800ae7e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae80:	b112      	cbz	r2, 800ae88 <_raise_r+0x1e>
 800ae82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae86:	b94b      	cbnz	r3, 800ae9c <_raise_r+0x32>
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f000 f831 	bl	800aef0 <_getpid_r>
 800ae8e:	4622      	mov	r2, r4
 800ae90:	4601      	mov	r1, r0
 800ae92:	4628      	mov	r0, r5
 800ae94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae98:	f000 b818 	b.w	800aecc <_kill_r>
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d00a      	beq.n	800aeb6 <_raise_r+0x4c>
 800aea0:	1c59      	adds	r1, r3, #1
 800aea2:	d103      	bne.n	800aeac <_raise_r+0x42>
 800aea4:	2316      	movs	r3, #22
 800aea6:	6003      	str	r3, [r0, #0]
 800aea8:	2001      	movs	r0, #1
 800aeaa:	e7e7      	b.n	800ae7c <_raise_r+0x12>
 800aeac:	2100      	movs	r1, #0
 800aeae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	4798      	blx	r3
 800aeb6:	2000      	movs	r0, #0
 800aeb8:	e7e0      	b.n	800ae7c <_raise_r+0x12>
	...

0800aebc <raise>:
 800aebc:	4b02      	ldr	r3, [pc, #8]	@ (800aec8 <raise+0xc>)
 800aebe:	4601      	mov	r1, r0
 800aec0:	6818      	ldr	r0, [r3, #0]
 800aec2:	f7ff bfd2 	b.w	800ae6a <_raise_r>
 800aec6:	bf00      	nop
 800aec8:	20000018 	.word	0x20000018

0800aecc <_kill_r>:
 800aecc:	b538      	push	{r3, r4, r5, lr}
 800aece:	4d07      	ldr	r5, [pc, #28]	@ (800aeec <_kill_r+0x20>)
 800aed0:	2300      	movs	r3, #0
 800aed2:	4604      	mov	r4, r0
 800aed4:	4608      	mov	r0, r1
 800aed6:	4611      	mov	r1, r2
 800aed8:	602b      	str	r3, [r5, #0]
 800aeda:	f7f7 fa67 	bl	80023ac <_kill>
 800aede:	1c43      	adds	r3, r0, #1
 800aee0:	d102      	bne.n	800aee8 <_kill_r+0x1c>
 800aee2:	682b      	ldr	r3, [r5, #0]
 800aee4:	b103      	cbz	r3, 800aee8 <_kill_r+0x1c>
 800aee6:	6023      	str	r3, [r4, #0]
 800aee8:	bd38      	pop	{r3, r4, r5, pc}
 800aeea:	bf00      	nop
 800aeec:	20000548 	.word	0x20000548

0800aef0 <_getpid_r>:
 800aef0:	f7f7 ba54 	b.w	800239c <_getpid>

0800aef4 <_init>:
 800aef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef6:	bf00      	nop
 800aef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aefa:	bc08      	pop	{r3}
 800aefc:	469e      	mov	lr, r3
 800aefe:	4770      	bx	lr

0800af00 <_fini>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	bf00      	nop
 800af04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af06:	bc08      	pop	{r3}
 800af08:	469e      	mov	lr, r3
 800af0a:	4770      	bx	lr
