
Calibration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c58  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08005e18  08005e18  00006e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fb0  08005fb0  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005fb0  08005fb0  00006fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb8  08005fb8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005fb8  08005fb8  00006fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08005fc0  08005fc0  00006fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20040000  08005fc8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  20040068  08006030  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2004051c  08006030  0000751c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fe8  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002302  00000000  00000000  00018080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0001a388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a47  00000000  00000000  0001b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d508  00000000  00000000  0001bb27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc57  00000000  00000000  0004902f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104f9a  00000000  00000000  00058c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015dc20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ecc  00000000  00000000  0015dc64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00161b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040068 	.word	0x20040068
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005e00 	.word	0x08005e00

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2004006c 	.word	0x2004006c
 80001fc:	08005e00 	.word	0x08005e00

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <_Z7printlnPKc>:

extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef hlpuart1;

void println(const char * msg){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff fe0b 	bl	8000200 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <_Z7printlnPKc+0x28>)
 80005f6:	f003 fcf1 	bl	8003fdc <HAL_UART_Transmit>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20040084 	.word	0x20040084

08000608 <_Z17delayMicrosecondsm>:

void delayMicroseconds(uint32_t us){
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	uint32_t start = DWT->CYCCNT;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <_Z17delayMicrosecondsm+0x48>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = us * (HAL_RCC_GetHCLKFreq() / 1000000);
 8000616:	f002 fb03 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 800061a:	4603      	mov	r3, r0
 800061c:	4a0d      	ldr	r2, [pc, #52]	@ (8000654 <_Z17delayMicrosecondsm+0x4c>)
 800061e:	fba2 2303 	umull	r2, r3, r2, r3
 8000622:	0c9a      	lsrs	r2, r3, #18
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	fb02 f303 	mul.w	r3, r2, r3
 800062a:	60bb      	str	r3, [r7, #8]
	while ((DWT->CYCCNT - start) < ticks);
 800062c:	bf00      	nop
 800062e:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <_Z17delayMicrosecondsm+0x48>)
 8000630:	685a      	ldr	r2, [r3, #4]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	429a      	cmp	r2, r3
 800063a:	bf8c      	ite	hi
 800063c:	2301      	movhi	r3, #1
 800063e:	2300      	movls	r3, #0
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d1f3      	bne.n	800062e <_Z17delayMicrosecondsm+0x26>
}
 8000646:	bf00      	nop
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	e0001000 	.word	0xe0001000
 8000654:	431bde83 	.word	0x431bde83

08000658 <_ZN9Link2UART5closeEv>:
public:
	int8_t open(uint32_t arg) {
		return 0;
	}

	void close() {
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <_ZN9Link2UART4recvEPhhPt>:

	int16_t recv(uint8_t *buf, uint8_t len, uint16_t *cs = NULL) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	4613      	mov	r3, r2
 800067a:	71fb      	strb	r3, [r7, #7]
		if (cs)
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d002      	beq.n	8000688 <_ZN9Link2UART4recvEPhhPt+0x1c>
			*cs = 0;
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	2200      	movs	r2, #0
 8000686:	801a      	strh	r2, [r3, #0]

		for (uint8_t i = 0; i < len; i++){
 8000688:	2300      	movs	r3, #0
 800068a:	75fb      	strb	r3, [r7, #23]
 800068c:	e022      	b.n	80006d4 <_ZN9Link2UART4recvEPhhPt+0x68>
			uint8_t byte = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	757b      	strb	r3, [r7, #21]
			HAL_StatusTypeDef ret = HAL_UART_Receive(&huart3, &byte, 1, 2); // timeout = 2ms
 8000692:	f107 0115 	add.w	r1, r7, #21
 8000696:	2302      	movs	r3, #2
 8000698:	2201      	movs	r2, #1
 800069a:	4813      	ldr	r0, [pc, #76]	@ (80006e8 <_ZN9Link2UART4recvEPhhPt+0x7c>)
 800069c:	f003 fd2c 	bl	80040f8 <HAL_UART_Receive>
 80006a0:	4603      	mov	r3, r0
 80006a2:	75bb      	strb	r3, [r7, #22]

			if (ret != HAL_OK){
 80006a4:	7dbb      	ldrb	r3, [r7, #22]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d002      	beq.n	80006b0 <_ZN9Link2UART4recvEPhhPt+0x44>
				return -1;
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
 80006ae:	e017      	b.n	80006e0 <_ZN9Link2UART4recvEPhhPt+0x74>
			}
			buf[i] = byte;
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	4413      	add	r3, r2
 80006b6:	7d7a      	ldrb	r2, [r7, #21]
 80006b8:	701a      	strb	r2, [r3, #0]

			if (cs)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d006      	beq.n	80006ce <_ZN9Link2UART4recvEPhhPt+0x62>
				*cs += byte;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	7d7a      	ldrb	r2, [r7, #21]
 80006c6:	4413      	add	r3, r2
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++){
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	3301      	adds	r3, #1
 80006d2:	75fb      	strb	r3, [r7, #23]
 80006d4:	7dfa      	ldrb	r2, [r7, #23]
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d3d8      	bcc.n	800068e <_ZN9Link2UART4recvEPhhPt+0x22>
		}

		return len;
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	b21b      	sxth	r3, r3
	}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20040118 	.word	0x20040118

080006ec <_ZN9Link2UART4sendEPhh>:

	int16_t send(uint8_t *buf, uint8_t len) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	4613      	mov	r3, r2
 80006f8:	71fb      	strb	r3, [r7, #7]
		if (HAL_UART_Transmit(&huart3, buf, len, HAL_MAX_DELAY) != HAL_OK)
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	68b9      	ldr	r1, [r7, #8]
 8000704:	4809      	ldr	r0, [pc, #36]	@ (800072c <_ZN9Link2UART4sendEPhh+0x40>)
 8000706:	f003 fc69 	bl	8003fdc <HAL_UART_Transmit>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf14      	ite	ne
 8000710:	2301      	movne	r3, #1
 8000712:	2300      	moveq	r3, #0
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <_ZN9Link2UART4sendEPhh+0x34>
			return -1;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
 800071e:	e001      	b.n	8000724 <_ZN9Link2UART4sendEPhh+0x38>
		return len;
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	b21b      	sxth	r3, r3
	}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20040118 	.word	0x20040118

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b08b      	sub	sp, #44	@ 0x2c
 8000734:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f001 f87e 	bl	8001836 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f92f 	bl	800099c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073e:	f000 fa85 	bl	8000c4c <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8000742:	f000 f981 	bl	8000a48 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART3_UART_Init();
 8000746:	f000 f9df 	bl	8000b08 <_ZL19MX_USART3_UART_Initv>
  MX_SPI1_Init();
 800074a:	f000 fa3d 	bl	8000bc8 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */
	DWT_Init();
 800074e:	f000 fb51 	bl	8000df4 <_Z8DWT_Initv>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// Blink current spot LED
		set_led(current_spot, 0, 0, 255, 15); // Blue
 8000752:	4b88      	ldr	r3, [pc, #544]	@ (8000974 <main+0x244>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	230f      	movs	r3, #15
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	23ff      	movs	r3, #255	@ 0xff
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	f000 fbeb 	bl	8000f3c <_Z7set_ledihhhh>
		APA102_SendFrame();
 8000766:	f000 fb9d 	bl	8000ea4 <_Z16APA102_SendFramev>
		HAL_Delay(1000);
 800076a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800076e:	f001 f8d7 	bl	8001920 <HAL_Delay>
		set_led(current_spot, 0, 0, 0, 1);
 8000772:	4b80      	ldr	r3, [pc, #512]	@ (8000974 <main+0x244>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	2301      	movs	r3, #1
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2300      	movs	r3, #0
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	f000 fbdb 	bl	8000f3c <_Z7set_ledihhhh>
		APA102_SendFrame();
 8000786:	f000 fb8d 	bl	8000ea4 <_Z16APA102_SendFramev>
		HAL_Delay(1000);
 800078a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800078e:	f001 f8c7 	bl	8001920 <HAL_Delay>

		if (is_button_pressed() ) {
 8000792:	f000 fb49 	bl	8000e28 <_Z17is_button_pressedv>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0da      	beq.n	8000752 <main+0x22>

			printf("Calibrating spot %d...\r\n", current_spot);
 800079c:	4b75      	ldr	r3, [pc, #468]	@ (8000974 <main+0x244>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	4875      	ldr	r0, [pc, #468]	@ (8000978 <main+0x248>)
 80007a4:	f004 fd10 	bl	80051c8 <iprintf>

			// Solid blue during capture
			//set_led(current_spot, 0, 0, 255, 31);
			//APA102_SendFrame();

			uint32_t start_time = HAL_GetTick();
 80007a8:	f001 f8ae 	bl	8001908 <HAL_GetTick>
 80007ac:	60f8      	str	r0, [r7, #12]
			uint32_t total_x = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
			uint32_t total_y = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
			uint32_t current_x = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
			uint32_t current_y = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
			uint16_t samples = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	82fb      	strh	r3, [r7, #22]

			while ((HAL_GetTick() - start_time) < CAPTURE_TIME_MS) {
 80007c2:	e024      	b.n	800080e <main+0xde>
				pixy.ccc.getBlocks();
 80007c4:	23ff      	movs	r3, #255	@ 0xff
 80007c6:	22ff      	movs	r2, #255	@ 0xff
 80007c8:	2101      	movs	r1, #1
 80007ca:	486c      	ldr	r0, [pc, #432]	@ (800097c <main+0x24c>)
 80007cc:	f000 fc20 	bl	8001010 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh>
				if (pixy.ccc.numBlocks > 0) {
 80007d0:	4b6b      	ldr	r3, [pc, #428]	@ (8000980 <main+0x250>)
 80007d2:	7a1b      	ldrb	r3, [r3, #8]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d017      	beq.n	8000808 <main+0xd8>
					current_x = pixy.ccc.blocks[0].m_x;
 80007d8:	4b69      	ldr	r3, [pc, #420]	@ (8000980 <main+0x250>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	885b      	ldrh	r3, [r3, #2]
 80007de:	60bb      	str	r3, [r7, #8]
					current_y = pixy.ccc.blocks[0].m_y;
 80007e0:	4b67      	ldr	r3, [pc, #412]	@ (8000980 <main+0x250>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	889b      	ldrh	r3, [r3, #4]
 80007e6:	607b      	str	r3, [r7, #4]
					total_x += current_x;
 80007e8:	69fa      	ldr	r2, [r7, #28]
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	4413      	add	r3, r2
 80007ee:	61fb      	str	r3, [r7, #28]
					total_y += current_y;
 80007f0:	69ba      	ldr	r2, [r7, #24]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	61bb      	str	r3, [r7, #24]
					samples++;
 80007f8:	8afb      	ldrh	r3, [r7, #22]
 80007fa:	3301      	adds	r3, #1
 80007fc:	82fb      	strh	r3, [r7, #22]
					printf("Recognized block position: %d, %d\r\n", current_x, current_y);
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	4860      	ldr	r0, [pc, #384]	@ (8000984 <main+0x254>)
 8000804:	f004 fce0 	bl	80051c8 <iprintf>
				}
				HAL_Delay (10);
 8000808:	200a      	movs	r0, #10
 800080a:	f001 f889 	bl	8001920 <HAL_Delay>
			while ((HAL_GetTick() - start_time) < CAPTURE_TIME_MS) {
 800080e:	f001 f87b 	bl	8001908 <HAL_GetTick>
 8000812:	4602      	mov	r2, r0
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	f241 3287 	movw	r2, #4999	@ 0x1387
 800081c:	4293      	cmp	r3, r2
 800081e:	bf94      	ite	ls
 8000820:	2301      	movls	r3, #1
 8000822:	2300      	movhi	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1cc      	bne.n	80007c4 <main+0x94>
			}

			if (samples > 0) {
 800082a:	8afb      	ldrh	r3, [r7, #22]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d055      	beq.n	80008dc <main+0x1ac>
				parking_spots[current_spot].x_center = total_x / samples;
 8000830:	8afb      	ldrh	r3, [r7, #22]
 8000832:	69fa      	ldr	r2, [r7, #28]
 8000834:	fbb2 f2f3 	udiv	r2, r2, r3
 8000838:	4b4e      	ldr	r3, [pc, #312]	@ (8000974 <main+0x244>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	b290      	uxth	r0, r2
 8000840:	4a51      	ldr	r2, [pc, #324]	@ (8000988 <main+0x258>)
 8000842:	460b      	mov	r3, r1
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	440b      	add	r3, r1
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	4602      	mov	r2, r0
 800084e:	801a      	strh	r2, [r3, #0]
				parking_spots[current_spot].y_center = total_y / samples;
 8000850:	8afb      	ldrh	r3, [r7, #22]
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	fbb2 f2f3 	udiv	r2, r2, r3
 8000858:	4b46      	ldr	r3, [pc, #280]	@ (8000974 <main+0x244>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	b290      	uxth	r0, r2
 8000860:	4a49      	ldr	r2, [pc, #292]	@ (8000988 <main+0x258>)
 8000862:	460b      	mov	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	440b      	add	r3, r1
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	3302      	adds	r3, #2
 800086e:	4602      	mov	r2, r0
 8000870:	801a      	strh	r2, [r3, #0]
				parking_spots[current_spot].radius = 20; // Default radius
 8000872:	4b40      	ldr	r3, [pc, #256]	@ (8000974 <main+0x244>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4619      	mov	r1, r3
 8000878:	4a43      	ldr	r2, [pc, #268]	@ (8000988 <main+0x258>)
 800087a:	460b      	mov	r3, r1
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	440b      	add	r3, r1
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	4413      	add	r3, r2
 8000884:	3304      	adds	r3, #4
 8000886:	2214      	movs	r2, #20
 8000888:	801a      	strh	r2, [r3, #0]

				// Green indicates success
				set_led(current_spot, 0, 255, 0, 31);
 800088a:	4b3a      	ldr	r3, [pc, #232]	@ (8000974 <main+0x244>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	231f      	movs	r3, #31
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2300      	movs	r3, #0
 8000896:	22ff      	movs	r2, #255	@ 0xff
 8000898:	2100      	movs	r1, #0
 800089a:	f000 fb4f 	bl	8000f3c <_Z7set_ledihhhh>
				printf("Spot %d: X=%u, Y=%u\r\n", current_spot,
 800089e:	4b35      	ldr	r3, [pc, #212]	@ (8000974 <main+0x244>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
						parking_spots[current_spot].x_center,
 80008a4:	4b33      	ldr	r3, [pc, #204]	@ (8000974 <main+0x244>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	4a37      	ldr	r2, [pc, #220]	@ (8000988 <main+0x258>)
 80008ac:	460b      	mov	r3, r1
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	440b      	add	r3, r1
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	881b      	ldrh	r3, [r3, #0]
				printf("Spot %d: X=%u, Y=%u\r\n", current_spot,
 80008b8:	461c      	mov	r4, r3
						parking_spots[current_spot].y_center);
 80008ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000974 <main+0x244>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	4619      	mov	r1, r3
 80008c0:	4a31      	ldr	r2, [pc, #196]	@ (8000988 <main+0x258>)
 80008c2:	460b      	mov	r3, r1
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	440b      	add	r3, r1
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	3302      	adds	r3, #2
 80008ce:	881b      	ldrh	r3, [r3, #0]
				printf("Spot %d: X=%u, Y=%u\r\n", current_spot,
 80008d0:	4622      	mov	r2, r4
 80008d2:	4601      	mov	r1, r0
 80008d4:	482d      	ldr	r0, [pc, #180]	@ (800098c <main+0x25c>)
 80008d6:	f004 fc77 	bl	80051c8 <iprintf>
 80008da:	e00f      	b.n	80008fc <main+0x1cc>
			} else {
				// Red indicates failure
				set_led(current_spot, 255, 0, 0, 31);
 80008dc:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <main+0x244>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	231f      	movs	r3, #31
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2300      	movs	r3, #0
 80008e8:	2200      	movs	r2, #0
 80008ea:	21ff      	movs	r1, #255	@ 0xff
 80008ec:	f000 fb26 	bl	8000f3c <_Z7set_ledihhhh>
				printf("Error: No tag detected for spot %d\r\n", current_spot);
 80008f0:	4b20      	ldr	r3, [pc, #128]	@ (8000974 <main+0x244>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	4826      	ldr	r0, [pc, #152]	@ (8000990 <main+0x260>)
 80008f8:	f004 fc66 	bl	80051c8 <iprintf>
			}

			APA102_SendFrame();
 80008fc:	f000 fad2 	bl	8000ea4 <_Z16APA102_SendFramev>
			HAL_Delay(2000);
 8000900:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000904:	f001 f80c 	bl	8001920 <HAL_Delay>

			if (++current_spot >= NUM_SPOTS) {
 8000908:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <main+0x244>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <main+0x244>)
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <main+0x244>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b23      	cmp	r3, #35	@ 0x23
 800091a:	bf8c      	ite	hi
 800091c:	2301      	movhi	r3, #1
 800091e:	2300      	movls	r3, #0
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	f43f af15 	beq.w	8000752 <main+0x22>
				printf("Calibration Complete!\r\nFinal Positions:\r\n");
 8000928:	481a      	ldr	r0, [pc, #104]	@ (8000994 <main+0x264>)
 800092a:	f004 fcb5 	bl	8005298 <puts>
				for (int i = 0; i < NUM_SPOTS; i++) {
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	e019      	b.n	8000968 <main+0x238>
					printf("Spot %02d: X=%4u, Y=%4u\r\n", i,
							parking_spots[i].x_center,
 8000934:	4914      	ldr	r1, [pc, #80]	@ (8000988 <main+0x258>)
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4613      	mov	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	4413      	add	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	440b      	add	r3, r1
 8000942:	881b      	ldrh	r3, [r3, #0]
					printf("Spot %02d: X=%4u, Y=%4u\r\n", i,
 8000944:	4618      	mov	r0, r3
							parking_spots[i].y_center);
 8000946:	4910      	ldr	r1, [pc, #64]	@ (8000988 <main+0x258>)
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	440b      	add	r3, r1
 8000954:	3302      	adds	r3, #2
 8000956:	881b      	ldrh	r3, [r3, #0]
					printf("Spot %02d: X=%4u, Y=%4u\r\n", i,
 8000958:	4602      	mov	r2, r0
 800095a:	6939      	ldr	r1, [r7, #16]
 800095c:	480e      	ldr	r0, [pc, #56]	@ (8000998 <main+0x268>)
 800095e:	f004 fc33 	bl	80051c8 <iprintf>
				for (int i = 0; i < NUM_SPOTS; i++) {
 8000962:	693b      	ldr	r3, [r7, #16]
 8000964:	3301      	adds	r3, #1
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	2b23      	cmp	r3, #35	@ 0x23
 800096c:	dde2      	ble.n	8000934 <main+0x204>
				}
				while (1)
 800096e:	bf00      	nop
 8000970:	e7fd      	b.n	800096e <main+0x23e>
 8000972:	bf00      	nop
 8000974:	200403bc 	.word	0x200403bc
 8000978:	08005e18 	.word	0x08005e18
 800097c:	200402a8 	.word	0x200402a8
 8000980:	200402a0 	.word	0x200402a0
 8000984:	08005e34 	.word	0x08005e34
 8000988:	200402e4 	.word	0x200402e4
 800098c:	08005e58 	.word	0x08005e58
 8000990:	08005e70 	.word	0x08005e70
 8000994:	08005e98 	.word	0x08005e98
 8000998:	08005ec4 	.word	0x08005ec4

0800099c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b096      	sub	sp, #88	@ 0x58
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2244      	movs	r2, #68	@ 0x44
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f004 fd54 	bl	8005458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	463b      	mov	r3, r7
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009c2:	f001 fa99 	bl	8001ef8 <HAL_PWREx_ControlVoltageScaling>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80009d6:	f000 fae3 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009da:	2310      	movs	r3, #16
 80009dc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009de:	2301      	movs	r3, #1
 80009e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009e6:	2360      	movs	r3, #96	@ 0x60
 80009e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 fb34 	bl	8002060 <HAL_RCC_OscConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bf14      	ite	ne
 80009fe:	2301      	movne	r3, #1
 8000a00:	2300      	moveq	r3, #0
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000a08:	f000 faca 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 ff34 	bl	8002894 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bf14      	ite	ne
 8000a32:	2301      	movne	r3, #1
 8000a34:	2300      	moveq	r3, #0
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000a3c:	f000 fab0 	bl	8000fa0 <Error_Handler>
  }
}
 8000a40:	bf00      	nop
 8000a42:	3758      	adds	r7, #88	@ 0x58
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b00 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8000b04 <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 8000a50:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a52:	4b2b      	ldr	r3, [pc, #172]	@ (8000b00 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b29      	ldr	r3, [pc, #164]	@ (8000b00 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b26      	ldr	r3, [pc, #152]	@ (8000b00 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b23      	ldr	r3, [pc, #140]	@ (8000b00 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a78:	4b21      	ldr	r3, [pc, #132]	@ (8000b00 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a7e:	4b20      	ldr	r3, [pc, #128]	@ (8000b00 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a84:	4b1e      	ldr	r3, [pc, #120]	@ (8000b00 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b00 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a90:	481b      	ldr	r0, [pc, #108]	@ (8000b00 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000a92:	f003 fa53 	bl	8003f3c <HAL_UART_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf14      	ite	ne
 8000a9c:	2301      	movne	r3, #1
 8000a9e:	2300      	moveq	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <_ZL20MX_LPUART1_UART_Initv+0x62>
  {
    Error_Handler();
 8000aa6:	f000 fa7b 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4814      	ldr	r0, [pc, #80]	@ (8000b00 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000aae:	f004 f941 	bl	8004d34 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	bf14      	ite	ne
 8000ab8:	2301      	movne	r3, #1
 8000aba:	2300      	moveq	r3, #0
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <_ZL20MX_LPUART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8000ac2:	f000 fa6d 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000aca:	f004 f971 	bl	8004db0 <HAL_UARTEx_SetRxFifoThreshold>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	bf14      	ite	ne
 8000ad4:	2301      	movne	r3, #1
 8000ad6:	2300      	moveq	r3, #0
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <_ZL20MX_LPUART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8000ade:	f000 fa5f 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ae2:	4807      	ldr	r0, [pc, #28]	@ (8000b00 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000ae4:	f004 f8ed 	bl	8004cc2 <HAL_UARTEx_DisableFifoMode>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf14      	ite	ne
 8000aee:	2301      	movne	r3, #1
 8000af0:	2300      	moveq	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <_ZL20MX_LPUART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8000af8:	f000 fa52 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20040084 	.word	0x20040084
 8000b04:	40008000 	.word	0x40008000

08000b08 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8000bc4 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8000b12:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b14:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000b18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b29      	ldr	r3, [pc, #164]	@ (8000bc0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b27      	ldr	r3, [pc, #156]	@ (8000bc0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b23      	ldr	r3, [pc, #140]	@ (8000bc0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b21      	ldr	r3, [pc, #132]	@ (8000bc0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b44:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b50:	481b      	ldr	r0, [pc, #108]	@ (8000bc0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b52:	f003 f9f3 	bl	8003f3c <HAL_UART_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	bf14      	ite	ne
 8000b5c:	2301      	movne	r3, #1
 8000b5e:	2300      	moveq	r3, #0
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8000b66:	f000 fa1b 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4814      	ldr	r0, [pc, #80]	@ (8000bc0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b6e:	f004 f8e1 	bl	8004d34 <HAL_UARTEx_SetTxFifoThreshold>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bf14      	ite	ne
 8000b78:	2301      	movne	r3, #1
 8000b7a:	2300      	moveq	r3, #0
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8000b82:	f000 fa0d 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b86:	2100      	movs	r1, #0
 8000b88:	480d      	ldr	r0, [pc, #52]	@ (8000bc0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000b8a:	f004 f911 	bl	8004db0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	bf14      	ite	ne
 8000b94:	2301      	movne	r3, #1
 8000b96:	2300      	moveq	r3, #0
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000b9e:	f000 f9ff 	bl	8000fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ba2:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000ba4:	f004 f88d 	bl	8004cc2 <HAL_UARTEx_DisableFifoMode>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bf14      	ite	ne
 8000bae:	2301      	movne	r3, #1
 8000bb0:	2300      	moveq	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000bb8:	f000 f9f2 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20040118 	.word	0x20040118
 8000bc4:	40004800 	.word	0x40004800

08000bc8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <_ZL12MX_SPI1_Initv+0x7c>)
 8000bce:	4a1e      	ldr	r2, [pc, #120]	@ (8000c48 <_ZL12MX_SPI1_Initv+0x80>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <_ZL12MX_SPI1_Initv+0x7c>)
 8000bd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <_ZL12MX_SPI1_Initv+0x7c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be0:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <_ZL12MX_SPI1_Initv+0x7c>)
 8000be2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000be6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be8:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <_ZL12MX_SPI1_Initv+0x7c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <_ZL12MX_SPI1_Initv+0x7c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf4:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <_ZL12MX_SPI1_Initv+0x7c>)
 8000bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bfa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <_ZL12MX_SPI1_Initv+0x7c>)
 8000bfe:	2210      	movs	r2, #16
 8000c00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <_ZL12MX_SPI1_Initv+0x7c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c08:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <_ZL12MX_SPI1_Initv+0x7c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <_ZL12MX_SPI1_Initv+0x7c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c14:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <_ZL12MX_SPI1_Initv+0x7c>)
 8000c16:	2207      	movs	r2, #7
 8000c18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <_ZL12MX_SPI1_Initv+0x7c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c20:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <_ZL12MX_SPI1_Initv+0x7c>)
 8000c22:	2208      	movs	r2, #8
 8000c24:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c26:	4807      	ldr	r0, [pc, #28]	@ (8000c44 <_ZL12MX_SPI1_Initv+0x7c>)
 8000c28:	f002 fe0a 	bl	8003840 <HAL_SPI_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf14      	ite	ne
 8000c32:	2301      	movne	r3, #1
 8000c34:	2300      	moveq	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8000c3c:	f000 f9b0 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200401ac 	.word	0x200401ac
 8000c48:	40013000 	.word	0x40013000

08000c4c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	@ 0x30
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	4b57      	ldr	r3, [pc, #348]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	4a56      	ldr	r2, [pc, #344]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6e:	4b54      	ldr	r3, [pc, #336]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	4b51      	ldr	r3, [pc, #324]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	4a50      	ldr	r2, [pc, #320]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c86:	4b4e      	ldr	r3, [pc, #312]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b4b      	ldr	r3, [pc, #300]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	4a4a      	ldr	r2, [pc, #296]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9e:	4b48      	ldr	r3, [pc, #288]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	4b45      	ldr	r3, [pc, #276]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	4a44      	ldr	r2, [pc, #272]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb6:	4b42      	ldr	r3, [pc, #264]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	4b3f      	ldr	r3, [pc, #252]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc6:	4a3e      	ldr	r2, [pc, #248]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cce:	4b3c      	ldr	r3, [pc, #240]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cda:	4b39      	ldr	r3, [pc, #228]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cde:	4a38      	ldr	r2, [pc, #224]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce6:	4b36      	ldr	r3, [pc, #216]	@ (8000dc0 <_ZL12MX_GPIO_Initv+0x174>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000cf2:	f001 f9a5 	bl	8002040 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000cfc:	4831      	ldr	r0, [pc, #196]	@ (8000dc4 <_ZL12MX_GPIO_Initv+0x178>)
 8000cfe:	f001 f8c3 	bl	8001e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2140      	movs	r1, #64	@ 0x40
 8000d06:	4830      	ldr	r0, [pc, #192]	@ (8000dc8 <_ZL12MX_GPIO_Initv+0x17c>)
 8000d08:	f001 f8be 	bl	8001e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	482a      	ldr	r0, [pc, #168]	@ (8000dcc <_ZL12MX_GPIO_Initv+0x180>)
 8000d22:	f000 ff07 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000d26:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4821      	ldr	r0, [pc, #132]	@ (8000dc4 <_ZL12MX_GPIO_Initv+0x178>)
 8000d40:	f000 fef8 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d44:	2320      	movs	r3, #32
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 031c 	add.w	r3, r7, #28
 8000d54:	4619      	mov	r1, r3
 8000d56:	481c      	ldr	r0, [pc, #112]	@ (8000dc8 <_ZL12MX_GPIO_Initv+0x17c>)
 8000d58:	f000 feec 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d5c:	2340      	movs	r3, #64	@ 0x40
 8000d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	4815      	ldr	r0, [pc, #84]	@ (8000dc8 <_ZL12MX_GPIO_Initv+0x17c>)
 8000d74:	f000 fede 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d78:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d8a:	230a      	movs	r3, #10
 8000d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d98:	f000 fecc 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db4:	f000 febe 	bl	8001b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000db8:	bf00      	nop
 8000dba:	3730      	adds	r7, #48	@ 0x30
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	48000400 	.word	0x48000400
 8000dc8:	48001800 	.word	0x48001800
 8000dcc:	48000800 	.word	0x48000800

08000dd0 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000dd8:	1d39      	adds	r1, r7, #4
 8000dda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dde:	2201      	movs	r2, #1
 8000de0:	4803      	ldr	r0, [pc, #12]	@ (8000df0 <__io_putchar+0x20>)
 8000de2:	f003 f8fb 	bl	8003fdc <HAL_UART_Transmit>
	return ch;
 8000de6:	687b      	ldr	r3, [r7, #4]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20040084 	.word	0x20040084

08000df4 <_Z8DWT_Initv>:

void DWT_Init(void) {
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8000df8:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <_Z8DWT_Initv+0x2c>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	4a08      	ldr	r2, [pc, #32]	@ (8000e20 <_Z8DWT_Initv+0x2c>)
 8000dfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e02:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;                                 // Reset counter
 8000e04:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <_Z8DWT_Initv+0x30>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;             // Enable the cycle counter
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <_Z8DWT_Initv+0x30>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <_Z8DWT_Initv+0x30>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6013      	str	r3, [r2, #0]
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000edf0 	.word	0xe000edf0
 8000e24:	e0001000 	.word	0xe0001000

08000e28 <_Z17is_button_pressedv>:

bool is_button_pressed() {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
    static uint32_t last_press_time = 0;
    static bool last_button_state = false;

    // Read current state
    bool current_state = (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET);
 8000e2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e32:	4819      	ldr	r0, [pc, #100]	@ (8000e98 <_Z17is_button_pressedv+0x70>)
 8000e34:	f001 f810 	bl	8001e58 <HAL_GPIO_ReadPin>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	bf0c      	ite	eq
 8000e3e:	2301      	moveq	r3, #1
 8000e40:	2300      	movne	r3, #0
 8000e42:	71fb      	strb	r3, [r7, #7]

    // Debounce logic
    if (current_state && !last_button_state) {
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d01d      	beq.n	8000e86 <_Z17is_button_pressedv+0x5e>
 8000e4a:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <_Z17is_button_pressedv+0x74>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	f083 0301 	eor.w	r3, r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d016      	beq.n	8000e86 <_Z17is_button_pressedv+0x5e>
        if ((HAL_GetTick() - last_press_time) > DEBOUNCE_TIME_MS) {
 8000e58:	f000 fd56 	bl	8001908 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <_Z17is_button_pressedv+0x78>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b32      	cmp	r3, #50	@ 0x32
 8000e66:	bf8c      	ite	hi
 8000e68:	2301      	movhi	r3, #1
 8000e6a:	2300      	movls	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d009      	beq.n	8000e86 <_Z17is_button_pressedv+0x5e>
            last_press_time = HAL_GetTick();
 8000e72:	f000 fd49 	bl	8001908 <HAL_GetTick>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4a09      	ldr	r2, [pc, #36]	@ (8000ea0 <_Z17is_button_pressedv+0x78>)
 8000e7a:	6013      	str	r3, [r2, #0]
            last_button_state = true;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <_Z17is_button_pressedv+0x74>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
            return true;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e003      	b.n	8000e8e <_Z17is_button_pressedv+0x66>
        }
    }

    // Update state
    last_button_state = current_state;
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <_Z17is_button_pressedv+0x74>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	7013      	strb	r3, [r2, #0]
    return false;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	48000800 	.word	0x48000800
 8000e9c:	200403c4 	.word	0x200403c4
 8000ea0:	200403c0 	.word	0x200403c0

08000ea4 <_Z16APA102_SendFramev>:

void APA102_SendFrame() {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
	uint8_t startFrame[4] = { 0x00, 0x00, 0x00, 0x00 };
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
	HAL_SPI_Transmit(&hspi1, startFrame, 4, HAL_MAX_DELAY);
 8000eae:	f107 0108 	add.w	r1, r7, #8
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	481e      	ldr	r0, [pc, #120]	@ (8000f34 <_Z16APA102_SendFramev+0x90>)
 8000eba:	f002 fd64 	bl	8003986 <HAL_SPI_Transmit>

	for (int i = 0; i < NUM_LEDS; i++) {
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	e023      	b.n	8000f0c <_Z16APA102_SendFramev+0x68>
		uint8_t frame[4];
		frame[0] = 0b11100000 | (led_strip[i].brightness & 0x1F); // Brightness frame
 8000ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f38 <_Z16APA102_SendFramev+0x94>)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	78db      	ldrb	r3, [r3, #3]
 8000ece:	f063 031f 	orn	r3, r3, #31
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	703b      	strb	r3, [r7, #0]
		frame[1] = led_strip[i].blue;
 8000ed6:	4a18      	ldr	r2, [pc, #96]	@ (8000f38 <_Z16APA102_SendFramev+0x94>)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000ede:	707b      	strb	r3, [r7, #1]
		frame[2] = led_strip[i].green;
 8000ee0:	4a15      	ldr	r2, [pc, #84]	@ (8000f38 <_Z16APA102_SendFramev+0x94>)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	785b      	ldrb	r3, [r3, #1]
 8000eea:	70bb      	strb	r3, [r7, #2]
		frame[3] = led_strip[i].red;
 8000eec:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <_Z16APA102_SendFramev+0x94>)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	789b      	ldrb	r3, [r3, #2]
 8000ef6:	70fb      	strb	r3, [r7, #3]
		HAL_SPI_Transmit(&hspi1, frame, 4, HAL_MAX_DELAY);
 8000ef8:	4639      	mov	r1, r7
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	2204      	movs	r2, #4
 8000f00:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <_Z16APA102_SendFramev+0x90>)
 8000f02:	f002 fd40 	bl	8003986 <HAL_SPI_Transmit>
	for (int i = 0; i < NUM_LEDS; i++) {
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b23      	cmp	r3, #35	@ 0x23
 8000f10:	ddd8      	ble.n	8000ec4 <_Z16APA102_SendFramev+0x20>
	}

	uint8_t endFrame[(NUM_LEDS / 16) + 1];
	memset(endFrame, 0xFF, sizeof(endFrame));
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2203      	movs	r2, #3
 8000f16:	21ff      	movs	r1, #255	@ 0xff
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 fa9d 	bl	8005458 <memset>
	HAL_SPI_Transmit(&hspi1, endFrame, sizeof(endFrame), HAL_MAX_DELAY);
 8000f1e:	1d39      	adds	r1, r7, #4
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	2203      	movs	r2, #3
 8000f26:	4803      	ldr	r0, [pc, #12]	@ (8000f34 <_Z16APA102_SendFramev+0x90>)
 8000f28:	f002 fd2d 	bl	8003986 <HAL_SPI_Transmit>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200401ac 	.word	0x200401ac
 8000f38:	20040210 	.word	0x20040210

08000f3c <_Z7set_ledihhhh>:

void set_led(int index, uint8_t r, uint8_t g, uint8_t b, uint8_t brightness) {
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	4608      	mov	r0, r1
 8000f46:	4611      	mov	r1, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	70fb      	strb	r3, [r7, #3]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	70bb      	strb	r3, [r7, #2]
 8000f52:	4613      	mov	r3, r2
 8000f54:	707b      	strb	r3, [r7, #1]
	if (index >= 0 && index < NUM_LEDS) {
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db19      	blt.n	8000f90 <_Z7set_ledihhhh+0x54>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b23      	cmp	r3, #35	@ 0x23
 8000f60:	dc16      	bgt.n	8000f90 <_Z7set_ledihhhh+0x54>
		led_strip[index].red = r;
 8000f62:	4a0e      	ldr	r2, [pc, #56]	@ (8000f9c <_Z7set_ledihhhh+0x60>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	78fa      	ldrb	r2, [r7, #3]
 8000f6c:	709a      	strb	r2, [r3, #2]
		led_strip[index].green = g;
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <_Z7set_ledihhhh+0x60>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	78ba      	ldrb	r2, [r7, #2]
 8000f78:	705a      	strb	r2, [r3, #1]
		led_strip[index].blue = b;
 8000f7a:	4908      	ldr	r1, [pc, #32]	@ (8000f9c <_Z7set_ledihhhh+0x60>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	787a      	ldrb	r2, [r7, #1]
 8000f80:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
		led_strip[index].brightness = brightness;
 8000f84:	4a05      	ldr	r2, [pc, #20]	@ (8000f9c <_Z7set_ledihhhh+0x60>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	7c3a      	ldrb	r2, [r7, #16]
 8000f8e:	70da      	strb	r2, [r3, #3]
	}
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	20040210 	.word	0x20040210

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <Error_Handler+0x8>

08000fac <_ZN6TPixy2I9Link2UARTEC1Ev>:
	uint8_t m_length;
	bool m_cs;
};

template<class LinkType>
TPixy2<LinkType>::TPixy2() :
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
		ccc(this), line(this), video(this) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3308      	adds	r3, #8
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f8ac 	bl	8001118 <_ZN8Pixy2CCCI9Link2UARTEC1EP6TPixy2IS0_E>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3314      	adds	r3, #20
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f8b5 	bl	8001136 <_ZN9Pixy2LineI9Link2UARTEC1EP6TPixy2IS0_E>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3330      	adds	r3, #48	@ 0x30
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f8be 	bl	8001154 <_ZN10Pixy2VideoI9Link2UARTEC1EP6TPixy2IS0_E>
	// allocate buffer space for send/receive
	m_buf = (uint8_t*) malloc(PIXY_BUFFERSIZE);
 8000fd8:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8000fdc:	f003 ff74 	bl	8004ec8 <malloc>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	639a      	str	r2, [r3, #56]	@ 0x38
	// shifted buffer is used for sending, so we have space to write header information
	m_bufPayload = m_buf + PIXY_SEND_HEADER_SIZE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fec:	1d1a      	adds	r2, r3, #4
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	63da      	str	r2, [r3, #60]	@ 0x3c
	frameWidth = frameHeight = 0;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	80da      	strh	r2, [r3, #6]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	88da      	ldrh	r2, [r3, #6]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	809a      	strh	r2, [r3, #4]
	version = NULL;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
}
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh>:
private:
  TPixy2<LinkType> *m_pixy;
};

template <class LinkType>
int8_t Pixy2CCC<LinkType>::getBlocks(bool wait, uint8_t sigmap, uint8_t maxBlocks)
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	4608      	mov	r0, r1
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	4603      	mov	r3, r0
 8001020:	70fb      	strb	r3, [r7, #3]
 8001022:	460b      	mov	r3, r1
 8001024:	70bb      	strb	r3, [r7, #2]
 8001026:	4613      	mov	r3, r2
 8001028:	707b      	strb	r3, [r7, #1]
{
  blocks = NULL;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
  numBlocks = 0;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
  
  while(1)
  {
    // fill in request data
    m_pixy->m_bufPayload[0] = sigmap;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800103c:	78ba      	ldrb	r2, [r7, #2]
 800103e:	701a      	strb	r2, [r3, #0]
    m_pixy->m_bufPayload[1] = maxBlocks;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001046:	3301      	adds	r3, #1
 8001048:	787a      	ldrb	r2, [r7, #1]
 800104a:	701a      	strb	r2, [r3, #0]
    m_pixy->m_length = 2;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	2202      	movs	r2, #2
 8001052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    m_pixy->m_type = CCC_REQUEST_BLOCKS;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	2220      	movs	r2, #32
 800105c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  
    // send request
    m_pixy->sendPacket();
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f884 	bl	8001172 <_ZN6TPixy2I9Link2UARTE10sendPacketEv>
    if (m_pixy->recvPacket()==0)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f8ac 	bl	80011cc <_ZN6TPixy2I9Link2UARTE10recvPacketEv>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf0c      	ite	eq
 800107a:	2301      	moveq	r3, #1
 800107c:	2300      	movne	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d03b      	beq.n	80010fc <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xec>
    {
      if (m_pixy->m_type==CCC_RESPONSE_BLOCKS)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800108c:	2b21      	cmp	r3, #33	@ 0x21
 800108e:	d114      	bne.n	80010ba <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xaa>
      {
        blocks = (Block *)m_pixy->m_buf;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	605a      	str	r2, [r3, #4]
        numBlocks = m_pixy->m_length/sizeof(Block);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010a2:	085b      	lsrs	r3, r3, #1
 80010a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001114 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0x104>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	701a      	strb	r2, [r3, #0]
        return numBlocks;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	e028      	b.n	800110c <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xfc>
      }
	  // deal with busy and program changing states from Pixy (we'll wait)
      else if (m_pixy->m_type==PIXY_TYPE_RESPONSE_ERROR)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d11d      	bne.n	8001102 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xf2>
      {
        if ((int8_t)m_pixy->m_buf[0]==PIXY_RESULT_BUSY)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80010d0:	d108      	bne.n	80010e4 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xd4>
        {
          if(!wait)
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	f083 0301 	eor.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d011      	beq.n	8001102 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xf2>
            return PIXY_RESULT_BUSY; // new data not available yet
 80010de:	f06f 0301 	mvn.w	r3, #1
 80010e2:	e013      	b.n	800110c <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xfc>
		}
	    else if ((int8_t)m_pixy->m_buf[0]!=PIXY_RESULT_PROG_CHANGING)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2bfa      	cmp	r3, #250	@ 0xfa
 80010ee:	d008      	beq.n	8001102 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xf2>
          return m_pixy->m_buf[0];
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	e007      	b.n	800110c <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xfc>
      }
    }
    else
      return PIXY_RESULT_ERROR;  // some kind of bitstream error
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	e004      	b.n	800110c <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xfc>
  
    // If we're waiting for frame data, don't thrash Pixy with requests.
    // We can give up half a millisecond of latency (worst case)	
    delayMicroseconds(500);
 8001102:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001106:	f7ff fa7f 	bl	8000608 <_Z17delayMicrosecondsm>
    m_pixy->m_bufPayload[0] = sigmap;
 800110a:	e794      	b.n	8001036 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0x26>
  }
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	92492493 	.word	0x92492493

08001118 <_ZN8Pixy2CCCI9Link2UARTEC1EP6TPixy2IS0_E>:
  Pixy2CCC(TPixy2<LinkType> *pixy)
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    m_pixy = pixy;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	609a      	str	r2, [r3, #8]
  }
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_ZN9Pixy2LineI9Link2UARTEC1EP6TPixy2IS0_E>:

template<class LinkType> class TPixy2;

template<class LinkType> class Pixy2Line {
public:
	Pixy2Line(TPixy2<LinkType> *pixy) {
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
		m_pixy = pixy;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	619a      	str	r2, [r3, #24]
	}
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <_ZN10Pixy2VideoI9Link2UARTEC1EP6TPixy2IS0_E>:
template <class LinkType> class TPixy2;

template <class LinkType> class Pixy2Video
{
public:
  Pixy2Video(TPixy2<LinkType> *pixy)
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  {
    m_pixy = pixy;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	601a      	str	r2, [r3, #0]
  }	  
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <_ZN6TPixy2I9Link2UARTE10sendPacketEv>:
	}
	return PIXY_RESULT_OK;
}

template<class LinkType>
int16_t TPixy2<LinkType>::sendPacket() {
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
	// write header info at beginnig of buffer
	m_buf[0] = PIXY_NO_CHECKSUM_SYNC & 0xff;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800117e:	22ae      	movs	r2, #174	@ 0xae
 8001180:	701a      	strb	r2, [r3, #0]
	m_buf[1] = PIXY_NO_CHECKSUM_SYNC >> 8;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001186:	3301      	adds	r3, #1
 8001188:	22c1      	movs	r2, #193	@ 0xc1
 800118a:	701a      	strb	r2, [r3, #0]
	m_buf[2] = m_type;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001190:	3302      	adds	r3, #2
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8001198:	701a      	strb	r2, [r3, #0]
	m_buf[3] = m_length;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800119e:	3303      	adds	r3, #3
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 80011a6:	701a      	strb	r2, [r3, #0]
	// send whole thing -- header and data in one call
	return m_link.send(m_buf, m_length + PIXY_SEND_HEADER_SIZE);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011b8:	3304      	adds	r3, #4
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	f7ff fa95 	bl	80006ec <_ZN9Link2UART4sendEPhh>
 80011c2:	4603      	mov	r3, r0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZN6TPixy2I9Link2UARTE10recvPacketEv>:
template<class LinkType> int16_t TPixy2<LinkType>::recvPacket() {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	res = getSync();
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f889 	bl	80012ec <_ZN6TPixy2I9Link2UARTE7getSyncEv>
 80011da:	4603      	mov	r3, r0
 80011dc:	81fb      	strh	r3, [r7, #14]
	if (res < 0)
 80011de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	da02      	bge.n	80011ec <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x20>
		return res;
 80011e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ea:	e078      	b.n	80012de <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
	if (m_cs) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d040      	beq.n	8001278 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0xac>
		res = m_link.recv(m_buf, 4);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001200:	2300      	movs	r3, #0
 8001202:	2204      	movs	r2, #4
 8001204:	f7ff fa32 	bl	800066c <_ZN9Link2UART4recvEPhhPt>
 8001208:	4603      	mov	r3, r0
 800120a:	81fb      	strh	r3, [r7, #14]
		if (res < 0)
 800120c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001210:	2b00      	cmp	r3, #0
 8001212:	da02      	bge.n	800121a <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x4e>
			return res;
 8001214:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001218:	e061      	b.n	80012de <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
		m_type = m_buf[0];
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800121e:	781a      	ldrb	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		m_length = m_buf[1];
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800122a:	785a      	ldrb	r2, [r3, #1]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		csSerial = *(uint16_t*) &m_buf[2];
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001236:	885b      	ldrh	r3, [r3, #2]
 8001238:	81bb      	strh	r3, [r7, #12]
		res = m_link.recv(m_buf, m_length, &csCalc);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800124a:	f107 030a 	add.w	r3, r7, #10
 800124e:	f7ff fa0d 	bl	800066c <_ZN9Link2UART4recvEPhhPt>
 8001252:	4603      	mov	r3, r0
 8001254:	81fb      	strh	r3, [r7, #14]
		if (res < 0)
 8001256:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800125a:	2b00      	cmp	r3, #0
 800125c:	da02      	bge.n	8001264 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x98>
			return res;
 800125e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001262:	e03c      	b.n	80012de <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
		if (csSerial != csCalc) {
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	89ba      	ldrh	r2, [r7, #12]
 8001268:	429a      	cmp	r2, r3
 800126a:	d037      	beq.n	80012dc <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x110>
			println("error: checksum\r\n");
 800126c:	481e      	ldr	r0, [pc, #120]	@ (80012e8 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x11c>)
 800126e:	f7ff f9b5 	bl	80005dc <_Z7printlnPKc>
			return PIXY_RESULT_CHECKSUM_ERROR;
 8001272:	f06f 0302 	mvn.w	r3, #2
 8001276:	e032      	b.n	80012de <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
		res = m_link.recv(m_buf, 2);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001282:	2300      	movs	r3, #0
 8001284:	2202      	movs	r2, #2
 8001286:	f7ff f9f1 	bl	800066c <_ZN9Link2UART4recvEPhhPt>
 800128a:	4603      	mov	r3, r0
 800128c:	81fb      	strh	r3, [r7, #14]
		if (res < 0)
 800128e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001292:	2b00      	cmp	r3, #0
 8001294:	da02      	bge.n	800129c <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0xd0>
			return res;
 8001296:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129a:	e020      	b.n	80012de <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
		m_type = m_buf[0];
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		m_length = m_buf[1];
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ac:	785a      	ldrb	r2, [r3, #1]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		res = m_link.recv(m_buf, m_length);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80012c4:	2300      	movs	r3, #0
 80012c6:	f7ff f9d1 	bl	800066c <_ZN9Link2UART4recvEPhhPt>
 80012ca:	4603      	mov	r3, r0
 80012cc:	81fb      	strh	r3, [r7, #14]
		if (res < 0)
 80012ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	da02      	bge.n	80012dc <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x110>
			return res;
 80012d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012da:	e000      	b.n	80012de <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
	return PIXY_RESULT_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	08005ee0 	.word	0x08005ee0

080012ec <_ZN6TPixy2I9Link2UARTE7getSyncEv>:
template<class LinkType> int16_t TPixy2<LinkType>::getSync() {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	for (i = j = 0, cprev = 0; true; i++) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	75bb      	strb	r3, [r7, #22]
 80012f8:	7dbb      	ldrb	r3, [r7, #22]
 80012fa:	75fb      	strb	r3, [r7, #23]
 80012fc:	2300      	movs	r3, #0
 80012fe:	757b      	strb	r3, [r7, #21]
		res = m_link.recv(&c, 1);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8001306:	f107 010f 	add.w	r1, r7, #15
 800130a:	2300      	movs	r3, #0
 800130c:	2201      	movs	r2, #1
 800130e:	f7ff f9ad 	bl	800066c <_ZN9Link2UART4recvEPhhPt>
 8001312:	4603      	mov	r3, r0
 8001314:	827b      	strh	r3, [r7, #18]
		if (res >= PIXY_RESULT_OK) {
 8001316:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800131a:	2b00      	cmp	r3, #0
 800131c:	db22      	blt.n	8001364 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0x78>
			start = cprev;
 800131e:	7d7b      	ldrb	r3, [r7, #21]
 8001320:	823b      	strh	r3, [r7, #16]
			start |= c << 8;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	b21b      	sxth	r3, r3
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	b21a      	sxth	r2, r3
 800132a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	b21b      	sxth	r3, r3
 8001332:	823b      	strh	r3, [r7, #16]
			cprev = c;
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	757b      	strb	r3, [r7, #21]
			if (start == PIXY_CHECKSUM_SYNC) {
 8001338:	8a3b      	ldrh	r3, [r7, #16]
 800133a:	f24c 12af 	movw	r2, #49583	@ 0xc1af
 800133e:	4293      	cmp	r3, r2
 8001340:	d105      	bne.n	800134e <_ZN6TPixy2I9Link2UARTE7getSyncEv+0x62>
				m_cs = true;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
				return PIXY_RESULT_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e022      	b.n	8001394 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0xa8>
			if (start == PIXY_NO_CHECKSUM_SYNC) {
 800134e:	8a3b      	ldrh	r3, [r7, #16]
 8001350:	f24c 12ae 	movw	r2, #49582	@ 0xc1ae
 8001354:	4293      	cmp	r3, r2
 8001356:	d105      	bne.n	8001364 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0x78>
				m_cs = false;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
				return PIXY_RESULT_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	e017      	b.n	8001394 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0xa8>
		if (i >= 4) {
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	2b03      	cmp	r3, #3
 8001368:	d910      	bls.n	800138c <_ZN6TPixy2I9Link2UARTE7getSyncEv+0xa0>
			if (j >= 4) {
 800136a:	7dbb      	ldrb	r3, [r7, #22]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d905      	bls.n	800137c <_ZN6TPixy2I9Link2UARTE7getSyncEv+0x90>
				println("error: no response\r\n");
 8001370:	480a      	ldr	r0, [pc, #40]	@ (800139c <_ZN6TPixy2I9Link2UARTE7getSyncEv+0xb0>)
 8001372:	f7ff f933 	bl	80005dc <_Z7printlnPKc>
				return PIXY_RESULT_ERROR;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e00b      	b.n	8001394 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0xa8>
			delayMicroseconds(25);
 800137c:	2019      	movs	r0, #25
 800137e:	f7ff f943 	bl	8000608 <_Z17delayMicrosecondsm>
			j++;
 8001382:	7dbb      	ldrb	r3, [r7, #22]
 8001384:	3301      	adds	r3, #1
 8001386:	75bb      	strb	r3, [r7, #22]
			i = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	75fb      	strb	r3, [r7, #23]
	for (i = j = 0, cprev = 0; true; i++) {
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	3301      	adds	r3, #1
 8001390:	75fb      	strb	r3, [r7, #23]
		res = m_link.recv(&c, 1);
 8001392:	e7b5      	b.n	8001300 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0x14>
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	08005ef4 	.word	0x08005ef4

080013a0 <_Z41__static_initialization_and_destruction_0v>:
}
  /* USER CODE END Error_Handler_Debug */
}
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
Pixy2UART pixy;
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <_Z41__static_initialization_and_destruction_0v+0x10>)
 80013a6:	f7ff fe01 	bl	8000fac <_ZN6TPixy2I9Link2UARTEC1Ev>
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200402a0 	.word	0x200402a0

080013b4 <_Z41__static_initialization_and_destruction_1v>:
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
Pixy2UART pixy;
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <_Z41__static_initialization_and_destruction_1v+0x10>)
 80013ba:	f000 f805 	bl	80013c8 <_ZN6TPixy2I9Link2UARTED1Ev>
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200402a0 	.word	0x200402a0

080013c8 <_ZN6TPixy2I9Link2UARTED1Ev>:
TPixy2<LinkType>::~TPixy2() {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	m_link.close();
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3334      	adds	r3, #52	@ 0x34
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f93f 	bl	8000658 <_ZN9Link2UART5closeEv>
	free(m_buf);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fd7a 	bl	8004ed8 <free>
}
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <_GLOBAL__sub_I__Z7printlnPKc>:
 80013ee:	b580      	push	{r7, lr}
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	f7ff ffd5 	bl	80013a0 <_Z41__static_initialization_and_destruction_0v>
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_GLOBAL__sub_D__Z7printlnPKc>:
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	f7ff ffda 	bl	80013b4 <_Z41__static_initialization_and_destruction_1v>
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <HAL_MspInit+0x44>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800140e:	4a0e      	ldr	r2, [pc, #56]	@ (8001448 <HAL_MspInit+0x44>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6613      	str	r3, [r2, #96]	@ 0x60
 8001416:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <HAL_MspInit+0x44>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <HAL_MspInit+0x44>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001426:	4a08      	ldr	r2, [pc, #32]	@ (8001448 <HAL_MspInit+0x44>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800142c:	6593      	str	r3, [r2, #88]	@ 0x58
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_MspInit+0x44>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0b0      	sub	sp, #192	@ 0xc0
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	2294      	movs	r2, #148	@ 0x94
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fff3 	bl	8005458 <memset>
  if(huart->Instance==LPUART1)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a43      	ldr	r2, [pc, #268]	@ (8001584 <HAL_UART_MspInit+0x138>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d13e      	bne.n	80014fa <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800147c:	2320      	movs	r3, #32
 800147e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001480:	2300      	movs	r3, #0
 8001482:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	4618      	mov	r0, r3
 800148a:	f001 fcc1 	bl	8002e10 <HAL_RCCEx_PeriphCLKConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001494:	f7ff fd84 	bl	8000fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001498:	4b3b      	ldr	r3, [pc, #236]	@ (8001588 <HAL_UART_MspInit+0x13c>)
 800149a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800149c:	4a3a      	ldr	r2, [pc, #232]	@ (8001588 <HAL_UART_MspInit+0x13c>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80014a4:	4b38      	ldr	r3, [pc, #224]	@ (8001588 <HAL_UART_MspInit+0x13c>)
 80014a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014b0:	4b35      	ldr	r3, [pc, #212]	@ (8001588 <HAL_UART_MspInit+0x13c>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b4:	4a34      	ldr	r2, [pc, #208]	@ (8001588 <HAL_UART_MspInit+0x13c>)
 80014b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014bc:	4b32      	ldr	r3, [pc, #200]	@ (8001588 <HAL_UART_MspInit+0x13c>)
 80014be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80014c8:	f000 fdba 	bl	8002040 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80014cc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80014e6:	2308      	movs	r3, #8
 80014e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014ec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014f0:	4619      	mov	r1, r3
 80014f2:	4826      	ldr	r0, [pc, #152]	@ (800158c <HAL_UART_MspInit+0x140>)
 80014f4:	f000 fb1e 	bl	8001b34 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80014f8:	e040      	b.n	800157c <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a24      	ldr	r2, [pc, #144]	@ (8001590 <HAL_UART_MspInit+0x144>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d13b      	bne.n	800157c <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001504:	2304      	movs	r3, #4
 8001506:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001508:	2300      	movs	r3, #0
 800150a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800150c:	f107 0318 	add.w	r3, r7, #24
 8001510:	4618      	mov	r0, r3
 8001512:	f001 fc7d 	bl	8002e10 <HAL_RCCEx_PeriphCLKConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800151c:	f7ff fd40 	bl	8000fa0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <HAL_UART_MspInit+0x13c>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	4a18      	ldr	r2, [pc, #96]	@ (8001588 <HAL_UART_MspInit+0x13c>)
 8001526:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800152a:	6593      	str	r3, [r2, #88]	@ 0x58
 800152c:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <HAL_UART_MspInit+0x13c>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001530:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <HAL_UART_MspInit+0x13c>)
 800153a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153c:	4a12      	ldr	r2, [pc, #72]	@ (8001588 <HAL_UART_MspInit+0x13c>)
 800153e:	f043 0308 	orr.w	r3, r3, #8
 8001542:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001544:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <HAL_UART_MspInit+0x13c>)
 8001546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001550:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001554:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800156a:	2307      	movs	r3, #7
 800156c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001570:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001574:	4619      	mov	r1, r3
 8001576:	4807      	ldr	r0, [pc, #28]	@ (8001594 <HAL_UART_MspInit+0x148>)
 8001578:	f000 fadc 	bl	8001b34 <HAL_GPIO_Init>
}
 800157c:	bf00      	nop
 800157e:	37c0      	adds	r7, #192	@ 0xc0
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40008000 	.word	0x40008000
 8001588:	40021000 	.word	0x40021000
 800158c:	48001800 	.word	0x48001800
 8001590:	40004800 	.word	0x40004800
 8001594:	48000c00 	.word	0x48000c00

08001598 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a17      	ldr	r2, [pc, #92]	@ (8001614 <HAL_SPI_MspInit+0x7c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d128      	bne.n	800160c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ba:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <HAL_SPI_MspInit+0x80>)
 80015bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015be:	4a16      	ldr	r2, [pc, #88]	@ (8001618 <HAL_SPI_MspInit+0x80>)
 80015c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <HAL_SPI_MspInit+0x80>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_SPI_MspInit+0x80>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	4a10      	ldr	r2, [pc, #64]	@ (8001618 <HAL_SPI_MspInit+0x80>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <HAL_SPI_MspInit+0x80>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015ea:	23e0      	movs	r3, #224	@ 0xe0
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015fa:	2305      	movs	r3, #5
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001608:	f000 fa94 	bl	8001b34 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800160c:	bf00      	nop
 800160e:	3728      	adds	r7, #40	@ 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40013000 	.word	0x40013000
 8001618:	40021000 	.word	0x40021000

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <NMI_Handler+0x4>

08001624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <MemManage_Handler+0x4>

08001634 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <UsageFault_Handler+0x4>

08001644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001672:	f000 f935 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}

0800167a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e00a      	b.n	80016a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168c:	f3af 8000 	nop.w
 8001690:	4601      	mov	r1, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	60ba      	str	r2, [r7, #8]
 8001698:	b2ca      	uxtb	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3301      	adds	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	dbf0      	blt.n	800168c <_read+0x12>
  }

  return len;
 80016aa:	687b      	ldr	r3, [r7, #4]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e009      	b.n	80016da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	60ba      	str	r2, [r7, #8]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fb7e 	bl	8000dd0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	dbf1      	blt.n	80016c6 <_write+0x12>
  }
  return len;
 80016e2:	687b      	ldr	r3, [r7, #4]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_close>:

int _close(int file)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001714:	605a      	str	r2, [r3, #4]
  return 0;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_isatty>:

int _isatty(int file)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800172c:	2301      	movs	r3, #1
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173a:	b480      	push	{r7}
 800173c:	b085      	sub	sp, #20
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	@ (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f003 fec6 	bl	8005514 <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200a0000 	.word	0x200a0000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	200403c8 	.word	0x200403c8
 80017bc:	20040520 	.word	0x20040520

080017c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800181c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e8:	f7ff ffea 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	480c      	ldr	r0, [pc, #48]	@ (8001820 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ee:	490d      	ldr	r1, [pc, #52]	@ (8001824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001828 <LoopForever+0xe>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001804:	4c0a      	ldr	r4, [pc, #40]	@ (8001830 <LoopForever+0x16>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001812:	f003 fe85 	bl	8005520 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001816:	f7fe ff8b 	bl	8000730 <main>

0800181a <LoopForever>:

LoopForever:
    b LoopForever
 800181a:	e7fe      	b.n	800181a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800181c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001820:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001824:	20040068 	.word	0x20040068
  ldr r2, =_sidata
 8001828:	08005fc8 	.word	0x08005fc8
  ldr r2, =_sbss
 800182c:	20040068 	.word	0x20040068
  ldr r4, =_ebss
 8001830:	2004051c 	.word	0x2004051c

08001834 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <ADC1_IRQHandler>

08001836 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 f943 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f80e 	bl	8001868 <HAL_InitTick>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	71fb      	strb	r3, [r7, #7]
 8001856:	e001      	b.n	800185c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001858:	f7ff fdd4 	bl	8001404 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800185c:	79fb      	ldrb	r3, [r7, #7]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001874:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <HAL_InitTick+0x6c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d023      	beq.n	80018c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800187c:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <HAL_InitTick+0x70>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <HAL_InitTick+0x6c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f941 	bl	8001b1a <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d809      	bhi.n	80018b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f000 f919 	bl	8001ae2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b0:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <HAL_InitTick+0x74>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e007      	b.n	80018c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
 80018bc:	e004      	b.n	80018c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	e001      	b.n	80018c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20040008 	.word	0x20040008
 80018d8:	20040000 	.word	0x20040000
 80018dc:	20040004 	.word	0x20040004

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20040008 	.word	0x20040008
 8001904:	200403cc 	.word	0x200403cc

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	200403cc 	.word	0x200403cc

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20040008 	.word	0x20040008

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	@ (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	@ (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	@ 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	@ 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a98:	d301      	bcc.n	8001a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac8 <SysTick_Config+0x40>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f7ff ff8e 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <SysTick_Config+0x40>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab6:	4b04      	ldr	r3, [pc, #16]	@ (8001ac8 <SysTick_Config+0x40>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	e000e010 	.word	0xe000e010

08001acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff47 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001af4:	f7ff ff5c 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001af8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f7ff ff8e 	bl	8001a20 <NVIC_EncodePriority>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff5d 	bl	80019cc <__NVIC_SetPriority>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffb0 	bl	8001a88 <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b42:	e166      	b.n	8001e12 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	2101      	movs	r1, #1
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	4013      	ands	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8158 	beq.w	8001e0c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d005      	beq.n	8001b74 <HAL_GPIO_Init+0x40>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d130      	bne.n	8001bd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	2203      	movs	r2, #3
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001baa:	2201      	movs	r2, #1
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	091b      	lsrs	r3, r3, #4
 8001bc0:	f003 0201 	and.w	r2, r3, #1
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d017      	beq.n	8001c12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	2203      	movs	r2, #3
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d123      	bne.n	8001c66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	08da      	lsrs	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3208      	adds	r2, #8
 8001c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	691a      	ldr	r2, [r3, #16]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3208      	adds	r2, #8
 8001c60:	6939      	ldr	r1, [r7, #16]
 8001c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0203 	and.w	r2, r3, #3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 80b2 	beq.w	8001e0c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca8:	4b61      	ldr	r3, [pc, #388]	@ (8001e30 <HAL_GPIO_Init+0x2fc>)
 8001caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cac:	4a60      	ldr	r2, [pc, #384]	@ (8001e30 <HAL_GPIO_Init+0x2fc>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cb4:	4b5e      	ldr	r3, [pc, #376]	@ (8001e30 <HAL_GPIO_Init+0x2fc>)
 8001cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cc0:	4a5c      	ldr	r2, [pc, #368]	@ (8001e34 <HAL_GPIO_Init+0x300>)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cea:	d02b      	beq.n	8001d44 <HAL_GPIO_Init+0x210>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a52      	ldr	r2, [pc, #328]	@ (8001e38 <HAL_GPIO_Init+0x304>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d025      	beq.n	8001d40 <HAL_GPIO_Init+0x20c>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a51      	ldr	r2, [pc, #324]	@ (8001e3c <HAL_GPIO_Init+0x308>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d01f      	beq.n	8001d3c <HAL_GPIO_Init+0x208>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a50      	ldr	r2, [pc, #320]	@ (8001e40 <HAL_GPIO_Init+0x30c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d019      	beq.n	8001d38 <HAL_GPIO_Init+0x204>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a4f      	ldr	r2, [pc, #316]	@ (8001e44 <HAL_GPIO_Init+0x310>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d013      	beq.n	8001d34 <HAL_GPIO_Init+0x200>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a4e      	ldr	r2, [pc, #312]	@ (8001e48 <HAL_GPIO_Init+0x314>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d00d      	beq.n	8001d30 <HAL_GPIO_Init+0x1fc>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a4d      	ldr	r2, [pc, #308]	@ (8001e4c <HAL_GPIO_Init+0x318>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d007      	beq.n	8001d2c <HAL_GPIO_Init+0x1f8>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a4c      	ldr	r2, [pc, #304]	@ (8001e50 <HAL_GPIO_Init+0x31c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d101      	bne.n	8001d28 <HAL_GPIO_Init+0x1f4>
 8001d24:	2307      	movs	r3, #7
 8001d26:	e00e      	b.n	8001d46 <HAL_GPIO_Init+0x212>
 8001d28:	2308      	movs	r3, #8
 8001d2a:	e00c      	b.n	8001d46 <HAL_GPIO_Init+0x212>
 8001d2c:	2306      	movs	r3, #6
 8001d2e:	e00a      	b.n	8001d46 <HAL_GPIO_Init+0x212>
 8001d30:	2305      	movs	r3, #5
 8001d32:	e008      	b.n	8001d46 <HAL_GPIO_Init+0x212>
 8001d34:	2304      	movs	r3, #4
 8001d36:	e006      	b.n	8001d46 <HAL_GPIO_Init+0x212>
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e004      	b.n	8001d46 <HAL_GPIO_Init+0x212>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e002      	b.n	8001d46 <HAL_GPIO_Init+0x212>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_GPIO_Init+0x212>
 8001d44:	2300      	movs	r3, #0
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	f002 0203 	and.w	r2, r2, #3
 8001d4c:	0092      	lsls	r2, r2, #2
 8001d4e:	4093      	lsls	r3, r2
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d56:	4937      	ldr	r1, [pc, #220]	@ (8001e34 <HAL_GPIO_Init+0x300>)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d64:	4b3b      	ldr	r3, [pc, #236]	@ (8001e54 <HAL_GPIO_Init+0x320>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d88:	4a32      	ldr	r2, [pc, #200]	@ (8001e54 <HAL_GPIO_Init+0x320>)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d8e:	4b31      	ldr	r3, [pc, #196]	@ (8001e54 <HAL_GPIO_Init+0x320>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001db2:	4a28      	ldr	r2, [pc, #160]	@ (8001e54 <HAL_GPIO_Init+0x320>)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001db8:	4b26      	ldr	r3, [pc, #152]	@ (8001e54 <HAL_GPIO_Init+0x320>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8001e54 <HAL_GPIO_Init+0x320>)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <HAL_GPIO_Init+0x320>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e06:	4a13      	ldr	r2, [pc, #76]	@ (8001e54 <HAL_GPIO_Init+0x320>)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f47f ae91 	bne.w	8001b44 <HAL_GPIO_Init+0x10>
  }
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010000 	.word	0x40010000
 8001e38:	48000400 	.word	0x48000400
 8001e3c:	48000800 	.word	0x48000800
 8001e40:	48000c00 	.word	0x48000c00
 8001e44:	48001000 	.word	0x48001000
 8001e48:	48001400 	.word	0x48001400
 8001e4c:	48001800 	.word	0x48001800
 8001e50:	48001c00 	.word	0x48001c00
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
 8001e74:	e001      	b.n	8001e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
 8001e94:	4613      	mov	r3, r2
 8001e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e98:	787b      	ldrb	r3, [r7, #1]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ec8:	d102      	bne.n	8001ed0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001eca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ece:	e00b      	b.n	8001ee8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001ed0:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ede:	d102      	bne.n	8001ee6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001ee0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ee4:	e000      	b.n	8001ee8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001ee6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40007000 	.word	0x40007000

08001ef8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d141      	bne.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f06:	4b4b      	ldr	r3, [pc, #300]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f12:	d131      	bne.n	8001f78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f14:	4b47      	ldr	r3, [pc, #284]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f1a:	4a46      	ldr	r2, [pc, #280]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f24:	4b43      	ldr	r3, [pc, #268]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f2c:	4a41      	ldr	r2, [pc, #260]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f34:	4b40      	ldr	r3, [pc, #256]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2232      	movs	r2, #50	@ 0x32
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	4a3f      	ldr	r2, [pc, #252]	@ (800203c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	0c9b      	lsrs	r3, r3, #18
 8001f46:	3301      	adds	r3, #1
 8001f48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f4a:	e002      	b.n	8001f52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f52:	4b38      	ldr	r3, [pc, #224]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f5e:	d102      	bne.n	8001f66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f2      	bne.n	8001f4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f66:	4b33      	ldr	r3, [pc, #204]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f72:	d158      	bne.n	8002026 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e057      	b.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f78:	4b2e      	ldr	r3, [pc, #184]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f7e:	4a2d      	ldr	r2, [pc, #180]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f88:	e04d      	b.n	8002026 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f90:	d141      	bne.n	8002016 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f92:	4b28      	ldr	r3, [pc, #160]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f9e:	d131      	bne.n	8002004 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fa0:	4b24      	ldr	r3, [pc, #144]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fa6:	4a23      	ldr	r2, [pc, #140]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb0:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2232      	movs	r2, #50	@ 0x32
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	4a1c      	ldr	r2, [pc, #112]	@ (800203c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	0c9b      	lsrs	r3, r3, #18
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fd6:	e002      	b.n	8001fde <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fde:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fea:	d102      	bne.n	8001ff2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f2      	bne.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ffe:	d112      	bne.n	8002026 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e011      	b.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002004:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800200a:	4a0a      	ldr	r2, [pc, #40]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002010:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002014:	e007      	b.n	8002026 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002016:	4b07      	ldr	r3, [pc, #28]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800201e:	4a05      	ldr	r2, [pc, #20]	@ (8002034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002020:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002024:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	40007000 	.word	0x40007000
 8002038:	20040000 	.word	0x20040000
 800203c:	431bde83 	.word	0x431bde83

08002040 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	4a04      	ldr	r2, [pc, #16]	@ (800205c <HAL_PWREx_EnableVddIO2+0x1c>)
 800204a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800204e:	6053      	str	r3, [r2, #4]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40007000 	.word	0x40007000

08002060 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	f000 bc08 	b.w	8002884 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002074:	4b96      	ldr	r3, [pc, #600]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800207e:	4b94      	ldr	r3, [pc, #592]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80e4 	beq.w	800225e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <HAL_RCC_OscConfig+0x4c>
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b0c      	cmp	r3, #12
 80020a0:	f040 808b 	bne.w	80021ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	f040 8087 	bne.w	80021ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ac:	4b88      	ldr	r3, [pc, #544]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_OscConfig+0x64>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e3df      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	4b81      	ldr	r3, [pc, #516]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d004      	beq.n	80020de <HAL_RCC_OscConfig+0x7e>
 80020d4:	4b7e      	ldr	r3, [pc, #504]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020dc:	e005      	b.n	80020ea <HAL_RCC_OscConfig+0x8a>
 80020de:	4b7c      	ldr	r3, [pc, #496]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 80020e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d223      	bcs.n	8002136 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fdcc 	bl	8002c90 <RCC_SetFlashLatencyFromMSIRange>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e3c0      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002102:	4b73      	ldr	r3, [pc, #460]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a72      	ldr	r2, [pc, #456]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002108:	f043 0308 	orr.w	r3, r3, #8
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b70      	ldr	r3, [pc, #448]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	496d      	ldr	r1, [pc, #436]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002120:	4b6b      	ldr	r3, [pc, #428]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	4968      	ldr	r1, [pc, #416]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]
 8002134:	e025      	b.n	8002182 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002136:	4b66      	ldr	r3, [pc, #408]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a65      	ldr	r2, [pc, #404]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 800213c:	f043 0308 	orr.w	r3, r3, #8
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b63      	ldr	r3, [pc, #396]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4960      	ldr	r1, [pc, #384]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002154:	4b5e      	ldr	r3, [pc, #376]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	495b      	ldr	r1, [pc, #364]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fd8c 	bl	8002c90 <RCC_SetFlashLatencyFromMSIRange>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e380      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002182:	f000 fcc1 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002186:	4602      	mov	r2, r0
 8002188:	4b51      	ldr	r3, [pc, #324]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	4950      	ldr	r1, [pc, #320]	@ (80022d4 <HAL_RCC_OscConfig+0x274>)
 8002194:	5ccb      	ldrb	r3, [r1, r3]
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	fa22 f303 	lsr.w	r3, r2, r3
 800219e:	4a4e      	ldr	r2, [pc, #312]	@ (80022d8 <HAL_RCC_OscConfig+0x278>)
 80021a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021a2:	4b4e      	ldr	r3, [pc, #312]	@ (80022dc <HAL_RCC_OscConfig+0x27c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fb5e 	bl	8001868 <HAL_InitTick>
 80021ac:	4603      	mov	r3, r0
 80021ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d052      	beq.n	800225c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	e364      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d032      	beq.n	8002228 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021c2:	4b43      	ldr	r3, [pc, #268]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a42      	ldr	r2, [pc, #264]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ce:	f7ff fb9b 	bl	8001908 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d6:	f7ff fb97 	bl	8001908 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e34d      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021e8:	4b39      	ldr	r3, [pc, #228]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f4:	4b36      	ldr	r3, [pc, #216]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a35      	ldr	r2, [pc, #212]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b33      	ldr	r3, [pc, #204]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4930      	ldr	r1, [pc, #192]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002212:	4b2f      	ldr	r3, [pc, #188]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	492b      	ldr	r1, [pc, #172]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
 8002226:	e01a      	b.n	800225e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002228:	4b29      	ldr	r3, [pc, #164]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a28      	ldr	r2, [pc, #160]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002234:	f7ff fb68 	bl	8001908 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800223c:	f7ff fb64 	bl	8001908 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e31a      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800224e:	4b20      	ldr	r3, [pc, #128]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x1dc>
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d073      	beq.n	8002352 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d005      	beq.n	800227c <HAL_RCC_OscConfig+0x21c>
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d10e      	bne.n	8002294 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d10b      	bne.n	8002294 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	4b14      	ldr	r3, [pc, #80]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d063      	beq.n	8002350 <HAL_RCC_OscConfig+0x2f0>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d15f      	bne.n	8002350 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e2f7      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800229c:	d106      	bne.n	80022ac <HAL_RCC_OscConfig+0x24c>
 800229e:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a0b      	ldr	r2, [pc, #44]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e025      	b.n	80022f8 <HAL_RCC_OscConfig+0x298>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022b4:	d114      	bne.n	80022e0 <HAL_RCC_OscConfig+0x280>
 80022b6:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a05      	ldr	r2, [pc, #20]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 80022bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a02      	ldr	r2, [pc, #8]	@ (80022d0 <HAL_RCC_OscConfig+0x270>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e013      	b.n	80022f8 <HAL_RCC_OscConfig+0x298>
 80022d0:	40021000 	.word	0x40021000
 80022d4:	08005f0c 	.word	0x08005f0c
 80022d8:	20040000 	.word	0x20040000
 80022dc:	20040004 	.word	0x20040004
 80022e0:	4ba0      	ldr	r3, [pc, #640]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a9f      	ldr	r2, [pc, #636]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 80022e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b9d      	ldr	r3, [pc, #628]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a9c      	ldr	r2, [pc, #624]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 80022f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7ff fb02 	bl	8001908 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002308:	f7ff fafe 	bl	8001908 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	@ 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e2b4      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800231a:	4b92      	ldr	r3, [pc, #584]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x2a8>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7ff faee 	bl	8001908 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002330:	f7ff faea 	bl	8001908 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	@ 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e2a0      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002342:	4b88      	ldr	r3, [pc, #544]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x2d0>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d060      	beq.n	8002420 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2b04      	cmp	r3, #4
 8002362:	d005      	beq.n	8002370 <HAL_RCC_OscConfig+0x310>
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2b0c      	cmp	r3, #12
 8002368:	d119      	bne.n	800239e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d116      	bne.n	800239e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002370:	4b7c      	ldr	r3, [pc, #496]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_RCC_OscConfig+0x328>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e27d      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002388:	4b76      	ldr	r3, [pc, #472]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	061b      	lsls	r3, r3, #24
 8002396:	4973      	ldr	r1, [pc, #460]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800239c:	e040      	b.n	8002420 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d023      	beq.n	80023ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7ff faa9 	bl	8001908 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ba:	f7ff faa5 	bl	8001908 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e25b      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023cc:	4b65      	ldr	r3, [pc, #404]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d8:	4b62      	ldr	r3, [pc, #392]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	061b      	lsls	r3, r3, #24
 80023e6:	495f      	ldr	r1, [pc, #380]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
 80023ec:	e018      	b.n	8002420 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a5c      	ldr	r2, [pc, #368]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 80023f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7ff fa85 	bl	8001908 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002402:	f7ff fa81 	bl	8001908 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e237      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002414:	4b53      	ldr	r3, [pc, #332]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d03c      	beq.n	80024a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01c      	beq.n	800246e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002434:	4b4b      	ldr	r3, [pc, #300]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 8002436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800243a:	4a4a      	ldr	r2, [pc, #296]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002444:	f7ff fa60 	bl	8001908 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244c:	f7ff fa5c 	bl	8001908 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e212      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800245e:	4b41      	ldr	r3, [pc, #260]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 8002460:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0ef      	beq.n	800244c <HAL_RCC_OscConfig+0x3ec>
 800246c:	e01b      	b.n	80024a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246e:	4b3d      	ldr	r3, [pc, #244]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 8002470:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002474:	4a3b      	ldr	r2, [pc, #236]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247e:	f7ff fa43 	bl	8001908 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002486:	f7ff fa3f 	bl	8001908 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e1f5      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002498:	4b32      	ldr	r3, [pc, #200]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 800249a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1ef      	bne.n	8002486 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 80a6 	beq.w	8002600 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10d      	bne.n	80024e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c4:	4b27      	ldr	r3, [pc, #156]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c8:	4a26      	ldr	r2, [pc, #152]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 80024ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80024d0:	4b24      	ldr	r3, [pc, #144]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024dc:	2301      	movs	r3, #1
 80024de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e0:	4b21      	ldr	r3, [pc, #132]	@ (8002568 <HAL_RCC_OscConfig+0x508>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d118      	bne.n	800251e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002568 <HAL_RCC_OscConfig+0x508>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002568 <HAL_RCC_OscConfig+0x508>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f8:	f7ff fa06 	bl	8001908 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002500:	f7ff fa02 	bl	8001908 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1b8      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002512:	4b15      	ldr	r3, [pc, #84]	@ (8002568 <HAL_RCC_OscConfig+0x508>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d108      	bne.n	8002538 <HAL_RCC_OscConfig+0x4d8>
 8002526:	4b0f      	ldr	r3, [pc, #60]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252c:	4a0d      	ldr	r2, [pc, #52]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002536:	e029      	b.n	800258c <HAL_RCC_OscConfig+0x52c>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d115      	bne.n	800256c <HAL_RCC_OscConfig+0x50c>
 8002540:	4b08      	ldr	r3, [pc, #32]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002546:	4a07      	ldr	r2, [pc, #28]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 8002548:	f043 0304 	orr.w	r3, r3, #4
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002550:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002556:	4a03      	ldr	r2, [pc, #12]	@ (8002564 <HAL_RCC_OscConfig+0x504>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002560:	e014      	b.n	800258c <HAL_RCC_OscConfig+0x52c>
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	40007000 	.word	0x40007000
 800256c:	4b9d      	ldr	r3, [pc, #628]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002572:	4a9c      	ldr	r2, [pc, #624]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800257c:	4b99      	ldr	r3, [pc, #612]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002582:	4a98      	ldr	r2, [pc, #608]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002584:	f023 0304 	bic.w	r3, r3, #4
 8002588:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d016      	beq.n	80025c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7ff f9b8 	bl	8001908 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259c:	f7ff f9b4 	bl	8001908 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e168      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b2:	4b8c      	ldr	r3, [pc, #560]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0ed      	beq.n	800259c <HAL_RCC_OscConfig+0x53c>
 80025c0:	e015      	b.n	80025ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c2:	f7ff f9a1 	bl	8001908 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7ff f99d 	bl	8001908 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e151      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e0:	4b80      	ldr	r3, [pc, #512]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1ed      	bne.n	80025ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ee:	7ffb      	ldrb	r3, [r7, #31]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d105      	bne.n	8002600 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f4:	4b7b      	ldr	r3, [pc, #492]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f8:	4a7a      	ldr	r2, [pc, #488]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 80025fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d03c      	beq.n	8002686 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01c      	beq.n	800264e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002614:	4b73      	ldr	r3, [pc, #460]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002616:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800261a:	4a72      	ldr	r2, [pc, #456]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7ff f970 	bl	8001908 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800262c:	f7ff f96c 	bl	8001908 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e122      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800263e:	4b69      	ldr	r3, [pc, #420]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002640:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0ef      	beq.n	800262c <HAL_RCC_OscConfig+0x5cc>
 800264c:	e01b      	b.n	8002686 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800264e:	4b65      	ldr	r3, [pc, #404]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002650:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002654:	4a63      	ldr	r2, [pc, #396]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7ff f953 	bl	8001908 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002666:	f7ff f94f 	bl	8001908 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e105      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002678:	4b5a      	ldr	r3, [pc, #360]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 800267a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1ef      	bne.n	8002666 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 80f9 	beq.w	8002882 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002694:	2b02      	cmp	r3, #2
 8002696:	f040 80cf 	bne.w	8002838 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800269a:	4b52      	ldr	r3, [pc, #328]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 0203 	and.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d12c      	bne.n	8002708 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b8:	3b01      	subs	r3, #1
 80026ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d123      	bne.n	8002708 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d11b      	bne.n	8002708 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d113      	bne.n	8002708 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	3b01      	subs	r3, #1
 80026ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d109      	bne.n	8002708 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	085b      	lsrs	r3, r3, #1
 8002700:	3b01      	subs	r3, #1
 8002702:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002704:	429a      	cmp	r2, r3
 8002706:	d071      	beq.n	80027ec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2b0c      	cmp	r3, #12
 800270c:	d068      	beq.n	80027e0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800270e:	4b35      	ldr	r3, [pc, #212]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800271a:	4b32      	ldr	r3, [pc, #200]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0ac      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800272a:	4b2e      	ldr	r3, [pc, #184]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a2d      	ldr	r2, [pc, #180]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002730:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002734:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002736:	f7ff f8e7 	bl	8001908 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273e:	f7ff f8e3 	bl	8001908 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e099      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002750:	4b24      	ldr	r3, [pc, #144]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800275c:	4b21      	ldr	r3, [pc, #132]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	4b21      	ldr	r3, [pc, #132]	@ (80027e8 <HAL_RCC_OscConfig+0x788>)
 8002762:	4013      	ands	r3, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800276c:	3a01      	subs	r2, #1
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	4311      	orrs	r1, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002776:	0212      	lsls	r2, r2, #8
 8002778:	4311      	orrs	r1, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800277e:	0852      	lsrs	r2, r2, #1
 8002780:	3a01      	subs	r2, #1
 8002782:	0552      	lsls	r2, r2, #21
 8002784:	4311      	orrs	r1, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800278a:	0852      	lsrs	r2, r2, #1
 800278c:	3a01      	subs	r2, #1
 800278e:	0652      	lsls	r2, r2, #25
 8002790:	4311      	orrs	r1, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002796:	06d2      	lsls	r2, r2, #27
 8002798:	430a      	orrs	r2, r1
 800279a:	4912      	ldr	r1, [pc, #72]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 800279c:	4313      	orrs	r3, r2
 800279e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027a0:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0f      	ldr	r2, [pc, #60]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 80027a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027ac:	4b0d      	ldr	r3, [pc, #52]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a0c      	ldr	r2, [pc, #48]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 80027b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027b8:	f7ff f8a6 	bl	8001908 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7ff f8a2 	bl	8001908 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e058      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d2:	4b04      	ldr	r3, [pc, #16]	@ (80027e4 <HAL_RCC_OscConfig+0x784>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027de:	e050      	b.n	8002882 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e04f      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
 80027e4:	40021000 	.word	0x40021000
 80027e8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ec:	4b27      	ldr	r3, [pc, #156]	@ (800288c <HAL_RCC_OscConfig+0x82c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d144      	bne.n	8002882 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027f8:	4b24      	ldr	r3, [pc, #144]	@ (800288c <HAL_RCC_OscConfig+0x82c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a23      	ldr	r2, [pc, #140]	@ (800288c <HAL_RCC_OscConfig+0x82c>)
 80027fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002802:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002804:	4b21      	ldr	r3, [pc, #132]	@ (800288c <HAL_RCC_OscConfig+0x82c>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a20      	ldr	r2, [pc, #128]	@ (800288c <HAL_RCC_OscConfig+0x82c>)
 800280a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800280e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002810:	f7ff f87a 	bl	8001908 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002818:	f7ff f876 	bl	8001908 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e02c      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282a:	4b18      	ldr	r3, [pc, #96]	@ (800288c <HAL_RCC_OscConfig+0x82c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x7b8>
 8002836:	e024      	b.n	8002882 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b0c      	cmp	r3, #12
 800283c:	d01f      	beq.n	800287e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	4b13      	ldr	r3, [pc, #76]	@ (800288c <HAL_RCC_OscConfig+0x82c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a12      	ldr	r2, [pc, #72]	@ (800288c <HAL_RCC_OscConfig+0x82c>)
 8002844:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7ff f85d 	bl	8001908 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002852:	f7ff f859 	bl	8001908 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e00f      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002864:	4b09      	ldr	r3, [pc, #36]	@ (800288c <HAL_RCC_OscConfig+0x82c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f0      	bne.n	8002852 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002870:	4b06      	ldr	r3, [pc, #24]	@ (800288c <HAL_RCC_OscConfig+0x82c>)
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	4905      	ldr	r1, [pc, #20]	@ (800288c <HAL_RCC_OscConfig+0x82c>)
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <HAL_RCC_OscConfig+0x830>)
 8002878:	4013      	ands	r3, r2
 800287a:	60cb      	str	r3, [r1, #12]
 800287c:	e001      	b.n	8002882 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000
 8002890:	feeefffc 	.word	0xfeeefffc

08002894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e11d      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028ac:	4b90      	ldr	r3, [pc, #576]	@ (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d910      	bls.n	80028dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b8d      	ldr	r3, [pc, #564]	@ (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 020f 	bic.w	r2, r3, #15
 80028c2:	498b      	ldr	r1, [pc, #556]	@ (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b89      	ldr	r3, [pc, #548]	@ (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e105      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d010      	beq.n	800290a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	4b81      	ldr	r3, [pc, #516]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d908      	bls.n	800290a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f8:	4b7e      	ldr	r3, [pc, #504]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	497b      	ldr	r1, [pc, #492]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002906:	4313      	orrs	r3, r2
 8002908:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d079      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b03      	cmp	r3, #3
 800291c:	d11e      	bne.n	800295c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291e:	4b75      	ldr	r3, [pc, #468]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0dc      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800292e:	f000 fa09 	bl	8002d44 <RCC_GetSysClockFreqFromPLLSource>
 8002932:	4603      	mov	r3, r0
 8002934:	4a70      	ldr	r2, [pc, #448]	@ (8002af8 <HAL_RCC_ClockConfig+0x264>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d946      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800293a:	4b6e      	ldr	r3, [pc, #440]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d140      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002946:	4b6b      	ldr	r3, [pc, #428]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800294e:	4a69      	ldr	r2, [pc, #420]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002954:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002956:	2380      	movs	r3, #128	@ 0x80
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	e035      	b.n	80029c8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d107      	bne.n	8002974 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002964:	4b63      	ldr	r3, [pc, #396]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d115      	bne.n	800299c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0b9      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d107      	bne.n	800298c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800297c:	4b5d      	ldr	r3, [pc, #372]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0ad      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800298c:	4b59      	ldr	r3, [pc, #356]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0a5      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800299c:	f000 f8b4 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4a55      	ldr	r2, [pc, #340]	@ (8002af8 <HAL_RCC_ClockConfig+0x264>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d90f      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80029a8:	4b52      	ldr	r3, [pc, #328]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d109      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029b4:	4b4f      	ldr	r3, [pc, #316]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029bc:	4a4d      	ldr	r2, [pc, #308]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80029be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029c2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029c4:	2380      	movs	r3, #128	@ 0x80
 80029c6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029c8:	4b4a      	ldr	r3, [pc, #296]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f023 0203 	bic.w	r2, r3, #3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4947      	ldr	r1, [pc, #284]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029da:	f7fe ff95 	bl	8001908 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e2:	f7fe ff91 	bl	8001908 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e077      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f8:	4b3e      	ldr	r3, [pc, #248]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 020c 	and.w	r2, r3, #12
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d1eb      	bne.n	80029e2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b80      	cmp	r3, #128	@ 0x80
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a10:	4b38      	ldr	r3, [pc, #224]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a37      	ldr	r2, [pc, #220]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a1a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d010      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	4b31      	ldr	r3, [pc, #196]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d208      	bcs.n	8002a4a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b2e      	ldr	r3, [pc, #184]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	492b      	ldr	r1, [pc, #172]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a4a:	4b29      	ldr	r3, [pc, #164]	@ (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d210      	bcs.n	8002a7a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a58:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f023 020f 	bic.w	r2, r3, #15
 8002a60:	4923      	ldr	r1, [pc, #140]	@ (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a68:	4b21      	ldr	r3, [pc, #132]	@ (8002af0 <HAL_RCC_ClockConfig+0x25c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e036      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a86:	4b1b      	ldr	r3, [pc, #108]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4918      	ldr	r1, [pc, #96]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d009      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa4:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4910      	ldr	r1, [pc, #64]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ab8:	f000 f826 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <HAL_RCC_ClockConfig+0x260>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	490c      	ldr	r1, [pc, #48]	@ (8002afc <HAL_RCC_ClockConfig+0x268>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8002b00 <HAL_RCC_ClockConfig+0x26c>)
 8002ad6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <HAL_RCC_ClockConfig+0x270>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe fec3 	bl	8001868 <HAL_InitTick>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	73fb      	strb	r3, [r7, #15]

  return status;
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40022000 	.word	0x40022000
 8002af4:	40021000 	.word	0x40021000
 8002af8:	04c4b400 	.word	0x04c4b400
 8002afc:	08005f0c 	.word	0x08005f0c
 8002b00:	20040000 	.word	0x20040000
 8002b04:	20040004 	.word	0x20040004

08002b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	@ 0x24
 8002b0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b16:	4b3e      	ldr	r3, [pc, #248]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b20:	4b3b      	ldr	r3, [pc, #236]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x34>
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b0c      	cmp	r3, #12
 8002b34:	d121      	bne.n	8002b7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d11e      	bne.n	8002b7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b3c:	4b34      	ldr	r3, [pc, #208]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b48:	4b31      	ldr	r3, [pc, #196]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b4e:	0a1b      	lsrs	r3, r3, #8
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	e005      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b58:	4b2d      	ldr	r3, [pc, #180]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b64:	4a2b      	ldr	r2, [pc, #172]	@ (8002c14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10d      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d102      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b80:	4b25      	ldr	r3, [pc, #148]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b82:	61bb      	str	r3, [r7, #24]
 8002b84:	e004      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b8c:	4b23      	ldr	r3, [pc, #140]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002b8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	2b0c      	cmp	r3, #12
 8002b94:	d134      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b96:	4b1e      	ldr	r3, [pc, #120]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d003      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0xa6>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d003      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xac>
 8002bac:	e005      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bb0:	617b      	str	r3, [r7, #20]
      break;
 8002bb2:	e005      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bb4:	4b19      	ldr	r3, [pc, #100]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002bb6:	617b      	str	r3, [r7, #20]
      break;
 8002bb8:	e002      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	617b      	str	r3, [r7, #20]
      break;
 8002bbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bc0:	4b13      	ldr	r3, [pc, #76]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	3301      	adds	r3, #1
 8002bcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bce:	4b10      	ldr	r3, [pc, #64]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	fb03 f202 	mul.w	r2, r3, r2
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002be6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	0e5b      	lsrs	r3, r3, #25
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c00:	69bb      	ldr	r3, [r7, #24]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	@ 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08005f24 	.word	0x08005f24
 8002c18:	00f42400 	.word	0x00f42400
 8002c1c:	007a1200 	.word	0x007a1200

08002c20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c24:	4b03      	ldr	r3, [pc, #12]	@ (8002c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20040000 	.word	0x20040000

08002c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c3c:	f7ff fff0 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4904      	ldr	r1, [pc, #16]	@ (8002c60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	08005f1c 	.word	0x08005f1c

08002c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c68:	f7ff ffda 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	0adb      	lsrs	r3, r3, #11
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	4904      	ldr	r1, [pc, #16]	@ (8002c8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	08005f1c 	.word	0x08005f1c

08002c90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c98:	2300      	movs	r3, #0
 8002c9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c9c:	4b27      	ldr	r3, [pc, #156]	@ (8002d3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ca8:	f7ff f906 	bl	8001eb8 <HAL_PWREx_GetVoltageRange>
 8002cac:	6178      	str	r0, [r7, #20]
 8002cae:	e014      	b.n	8002cda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cb0:	4b22      	ldr	r3, [pc, #136]	@ (8002d3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb4:	4a21      	ldr	r2, [pc, #132]	@ (8002d3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cc8:	f7ff f8f6 	bl	8001eb8 <HAL_PWREx_GetVoltageRange>
 8002ccc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cce:	4b1b      	ldr	r3, [pc, #108]	@ (8002d3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8002d3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ce0:	d10b      	bne.n	8002cfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b80      	cmp	r3, #128	@ 0x80
 8002ce6:	d913      	bls.n	8002d10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2ba0      	cmp	r3, #160	@ 0xa0
 8002cec:	d902      	bls.n	8002cf4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cee:	2302      	movs	r3, #2
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	e00d      	b.n	8002d10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	e00a      	b.n	8002d10 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002cfe:	d902      	bls.n	8002d06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002d00:	2302      	movs	r3, #2
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	e004      	b.n	8002d10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b70      	cmp	r3, #112	@ 0x70
 8002d0a:	d101      	bne.n	8002d10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 020f 	bic.w	r2, r3, #15
 8002d18:	4909      	ldr	r1, [pc, #36]	@ (8002d40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d20:	4b07      	ldr	r3, [pc, #28]	@ (8002d40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d001      	beq.n	8002d32 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40022000 	.word	0x40022000

08002d44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002e00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d00b      	beq.n	8002d72 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d825      	bhi.n	8002dac <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d008      	beq.n	8002d78 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d11f      	bne.n	8002dac <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002d6c:	4b25      	ldr	r3, [pc, #148]	@ (8002e04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d6e:	613b      	str	r3, [r7, #16]
    break;
 8002d70:	e01f      	b.n	8002db2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002d72:	4b25      	ldr	r3, [pc, #148]	@ (8002e08 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002d74:	613b      	str	r3, [r7, #16]
    break;
 8002d76:	e01c      	b.n	8002db2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d78:	4b21      	ldr	r3, [pc, #132]	@ (8002e00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d84:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e005      	b.n	8002da0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d94:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002da0:	4a1a      	ldr	r2, [pc, #104]	@ (8002e0c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da8:	613b      	str	r3, [r7, #16]
    break;
 8002daa:	e002      	b.n	8002db2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
    break;
 8002db0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002db2:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	fb03 f202 	mul.w	r2, r3, r2
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dd8:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	0e5b      	lsrs	r3, r3, #25
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	3301      	adds	r3, #1
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002df2:	683b      	ldr	r3, [r7, #0]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	40021000 	.word	0x40021000
 8002e04:	00f42400 	.word	0x00f42400
 8002e08:	007a1200 	.word	0x007a1200
 8002e0c:	08005f24 	.word	0x08005f24

08002e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e18:	2300      	movs	r3, #0
 8002e1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d040      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e30:	2b80      	cmp	r3, #128	@ 0x80
 8002e32:	d02a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e34:	2b80      	cmp	r3, #128	@ 0x80
 8002e36:	d825      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e38:	2b60      	cmp	r3, #96	@ 0x60
 8002e3a:	d026      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e3c:	2b60      	cmp	r3, #96	@ 0x60
 8002e3e:	d821      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e40:	2b40      	cmp	r3, #64	@ 0x40
 8002e42:	d006      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002e44:	2b40      	cmp	r3, #64	@ 0x40
 8002e46:	d81d      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d009      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d010      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002e50:	e018      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e52:	4b89      	ldr	r3, [pc, #548]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	4a88      	ldr	r2, [pc, #544]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e5c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e5e:	e015      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fb02 	bl	8003470 <RCCEx_PLLSAI1_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e70:	e00c      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3320      	adds	r3, #32
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fbed 	bl	8003658 <RCCEx_PLLSAI2_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e82:	e003      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	74fb      	strb	r3, [r7, #19]
      break;
 8002e88:	e000      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e8c:	7cfb      	ldrb	r3, [r7, #19]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10b      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e92:	4b79      	ldr	r3, [pc, #484]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e98:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ea0:	4975      	ldr	r1, [pc, #468]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002ea8:	e001      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d047      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec2:	d030      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec8:	d82a      	bhi.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002eca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ece:	d02a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ed0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ed4:	d824      	bhi.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002ed6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eda:	d008      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ee0:	d81e      	bhi.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eea:	d010      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002eec:	e018      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eee:	4b62      	ldr	r3, [pc, #392]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	4a61      	ldr	r2, [pc, #388]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002efa:	e015      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3304      	adds	r3, #4
 8002f00:	2100      	movs	r1, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fab4 	bl	8003470 <RCCEx_PLLSAI1_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f0c:	e00c      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3320      	adds	r3, #32
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fb9f 	bl	8003658 <RCCEx_PLLSAI2_Config>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f1e:	e003      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	74fb      	strb	r3, [r7, #19]
      break;
 8002f24:	e000      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10b      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f2e:	4b52      	ldr	r3, [pc, #328]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3c:	494e      	ldr	r1, [pc, #312]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002f44:	e001      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
 8002f48:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 809f 	beq.w	8003096 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f5c:	4b46      	ldr	r3, [pc, #280]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00d      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f72:	4b41      	ldr	r3, [pc, #260]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f76:	4a40      	ldr	r2, [pc, #256]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a3a      	ldr	r2, [pc, #232]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f9a:	f7fe fcb5 	bl	8001908 <HAL_GetTick>
 8002f9e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fa0:	e009      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa2:	f7fe fcb1 	bl	8001908 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d902      	bls.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	74fb      	strb	r3, [r7, #19]
        break;
 8002fb4:	e005      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fb6:	4b31      	ldr	r3, [pc, #196]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0ef      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d15b      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d01f      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d019      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fe6:	4b24      	ldr	r3, [pc, #144]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ff2:	4b21      	ldr	r3, [pc, #132]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ffe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003002:	4b1d      	ldr	r3, [pc, #116]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003008:	4a1b      	ldr	r2, [pc, #108]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800300a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800300e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003012:	4a19      	ldr	r2, [pc, #100]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d016      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe fc70 	bl	8001908 <HAL_GetTick>
 8003028:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302a:	e00b      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302c:	f7fe fc6c 	bl	8001908 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d902      	bls.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	74fb      	strb	r3, [r7, #19]
            break;
 8003042:	e006      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003044:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ec      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10c      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003058:	4b07      	ldr	r3, [pc, #28]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003068:	4903      	ldr	r1, [pc, #12]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003070:	e008      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003072:	7cfb      	ldrb	r3, [r7, #19]
 8003074:	74bb      	strb	r3, [r7, #18]
 8003076:	e005      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003078:	40021000 	.word	0x40021000
 800307c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003084:	7c7b      	ldrb	r3, [r7, #17]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d105      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308a:	4ba0      	ldr	r3, [pc, #640]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800308c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308e:	4a9f      	ldr	r2, [pc, #636]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003094:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030a2:	4b9a      	ldr	r3, [pc, #616]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a8:	f023 0203 	bic.w	r2, r3, #3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b0:	4996      	ldr	r1, [pc, #600]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030c4:	4b91      	ldr	r3, [pc, #580]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ca:	f023 020c 	bic.w	r2, r3, #12
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	498e      	ldr	r1, [pc, #568]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030e6:	4b89      	ldr	r3, [pc, #548]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f4:	4985      	ldr	r1, [pc, #532]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003108:	4b80      	ldr	r3, [pc, #512]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003116:	497d      	ldr	r1, [pc, #500]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800312a:	4b78      	ldr	r3, [pc, #480]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003130:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003138:	4974      	ldr	r1, [pc, #464]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800314c:	4b6f      	ldr	r3, [pc, #444]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003152:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315a:	496c      	ldr	r1, [pc, #432]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800316e:	4b67      	ldr	r3, [pc, #412]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003174:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800317c:	4963      	ldr	r1, [pc, #396]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003190:	4b5e      	ldr	r3, [pc, #376]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003196:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800319e:	495b      	ldr	r1, [pc, #364]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031b2:	4b56      	ldr	r3, [pc, #344]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c0:	4952      	ldr	r1, [pc, #328]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031d4:	4b4d      	ldr	r3, [pc, #308]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e2:	494a      	ldr	r1, [pc, #296]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031f6:	4b45      	ldr	r3, [pc, #276]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003204:	4941      	ldr	r1, [pc, #260]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003218:	4b3c      	ldr	r3, [pc, #240]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800321a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800321e:	f023 0203 	bic.w	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003226:	4939      	ldr	r1, [pc, #228]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d028      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800323a:	4b34      	ldr	r3, [pc, #208]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003240:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003248:	4930      	ldr	r1, [pc, #192]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003254:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003258:	d106      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800325a:	4b2c      	ldr	r3, [pc, #176]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	4a2b      	ldr	r2, [pc, #172]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003260:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003264:	60d3      	str	r3, [r2, #12]
 8003266:	e011      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800326c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003270:	d10c      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3304      	adds	r3, #4
 8003276:	2101      	movs	r1, #1
 8003278:	4618      	mov	r0, r3
 800327a:	f000 f8f9 	bl	8003470 <RCCEx_PLLSAI1_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003282:	7cfb      	ldrb	r3, [r7, #19]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d04d      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800329c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032a0:	d108      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80032a2:	4b1a      	ldr	r3, [pc, #104]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032a8:	4a18      	ldr	r2, [pc, #96]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032ae:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80032b2:	e012      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80032b4:	4b15      	ldr	r3, [pc, #84]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032ba:	4a14      	ldr	r2, [pc, #80]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032c0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80032c4:	4b11      	ldr	r3, [pc, #68]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032d2:	490e      	ldr	r1, [pc, #56]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032e2:	d106      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e4:	4b09      	ldr	r3, [pc, #36]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4a08      	ldr	r2, [pc, #32]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032ee:	60d3      	str	r3, [r2, #12]
 80032f0:	e020      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032fa:	d109      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032fc:	4b03      	ldr	r3, [pc, #12]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4a02      	ldr	r2, [pc, #8]	@ (800330c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003306:	60d3      	str	r3, [r2, #12]
 8003308:	e014      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003314:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003318:	d10c      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3304      	adds	r3, #4
 800331e:	2101      	movs	r1, #1
 8003320:	4618      	mov	r0, r3
 8003322:	f000 f8a5 	bl	8003470 <RCCEx_PLLSAI1_Config>
 8003326:	4603      	mov	r3, r0
 8003328:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800332a:	7cfb      	ldrb	r3, [r7, #19]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003330:	7cfb      	ldrb	r3, [r7, #19]
 8003332:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d028      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003340:	4b4a      	ldr	r3, [pc, #296]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003346:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800334e:	4947      	ldr	r1, [pc, #284]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800335a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800335e:	d106      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003360:	4b42      	ldr	r3, [pc, #264]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4a41      	ldr	r2, [pc, #260]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003366:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800336a:	60d3      	str	r3, [r2, #12]
 800336c:	e011      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003372:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003376:	d10c      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	2101      	movs	r1, #1
 800337e:	4618      	mov	r0, r3
 8003380:	f000 f876 	bl	8003470 <RCCEx_PLLSAI1_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800338e:	7cfb      	ldrb	r3, [r7, #19]
 8003390:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01e      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800339e:	4b33      	ldr	r3, [pc, #204]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033ae:	492f      	ldr	r1, [pc, #188]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2102      	movs	r1, #2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f851 	bl	8003470 <RCCEx_PLLSAI1_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d2:	7cfb      	ldrb	r3, [r7, #19]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00b      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033e8:	4b20      	ldr	r3, [pc, #128]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033ee:	f023 0204 	bic.w	r2, r3, #4
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033f8:	491c      	ldr	r1, [pc, #112]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00b      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800340c:	4b17      	ldr	r3, [pc, #92]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800340e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003412:	f023 0218 	bic.w	r2, r3, #24
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341c:	4913      	ldr	r1, [pc, #76]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d017      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003430:	4b0e      	ldr	r3, [pc, #56]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003432:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003436:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003440:	490a      	ldr	r1, [pc, #40]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800344e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003452:	d105      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003454:	4b05      	ldr	r3, [pc, #20]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4a04      	ldr	r2, [pc, #16]	@ (800346c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800345a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800345e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003460:	7cbb      	ldrb	r3, [r7, #18]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000

08003470 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800347e:	4b72      	ldr	r3, [pc, #456]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00e      	beq.n	80034a8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800348a:	4b6f      	ldr	r3, [pc, #444]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f003 0203 	and.w	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d103      	bne.n	80034a2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
       ||
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d142      	bne.n	8003528 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	e03f      	b.n	8003528 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d018      	beq.n	80034e2 <RCCEx_PLLSAI1_Config+0x72>
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d825      	bhi.n	8003500 <RCCEx_PLLSAI1_Config+0x90>
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d002      	beq.n	80034be <RCCEx_PLLSAI1_Config+0x4e>
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d009      	beq.n	80034d0 <RCCEx_PLLSAI1_Config+0x60>
 80034bc:	e020      	b.n	8003500 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034be:	4b62      	ldr	r3, [pc, #392]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d11d      	bne.n	8003506 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ce:	e01a      	b.n	8003506 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034d0:	4b5d      	ldr	r3, [pc, #372]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d116      	bne.n	800350a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e0:	e013      	b.n	800350a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034e2:	4b59      	ldr	r3, [pc, #356]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10f      	bne.n	800350e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ee:	4b56      	ldr	r3, [pc, #344]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034fe:	e006      	b.n	800350e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
      break;
 8003504:	e004      	b.n	8003510 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003506:	bf00      	nop
 8003508:	e002      	b.n	8003510 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800350a:	bf00      	nop
 800350c:	e000      	b.n	8003510 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800350e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d108      	bne.n	8003528 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003516:	4b4c      	ldr	r3, [pc, #304]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f023 0203 	bic.w	r2, r3, #3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4949      	ldr	r1, [pc, #292]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003524:	4313      	orrs	r3, r2
 8003526:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f040 8086 	bne.w	800363c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003530:	4b45      	ldr	r3, [pc, #276]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a44      	ldr	r2, [pc, #272]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003536:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800353a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800353c:	f7fe f9e4 	bl	8001908 <HAL_GetTick>
 8003540:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003542:	e009      	b.n	8003558 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003544:	f7fe f9e0 	bl	8001908 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d902      	bls.n	8003558 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	73fb      	strb	r3, [r7, #15]
        break;
 8003556:	e005      	b.n	8003564 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003558:	4b3b      	ldr	r3, [pc, #236]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ef      	bne.n	8003544 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d168      	bne.n	800363c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d113      	bne.n	8003598 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003570:	4b35      	ldr	r3, [pc, #212]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	4b35      	ldr	r3, [pc, #212]	@ (800364c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003576:	4013      	ands	r3, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6892      	ldr	r2, [r2, #8]
 800357c:	0211      	lsls	r1, r2, #8
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68d2      	ldr	r2, [r2, #12]
 8003582:	06d2      	lsls	r2, r2, #27
 8003584:	4311      	orrs	r1, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6852      	ldr	r2, [r2, #4]
 800358a:	3a01      	subs	r2, #1
 800358c:	0112      	lsls	r2, r2, #4
 800358e:	430a      	orrs	r2, r1
 8003590:	492d      	ldr	r1, [pc, #180]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003592:	4313      	orrs	r3, r2
 8003594:	610b      	str	r3, [r1, #16]
 8003596:	e02d      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d115      	bne.n	80035ca <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800359e:	4b2a      	ldr	r3, [pc, #168]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003650 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6892      	ldr	r2, [r2, #8]
 80035aa:	0211      	lsls	r1, r2, #8
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6912      	ldr	r2, [r2, #16]
 80035b0:	0852      	lsrs	r2, r2, #1
 80035b2:	3a01      	subs	r2, #1
 80035b4:	0552      	lsls	r2, r2, #21
 80035b6:	4311      	orrs	r1, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6852      	ldr	r2, [r2, #4]
 80035bc:	3a01      	subs	r2, #1
 80035be:	0112      	lsls	r2, r2, #4
 80035c0:	430a      	orrs	r2, r1
 80035c2:	4921      	ldr	r1, [pc, #132]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	610b      	str	r3, [r1, #16]
 80035c8:	e014      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	4b21      	ldr	r3, [pc, #132]	@ (8003654 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6892      	ldr	r2, [r2, #8]
 80035d6:	0211      	lsls	r1, r2, #8
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6952      	ldr	r2, [r2, #20]
 80035dc:	0852      	lsrs	r2, r2, #1
 80035de:	3a01      	subs	r2, #1
 80035e0:	0652      	lsls	r2, r2, #25
 80035e2:	4311      	orrs	r1, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6852      	ldr	r2, [r2, #4]
 80035e8:	3a01      	subs	r2, #1
 80035ea:	0112      	lsls	r2, r2, #4
 80035ec:	430a      	orrs	r2, r1
 80035ee:	4916      	ldr	r1, [pc, #88]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035f4:	4b14      	ldr	r3, [pc, #80]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a13      	ldr	r2, [pc, #76]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fe f982 	bl	8001908 <HAL_GetTick>
 8003604:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003606:	e009      	b.n	800361c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003608:	f7fe f97e 	bl	8001908 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d902      	bls.n	800361c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	73fb      	strb	r3, [r7, #15]
          break;
 800361a:	e005      	b.n	8003628 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800361c:	4b0a      	ldr	r3, [pc, #40]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ef      	beq.n	8003608 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800362e:	4b06      	ldr	r3, [pc, #24]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	4904      	ldr	r1, [pc, #16]	@ (8003648 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003638:	4313      	orrs	r3, r2
 800363a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800363c:	7bfb      	ldrb	r3, [r7, #15]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
 800364c:	07ff800f 	.word	0x07ff800f
 8003650:	ff9f800f 	.word	0xff9f800f
 8003654:	f9ff800f 	.word	0xf9ff800f

08003658 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003666:	4b72      	ldr	r3, [pc, #456]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00e      	beq.n	8003690 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003672:	4b6f      	ldr	r3, [pc, #444]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0203 	and.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d103      	bne.n	800368a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
       ||
 8003686:	2b00      	cmp	r3, #0
 8003688:	d142      	bne.n	8003710 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
 800368e:	e03f      	b.n	8003710 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d018      	beq.n	80036ca <RCCEx_PLLSAI2_Config+0x72>
 8003698:	2b03      	cmp	r3, #3
 800369a:	d825      	bhi.n	80036e8 <RCCEx_PLLSAI2_Config+0x90>
 800369c:	2b01      	cmp	r3, #1
 800369e:	d002      	beq.n	80036a6 <RCCEx_PLLSAI2_Config+0x4e>
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d009      	beq.n	80036b8 <RCCEx_PLLSAI2_Config+0x60>
 80036a4:	e020      	b.n	80036e8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036a6:	4b62      	ldr	r3, [pc, #392]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11d      	bne.n	80036ee <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b6:	e01a      	b.n	80036ee <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036b8:	4b5d      	ldr	r3, [pc, #372]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d116      	bne.n	80036f2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c8:	e013      	b.n	80036f2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ca:	4b59      	ldr	r3, [pc, #356]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036d6:	4b56      	ldr	r3, [pc, #344]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036e6:	e006      	b.n	80036f6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      break;
 80036ec:	e004      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80036ee:	bf00      	nop
 80036f0:	e002      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80036f2:	bf00      	nop
 80036f4:	e000      	b.n	80036f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80036f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80036fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f023 0203 	bic.w	r2, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4949      	ldr	r1, [pc, #292]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 800370c:	4313      	orrs	r3, r2
 800370e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f040 8086 	bne.w	8003824 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003718:	4b45      	ldr	r3, [pc, #276]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a44      	ldr	r2, [pc, #272]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 800371e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003724:	f7fe f8f0 	bl	8001908 <HAL_GetTick>
 8003728:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800372a:	e009      	b.n	8003740 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800372c:	f7fe f8ec 	bl	8001908 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d902      	bls.n	8003740 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	73fb      	strb	r3, [r7, #15]
        break;
 800373e:	e005      	b.n	800374c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003740:	4b3b      	ldr	r3, [pc, #236]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ef      	bne.n	800372c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d168      	bne.n	8003824 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d113      	bne.n	8003780 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003758:	4b35      	ldr	r3, [pc, #212]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 800375a:	695a      	ldr	r2, [r3, #20]
 800375c:	4b35      	ldr	r3, [pc, #212]	@ (8003834 <RCCEx_PLLSAI2_Config+0x1dc>)
 800375e:	4013      	ands	r3, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6892      	ldr	r2, [r2, #8]
 8003764:	0211      	lsls	r1, r2, #8
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68d2      	ldr	r2, [r2, #12]
 800376a:	06d2      	lsls	r2, r2, #27
 800376c:	4311      	orrs	r1, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6852      	ldr	r2, [r2, #4]
 8003772:	3a01      	subs	r2, #1
 8003774:	0112      	lsls	r2, r2, #4
 8003776:	430a      	orrs	r2, r1
 8003778:	492d      	ldr	r1, [pc, #180]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 800377a:	4313      	orrs	r3, r2
 800377c:	614b      	str	r3, [r1, #20]
 800377e:	e02d      	b.n	80037dc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d115      	bne.n	80037b2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003786:	4b2a      	ldr	r3, [pc, #168]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	4b2b      	ldr	r3, [pc, #172]	@ (8003838 <RCCEx_PLLSAI2_Config+0x1e0>)
 800378c:	4013      	ands	r3, r2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6892      	ldr	r2, [r2, #8]
 8003792:	0211      	lsls	r1, r2, #8
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6912      	ldr	r2, [r2, #16]
 8003798:	0852      	lsrs	r2, r2, #1
 800379a:	3a01      	subs	r2, #1
 800379c:	0552      	lsls	r2, r2, #21
 800379e:	4311      	orrs	r1, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6852      	ldr	r2, [r2, #4]
 80037a4:	3a01      	subs	r2, #1
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	430a      	orrs	r2, r1
 80037aa:	4921      	ldr	r1, [pc, #132]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	614b      	str	r3, [r1, #20]
 80037b0:	e014      	b.n	80037dc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	4b21      	ldr	r3, [pc, #132]	@ (800383c <RCCEx_PLLSAI2_Config+0x1e4>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6892      	ldr	r2, [r2, #8]
 80037be:	0211      	lsls	r1, r2, #8
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6952      	ldr	r2, [r2, #20]
 80037c4:	0852      	lsrs	r2, r2, #1
 80037c6:	3a01      	subs	r2, #1
 80037c8:	0652      	lsls	r2, r2, #25
 80037ca:	4311      	orrs	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6852      	ldr	r2, [r2, #4]
 80037d0:	3a01      	subs	r2, #1
 80037d2:	0112      	lsls	r2, r2, #4
 80037d4:	430a      	orrs	r2, r1
 80037d6:	4916      	ldr	r1, [pc, #88]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037dc:	4b14      	ldr	r3, [pc, #80]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a13      	ldr	r2, [pc, #76]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e8:	f7fe f88e 	bl	8001908 <HAL_GetTick>
 80037ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037ee:	e009      	b.n	8003804 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037f0:	f7fe f88a 	bl	8001908 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d902      	bls.n	8003804 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	73fb      	strb	r3, [r7, #15]
          break;
 8003802:	e005      	b.n	8003810 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003804:	4b0a      	ldr	r3, [pc, #40]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0ef      	beq.n	80037f0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003816:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	4904      	ldr	r1, [pc, #16]	@ (8003830 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003820:	4313      	orrs	r3, r2
 8003822:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000
 8003834:	07ff800f 	.word	0x07ff800f
 8003838:	ff9f800f 	.word	0xff9f800f
 800383c:	f9ff800f 	.word	0xf9ff800f

08003840 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e095      	b.n	800397e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d108      	bne.n	800386c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003862:	d009      	beq.n	8003878 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	61da      	str	r2, [r3, #28]
 800386a:	e005      	b.n	8003878 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fd fe80 	bl	8001598 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038b8:	d902      	bls.n	80038c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e002      	b.n	80038c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80038ce:	d007      	beq.n	80038e0 <HAL_SPI_Init+0xa0>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038d8:	d002      	beq.n	80038e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003922:	ea42 0103 	orr.w	r1, r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	0c1b      	lsrs	r3, r3, #16
 800393c:	f003 0204 	and.w	r2, r3, #4
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	431a      	orrs	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800395c:	ea42 0103 	orr.w	r1, r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b088      	sub	sp, #32
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	4613      	mov	r3, r2
 8003994:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003996:	f7fd ffb7 	bl	8001908 <HAL_GetTick>
 800399a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d001      	beq.n	80039b0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
 80039ae:	e15c      	b.n	8003c6a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_SPI_Transmit+0x36>
 80039b6:	88fb      	ldrh	r3, [r7, #6]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e154      	b.n	8003c6a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_SPI_Transmit+0x48>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e14d      	b.n	8003c6a <HAL_SPI_Transmit+0x2e4>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2203      	movs	r2, #3
 80039da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	88fa      	ldrh	r2, [r7, #6]
 80039ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	88fa      	ldrh	r2, [r7, #6]
 80039f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a20:	d10f      	bne.n	8003a42 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4c:	2b40      	cmp	r3, #64	@ 0x40
 8003a4e:	d007      	beq.n	8003a60 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a68:	d952      	bls.n	8003b10 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_SPI_Transmit+0xf2>
 8003a72:	8b7b      	ldrh	r3, [r7, #26]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d145      	bne.n	8003b04 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7c:	881a      	ldrh	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a88:	1c9a      	adds	r2, r3, #2
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a9c:	e032      	b.n	8003b04 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d112      	bne.n	8003ad2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab0:	881a      	ldrh	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abc:	1c9a      	adds	r2, r3, #2
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ad0:	e018      	b.n	8003b04 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad2:	f7fd ff19 	bl	8001908 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d803      	bhi.n	8003aea <HAL_SPI_Transmit+0x164>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d102      	bne.n	8003af0 <HAL_SPI_Transmit+0x16a>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d109      	bne.n	8003b04 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e0b2      	b.n	8003c6a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1c7      	bne.n	8003a9e <HAL_SPI_Transmit+0x118>
 8003b0e:	e083      	b.n	8003c18 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_SPI_Transmit+0x198>
 8003b18:	8b7b      	ldrh	r3, [r7, #26]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d177      	bne.n	8003c0e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d912      	bls.n	8003b4e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2c:	881a      	ldrh	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b38:	1c9a      	adds	r2, r3, #2
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b02      	subs	r3, #2
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b4c:	e05f      	b.n	8003c0e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	330c      	adds	r3, #12
 8003b58:	7812      	ldrb	r2, [r2, #0]
 8003b5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003b74:	e04b      	b.n	8003c0e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d12b      	bne.n	8003bdc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d912      	bls.n	8003bb4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b92:	881a      	ldrh	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9e:	1c9a      	adds	r2, r3, #2
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b02      	subs	r3, #2
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bb2:	e02c      	b.n	8003c0e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	7812      	ldrb	r2, [r2, #0]
 8003bc0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bda:	e018      	b.n	8003c0e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bdc:	f7fd fe94 	bl	8001908 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d803      	bhi.n	8003bf4 <HAL_SPI_Transmit+0x26e>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf2:	d102      	bne.n	8003bfa <HAL_SPI_Transmit+0x274>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e02d      	b.n	8003c6a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ae      	bne.n	8003b76 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	6839      	ldr	r1, [r7, #0]
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f947 	bl	8003eb0 <SPI_EndRxTxTransaction>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003c68:	2300      	movs	r3, #0
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c84:	f7fd fe40 	bl	8001908 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	4413      	add	r3, r2
 8003c92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c94:	f7fd fe38 	bl	8001908 <HAL_GetTick>
 8003c98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c9a:	4b39      	ldr	r3, [pc, #228]	@ (8003d80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	015b      	lsls	r3, r3, #5
 8003ca0:	0d1b      	lsrs	r3, r3, #20
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003caa:	e054      	b.n	8003d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb2:	d050      	beq.n	8003d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cb4:	f7fd fe28 	bl	8001908 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d902      	bls.n	8003cca <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d13d      	bne.n	8003d46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ce2:	d111      	bne.n	8003d08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cec:	d004      	beq.n	8003cf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf6:	d107      	bne.n	8003d08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d10:	d10f      	bne.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e017      	b.n	8003d76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	bf0c      	ite	eq
 8003d66:	2301      	moveq	r3, #1
 8003d68:	2300      	movne	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d19b      	bne.n	8003cac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20040000 	.word	0x20040000

08003d84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	@ 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d96:	f7fd fdb7 	bl	8001908 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	4413      	add	r3, r2
 8003da4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003da6:	f7fd fdaf 	bl	8001908 <HAL_GetTick>
 8003daa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	330c      	adds	r3, #12
 8003db2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003db4:	4b3d      	ldr	r3, [pc, #244]	@ (8003eac <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	00da      	lsls	r2, r3, #3
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	0d1b      	lsrs	r3, r3, #20
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003dcc:	e060      	b.n	8003e90 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003dd4:	d107      	bne.n	8003de6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d104      	bne.n	8003de6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dec:	d050      	beq.n	8003e90 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dee:	f7fd fd8b 	bl	8001908 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d902      	bls.n	8003e04 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d13d      	bne.n	8003e80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e1c:	d111      	bne.n	8003e42 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e26:	d004      	beq.n	8003e32 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e30:	d107      	bne.n	8003e42 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e4a:	d10f      	bne.n	8003e6c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e010      	b.n	8003ea2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d196      	bne.n	8003dce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3728      	adds	r7, #40	@ 0x28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20040000 	.word	0x20040000

08003eb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7ff ff5b 	bl	8003d84 <SPI_WaitFifoStateUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed8:	f043 0220 	orr.w	r2, r3, #32
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e027      	b.n	8003f34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	2180      	movs	r1, #128	@ 0x80
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7ff fec0 	bl	8003c74 <SPI_WaitFlagStateUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003efe:	f043 0220 	orr.w	r2, r3, #32
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e014      	b.n	8003f34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f7ff ff34 	bl	8003d84 <SPI_WaitFifoStateUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d007      	beq.n	8003f32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f26:	f043 0220 	orr.w	r2, r3, #32
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e000      	b.n	8003f34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e042      	b.n	8003fd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fd fa73 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2224      	movs	r2, #36	@ 0x24
 8003f6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fc7c 	bl	8004884 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f97d 	bl	800428c <UART_SetConfig>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e01b      	b.n	8003fd4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003faa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fcfb 	bl	80049c8 <UART_CheckIdleState>
 8003fd2:	4603      	mov	r3, r0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	@ 0x28
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d17b      	bne.n	80040ee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <HAL_UART_Transmit+0x26>
 8003ffc:	88fb      	ldrh	r3, [r7, #6]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e074      	b.n	80040f0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2221      	movs	r2, #33	@ 0x21
 8004012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004016:	f7fd fc77 	bl	8001908 <HAL_GetTick>
 800401a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	88fa      	ldrh	r2, [r7, #6]
 8004020:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	88fa      	ldrh	r2, [r7, #6]
 8004028:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004034:	d108      	bne.n	8004048 <HAL_UART_Transmit+0x6c>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d104      	bne.n	8004048 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	e003      	b.n	8004050 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800404c:	2300      	movs	r3, #0
 800404e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004050:	e030      	b.n	80040b4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2200      	movs	r2, #0
 800405a:	2180      	movs	r1, #128	@ 0x80
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 fd5d 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e03d      	b.n	80040f0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	881a      	ldrh	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004086:	b292      	uxth	r2, r2
 8004088:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	3302      	adds	r3, #2
 800408e:	61bb      	str	r3, [r7, #24]
 8004090:	e007      	b.n	80040a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	781a      	ldrb	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	3301      	adds	r3, #1
 80040a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1c8      	bne.n	8004052 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2200      	movs	r2, #0
 80040c8:	2140      	movs	r1, #64	@ 0x40
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fd26 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2220      	movs	r2, #32
 80040da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e006      	b.n	80040f0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	e000      	b.n	80040f0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80040ee:	2302      	movs	r3, #2
  }
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3720      	adds	r7, #32
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08a      	sub	sp, #40	@ 0x28
 80040fc:	af02      	add	r7, sp, #8
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	4613      	mov	r3, r2
 8004106:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800410e:	2b20      	cmp	r3, #32
 8004110:	f040 80b6 	bne.w	8004280 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_UART_Receive+0x28>
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0ae      	b.n	8004282 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2222      	movs	r2, #34	@ 0x22
 8004130:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800413a:	f7fd fbe5 	bl	8001908 <HAL_GetTick>
 800413e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	88fa      	ldrh	r2, [r7, #6]
 800414c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004158:	d10e      	bne.n	8004178 <HAL_UART_Receive+0x80>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d105      	bne.n	800416e <HAL_UART_Receive+0x76>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004168:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800416c:	e02d      	b.n	80041ca <HAL_UART_Receive+0xd2>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	22ff      	movs	r2, #255	@ 0xff
 8004172:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004176:	e028      	b.n	80041ca <HAL_UART_Receive+0xd2>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10d      	bne.n	800419c <HAL_UART_Receive+0xa4>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d104      	bne.n	8004192 <HAL_UART_Receive+0x9a>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	22ff      	movs	r2, #255	@ 0xff
 800418c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004190:	e01b      	b.n	80041ca <HAL_UART_Receive+0xd2>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	227f      	movs	r2, #127	@ 0x7f
 8004196:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800419a:	e016      	b.n	80041ca <HAL_UART_Receive+0xd2>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041a4:	d10d      	bne.n	80041c2 <HAL_UART_Receive+0xca>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d104      	bne.n	80041b8 <HAL_UART_Receive+0xc0>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	227f      	movs	r2, #127	@ 0x7f
 80041b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80041b6:	e008      	b.n	80041ca <HAL_UART_Receive+0xd2>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	223f      	movs	r2, #63	@ 0x3f
 80041bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80041c0:	e003      	b.n	80041ca <HAL_UART_Receive+0xd2>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80041d0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041da:	d108      	bne.n	80041ee <HAL_UART_Receive+0xf6>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d104      	bne.n	80041ee <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	61bb      	str	r3, [r7, #24]
 80041ec:	e003      	b.n	80041f6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80041f6:	e037      	b.n	8004268 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2200      	movs	r2, #0
 8004200:	2120      	movs	r1, #32
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fc8a 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e033      	b.n	8004282 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10c      	bne.n	800423a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004226:	b29a      	uxth	r2, r3
 8004228:	8a7b      	ldrh	r3, [r7, #18]
 800422a:	4013      	ands	r3, r2
 800422c:	b29a      	uxth	r2, r3
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	3302      	adds	r3, #2
 8004236:	61bb      	str	r3, [r7, #24]
 8004238:	e00d      	b.n	8004256 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004240:	b29b      	uxth	r3, r3
 8004242:	b2da      	uxtb	r2, r3
 8004244:	8a7b      	ldrh	r3, [r7, #18]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	4013      	ands	r3, r2
 800424a:	b2da      	uxtb	r2, r3
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	3301      	adds	r3, #1
 8004254:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1c1      	bne.n	80041f8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	e000      	b.n	8004282 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004280:	2302      	movs	r3, #2
  }
}
 8004282:	4618      	mov	r0, r3
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800428c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004290:	b08c      	sub	sp, #48	@ 0x30
 8004292:	af00      	add	r7, sp, #0
 8004294:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4baa      	ldr	r3, [pc, #680]	@ (8004564 <UART_SetConfig+0x2d8>)
 80042bc:	4013      	ands	r3, r2
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a9f      	ldr	r2, [pc, #636]	@ (8004568 <UART_SetConfig+0x2dc>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042f4:	4313      	orrs	r3, r2
 80042f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004302:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800430c:	430b      	orrs	r3, r1
 800430e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	f023 010f 	bic.w	r1, r3, #15
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a90      	ldr	r2, [pc, #576]	@ (800456c <UART_SetConfig+0x2e0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d125      	bne.n	800437c <UART_SetConfig+0xf0>
 8004330:	4b8f      	ldr	r3, [pc, #572]	@ (8004570 <UART_SetConfig+0x2e4>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b03      	cmp	r3, #3
 800433c:	d81a      	bhi.n	8004374 <UART_SetConfig+0xe8>
 800433e:	a201      	add	r2, pc, #4	@ (adr r2, 8004344 <UART_SetConfig+0xb8>)
 8004340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004344:	08004355 	.word	0x08004355
 8004348:	08004365 	.word	0x08004365
 800434c:	0800435d 	.word	0x0800435d
 8004350:	0800436d 	.word	0x0800436d
 8004354:	2301      	movs	r3, #1
 8004356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800435a:	e116      	b.n	800458a <UART_SetConfig+0x2fe>
 800435c:	2302      	movs	r3, #2
 800435e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004362:	e112      	b.n	800458a <UART_SetConfig+0x2fe>
 8004364:	2304      	movs	r3, #4
 8004366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800436a:	e10e      	b.n	800458a <UART_SetConfig+0x2fe>
 800436c:	2308      	movs	r3, #8
 800436e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004372:	e10a      	b.n	800458a <UART_SetConfig+0x2fe>
 8004374:	2310      	movs	r3, #16
 8004376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800437a:	e106      	b.n	800458a <UART_SetConfig+0x2fe>
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a7c      	ldr	r2, [pc, #496]	@ (8004574 <UART_SetConfig+0x2e8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d138      	bne.n	80043f8 <UART_SetConfig+0x16c>
 8004386:	4b7a      	ldr	r3, [pc, #488]	@ (8004570 <UART_SetConfig+0x2e4>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	2b0c      	cmp	r3, #12
 8004392:	d82d      	bhi.n	80043f0 <UART_SetConfig+0x164>
 8004394:	a201      	add	r2, pc, #4	@ (adr r2, 800439c <UART_SetConfig+0x110>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	080043d1 	.word	0x080043d1
 80043a0:	080043f1 	.word	0x080043f1
 80043a4:	080043f1 	.word	0x080043f1
 80043a8:	080043f1 	.word	0x080043f1
 80043ac:	080043e1 	.word	0x080043e1
 80043b0:	080043f1 	.word	0x080043f1
 80043b4:	080043f1 	.word	0x080043f1
 80043b8:	080043f1 	.word	0x080043f1
 80043bc:	080043d9 	.word	0x080043d9
 80043c0:	080043f1 	.word	0x080043f1
 80043c4:	080043f1 	.word	0x080043f1
 80043c8:	080043f1 	.word	0x080043f1
 80043cc:	080043e9 	.word	0x080043e9
 80043d0:	2300      	movs	r3, #0
 80043d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043d6:	e0d8      	b.n	800458a <UART_SetConfig+0x2fe>
 80043d8:	2302      	movs	r3, #2
 80043da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043de:	e0d4      	b.n	800458a <UART_SetConfig+0x2fe>
 80043e0:	2304      	movs	r3, #4
 80043e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043e6:	e0d0      	b.n	800458a <UART_SetConfig+0x2fe>
 80043e8:	2308      	movs	r3, #8
 80043ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ee:	e0cc      	b.n	800458a <UART_SetConfig+0x2fe>
 80043f0:	2310      	movs	r3, #16
 80043f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043f6:	e0c8      	b.n	800458a <UART_SetConfig+0x2fe>
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a5e      	ldr	r2, [pc, #376]	@ (8004578 <UART_SetConfig+0x2ec>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d125      	bne.n	800444e <UART_SetConfig+0x1c2>
 8004402:	4b5b      	ldr	r3, [pc, #364]	@ (8004570 <UART_SetConfig+0x2e4>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004408:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800440c:	2b30      	cmp	r3, #48	@ 0x30
 800440e:	d016      	beq.n	800443e <UART_SetConfig+0x1b2>
 8004410:	2b30      	cmp	r3, #48	@ 0x30
 8004412:	d818      	bhi.n	8004446 <UART_SetConfig+0x1ba>
 8004414:	2b20      	cmp	r3, #32
 8004416:	d00a      	beq.n	800442e <UART_SetConfig+0x1a2>
 8004418:	2b20      	cmp	r3, #32
 800441a:	d814      	bhi.n	8004446 <UART_SetConfig+0x1ba>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <UART_SetConfig+0x19a>
 8004420:	2b10      	cmp	r3, #16
 8004422:	d008      	beq.n	8004436 <UART_SetConfig+0x1aa>
 8004424:	e00f      	b.n	8004446 <UART_SetConfig+0x1ba>
 8004426:	2300      	movs	r3, #0
 8004428:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800442c:	e0ad      	b.n	800458a <UART_SetConfig+0x2fe>
 800442e:	2302      	movs	r3, #2
 8004430:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004434:	e0a9      	b.n	800458a <UART_SetConfig+0x2fe>
 8004436:	2304      	movs	r3, #4
 8004438:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800443c:	e0a5      	b.n	800458a <UART_SetConfig+0x2fe>
 800443e:	2308      	movs	r3, #8
 8004440:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004444:	e0a1      	b.n	800458a <UART_SetConfig+0x2fe>
 8004446:	2310      	movs	r3, #16
 8004448:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800444c:	e09d      	b.n	800458a <UART_SetConfig+0x2fe>
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a4a      	ldr	r2, [pc, #296]	@ (800457c <UART_SetConfig+0x2f0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d125      	bne.n	80044a4 <UART_SetConfig+0x218>
 8004458:	4b45      	ldr	r3, [pc, #276]	@ (8004570 <UART_SetConfig+0x2e4>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004462:	2bc0      	cmp	r3, #192	@ 0xc0
 8004464:	d016      	beq.n	8004494 <UART_SetConfig+0x208>
 8004466:	2bc0      	cmp	r3, #192	@ 0xc0
 8004468:	d818      	bhi.n	800449c <UART_SetConfig+0x210>
 800446a:	2b80      	cmp	r3, #128	@ 0x80
 800446c:	d00a      	beq.n	8004484 <UART_SetConfig+0x1f8>
 800446e:	2b80      	cmp	r3, #128	@ 0x80
 8004470:	d814      	bhi.n	800449c <UART_SetConfig+0x210>
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <UART_SetConfig+0x1f0>
 8004476:	2b40      	cmp	r3, #64	@ 0x40
 8004478:	d008      	beq.n	800448c <UART_SetConfig+0x200>
 800447a:	e00f      	b.n	800449c <UART_SetConfig+0x210>
 800447c:	2300      	movs	r3, #0
 800447e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004482:	e082      	b.n	800458a <UART_SetConfig+0x2fe>
 8004484:	2302      	movs	r3, #2
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448a:	e07e      	b.n	800458a <UART_SetConfig+0x2fe>
 800448c:	2304      	movs	r3, #4
 800448e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004492:	e07a      	b.n	800458a <UART_SetConfig+0x2fe>
 8004494:	2308      	movs	r3, #8
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800449a:	e076      	b.n	800458a <UART_SetConfig+0x2fe>
 800449c:	2310      	movs	r3, #16
 800449e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044a2:	e072      	b.n	800458a <UART_SetConfig+0x2fe>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a35      	ldr	r2, [pc, #212]	@ (8004580 <UART_SetConfig+0x2f4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d12a      	bne.n	8004504 <UART_SetConfig+0x278>
 80044ae:	4b30      	ldr	r3, [pc, #192]	@ (8004570 <UART_SetConfig+0x2e4>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044bc:	d01a      	beq.n	80044f4 <UART_SetConfig+0x268>
 80044be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044c2:	d81b      	bhi.n	80044fc <UART_SetConfig+0x270>
 80044c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c8:	d00c      	beq.n	80044e4 <UART_SetConfig+0x258>
 80044ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ce:	d815      	bhi.n	80044fc <UART_SetConfig+0x270>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <UART_SetConfig+0x250>
 80044d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d8:	d008      	beq.n	80044ec <UART_SetConfig+0x260>
 80044da:	e00f      	b.n	80044fc <UART_SetConfig+0x270>
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e2:	e052      	b.n	800458a <UART_SetConfig+0x2fe>
 80044e4:	2302      	movs	r3, #2
 80044e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ea:	e04e      	b.n	800458a <UART_SetConfig+0x2fe>
 80044ec:	2304      	movs	r3, #4
 80044ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f2:	e04a      	b.n	800458a <UART_SetConfig+0x2fe>
 80044f4:	2308      	movs	r3, #8
 80044f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044fa:	e046      	b.n	800458a <UART_SetConfig+0x2fe>
 80044fc:	2310      	movs	r3, #16
 80044fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004502:	e042      	b.n	800458a <UART_SetConfig+0x2fe>
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a17      	ldr	r2, [pc, #92]	@ (8004568 <UART_SetConfig+0x2dc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d13a      	bne.n	8004584 <UART_SetConfig+0x2f8>
 800450e:	4b18      	ldr	r3, [pc, #96]	@ (8004570 <UART_SetConfig+0x2e4>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004514:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004518:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800451c:	d01a      	beq.n	8004554 <UART_SetConfig+0x2c8>
 800451e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004522:	d81b      	bhi.n	800455c <UART_SetConfig+0x2d0>
 8004524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004528:	d00c      	beq.n	8004544 <UART_SetConfig+0x2b8>
 800452a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800452e:	d815      	bhi.n	800455c <UART_SetConfig+0x2d0>
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <UART_SetConfig+0x2b0>
 8004534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004538:	d008      	beq.n	800454c <UART_SetConfig+0x2c0>
 800453a:	e00f      	b.n	800455c <UART_SetConfig+0x2d0>
 800453c:	2300      	movs	r3, #0
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004542:	e022      	b.n	800458a <UART_SetConfig+0x2fe>
 8004544:	2302      	movs	r3, #2
 8004546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800454a:	e01e      	b.n	800458a <UART_SetConfig+0x2fe>
 800454c:	2304      	movs	r3, #4
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004552:	e01a      	b.n	800458a <UART_SetConfig+0x2fe>
 8004554:	2308      	movs	r3, #8
 8004556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800455a:	e016      	b.n	800458a <UART_SetConfig+0x2fe>
 800455c:	2310      	movs	r3, #16
 800455e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004562:	e012      	b.n	800458a <UART_SetConfig+0x2fe>
 8004564:	cfff69f3 	.word	0xcfff69f3
 8004568:	40008000 	.word	0x40008000
 800456c:	40013800 	.word	0x40013800
 8004570:	40021000 	.word	0x40021000
 8004574:	40004400 	.word	0x40004400
 8004578:	40004800 	.word	0x40004800
 800457c:	40004c00 	.word	0x40004c00
 8004580:	40005000 	.word	0x40005000
 8004584:	2310      	movs	r3, #16
 8004586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4aae      	ldr	r2, [pc, #696]	@ (8004848 <UART_SetConfig+0x5bc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	f040 8097 	bne.w	80046c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004596:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800459a:	2b08      	cmp	r3, #8
 800459c:	d823      	bhi.n	80045e6 <UART_SetConfig+0x35a>
 800459e:	a201      	add	r2, pc, #4	@ (adr r2, 80045a4 <UART_SetConfig+0x318>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045c9 	.word	0x080045c9
 80045a8:	080045e7 	.word	0x080045e7
 80045ac:	080045d1 	.word	0x080045d1
 80045b0:	080045e7 	.word	0x080045e7
 80045b4:	080045d7 	.word	0x080045d7
 80045b8:	080045e7 	.word	0x080045e7
 80045bc:	080045e7 	.word	0x080045e7
 80045c0:	080045e7 	.word	0x080045e7
 80045c4:	080045df 	.word	0x080045df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c8:	f7fe fb36 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 80045cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045ce:	e010      	b.n	80045f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d0:	4b9e      	ldr	r3, [pc, #632]	@ (800484c <UART_SetConfig+0x5c0>)
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045d4:	e00d      	b.n	80045f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d6:	f7fe fa97 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 80045da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045dc:	e009      	b.n	80045f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045e4:	e005      	b.n	80045f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80045f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8130 	beq.w	800485a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	4a94      	ldr	r2, [pc, #592]	@ (8004850 <UART_SetConfig+0x5c4>)
 8004600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004604:	461a      	mov	r2, r3
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	fbb3 f3f2 	udiv	r3, r3, r2
 800460c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	4413      	add	r3, r2
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	429a      	cmp	r2, r3
 800461c:	d305      	bcc.n	800462a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	429a      	cmp	r2, r3
 8004628:	d903      	bls.n	8004632 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004630:	e113      	b.n	800485a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	2200      	movs	r2, #0
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	60fa      	str	r2, [r7, #12]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	4a84      	ldr	r2, [pc, #528]	@ (8004850 <UART_SetConfig+0x5c4>)
 8004640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004644:	b29b      	uxth	r3, r3
 8004646:	2200      	movs	r2, #0
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004650:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004654:	f7fb fe2c 	bl	80002b0 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4610      	mov	r0, r2
 800465e:	4619      	mov	r1, r3
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	020b      	lsls	r3, r1, #8
 800466a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800466e:	0202      	lsls	r2, r0, #8
 8004670:	6979      	ldr	r1, [r7, #20]
 8004672:	6849      	ldr	r1, [r1, #4]
 8004674:	0849      	lsrs	r1, r1, #1
 8004676:	2000      	movs	r0, #0
 8004678:	460c      	mov	r4, r1
 800467a:	4605      	mov	r5, r0
 800467c:	eb12 0804 	adds.w	r8, r2, r4
 8004680:	eb43 0905 	adc.w	r9, r3, r5
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	469a      	mov	sl, r3
 800468c:	4693      	mov	fp, r2
 800468e:	4652      	mov	r2, sl
 8004690:	465b      	mov	r3, fp
 8004692:	4640      	mov	r0, r8
 8004694:	4649      	mov	r1, r9
 8004696:	f7fb fe0b 	bl	80002b0 <__aeabi_uldivmod>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4613      	mov	r3, r2
 80046a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046a8:	d308      	bcc.n	80046bc <UART_SetConfig+0x430>
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046b0:	d204      	bcs.n	80046bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6a3a      	ldr	r2, [r7, #32]
 80046b8:	60da      	str	r2, [r3, #12]
 80046ba:	e0ce      	b.n	800485a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046c2:	e0ca      	b.n	800485a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046cc:	d166      	bne.n	800479c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80046ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d827      	bhi.n	8004726 <UART_SetConfig+0x49a>
 80046d6:	a201      	add	r2, pc, #4	@ (adr r2, 80046dc <UART_SetConfig+0x450>)
 80046d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046dc:	08004701 	.word	0x08004701
 80046e0:	08004709 	.word	0x08004709
 80046e4:	08004711 	.word	0x08004711
 80046e8:	08004727 	.word	0x08004727
 80046ec:	08004717 	.word	0x08004717
 80046f0:	08004727 	.word	0x08004727
 80046f4:	08004727 	.word	0x08004727
 80046f8:	08004727 	.word	0x08004727
 80046fc:	0800471f 	.word	0x0800471f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004700:	f7fe fa9a 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 8004704:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004706:	e014      	b.n	8004732 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004708:	f7fe faac 	bl	8002c64 <HAL_RCC_GetPCLK2Freq>
 800470c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800470e:	e010      	b.n	8004732 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004710:	4b4e      	ldr	r3, [pc, #312]	@ (800484c <UART_SetConfig+0x5c0>)
 8004712:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004714:	e00d      	b.n	8004732 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004716:	f7fe f9f7 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 800471a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800471c:	e009      	b.n	8004732 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800471e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004724:	e005      	b.n	8004732 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004730:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8090 	beq.w	800485a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	4a44      	ldr	r2, [pc, #272]	@ (8004850 <UART_SetConfig+0x5c4>)
 8004740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004744:	461a      	mov	r2, r3
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	fbb3 f3f2 	udiv	r3, r3, r2
 800474c:	005a      	lsls	r2, r3, #1
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	441a      	add	r2, r3
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	fbb2 f3f3 	udiv	r3, r2, r3
 800475e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	2b0f      	cmp	r3, #15
 8004764:	d916      	bls.n	8004794 <UART_SetConfig+0x508>
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800476c:	d212      	bcs.n	8004794 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f023 030f 	bic.w	r3, r3, #15
 8004776:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	b29b      	uxth	r3, r3
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	b29a      	uxth	r2, r3
 8004784:	8bfb      	ldrh	r3, [r7, #30]
 8004786:	4313      	orrs	r3, r2
 8004788:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	8bfa      	ldrh	r2, [r7, #30]
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	e062      	b.n	800485a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800479a:	e05e      	b.n	800485a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800479c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d828      	bhi.n	80047f6 <UART_SetConfig+0x56a>
 80047a4:	a201      	add	r2, pc, #4	@ (adr r2, 80047ac <UART_SetConfig+0x520>)
 80047a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047aa:	bf00      	nop
 80047ac:	080047d1 	.word	0x080047d1
 80047b0:	080047d9 	.word	0x080047d9
 80047b4:	080047e1 	.word	0x080047e1
 80047b8:	080047f7 	.word	0x080047f7
 80047bc:	080047e7 	.word	0x080047e7
 80047c0:	080047f7 	.word	0x080047f7
 80047c4:	080047f7 	.word	0x080047f7
 80047c8:	080047f7 	.word	0x080047f7
 80047cc:	080047ef 	.word	0x080047ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d0:	f7fe fa32 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 80047d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047d6:	e014      	b.n	8004802 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d8:	f7fe fa44 	bl	8002c64 <HAL_RCC_GetPCLK2Freq>
 80047dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047de:	e010      	b.n	8004802 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e0:	4b1a      	ldr	r3, [pc, #104]	@ (800484c <UART_SetConfig+0x5c0>)
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047e4:	e00d      	b.n	8004802 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047e6:	f7fe f98f 	bl	8002b08 <HAL_RCC_GetSysClockFreq>
 80047ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047ec:	e009      	b.n	8004802 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047f4:	e005      	b.n	8004802 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004800:	bf00      	nop
    }

    if (pclk != 0U)
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d028      	beq.n	800485a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480c:	4a10      	ldr	r2, [pc, #64]	@ (8004850 <UART_SetConfig+0x5c4>)
 800480e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004812:	461a      	mov	r2, r3
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	fbb3 f2f2 	udiv	r2, r3, r2
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	085b      	lsrs	r3, r3, #1
 8004820:	441a      	add	r2, r3
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	2b0f      	cmp	r3, #15
 8004830:	d910      	bls.n	8004854 <UART_SetConfig+0x5c8>
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004838:	d20c      	bcs.n	8004854 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	b29a      	uxth	r2, r3
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	e009      	b.n	800485a <UART_SetConfig+0x5ce>
 8004846:	bf00      	nop
 8004848:	40008000 	.word	0x40008000
 800484c:	00f42400 	.word	0x00f42400
 8004850:	08005f54 	.word	0x08005f54
      }
      else
      {
        ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2201      	movs	r2, #1
 800485e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2201      	movs	r2, #1
 8004866:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2200      	movs	r2, #0
 800486e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2200      	movs	r2, #0
 8004874:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004876:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800487a:	4618      	mov	r0, r3
 800487c:	3730      	adds	r7, #48	@ 0x30
 800487e:	46bd      	mov	sp, r7
 8004880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01a      	beq.n	800499a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004982:	d10a      	bne.n	800499a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	605a      	str	r2, [r3, #4]
  }
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b098      	sub	sp, #96	@ 0x60
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049d8:	f7fc ff96 	bl	8001908 <HAL_GetTick>
 80049dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d12f      	bne.n	8004a4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f4:	2200      	movs	r2, #0
 80049f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f88e 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d022      	beq.n	8004a4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	461a      	mov	r2, r3
 8004a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a26:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a2c:	e841 2300 	strex	r3, r2, [r1]
 8004a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1e6      	bne.n	8004a06 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e063      	b.n	8004b14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d149      	bne.n	8004aee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a5a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a62:	2200      	movs	r2, #0
 8004a64:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f857 	bl	8004b1c <UART_WaitOnFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d03c      	beq.n	8004aee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	623b      	str	r3, [r7, #32]
   return(result);
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a92:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a94:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e6      	bne.n	8004a74 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3308      	adds	r3, #8
 8004aac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3308      	adds	r3, #8
 8004ac4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ac6:	61fa      	str	r2, [r7, #28]
 8004ac8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	69b9      	ldr	r1, [r7, #24]
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e5      	bne.n	8004aa6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e012      	b.n	8004b14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3758      	adds	r7, #88	@ 0x58
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b2c:	e04f      	b.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b34:	d04b      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b36:	f7fc fee7 	bl	8001908 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e04e      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d037      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b80      	cmp	r3, #128	@ 0x80
 8004b62:	d034      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b40      	cmp	r3, #64	@ 0x40
 8004b68:	d031      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d110      	bne.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f838 	bl	8004bf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2208      	movs	r2, #8
 8004b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e029      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ba8:	d111      	bne.n	8004bce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f81e 	bl	8004bf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e00f      	b.n	8004bee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	bf0c      	ite	eq
 8004bde:	2301      	moveq	r3, #1
 8004be0:	2300      	movne	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d0a0      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b095      	sub	sp, #84	@ 0x54
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c06:	e853 3f00 	ldrex	r3, [r3]
 8004c0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c24:	e841 2300 	strex	r3, r2, [r1]
 8004c28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e6      	bne.n	8004bfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3308      	adds	r3, #8
 8004c52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e3      	bne.n	8004c30 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d118      	bne.n	8004ca2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f023 0310 	bic.w	r3, r3, #16
 8004c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c8e:	61bb      	str	r3, [r7, #24]
 8004c90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6979      	ldr	r1, [r7, #20]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e6      	bne.n	8004c70 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004cb6:	bf00      	nop
 8004cb8:	3754      	adds	r7, #84	@ 0x54
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_UARTEx_DisableFifoMode+0x16>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e027      	b.n	8004d28 <HAL_UARTEx_DisableFifoMode+0x66>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2224      	movs	r2, #36	@ 0x24
 8004ce4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004d06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e02d      	b.n	8004da8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2224      	movs	r2, #36	@ 0x24
 8004d58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f84f 	bl	8004e2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e02d      	b.n	8004e24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2224      	movs	r2, #36	@ 0x24
 8004dd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0201 	bic.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f811 	bl	8004e2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d108      	bne.n	8004e4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e4c:	e031      	b.n	8004eb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e4e:	2308      	movs	r3, #8
 8004e50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e52:	2308      	movs	r3, #8
 8004e54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	0e5b      	lsrs	r3, r3, #25
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	0f5b      	lsrs	r3, r3, #29
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e76:	7bbb      	ldrb	r3, [r7, #14]
 8004e78:	7b3a      	ldrb	r2, [r7, #12]
 8004e7a:	4911      	ldr	r1, [pc, #68]	@ (8004ec0 <UARTEx_SetNbDataToProcess+0x94>)
 8004e7c:	5c8a      	ldrb	r2, [r1, r2]
 8004e7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e82:	7b3a      	ldrb	r2, [r7, #12]
 8004e84:	490f      	ldr	r1, [pc, #60]	@ (8004ec4 <UARTEx_SetNbDataToProcess+0x98>)
 8004e86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e88:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	7b7a      	ldrb	r2, [r7, #13]
 8004e98:	4909      	ldr	r1, [pc, #36]	@ (8004ec0 <UARTEx_SetNbDataToProcess+0x94>)
 8004e9a:	5c8a      	ldrb	r2, [r1, r2]
 8004e9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ea0:	7b7a      	ldrb	r2, [r7, #13]
 8004ea2:	4908      	ldr	r1, [pc, #32]	@ (8004ec4 <UARTEx_SetNbDataToProcess+0x98>)
 8004ea4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ea6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	08005f6c 	.word	0x08005f6c
 8004ec4:	08005f74 	.word	0x08005f74

08004ec8 <malloc>:
 8004ec8:	4b02      	ldr	r3, [pc, #8]	@ (8004ed4 <malloc+0xc>)
 8004eca:	4601      	mov	r1, r0
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	f000 b82d 	b.w	8004f2c <_malloc_r>
 8004ed2:	bf00      	nop
 8004ed4:	20040018 	.word	0x20040018

08004ed8 <free>:
 8004ed8:	4b02      	ldr	r3, [pc, #8]	@ (8004ee4 <free+0xc>)
 8004eda:	4601      	mov	r1, r0
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	f000 bb47 	b.w	8005570 <_free_r>
 8004ee2:	bf00      	nop
 8004ee4:	20040018 	.word	0x20040018

08004ee8 <sbrk_aligned>:
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	4e0f      	ldr	r6, [pc, #60]	@ (8004f28 <sbrk_aligned+0x40>)
 8004eec:	460c      	mov	r4, r1
 8004eee:	6831      	ldr	r1, [r6, #0]
 8004ef0:	4605      	mov	r5, r0
 8004ef2:	b911      	cbnz	r1, 8004efa <sbrk_aligned+0x12>
 8004ef4:	f000 faec 	bl	80054d0 <_sbrk_r>
 8004ef8:	6030      	str	r0, [r6, #0]
 8004efa:	4621      	mov	r1, r4
 8004efc:	4628      	mov	r0, r5
 8004efe:	f000 fae7 	bl	80054d0 <_sbrk_r>
 8004f02:	1c43      	adds	r3, r0, #1
 8004f04:	d103      	bne.n	8004f0e <sbrk_aligned+0x26>
 8004f06:	f04f 34ff 	mov.w	r4, #4294967295
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	bd70      	pop	{r4, r5, r6, pc}
 8004f0e:	1cc4      	adds	r4, r0, #3
 8004f10:	f024 0403 	bic.w	r4, r4, #3
 8004f14:	42a0      	cmp	r0, r4
 8004f16:	d0f8      	beq.n	8004f0a <sbrk_aligned+0x22>
 8004f18:	1a21      	subs	r1, r4, r0
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	f000 fad8 	bl	80054d0 <_sbrk_r>
 8004f20:	3001      	adds	r0, #1
 8004f22:	d1f2      	bne.n	8004f0a <sbrk_aligned+0x22>
 8004f24:	e7ef      	b.n	8004f06 <sbrk_aligned+0x1e>
 8004f26:	bf00      	nop
 8004f28:	200403d0 	.word	0x200403d0

08004f2c <_malloc_r>:
 8004f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f30:	1ccd      	adds	r5, r1, #3
 8004f32:	f025 0503 	bic.w	r5, r5, #3
 8004f36:	3508      	adds	r5, #8
 8004f38:	2d0c      	cmp	r5, #12
 8004f3a:	bf38      	it	cc
 8004f3c:	250c      	movcc	r5, #12
 8004f3e:	2d00      	cmp	r5, #0
 8004f40:	4606      	mov	r6, r0
 8004f42:	db01      	blt.n	8004f48 <_malloc_r+0x1c>
 8004f44:	42a9      	cmp	r1, r5
 8004f46:	d904      	bls.n	8004f52 <_malloc_r+0x26>
 8004f48:	230c      	movs	r3, #12
 8004f4a:	6033      	str	r3, [r6, #0]
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005028 <_malloc_r+0xfc>
 8004f56:	f000 f869 	bl	800502c <__malloc_lock>
 8004f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f5e:	461c      	mov	r4, r3
 8004f60:	bb44      	cbnz	r4, 8004fb4 <_malloc_r+0x88>
 8004f62:	4629      	mov	r1, r5
 8004f64:	4630      	mov	r0, r6
 8004f66:	f7ff ffbf 	bl	8004ee8 <sbrk_aligned>
 8004f6a:	1c43      	adds	r3, r0, #1
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	d158      	bne.n	8005022 <_malloc_r+0xf6>
 8004f70:	f8d8 4000 	ldr.w	r4, [r8]
 8004f74:	4627      	mov	r7, r4
 8004f76:	2f00      	cmp	r7, #0
 8004f78:	d143      	bne.n	8005002 <_malloc_r+0xd6>
 8004f7a:	2c00      	cmp	r4, #0
 8004f7c:	d04b      	beq.n	8005016 <_malloc_r+0xea>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	4639      	mov	r1, r7
 8004f82:	4630      	mov	r0, r6
 8004f84:	eb04 0903 	add.w	r9, r4, r3
 8004f88:	f000 faa2 	bl	80054d0 <_sbrk_r>
 8004f8c:	4581      	cmp	r9, r0
 8004f8e:	d142      	bne.n	8005016 <_malloc_r+0xea>
 8004f90:	6821      	ldr	r1, [r4, #0]
 8004f92:	1a6d      	subs	r5, r5, r1
 8004f94:	4629      	mov	r1, r5
 8004f96:	4630      	mov	r0, r6
 8004f98:	f7ff ffa6 	bl	8004ee8 <sbrk_aligned>
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	d03a      	beq.n	8005016 <_malloc_r+0xea>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	442b      	add	r3, r5
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	bb62      	cbnz	r2, 8005008 <_malloc_r+0xdc>
 8004fae:	f8c8 7000 	str.w	r7, [r8]
 8004fb2:	e00f      	b.n	8004fd4 <_malloc_r+0xa8>
 8004fb4:	6822      	ldr	r2, [r4, #0]
 8004fb6:	1b52      	subs	r2, r2, r5
 8004fb8:	d420      	bmi.n	8004ffc <_malloc_r+0xd0>
 8004fba:	2a0b      	cmp	r2, #11
 8004fbc:	d917      	bls.n	8004fee <_malloc_r+0xc2>
 8004fbe:	1961      	adds	r1, r4, r5
 8004fc0:	42a3      	cmp	r3, r4
 8004fc2:	6025      	str	r5, [r4, #0]
 8004fc4:	bf18      	it	ne
 8004fc6:	6059      	strne	r1, [r3, #4]
 8004fc8:	6863      	ldr	r3, [r4, #4]
 8004fca:	bf08      	it	eq
 8004fcc:	f8c8 1000 	streq.w	r1, [r8]
 8004fd0:	5162      	str	r2, [r4, r5]
 8004fd2:	604b      	str	r3, [r1, #4]
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	f000 f82f 	bl	8005038 <__malloc_unlock>
 8004fda:	f104 000b 	add.w	r0, r4, #11
 8004fde:	1d23      	adds	r3, r4, #4
 8004fe0:	f020 0007 	bic.w	r0, r0, #7
 8004fe4:	1ac2      	subs	r2, r0, r3
 8004fe6:	bf1c      	itt	ne
 8004fe8:	1a1b      	subne	r3, r3, r0
 8004fea:	50a3      	strne	r3, [r4, r2]
 8004fec:	e7af      	b.n	8004f4e <_malloc_r+0x22>
 8004fee:	6862      	ldr	r2, [r4, #4]
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	bf0c      	ite	eq
 8004ff4:	f8c8 2000 	streq.w	r2, [r8]
 8004ff8:	605a      	strne	r2, [r3, #4]
 8004ffa:	e7eb      	b.n	8004fd4 <_malloc_r+0xa8>
 8004ffc:	4623      	mov	r3, r4
 8004ffe:	6864      	ldr	r4, [r4, #4]
 8005000:	e7ae      	b.n	8004f60 <_malloc_r+0x34>
 8005002:	463c      	mov	r4, r7
 8005004:	687f      	ldr	r7, [r7, #4]
 8005006:	e7b6      	b.n	8004f76 <_malloc_r+0x4a>
 8005008:	461a      	mov	r2, r3
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	42a3      	cmp	r3, r4
 800500e:	d1fb      	bne.n	8005008 <_malloc_r+0xdc>
 8005010:	2300      	movs	r3, #0
 8005012:	6053      	str	r3, [r2, #4]
 8005014:	e7de      	b.n	8004fd4 <_malloc_r+0xa8>
 8005016:	230c      	movs	r3, #12
 8005018:	6033      	str	r3, [r6, #0]
 800501a:	4630      	mov	r0, r6
 800501c:	f000 f80c 	bl	8005038 <__malloc_unlock>
 8005020:	e794      	b.n	8004f4c <_malloc_r+0x20>
 8005022:	6005      	str	r5, [r0, #0]
 8005024:	e7d6      	b.n	8004fd4 <_malloc_r+0xa8>
 8005026:	bf00      	nop
 8005028:	200403d4 	.word	0x200403d4

0800502c <__malloc_lock>:
 800502c:	4801      	ldr	r0, [pc, #4]	@ (8005034 <__malloc_lock+0x8>)
 800502e:	f000 ba9c 	b.w	800556a <__retarget_lock_acquire_recursive>
 8005032:	bf00      	nop
 8005034:	20040518 	.word	0x20040518

08005038 <__malloc_unlock>:
 8005038:	4801      	ldr	r0, [pc, #4]	@ (8005040 <__malloc_unlock+0x8>)
 800503a:	f000 ba97 	b.w	800556c <__retarget_lock_release_recursive>
 800503e:	bf00      	nop
 8005040:	20040518 	.word	0x20040518

08005044 <std>:
 8005044:	2300      	movs	r3, #0
 8005046:	b510      	push	{r4, lr}
 8005048:	4604      	mov	r4, r0
 800504a:	e9c0 3300 	strd	r3, r3, [r0]
 800504e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005052:	6083      	str	r3, [r0, #8]
 8005054:	8181      	strh	r1, [r0, #12]
 8005056:	6643      	str	r3, [r0, #100]	@ 0x64
 8005058:	81c2      	strh	r2, [r0, #14]
 800505a:	6183      	str	r3, [r0, #24]
 800505c:	4619      	mov	r1, r3
 800505e:	2208      	movs	r2, #8
 8005060:	305c      	adds	r0, #92	@ 0x5c
 8005062:	f000 f9f9 	bl	8005458 <memset>
 8005066:	4b0d      	ldr	r3, [pc, #52]	@ (800509c <std+0x58>)
 8005068:	6263      	str	r3, [r4, #36]	@ 0x24
 800506a:	4b0d      	ldr	r3, [pc, #52]	@ (80050a0 <std+0x5c>)
 800506c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800506e:	4b0d      	ldr	r3, [pc, #52]	@ (80050a4 <std+0x60>)
 8005070:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005072:	4b0d      	ldr	r3, [pc, #52]	@ (80050a8 <std+0x64>)
 8005074:	6323      	str	r3, [r4, #48]	@ 0x30
 8005076:	4b0d      	ldr	r3, [pc, #52]	@ (80050ac <std+0x68>)
 8005078:	6224      	str	r4, [r4, #32]
 800507a:	429c      	cmp	r4, r3
 800507c:	d006      	beq.n	800508c <std+0x48>
 800507e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005082:	4294      	cmp	r4, r2
 8005084:	d002      	beq.n	800508c <std+0x48>
 8005086:	33d0      	adds	r3, #208	@ 0xd0
 8005088:	429c      	cmp	r4, r3
 800508a:	d105      	bne.n	8005098 <std+0x54>
 800508c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005094:	f000 ba68 	b.w	8005568 <__retarget_lock_init_recursive>
 8005098:	bd10      	pop	{r4, pc}
 800509a:	bf00      	nop
 800509c:	080052a9 	.word	0x080052a9
 80050a0:	080052cb 	.word	0x080052cb
 80050a4:	08005303 	.word	0x08005303
 80050a8:	08005327 	.word	0x08005327
 80050ac:	200403d8 	.word	0x200403d8

080050b0 <stdio_exit_handler>:
 80050b0:	4a02      	ldr	r2, [pc, #8]	@ (80050bc <stdio_exit_handler+0xc>)
 80050b2:	4903      	ldr	r1, [pc, #12]	@ (80050c0 <stdio_exit_handler+0x10>)
 80050b4:	4803      	ldr	r0, [pc, #12]	@ (80050c4 <stdio_exit_handler+0x14>)
 80050b6:	f000 b869 	b.w	800518c <_fwalk_sglue>
 80050ba:	bf00      	nop
 80050bc:	2004000c 	.word	0x2004000c
 80050c0:	08005ca9 	.word	0x08005ca9
 80050c4:	2004001c 	.word	0x2004001c

080050c8 <cleanup_stdio>:
 80050c8:	6841      	ldr	r1, [r0, #4]
 80050ca:	4b0c      	ldr	r3, [pc, #48]	@ (80050fc <cleanup_stdio+0x34>)
 80050cc:	4299      	cmp	r1, r3
 80050ce:	b510      	push	{r4, lr}
 80050d0:	4604      	mov	r4, r0
 80050d2:	d001      	beq.n	80050d8 <cleanup_stdio+0x10>
 80050d4:	f000 fde8 	bl	8005ca8 <_fflush_r>
 80050d8:	68a1      	ldr	r1, [r4, #8]
 80050da:	4b09      	ldr	r3, [pc, #36]	@ (8005100 <cleanup_stdio+0x38>)
 80050dc:	4299      	cmp	r1, r3
 80050de:	d002      	beq.n	80050e6 <cleanup_stdio+0x1e>
 80050e0:	4620      	mov	r0, r4
 80050e2:	f000 fde1 	bl	8005ca8 <_fflush_r>
 80050e6:	68e1      	ldr	r1, [r4, #12]
 80050e8:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <cleanup_stdio+0x3c>)
 80050ea:	4299      	cmp	r1, r3
 80050ec:	d004      	beq.n	80050f8 <cleanup_stdio+0x30>
 80050ee:	4620      	mov	r0, r4
 80050f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f4:	f000 bdd8 	b.w	8005ca8 <_fflush_r>
 80050f8:	bd10      	pop	{r4, pc}
 80050fa:	bf00      	nop
 80050fc:	200403d8 	.word	0x200403d8
 8005100:	20040440 	.word	0x20040440
 8005104:	200404a8 	.word	0x200404a8

08005108 <global_stdio_init.part.0>:
 8005108:	b510      	push	{r4, lr}
 800510a:	4b0b      	ldr	r3, [pc, #44]	@ (8005138 <global_stdio_init.part.0+0x30>)
 800510c:	4c0b      	ldr	r4, [pc, #44]	@ (800513c <global_stdio_init.part.0+0x34>)
 800510e:	4a0c      	ldr	r2, [pc, #48]	@ (8005140 <global_stdio_init.part.0+0x38>)
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	4620      	mov	r0, r4
 8005114:	2200      	movs	r2, #0
 8005116:	2104      	movs	r1, #4
 8005118:	f7ff ff94 	bl	8005044 <std>
 800511c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005120:	2201      	movs	r2, #1
 8005122:	2109      	movs	r1, #9
 8005124:	f7ff ff8e 	bl	8005044 <std>
 8005128:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800512c:	2202      	movs	r2, #2
 800512e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005132:	2112      	movs	r1, #18
 8005134:	f7ff bf86 	b.w	8005044 <std>
 8005138:	20040510 	.word	0x20040510
 800513c:	200403d8 	.word	0x200403d8
 8005140:	080050b1 	.word	0x080050b1

08005144 <__sfp_lock_acquire>:
 8005144:	4801      	ldr	r0, [pc, #4]	@ (800514c <__sfp_lock_acquire+0x8>)
 8005146:	f000 ba10 	b.w	800556a <__retarget_lock_acquire_recursive>
 800514a:	bf00      	nop
 800514c:	20040519 	.word	0x20040519

08005150 <__sfp_lock_release>:
 8005150:	4801      	ldr	r0, [pc, #4]	@ (8005158 <__sfp_lock_release+0x8>)
 8005152:	f000 ba0b 	b.w	800556c <__retarget_lock_release_recursive>
 8005156:	bf00      	nop
 8005158:	20040519 	.word	0x20040519

0800515c <__sinit>:
 800515c:	b510      	push	{r4, lr}
 800515e:	4604      	mov	r4, r0
 8005160:	f7ff fff0 	bl	8005144 <__sfp_lock_acquire>
 8005164:	6a23      	ldr	r3, [r4, #32]
 8005166:	b11b      	cbz	r3, 8005170 <__sinit+0x14>
 8005168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800516c:	f7ff bff0 	b.w	8005150 <__sfp_lock_release>
 8005170:	4b04      	ldr	r3, [pc, #16]	@ (8005184 <__sinit+0x28>)
 8005172:	6223      	str	r3, [r4, #32]
 8005174:	4b04      	ldr	r3, [pc, #16]	@ (8005188 <__sinit+0x2c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1f5      	bne.n	8005168 <__sinit+0xc>
 800517c:	f7ff ffc4 	bl	8005108 <global_stdio_init.part.0>
 8005180:	e7f2      	b.n	8005168 <__sinit+0xc>
 8005182:	bf00      	nop
 8005184:	080050c9 	.word	0x080050c9
 8005188:	20040510 	.word	0x20040510

0800518c <_fwalk_sglue>:
 800518c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005190:	4607      	mov	r7, r0
 8005192:	4688      	mov	r8, r1
 8005194:	4614      	mov	r4, r2
 8005196:	2600      	movs	r6, #0
 8005198:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800519c:	f1b9 0901 	subs.w	r9, r9, #1
 80051a0:	d505      	bpl.n	80051ae <_fwalk_sglue+0x22>
 80051a2:	6824      	ldr	r4, [r4, #0]
 80051a4:	2c00      	cmp	r4, #0
 80051a6:	d1f7      	bne.n	8005198 <_fwalk_sglue+0xc>
 80051a8:	4630      	mov	r0, r6
 80051aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ae:	89ab      	ldrh	r3, [r5, #12]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d907      	bls.n	80051c4 <_fwalk_sglue+0x38>
 80051b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051b8:	3301      	adds	r3, #1
 80051ba:	d003      	beq.n	80051c4 <_fwalk_sglue+0x38>
 80051bc:	4629      	mov	r1, r5
 80051be:	4638      	mov	r0, r7
 80051c0:	47c0      	blx	r8
 80051c2:	4306      	orrs	r6, r0
 80051c4:	3568      	adds	r5, #104	@ 0x68
 80051c6:	e7e9      	b.n	800519c <_fwalk_sglue+0x10>

080051c8 <iprintf>:
 80051c8:	b40f      	push	{r0, r1, r2, r3}
 80051ca:	b507      	push	{r0, r1, r2, lr}
 80051cc:	4906      	ldr	r1, [pc, #24]	@ (80051e8 <iprintf+0x20>)
 80051ce:	ab04      	add	r3, sp, #16
 80051d0:	6808      	ldr	r0, [r1, #0]
 80051d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80051d6:	6881      	ldr	r1, [r0, #8]
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	f000 fa3d 	bl	8005658 <_vfiprintf_r>
 80051de:	b003      	add	sp, #12
 80051e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051e4:	b004      	add	sp, #16
 80051e6:	4770      	bx	lr
 80051e8:	20040018 	.word	0x20040018

080051ec <_puts_r>:
 80051ec:	6a03      	ldr	r3, [r0, #32]
 80051ee:	b570      	push	{r4, r5, r6, lr}
 80051f0:	6884      	ldr	r4, [r0, #8]
 80051f2:	4605      	mov	r5, r0
 80051f4:	460e      	mov	r6, r1
 80051f6:	b90b      	cbnz	r3, 80051fc <_puts_r+0x10>
 80051f8:	f7ff ffb0 	bl	800515c <__sinit>
 80051fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051fe:	07db      	lsls	r3, r3, #31
 8005200:	d405      	bmi.n	800520e <_puts_r+0x22>
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	0598      	lsls	r0, r3, #22
 8005206:	d402      	bmi.n	800520e <_puts_r+0x22>
 8005208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800520a:	f000 f9ae 	bl	800556a <__retarget_lock_acquire_recursive>
 800520e:	89a3      	ldrh	r3, [r4, #12]
 8005210:	0719      	lsls	r1, r3, #28
 8005212:	d502      	bpl.n	800521a <_puts_r+0x2e>
 8005214:	6923      	ldr	r3, [r4, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d135      	bne.n	8005286 <_puts_r+0x9a>
 800521a:	4621      	mov	r1, r4
 800521c:	4628      	mov	r0, r5
 800521e:	f000 f8c5 	bl	80053ac <__swsetup_r>
 8005222:	b380      	cbz	r0, 8005286 <_puts_r+0x9a>
 8005224:	f04f 35ff 	mov.w	r5, #4294967295
 8005228:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800522a:	07da      	lsls	r2, r3, #31
 800522c:	d405      	bmi.n	800523a <_puts_r+0x4e>
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	059b      	lsls	r3, r3, #22
 8005232:	d402      	bmi.n	800523a <_puts_r+0x4e>
 8005234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005236:	f000 f999 	bl	800556c <__retarget_lock_release_recursive>
 800523a:	4628      	mov	r0, r5
 800523c:	bd70      	pop	{r4, r5, r6, pc}
 800523e:	2b00      	cmp	r3, #0
 8005240:	da04      	bge.n	800524c <_puts_r+0x60>
 8005242:	69a2      	ldr	r2, [r4, #24]
 8005244:	429a      	cmp	r2, r3
 8005246:	dc17      	bgt.n	8005278 <_puts_r+0x8c>
 8005248:	290a      	cmp	r1, #10
 800524a:	d015      	beq.n	8005278 <_puts_r+0x8c>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	6022      	str	r2, [r4, #0]
 8005252:	7019      	strb	r1, [r3, #0]
 8005254:	68a3      	ldr	r3, [r4, #8]
 8005256:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800525a:	3b01      	subs	r3, #1
 800525c:	60a3      	str	r3, [r4, #8]
 800525e:	2900      	cmp	r1, #0
 8005260:	d1ed      	bne.n	800523e <_puts_r+0x52>
 8005262:	2b00      	cmp	r3, #0
 8005264:	da11      	bge.n	800528a <_puts_r+0x9e>
 8005266:	4622      	mov	r2, r4
 8005268:	210a      	movs	r1, #10
 800526a:	4628      	mov	r0, r5
 800526c:	f000 f85f 	bl	800532e <__swbuf_r>
 8005270:	3001      	adds	r0, #1
 8005272:	d0d7      	beq.n	8005224 <_puts_r+0x38>
 8005274:	250a      	movs	r5, #10
 8005276:	e7d7      	b.n	8005228 <_puts_r+0x3c>
 8005278:	4622      	mov	r2, r4
 800527a:	4628      	mov	r0, r5
 800527c:	f000 f857 	bl	800532e <__swbuf_r>
 8005280:	3001      	adds	r0, #1
 8005282:	d1e7      	bne.n	8005254 <_puts_r+0x68>
 8005284:	e7ce      	b.n	8005224 <_puts_r+0x38>
 8005286:	3e01      	subs	r6, #1
 8005288:	e7e4      	b.n	8005254 <_puts_r+0x68>
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	6022      	str	r2, [r4, #0]
 8005290:	220a      	movs	r2, #10
 8005292:	701a      	strb	r2, [r3, #0]
 8005294:	e7ee      	b.n	8005274 <_puts_r+0x88>
	...

08005298 <puts>:
 8005298:	4b02      	ldr	r3, [pc, #8]	@ (80052a4 <puts+0xc>)
 800529a:	4601      	mov	r1, r0
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	f7ff bfa5 	b.w	80051ec <_puts_r>
 80052a2:	bf00      	nop
 80052a4:	20040018 	.word	0x20040018

080052a8 <__sread>:
 80052a8:	b510      	push	{r4, lr}
 80052aa:	460c      	mov	r4, r1
 80052ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b0:	f000 f8fc 	bl	80054ac <_read_r>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	bfab      	itete	ge
 80052b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80052ba:	89a3      	ldrhlt	r3, [r4, #12]
 80052bc:	181b      	addge	r3, r3, r0
 80052be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80052c2:	bfac      	ite	ge
 80052c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80052c6:	81a3      	strhlt	r3, [r4, #12]
 80052c8:	bd10      	pop	{r4, pc}

080052ca <__swrite>:
 80052ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ce:	461f      	mov	r7, r3
 80052d0:	898b      	ldrh	r3, [r1, #12]
 80052d2:	05db      	lsls	r3, r3, #23
 80052d4:	4605      	mov	r5, r0
 80052d6:	460c      	mov	r4, r1
 80052d8:	4616      	mov	r6, r2
 80052da:	d505      	bpl.n	80052e8 <__swrite+0x1e>
 80052dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e0:	2302      	movs	r3, #2
 80052e2:	2200      	movs	r2, #0
 80052e4:	f000 f8d0 	bl	8005488 <_lseek_r>
 80052e8:	89a3      	ldrh	r3, [r4, #12]
 80052ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052f2:	81a3      	strh	r3, [r4, #12]
 80052f4:	4632      	mov	r2, r6
 80052f6:	463b      	mov	r3, r7
 80052f8:	4628      	mov	r0, r5
 80052fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052fe:	f000 b8f7 	b.w	80054f0 <_write_r>

08005302 <__sseek>:
 8005302:	b510      	push	{r4, lr}
 8005304:	460c      	mov	r4, r1
 8005306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530a:	f000 f8bd 	bl	8005488 <_lseek_r>
 800530e:	1c43      	adds	r3, r0, #1
 8005310:	89a3      	ldrh	r3, [r4, #12]
 8005312:	bf15      	itete	ne
 8005314:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005316:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800531a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800531e:	81a3      	strheq	r3, [r4, #12]
 8005320:	bf18      	it	ne
 8005322:	81a3      	strhne	r3, [r4, #12]
 8005324:	bd10      	pop	{r4, pc}

08005326 <__sclose>:
 8005326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532a:	f000 b89d 	b.w	8005468 <_close_r>

0800532e <__swbuf_r>:
 800532e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005330:	460e      	mov	r6, r1
 8005332:	4614      	mov	r4, r2
 8005334:	4605      	mov	r5, r0
 8005336:	b118      	cbz	r0, 8005340 <__swbuf_r+0x12>
 8005338:	6a03      	ldr	r3, [r0, #32]
 800533a:	b90b      	cbnz	r3, 8005340 <__swbuf_r+0x12>
 800533c:	f7ff ff0e 	bl	800515c <__sinit>
 8005340:	69a3      	ldr	r3, [r4, #24]
 8005342:	60a3      	str	r3, [r4, #8]
 8005344:	89a3      	ldrh	r3, [r4, #12]
 8005346:	071a      	lsls	r2, r3, #28
 8005348:	d501      	bpl.n	800534e <__swbuf_r+0x20>
 800534a:	6923      	ldr	r3, [r4, #16]
 800534c:	b943      	cbnz	r3, 8005360 <__swbuf_r+0x32>
 800534e:	4621      	mov	r1, r4
 8005350:	4628      	mov	r0, r5
 8005352:	f000 f82b 	bl	80053ac <__swsetup_r>
 8005356:	b118      	cbz	r0, 8005360 <__swbuf_r+0x32>
 8005358:	f04f 37ff 	mov.w	r7, #4294967295
 800535c:	4638      	mov	r0, r7
 800535e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	6922      	ldr	r2, [r4, #16]
 8005364:	1a98      	subs	r0, r3, r2
 8005366:	6963      	ldr	r3, [r4, #20]
 8005368:	b2f6      	uxtb	r6, r6
 800536a:	4283      	cmp	r3, r0
 800536c:	4637      	mov	r7, r6
 800536e:	dc05      	bgt.n	800537c <__swbuf_r+0x4e>
 8005370:	4621      	mov	r1, r4
 8005372:	4628      	mov	r0, r5
 8005374:	f000 fc98 	bl	8005ca8 <_fflush_r>
 8005378:	2800      	cmp	r0, #0
 800537a:	d1ed      	bne.n	8005358 <__swbuf_r+0x2a>
 800537c:	68a3      	ldr	r3, [r4, #8]
 800537e:	3b01      	subs	r3, #1
 8005380:	60a3      	str	r3, [r4, #8]
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	6022      	str	r2, [r4, #0]
 8005388:	701e      	strb	r6, [r3, #0]
 800538a:	6962      	ldr	r2, [r4, #20]
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	429a      	cmp	r2, r3
 8005390:	d004      	beq.n	800539c <__swbuf_r+0x6e>
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	07db      	lsls	r3, r3, #31
 8005396:	d5e1      	bpl.n	800535c <__swbuf_r+0x2e>
 8005398:	2e0a      	cmp	r6, #10
 800539a:	d1df      	bne.n	800535c <__swbuf_r+0x2e>
 800539c:	4621      	mov	r1, r4
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 fc82 	bl	8005ca8 <_fflush_r>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d0d9      	beq.n	800535c <__swbuf_r+0x2e>
 80053a8:	e7d6      	b.n	8005358 <__swbuf_r+0x2a>
	...

080053ac <__swsetup_r>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4b29      	ldr	r3, [pc, #164]	@ (8005454 <__swsetup_r+0xa8>)
 80053b0:	4605      	mov	r5, r0
 80053b2:	6818      	ldr	r0, [r3, #0]
 80053b4:	460c      	mov	r4, r1
 80053b6:	b118      	cbz	r0, 80053c0 <__swsetup_r+0x14>
 80053b8:	6a03      	ldr	r3, [r0, #32]
 80053ba:	b90b      	cbnz	r3, 80053c0 <__swsetup_r+0x14>
 80053bc:	f7ff fece 	bl	800515c <__sinit>
 80053c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053c4:	0719      	lsls	r1, r3, #28
 80053c6:	d422      	bmi.n	800540e <__swsetup_r+0x62>
 80053c8:	06da      	lsls	r2, r3, #27
 80053ca:	d407      	bmi.n	80053dc <__swsetup_r+0x30>
 80053cc:	2209      	movs	r2, #9
 80053ce:	602a      	str	r2, [r5, #0]
 80053d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053d4:	81a3      	strh	r3, [r4, #12]
 80053d6:	f04f 30ff 	mov.w	r0, #4294967295
 80053da:	e033      	b.n	8005444 <__swsetup_r+0x98>
 80053dc:	0758      	lsls	r0, r3, #29
 80053de:	d512      	bpl.n	8005406 <__swsetup_r+0x5a>
 80053e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053e2:	b141      	cbz	r1, 80053f6 <__swsetup_r+0x4a>
 80053e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053e8:	4299      	cmp	r1, r3
 80053ea:	d002      	beq.n	80053f2 <__swsetup_r+0x46>
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 f8bf 	bl	8005570 <_free_r>
 80053f2:	2300      	movs	r3, #0
 80053f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80053fc:	81a3      	strh	r3, [r4, #12]
 80053fe:	2300      	movs	r3, #0
 8005400:	6063      	str	r3, [r4, #4]
 8005402:	6923      	ldr	r3, [r4, #16]
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	89a3      	ldrh	r3, [r4, #12]
 8005408:	f043 0308 	orr.w	r3, r3, #8
 800540c:	81a3      	strh	r3, [r4, #12]
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	b94b      	cbnz	r3, 8005426 <__swsetup_r+0x7a>
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800541c:	d003      	beq.n	8005426 <__swsetup_r+0x7a>
 800541e:	4621      	mov	r1, r4
 8005420:	4628      	mov	r0, r5
 8005422:	f000 fc8f 	bl	8005d44 <__smakebuf_r>
 8005426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800542a:	f013 0201 	ands.w	r2, r3, #1
 800542e:	d00a      	beq.n	8005446 <__swsetup_r+0x9a>
 8005430:	2200      	movs	r2, #0
 8005432:	60a2      	str	r2, [r4, #8]
 8005434:	6962      	ldr	r2, [r4, #20]
 8005436:	4252      	negs	r2, r2
 8005438:	61a2      	str	r2, [r4, #24]
 800543a:	6922      	ldr	r2, [r4, #16]
 800543c:	b942      	cbnz	r2, 8005450 <__swsetup_r+0xa4>
 800543e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005442:	d1c5      	bne.n	80053d0 <__swsetup_r+0x24>
 8005444:	bd38      	pop	{r3, r4, r5, pc}
 8005446:	0799      	lsls	r1, r3, #30
 8005448:	bf58      	it	pl
 800544a:	6962      	ldrpl	r2, [r4, #20]
 800544c:	60a2      	str	r2, [r4, #8]
 800544e:	e7f4      	b.n	800543a <__swsetup_r+0x8e>
 8005450:	2000      	movs	r0, #0
 8005452:	e7f7      	b.n	8005444 <__swsetup_r+0x98>
 8005454:	20040018 	.word	0x20040018

08005458 <memset>:
 8005458:	4402      	add	r2, r0
 800545a:	4603      	mov	r3, r0
 800545c:	4293      	cmp	r3, r2
 800545e:	d100      	bne.n	8005462 <memset+0xa>
 8005460:	4770      	bx	lr
 8005462:	f803 1b01 	strb.w	r1, [r3], #1
 8005466:	e7f9      	b.n	800545c <memset+0x4>

08005468 <_close_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	4d06      	ldr	r5, [pc, #24]	@ (8005484 <_close_r+0x1c>)
 800546c:	2300      	movs	r3, #0
 800546e:	4604      	mov	r4, r0
 8005470:	4608      	mov	r0, r1
 8005472:	602b      	str	r3, [r5, #0]
 8005474:	f7fc f93a 	bl	80016ec <_close>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d102      	bne.n	8005482 <_close_r+0x1a>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	b103      	cbz	r3, 8005482 <_close_r+0x1a>
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	20040514 	.word	0x20040514

08005488 <_lseek_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4d07      	ldr	r5, [pc, #28]	@ (80054a8 <_lseek_r+0x20>)
 800548c:	4604      	mov	r4, r0
 800548e:	4608      	mov	r0, r1
 8005490:	4611      	mov	r1, r2
 8005492:	2200      	movs	r2, #0
 8005494:	602a      	str	r2, [r5, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	f7fc f94f 	bl	800173a <_lseek>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	d102      	bne.n	80054a6 <_lseek_r+0x1e>
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	b103      	cbz	r3, 80054a6 <_lseek_r+0x1e>
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	20040514 	.word	0x20040514

080054ac <_read_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4d07      	ldr	r5, [pc, #28]	@ (80054cc <_read_r+0x20>)
 80054b0:	4604      	mov	r4, r0
 80054b2:	4608      	mov	r0, r1
 80054b4:	4611      	mov	r1, r2
 80054b6:	2200      	movs	r2, #0
 80054b8:	602a      	str	r2, [r5, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f7fc f8dd 	bl	800167a <_read>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d102      	bne.n	80054ca <_read_r+0x1e>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	b103      	cbz	r3, 80054ca <_read_r+0x1e>
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	20040514 	.word	0x20040514

080054d0 <_sbrk_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4d06      	ldr	r5, [pc, #24]	@ (80054ec <_sbrk_r+0x1c>)
 80054d4:	2300      	movs	r3, #0
 80054d6:	4604      	mov	r4, r0
 80054d8:	4608      	mov	r0, r1
 80054da:	602b      	str	r3, [r5, #0]
 80054dc:	f7fc f93a 	bl	8001754 <_sbrk>
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	d102      	bne.n	80054ea <_sbrk_r+0x1a>
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	b103      	cbz	r3, 80054ea <_sbrk_r+0x1a>
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	bd38      	pop	{r3, r4, r5, pc}
 80054ec:	20040514 	.word	0x20040514

080054f0 <_write_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	4d07      	ldr	r5, [pc, #28]	@ (8005510 <_write_r+0x20>)
 80054f4:	4604      	mov	r4, r0
 80054f6:	4608      	mov	r0, r1
 80054f8:	4611      	mov	r1, r2
 80054fa:	2200      	movs	r2, #0
 80054fc:	602a      	str	r2, [r5, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	f7fc f8d8 	bl	80016b4 <_write>
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	d102      	bne.n	800550e <_write_r+0x1e>
 8005508:	682b      	ldr	r3, [r5, #0]
 800550a:	b103      	cbz	r3, 800550e <_write_r+0x1e>
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	bd38      	pop	{r3, r4, r5, pc}
 8005510:	20040514 	.word	0x20040514

08005514 <__errno>:
 8005514:	4b01      	ldr	r3, [pc, #4]	@ (800551c <__errno+0x8>)
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20040018 	.word	0x20040018

08005520 <__libc_init_array>:
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	4d0d      	ldr	r5, [pc, #52]	@ (8005558 <__libc_init_array+0x38>)
 8005524:	4c0d      	ldr	r4, [pc, #52]	@ (800555c <__libc_init_array+0x3c>)
 8005526:	1b64      	subs	r4, r4, r5
 8005528:	10a4      	asrs	r4, r4, #2
 800552a:	2600      	movs	r6, #0
 800552c:	42a6      	cmp	r6, r4
 800552e:	d109      	bne.n	8005544 <__libc_init_array+0x24>
 8005530:	4d0b      	ldr	r5, [pc, #44]	@ (8005560 <__libc_init_array+0x40>)
 8005532:	4c0c      	ldr	r4, [pc, #48]	@ (8005564 <__libc_init_array+0x44>)
 8005534:	f000 fc64 	bl	8005e00 <_init>
 8005538:	1b64      	subs	r4, r4, r5
 800553a:	10a4      	asrs	r4, r4, #2
 800553c:	2600      	movs	r6, #0
 800553e:	42a6      	cmp	r6, r4
 8005540:	d105      	bne.n	800554e <__libc_init_array+0x2e>
 8005542:	bd70      	pop	{r4, r5, r6, pc}
 8005544:	f855 3b04 	ldr.w	r3, [r5], #4
 8005548:	4798      	blx	r3
 800554a:	3601      	adds	r6, #1
 800554c:	e7ee      	b.n	800552c <__libc_init_array+0xc>
 800554e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005552:	4798      	blx	r3
 8005554:	3601      	adds	r6, #1
 8005556:	e7f2      	b.n	800553e <__libc_init_array+0x1e>
 8005558:	08005fb8 	.word	0x08005fb8
 800555c:	08005fb8 	.word	0x08005fb8
 8005560:	08005fb8 	.word	0x08005fb8
 8005564:	08005fc0 	.word	0x08005fc0

08005568 <__retarget_lock_init_recursive>:
 8005568:	4770      	bx	lr

0800556a <__retarget_lock_acquire_recursive>:
 800556a:	4770      	bx	lr

0800556c <__retarget_lock_release_recursive>:
 800556c:	4770      	bx	lr
	...

08005570 <_free_r>:
 8005570:	b538      	push	{r3, r4, r5, lr}
 8005572:	4605      	mov	r5, r0
 8005574:	2900      	cmp	r1, #0
 8005576:	d041      	beq.n	80055fc <_free_r+0x8c>
 8005578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800557c:	1f0c      	subs	r4, r1, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	bfb8      	it	lt
 8005582:	18e4      	addlt	r4, r4, r3
 8005584:	f7ff fd52 	bl	800502c <__malloc_lock>
 8005588:	4a1d      	ldr	r2, [pc, #116]	@ (8005600 <_free_r+0x90>)
 800558a:	6813      	ldr	r3, [r2, #0]
 800558c:	b933      	cbnz	r3, 800559c <_free_r+0x2c>
 800558e:	6063      	str	r3, [r4, #4]
 8005590:	6014      	str	r4, [r2, #0]
 8005592:	4628      	mov	r0, r5
 8005594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005598:	f7ff bd4e 	b.w	8005038 <__malloc_unlock>
 800559c:	42a3      	cmp	r3, r4
 800559e:	d908      	bls.n	80055b2 <_free_r+0x42>
 80055a0:	6820      	ldr	r0, [r4, #0]
 80055a2:	1821      	adds	r1, r4, r0
 80055a4:	428b      	cmp	r3, r1
 80055a6:	bf01      	itttt	eq
 80055a8:	6819      	ldreq	r1, [r3, #0]
 80055aa:	685b      	ldreq	r3, [r3, #4]
 80055ac:	1809      	addeq	r1, r1, r0
 80055ae:	6021      	streq	r1, [r4, #0]
 80055b0:	e7ed      	b.n	800558e <_free_r+0x1e>
 80055b2:	461a      	mov	r2, r3
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	b10b      	cbz	r3, 80055bc <_free_r+0x4c>
 80055b8:	42a3      	cmp	r3, r4
 80055ba:	d9fa      	bls.n	80055b2 <_free_r+0x42>
 80055bc:	6811      	ldr	r1, [r2, #0]
 80055be:	1850      	adds	r0, r2, r1
 80055c0:	42a0      	cmp	r0, r4
 80055c2:	d10b      	bne.n	80055dc <_free_r+0x6c>
 80055c4:	6820      	ldr	r0, [r4, #0]
 80055c6:	4401      	add	r1, r0
 80055c8:	1850      	adds	r0, r2, r1
 80055ca:	4283      	cmp	r3, r0
 80055cc:	6011      	str	r1, [r2, #0]
 80055ce:	d1e0      	bne.n	8005592 <_free_r+0x22>
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	6053      	str	r3, [r2, #4]
 80055d6:	4408      	add	r0, r1
 80055d8:	6010      	str	r0, [r2, #0]
 80055da:	e7da      	b.n	8005592 <_free_r+0x22>
 80055dc:	d902      	bls.n	80055e4 <_free_r+0x74>
 80055de:	230c      	movs	r3, #12
 80055e0:	602b      	str	r3, [r5, #0]
 80055e2:	e7d6      	b.n	8005592 <_free_r+0x22>
 80055e4:	6820      	ldr	r0, [r4, #0]
 80055e6:	1821      	adds	r1, r4, r0
 80055e8:	428b      	cmp	r3, r1
 80055ea:	bf04      	itt	eq
 80055ec:	6819      	ldreq	r1, [r3, #0]
 80055ee:	685b      	ldreq	r3, [r3, #4]
 80055f0:	6063      	str	r3, [r4, #4]
 80055f2:	bf04      	itt	eq
 80055f4:	1809      	addeq	r1, r1, r0
 80055f6:	6021      	streq	r1, [r4, #0]
 80055f8:	6054      	str	r4, [r2, #4]
 80055fa:	e7ca      	b.n	8005592 <_free_r+0x22>
 80055fc:	bd38      	pop	{r3, r4, r5, pc}
 80055fe:	bf00      	nop
 8005600:	200403d4 	.word	0x200403d4

08005604 <__sfputc_r>:
 8005604:	6893      	ldr	r3, [r2, #8]
 8005606:	3b01      	subs	r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	b410      	push	{r4}
 800560c:	6093      	str	r3, [r2, #8]
 800560e:	da08      	bge.n	8005622 <__sfputc_r+0x1e>
 8005610:	6994      	ldr	r4, [r2, #24]
 8005612:	42a3      	cmp	r3, r4
 8005614:	db01      	blt.n	800561a <__sfputc_r+0x16>
 8005616:	290a      	cmp	r1, #10
 8005618:	d103      	bne.n	8005622 <__sfputc_r+0x1e>
 800561a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800561e:	f7ff be86 	b.w	800532e <__swbuf_r>
 8005622:	6813      	ldr	r3, [r2, #0]
 8005624:	1c58      	adds	r0, r3, #1
 8005626:	6010      	str	r0, [r2, #0]
 8005628:	7019      	strb	r1, [r3, #0]
 800562a:	4608      	mov	r0, r1
 800562c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005630:	4770      	bx	lr

08005632 <__sfputs_r>:
 8005632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005634:	4606      	mov	r6, r0
 8005636:	460f      	mov	r7, r1
 8005638:	4614      	mov	r4, r2
 800563a:	18d5      	adds	r5, r2, r3
 800563c:	42ac      	cmp	r4, r5
 800563e:	d101      	bne.n	8005644 <__sfputs_r+0x12>
 8005640:	2000      	movs	r0, #0
 8005642:	e007      	b.n	8005654 <__sfputs_r+0x22>
 8005644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005648:	463a      	mov	r2, r7
 800564a:	4630      	mov	r0, r6
 800564c:	f7ff ffda 	bl	8005604 <__sfputc_r>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d1f3      	bne.n	800563c <__sfputs_r+0xa>
 8005654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005658 <_vfiprintf_r>:
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	460d      	mov	r5, r1
 800565e:	b09d      	sub	sp, #116	@ 0x74
 8005660:	4614      	mov	r4, r2
 8005662:	4698      	mov	r8, r3
 8005664:	4606      	mov	r6, r0
 8005666:	b118      	cbz	r0, 8005670 <_vfiprintf_r+0x18>
 8005668:	6a03      	ldr	r3, [r0, #32]
 800566a:	b90b      	cbnz	r3, 8005670 <_vfiprintf_r+0x18>
 800566c:	f7ff fd76 	bl	800515c <__sinit>
 8005670:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005672:	07d9      	lsls	r1, r3, #31
 8005674:	d405      	bmi.n	8005682 <_vfiprintf_r+0x2a>
 8005676:	89ab      	ldrh	r3, [r5, #12]
 8005678:	059a      	lsls	r2, r3, #22
 800567a:	d402      	bmi.n	8005682 <_vfiprintf_r+0x2a>
 800567c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800567e:	f7ff ff74 	bl	800556a <__retarget_lock_acquire_recursive>
 8005682:	89ab      	ldrh	r3, [r5, #12]
 8005684:	071b      	lsls	r3, r3, #28
 8005686:	d501      	bpl.n	800568c <_vfiprintf_r+0x34>
 8005688:	692b      	ldr	r3, [r5, #16]
 800568a:	b99b      	cbnz	r3, 80056b4 <_vfiprintf_r+0x5c>
 800568c:	4629      	mov	r1, r5
 800568e:	4630      	mov	r0, r6
 8005690:	f7ff fe8c 	bl	80053ac <__swsetup_r>
 8005694:	b170      	cbz	r0, 80056b4 <_vfiprintf_r+0x5c>
 8005696:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005698:	07dc      	lsls	r4, r3, #31
 800569a:	d504      	bpl.n	80056a6 <_vfiprintf_r+0x4e>
 800569c:	f04f 30ff 	mov.w	r0, #4294967295
 80056a0:	b01d      	add	sp, #116	@ 0x74
 80056a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a6:	89ab      	ldrh	r3, [r5, #12]
 80056a8:	0598      	lsls	r0, r3, #22
 80056aa:	d4f7      	bmi.n	800569c <_vfiprintf_r+0x44>
 80056ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056ae:	f7ff ff5d 	bl	800556c <__retarget_lock_release_recursive>
 80056b2:	e7f3      	b.n	800569c <_vfiprintf_r+0x44>
 80056b4:	2300      	movs	r3, #0
 80056b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80056b8:	2320      	movs	r3, #32
 80056ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056be:	f8cd 800c 	str.w	r8, [sp, #12]
 80056c2:	2330      	movs	r3, #48	@ 0x30
 80056c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005874 <_vfiprintf_r+0x21c>
 80056c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056cc:	f04f 0901 	mov.w	r9, #1
 80056d0:	4623      	mov	r3, r4
 80056d2:	469a      	mov	sl, r3
 80056d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056d8:	b10a      	cbz	r2, 80056de <_vfiprintf_r+0x86>
 80056da:	2a25      	cmp	r2, #37	@ 0x25
 80056dc:	d1f9      	bne.n	80056d2 <_vfiprintf_r+0x7a>
 80056de:	ebba 0b04 	subs.w	fp, sl, r4
 80056e2:	d00b      	beq.n	80056fc <_vfiprintf_r+0xa4>
 80056e4:	465b      	mov	r3, fp
 80056e6:	4622      	mov	r2, r4
 80056e8:	4629      	mov	r1, r5
 80056ea:	4630      	mov	r0, r6
 80056ec:	f7ff ffa1 	bl	8005632 <__sfputs_r>
 80056f0:	3001      	adds	r0, #1
 80056f2:	f000 80a7 	beq.w	8005844 <_vfiprintf_r+0x1ec>
 80056f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056f8:	445a      	add	r2, fp
 80056fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80056fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 809f 	beq.w	8005844 <_vfiprintf_r+0x1ec>
 8005706:	2300      	movs	r3, #0
 8005708:	f04f 32ff 	mov.w	r2, #4294967295
 800570c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005710:	f10a 0a01 	add.w	sl, sl, #1
 8005714:	9304      	str	r3, [sp, #16]
 8005716:	9307      	str	r3, [sp, #28]
 8005718:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800571c:	931a      	str	r3, [sp, #104]	@ 0x68
 800571e:	4654      	mov	r4, sl
 8005720:	2205      	movs	r2, #5
 8005722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005726:	4853      	ldr	r0, [pc, #332]	@ (8005874 <_vfiprintf_r+0x21c>)
 8005728:	f7fa fd72 	bl	8000210 <memchr>
 800572c:	9a04      	ldr	r2, [sp, #16]
 800572e:	b9d8      	cbnz	r0, 8005768 <_vfiprintf_r+0x110>
 8005730:	06d1      	lsls	r1, r2, #27
 8005732:	bf44      	itt	mi
 8005734:	2320      	movmi	r3, #32
 8005736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800573a:	0713      	lsls	r3, r2, #28
 800573c:	bf44      	itt	mi
 800573e:	232b      	movmi	r3, #43	@ 0x2b
 8005740:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005744:	f89a 3000 	ldrb.w	r3, [sl]
 8005748:	2b2a      	cmp	r3, #42	@ 0x2a
 800574a:	d015      	beq.n	8005778 <_vfiprintf_r+0x120>
 800574c:	9a07      	ldr	r2, [sp, #28]
 800574e:	4654      	mov	r4, sl
 8005750:	2000      	movs	r0, #0
 8005752:	f04f 0c0a 	mov.w	ip, #10
 8005756:	4621      	mov	r1, r4
 8005758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800575c:	3b30      	subs	r3, #48	@ 0x30
 800575e:	2b09      	cmp	r3, #9
 8005760:	d94b      	bls.n	80057fa <_vfiprintf_r+0x1a2>
 8005762:	b1b0      	cbz	r0, 8005792 <_vfiprintf_r+0x13a>
 8005764:	9207      	str	r2, [sp, #28]
 8005766:	e014      	b.n	8005792 <_vfiprintf_r+0x13a>
 8005768:	eba0 0308 	sub.w	r3, r0, r8
 800576c:	fa09 f303 	lsl.w	r3, r9, r3
 8005770:	4313      	orrs	r3, r2
 8005772:	9304      	str	r3, [sp, #16]
 8005774:	46a2      	mov	sl, r4
 8005776:	e7d2      	b.n	800571e <_vfiprintf_r+0xc6>
 8005778:	9b03      	ldr	r3, [sp, #12]
 800577a:	1d19      	adds	r1, r3, #4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	9103      	str	r1, [sp, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	bfbb      	ittet	lt
 8005784:	425b      	neglt	r3, r3
 8005786:	f042 0202 	orrlt.w	r2, r2, #2
 800578a:	9307      	strge	r3, [sp, #28]
 800578c:	9307      	strlt	r3, [sp, #28]
 800578e:	bfb8      	it	lt
 8005790:	9204      	strlt	r2, [sp, #16]
 8005792:	7823      	ldrb	r3, [r4, #0]
 8005794:	2b2e      	cmp	r3, #46	@ 0x2e
 8005796:	d10a      	bne.n	80057ae <_vfiprintf_r+0x156>
 8005798:	7863      	ldrb	r3, [r4, #1]
 800579a:	2b2a      	cmp	r3, #42	@ 0x2a
 800579c:	d132      	bne.n	8005804 <_vfiprintf_r+0x1ac>
 800579e:	9b03      	ldr	r3, [sp, #12]
 80057a0:	1d1a      	adds	r2, r3, #4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	9203      	str	r2, [sp, #12]
 80057a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057aa:	3402      	adds	r4, #2
 80057ac:	9305      	str	r3, [sp, #20]
 80057ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005884 <_vfiprintf_r+0x22c>
 80057b2:	7821      	ldrb	r1, [r4, #0]
 80057b4:	2203      	movs	r2, #3
 80057b6:	4650      	mov	r0, sl
 80057b8:	f7fa fd2a 	bl	8000210 <memchr>
 80057bc:	b138      	cbz	r0, 80057ce <_vfiprintf_r+0x176>
 80057be:	9b04      	ldr	r3, [sp, #16]
 80057c0:	eba0 000a 	sub.w	r0, r0, sl
 80057c4:	2240      	movs	r2, #64	@ 0x40
 80057c6:	4082      	lsls	r2, r0
 80057c8:	4313      	orrs	r3, r2
 80057ca:	3401      	adds	r4, #1
 80057cc:	9304      	str	r3, [sp, #16]
 80057ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057d2:	4829      	ldr	r0, [pc, #164]	@ (8005878 <_vfiprintf_r+0x220>)
 80057d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057d8:	2206      	movs	r2, #6
 80057da:	f7fa fd19 	bl	8000210 <memchr>
 80057de:	2800      	cmp	r0, #0
 80057e0:	d03f      	beq.n	8005862 <_vfiprintf_r+0x20a>
 80057e2:	4b26      	ldr	r3, [pc, #152]	@ (800587c <_vfiprintf_r+0x224>)
 80057e4:	bb1b      	cbnz	r3, 800582e <_vfiprintf_r+0x1d6>
 80057e6:	9b03      	ldr	r3, [sp, #12]
 80057e8:	3307      	adds	r3, #7
 80057ea:	f023 0307 	bic.w	r3, r3, #7
 80057ee:	3308      	adds	r3, #8
 80057f0:	9303      	str	r3, [sp, #12]
 80057f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057f4:	443b      	add	r3, r7
 80057f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80057f8:	e76a      	b.n	80056d0 <_vfiprintf_r+0x78>
 80057fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80057fe:	460c      	mov	r4, r1
 8005800:	2001      	movs	r0, #1
 8005802:	e7a8      	b.n	8005756 <_vfiprintf_r+0xfe>
 8005804:	2300      	movs	r3, #0
 8005806:	3401      	adds	r4, #1
 8005808:	9305      	str	r3, [sp, #20]
 800580a:	4619      	mov	r1, r3
 800580c:	f04f 0c0a 	mov.w	ip, #10
 8005810:	4620      	mov	r0, r4
 8005812:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005816:	3a30      	subs	r2, #48	@ 0x30
 8005818:	2a09      	cmp	r2, #9
 800581a:	d903      	bls.n	8005824 <_vfiprintf_r+0x1cc>
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0c6      	beq.n	80057ae <_vfiprintf_r+0x156>
 8005820:	9105      	str	r1, [sp, #20]
 8005822:	e7c4      	b.n	80057ae <_vfiprintf_r+0x156>
 8005824:	fb0c 2101 	mla	r1, ip, r1, r2
 8005828:	4604      	mov	r4, r0
 800582a:	2301      	movs	r3, #1
 800582c:	e7f0      	b.n	8005810 <_vfiprintf_r+0x1b8>
 800582e:	ab03      	add	r3, sp, #12
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	462a      	mov	r2, r5
 8005834:	4b12      	ldr	r3, [pc, #72]	@ (8005880 <_vfiprintf_r+0x228>)
 8005836:	a904      	add	r1, sp, #16
 8005838:	4630      	mov	r0, r6
 800583a:	f3af 8000 	nop.w
 800583e:	4607      	mov	r7, r0
 8005840:	1c78      	adds	r0, r7, #1
 8005842:	d1d6      	bne.n	80057f2 <_vfiprintf_r+0x19a>
 8005844:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005846:	07d9      	lsls	r1, r3, #31
 8005848:	d405      	bmi.n	8005856 <_vfiprintf_r+0x1fe>
 800584a:	89ab      	ldrh	r3, [r5, #12]
 800584c:	059a      	lsls	r2, r3, #22
 800584e:	d402      	bmi.n	8005856 <_vfiprintf_r+0x1fe>
 8005850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005852:	f7ff fe8b 	bl	800556c <__retarget_lock_release_recursive>
 8005856:	89ab      	ldrh	r3, [r5, #12]
 8005858:	065b      	lsls	r3, r3, #25
 800585a:	f53f af1f 	bmi.w	800569c <_vfiprintf_r+0x44>
 800585e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005860:	e71e      	b.n	80056a0 <_vfiprintf_r+0x48>
 8005862:	ab03      	add	r3, sp, #12
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	462a      	mov	r2, r5
 8005868:	4b05      	ldr	r3, [pc, #20]	@ (8005880 <_vfiprintf_r+0x228>)
 800586a:	a904      	add	r1, sp, #16
 800586c:	4630      	mov	r0, r6
 800586e:	f000 f879 	bl	8005964 <_printf_i>
 8005872:	e7e4      	b.n	800583e <_vfiprintf_r+0x1e6>
 8005874:	08005f7c 	.word	0x08005f7c
 8005878:	08005f86 	.word	0x08005f86
 800587c:	00000000 	.word	0x00000000
 8005880:	08005633 	.word	0x08005633
 8005884:	08005f82 	.word	0x08005f82

08005888 <_printf_common>:
 8005888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800588c:	4616      	mov	r6, r2
 800588e:	4698      	mov	r8, r3
 8005890:	688a      	ldr	r2, [r1, #8]
 8005892:	690b      	ldr	r3, [r1, #16]
 8005894:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005898:	4293      	cmp	r3, r2
 800589a:	bfb8      	it	lt
 800589c:	4613      	movlt	r3, r2
 800589e:	6033      	str	r3, [r6, #0]
 80058a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058a4:	4607      	mov	r7, r0
 80058a6:	460c      	mov	r4, r1
 80058a8:	b10a      	cbz	r2, 80058ae <_printf_common+0x26>
 80058aa:	3301      	adds	r3, #1
 80058ac:	6033      	str	r3, [r6, #0]
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	0699      	lsls	r1, r3, #26
 80058b2:	bf42      	ittt	mi
 80058b4:	6833      	ldrmi	r3, [r6, #0]
 80058b6:	3302      	addmi	r3, #2
 80058b8:	6033      	strmi	r3, [r6, #0]
 80058ba:	6825      	ldr	r5, [r4, #0]
 80058bc:	f015 0506 	ands.w	r5, r5, #6
 80058c0:	d106      	bne.n	80058d0 <_printf_common+0x48>
 80058c2:	f104 0a19 	add.w	sl, r4, #25
 80058c6:	68e3      	ldr	r3, [r4, #12]
 80058c8:	6832      	ldr	r2, [r6, #0]
 80058ca:	1a9b      	subs	r3, r3, r2
 80058cc:	42ab      	cmp	r3, r5
 80058ce:	dc26      	bgt.n	800591e <_printf_common+0x96>
 80058d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058d4:	6822      	ldr	r2, [r4, #0]
 80058d6:	3b00      	subs	r3, #0
 80058d8:	bf18      	it	ne
 80058da:	2301      	movne	r3, #1
 80058dc:	0692      	lsls	r2, r2, #26
 80058de:	d42b      	bmi.n	8005938 <_printf_common+0xb0>
 80058e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058e4:	4641      	mov	r1, r8
 80058e6:	4638      	mov	r0, r7
 80058e8:	47c8      	blx	r9
 80058ea:	3001      	adds	r0, #1
 80058ec:	d01e      	beq.n	800592c <_printf_common+0xa4>
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	6922      	ldr	r2, [r4, #16]
 80058f2:	f003 0306 	and.w	r3, r3, #6
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	bf02      	ittt	eq
 80058fa:	68e5      	ldreq	r5, [r4, #12]
 80058fc:	6833      	ldreq	r3, [r6, #0]
 80058fe:	1aed      	subeq	r5, r5, r3
 8005900:	68a3      	ldr	r3, [r4, #8]
 8005902:	bf0c      	ite	eq
 8005904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005908:	2500      	movne	r5, #0
 800590a:	4293      	cmp	r3, r2
 800590c:	bfc4      	itt	gt
 800590e:	1a9b      	subgt	r3, r3, r2
 8005910:	18ed      	addgt	r5, r5, r3
 8005912:	2600      	movs	r6, #0
 8005914:	341a      	adds	r4, #26
 8005916:	42b5      	cmp	r5, r6
 8005918:	d11a      	bne.n	8005950 <_printf_common+0xc8>
 800591a:	2000      	movs	r0, #0
 800591c:	e008      	b.n	8005930 <_printf_common+0xa8>
 800591e:	2301      	movs	r3, #1
 8005920:	4652      	mov	r2, sl
 8005922:	4641      	mov	r1, r8
 8005924:	4638      	mov	r0, r7
 8005926:	47c8      	blx	r9
 8005928:	3001      	adds	r0, #1
 800592a:	d103      	bne.n	8005934 <_printf_common+0xac>
 800592c:	f04f 30ff 	mov.w	r0, #4294967295
 8005930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005934:	3501      	adds	r5, #1
 8005936:	e7c6      	b.n	80058c6 <_printf_common+0x3e>
 8005938:	18e1      	adds	r1, r4, r3
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	2030      	movs	r0, #48	@ 0x30
 800593e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005942:	4422      	add	r2, r4
 8005944:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005948:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800594c:	3302      	adds	r3, #2
 800594e:	e7c7      	b.n	80058e0 <_printf_common+0x58>
 8005950:	2301      	movs	r3, #1
 8005952:	4622      	mov	r2, r4
 8005954:	4641      	mov	r1, r8
 8005956:	4638      	mov	r0, r7
 8005958:	47c8      	blx	r9
 800595a:	3001      	adds	r0, #1
 800595c:	d0e6      	beq.n	800592c <_printf_common+0xa4>
 800595e:	3601      	adds	r6, #1
 8005960:	e7d9      	b.n	8005916 <_printf_common+0x8e>
	...

08005964 <_printf_i>:
 8005964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005968:	7e0f      	ldrb	r7, [r1, #24]
 800596a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800596c:	2f78      	cmp	r7, #120	@ 0x78
 800596e:	4691      	mov	r9, r2
 8005970:	4680      	mov	r8, r0
 8005972:	460c      	mov	r4, r1
 8005974:	469a      	mov	sl, r3
 8005976:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800597a:	d807      	bhi.n	800598c <_printf_i+0x28>
 800597c:	2f62      	cmp	r7, #98	@ 0x62
 800597e:	d80a      	bhi.n	8005996 <_printf_i+0x32>
 8005980:	2f00      	cmp	r7, #0
 8005982:	f000 80d1 	beq.w	8005b28 <_printf_i+0x1c4>
 8005986:	2f58      	cmp	r7, #88	@ 0x58
 8005988:	f000 80b8 	beq.w	8005afc <_printf_i+0x198>
 800598c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005990:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005994:	e03a      	b.n	8005a0c <_printf_i+0xa8>
 8005996:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800599a:	2b15      	cmp	r3, #21
 800599c:	d8f6      	bhi.n	800598c <_printf_i+0x28>
 800599e:	a101      	add	r1, pc, #4	@ (adr r1, 80059a4 <_printf_i+0x40>)
 80059a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059a4:	080059fd 	.word	0x080059fd
 80059a8:	08005a11 	.word	0x08005a11
 80059ac:	0800598d 	.word	0x0800598d
 80059b0:	0800598d 	.word	0x0800598d
 80059b4:	0800598d 	.word	0x0800598d
 80059b8:	0800598d 	.word	0x0800598d
 80059bc:	08005a11 	.word	0x08005a11
 80059c0:	0800598d 	.word	0x0800598d
 80059c4:	0800598d 	.word	0x0800598d
 80059c8:	0800598d 	.word	0x0800598d
 80059cc:	0800598d 	.word	0x0800598d
 80059d0:	08005b0f 	.word	0x08005b0f
 80059d4:	08005a3b 	.word	0x08005a3b
 80059d8:	08005ac9 	.word	0x08005ac9
 80059dc:	0800598d 	.word	0x0800598d
 80059e0:	0800598d 	.word	0x0800598d
 80059e4:	08005b31 	.word	0x08005b31
 80059e8:	0800598d 	.word	0x0800598d
 80059ec:	08005a3b 	.word	0x08005a3b
 80059f0:	0800598d 	.word	0x0800598d
 80059f4:	0800598d 	.word	0x0800598d
 80059f8:	08005ad1 	.word	0x08005ad1
 80059fc:	6833      	ldr	r3, [r6, #0]
 80059fe:	1d1a      	adds	r2, r3, #4
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6032      	str	r2, [r6, #0]
 8005a04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e09c      	b.n	8005b4a <_printf_i+0x1e6>
 8005a10:	6833      	ldr	r3, [r6, #0]
 8005a12:	6820      	ldr	r0, [r4, #0]
 8005a14:	1d19      	adds	r1, r3, #4
 8005a16:	6031      	str	r1, [r6, #0]
 8005a18:	0606      	lsls	r6, r0, #24
 8005a1a:	d501      	bpl.n	8005a20 <_printf_i+0xbc>
 8005a1c:	681d      	ldr	r5, [r3, #0]
 8005a1e:	e003      	b.n	8005a28 <_printf_i+0xc4>
 8005a20:	0645      	lsls	r5, r0, #25
 8005a22:	d5fb      	bpl.n	8005a1c <_printf_i+0xb8>
 8005a24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a28:	2d00      	cmp	r5, #0
 8005a2a:	da03      	bge.n	8005a34 <_printf_i+0xd0>
 8005a2c:	232d      	movs	r3, #45	@ 0x2d
 8005a2e:	426d      	negs	r5, r5
 8005a30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a34:	4858      	ldr	r0, [pc, #352]	@ (8005b98 <_printf_i+0x234>)
 8005a36:	230a      	movs	r3, #10
 8005a38:	e011      	b.n	8005a5e <_printf_i+0xfa>
 8005a3a:	6821      	ldr	r1, [r4, #0]
 8005a3c:	6833      	ldr	r3, [r6, #0]
 8005a3e:	0608      	lsls	r0, r1, #24
 8005a40:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a44:	d402      	bmi.n	8005a4c <_printf_i+0xe8>
 8005a46:	0649      	lsls	r1, r1, #25
 8005a48:	bf48      	it	mi
 8005a4a:	b2ad      	uxthmi	r5, r5
 8005a4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a4e:	4852      	ldr	r0, [pc, #328]	@ (8005b98 <_printf_i+0x234>)
 8005a50:	6033      	str	r3, [r6, #0]
 8005a52:	bf14      	ite	ne
 8005a54:	230a      	movne	r3, #10
 8005a56:	2308      	moveq	r3, #8
 8005a58:	2100      	movs	r1, #0
 8005a5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a5e:	6866      	ldr	r6, [r4, #4]
 8005a60:	60a6      	str	r6, [r4, #8]
 8005a62:	2e00      	cmp	r6, #0
 8005a64:	db05      	blt.n	8005a72 <_printf_i+0x10e>
 8005a66:	6821      	ldr	r1, [r4, #0]
 8005a68:	432e      	orrs	r6, r5
 8005a6a:	f021 0104 	bic.w	r1, r1, #4
 8005a6e:	6021      	str	r1, [r4, #0]
 8005a70:	d04b      	beq.n	8005b0a <_printf_i+0x1a6>
 8005a72:	4616      	mov	r6, r2
 8005a74:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a78:	fb03 5711 	mls	r7, r3, r1, r5
 8005a7c:	5dc7      	ldrb	r7, [r0, r7]
 8005a7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a82:	462f      	mov	r7, r5
 8005a84:	42bb      	cmp	r3, r7
 8005a86:	460d      	mov	r5, r1
 8005a88:	d9f4      	bls.n	8005a74 <_printf_i+0x110>
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d10b      	bne.n	8005aa6 <_printf_i+0x142>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	07df      	lsls	r7, r3, #31
 8005a92:	d508      	bpl.n	8005aa6 <_printf_i+0x142>
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	6861      	ldr	r1, [r4, #4]
 8005a98:	4299      	cmp	r1, r3
 8005a9a:	bfde      	ittt	le
 8005a9c:	2330      	movle	r3, #48	@ 0x30
 8005a9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005aa2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005aa6:	1b92      	subs	r2, r2, r6
 8005aa8:	6122      	str	r2, [r4, #16]
 8005aaa:	f8cd a000 	str.w	sl, [sp]
 8005aae:	464b      	mov	r3, r9
 8005ab0:	aa03      	add	r2, sp, #12
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4640      	mov	r0, r8
 8005ab6:	f7ff fee7 	bl	8005888 <_printf_common>
 8005aba:	3001      	adds	r0, #1
 8005abc:	d14a      	bne.n	8005b54 <_printf_i+0x1f0>
 8005abe:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac2:	b004      	add	sp, #16
 8005ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	f043 0320 	orr.w	r3, r3, #32
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	4832      	ldr	r0, [pc, #200]	@ (8005b9c <_printf_i+0x238>)
 8005ad2:	2778      	movs	r7, #120	@ 0x78
 8005ad4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	6831      	ldr	r1, [r6, #0]
 8005adc:	061f      	lsls	r7, r3, #24
 8005ade:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ae2:	d402      	bmi.n	8005aea <_printf_i+0x186>
 8005ae4:	065f      	lsls	r7, r3, #25
 8005ae6:	bf48      	it	mi
 8005ae8:	b2ad      	uxthmi	r5, r5
 8005aea:	6031      	str	r1, [r6, #0]
 8005aec:	07d9      	lsls	r1, r3, #31
 8005aee:	bf44      	itt	mi
 8005af0:	f043 0320 	orrmi.w	r3, r3, #32
 8005af4:	6023      	strmi	r3, [r4, #0]
 8005af6:	b11d      	cbz	r5, 8005b00 <_printf_i+0x19c>
 8005af8:	2310      	movs	r3, #16
 8005afa:	e7ad      	b.n	8005a58 <_printf_i+0xf4>
 8005afc:	4826      	ldr	r0, [pc, #152]	@ (8005b98 <_printf_i+0x234>)
 8005afe:	e7e9      	b.n	8005ad4 <_printf_i+0x170>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	f023 0320 	bic.w	r3, r3, #32
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	e7f6      	b.n	8005af8 <_printf_i+0x194>
 8005b0a:	4616      	mov	r6, r2
 8005b0c:	e7bd      	b.n	8005a8a <_printf_i+0x126>
 8005b0e:	6833      	ldr	r3, [r6, #0]
 8005b10:	6825      	ldr	r5, [r4, #0]
 8005b12:	6961      	ldr	r1, [r4, #20]
 8005b14:	1d18      	adds	r0, r3, #4
 8005b16:	6030      	str	r0, [r6, #0]
 8005b18:	062e      	lsls	r6, r5, #24
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	d501      	bpl.n	8005b22 <_printf_i+0x1be>
 8005b1e:	6019      	str	r1, [r3, #0]
 8005b20:	e002      	b.n	8005b28 <_printf_i+0x1c4>
 8005b22:	0668      	lsls	r0, r5, #25
 8005b24:	d5fb      	bpl.n	8005b1e <_printf_i+0x1ba>
 8005b26:	8019      	strh	r1, [r3, #0]
 8005b28:	2300      	movs	r3, #0
 8005b2a:	6123      	str	r3, [r4, #16]
 8005b2c:	4616      	mov	r6, r2
 8005b2e:	e7bc      	b.n	8005aaa <_printf_i+0x146>
 8005b30:	6833      	ldr	r3, [r6, #0]
 8005b32:	1d1a      	adds	r2, r3, #4
 8005b34:	6032      	str	r2, [r6, #0]
 8005b36:	681e      	ldr	r6, [r3, #0]
 8005b38:	6862      	ldr	r2, [r4, #4]
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	f7fa fb67 	bl	8000210 <memchr>
 8005b42:	b108      	cbz	r0, 8005b48 <_printf_i+0x1e4>
 8005b44:	1b80      	subs	r0, r0, r6
 8005b46:	6060      	str	r0, [r4, #4]
 8005b48:	6863      	ldr	r3, [r4, #4]
 8005b4a:	6123      	str	r3, [r4, #16]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b52:	e7aa      	b.n	8005aaa <_printf_i+0x146>
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	4632      	mov	r2, r6
 8005b58:	4649      	mov	r1, r9
 8005b5a:	4640      	mov	r0, r8
 8005b5c:	47d0      	blx	sl
 8005b5e:	3001      	adds	r0, #1
 8005b60:	d0ad      	beq.n	8005abe <_printf_i+0x15a>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	079b      	lsls	r3, r3, #30
 8005b66:	d413      	bmi.n	8005b90 <_printf_i+0x22c>
 8005b68:	68e0      	ldr	r0, [r4, #12]
 8005b6a:	9b03      	ldr	r3, [sp, #12]
 8005b6c:	4298      	cmp	r0, r3
 8005b6e:	bfb8      	it	lt
 8005b70:	4618      	movlt	r0, r3
 8005b72:	e7a6      	b.n	8005ac2 <_printf_i+0x15e>
 8005b74:	2301      	movs	r3, #1
 8005b76:	4632      	mov	r2, r6
 8005b78:	4649      	mov	r1, r9
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	47d0      	blx	sl
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d09d      	beq.n	8005abe <_printf_i+0x15a>
 8005b82:	3501      	adds	r5, #1
 8005b84:	68e3      	ldr	r3, [r4, #12]
 8005b86:	9903      	ldr	r1, [sp, #12]
 8005b88:	1a5b      	subs	r3, r3, r1
 8005b8a:	42ab      	cmp	r3, r5
 8005b8c:	dcf2      	bgt.n	8005b74 <_printf_i+0x210>
 8005b8e:	e7eb      	b.n	8005b68 <_printf_i+0x204>
 8005b90:	2500      	movs	r5, #0
 8005b92:	f104 0619 	add.w	r6, r4, #25
 8005b96:	e7f5      	b.n	8005b84 <_printf_i+0x220>
 8005b98:	08005f8d 	.word	0x08005f8d
 8005b9c:	08005f9e 	.word	0x08005f9e

08005ba0 <__sflush_r>:
 8005ba0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba8:	0716      	lsls	r6, r2, #28
 8005baa:	4605      	mov	r5, r0
 8005bac:	460c      	mov	r4, r1
 8005bae:	d454      	bmi.n	8005c5a <__sflush_r+0xba>
 8005bb0:	684b      	ldr	r3, [r1, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	dc02      	bgt.n	8005bbc <__sflush_r+0x1c>
 8005bb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	dd48      	ble.n	8005c4e <__sflush_r+0xae>
 8005bbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bbe:	2e00      	cmp	r6, #0
 8005bc0:	d045      	beq.n	8005c4e <__sflush_r+0xae>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005bc8:	682f      	ldr	r7, [r5, #0]
 8005bca:	6a21      	ldr	r1, [r4, #32]
 8005bcc:	602b      	str	r3, [r5, #0]
 8005bce:	d030      	beq.n	8005c32 <__sflush_r+0x92>
 8005bd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	0759      	lsls	r1, r3, #29
 8005bd6:	d505      	bpl.n	8005be4 <__sflush_r+0x44>
 8005bd8:	6863      	ldr	r3, [r4, #4]
 8005bda:	1ad2      	subs	r2, r2, r3
 8005bdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005bde:	b10b      	cbz	r3, 8005be4 <__sflush_r+0x44>
 8005be0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	2300      	movs	r3, #0
 8005be6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005be8:	6a21      	ldr	r1, [r4, #32]
 8005bea:	4628      	mov	r0, r5
 8005bec:	47b0      	blx	r6
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	d106      	bne.n	8005c02 <__sflush_r+0x62>
 8005bf4:	6829      	ldr	r1, [r5, #0]
 8005bf6:	291d      	cmp	r1, #29
 8005bf8:	d82b      	bhi.n	8005c52 <__sflush_r+0xb2>
 8005bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8005ca4 <__sflush_r+0x104>)
 8005bfc:	40ca      	lsrs	r2, r1
 8005bfe:	07d6      	lsls	r6, r2, #31
 8005c00:	d527      	bpl.n	8005c52 <__sflush_r+0xb2>
 8005c02:	2200      	movs	r2, #0
 8005c04:	6062      	str	r2, [r4, #4]
 8005c06:	04d9      	lsls	r1, r3, #19
 8005c08:	6922      	ldr	r2, [r4, #16]
 8005c0a:	6022      	str	r2, [r4, #0]
 8005c0c:	d504      	bpl.n	8005c18 <__sflush_r+0x78>
 8005c0e:	1c42      	adds	r2, r0, #1
 8005c10:	d101      	bne.n	8005c16 <__sflush_r+0x76>
 8005c12:	682b      	ldr	r3, [r5, #0]
 8005c14:	b903      	cbnz	r3, 8005c18 <__sflush_r+0x78>
 8005c16:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c1a:	602f      	str	r7, [r5, #0]
 8005c1c:	b1b9      	cbz	r1, 8005c4e <__sflush_r+0xae>
 8005c1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c22:	4299      	cmp	r1, r3
 8005c24:	d002      	beq.n	8005c2c <__sflush_r+0x8c>
 8005c26:	4628      	mov	r0, r5
 8005c28:	f7ff fca2 	bl	8005570 <_free_r>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c30:	e00d      	b.n	8005c4e <__sflush_r+0xae>
 8005c32:	2301      	movs	r3, #1
 8005c34:	4628      	mov	r0, r5
 8005c36:	47b0      	blx	r6
 8005c38:	4602      	mov	r2, r0
 8005c3a:	1c50      	adds	r0, r2, #1
 8005c3c:	d1c9      	bne.n	8005bd2 <__sflush_r+0x32>
 8005c3e:	682b      	ldr	r3, [r5, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0c6      	beq.n	8005bd2 <__sflush_r+0x32>
 8005c44:	2b1d      	cmp	r3, #29
 8005c46:	d001      	beq.n	8005c4c <__sflush_r+0xac>
 8005c48:	2b16      	cmp	r3, #22
 8005c4a:	d11e      	bne.n	8005c8a <__sflush_r+0xea>
 8005c4c:	602f      	str	r7, [r5, #0]
 8005c4e:	2000      	movs	r0, #0
 8005c50:	e022      	b.n	8005c98 <__sflush_r+0xf8>
 8005c52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c56:	b21b      	sxth	r3, r3
 8005c58:	e01b      	b.n	8005c92 <__sflush_r+0xf2>
 8005c5a:	690f      	ldr	r7, [r1, #16]
 8005c5c:	2f00      	cmp	r7, #0
 8005c5e:	d0f6      	beq.n	8005c4e <__sflush_r+0xae>
 8005c60:	0793      	lsls	r3, r2, #30
 8005c62:	680e      	ldr	r6, [r1, #0]
 8005c64:	bf08      	it	eq
 8005c66:	694b      	ldreq	r3, [r1, #20]
 8005c68:	600f      	str	r7, [r1, #0]
 8005c6a:	bf18      	it	ne
 8005c6c:	2300      	movne	r3, #0
 8005c6e:	eba6 0807 	sub.w	r8, r6, r7
 8005c72:	608b      	str	r3, [r1, #8]
 8005c74:	f1b8 0f00 	cmp.w	r8, #0
 8005c78:	dde9      	ble.n	8005c4e <__sflush_r+0xae>
 8005c7a:	6a21      	ldr	r1, [r4, #32]
 8005c7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c7e:	4643      	mov	r3, r8
 8005c80:	463a      	mov	r2, r7
 8005c82:	4628      	mov	r0, r5
 8005c84:	47b0      	blx	r6
 8005c86:	2800      	cmp	r0, #0
 8005c88:	dc08      	bgt.n	8005c9c <__sflush_r+0xfc>
 8005c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c92:	81a3      	strh	r3, [r4, #12]
 8005c94:	f04f 30ff 	mov.w	r0, #4294967295
 8005c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c9c:	4407      	add	r7, r0
 8005c9e:	eba8 0800 	sub.w	r8, r8, r0
 8005ca2:	e7e7      	b.n	8005c74 <__sflush_r+0xd4>
 8005ca4:	20400001 	.word	0x20400001

08005ca8 <_fflush_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	690b      	ldr	r3, [r1, #16]
 8005cac:	4605      	mov	r5, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	b913      	cbnz	r3, 8005cb8 <_fflush_r+0x10>
 8005cb2:	2500      	movs	r5, #0
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	b118      	cbz	r0, 8005cc2 <_fflush_r+0x1a>
 8005cba:	6a03      	ldr	r3, [r0, #32]
 8005cbc:	b90b      	cbnz	r3, 8005cc2 <_fflush_r+0x1a>
 8005cbe:	f7ff fa4d 	bl	800515c <__sinit>
 8005cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0f3      	beq.n	8005cb2 <_fflush_r+0xa>
 8005cca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ccc:	07d0      	lsls	r0, r2, #31
 8005cce:	d404      	bmi.n	8005cda <_fflush_r+0x32>
 8005cd0:	0599      	lsls	r1, r3, #22
 8005cd2:	d402      	bmi.n	8005cda <_fflush_r+0x32>
 8005cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cd6:	f7ff fc48 	bl	800556a <__retarget_lock_acquire_recursive>
 8005cda:	4628      	mov	r0, r5
 8005cdc:	4621      	mov	r1, r4
 8005cde:	f7ff ff5f 	bl	8005ba0 <__sflush_r>
 8005ce2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ce4:	07da      	lsls	r2, r3, #31
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	d4e4      	bmi.n	8005cb4 <_fflush_r+0xc>
 8005cea:	89a3      	ldrh	r3, [r4, #12]
 8005cec:	059b      	lsls	r3, r3, #22
 8005cee:	d4e1      	bmi.n	8005cb4 <_fflush_r+0xc>
 8005cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cf2:	f7ff fc3b 	bl	800556c <__retarget_lock_release_recursive>
 8005cf6:	e7dd      	b.n	8005cb4 <_fflush_r+0xc>

08005cf8 <__swhatbuf_r>:
 8005cf8:	b570      	push	{r4, r5, r6, lr}
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d00:	2900      	cmp	r1, #0
 8005d02:	b096      	sub	sp, #88	@ 0x58
 8005d04:	4615      	mov	r5, r2
 8005d06:	461e      	mov	r6, r3
 8005d08:	da0d      	bge.n	8005d26 <__swhatbuf_r+0x2e>
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d10:	f04f 0100 	mov.w	r1, #0
 8005d14:	bf14      	ite	ne
 8005d16:	2340      	movne	r3, #64	@ 0x40
 8005d18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	6031      	str	r1, [r6, #0]
 8005d20:	602b      	str	r3, [r5, #0]
 8005d22:	b016      	add	sp, #88	@ 0x58
 8005d24:	bd70      	pop	{r4, r5, r6, pc}
 8005d26:	466a      	mov	r2, sp
 8005d28:	f000 f848 	bl	8005dbc <_fstat_r>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	dbec      	blt.n	8005d0a <__swhatbuf_r+0x12>
 8005d30:	9901      	ldr	r1, [sp, #4]
 8005d32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d3a:	4259      	negs	r1, r3
 8005d3c:	4159      	adcs	r1, r3
 8005d3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d42:	e7eb      	b.n	8005d1c <__swhatbuf_r+0x24>

08005d44 <__smakebuf_r>:
 8005d44:	898b      	ldrh	r3, [r1, #12]
 8005d46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d48:	079d      	lsls	r5, r3, #30
 8005d4a:	4606      	mov	r6, r0
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	d507      	bpl.n	8005d60 <__smakebuf_r+0x1c>
 8005d50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	6123      	str	r3, [r4, #16]
 8005d58:	2301      	movs	r3, #1
 8005d5a:	6163      	str	r3, [r4, #20]
 8005d5c:	b003      	add	sp, #12
 8005d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d60:	ab01      	add	r3, sp, #4
 8005d62:	466a      	mov	r2, sp
 8005d64:	f7ff ffc8 	bl	8005cf8 <__swhatbuf_r>
 8005d68:	9f00      	ldr	r7, [sp, #0]
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	4639      	mov	r1, r7
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f7ff f8dc 	bl	8004f2c <_malloc_r>
 8005d74:	b948      	cbnz	r0, 8005d8a <__smakebuf_r+0x46>
 8005d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d7a:	059a      	lsls	r2, r3, #22
 8005d7c:	d4ee      	bmi.n	8005d5c <__smakebuf_r+0x18>
 8005d7e:	f023 0303 	bic.w	r3, r3, #3
 8005d82:	f043 0302 	orr.w	r3, r3, #2
 8005d86:	81a3      	strh	r3, [r4, #12]
 8005d88:	e7e2      	b.n	8005d50 <__smakebuf_r+0xc>
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	6020      	str	r0, [r4, #0]
 8005d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d92:	81a3      	strh	r3, [r4, #12]
 8005d94:	9b01      	ldr	r3, [sp, #4]
 8005d96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d9a:	b15b      	cbz	r3, 8005db4 <__smakebuf_r+0x70>
 8005d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005da0:	4630      	mov	r0, r6
 8005da2:	f000 f81d 	bl	8005de0 <_isatty_r>
 8005da6:	b128      	cbz	r0, 8005db4 <__smakebuf_r+0x70>
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	f023 0303 	bic.w	r3, r3, #3
 8005dae:	f043 0301 	orr.w	r3, r3, #1
 8005db2:	81a3      	strh	r3, [r4, #12]
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	431d      	orrs	r5, r3
 8005db8:	81a5      	strh	r5, [r4, #12]
 8005dba:	e7cf      	b.n	8005d5c <__smakebuf_r+0x18>

08005dbc <_fstat_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4d07      	ldr	r5, [pc, #28]	@ (8005ddc <_fstat_r+0x20>)
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	4608      	mov	r0, r1
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	602b      	str	r3, [r5, #0]
 8005dca:	f7fb fc9b 	bl	8001704 <_fstat>
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	d102      	bne.n	8005dd8 <_fstat_r+0x1c>
 8005dd2:	682b      	ldr	r3, [r5, #0]
 8005dd4:	b103      	cbz	r3, 8005dd8 <_fstat_r+0x1c>
 8005dd6:	6023      	str	r3, [r4, #0]
 8005dd8:	bd38      	pop	{r3, r4, r5, pc}
 8005dda:	bf00      	nop
 8005ddc:	20040514 	.word	0x20040514

08005de0 <_isatty_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d06      	ldr	r5, [pc, #24]	@ (8005dfc <_isatty_r+0x1c>)
 8005de4:	2300      	movs	r3, #0
 8005de6:	4604      	mov	r4, r0
 8005de8:	4608      	mov	r0, r1
 8005dea:	602b      	str	r3, [r5, #0]
 8005dec:	f7fb fc9a 	bl	8001724 <_isatty>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_isatty_r+0x1a>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_isatty_r+0x1a>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	20040514 	.word	0x20040514

08005e00 <_init>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	bf00      	nop
 8005e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e06:	bc08      	pop	{r3}
 8005e08:	469e      	mov	lr, r3
 8005e0a:	4770      	bx	lr

08005e0c <_fini>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	bf00      	nop
 8005e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e12:	bc08      	pop	{r3}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4770      	bx	lr
