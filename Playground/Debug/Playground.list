
Playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac00  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800adc0  0800adc0  0000bdc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b34c  0800b34c  0000d27c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b34c  0800b34c  0000c34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b354  0800b354  0000d27c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b354  0800b354  0000c354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800b35c  0800b35c  0000c35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000027c  20040000  0800b364  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e0  2004027c  0800b5e0  0000d27c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20040c5c  0800b5e0  0000dc5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d27c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b5c  00000000  00000000  0000d2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d6  00000000  00000000  0001ee08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  000211e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab3  00000000  00000000  00021fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dce8  00000000  00000000  00022a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001056e  00000000  00000000  00050743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106036  00000000  00000000  00060cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166ce7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f40  00000000  00000000  00166d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0016bc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2004027c 	.word	0x2004027c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ada8 	.word	0x0800ada8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040280 	.word	0x20040280
 80001fc:	0800ada8 	.word	0x0800ada8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9be 	b.w	800104c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	468e      	mov	lr, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d962      	bls.n	8000e30 <__udivmoddi4+0xdc>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	b14e      	cbz	r6, 8000d84 <__udivmoddi4+0x30>
 8000d70:	f1c6 0320 	rsb	r3, r6, #32
 8000d74:	fa01 f806 	lsl.w	r8, r1, r6
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	40b7      	lsls	r7, r6
 8000d7e:	ea43 0808 	orr.w	r8, r3, r8
 8000d82:	40b4      	lsls	r4, r6
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d90:	0c23      	lsrs	r3, r4, #16
 8000d92:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000da8:	f080 80ea 	bcs.w	8000f80 <__udivmoddi4+0x22c>
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f240 80e7 	bls.w	8000f80 <__udivmoddi4+0x22c>
 8000db2:	3902      	subs	r1, #2
 8000db4:	443b      	add	r3, r7
 8000db6:	1a9a      	subs	r2, r3, r2
 8000db8:	b2a3      	uxth	r3, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dca:	459c      	cmp	ip, r3
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x8e>
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd4:	f080 80d6 	bcs.w	8000f84 <__udivmoddi4+0x230>
 8000dd8:	459c      	cmp	ip, r3
 8000dda:	f240 80d3 	bls.w	8000f84 <__udivmoddi4+0x230>
 8000dde:	443b      	add	r3, r7
 8000de0:	3802      	subs	r0, #2
 8000de2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de6:	eba3 030c 	sub.w	r3, r3, ip
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11d      	cbz	r5, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40f3      	lsrs	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	e9c5 3200 	strd	r3, r2, [r5]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d905      	bls.n	8000e0a <__udivmoddi4+0xb6>
 8000dfe:	b10d      	cbz	r5, 8000e04 <__udivmoddi4+0xb0>
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4608      	mov	r0, r1
 8000e08:	e7f5      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e0a:	fab3 f183 	clz	r1, r3
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d146      	bne.n	8000ea0 <__udivmoddi4+0x14c>
 8000e12:	4573      	cmp	r3, lr
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xc8>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 8105 	bhi.w	8001026 <__udivmoddi4+0x2d2>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4690      	mov	r8, r2
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e5      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e2e:	e7e2      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f000 8090 	beq.w	8000f56 <__udivmoddi4+0x202>
 8000e36:	fab2 f682 	clz	r6, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f040 80a4 	bne.w	8000f88 <__udivmoddi4+0x234>
 8000e40:	1a8a      	subs	r2, r1, r2
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x11e>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x11c>
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f200 80e0 	bhi.w	8001030 <__udivmoddi4+0x2dc>
 8000e70:	46c4      	mov	ip, r8
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e80:	fb02 f404 	mul.w	r4, r2, r4
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x144>
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x142>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f200 80ca 	bhi.w	800102a <__udivmoddi4+0x2d6>
 8000e96:	4602      	mov	r2, r0
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e9e:	e7a5      	b.n	8000dec <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb0:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eca:	0c1c      	lsrs	r4, r3, #16
 8000ecc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x1a0>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	f080 809c 	bcs.w	8001022 <__udivmoddi4+0x2ce>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f240 8099 	bls.w	8001022 <__udivmoddi4+0x2ce>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	443c      	add	r4, r7
 8000ef4:	eba4 040e 	sub.w	r4, r4, lr
 8000ef8:	fa1f fe83 	uxth.w	lr, r3
 8000efc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f00:	fb09 4413 	mls	r4, r9, r3, r4
 8000f04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1ce>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f16:	f080 8082 	bcs.w	800101e <__udivmoddi4+0x2ca>
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d97f      	bls.n	800101e <__udivmoddi4+0x2ca>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f26:	eba4 040c 	sub.w	r4, r4, ip
 8000f2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f2e:	4564      	cmp	r4, ip
 8000f30:	4673      	mov	r3, lr
 8000f32:	46e1      	mov	r9, ip
 8000f34:	d362      	bcc.n	8000ffc <__udivmoddi4+0x2a8>
 8000f36:	d05f      	beq.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x1fe>
 8000f3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f42:	fa04 f606 	lsl.w	r6, r4, r6
 8000f46:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	40cc      	lsrs	r4, r1
 8000f4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f52:	2100      	movs	r1, #0
 8000f54:	e74f      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000f56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5a:	0c01      	lsrs	r1, r0, #16
 8000f5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f60:	b280      	uxth	r0, r0
 8000f62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f66:	463b      	mov	r3, r7
 8000f68:	4638      	mov	r0, r7
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	46b8      	mov	r8, r7
 8000f6e:	46be      	mov	lr, r7
 8000f70:	2620      	movs	r6, #32
 8000f72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f76:	eba2 0208 	sub.w	r2, r2, r8
 8000f7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f7e:	e766      	b.n	8000e4e <__udivmoddi4+0xfa>
 8000f80:	4601      	mov	r1, r0
 8000f82:	e718      	b.n	8000db6 <__udivmoddi4+0x62>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e72c      	b.n	8000de2 <__udivmoddi4+0x8e>
 8000f88:	f1c6 0220 	rsb	r2, r6, #32
 8000f8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f90:	40b7      	lsls	r7, r6
 8000f92:	40b1      	lsls	r1, r6
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa2:	b2bc      	uxth	r4, r7
 8000fa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fae:	fb08 f904 	mul.w	r9, r8, r4
 8000fb2:	40b0      	lsls	r0, r6
 8000fb4:	4589      	cmp	r9, r1
 8000fb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fba:	b280      	uxth	r0, r0
 8000fbc:	d93e      	bls.n	800103c <__udivmoddi4+0x2e8>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc4:	d201      	bcs.n	8000fca <__udivmoddi4+0x276>
 8000fc6:	4589      	cmp	r9, r1
 8000fc8:	d81f      	bhi.n	800100a <__udivmoddi4+0x2b6>
 8000fca:	eba1 0109 	sub.w	r1, r1, r9
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	4542      	cmp	r2, r8
 8000fe2:	d229      	bcs.n	8001038 <__udivmoddi4+0x2e4>
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fea:	d2c4      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000fec:	4542      	cmp	r2, r8
 8000fee:	d2c2      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000ff0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff4:	443a      	add	r2, r7
 8000ff6:	e7be      	b.n	8000f76 <__udivmoddi4+0x222>
 8000ff8:	45f0      	cmp	r8, lr
 8000ffa:	d29d      	bcs.n	8000f38 <__udivmoddi4+0x1e4>
 8000ffc:	ebbe 0302 	subs.w	r3, lr, r2
 8001000:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001004:	3801      	subs	r0, #1
 8001006:	46e1      	mov	r9, ip
 8001008:	e796      	b.n	8000f38 <__udivmoddi4+0x1e4>
 800100a:	eba7 0909 	sub.w	r9, r7, r9
 800100e:	4449      	add	r1, r9
 8001010:	f1a8 0c02 	sub.w	ip, r8, #2
 8001014:	fbb1 f9fe 	udiv	r9, r1, lr
 8001018:	fb09 f804 	mul.w	r8, r9, r4
 800101c:	e7db      	b.n	8000fd6 <__udivmoddi4+0x282>
 800101e:	4673      	mov	r3, lr
 8001020:	e77f      	b.n	8000f22 <__udivmoddi4+0x1ce>
 8001022:	4650      	mov	r0, sl
 8001024:	e766      	b.n	8000ef4 <__udivmoddi4+0x1a0>
 8001026:	4608      	mov	r0, r1
 8001028:	e6fd      	b.n	8000e26 <__udivmoddi4+0xd2>
 800102a:	443b      	add	r3, r7
 800102c:	3a02      	subs	r2, #2
 800102e:	e733      	b.n	8000e98 <__udivmoddi4+0x144>
 8001030:	f1ac 0c02 	sub.w	ip, ip, #2
 8001034:	443b      	add	r3, r7
 8001036:	e71c      	b.n	8000e72 <__udivmoddi4+0x11e>
 8001038:	4649      	mov	r1, r9
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x222>
 800103c:	eba1 0109 	sub.w	r1, r1, r9
 8001040:	46c4      	mov	ip, r8
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fb09 f804 	mul.w	r8, r9, r4
 800104a:	e7c4      	b.n	8000fd6 <__udivmoddi4+0x282>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <_Z7printlnPKc>:

extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef hlpuart1;

void println(const char * msg){
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff f921 	bl	80002a0 <strlen>
 800105e:	4603      	mov	r3, r0
 8001060:	b29a      	uxth	r2, r3
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <_Z7printlnPKc+0x28>)
 800106a:	f004 fa39 	bl	80054e0 <HAL_UART_Transmit>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20040298 	.word	0x20040298

0800107c <_Z17delayMicrosecondsm>:

void delayMicroseconds(uint32_t us){
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	uint32_t start = DWT->CYCCNT;
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <_Z17delayMicrosecondsm+0x48>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = us * (HAL_RCC_GetHCLKFreq() / 1000000);
 800108a:	f003 f84b 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 800108e:	4603      	mov	r3, r0
 8001090:	4a0d      	ldr	r2, [pc, #52]	@ (80010c8 <_Z17delayMicrosecondsm+0x4c>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	0c9a      	lsrs	r2, r3, #18
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	fb02 f303 	mul.w	r3, r2, r3
 800109e:	60bb      	str	r3, [r7, #8]
	while ((DWT->CYCCNT - start) < ticks);
 80010a0:	bf00      	nop
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <_Z17delayMicrosecondsm+0x48>)
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	bf8c      	ite	hi
 80010b0:	2301      	movhi	r3, #1
 80010b2:	2300      	movls	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f3      	bne.n	80010a2 <_Z17delayMicrosecondsm+0x26>
}
 80010ba:	bf00      	nop
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	e0001000 	.word	0xe0001000
 80010c8:	431bde83 	.word	0x431bde83

080010cc <_ZN9Link2UART5closeEv>:
public:
	int8_t open(uint32_t arg) {
		return 0;
	}

	void close() {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_ZN9Link2UART4recvEPhhPt>:

	int16_t recv(uint8_t *buf, uint8_t len, uint16_t *cs = NULL) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71fb      	strb	r3, [r7, #7]
		if (cs)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d002      	beq.n	80010fc <_ZN9Link2UART4recvEPhhPt+0x1c>
			*cs = 0;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	2200      	movs	r2, #0
 80010fa:	801a      	strh	r2, [r3, #0]

		for (uint8_t i = 0; i < len; i++){
 80010fc:	2300      	movs	r3, #0
 80010fe:	75fb      	strb	r3, [r7, #23]
 8001100:	e022      	b.n	8001148 <_ZN9Link2UART4recvEPhhPt+0x68>
			uint8_t byte = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	757b      	strb	r3, [r7, #21]
			HAL_StatusTypeDef ret = HAL_UART_Receive(&huart3, &byte, 1, 2); // timeout = 2ms
 8001106:	f107 0115 	add.w	r1, r7, #21
 800110a:	2302      	movs	r3, #2
 800110c:	2201      	movs	r2, #1
 800110e:	4813      	ldr	r0, [pc, #76]	@ (800115c <_ZN9Link2UART4recvEPhhPt+0x7c>)
 8001110:	f004 fa74 	bl	80055fc <HAL_UART_Receive>
 8001114:	4603      	mov	r3, r0
 8001116:	75bb      	strb	r3, [r7, #22]

			if (ret != HAL_OK){
 8001118:	7dbb      	ldrb	r3, [r7, #22]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <_ZN9Link2UART4recvEPhhPt+0x44>
				return -1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e017      	b.n	8001154 <_ZN9Link2UART4recvEPhhPt+0x74>
			}
			buf[i] = byte;
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	4413      	add	r3, r2
 800112a:	7d7a      	ldrb	r2, [r7, #21]
 800112c:	701a      	strb	r2, [r3, #0]

			if (cs)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d006      	beq.n	8001142 <_ZN9Link2UART4recvEPhhPt+0x62>
				*cs += byte;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	7d7a      	ldrb	r2, [r7, #21]
 800113a:	4413      	add	r3, r2
 800113c:	b29a      	uxth	r2, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++){
 8001142:	7dfb      	ldrb	r3, [r7, #23]
 8001144:	3301      	adds	r3, #1
 8001146:	75fb      	strb	r3, [r7, #23]
 8001148:	7dfa      	ldrb	r2, [r7, #23]
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	429a      	cmp	r2, r3
 800114e:	d3d8      	bcc.n	8001102 <_ZN9Link2UART4recvEPhhPt+0x22>
		}

		return len;
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	b21b      	sxth	r3, r3
	}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200403c0 	.word	0x200403c0

08001160 <_ZN9Link2UART4sendEPhh>:

	int16_t send(uint8_t *buf, uint8_t len) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	4613      	mov	r3, r2
 800116c:	71fb      	strb	r3, [r7, #7]
		if (HAL_UART_Transmit(&huart3, buf, len, HAL_MAX_DELAY) != HAL_OK)
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	b29a      	uxth	r2, r3
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	4809      	ldr	r0, [pc, #36]	@ (80011a0 <_ZN9Link2UART4sendEPhh+0x40>)
 800117a:	f004 f9b1 	bl	80054e0 <HAL_UART_Transmit>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf14      	ite	ne
 8001184:	2301      	movne	r3, #1
 8001186:	2300      	moveq	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <_ZN9Link2UART4sendEPhh+0x34>
			return -1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	e001      	b.n	8001198 <_ZN9Link2UART4sendEPhh+0x38>
		return len;
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	b21b      	sxth	r3, r3
	}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200403c0 	.word	0x200403c0

080011a4 <_ZN3CarC1Ev>:
	Position p[20]; /*a filter buffer for positions*/
	uint8_t index; /*number of valid p's, 1-based indexing*/
	Position filtered_position;

public:
	Car() {
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
		for (int i = 0; i < 20; i++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	e00d      	b.n	80011ce <_ZN3CarC1Ev+0x2a>
			p[i].x = 0;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	2100      	movs	r1, #0
 80011b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			p[i].y = 0;
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
		for (int i = 0; i < 20; i++) {
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3301      	adds	r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b13      	cmp	r3, #19
 80011d2:	ddee      	ble.n	80011b2 <_ZN3CarC1Ev+0xe>
		}
	}
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <_ZN3Car14clear_positionEv>:

	//EFFECTS: clear the position filter buffer before processing next capture
	//MODIFIES: this->p, this->index
	void clear_position(){
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
		for (int i = 0; i < 20; i++) {
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	e00d      	b.n	800120c <_ZN3Car14clear_positionEv+0x2a>
			p[i].x = 0;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	2100      	movs	r1, #0
 80011f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			p[i].y = 0;
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4413      	add	r3, r2
 8001202:	2200      	movs	r2, #0
 8001204:	605a      	str	r2, [r3, #4]
		for (int i = 0; i < 20; i++) {
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3301      	adds	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b13      	cmp	r3, #19
 8001210:	ddee      	ble.n	80011f0 <_ZN3Car14clear_positionEv+0xe>
		}
		index = 0;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
	}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <_ZN3Car15update_positionEtt>:

	//EFFECT: add new position (x,y) to the position filter buffer, update index,
	//        and compute the filtered position.
	//MODIFIES: this->p, this->index. this->filtered_position
	void update_position(uint16_t x, uint16_t y){
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
 8001234:	4613      	mov	r3, r2
 8001236:	803b      	strh	r3, [r7, #0]
		if (index == 0) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d116      	bne.n	8001270 <_ZN3Car15update_positionEtt+0x48>
			filtered_position.x = x;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			filtered_position.y = y;
 800124a:	883a      	ldrh	r2, [r7, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
			p[0].x = x;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	601a      	str	r2, [r3, #0]
			p[0].y = y;
 8001258:	883a      	ldrh	r2, [r7, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	605a      	str	r2, [r3, #4]
			index++;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8001264:	3301      	adds	r3, #1
 8001266:	b2da      	uxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
			return;
 800126e:	e0c4      	b.n	80013fa <_ZN3Car15update_positionEtt+0x1d2>
		}

		// Check if within valid range
		bool valid = (x >= MIN_X && x <= MAX_X && y >= MIN_Y && y <= MAX_Y);
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	2b59      	cmp	r3, #89	@ 0x59
 8001274:	d90a      	bls.n	800128c <_ZN3Car15update_positionEtt+0x64>
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	2bf5      	cmp	r3, #245	@ 0xf5
 800127a:	d807      	bhi.n	800128c <_ZN3Car15update_positionEtt+0x64>
 800127c:	883b      	ldrh	r3, [r7, #0]
 800127e:	2b36      	cmp	r3, #54	@ 0x36
 8001280:	d904      	bls.n	800128c <_ZN3Car15update_positionEtt+0x64>
 8001282:	883b      	ldrh	r3, [r7, #0]
 8001284:	2bcd      	cmp	r3, #205	@ 0xcd
 8001286:	d801      	bhi.n	800128c <_ZN3Car15update_positionEtt+0x64>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <_ZN3Car15update_positionEtt+0x66>
 800128c:	2300      	movs	r3, #0
 800128e:	76fb      	strb	r3, [r7, #27]

		float alpha = 0.0f;
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
		if (valid) {
 8001296:	7efb      	ldrb	r3, [r7, #27]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d04f      	beq.n	800133c <_ZN3Car15update_positionEtt+0x114>
			float dx = x - filtered_position.x;
 800129c:	887a      	ldrh	r2, [r7, #2]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ae:	edc7 7a05 	vstr	s15, [r7, #20]
			float dy = y - filtered_position.y;
 80012b2:	883a      	ldrh	r2, [r7, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c4:	edc7 7a04 	vstr	s15, [r7, #16]
			float dist = sqrt(dx * dx + dy * dy);
 80012c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012dc:	ee17 0a90 	vmov	r0, s15
 80012e0:	f7ff f94a 	bl	8000578 <__aeabi_f2d>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	ec43 2b10 	vmov	d0, r2, r3
 80012ec:	f005 f86e 	bl	80063cc <sqrt>
 80012f0:	ec53 2b10 	vmov	r2, r3, d0
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fc8e 	bl	8000c18 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	60fb      	str	r3, [r7, #12]

			// Linearly inverse relation to distance (you can tweak max_dist)
			const float max_dist = 220.0f; // A chosen constant for normalization
 8001300:	4b3f      	ldr	r3, [pc, #252]	@ (8001400 <_ZN3Car15update_positionEtt+0x1d8>)
 8001302:	60bb      	str	r3, [r7, #8]
			alpha = (dist / max_dist < 1.0f) ? (1.0f - dist / max_dist) : (0.0f);
 8001304:	ed97 7a03 	vldr	s14, [r7, #12]
 8001308:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8001404 <_ZN3Car15update_positionEtt+0x1dc>
 800130c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001310:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131c:	d50a      	bpl.n	8001334 <_ZN3Car15update_positionEtt+0x10c>
 800131e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001322:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001404 <_ZN3Car15update_positionEtt+0x1dc>
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800132e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001332:	e001      	b.n	8001338 <_ZN3Car15update_positionEtt+0x110>
 8001334:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8001408 <_ZN3Car15update_positionEtt+0x1e0>
 8001338:	edc7 7a07 	vstr	s15, [r7, #28]
		}

		// Exponential smoothing
		filtered_position.x = static_cast<int>(filtered_position.x * (1 - alpha) + x * alpha);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800134e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001352:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001364:	edd7 7a07 	vldr	s15, [r7, #28]
 8001368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001374:	ee17 2a90 	vmov	r2, s15
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		filtered_position.y = static_cast<int>(filtered_position.y * (1 - alpha) + y * alpha);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800138c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001390:	edd7 7a07 	vldr	s15, [r7, #28]
 8001394:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800139c:	883b      	ldrh	r3, [r7, #0]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b6:	ee17 2a90 	vmov	r2, s15
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

		// Add to buffer (circular if needed)
		if (index < 20) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80013c6:	2b13      	cmp	r3, #19
 80013c8:	d817      	bhi.n	80013fa <_ZN3Car15update_positionEtt+0x1d2>
			p[index].x = x;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80013d0:	4619      	mov	r1, r3
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
			p[index].y = y;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80013e0:	883a      	ldrh	r2, [r7, #0]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	440b      	add	r3, r1
 80013e8:	605a      	str	r2, [r3, #4]
			index++;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80013f0:	3301      	adds	r3, #1
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
		} else {
			// Optional: overwrite oldest if full, or just ignore
		}
	}
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	435c0000 	.word	0x435c0000
 8001404:	435c0000 	.word	0x435c0000
 8001408:	00000000 	.word	0x00000000

0800140c <_ZNK3Car12get_positionEv>:

	Position get_position() const {
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
		return filtered_position;
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	33a4      	adds	r3, #164	@ 0xa4
 800141c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001420:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN10Playground4initEv>:
	uint8_t num_occupied;

public:

	//EFFECTS: read in the position of each spot and set all is_available, is_occupied to 0
	void init() {
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
		for (int i = 0; i < NUM_LEDS; i++) {
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	e017      	b.n	800146e <_ZN10Playground4initEv+0x3e>
			parking_spots[i].x = x_centers[i];
 800143e:	4a11      	ldr	r2, [pc, #68]	@ (8001484 <_ZN10Playground4initEv+0x54>)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001446:	4619      	mov	r1, r3
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4413      	add	r3, r2
 8001450:	6019      	str	r1, [r3, #0]
			parking_spots[i].y = y_centers[i];
 8001452:	4a0d      	ldr	r2, [pc, #52]	@ (8001488 <_ZN10Playground4initEv+0x58>)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800145a:	4619      	mov	r1, r3
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	3304      	adds	r3, #4
 8001466:	6019      	str	r1, [r3, #0]
		for (int i = 0; i < NUM_LEDS; i++) {
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b23      	cmp	r3, #35	@ 0x23
 8001472:	dde4      	ble.n	800143e <_ZN10Playground4initEv+0xe>
		for (int i = 0; i < NUM_DECORATION_LEDS; i++){
			set_led(i, 255, 255, 255, 30);
		}
		APA102_SendFrame();
		*/
	}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20040000 	.word	0x20040000
 8001488:	20040048 	.word	0x20040048

0800148c <_ZN10Playground11start_videoEv>:

	void start_video(){
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b08b      	sub	sp, #44	@ 0x2c
 8001490:	af02      	add	r7, sp, #8
 8001492:	6078      	str	r0, [r7, #4]
		uint8_t red[3] = {0, 10, 14};
 8001494:	4a51      	ldr	r2, [pc, #324]	@ (80015dc <_ZN10Playground11start_videoEv+0x150>)
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	4611      	mov	r1, r2
 800149e:	8019      	strh	r1, [r3, #0]
 80014a0:	3302      	adds	r3, #2
 80014a2:	0c12      	lsrs	r2, r2, #16
 80014a4:	701a      	strb	r2, [r3, #0]
		uint8_t blue[3] = {5, 7, 15};
 80014a6:	4a4e      	ldr	r2, [pc, #312]	@ (80015e0 <_ZN10Playground11start_videoEv+0x154>)
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	4611      	mov	r1, r2
 80014b0:	8019      	strh	r1, [r3, #0]
 80014b2:	3302      	adds	r3, #2
 80014b4:	0c12      	lsrs	r2, r2, #16
 80014b6:	701a      	strb	r2, [r3, #0]
		uint8_t green[3] = {30, 28, 20};
 80014b8:	4a4a      	ldr	r2, [pc, #296]	@ (80015e4 <_ZN10Playground11start_videoEv+0x158>)
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	4611      	mov	r1, r2
 80014c2:	8019      	strh	r1, [r3, #0]
 80014c4:	3302      	adds	r3, #2
 80014c6:	0c12      	lsrs	r2, r2, #16
 80014c8:	701a      	strb	r2, [r3, #0]
		uint8_t yellow[3] = {35, 25, 21};
 80014ca:	4a47      	ldr	r2, [pc, #284]	@ (80015e8 <_ZN10Playground11start_videoEv+0x15c>)
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	4611      	mov	r1, r2
 80014d4:	8019      	strh	r1, [r3, #0]
 80014d6:	3302      	adds	r3, #2
 80014d8:	0c12      	lsrs	r2, r2, #16
 80014da:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 3; i++){
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	e064      	b.n	80015ac <_ZN10Playground11start_videoEv+0x120>
			set_led(red[i], color[0][0], color[0][1], color[0][2], 15);
 80014e2:	f107 0214 	add.w	r2, r7, #20
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461c      	mov	r4, r3
 80014ee:	4b3f      	ldr	r3, [pc, #252]	@ (80015ec <_ZN10Playground11start_videoEv+0x160>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b3d      	ldr	r3, [pc, #244]	@ (80015ec <_ZN10Playground11start_videoEv+0x160>)
 80014f6:	885b      	ldrh	r3, [r3, #2]
 80014f8:	b2d9      	uxtb	r1, r3
 80014fa:	4b3c      	ldr	r3, [pc, #240]	@ (80015ec <_ZN10Playground11start_videoEv+0x160>)
 80014fc:	889b      	ldrh	r3, [r3, #4]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	200f      	movs	r0, #15
 8001502:	9001      	str	r0, [sp, #4]
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	460b      	mov	r3, r1
 8001508:	4621      	mov	r1, r4
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 fa54 	bl	80019b8 <_ZN10Playground7set_ledEihhhh>
			set_led(blue[i], color[1][0], color[1][1], color[1][2], 15);
 8001510:	f107 0210 	add.w	r2, r7, #16
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461c      	mov	r4, r3
 800151c:	4b33      	ldr	r3, [pc, #204]	@ (80015ec <_ZN10Playground11start_videoEv+0x160>)
 800151e:	88db      	ldrh	r3, [r3, #6]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b32      	ldr	r3, [pc, #200]	@ (80015ec <_ZN10Playground11start_videoEv+0x160>)
 8001524:	891b      	ldrh	r3, [r3, #8]
 8001526:	b2d9      	uxtb	r1, r3
 8001528:	4b30      	ldr	r3, [pc, #192]	@ (80015ec <_ZN10Playground11start_videoEv+0x160>)
 800152a:	895b      	ldrh	r3, [r3, #10]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	200f      	movs	r0, #15
 8001530:	9001      	str	r0, [sp, #4]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	460b      	mov	r3, r1
 8001536:	4621      	mov	r1, r4
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 fa3d 	bl	80019b8 <_ZN10Playground7set_ledEihhhh>
			set_led(green[i], color[2][0], color[2][1], color[2][2], 15);
 800153e:	f107 020c 	add.w	r2, r7, #12
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	4413      	add	r3, r2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461c      	mov	r4, r3
 800154a:	4b28      	ldr	r3, [pc, #160]	@ (80015ec <_ZN10Playground11start_videoEv+0x160>)
 800154c:	899b      	ldrh	r3, [r3, #12]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b26      	ldr	r3, [pc, #152]	@ (80015ec <_ZN10Playground11start_videoEv+0x160>)
 8001552:	89db      	ldrh	r3, [r3, #14]
 8001554:	b2d9      	uxtb	r1, r3
 8001556:	4b25      	ldr	r3, [pc, #148]	@ (80015ec <_ZN10Playground11start_videoEv+0x160>)
 8001558:	8a1b      	ldrh	r3, [r3, #16]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	200f      	movs	r0, #15
 800155e:	9001      	str	r0, [sp, #4]
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	460b      	mov	r3, r1
 8001564:	4621      	mov	r1, r4
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 fa26 	bl	80019b8 <_ZN10Playground7set_ledEihhhh>
			set_led(yellow[i], color[3][0], color[3][1], color[3][2], 15);
 800156c:	f107 0208 	add.w	r2, r7, #8
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	4413      	add	r3, r2
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461c      	mov	r4, r3
 8001578:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <_ZN10Playground11start_videoEv+0x160>)
 800157a:	8a5b      	ldrh	r3, [r3, #18]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <_ZN10Playground11start_videoEv+0x160>)
 8001580:	8a9b      	ldrh	r3, [r3, #20]
 8001582:	b2d9      	uxtb	r1, r3
 8001584:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <_ZN10Playground11start_videoEv+0x160>)
 8001586:	8adb      	ldrh	r3, [r3, #22]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	200f      	movs	r0, #15
 800158c:	9001      	str	r0, [sp, #4]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	460b      	mov	r3, r1
 8001592:	4621      	mov	r1, r4
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 fa0f 	bl	80019b8 <_ZN10Playground7set_ledEihhhh>
			APA102_SendFrame();
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f9ba 	bl	8001914 <_ZN10Playground16APA102_SendFrameEv>
			HAL_Delay(200);
 80015a0:	20c8      	movs	r0, #200	@ 0xc8
 80015a2:	f001 fc3f 	bl	8002e24 <HAL_Delay>
		for (int i = 0; i < 3; i++){
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3301      	adds	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	dd97      	ble.n	80014e2 <_ZN10Playground11start_videoEv+0x56>
		}
		for (int i = 0; i < NUM_CARS; i++){
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
 80015b6:	e008      	b.n	80015ca <_ZN10Playground11start_videoEv+0x13e>
			scores[i] = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	32b4      	adds	r2, #180	@ 0xb4
 80015be:	2100      	movs	r1, #0
 80015c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int i = 0; i < NUM_CARS; i++){
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	3301      	adds	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	ddf3      	ble.n	80015b8 <_ZN10Playground11start_videoEv+0x12c>
		}
		//clear_leds();
		//APA102_SendFrame();
	}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3724      	adds	r7, #36	@ 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}
 80015da:	bf00      	nop
 80015dc:	0800adc0 	.word	0x0800adc0
 80015e0:	0800adc4 	.word	0x0800adc4
 80015e4:	0800adc8 	.word	0x0800adc8
 80015e8:	0800adcc 	.word	0x0800adcc
 80015ec:	20040090 	.word	0x20040090

080015f0 <_ZN10Playground5clearEv>:

	void clear(){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
		for (int i = 0; i < NUM_LEDS; i++){
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e01c      	b.n	8001638 <_ZN10Playground5clearEv+0x48>
			parking_spots[i].is_available = 0;
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	4413      	add	r3, r2
 8001606:	3308      	adds	r3, #8
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
			parking_spots[i].is_occupied = 0;
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	4413      	add	r3, r2
 8001614:	3309      	adds	r3, #9
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
			parking_spots[i].occupied_by = -1;
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	4413      	add	r3, r2
 8001622:	330c      	adds	r3, #12
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	601a      	str	r2, [r3, #0]
			num_occupied = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
		for (int i = 0; i < NUM_LEDS; i++){
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3301      	adds	r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b23      	cmp	r3, #35	@ 0x23
 800163c:	dddf      	ble.n	80015fe <_ZN10Playground5clearEv+0xe>
		}
		clear_leds();
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f9ec 	bl	8001a1c <_ZN10Playground10clear_ledsEv>
		APA102_SendFrame();
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f965 	bl	8001914 <_ZN10Playground16APA102_SendFrameEv>
	}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <_ZN10Playground21generate_random_spotsEh>:

	//EFFECTS: randomly generates num spots where the spots are marked as is_available
	//MODIFIES: parking_spots.is_available
	void generate_random_spots(uint8_t num) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af02      	add	r7, sp, #8
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
		uint8_t count = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
		srand(HAL_GetTick());
 8001664:	f001 fbd2 	bl	8002e0c <HAL_GetTick>
 8001668:	4603      	mov	r3, r0
 800166a:	4618      	mov	r0, r3
 800166c:	f005 f86e 	bl	800674c <srand>
		while (count < num){
 8001670:	e033      	b.n	80016da <_ZN10Playground21generate_random_spotsEh+0x86>
			uint8_t retval = rand() % NUM_LEDS;
 8001672:	f005 f899 	bl	80067a8 <rand>
 8001676:	4602      	mov	r2, r0
 8001678:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <_ZN10Playground21generate_random_spotsEh+0x9c>)
 800167a:	fb83 1302 	smull	r1, r3, r3, r2
 800167e:	10d9      	asrs	r1, r3, #3
 8001680:	17d3      	asrs	r3, r2, #31
 8001682:	1ac9      	subs	r1, r1, r3
 8001684:	460b      	mov	r3, r1
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	440b      	add	r3, r1
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	1ad1      	subs	r1, r2, r3
 800168e:	460b      	mov	r3, r1
 8001690:	73bb      	strb	r3, [r7, #14]
			printf("Random Number Generated: %d\r\n", retval);
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	4619      	mov	r1, r3
 8001696:	4817      	ldr	r0, [pc, #92]	@ (80016f4 <_ZN10Playground21generate_random_spotsEh+0xa0>)
 8001698:	f005 ffea 	bl	8007670 <iprintf>
			if (!parking_spots[retval].is_available){
 800169c:	7bbb      	ldrb	r3, [r7, #14]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	3308      	adds	r3, #8
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	f083 0301 	eor.w	r3, r3, #1
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d013      	beq.n	80016da <_ZN10Playground21generate_random_spotsEh+0x86>
				parking_spots[retval].is_available = true;
 80016b2:	7bbb      	ldrb	r3, [r7, #14]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	4413      	add	r3, r2
 80016ba:	3308      	adds	r3, #8
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]

				set_led(retval, 255, 255, 255, 15);
 80016c0:	7bb9      	ldrb	r1, [r7, #14]
 80016c2:	230f      	movs	r3, #15
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	23ff      	movs	r3, #255	@ 0xff
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	23ff      	movs	r3, #255	@ 0xff
 80016cc:	22ff      	movs	r2, #255	@ 0xff
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f972 	bl	80019b8 <_ZN10Playground7set_ledEihhhh>
				count ++;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	3301      	adds	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
		while (count < num){
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d3c7      	bcc.n	8001672 <_ZN10Playground21generate_random_spotsEh+0x1e>
			}
		}
		APA102_SendFrame();
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f916 	bl	8001914 <_ZN10Playground16APA102_SendFrameEv>
	}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	38e38e39 	.word	0x38e38e39
 80016f4:	0800add0 	.word	0x0800add0

080016f8 <_ZN10Playground15check_occupencyEhRK8Position>:

	//EFFECTS: check if spot_id is occupied by a car
	bool check_occupency(uint8_t spot_id, const Position & pos) {
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	460b      	mov	r3, r1
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	72fb      	strb	r3, [r7, #11]
		if (parking_spots[spot_id].is_available
 8001706:	7afb      	ldrb	r3, [r7, #11]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	4413      	add	r3, r2
 800170e:	3308      	adds	r3, #8
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d036      	beq.n	8001784 <_ZN10Playground15check_occupencyEhRK8Position+0x8c>
				&& (!parking_spots[spot_id].is_occupied)) {
 8001716:	7afb      	ldrb	r3, [r7, #11]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	4413      	add	r3, r2
 800171e:	3309      	adds	r3, #9
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	f083 0301 	eor.w	r3, r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d02b      	beq.n	8001784 <_ZN10Playground15check_occupencyEhRK8Position+0x8c>
			if (pos.x - parking_spots[spot_id].x < TOLERANCE
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	7afb      	ldrb	r3, [r7, #11]
 8001732:	68f9      	ldr	r1, [r7, #12]
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	440b      	add	r3, r1
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b0e      	cmp	r3, #14
 800173e:	dc21      	bgt.n	8001784 <_ZN10Playground15check_occupencyEhRK8Position+0x8c>
					&& parking_spots[spot_id].x - pos.x < TOLERANCE
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	4413      	add	r3, r2
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b0e      	cmp	r3, #14
 8001752:	dc17      	bgt.n	8001784 <_ZN10Playground15check_occupencyEhRK8Position+0x8c>
					&& pos.y - parking_spots[spot_id].y < TOLERANCE
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	7afb      	ldrb	r3, [r7, #11]
 800175a:	68f9      	ldr	r1, [r7, #12]
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	440b      	add	r3, r1
 8001760:	3304      	adds	r3, #4
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b0e      	cmp	r3, #14
 8001768:	dc0c      	bgt.n	8001784 <_ZN10Playground15check_occupencyEhRK8Position+0x8c>
					&& parking_spots[spot_id].y - pos.y < TOLERANCE) {
 800176a:	7afb      	ldrb	r3, [r7, #11]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	4413      	add	r3, r2
 8001772:	3304      	adds	r3, #4
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b0e      	cmp	r3, #14
 800177e:	dc01      	bgt.n	8001784 <_ZN10Playground15check_occupencyEhRK8Position+0x8c>
				return 1;
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <_ZN10Playground15check_occupencyEhRK8Position+0x8e>
			}
		}
		return 0;
 8001784:	2300      	movs	r3, #0
	}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <_ZN10Playground6occupyEhh>:

	//EEFECTS: car_id occupies spot_id, change the LED color
	//MODIFIES: parking_spots.is_occupied
	void occupy(uint8_t spot_id, uint8_t car_id){
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af02      	add	r7, sp, #8
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
 80017a0:	4613      	mov	r3, r2
 80017a2:	70bb      	strb	r3, [r7, #2]
		parking_spots[spot_id].is_occupied = 1;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	3309      	adds	r3, #9
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
		parking_spots[spot_id].occupied_by = car_id;
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	78ba      	ldrb	r2, [r7, #2]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	440b      	add	r3, r1
 80017bc:	330c      	adds	r3, #12
 80017be:	601a      	str	r2, [r3, #0]

		set_led(spot_id, color[car_id][0], color[car_id][1],  color[car_id][2], 15);
 80017c0:	78f9      	ldrb	r1, [r7, #3]
 80017c2:	78ba      	ldrb	r2, [r7, #2]
 80017c4:	481e      	ldr	r0, [pc, #120]	@ (8001840 <_ZN10Playground6occupyEhh+0xac>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4403      	add	r3, r0
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	b2d8      	uxtb	r0, r3
 80017d4:	78ba      	ldrb	r2, [r7, #2]
 80017d6:	4c1a      	ldr	r4, [pc, #104]	@ (8001840 <_ZN10Playground6occupyEhh+0xac>)
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4423      	add	r3, r4
 80017e2:	3302      	adds	r3, #2
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	b2dc      	uxtb	r4, r3
 80017e8:	78ba      	ldrb	r2, [r7, #2]
 80017ea:	4d15      	ldr	r5, [pc, #84]	@ (8001840 <_ZN10Playground6occupyEhh+0xac>)
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	442b      	add	r3, r5
 80017f6:	3304      	adds	r3, #4
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	220f      	movs	r2, #15
 80017fe:	9201      	str	r2, [sp, #4]
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	4623      	mov	r3, r4
 8001804:	4602      	mov	r2, r0
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f8d6 	bl	80019b8 <_ZN10Playground7set_ledEihhhh>
		APA102_SendFrame();
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f881 	bl	8001914 <_ZN10Playground16APA102_SendFrameEv>

		scores[car_id]++;
 8001812:	78bb      	ldrb	r3, [r7, #2]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	f103 01b4 	add.w	r1, r3, #180	@ 0xb4
 800181a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800181e:	1c51      	adds	r1, r2, #1
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	33b4      	adds	r3, #180	@ 0xb4
 8001824:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		num_occupied++;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 800182e:	3301      	adds	r3, #1
 8001830:	b2da      	uxtb	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
	}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bdb0      	pop	{r4, r5, r7, pc}
 8001840:	20040090 	.word	0x20040090

08001844 <_ZN10Playground15is_all_occupiedEv>:

	bool is_all_occupied() {
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
		return num_occupied == NUM_SPOTS;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 32e0 	ldrb.w	r3, [r3, #736]	@ 0x2e0
 8001852:	2b0a      	cmp	r3, #10
 8001854:	bf0c      	ite	eq
 8001856:	2301      	moveq	r3, #1
 8001858:	2300      	movne	r3, #0
 800185a:	b2db      	uxtb	r3, r3
	}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_ZN10Playground14display_resultEv>:

	void display_result(){
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af02      	add	r7, sp, #8
 800186e:	6078      	str	r0, [r7, #4]
		uint8_t max = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < NUM_CARS; i++){
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	e010      	b.n	800189c <_ZN10Playground14display_resultEv+0x34>
			if(scores[max]<scores[i]) max = i;
 800187a:	7dfa      	ldrb	r2, [r7, #23]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	32b4      	adds	r2, #180	@ 0xb4
 8001880:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6939      	ldr	r1, [r7, #16]
 8001888:	31b4      	adds	r1, #180	@ 0xb4
 800188a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800188e:	429a      	cmp	r2, r3
 8001890:	da01      	bge.n	8001896 <_ZN10Playground14display_resultEv+0x2e>
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < NUM_CARS; i++){
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	3301      	adds	r3, #1
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	ddeb      	ble.n	800187a <_ZN10Playground14display_resultEv+0x12>
		}
		for(int i = 0 ; i < NUM_LEDS ; i++){
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	e02b      	b.n	8001900 <_ZN10Playground14display_resultEv+0x98>
			set_led(i, color[max][0], color[max][1],  color[max][2], 15);
 80018a8:	7dfa      	ldrb	r2, [r7, #23]
 80018aa:	4919      	ldr	r1, [pc, #100]	@ (8001910 <_ZN10Playground14display_resultEv+0xa8>)
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	440b      	add	r3, r1
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	b2d9      	uxtb	r1, r3
 80018ba:	7dfa      	ldrb	r2, [r7, #23]
 80018bc:	4814      	ldr	r0, [pc, #80]	@ (8001910 <_ZN10Playground14display_resultEv+0xa8>)
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4403      	add	r3, r0
 80018c8:	3302      	adds	r3, #2
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	b2d8      	uxtb	r0, r3
 80018ce:	7dfa      	ldrb	r2, [r7, #23]
 80018d0:	4c0f      	ldr	r4, [pc, #60]	@ (8001910 <_ZN10Playground14display_resultEv+0xa8>)
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4423      	add	r3, r4
 80018dc:	3304      	adds	r3, #4
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	220f      	movs	r2, #15
 80018e4:	9201      	str	r2, [sp, #4]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	4603      	mov	r3, r0
 80018ea:	460a      	mov	r2, r1
 80018ec:	68f9      	ldr	r1, [r7, #12]
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f862 	bl	80019b8 <_ZN10Playground7set_ledEihhhh>
			APA102_SendFrame();
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 f80d 	bl	8001914 <_ZN10Playground16APA102_SendFrameEv>
		for(int i = 0 ; i < NUM_LEDS ; i++){
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3301      	adds	r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b23      	cmp	r3, #35	@ 0x23
 8001904:	ddd0      	ble.n	80018a8 <_ZN10Playground14display_resultEv+0x40>
		}
	}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd90      	pop	{r4, r7, pc}
 8001910:	20040090 	.word	0x20040090

08001914 <_ZN10Playground16APA102_SendFrameEv>:
private:
	void APA102_SendFrame() {
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
		uint8_t startFrame[4] = { 0x00, 0x00, 0x00, 0x00 };
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
		HAL_SPI_Transmit(&hspi1, startFrame, 4, HAL_MAX_DELAY);
 8001920:	f107 0110 	add.w	r1, r7, #16
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
 8001928:	2204      	movs	r2, #4
 800192a:	4822      	ldr	r0, [pc, #136]	@ (80019b4 <_ZN10Playground16APA102_SendFrameEv+0xa0>)
 800192c:	f003 faad 	bl	8004e8a <HAL_SPI_Transmit>

		for (int i = 0; i < NUM_LEDS; i++) {
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e028      	b.n	8001988 <_ZN10Playground16APA102_SendFrameEv+0x74>
			uint8_t frame[4];
			frame[0] = 0b11100000 | (leds[i].brightness & 0x1F); // Brightness frame
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3390      	adds	r3, #144	@ 0x90
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	78db      	ldrb	r3, [r3, #3]
 8001942:	f063 031f 	orn	r3, r3, #31
 8001946:	b2db      	uxtb	r3, r3
 8001948:	723b      	strb	r3, [r7, #8]
			frame[1] = leds[i].blue;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	3290      	adds	r2, #144	@ 0x90
 8001950:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001954:	727b      	strb	r3, [r7, #9]
			frame[2] = leds[i].green;
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3390      	adds	r3, #144	@ 0x90
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	785b      	ldrb	r3, [r3, #1]
 8001962:	72bb      	strb	r3, [r7, #10]
			frame[3] = leds[i].red;
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3390      	adds	r3, #144	@ 0x90
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	789b      	ldrb	r3, [r3, #2]
 8001970:	72fb      	strb	r3, [r7, #11]
			HAL_SPI_Transmit(&hspi1, frame, 4, HAL_MAX_DELAY);
 8001972:	f107 0108 	add.w	r1, r7, #8
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	2204      	movs	r2, #4
 800197c:	480d      	ldr	r0, [pc, #52]	@ (80019b4 <_ZN10Playground16APA102_SendFrameEv+0xa0>)
 800197e:	f003 fa84 	bl	8004e8a <HAL_SPI_Transmit>
		for (int i = 0; i < NUM_LEDS; i++) {
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b23      	cmp	r3, #35	@ 0x23
 800198c:	ddd3      	ble.n	8001936 <_ZN10Playground16APA102_SendFrameEv+0x22>
		}

		uint8_t endFrame[(NUM_LEDS / 16) + 1];
		memset(endFrame, 0xFF, sizeof(endFrame));
 800198e:	f107 030c 	add.w	r3, r7, #12
 8001992:	2203      	movs	r2, #3
 8001994:	21ff      	movs	r1, #255	@ 0xff
 8001996:	4618      	mov	r0, r3
 8001998:	f005 fee1 	bl	800775e <memset>
		HAL_SPI_Transmit(&hspi1, endFrame, sizeof(endFrame), HAL_MAX_DELAY);
 800199c:	f107 010c 	add.w	r1, r7, #12
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	2203      	movs	r2, #3
 80019a6:	4803      	ldr	r0, [pc, #12]	@ (80019b4 <_ZN10Playground16APA102_SendFrameEv+0xa0>)
 80019a8:	f003 fa6f 	bl	8004e8a <HAL_SPI_Transmit>
	}
 80019ac:	bf00      	nop
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20040454 	.word	0x20040454

080019b8 <_ZN10Playground7set_ledEihhhh>:

	void set_led(int index, uint8_t r, uint8_t g, uint8_t b, uint8_t brightness) {
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	4611      	mov	r1, r2
 80019c4:	461a      	mov	r2, r3
 80019c6:	460b      	mov	r3, r1
 80019c8:	71fb      	strb	r3, [r7, #7]
 80019ca:	4613      	mov	r3, r2
 80019cc:	71bb      	strb	r3, [r7, #6]
		if (index >= 0 && index < NUM_LEDS) {
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db1d      	blt.n	8001a10 <_ZN10Playground7set_ledEihhhh+0x58>
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b23      	cmp	r3, #35	@ 0x23
 80019d8:	dc1a      	bgt.n	8001a10 <_ZN10Playground7set_ledEihhhh+0x58>
			leds[index].red = r;
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	3390      	adds	r3, #144	@ 0x90
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	79fa      	ldrb	r2, [r7, #7]
 80019e6:	709a      	strb	r2, [r3, #2]
			leds[index].green = g;
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	3390      	adds	r3, #144	@ 0x90
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	79ba      	ldrb	r2, [r7, #6]
 80019f4:	705a      	strb	r2, [r3, #1]
			leds[index].blue = b;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	3290      	adds	r2, #144	@ 0x90
 80019fc:	7e39      	ldrb	r1, [r7, #24]
 80019fe:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			leds[index].brightness = brightness;
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	3390      	adds	r3, #144	@ 0x90
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	7f3a      	ldrb	r2, [r7, #28]
 8001a0e:	70da      	strb	r2, [r3, #3]
		}
	}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_ZN10Playground10clear_ledsEv>:

	void clear_leds() {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	6078      	str	r0, [r7, #4]
		for (int i = 0; i < NUM_LEDS; i++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	e00c      	b.n	8001a44 <_ZN10Playground10clear_ledsEv+0x28>
			set_led(i, 0, 0, 0, 0);  // Off
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	2200      	movs	r2, #0
 8001a36:	68f9      	ldr	r1, [r7, #12]
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ffbd 	bl	80019b8 <_ZN10Playground7set_ledEihhhh>
		for (int i = 0; i < NUM_LEDS; i++) {
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3301      	adds	r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b23      	cmp	r3, #35	@ 0x23
 8001a48:	ddef      	ble.n	8001a2a <_ZN10Playground10clear_ledsEv+0xe>
		}
	}
 8001a4a:	bf00      	nop
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b08b      	sub	sp, #44	@ 0x2c
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5a:	f001 f96e 	bl	8002d3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a5e:	f000 f923 	bl	8001ca8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a62:	f000 fb1b 	bl	800209c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001a66:	f000 f9d5 	bl	8001e14 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8001a6a:	f000 fa93 	bl	8001f94 <_ZL12MX_SPI1_Initv>
  MX_USART3_UART_Init();
 8001a6e:	f000 fa31 	bl	8001ed4 <_ZL19MX_USART3_UART_Initv>
  MX_LPUART1_UART_Init();
 8001a72:	f000 f96f 	bl	8001d54 <_ZL20MX_LPUART1_UART_Initv>
  MX_SPI2_Init();
 8001a76:	f000 facf 	bl	8002018 <_ZL12MX_SPI2_Initv>
  /* USER CODE BEGIN 2 */
	DWT_Init();
 8001a7a:	f000 fbe3 	bl	8002244 <_Z8DWT_Initv>

	playground.init();
 8001a7e:	4882      	ldr	r0, [pc, #520]	@ (8001c88 <main+0x234>)
 8001a80:	f7ff fcd6 	bl	8001430 <_ZN10Playground4initEv>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch (game_state) {
 8001a84:	4b81      	ldr	r3, [pc, #516]	@ (8001c8c <main+0x238>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	f200 80f9 	bhi.w	8001c80 <main+0x22c>
 8001a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a94 <main+0x40>)
 8001a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a94:	08001aa5 	.word	0x08001aa5
 8001a98:	08001ad7 	.word	0x08001ad7
 8001a9c:	08001af7 	.word	0x08001af7
 8001aa0:	08001c45 	.word	0x08001c45
			case INIT:{
				/* Start a new round when the blue button is pressed */
				if (is_button_pressed()) {
 8001aa4:	f000 fbe8 	bl	8002278 <_Z17is_button_pressedv>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <main+0x62>
					game_state = START_RUN;
 8001aae:	4b77      	ldr	r3, [pc, #476]	@ (8001c8c <main+0x238>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	e002      	b.n	8001abc <main+0x68>
				} else {
					game_state = INIT;
 8001ab6:	4b75      	ldr	r3, [pc, #468]	@ (8001c8c <main+0x238>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
				}
				playground.clear();
 8001abc:	4872      	ldr	r0, [pc, #456]	@ (8001c88 <main+0x234>)
 8001abe:	f7ff fd97 	bl	80015f0 <_ZN10Playground5clearEv>
				HAL_Delay(200);
 8001ac2:	20c8      	movs	r0, #200	@ 0xc8
 8001ac4:	f001 f9ae 	bl	8002e24 <HAL_Delay>
				playground.start_video();
 8001ac8:	486f      	ldr	r0, [pc, #444]	@ (8001c88 <main+0x234>)
 8001aca:	f7ff fcdf 	bl	800148c <_ZN10Playground11start_videoEv>
				num_run = 0;
 8001ace:	4b70      	ldr	r3, [pc, #448]	@ (8001c90 <main+0x23c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

				break;
 8001ad4:	e0d7      	b.n	8001c86 <main+0x232>
			}
			case START_RUN: {
				/* Randomly choose 10 lights to light up */
				playground.clear();
 8001ad6:	486c      	ldr	r0, [pc, #432]	@ (8001c88 <main+0x234>)
 8001ad8:	f7ff fd8a 	bl	80015f0 <_ZN10Playground5clearEv>
				playground.generate_random_spots(NUM_SPOTS);
 8001adc:	210a      	movs	r1, #10
 8001ade:	486a      	ldr	r0, [pc, #424]	@ (8001c88 <main+0x234>)
 8001ae0:	f7ff fdb8 	bl	8001654 <_ZN10Playground21generate_random_spotsEh>
				game_state = IN_RUN;
 8001ae4:	4b69      	ldr	r3, [pc, #420]	@ (8001c8c <main+0x238>)
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	701a      	strb	r2, [r3, #0]
				run_start_time = HAL_GetTick();
 8001aea:	f001 f98f 	bl	8002e0c <HAL_GetTick>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4a68      	ldr	r2, [pc, #416]	@ (8001c94 <main+0x240>)
 8001af2:	6013      	str	r3, [r2, #0]
				break;
 8001af4:	e0c7      	b.n	8001c86 <main+0x232>
			}
			case IN_RUN: {
				/* Capture the position from PixyCam */
				pixy.ccc.getBlocks();
 8001af6:	23ff      	movs	r3, #255	@ 0xff
 8001af8:	22ff      	movs	r2, #255	@ 0xff
 8001afa:	2101      	movs	r1, #1
 8001afc:	4866      	ldr	r0, [pc, #408]	@ (8001c98 <main+0x244>)
 8001afe:	f000 fc31 	bl	8002364 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh>

				/* Update each car's position */
				for (int i = 0; i < NUM_CARS; i++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b06:	e00b      	b.n	8001b20 <main+0xcc>
					car_arry[i].clear_position();
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	22ac      	movs	r2, #172	@ 0xac
 8001b0c:	fb02 f303 	mul.w	r3, r2, r3
 8001b10:	4a62      	ldr	r2, [pc, #392]	@ (8001c9c <main+0x248>)
 8001b12:	4413      	add	r3, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fb64 	bl	80011e2 <_ZN3Car14clear_positionEv>
				for (int i = 0; i < NUM_CARS; i++)
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	ddf0      	ble.n	8001b08 <main+0xb4>

				uint8_t num_blocks = pixy.ccc.numBlocks;
 8001b26:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca0 <main+0x24c>)
 8001b28:	7a1b      	ldrb	r3, [r3, #8]
 8001b2a:	75fb      	strb	r3, [r7, #23]
				if (num_blocks) {
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d06b      	beq.n	8001c0a <main+0x1b6>
					for (int i = 0; i < num_blocks; i++) {
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
 8001b36:	e032      	b.n	8001b9e <main+0x14a>

						uint16_t sig = pixy.ccc.blocks[i].m_signature;
 8001b38:	4b59      	ldr	r3, [pc, #356]	@ (8001ca0 <main+0x24c>)
 8001b3a:	68d9      	ldr	r1, [r3, #12]
 8001b3c:	6a3a      	ldr	r2, [r7, #32]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	1a9b      	subs	r3, r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	440b      	add	r3, r1
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	81fb      	strh	r3, [r7, #14]
						uint16_t x = pixy.ccc.blocks[i].m_x;
 8001b4c:	4b54      	ldr	r3, [pc, #336]	@ (8001ca0 <main+0x24c>)
 8001b4e:	68d9      	ldr	r1, [r3, #12]
 8001b50:	6a3a      	ldr	r2, [r7, #32]
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	1a9b      	subs	r3, r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	440b      	add	r3, r1
 8001b5c:	885b      	ldrh	r3, [r3, #2]
 8001b5e:	81bb      	strh	r3, [r7, #12]
						uint16_t y = pixy.ccc.blocks[i].m_y;
 8001b60:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca0 <main+0x24c>)
 8001b62:	68d9      	ldr	r1, [r3, #12]
 8001b64:	6a3a      	ldr	r2, [r7, #32]
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	440b      	add	r3, r1
 8001b70:	889b      	ldrh	r3, [r3, #4]
 8001b72:	817b      	strh	r3, [r7, #10]
						printf("Detected Block: sig: %d, x: %d, y:%d.\r\n",sig,x,y);
 8001b74:	89f9      	ldrh	r1, [r7, #14]
 8001b76:	89ba      	ldrh	r2, [r7, #12]
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	484a      	ldr	r0, [pc, #296]	@ (8001ca4 <main+0x250>)
 8001b7c:	f005 fd78 	bl	8007670 <iprintf>
						car_arry[sig - 1].update_position(x, y);
 8001b80:	89fb      	ldrh	r3, [r7, #14]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	22ac      	movs	r2, #172	@ 0xac
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	4a44      	ldr	r2, [pc, #272]	@ (8001c9c <main+0x248>)
 8001b8c:	4413      	add	r3, r2
 8001b8e:	897a      	ldrh	r2, [r7, #10]
 8001b90:	89b9      	ldrh	r1, [r7, #12]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fb48 	bl	8001228 <_ZN3Car15update_positionEtt>
					for (int i = 0; i < num_blocks; i++) {
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	623b      	str	r3, [r7, #32]
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ba0:	6a3a      	ldr	r2, [r7, #32]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dbc8      	blt.n	8001b38 <main+0xe4>
					}

					/* Check occupancies for each spot */
					for (int i = 0; i < NUM_LEDS; i++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	e02b      	b.n	8001c04 <main+0x1b0>
						for (int j = 0; j < NUM_CARS; j++) {
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	e022      	b.n	8001bf8 <main+0x1a4>
							int is_occupied = playground.check_occupency(i, car_arry[j].get_position());
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	b2dc      	uxtb	r4, r3
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	22ac      	movs	r2, #172	@ 0xac
 8001bba:	fb02 f303 	mul.w	r3, r2, r3
 8001bbe:	4a37      	ldr	r2, [pc, #220]	@ (8001c9c <main+0x248>)
 8001bc0:	441a      	add	r2, r3
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fc20 	bl	800140c <_ZNK3Car12get_positionEv>
 8001bcc:	463b      	mov	r3, r7
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	482d      	ldr	r0, [pc, #180]	@ (8001c88 <main+0x234>)
 8001bd4:	f7ff fd90 	bl	80016f8 <_ZN10Playground15check_occupencyEhRK8Position>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	613b      	str	r3, [r7, #16]
							if (is_occupied)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <main+0x19e>
								playground.occupy(i, j);
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	4826      	ldr	r0, [pc, #152]	@ (8001c88 <main+0x234>)
 8001bee:	f7ff fdd1 	bl	8001794 <_ZN10Playground6occupyEhh>
						for (int j = 0; j < NUM_CARS; j++) {
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	61bb      	str	r3, [r7, #24]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	ddd9      	ble.n	8001bb2 <main+0x15e>
					for (int i = 0; i < NUM_LEDS; i++) {
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3301      	adds	r3, #1
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b23      	cmp	r3, #35	@ 0x23
 8001c08:	ddd0      	ble.n	8001bac <main+0x158>
						}
					}
				}

				/* If timeout or all spots are occupied, end this run */
				if (HAL_GetTick() - run_start_time > RUN_TIMEOUT
 8001c0a:	f001 f8ff 	bl	8002e0c <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	4b20      	ldr	r3, [pc, #128]	@ (8001c94 <main+0x240>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	1ad3      	subs	r3, r2, r3
						|| playground.is_all_occupied()) {
 8001c16:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d805      	bhi.n	8001c2a <main+0x1d6>
 8001c1e:	481a      	ldr	r0, [pc, #104]	@ (8001c88 <main+0x234>)
 8001c20:	f7ff fe10 	bl	8001844 <_ZN10Playground15is_all_occupiedEv>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <main+0x1da>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <main+0x1dc>
 8001c2e:	2300      	movs	r3, #0
				if (HAL_GetTick() - run_start_time > RUN_TIMEOUT
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d027      	beq.n	8001c84 <main+0x230>
					HAL_Delay(500);
 8001c34:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c38:	f001 f8f4 	bl	8002e24 <HAL_Delay>
					game_state = END_RUN;
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <main+0x238>)
 8001c3e:	2203      	movs	r2, #3
 8001c40:	701a      	strb	r2, [r3, #0]
				}

				break;
 8001c42:	e01f      	b.n	8001c84 <main+0x230>
			}
			case END_RUN:{
				/* update the number of runs and clear the playground */
				num_run++;
 8001c44:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <main+0x23c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	4a11      	ldr	r2, [pc, #68]	@ (8001c90 <main+0x23c>)
 8001c4c:	6013      	str	r3, [r2, #0]
				playground.clear();
 8001c4e:	480e      	ldr	r0, [pc, #56]	@ (8001c88 <main+0x234>)
 8001c50:	f7ff fcce 	bl	80015f0 <_ZN10Playground5clearEv>
				/* if all NUM_RUNS has finished, display the winner */
				if (num_run >= NUM_RUNS) {
 8001c54:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <main+0x23c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	dd0a      	ble.n	8001c72 <main+0x21e>
					playground.display_result();
 8001c5c:	480a      	ldr	r0, [pc, #40]	@ (8001c88 <main+0x234>)
 8001c5e:	f7ff fe03 	bl	8001868 <_ZN10Playground14display_resultEv>
					game_state = INIT;
 8001c62:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <main+0x238>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
					HAL_Delay(5000);
 8001c68:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001c6c:	f001 f8da 	bl	8002e24 <HAL_Delay>
				} else {
					game_state = START_RUN;
					HAL_Delay(100);
				}

				break;
 8001c70:	e009      	b.n	8001c86 <main+0x232>
					game_state = START_RUN;
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <main+0x238>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
					HAL_Delay(100);
 8001c78:	2064      	movs	r0, #100	@ 0x64
 8001c7a:	f001 f8d3 	bl	8002e24 <HAL_Delay>
				break;
 8001c7e:	e002      	b.n	8001c86 <main+0x232>
			}
			default:
				break;
 8001c80:	bf00      	nop
 8001c82:	e6ff      	b.n	8001a84 <main+0x30>
				break;
 8001c84:	bf00      	nop
		}
	}
 8001c86:	e6fd      	b.n	8001a84 <main+0x30>
 8001c88:	20040814 	.word	0x20040814
 8001c8c:	20040560 	.word	0x20040560
 8001c90:	20040afc 	.word	0x20040afc
 8001c94:	20040af8 	.word	0x20040af8
 8001c98:	20040524 	.word	0x20040524
 8001c9c:	20040564 	.word	0x20040564
 8001ca0:	2004051c 	.word	0x2004051c
 8001ca4:	0800adf0 	.word	0x0800adf0

08001ca8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b096      	sub	sp, #88	@ 0x58
 8001cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	2244      	movs	r2, #68	@ 0x44
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f005 fd51 	bl	800775e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001cce:	f001 fb95 	bl	80033fc <HAL_PWREx_ControlVoltageScaling>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	bf14      	ite	ne
 8001cd8:	2301      	movne	r3, #1
 8001cda:	2300      	moveq	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001ce2:	f000 fb07 	bl	80022f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001ce6:	2310      	movs	r3, #16
 8001ce8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001cea:	2301      	movs	r3, #1
 8001cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001cf2:	2360      	movs	r3, #96	@ 0x60
 8001cf4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f001 fc30 	bl	8003564 <HAL_RCC_OscConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf14      	ite	ne
 8001d0a:	2301      	movne	r3, #1
 8001d0c:	2300      	moveq	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001d14:	f000 faee 	bl	80022f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d18:	230f      	movs	r3, #15
 8001d1a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d2e:	463b      	mov	r3, r7
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f002 f830 	bl	8003d98 <HAL_RCC_ClockConfig>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf14      	ite	ne
 8001d3e:	2301      	movne	r3, #1
 8001d40:	2300      	moveq	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8001d48:	f000 fad4 	bl	80022f4 <Error_Handler>
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	3758      	adds	r7, #88	@ 0x58
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d58:	4b2c      	ldr	r3, [pc, #176]	@ (8001e0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e10 <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001d5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d64:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d66:	4b29      	ldr	r3, [pc, #164]	@ (8001e0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001d6c:	4b27      	ldr	r3, [pc, #156]	@ (8001e0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001d72:	4b26      	ldr	r3, [pc, #152]	@ (8001e0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001d78:	4b24      	ldr	r3, [pc, #144]	@ (8001e0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7e:	4b23      	ldr	r3, [pc, #140]	@ (8001e0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d84:	4b21      	ldr	r3, [pc, #132]	@ (8001e0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	@ (8001e0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d90:	4b1e      	ldr	r3, [pc, #120]	@ (8001e0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001d96:	4b1d      	ldr	r3, [pc, #116]	@ (8001e0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001d9c:	481b      	ldr	r0, [pc, #108]	@ (8001e0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d9e:	f003 fb4f 	bl	8005440 <HAL_UART_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf14      	ite	ne
 8001da8:	2301      	movne	r3, #1
 8001daa:	2300      	moveq	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <_ZL20MX_LPUART1_UART_Initv+0x62>
  {
    Error_Handler();
 8001db2:	f000 fa9f 	bl	80022f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001db6:	2100      	movs	r1, #0
 8001db8:	4814      	ldr	r0, [pc, #80]	@ (8001e0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001dba:	f004 fa3d 	bl	8006238 <HAL_UARTEx_SetTxFifoThreshold>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <_ZL20MX_LPUART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8001dce:	f000 fa91 	bl	80022f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	480d      	ldr	r0, [pc, #52]	@ (8001e0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001dd6:	f004 fa6d 	bl	80062b4 <HAL_UARTEx_SetRxFifoThreshold>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf14      	ite	ne
 8001de0:	2301      	movne	r3, #1
 8001de2:	2300      	moveq	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <_ZL20MX_LPUART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8001dea:	f000 fa83 	bl	80022f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001dee:	4807      	ldr	r0, [pc, #28]	@ (8001e0c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001df0:	f004 f9e9 	bl	80061c6 <HAL_UARTEx_DisableFifoMode>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bf14      	ite	ne
 8001dfa:	2301      	movne	r3, #1
 8001dfc:	2300      	moveq	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <_ZL20MX_LPUART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8001e04:	f000 fa76 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20040298 	.word	0x20040298
 8001e10:	40008000 	.word	0x40008000

08001e14 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e18:	4b2c      	ldr	r3, [pc, #176]	@ (8001ecc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e1a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ed0 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ecc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b29      	ldr	r3, [pc, #164]	@ (8001ecc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b27      	ldr	r3, [pc, #156]	@ (8001ecc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b26      	ldr	r3, [pc, #152]	@ (8001ecc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b24      	ldr	r3, [pc, #144]	@ (8001ecc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b23      	ldr	r3, [pc, #140]	@ (8001ecc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b21      	ldr	r3, [pc, #132]	@ (8001ecc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ecc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ecc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e56:	4b1d      	ldr	r3, [pc, #116]	@ (8001ecc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e5c:	481b      	ldr	r0, [pc, #108]	@ (8001ecc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e5e:	f003 faef 	bl	8005440 <HAL_UART_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf14      	ite	ne
 8001e68:	2301      	movne	r3, #1
 8001e6a:	2300      	moveq	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001e72:	f000 fa3f 	bl	80022f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e76:	2100      	movs	r1, #0
 8001e78:	4814      	ldr	r0, [pc, #80]	@ (8001ecc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e7a:	f004 f9dd 	bl	8006238 <HAL_UARTEx_SetTxFifoThreshold>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf14      	ite	ne
 8001e84:	2301      	movne	r3, #1
 8001e86:	2300      	moveq	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001e8e:	f000 fa31 	bl	80022f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e92:	2100      	movs	r1, #0
 8001e94:	480d      	ldr	r0, [pc, #52]	@ (8001ecc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e96:	f004 fa0d 	bl	80062b4 <HAL_UARTEx_SetRxFifoThreshold>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf14      	ite	ne
 8001ea0:	2301      	movne	r3, #1
 8001ea2:	2300      	moveq	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001eaa:	f000 fa23 	bl	80022f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001eae:	4807      	ldr	r0, [pc, #28]	@ (8001ecc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001eb0:	f004 f989 	bl	80061c6 <HAL_UARTEx_DisableFifoMode>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001ec4:	f000 fa16 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	2004032c 	.word	0x2004032c
 8001ed0:	40004400 	.word	0x40004400

08001ed4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8001f8c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001eda:	4a2d      	ldr	r2, [pc, #180]	@ (8001f90 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001edc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8001ede:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ee0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001ee4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b29      	ldr	r3, [pc, #164]	@ (8001f8c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b27      	ldr	r3, [pc, #156]	@ (8001f8c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b26      	ldr	r3, [pc, #152]	@ (8001f8c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b24      	ldr	r3, [pc, #144]	@ (8001f8c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	4b23      	ldr	r3, [pc, #140]	@ (8001f8c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	4b21      	ldr	r3, [pc, #132]	@ (8001f8c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f0a:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f10:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f16:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f1c:	481b      	ldr	r0, [pc, #108]	@ (8001f8c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001f1e:	f003 fa8f 	bl	8005440 <HAL_UART_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf14      	ite	ne
 8001f28:	2301      	movne	r3, #1
 8001f2a:	2300      	moveq	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001f32:	f000 f9df 	bl	80022f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f36:	2100      	movs	r1, #0
 8001f38:	4814      	ldr	r0, [pc, #80]	@ (8001f8c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001f3a:	f004 f97d 	bl	8006238 <HAL_UARTEx_SetTxFifoThreshold>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8001f4e:	f000 f9d1 	bl	80022f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f52:	2100      	movs	r1, #0
 8001f54:	480d      	ldr	r0, [pc, #52]	@ (8001f8c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001f56:	f004 f9ad 	bl	80062b4 <HAL_UARTEx_SetRxFifoThreshold>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8001f6a:	f000 f9c3 	bl	80022f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f6e:	4807      	ldr	r0, [pc, #28]	@ (8001f8c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001f70:	f004 f929 	bl	80061c6 <HAL_UARTEx_DisableFifoMode>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bf14      	ite	ne
 8001f7a:	2301      	movne	r3, #1
 8001f7c:	2300      	moveq	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001f84:	f000 f9b6 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	200403c0 	.word	0x200403c0
 8001f90:	40004800 	.word	0x40004800

08001f94 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f98:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <_ZL12MX_SPI1_Initv+0x7c>)
 8001f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002014 <_ZL12MX_SPI1_Initv+0x80>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002010 <_ZL12MX_SPI1_Initv+0x7c>)
 8001fa0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <_ZL12MX_SPI1_Initv+0x7c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fac:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <_ZL12MX_SPI1_Initv+0x7c>)
 8001fae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001fb2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fb4:	4b16      	ldr	r3, [pc, #88]	@ (8002010 <_ZL12MX_SPI1_Initv+0x7c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <_ZL12MX_SPI1_Initv+0x7c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fc0:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <_ZL12MX_SPI1_Initv+0x7c>)
 8001fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <_ZL12MX_SPI1_Initv+0x7c>)
 8001fca:	2210      	movs	r2, #16
 8001fcc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fce:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <_ZL12MX_SPI1_Initv+0x7c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <_ZL12MX_SPI1_Initv+0x7c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fda:	4b0d      	ldr	r3, [pc, #52]	@ (8002010 <_ZL12MX_SPI1_Initv+0x7c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <_ZL12MX_SPI1_Initv+0x7c>)
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <_ZL12MX_SPI1_Initv+0x7c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fec:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <_ZL12MX_SPI1_Initv+0x7c>)
 8001fee:	2208      	movs	r2, #8
 8001ff0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ff2:	4807      	ldr	r0, [pc, #28]	@ (8002010 <_ZL12MX_SPI1_Initv+0x7c>)
 8001ff4:	f002 fea6 	bl	8004d44 <HAL_SPI_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf14      	ite	ne
 8001ffe:	2301      	movne	r3, #1
 8002000:	2300      	moveq	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8002008:	f000 f974 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20040454 	.word	0x20040454
 8002014:	40013000 	.word	0x40013000

08002018 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800201c:	4b1d      	ldr	r3, [pc, #116]	@ (8002094 <_ZL12MX_SPI2_Initv+0x7c>)
 800201e:	4a1e      	ldr	r2, [pc, #120]	@ (8002098 <_ZL12MX_SPI2_Initv+0x80>)
 8002020:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002022:	4b1c      	ldr	r3, [pc, #112]	@ (8002094 <_ZL12MX_SPI2_Initv+0x7c>)
 8002024:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002028:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800202a:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <_ZL12MX_SPI2_Initv+0x7c>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002030:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <_ZL12MX_SPI2_Initv+0x7c>)
 8002032:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002036:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002038:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <_ZL12MX_SPI2_Initv+0x7c>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800203e:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <_ZL12MX_SPI2_Initv+0x7c>)
 8002040:	2200      	movs	r2, #0
 8002042:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002044:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <_ZL12MX_SPI2_Initv+0x7c>)
 8002046:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800204a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <_ZL12MX_SPI2_Initv+0x7c>)
 800204e:	2210      	movs	r2, #16
 8002050:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002052:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <_ZL12MX_SPI2_Initv+0x7c>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002058:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <_ZL12MX_SPI2_Initv+0x7c>)
 800205a:	2200      	movs	r2, #0
 800205c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800205e:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <_ZL12MX_SPI2_Initv+0x7c>)
 8002060:	2200      	movs	r2, #0
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <_ZL12MX_SPI2_Initv+0x7c>)
 8002066:	2207      	movs	r2, #7
 8002068:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <_ZL12MX_SPI2_Initv+0x7c>)
 800206c:	2200      	movs	r2, #0
 800206e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002070:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <_ZL12MX_SPI2_Initv+0x7c>)
 8002072:	2208      	movs	r2, #8
 8002074:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002076:	4807      	ldr	r0, [pc, #28]	@ (8002094 <_ZL12MX_SPI2_Initv+0x7c>)
 8002078:	f002 fe64 	bl	8004d44 <HAL_SPI_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	bf14      	ite	ne
 8002082:	2301      	movne	r3, #1
 8002084:	2300      	moveq	r3, #0
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 800208c:	f000 f932 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200404b8 	.word	0x200404b8
 8002098:	40003800 	.word	0x40003800

0800209c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08c      	sub	sp, #48	@ 0x30
 80020a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b2:	4b57      	ldr	r3, [pc, #348]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	4a56      	ldr	r2, [pc, #344]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020be:	4b54      	ldr	r3, [pc, #336]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ca:	4b51      	ldr	r3, [pc, #324]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	4a50      	ldr	r2, [pc, #320]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 80020d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ee:	4b48      	ldr	r3, [pc, #288]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	4b45      	ldr	r3, [pc, #276]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	4a44      	ldr	r2, [pc, #272]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002106:	4b42      	ldr	r3, [pc, #264]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002112:	4b3f      	ldr	r3, [pc, #252]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	4a3e      	ldr	r2, [pc, #248]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 8002118:	f043 0308 	orr.w	r3, r3, #8
 800211c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211e:	4b3c      	ldr	r3, [pc, #240]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800212a:	4b39      	ldr	r3, [pc, #228]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212e:	4a38      	ldr	r2, [pc, #224]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 8002130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002136:	4b36      	ldr	r3, [pc, #216]	@ (8002210 <_ZL12MX_GPIO_Initv+0x174>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002142:	f001 f9ff 	bl	8003544 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002146:	2200      	movs	r2, #0
 8002148:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800214c:	4831      	ldr	r0, [pc, #196]	@ (8002214 <_ZL12MX_GPIO_Initv+0x178>)
 800214e:	f001 f91d 	bl	800338c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002152:	2200      	movs	r2, #0
 8002154:	2140      	movs	r1, #64	@ 0x40
 8002156:	4830      	ldr	r0, [pc, #192]	@ (8002218 <_ZL12MX_GPIO_Initv+0x17c>)
 8002158:	f001 f918 	bl	800338c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800215c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	4619      	mov	r1, r3
 8002170:	482a      	ldr	r0, [pc, #168]	@ (800221c <_ZL12MX_GPIO_Initv+0x180>)
 8002172:	f000 ff61 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002176:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800217a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217c:	2301      	movs	r3, #1
 800217e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	4619      	mov	r1, r3
 800218e:	4821      	ldr	r0, [pc, #132]	@ (8002214 <_ZL12MX_GPIO_Initv+0x178>)
 8002190:	f000 ff52 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002194:	2320      	movs	r3, #32
 8002196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021a0:	f107 031c 	add.w	r3, r7, #28
 80021a4:	4619      	mov	r1, r3
 80021a6:	481c      	ldr	r0, [pc, #112]	@ (8002218 <_ZL12MX_GPIO_Initv+0x17c>)
 80021a8:	f000 ff46 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80021ac:	2340      	movs	r3, #64	@ 0x40
 80021ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b0:	2301      	movs	r3, #1
 80021b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	4619      	mov	r1, r3
 80021c2:	4815      	ldr	r0, [pc, #84]	@ (8002218 <_ZL12MX_GPIO_Initv+0x17c>)
 80021c4:	f000 ff38 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80021c8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80021cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021da:	230a      	movs	r3, #10
 80021dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	4619      	mov	r1, r3
 80021e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e8:	f000 ff26 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	4619      	mov	r1, r3
 8002200:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002204:	f000 ff18 	bl	8003038 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002208:	bf00      	nop
 800220a:	3730      	adds	r7, #48	@ 0x30
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	48000400 	.word	0x48000400
 8002218:	48001800 	.word	0x48001800
 800221c:	48000800 	.word	0x48000800

08002220 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE {
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*) &ch, 1, 0xFFFF);
 8002228:	1d39      	adds	r1, r7, #4
 800222a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800222e:	2201      	movs	r2, #1
 8002230:	4803      	ldr	r0, [pc, #12]	@ (8002240 <__io_putchar+0x20>)
 8002232:	f003 f955 	bl	80054e0 <HAL_UART_Transmit>
	return ch;
 8002236:	687b      	ldr	r3, [r7, #4]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20040298 	.word	0x20040298

08002244 <_Z8DWT_Initv>:

void DWT_Init(void) {
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8002248:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <_Z8DWT_Initv+0x2c>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a08      	ldr	r2, [pc, #32]	@ (8002270 <_Z8DWT_Initv+0x2c>)
 800224e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002252:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;                                 // Reset counter
 8002254:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <_Z8DWT_Initv+0x30>)
 8002256:	2200      	movs	r2, #0
 8002258:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;             // Enable the cycle counter
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <_Z8DWT_Initv+0x30>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a05      	ldr	r2, [pc, #20]	@ (8002274 <_Z8DWT_Initv+0x30>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6013      	str	r3, [r2, #0]
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000edf0 	.word	0xe000edf0
 8002274:	e0001000 	.word	0xe0001000

08002278 <_Z17is_button_pressedv>:

bool is_button_pressed() {
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
	static uint32_t last_press_time = 0;
	static bool last_button_state = false;

	// Read current state
	bool current_state = (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET);
 800227e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002282:	4819      	ldr	r0, [pc, #100]	@ (80022e8 <_Z17is_button_pressedv+0x70>)
 8002284:	f001 f86a 	bl	800335c <HAL_GPIO_ReadPin>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf0c      	ite	eq
 800228e:	2301      	moveq	r3, #1
 8002290:	2300      	movne	r3, #0
 8002292:	71fb      	strb	r3, [r7, #7]

	// Debounce logic
	if (current_state && !last_button_state) {
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01d      	beq.n	80022d6 <_Z17is_button_pressedv+0x5e>
 800229a:	4b14      	ldr	r3, [pc, #80]	@ (80022ec <_Z17is_button_pressedv+0x74>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	f083 0301 	eor.w	r3, r3, #1
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d016      	beq.n	80022d6 <_Z17is_button_pressedv+0x5e>
		if ((HAL_GetTick() - last_press_time) > DEBOUNCE_TIME_MS) {
 80022a8:	f000 fdb0 	bl	8002e0c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <_Z17is_button_pressedv+0x78>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b32      	cmp	r3, #50	@ 0x32
 80022b6:	bf8c      	ite	hi
 80022b8:	2301      	movhi	r3, #1
 80022ba:	2300      	movls	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <_Z17is_button_pressedv+0x5e>
			last_press_time = HAL_GetTick();
 80022c2:	f000 fda3 	bl	8002e0c <HAL_GetTick>
 80022c6:	4603      	mov	r3, r0
 80022c8:	4a09      	ldr	r2, [pc, #36]	@ (80022f0 <_Z17is_button_pressedv+0x78>)
 80022ca:	6013      	str	r3, [r2, #0]
			last_button_state = true;
 80022cc:	4b07      	ldr	r3, [pc, #28]	@ (80022ec <_Z17is_button_pressedv+0x74>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
			return true;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e003      	b.n	80022de <_Z17is_button_pressedv+0x66>
		}
	}

	// Update state
	last_button_state = current_state;
 80022d6:	4a05      	ldr	r2, [pc, #20]	@ (80022ec <_Z17is_button_pressedv+0x74>)
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	7013      	strb	r3, [r2, #0]
	return false;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	48000800 	.word	0x48000800
 80022ec:	20040b04 	.word	0x20040b04
 80022f0:	20040b00 	.word	0x20040b00

080022f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f8:	b672      	cpsid	i
}
 80022fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <Error_Handler+0x8>

08002300 <_ZN6TPixy2I9Link2UARTEC1Ev>:
	uint8_t m_length;
	bool m_cs;
};

template<class LinkType>
TPixy2<LinkType>::TPixy2() :
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
		ccc(this), line(this), video(this) {
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3308      	adds	r3, #8
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f8ac 	bl	800246c <_ZN8Pixy2CCCI9Link2UARTEC1EP6TPixy2IS0_E>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3314      	adds	r3, #20
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f8b5 	bl	800248a <_ZN9Pixy2LineI9Link2UARTEC1EP6TPixy2IS0_E>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3330      	adds	r3, #48	@ 0x30
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f8be 	bl	80024a8 <_ZN10Pixy2VideoI9Link2UARTEC1EP6TPixy2IS0_E>
	// allocate buffer space for send/receive
	m_buf = (uint8_t*) malloc(PIXY_BUFFERSIZE);
 800232c:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8002330:	f004 f94e 	bl	80065d0 <malloc>
 8002334:	4603      	mov	r3, r0
 8002336:	461a      	mov	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	639a      	str	r2, [r3, #56]	@ 0x38
	// shifted buffer is used for sending, so we have space to write header information
	m_bufPayload = m_buf + PIXY_SEND_HEADER_SIZE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002340:	1d1a      	adds	r2, r3, #4
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	63da      	str	r2, [r3, #60]	@ 0x3c
	frameWidth = frameHeight = 0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	80da      	strh	r2, [r3, #6]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	88da      	ldrh	r2, [r3, #6]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	809a      	strh	r2, [r3, #4]
	version = NULL;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
}
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh>:
private:
  TPixy2<LinkType> *m_pixy;
};

template <class LinkType>
int8_t Pixy2CCC<LinkType>::getBlocks(bool wait, uint8_t sigmap, uint8_t maxBlocks)
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	4608      	mov	r0, r1
 800236e:	4611      	mov	r1, r2
 8002370:	461a      	mov	r2, r3
 8002372:	4603      	mov	r3, r0
 8002374:	70fb      	strb	r3, [r7, #3]
 8002376:	460b      	mov	r3, r1
 8002378:	70bb      	strb	r3, [r7, #2]
 800237a:	4613      	mov	r3, r2
 800237c:	707b      	strb	r3, [r7, #1]
{
  blocks = NULL;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	605a      	str	r2, [r3, #4]
  numBlocks = 0;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
  
  while(1)
  {
    // fill in request data
    m_pixy->m_bufPayload[0] = sigmap;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002390:	78ba      	ldrb	r2, [r7, #2]
 8002392:	701a      	strb	r2, [r3, #0]
    m_pixy->m_bufPayload[1] = maxBlocks;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239a:	3301      	adds	r3, #1
 800239c:	787a      	ldrb	r2, [r7, #1]
 800239e:	701a      	strb	r2, [r3, #0]
    m_pixy->m_length = 2;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2202      	movs	r2, #2
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    m_pixy->m_type = CCC_REQUEST_BLOCKS;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  
    // send request
    m_pixy->sendPacket();
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 f884 	bl	80024c6 <_ZN6TPixy2I9Link2UARTE10sendPacketEv>
    if (m_pixy->recvPacket()==0)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f8ac 	bl	8002520 <_ZN6TPixy2I9Link2UARTE10recvPacketEv>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	bf0c      	ite	eq
 80023ce:	2301      	moveq	r3, #1
 80023d0:	2300      	movne	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d03b      	beq.n	8002450 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xec>
    {
      if (m_pixy->m_type==CCC_RESPONSE_BLOCKS)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023e0:	2b21      	cmp	r3, #33	@ 0x21
 80023e2:	d114      	bne.n	800240e <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xaa>
      {
        blocks = (Block *)m_pixy->m_buf;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	605a      	str	r2, [r3, #4]
        numBlocks = m_pixy->m_length/sizeof(Block);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023f6:	085b      	lsrs	r3, r3, #1
 80023f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002468 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0x104>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	b2da      	uxtb	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	701a      	strb	r2, [r3, #0]
        return numBlocks;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b25b      	sxtb	r3, r3
 800240c:	e028      	b.n	8002460 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xfc>
      }
	  // deal with busy and program changing states from Pixy (we'll wait)
      else if (m_pixy->m_type==PIXY_TYPE_RESPONSE_ERROR)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002416:	2b03      	cmp	r3, #3
 8002418:	d11d      	bne.n	8002456 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xf2>
      {
        if ((int8_t)m_pixy->m_buf[0]==PIXY_RESULT_BUSY)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2bfe      	cmp	r3, #254	@ 0xfe
 8002424:	d108      	bne.n	8002438 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xd4>
        {
          if(!wait)
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	f083 0301 	eor.w	r3, r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d011      	beq.n	8002456 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xf2>
            return PIXY_RESULT_BUSY; // new data not available yet
 8002432:	f06f 0301 	mvn.w	r3, #1
 8002436:	e013      	b.n	8002460 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xfc>
		}
	    else if ((int8_t)m_pixy->m_buf[0]!=PIXY_RESULT_PROG_CHANGING)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2bfa      	cmp	r3, #250	@ 0xfa
 8002442:	d008      	beq.n	8002456 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xf2>
          return m_pixy->m_buf[0];
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b25b      	sxtb	r3, r3
 800244e:	e007      	b.n	8002460 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xfc>
      }
    }
    else
      return PIXY_RESULT_ERROR;  // some kind of bitstream error
 8002450:	f04f 33ff 	mov.w	r3, #4294967295
 8002454:	e004      	b.n	8002460 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xfc>
  
    // If we're waiting for frame data, don't thrash Pixy with requests.
    // We can give up half a millisecond of latency (worst case)	
    delayMicroseconds(500);
 8002456:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800245a:	f7fe fe0f 	bl	800107c <_Z17delayMicrosecondsm>
    m_pixy->m_bufPayload[0] = sigmap;
 800245e:	e794      	b.n	800238a <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0x26>
  }
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	92492493 	.word	0x92492493

0800246c <_ZN8Pixy2CCCI9Link2UARTEC1EP6TPixy2IS0_E>:
  Pixy2CCC(TPixy2<LinkType> *pixy)
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
    m_pixy = pixy;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	609a      	str	r2, [r3, #8]
  }
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <_ZN9Pixy2LineI9Link2UARTEC1EP6TPixy2IS0_E>:

template<class LinkType> class TPixy2;

template<class LinkType> class Pixy2Line {
public:
	Pixy2Line(TPixy2<LinkType> *pixy) {
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
		m_pixy = pixy;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	619a      	str	r2, [r3, #24]
	}
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <_ZN10Pixy2VideoI9Link2UARTEC1EP6TPixy2IS0_E>:
template <class LinkType> class TPixy2;

template <class LinkType> class Pixy2Video
{
public:
  Pixy2Video(TPixy2<LinkType> *pixy)
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  {
    m_pixy = pixy;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	601a      	str	r2, [r3, #0]
  }	  
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <_ZN6TPixy2I9Link2UARTE10sendPacketEv>:
	}
	return PIXY_RESULT_OK;
}

template<class LinkType>
int16_t TPixy2<LinkType>::sendPacket() {
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
	// write header info at beginnig of buffer
	m_buf[0] = PIXY_NO_CHECKSUM_SYNC & 0xff;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d2:	22ae      	movs	r2, #174	@ 0xae
 80024d4:	701a      	strb	r2, [r3, #0]
	m_buf[1] = PIXY_NO_CHECKSUM_SYNC >> 8;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024da:	3301      	adds	r3, #1
 80024dc:	22c1      	movs	r2, #193	@ 0xc1
 80024de:	701a      	strb	r2, [r3, #0]
	m_buf[2] = m_type;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e4:	3302      	adds	r3, #2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 80024ec:	701a      	strb	r2, [r3, #0]
	m_buf[3] = m_length;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f2:	3303      	adds	r3, #3
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 80024fa:	701a      	strb	r2, [r3, #0]
	// send whole thing -- header and data in one call
	return m_link.send(m_buf, m_length + PIXY_SEND_HEADER_SIZE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800250c:	3304      	adds	r3, #4
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	f7fe fe25 	bl	8001160 <_ZN9Link2UART4sendEPhh>
 8002516:	4603      	mov	r3, r0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_ZN6TPixy2I9Link2UARTE10recvPacketEv>:
template<class LinkType> int16_t TPixy2<LinkType>::recvPacket() {
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	res = getSync();
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f889 	bl	8002640 <_ZN6TPixy2I9Link2UARTE7getSyncEv>
 800252e:	4603      	mov	r3, r0
 8002530:	81fb      	strh	r3, [r7, #14]
	if (res < 0)
 8002532:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002536:	2b00      	cmp	r3, #0
 8002538:	da02      	bge.n	8002540 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x20>
		return res;
 800253a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800253e:	e078      	b.n	8002632 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
	if (m_cs) {
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002546:	2b00      	cmp	r3, #0
 8002548:	d040      	beq.n	80025cc <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0xac>
		res = m_link.recv(m_buf, 4);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002554:	2300      	movs	r3, #0
 8002556:	2204      	movs	r2, #4
 8002558:	f7fe fdc2 	bl	80010e0 <_ZN9Link2UART4recvEPhhPt>
 800255c:	4603      	mov	r3, r0
 800255e:	81fb      	strh	r3, [r7, #14]
		if (res < 0)
 8002560:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002564:	2b00      	cmp	r3, #0
 8002566:	da02      	bge.n	800256e <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x4e>
			return res;
 8002568:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800256c:	e061      	b.n	8002632 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
		m_type = m_buf[0];
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002572:	781a      	ldrb	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		m_length = m_buf[1];
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800257e:	785a      	ldrb	r2, [r3, #1]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		csSerial = *(uint16_t*) &m_buf[2];
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258a:	885b      	ldrh	r3, [r3, #2]
 800258c:	81bb      	strh	r3, [r7, #12]
		res = m_link.recv(m_buf, m_length, &csCalc);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800259e:	f107 030a 	add.w	r3, r7, #10
 80025a2:	f7fe fd9d 	bl	80010e0 <_ZN9Link2UART4recvEPhhPt>
 80025a6:	4603      	mov	r3, r0
 80025a8:	81fb      	strh	r3, [r7, #14]
		if (res < 0)
 80025aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	da02      	bge.n	80025b8 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x98>
			return res;
 80025b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025b6:	e03c      	b.n	8002632 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
		if (csSerial != csCalc) {
 80025b8:	897b      	ldrh	r3, [r7, #10]
 80025ba:	89ba      	ldrh	r2, [r7, #12]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d037      	beq.n	8002630 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x110>
			println("error: checksum\r\n");
 80025c0:	481e      	ldr	r0, [pc, #120]	@ (800263c <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x11c>)
 80025c2:	f7fe fd45 	bl	8001050 <_Z7printlnPKc>
			return PIXY_RESULT_CHECKSUM_ERROR;
 80025c6:	f06f 0302 	mvn.w	r3, #2
 80025ca:	e032      	b.n	8002632 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
		res = m_link.recv(m_buf, 2);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80025d6:	2300      	movs	r3, #0
 80025d8:	2202      	movs	r2, #2
 80025da:	f7fe fd81 	bl	80010e0 <_ZN9Link2UART4recvEPhhPt>
 80025de:	4603      	mov	r3, r0
 80025e0:	81fb      	strh	r3, [r7, #14]
		if (res < 0)
 80025e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	da02      	bge.n	80025f0 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0xd0>
			return res;
 80025ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ee:	e020      	b.n	8002632 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
		m_type = m_buf[0];
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		m_length = m_buf[1];
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002600:	785a      	ldrb	r2, [r3, #1]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		res = m_link.recv(m_buf, m_length);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8002618:	2300      	movs	r3, #0
 800261a:	f7fe fd61 	bl	80010e0 <_ZN9Link2UART4recvEPhhPt>
 800261e:	4603      	mov	r3, r0
 8002620:	81fb      	strh	r3, [r7, #14]
		if (res < 0)
 8002622:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002626:	2b00      	cmp	r3, #0
 8002628:	da02      	bge.n	8002630 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x110>
			return res;
 800262a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800262e:	e000      	b.n	8002632 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
	return PIXY_RESULT_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	0800ae18 	.word	0x0800ae18

08002640 <_ZN6TPixy2I9Link2UARTE7getSyncEv>:
template<class LinkType> int16_t TPixy2<LinkType>::getSync() {
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	for (i = j = 0, cprev = 0; true; i++) {
 8002648:	2300      	movs	r3, #0
 800264a:	75bb      	strb	r3, [r7, #22]
 800264c:	7dbb      	ldrb	r3, [r7, #22]
 800264e:	75fb      	strb	r3, [r7, #23]
 8002650:	2300      	movs	r3, #0
 8002652:	757b      	strb	r3, [r7, #21]
		res = m_link.recv(&c, 1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800265a:	f107 010f 	add.w	r1, r7, #15
 800265e:	2300      	movs	r3, #0
 8002660:	2201      	movs	r2, #1
 8002662:	f7fe fd3d 	bl	80010e0 <_ZN9Link2UART4recvEPhhPt>
 8002666:	4603      	mov	r3, r0
 8002668:	827b      	strh	r3, [r7, #18]
		if (res >= PIXY_RESULT_OK) {
 800266a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800266e:	2b00      	cmp	r3, #0
 8002670:	db22      	blt.n	80026b8 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0x78>
			start = cprev;
 8002672:	7d7b      	ldrb	r3, [r7, #21]
 8002674:	823b      	strh	r3, [r7, #16]
			start |= c << 8;
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	b21b      	sxth	r3, r3
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	b21a      	sxth	r2, r3
 800267e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	b21b      	sxth	r3, r3
 8002686:	823b      	strh	r3, [r7, #16]
			cprev = c;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	757b      	strb	r3, [r7, #21]
			if (start == PIXY_CHECKSUM_SYNC) {
 800268c:	8a3b      	ldrh	r3, [r7, #16]
 800268e:	f24c 12af 	movw	r2, #49583	@ 0xc1af
 8002692:	4293      	cmp	r3, r2
 8002694:	d105      	bne.n	80026a2 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0x62>
				m_cs = true;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
				return PIXY_RESULT_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	e022      	b.n	80026e8 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0xa8>
			if (start == PIXY_NO_CHECKSUM_SYNC) {
 80026a2:	8a3b      	ldrh	r3, [r7, #16]
 80026a4:	f24c 12ae 	movw	r2, #49582	@ 0xc1ae
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d105      	bne.n	80026b8 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0x78>
				m_cs = false;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
				return PIXY_RESULT_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e017      	b.n	80026e8 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0xa8>
		if (i >= 4) {
 80026b8:	7dfb      	ldrb	r3, [r7, #23]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d910      	bls.n	80026e0 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0xa0>
			if (j >= 4) {
 80026be:	7dbb      	ldrb	r3, [r7, #22]
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d905      	bls.n	80026d0 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0x90>
				println("error: no response\r\n");
 80026c4:	480a      	ldr	r0, [pc, #40]	@ (80026f0 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0xb0>)
 80026c6:	f7fe fcc3 	bl	8001050 <_Z7printlnPKc>
				return PIXY_RESULT_ERROR;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
 80026ce:	e00b      	b.n	80026e8 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0xa8>
			delayMicroseconds(25);
 80026d0:	2019      	movs	r0, #25
 80026d2:	f7fe fcd3 	bl	800107c <_Z17delayMicrosecondsm>
			j++;
 80026d6:	7dbb      	ldrb	r3, [r7, #22]
 80026d8:	3301      	adds	r3, #1
 80026da:	75bb      	strb	r3, [r7, #22]
			i = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	75fb      	strb	r3, [r7, #23]
	for (i = j = 0, cprev = 0; true; i++) {
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	3301      	adds	r3, #1
 80026e4:	75fb      	strb	r3, [r7, #23]
		res = m_link.recv(&c, 1);
 80026e6:	e7b5      	b.n	8002654 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0x14>
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	0800ae2c 	.word	0x0800ae2c

080026f4 <_Z41__static_initialization_and_destruction_0v>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 80026f4:	b5b0      	push	{r4, r5, r7, lr}
 80026f6:	af00      	add	r7, sp, #0
Pixy2UART pixy;
 80026f8:	4808      	ldr	r0, [pc, #32]	@ (800271c <_Z41__static_initialization_and_destruction_0v+0x28>)
 80026fa:	f7ff fe01 	bl	8002300 <_ZN6TPixy2I9Link2UARTEC1Ev>
Car car_arry[NUM_CARS];
 80026fe:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <_Z41__static_initialization_and_destruction_0v+0x2c>)
 8002700:	2403      	movs	r4, #3
 8002702:	461d      	mov	r5, r3
 8002704:	e004      	b.n	8002710 <_Z41__static_initialization_and_destruction_0v+0x1c>
 8002706:	4628      	mov	r0, r5
 8002708:	f7fe fd4c 	bl	80011a4 <_ZN3CarC1Ev>
 800270c:	3c01      	subs	r4, #1
 800270e:	35ac      	adds	r5, #172	@ 0xac
 8002710:	2c00      	cmp	r4, #0
 8002712:	daf8      	bge.n	8002706 <_Z41__static_initialization_and_destruction_0v+0x12>
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	bdb0      	pop	{r4, r5, r7, pc}
 800271a:	bf00      	nop
 800271c:	2004051c 	.word	0x2004051c
 8002720:	20040564 	.word	0x20040564

08002724 <_Z41__static_initialization_and_destruction_1v>:
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
Pixy2UART pixy;
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <_Z41__static_initialization_and_destruction_1v+0x10>)
 800272a:	f000 f805 	bl	8002738 <_ZN6TPixy2I9Link2UARTED1Ev>
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2004051c 	.word	0x2004051c

08002738 <_ZN6TPixy2I9Link2UARTED1Ev>:
TPixy2<LinkType>::~TPixy2() {
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	m_link.close();
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3334      	adds	r3, #52	@ 0x34
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fcc1 	bl	80010cc <_ZN9Link2UART5closeEv>
	free(m_buf);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274e:	4618      	mov	r0, r3
 8002750:	f003 ff46 	bl	80065e0 <free>
}
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <_GLOBAL__sub_I__Z7printlnPKc>:
 800275e:	b580      	push	{r7, lr}
 8002760:	af00      	add	r7, sp, #0
 8002762:	f7ff ffc7 	bl	80026f4 <_Z41__static_initialization_and_destruction_0v>
 8002766:	bd80      	pop	{r7, pc}

08002768 <_GLOBAL__sub_D__Z7printlnPKc>:
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
 800276c:	f7ff ffda 	bl	8002724 <_Z41__static_initialization_and_destruction_1v>
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277a:	4b0f      	ldr	r3, [pc, #60]	@ (80027b8 <HAL_MspInit+0x44>)
 800277c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277e:	4a0e      	ldr	r2, [pc, #56]	@ (80027b8 <HAL_MspInit+0x44>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6613      	str	r3, [r2, #96]	@ 0x60
 8002786:	4b0c      	ldr	r3, [pc, #48]	@ (80027b8 <HAL_MspInit+0x44>)
 8002788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_MspInit+0x44>)
 8002794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002796:	4a08      	ldr	r2, [pc, #32]	@ (80027b8 <HAL_MspInit+0x44>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279c:	6593      	str	r3, [r2, #88]	@ 0x58
 800279e:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_MspInit+0x44>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000

080027bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b0b2      	sub	sp, #200	@ 0xc8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027d4:	f107 0320 	add.w	r3, r7, #32
 80027d8:	2294      	movs	r2, #148	@ 0x94
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f004 ffbe 	bl	800775e <memset>
  if(huart->Instance==LPUART1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a64      	ldr	r2, [pc, #400]	@ (8002978 <HAL_UART_MspInit+0x1bc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d13e      	bne.n	800286a <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80027ec:	2320      	movs	r3, #32
 80027ee:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80027f0:	2300      	movs	r3, #0
 80027f2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027f4:	f107 0320 	add.w	r3, r7, #32
 80027f8:	4618      	mov	r0, r3
 80027fa:	f001 fd8b 	bl	8004314 <HAL_RCCEx_PeriphCLKConfig>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002804:	f7ff fd76 	bl	80022f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002808:	4b5c      	ldr	r3, [pc, #368]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 800280a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280c:	4a5b      	ldr	r2, [pc, #364]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002814:	4b59      	ldr	r3, [pc, #356]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 8002816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002820:	4b56      	ldr	r3, [pc, #344]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 8002822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002824:	4a55      	ldr	r2, [pc, #340]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 8002826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800282a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800282c:	4b53      	ldr	r3, [pc, #332]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 800282e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8002838:	f000 fe84 	bl	8003544 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800283c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002840:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002850:	2303      	movs	r3, #3
 8002852:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002856:	2308      	movs	r3, #8
 8002858:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800285c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002860:	4619      	mov	r1, r3
 8002862:	4847      	ldr	r0, [pc, #284]	@ (8002980 <HAL_UART_MspInit+0x1c4>)
 8002864:	f000 fbe8 	bl	8003038 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002868:	e082      	b.n	8002970 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a45      	ldr	r2, [pc, #276]	@ (8002984 <HAL_UART_MspInit+0x1c8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d13c      	bne.n	80028ee <HAL_UART_MspInit+0x132>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002874:	2302      	movs	r3, #2
 8002876:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002878:	2300      	movs	r3, #0
 800287a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800287c:	f107 0320 	add.w	r3, r7, #32
 8002880:	4618      	mov	r0, r3
 8002882:	f001 fd47 	bl	8004314 <HAL_RCCEx_PeriphCLKConfig>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800288c:	f7ff fd32 	bl	80022f4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002890:	4b3a      	ldr	r3, [pc, #232]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	4a39      	ldr	r2, [pc, #228]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 8002896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800289a:	6593      	str	r3, [r2, #88]	@ 0x58
 800289c:	4b37      	ldr	r3, [pc, #220]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a8:	4b34      	ldr	r3, [pc, #208]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 80028aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ac:	4a33      	ldr	r2, [pc, #204]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028b4:	4b31      	ldr	r3, [pc, #196]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 80028b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028c0:	230c      	movs	r3, #12
 80028c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c6:	2302      	movs	r3, #2
 80028c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d2:	2303      	movs	r3, #3
 80028d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028d8:	2307      	movs	r3, #7
 80028da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80028e2:	4619      	mov	r1, r3
 80028e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028e8:	f000 fba6 	bl	8003038 <HAL_GPIO_Init>
}
 80028ec:	e040      	b.n	8002970 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a25      	ldr	r2, [pc, #148]	@ (8002988 <HAL_UART_MspInit+0x1cc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d13b      	bne.n	8002970 <HAL_UART_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80028f8:	2304      	movs	r3, #4
 80028fa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80028fc:	2300      	movs	r3, #0
 80028fe:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002900:	f107 0320 	add.w	r3, r7, #32
 8002904:	4618      	mov	r0, r3
 8002906:	f001 fd05 	bl	8004314 <HAL_RCCEx_PeriphCLKConfig>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_UART_MspInit+0x158>
      Error_Handler();
 8002910:	f7ff fcf0 	bl	80022f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002914:	4b19      	ldr	r3, [pc, #100]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 8002916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002918:	4a18      	ldr	r2, [pc, #96]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 800291a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800291e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002920:	4b16      	ldr	r3, [pc, #88]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 8002922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002924:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800292c:	4b13      	ldr	r3, [pc, #76]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 800292e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002930:	4a12      	ldr	r2, [pc, #72]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 8002932:	f043 0308 	orr.w	r3, r3, #8
 8002936:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002938:	4b10      	ldr	r3, [pc, #64]	@ (800297c <HAL_UART_MspInit+0x1c0>)
 800293a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002944:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002948:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002958:	2303      	movs	r3, #3
 800295a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800295e:	2307      	movs	r3, #7
 8002960:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002964:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002968:	4619      	mov	r1, r3
 800296a:	4808      	ldr	r0, [pc, #32]	@ (800298c <HAL_UART_MspInit+0x1d0>)
 800296c:	f000 fb64 	bl	8003038 <HAL_GPIO_Init>
}
 8002970:	bf00      	nop
 8002972:	37c8      	adds	r7, #200	@ 0xc8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40008000 	.word	0x40008000
 800297c:	40021000 	.word	0x40021000
 8002980:	48001800 	.word	0x48001800
 8002984:	40004400 	.word	0x40004400
 8002988:	40004800 	.word	0x40004800
 800298c:	48000c00 	.word	0x48000c00

08002990 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08c      	sub	sp, #48	@ 0x30
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 031c 	add.w	r3, r7, #28
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a45      	ldr	r2, [pc, #276]	@ (8002ac4 <HAL_SPI_MspInit+0x134>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d129      	bne.n	8002a06 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029b2:	4b45      	ldr	r3, [pc, #276]	@ (8002ac8 <HAL_SPI_MspInit+0x138>)
 80029b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b6:	4a44      	ldr	r2, [pc, #272]	@ (8002ac8 <HAL_SPI_MspInit+0x138>)
 80029b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80029be:	4b42      	ldr	r3, [pc, #264]	@ (8002ac8 <HAL_SPI_MspInit+0x138>)
 80029c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029c6:	61bb      	str	r3, [r7, #24]
 80029c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ca:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac8 <HAL_SPI_MspInit+0x138>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ce:	4a3e      	ldr	r2, [pc, #248]	@ (8002ac8 <HAL_SPI_MspInit+0x138>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029d6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ac8 <HAL_SPI_MspInit+0x138>)
 80029d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029e2:	23e0      	movs	r3, #224	@ 0xe0
 80029e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ee:	2303      	movs	r3, #3
 80029f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029f2:	2305      	movs	r3, #5
 80029f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f6:	f107 031c 	add.w	r3, r7, #28
 80029fa:	4619      	mov	r1, r3
 80029fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a00:	f000 fb1a 	bl	8003038 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a04:	e059      	b.n	8002aba <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a30      	ldr	r2, [pc, #192]	@ (8002acc <HAL_SPI_MspInit+0x13c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d154      	bne.n	8002aba <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a10:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac8 <HAL_SPI_MspInit+0x138>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a14:	4a2c      	ldr	r2, [pc, #176]	@ (8002ac8 <HAL_SPI_MspInit+0x138>)
 8002a16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac8 <HAL_SPI_MspInit+0x138>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a28:	4b27      	ldr	r3, [pc, #156]	@ (8002ac8 <HAL_SPI_MspInit+0x138>)
 8002a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2c:	4a26      	ldr	r2, [pc, #152]	@ (8002ac8 <HAL_SPI_MspInit+0x138>)
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a34:	4b24      	ldr	r3, [pc, #144]	@ (8002ac8 <HAL_SPI_MspInit+0x138>)
 8002a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a40:	4b21      	ldr	r3, [pc, #132]	@ (8002ac8 <HAL_SPI_MspInit+0x138>)
 8002a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a44:	4a20      	ldr	r2, [pc, #128]	@ (8002ac8 <HAL_SPI_MspInit+0x138>)
 8002a46:	f043 0302 	orr.w	r3, r3, #2
 8002a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <HAL_SPI_MspInit+0x138>)
 8002a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a64:	2303      	movs	r3, #3
 8002a66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	4619      	mov	r1, r3
 8002a72:	4817      	ldr	r0, [pc, #92]	@ (8002ad0 <HAL_SPI_MspInit+0x140>)
 8002a74:	f000 fae0 	bl	8003038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a78:	2304      	movs	r3, #4
 8002a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a84:	2303      	movs	r3, #3
 8002a86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a88:	2305      	movs	r3, #5
 8002a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a8c:	f107 031c 	add.w	r3, r7, #28
 8002a90:	4619      	mov	r1, r3
 8002a92:	480f      	ldr	r0, [pc, #60]	@ (8002ad0 <HAL_SPI_MspInit+0x140>)
 8002a94:	f000 fad0 	bl	8003038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002aaa:	2305      	movs	r3, #5
 8002aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aae:	f107 031c 	add.w	r3, r7, #28
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4807      	ldr	r0, [pc, #28]	@ (8002ad4 <HAL_SPI_MspInit+0x144>)
 8002ab6:	f000 fabf 	bl	8003038 <HAL_GPIO_Init>
}
 8002aba:	bf00      	nop
 8002abc:	3730      	adds	r7, #48	@ 0x30
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40013000 	.word	0x40013000
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40003800 	.word	0x40003800
 8002ad0:	48000800 	.word	0x48000800
 8002ad4:	48000400 	.word	0x48000400

08002ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <NMI_Handler+0x4>

08002ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <HardFault_Handler+0x4>

08002ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aec:	bf00      	nop
 8002aee:	e7fd      	b.n	8002aec <MemManage_Handler+0x4>

08002af0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af4:	bf00      	nop
 8002af6:	e7fd      	b.n	8002af4 <BusFault_Handler+0x4>

08002af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <UsageFault_Handler+0x4>

08002b00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b2e:	f000 f959 	bl	8002de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
  return 1;
 8002b3a:	2301      	movs	r3, #1
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <_kill>:

int _kill(int pid, int sig)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b50:	f004 fe68 	bl	8007824 <__errno>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2216      	movs	r2, #22
 8002b58:	601a      	str	r2, [r3, #0]
  return -1;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <_exit>:

void _exit (int status)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b6e:	f04f 31ff 	mov.w	r1, #4294967295
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ffe7 	bl	8002b46 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b78:	bf00      	nop
 8002b7a:	e7fd      	b.n	8002b78 <_exit+0x12>

08002b7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	e00a      	b.n	8002ba4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b8e:	f3af 8000 	nop.w
 8002b92:	4601      	mov	r1, r0
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	60ba      	str	r2, [r7, #8]
 8002b9a:	b2ca      	uxtb	r2, r1
 8002b9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	dbf0      	blt.n	8002b8e <_read+0x12>
  }

  return len;
 8002bac:	687b      	ldr	r3, [r7, #4]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e009      	b.n	8002bdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	60ba      	str	r2, [r7, #8]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fb25 	bl	8002220 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	dbf1      	blt.n	8002bc8 <_write+0x12>
  }
  return len;
 8002be4:	687b      	ldr	r3, [r7, #4]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <_close>:

int _close(int file)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c16:	605a      	str	r2, [r3, #4]
  return 0;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <_isatty>:

int _isatty(int file)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c2e:	2301      	movs	r3, #1
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c60:	4a14      	ldr	r2, [pc, #80]	@ (8002cb4 <_sbrk+0x5c>)
 8002c62:	4b15      	ldr	r3, [pc, #84]	@ (8002cb8 <_sbrk+0x60>)
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c6c:	4b13      	ldr	r3, [pc, #76]	@ (8002cbc <_sbrk+0x64>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c74:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <_sbrk+0x64>)
 8002c76:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <_sbrk+0x68>)
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c7a:	4b10      	ldr	r3, [pc, #64]	@ (8002cbc <_sbrk+0x64>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d207      	bcs.n	8002c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c88:	f004 fdcc 	bl	8007824 <__errno>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	220c      	movs	r2, #12
 8002c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
 8002c96:	e009      	b.n	8002cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c98:	4b08      	ldr	r3, [pc, #32]	@ (8002cbc <_sbrk+0x64>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c9e:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <_sbrk+0x64>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	4a05      	ldr	r2, [pc, #20]	@ (8002cbc <_sbrk+0x64>)
 8002ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002caa:	68fb      	ldr	r3, [r7, #12]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	200a0000 	.word	0x200a0000
 8002cb8:	00000400 	.word	0x00000400
 8002cbc:	20040b08 	.word	0x20040b08
 8002cc0:	20040c60 	.word	0x20040c60

08002cc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002cc8:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <SystemInit+0x20>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cce:	4a05      	ldr	r2, [pc, #20]	@ (8002ce4 <SystemInit+0x20>)
 8002cd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ce8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cec:	f7ff ffea 	bl	8002cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cf0:	480c      	ldr	r0, [pc, #48]	@ (8002d24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cf2:	490d      	ldr	r1, [pc, #52]	@ (8002d28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d2c <LoopForever+0xe>)
  movs r3, #0
 8002cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf8:	e002      	b.n	8002d00 <LoopCopyDataInit>

08002cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfe:	3304      	adds	r3, #4

08002d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d04:	d3f9      	bcc.n	8002cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d06:	4a0a      	ldr	r2, [pc, #40]	@ (8002d30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d08:	4c0a      	ldr	r4, [pc, #40]	@ (8002d34 <LoopForever+0x16>)
  movs r3, #0
 8002d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d0c:	e001      	b.n	8002d12 <LoopFillZerobss>

08002d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d10:	3204      	adds	r2, #4

08002d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d14:	d3fb      	bcc.n	8002d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d16:	f004 fd8b 	bl	8007830 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d1a:	f7fe fe9b 	bl	8001a54 <main>

08002d1e <LoopForever>:

LoopForever:
    b LoopForever
 8002d1e:	e7fe      	b.n	8002d1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d20:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002d24:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8002d28:	2004027c 	.word	0x2004027c
  ldr r2, =_sidata
 8002d2c:	0800b364 	.word	0x0800b364
  ldr r2, =_sbss
 8002d30:	2004027c 	.word	0x2004027c
  ldr r4, =_ebss
 8002d34:	20040c5c 	.word	0x20040c5c

08002d38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d38:	e7fe      	b.n	8002d38 <ADC1_IRQHandler>

08002d3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d44:	2003      	movs	r0, #3
 8002d46:	f000 f943 	bl	8002fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f000 f80e 	bl	8002d6c <HAL_InitTick>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	71fb      	strb	r3, [r7, #7]
 8002d5a:	e001      	b.n	8002d60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d5c:	f7ff fd0a 	bl	8002774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d60:	79fb      	ldrb	r3, [r7, #7]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d78:	4b17      	ldr	r3, [pc, #92]	@ (8002dd8 <HAL_InitTick+0x6c>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d023      	beq.n	8002dc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d80:	4b16      	ldr	r3, [pc, #88]	@ (8002ddc <HAL_InitTick+0x70>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b14      	ldr	r3, [pc, #80]	@ (8002dd8 <HAL_InitTick+0x6c>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 f941 	bl	800301e <HAL_SYSTICK_Config>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10f      	bne.n	8002dc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b0f      	cmp	r3, #15
 8002da6:	d809      	bhi.n	8002dbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da8:	2200      	movs	r2, #0
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	f04f 30ff 	mov.w	r0, #4294967295
 8002db0:	f000 f919 	bl	8002fe6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002db4:	4a0a      	ldr	r2, [pc, #40]	@ (8002de0 <HAL_InitTick+0x74>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e007      	b.n	8002dcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
 8002dc0:	e004      	b.n	8002dcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
 8002dc6:	e001      	b.n	8002dcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200400b0 	.word	0x200400b0
 8002ddc:	200400a8 	.word	0x200400a8
 8002de0:	200400ac 	.word	0x200400ac

08002de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002de8:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <HAL_IncTick+0x20>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <HAL_IncTick+0x24>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	4a04      	ldr	r2, [pc, #16]	@ (8002e08 <HAL_IncTick+0x24>)
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	200400b0 	.word	0x200400b0
 8002e08:	20040b0c 	.word	0x20040b0c

08002e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e10:	4b03      	ldr	r3, [pc, #12]	@ (8002e20 <HAL_GetTick+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20040b0c 	.word	0x20040b0c

08002e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff ffee 	bl	8002e0c <HAL_GetTick>
 8002e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d005      	beq.n	8002e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e68 <HAL_Delay+0x44>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e4a:	bf00      	nop
 8002e4c:	f7ff ffde 	bl	8002e0c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d8f7      	bhi.n	8002e4c <HAL_Delay+0x28>
  {
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200400b0 	.word	0x200400b0

08002e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9e:	4a04      	ldr	r2, [pc, #16]	@ (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	60d3      	str	r3, [r2, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <__NVIC_GetPriorityGrouping+0x18>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 0307 	and.w	r3, r3, #7
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	db0a      	blt.n	8002efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	490c      	ldr	r1, [pc, #48]	@ (8002f1c <__NVIC_SetPriority+0x4c>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	0112      	lsls	r2, r2, #4
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef8:	e00a      	b.n	8002f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4908      	ldr	r1, [pc, #32]	@ (8002f20 <__NVIC_SetPriority+0x50>)
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	3b04      	subs	r3, #4
 8002f08:	0112      	lsls	r2, r2, #4
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	761a      	strb	r2, [r3, #24]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000e100 	.word	0xe000e100
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	@ 0x24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f1c3 0307 	rsb	r3, r3, #7
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	bf28      	it	cs
 8002f42:	2304      	movcs	r3, #4
 8002f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d902      	bls.n	8002f54 <NVIC_EncodePriority+0x30>
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3b03      	subs	r3, #3
 8002f52:	e000      	b.n	8002f56 <NVIC_EncodePriority+0x32>
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	401a      	ands	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	43d9      	mvns	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	4313      	orrs	r3, r2
         );
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3724      	adds	r7, #36	@ 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f9c:	d301      	bcc.n	8002fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00f      	b.n	8002fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8002fcc <SysTick_Config+0x40>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002faa:	210f      	movs	r1, #15
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb0:	f7ff ff8e 	bl	8002ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb4:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <SysTick_Config+0x40>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fba:	4b04      	ldr	r3, [pc, #16]	@ (8002fcc <SysTick_Config+0x40>)
 8002fbc:	2207      	movs	r2, #7
 8002fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	e000e010 	.word	0xe000e010

08002fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ff47 	bl	8002e6c <__NVIC_SetPriorityGrouping>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	4603      	mov	r3, r0
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff8:	f7ff ff5c 	bl	8002eb4 <__NVIC_GetPriorityGrouping>
 8002ffc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	6978      	ldr	r0, [r7, #20]
 8003004:	f7ff ff8e 	bl	8002f24 <NVIC_EncodePriority>
 8003008:	4602      	mov	r2, r0
 800300a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff5d 	bl	8002ed0 <__NVIC_SetPriority>
}
 8003016:	bf00      	nop
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ffb0 	bl	8002f8c <SysTick_Config>
 800302c:	4603      	mov	r3, r0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003046:	e166      	b.n	8003316 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	2101      	movs	r1, #1
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	fa01 f303 	lsl.w	r3, r1, r3
 8003054:	4013      	ands	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8158 	beq.w	8003310 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b01      	cmp	r3, #1
 800306a:	d005      	beq.n	8003078 <HAL_GPIO_Init+0x40>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d130      	bne.n	80030da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	2203      	movs	r2, #3
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4013      	ands	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030ae:	2201      	movs	r2, #1
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	f003 0201 	and.w	r2, r3, #1
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d017      	beq.n	8003116 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	2203      	movs	r2, #3
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4013      	ands	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d123      	bne.n	800316a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	08da      	lsrs	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3208      	adds	r2, #8
 800312a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800312e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	220f      	movs	r2, #15
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43db      	mvns	r3, r3
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4013      	ands	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	08da      	lsrs	r2, r3, #3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3208      	adds	r2, #8
 8003164:	6939      	ldr	r1, [r7, #16]
 8003166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	2203      	movs	r2, #3
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 0203 	and.w	r2, r3, #3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80b2 	beq.w	8003310 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ac:	4b61      	ldr	r3, [pc, #388]	@ (8003334 <HAL_GPIO_Init+0x2fc>)
 80031ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b0:	4a60      	ldr	r2, [pc, #384]	@ (8003334 <HAL_GPIO_Init+0x2fc>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80031b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003334 <HAL_GPIO_Init+0x2fc>)
 80031ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031c4:	4a5c      	ldr	r2, [pc, #368]	@ (8003338 <HAL_GPIO_Init+0x300>)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	089b      	lsrs	r3, r3, #2
 80031ca:	3302      	adds	r3, #2
 80031cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	220f      	movs	r2, #15
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031ee:	d02b      	beq.n	8003248 <HAL_GPIO_Init+0x210>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a52      	ldr	r2, [pc, #328]	@ (800333c <HAL_GPIO_Init+0x304>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d025      	beq.n	8003244 <HAL_GPIO_Init+0x20c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a51      	ldr	r2, [pc, #324]	@ (8003340 <HAL_GPIO_Init+0x308>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d01f      	beq.n	8003240 <HAL_GPIO_Init+0x208>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a50      	ldr	r2, [pc, #320]	@ (8003344 <HAL_GPIO_Init+0x30c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d019      	beq.n	800323c <HAL_GPIO_Init+0x204>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a4f      	ldr	r2, [pc, #316]	@ (8003348 <HAL_GPIO_Init+0x310>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_GPIO_Init+0x200>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a4e      	ldr	r2, [pc, #312]	@ (800334c <HAL_GPIO_Init+0x314>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00d      	beq.n	8003234 <HAL_GPIO_Init+0x1fc>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a4d      	ldr	r2, [pc, #308]	@ (8003350 <HAL_GPIO_Init+0x318>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <HAL_GPIO_Init+0x1f8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a4c      	ldr	r2, [pc, #304]	@ (8003354 <HAL_GPIO_Init+0x31c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d101      	bne.n	800322c <HAL_GPIO_Init+0x1f4>
 8003228:	2307      	movs	r3, #7
 800322a:	e00e      	b.n	800324a <HAL_GPIO_Init+0x212>
 800322c:	2308      	movs	r3, #8
 800322e:	e00c      	b.n	800324a <HAL_GPIO_Init+0x212>
 8003230:	2306      	movs	r3, #6
 8003232:	e00a      	b.n	800324a <HAL_GPIO_Init+0x212>
 8003234:	2305      	movs	r3, #5
 8003236:	e008      	b.n	800324a <HAL_GPIO_Init+0x212>
 8003238:	2304      	movs	r3, #4
 800323a:	e006      	b.n	800324a <HAL_GPIO_Init+0x212>
 800323c:	2303      	movs	r3, #3
 800323e:	e004      	b.n	800324a <HAL_GPIO_Init+0x212>
 8003240:	2302      	movs	r3, #2
 8003242:	e002      	b.n	800324a <HAL_GPIO_Init+0x212>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <HAL_GPIO_Init+0x212>
 8003248:	2300      	movs	r3, #0
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	f002 0203 	and.w	r2, r2, #3
 8003250:	0092      	lsls	r2, r2, #2
 8003252:	4093      	lsls	r3, r2
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800325a:	4937      	ldr	r1, [pc, #220]	@ (8003338 <HAL_GPIO_Init+0x300>)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	089b      	lsrs	r3, r3, #2
 8003260:	3302      	adds	r3, #2
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003268:	4b3b      	ldr	r3, [pc, #236]	@ (8003358 <HAL_GPIO_Init+0x320>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	43db      	mvns	r3, r3
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800328c:	4a32      	ldr	r2, [pc, #200]	@ (8003358 <HAL_GPIO_Init+0x320>)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003292:	4b31      	ldr	r3, [pc, #196]	@ (8003358 <HAL_GPIO_Init+0x320>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	43db      	mvns	r3, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4013      	ands	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032b6:	4a28      	ldr	r2, [pc, #160]	@ (8003358 <HAL_GPIO_Init+0x320>)
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032bc:	4b26      	ldr	r3, [pc, #152]	@ (8003358 <HAL_GPIO_Init+0x320>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003358 <HAL_GPIO_Init+0x320>)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003358 <HAL_GPIO_Init+0x320>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800330a:	4a13      	ldr	r2, [pc, #76]	@ (8003358 <HAL_GPIO_Init+0x320>)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	3301      	adds	r3, #1
 8003314:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	f47f ae91 	bne.w	8003048 <HAL_GPIO_Init+0x10>
  }
}
 8003326:	bf00      	nop
 8003328:	bf00      	nop
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	40021000 	.word	0x40021000
 8003338:	40010000 	.word	0x40010000
 800333c:	48000400 	.word	0x48000400
 8003340:	48000800 	.word	0x48000800
 8003344:	48000c00 	.word	0x48000c00
 8003348:	48001000 	.word	0x48001000
 800334c:	48001400 	.word	0x48001400
 8003350:	48001800 	.word	0x48001800
 8003354:	48001c00 	.word	0x48001c00
 8003358:	40010400 	.word	0x40010400

0800335c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	887b      	ldrh	r3, [r7, #2]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
 8003378:	e001      	b.n	800337e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800337e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	807b      	strh	r3, [r7, #2]
 8003398:	4613      	mov	r3, r2
 800339a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800339c:	787b      	ldrb	r3, [r7, #1]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033a8:	e002      	b.n	80033b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033aa:	887a      	ldrh	r2, [r7, #2]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033c0:	4b0d      	ldr	r3, [pc, #52]	@ (80033f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033cc:	d102      	bne.n	80033d4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80033ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033d2:	e00b      	b.n	80033ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80033d4:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80033d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033e2:	d102      	bne.n	80033ea <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80033e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033e8:	e000      	b.n	80033ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80033ea:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40007000 	.word	0x40007000

080033fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d141      	bne.n	800348e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800340a:	4b4b      	ldr	r3, [pc, #300]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003416:	d131      	bne.n	800347c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003418:	4b47      	ldr	r3, [pc, #284]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800341e:	4a46      	ldr	r2, [pc, #280]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003424:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003428:	4b43      	ldr	r3, [pc, #268]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003430:	4a41      	ldr	r2, [pc, #260]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003436:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003438:	4b40      	ldr	r3, [pc, #256]	@ (800353c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2232      	movs	r2, #50	@ 0x32
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	4a3f      	ldr	r2, [pc, #252]	@ (8003540 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	0c9b      	lsrs	r3, r3, #18
 800344a:	3301      	adds	r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800344e:	e002      	b.n	8003456 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3b01      	subs	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003456:	4b38      	ldr	r3, [pc, #224]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003462:	d102      	bne.n	800346a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f2      	bne.n	8003450 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800346a:	4b33      	ldr	r3, [pc, #204]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003476:	d158      	bne.n	800352a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e057      	b.n	800352c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800347c:	4b2e      	ldr	r3, [pc, #184]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003482:	4a2d      	ldr	r2, [pc, #180]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003488:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800348c:	e04d      	b.n	800352a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003494:	d141      	bne.n	800351a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003496:	4b28      	ldr	r3, [pc, #160]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a2:	d131      	bne.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034a4:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034aa:	4a23      	ldr	r2, [pc, #140]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034b4:	4b20      	ldr	r3, [pc, #128]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80034c4:	4b1d      	ldr	r3, [pc, #116]	@ (800353c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2232      	movs	r2, #50	@ 0x32
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003540 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034d0:	fba2 2303 	umull	r2, r3, r2, r3
 80034d4:	0c9b      	lsrs	r3, r3, #18
 80034d6:	3301      	adds	r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034da:	e002      	b.n	80034e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3b01      	subs	r3, #1
 80034e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034e2:	4b15      	ldr	r3, [pc, #84]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ee:	d102      	bne.n	80034f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f2      	bne.n	80034dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034f6:	4b10      	ldr	r3, [pc, #64]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003502:	d112      	bne.n	800352a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e011      	b.n	800352c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003508:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800350a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800350e:	4a0a      	ldr	r2, [pc, #40]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003514:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003518:	e007      	b.n	800352a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800351a:	4b07      	ldr	r3, [pc, #28]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003522:	4a05      	ldr	r2, [pc, #20]	@ (8003538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003524:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003528:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	40007000 	.word	0x40007000
 800353c:	200400a8 	.word	0x200400a8
 8003540:	431bde83 	.word	0x431bde83

08003544 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003548:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <HAL_PWREx_EnableVddIO2+0x1c>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a04      	ldr	r2, [pc, #16]	@ (8003560 <HAL_PWREx_EnableVddIO2+0x1c>)
 800354e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003552:	6053      	str	r3, [r2, #4]
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40007000 	.word	0x40007000

08003564 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f000 bc08 	b.w	8003d88 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003578:	4b96      	ldr	r3, [pc, #600]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003582:	4b94      	ldr	r3, [pc, #592]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80e4 	beq.w	8003762 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4c>
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2b0c      	cmp	r3, #12
 80035a4:	f040 808b 	bne.w	80036be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	f040 8087 	bne.w	80036be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035b0:	4b88      	ldr	r3, [pc, #544]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_OscConfig+0x64>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e3df      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1a      	ldr	r2, [r3, #32]
 80035cc:	4b81      	ldr	r3, [pc, #516]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d004      	beq.n	80035e2 <HAL_RCC_OscConfig+0x7e>
 80035d8:	4b7e      	ldr	r3, [pc, #504]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035e0:	e005      	b.n	80035ee <HAL_RCC_OscConfig+0x8a>
 80035e2:	4b7c      	ldr	r3, [pc, #496]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80035e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d223      	bcs.n	800363a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fdcc 	bl	8004194 <RCC_SetFlashLatencyFromMSIRange>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e3c0      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003606:	4b73      	ldr	r3, [pc, #460]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a72      	ldr	r2, [pc, #456]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800360c:	f043 0308 	orr.w	r3, r3, #8
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4b70      	ldr	r3, [pc, #448]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	496d      	ldr	r1, [pc, #436]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003624:	4b6b      	ldr	r3, [pc, #428]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	4968      	ldr	r1, [pc, #416]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
 8003638:	e025      	b.n	8003686 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800363a:	4b66      	ldr	r3, [pc, #408]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a65      	ldr	r2, [pc, #404]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003640:	f043 0308 	orr.w	r3, r3, #8
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	4b63      	ldr	r3, [pc, #396]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	4960      	ldr	r1, [pc, #384]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003658:	4b5e      	ldr	r3, [pc, #376]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	495b      	ldr	r1, [pc, #364]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fd8c 	bl	8004194 <RCC_SetFlashLatencyFromMSIRange>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e380      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003686:	f000 fcc1 	bl	800400c <HAL_RCC_GetSysClockFreq>
 800368a:	4602      	mov	r2, r0
 800368c:	4b51      	ldr	r3, [pc, #324]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	4950      	ldr	r1, [pc, #320]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003698:	5ccb      	ldrb	r3, [r1, r3]
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	fa22 f303 	lsr.w	r3, r2, r3
 80036a2:	4a4e      	ldr	r2, [pc, #312]	@ (80037dc <HAL_RCC_OscConfig+0x278>)
 80036a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036a6:	4b4e      	ldr	r3, [pc, #312]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fb5e 	bl	8002d6c <HAL_InitTick>
 80036b0:	4603      	mov	r3, r0
 80036b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d052      	beq.n	8003760 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	e364      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d032      	beq.n	800372c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036c6:	4b43      	ldr	r3, [pc, #268]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a42      	ldr	r2, [pc, #264]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036d2:	f7ff fb9b 	bl	8002e0c <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036da:	f7ff fb97 	bl	8002e0c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e34d      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036ec:	4b39      	ldr	r3, [pc, #228]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036f8:	4b36      	ldr	r3, [pc, #216]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a35      	ldr	r2, [pc, #212]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80036fe:	f043 0308 	orr.w	r3, r3, #8
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	4b33      	ldr	r3, [pc, #204]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4930      	ldr	r1, [pc, #192]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003716:	4b2f      	ldr	r3, [pc, #188]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	492b      	ldr	r1, [pc, #172]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003726:	4313      	orrs	r3, r2
 8003728:	604b      	str	r3, [r1, #4]
 800372a:	e01a      	b.n	8003762 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800372c:	4b29      	ldr	r3, [pc, #164]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a28      	ldr	r2, [pc, #160]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003732:	f023 0301 	bic.w	r3, r3, #1
 8003736:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003738:	f7ff fb68 	bl	8002e0c <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003740:	f7ff fb64 	bl	8002e0c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e31a      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003752:	4b20      	ldr	r3, [pc, #128]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x1dc>
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003760:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d073      	beq.n	8003856 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b08      	cmp	r3, #8
 8003772:	d005      	beq.n	8003780 <HAL_RCC_OscConfig+0x21c>
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b0c      	cmp	r3, #12
 8003778:	d10e      	bne.n	8003798 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d10b      	bne.n	8003798 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	4b14      	ldr	r3, [pc, #80]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d063      	beq.n	8003854 <HAL_RCC_OscConfig+0x2f0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d15f      	bne.n	8003854 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e2f7      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037a0:	d106      	bne.n	80037b0 <HAL_RCC_OscConfig+0x24c>
 80037a2:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a0b      	ldr	r2, [pc, #44]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e025      	b.n	80037fc <HAL_RCC_OscConfig+0x298>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037b8:	d114      	bne.n	80037e4 <HAL_RCC_OscConfig+0x280>
 80037ba:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a05      	ldr	r2, [pc, #20]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a02      	ldr	r2, [pc, #8]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e013      	b.n	80037fc <HAL_RCC_OscConfig+0x298>
 80037d4:	40021000 	.word	0x40021000
 80037d8:	0800ae44 	.word	0x0800ae44
 80037dc:	200400a8 	.word	0x200400a8
 80037e0:	200400ac 	.word	0x200400ac
 80037e4:	4ba0      	ldr	r3, [pc, #640]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a9f      	ldr	r2, [pc, #636]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b9d      	ldr	r3, [pc, #628]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a9c      	ldr	r2, [pc, #624]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80037f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7ff fb02 	bl	8002e0c <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800380c:	f7ff fafe 	bl	8002e0c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	@ 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e2b4      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800381e:	4b92      	ldr	r3, [pc, #584]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x2a8>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7ff faee 	bl	8002e0c <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003834:	f7ff faea 	bl	8002e0c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	@ 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e2a0      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003846:	4b88      	ldr	r3, [pc, #544]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x2d0>
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d060      	beq.n	8003924 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b04      	cmp	r3, #4
 8003866:	d005      	beq.n	8003874 <HAL_RCC_OscConfig+0x310>
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d119      	bne.n	80038a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d116      	bne.n	80038a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003874:	4b7c      	ldr	r3, [pc, #496]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_OscConfig+0x328>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e27d      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388c:	4b76      	ldr	r3, [pc, #472]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	061b      	lsls	r3, r3, #24
 800389a:	4973      	ldr	r1, [pc, #460]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a0:	e040      	b.n	8003924 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d023      	beq.n	80038f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038aa:	4b6f      	ldr	r3, [pc, #444]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b6:	f7ff faa9 	bl	8002e0c <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038be:	f7ff faa5 	bl	8002e0c <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e25b      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d0:	4b65      	ldr	r3, [pc, #404]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038dc:	4b62      	ldr	r3, [pc, #392]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	061b      	lsls	r3, r3, #24
 80038ea:	495f      	ldr	r1, [pc, #380]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
 80038f0:	e018      	b.n	8003924 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7ff fa85 	bl	8002e0c <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003906:	f7ff fa81 	bl	8002e0c <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e237      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003918:	4b53      	ldr	r3, [pc, #332]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f0      	bne.n	8003906 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d03c      	beq.n	80039aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01c      	beq.n	8003972 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003938:	4b4b      	ldr	r3, [pc, #300]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800393e:	4a4a      	ldr	r2, [pc, #296]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7ff fa60 	bl	8002e0c <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003950:	f7ff fa5c 	bl	8002e0c <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e212      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003962:	4b41      	ldr	r3, [pc, #260]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ef      	beq.n	8003950 <HAL_RCC_OscConfig+0x3ec>
 8003970:	e01b      	b.n	80039aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003972:	4b3d      	ldr	r3, [pc, #244]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003978:	4a3b      	ldr	r2, [pc, #236]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003982:	f7ff fa43 	bl	8002e0c <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398a:	f7ff fa3f 	bl	8002e0c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1f5      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800399c:	4b32      	ldr	r3, [pc, #200]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800399e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1ef      	bne.n	800398a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80a6 	beq.w	8003b04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b8:	2300      	movs	r3, #0
 80039ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10d      	bne.n	80039e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c8:	4b27      	ldr	r3, [pc, #156]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039cc:	4a26      	ldr	r2, [pc, #152]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80039ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80039d4:	4b24      	ldr	r3, [pc, #144]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e0:	2301      	movs	r3, #1
 80039e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e4:	4b21      	ldr	r3, [pc, #132]	@ (8003a6c <HAL_RCC_OscConfig+0x508>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d118      	bne.n	8003a22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a6c <HAL_RCC_OscConfig+0x508>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a6c <HAL_RCC_OscConfig+0x508>)
 80039f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fc:	f7ff fa06 	bl	8002e0c <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a04:	f7ff fa02 	bl	8002e0c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e1b8      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a16:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <HAL_RCC_OscConfig+0x508>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d108      	bne.n	8003a3c <HAL_RCC_OscConfig+0x4d8>
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a30:	4a0d      	ldr	r2, [pc, #52]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a3a:	e029      	b.n	8003a90 <HAL_RCC_OscConfig+0x52c>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	d115      	bne.n	8003a70 <HAL_RCC_OscConfig+0x50c>
 8003a44:	4b08      	ldr	r3, [pc, #32]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4a:	4a07      	ldr	r2, [pc, #28]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a4c:	f043 0304 	orr.w	r3, r3, #4
 8003a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a54:	4b04      	ldr	r3, [pc, #16]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5a:	4a03      	ldr	r2, [pc, #12]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a64:	e014      	b.n	8003a90 <HAL_RCC_OscConfig+0x52c>
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	4b9d      	ldr	r3, [pc, #628]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a76:	4a9c      	ldr	r2, [pc, #624]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a80:	4b99      	ldr	r3, [pc, #612]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a86:	4a98      	ldr	r2, [pc, #608]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003a88:	f023 0304 	bic.w	r3, r3, #4
 8003a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d016      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7ff f9b8 	bl	8002e0c <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7ff f9b4 	bl	8002e0c <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e168      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab6:	4b8c      	ldr	r3, [pc, #560]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0ed      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x53c>
 8003ac4:	e015      	b.n	8003af2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac6:	f7ff f9a1 	bl	8002e0c <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7ff f99d 	bl	8002e0c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e151      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ae4:	4b80      	ldr	r3, [pc, #512]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1ed      	bne.n	8003ace <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af2:	7ffb      	ldrb	r3, [r7, #31]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d105      	bne.n	8003b04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afc:	4a7a      	ldr	r2, [pc, #488]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d03c      	beq.n	8003b8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01c      	beq.n	8003b52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b18:	4b73      	ldr	r3, [pc, #460]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b1e:	4a72      	ldr	r2, [pc, #456]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7ff f970 	bl	8002e0c <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b30:	f7ff f96c 	bl	8002e0c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e122      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b42:	4b69      	ldr	r3, [pc, #420]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ef      	beq.n	8003b30 <HAL_RCC_OscConfig+0x5cc>
 8003b50:	e01b      	b.n	8003b8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b52:	4b65      	ldr	r3, [pc, #404]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b58:	4a63      	ldr	r2, [pc, #396]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b62:	f7ff f953 	bl	8002e0c <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b6a:	f7ff f94f 	bl	8002e0c <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e105      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1ef      	bne.n	8003b6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 80f9 	beq.w	8003d86 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	f040 80cf 	bne.w	8003d3c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b9e:	4b52      	ldr	r3, [pc, #328]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f003 0203 	and.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d12c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d123      	bne.n	8003c0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d11b      	bne.n	8003c0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bde:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d113      	bne.n	8003c0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d109      	bne.n	8003c0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	3b01      	subs	r3, #1
 8003c06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d071      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2b0c      	cmp	r3, #12
 8003c10:	d068      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c12:	4b35      	ldr	r3, [pc, #212]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d105      	bne.n	8003c2a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c1e:	4b32      	ldr	r3, [pc, #200]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0ac      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a2d      	ldr	r2, [pc, #180]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003c34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c3a:	f7ff f8e7 	bl	8002e0c <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c42:	f7ff f8e3 	bl	8002e0c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e099      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c54:	4b24      	ldr	r3, [pc, #144]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f0      	bne.n	8003c42 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c60:	4b21      	ldr	r3, [pc, #132]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	4b21      	ldr	r3, [pc, #132]	@ (8003cec <HAL_RCC_OscConfig+0x788>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c70:	3a01      	subs	r2, #1
 8003c72:	0112      	lsls	r2, r2, #4
 8003c74:	4311      	orrs	r1, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c7a:	0212      	lsls	r2, r2, #8
 8003c7c:	4311      	orrs	r1, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c82:	0852      	lsrs	r2, r2, #1
 8003c84:	3a01      	subs	r2, #1
 8003c86:	0552      	lsls	r2, r2, #21
 8003c88:	4311      	orrs	r1, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c8e:	0852      	lsrs	r2, r2, #1
 8003c90:	3a01      	subs	r2, #1
 8003c92:	0652      	lsls	r2, r2, #25
 8003c94:	4311      	orrs	r1, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c9a:	06d2      	lsls	r2, r2, #27
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	4912      	ldr	r1, [pc, #72]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ca4:	4b10      	ldr	r3, [pc, #64]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003caa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cbc:	f7ff f8a6 	bl	8002e0c <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc4:	f7ff f8a2 	bl	8002e0c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e058      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd6:	4b04      	ldr	r3, [pc, #16]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ce2:	e050      	b.n	8003d86 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e04f      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf0:	4b27      	ldr	r3, [pc, #156]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d144      	bne.n	8003d86 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b24      	ldr	r3, [pc, #144]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a23      	ldr	r2, [pc, #140]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d08:	4b21      	ldr	r3, [pc, #132]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4a20      	ldr	r2, [pc, #128]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d14:	f7ff f87a 	bl	8002e0c <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7ff f876 	bl	8002e0c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e02c      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2e:	4b18      	ldr	r3, [pc, #96]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x7b8>
 8003d3a:	e024      	b.n	8003d86 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d01f      	beq.n	8003d82 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	4b13      	ldr	r3, [pc, #76]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a12      	ldr	r2, [pc, #72]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4e:	f7ff f85d 	bl	8002e0c <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d56:	f7ff f859 	bl	8002e0c <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e00f      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d68:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f0      	bne.n	8003d56 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d74:	4b06      	ldr	r3, [pc, #24]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	4905      	ldr	r1, [pc, #20]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d7a:	4b06      	ldr	r3, [pc, #24]	@ (8003d94 <HAL_RCC_OscConfig+0x830>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60cb      	str	r3, [r1, #12]
 8003d80:	e001      	b.n	8003d86 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3720      	adds	r7, #32
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40021000 	.word	0x40021000
 8003d94:	feeefffc 	.word	0xfeeefffc

08003d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e11d      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db0:	4b90      	ldr	r3, [pc, #576]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d910      	bls.n	8003de0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbe:	4b8d      	ldr	r3, [pc, #564]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f023 020f 	bic.w	r2, r3, #15
 8003dc6:	498b      	ldr	r1, [pc, #556]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b89      	ldr	r3, [pc, #548]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e105      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d010      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	4b81      	ldr	r3, [pc, #516]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d908      	bls.n	8003e0e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dfc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	497b      	ldr	r1, [pc, #492]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d079      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d11e      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e22:	4b75      	ldr	r3, [pc, #468]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e0dc      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003e32:	f000 fa09 	bl	8004248 <RCC_GetSysClockFreqFromPLLSource>
 8003e36:	4603      	mov	r3, r0
 8003e38:	4a70      	ldr	r2, [pc, #448]	@ (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d946      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e3e:	4b6e      	ldr	r3, [pc, #440]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d140      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e4a:	4b6b      	ldr	r3, [pc, #428]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e52:	4a69      	ldr	r2, [pc, #420]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e5a:	2380      	movs	r3, #128	@ 0x80
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e035      	b.n	8003ecc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e68:	4b63      	ldr	r3, [pc, #396]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d115      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0b9      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d107      	bne.n	8003e90 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e80:	4b5d      	ldr	r3, [pc, #372]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d109      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0ad      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e90:	4b59      	ldr	r3, [pc, #356]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0a5      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003ea0:	f000 f8b4 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	4a55      	ldr	r2, [pc, #340]	@ (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d90f      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003eac:	4b52      	ldr	r3, [pc, #328]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d109      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003eb8:	4b4f      	ldr	r3, [pc, #316]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ec0:	4a4d      	ldr	r2, [pc, #308]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ec8:	2380      	movs	r3, #128	@ 0x80
 8003eca:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ecc:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f023 0203 	bic.w	r2, r3, #3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4947      	ldr	r1, [pc, #284]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ede:	f7fe ff95 	bl	8002e0c <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee4:	e00a      	b.n	8003efc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee6:	f7fe ff91 	bl	8002e0c <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e077      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efc:	4b3e      	ldr	r3, [pc, #248]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 020c 	and.w	r2, r3, #12
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d1eb      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b80      	cmp	r3, #128	@ 0x80
 8003f12:	d105      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f14:	4b38      	ldr	r3, [pc, #224]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a37      	ldr	r2, [pc, #220]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f1e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d010      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	4b31      	ldr	r3, [pc, #196]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d208      	bcs.n	8003f4e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	492b      	ldr	r1, [pc, #172]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4e:	4b29      	ldr	r3, [pc, #164]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d210      	bcs.n	8003f7e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5c:	4b25      	ldr	r3, [pc, #148]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 020f 	bic.w	r2, r3, #15
 8003f64:	4923      	ldr	r1, [pc, #140]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6c:	4b21      	ldr	r3, [pc, #132]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d001      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e036      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	4918      	ldr	r1, [pc, #96]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d009      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fa8:	4b13      	ldr	r3, [pc, #76]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4910      	ldr	r1, [pc, #64]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fbc:	f000 f826 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	490c      	ldr	r1, [pc, #48]	@ (8004000 <HAL_RCC_ClockConfig+0x268>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8004004 <HAL_RCC_ClockConfig+0x26c>)
 8003fda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <HAL_RCC_ClockConfig+0x270>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe fec3 	bl	8002d6c <HAL_InitTick>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	73fb      	strb	r3, [r7, #15]

  return status;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40022000 	.word	0x40022000
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	04c4b400 	.word	0x04c4b400
 8004000:	0800ae44 	.word	0x0800ae44
 8004004:	200400a8 	.word	0x200400a8
 8004008:	200400ac 	.word	0x200400ac

0800400c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800400c:	b480      	push	{r7}
 800400e:	b089      	sub	sp, #36	@ 0x24
 8004010:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	2300      	movs	r3, #0
 8004018:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800401a:	4b3e      	ldr	r3, [pc, #248]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004024:	4b3b      	ldr	r3, [pc, #236]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x34>
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	2b0c      	cmp	r3, #12
 8004038:	d121      	bne.n	800407e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d11e      	bne.n	800407e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004040:	4b34      	ldr	r3, [pc, #208]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d107      	bne.n	800405c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800404c:	4b31      	ldr	r3, [pc, #196]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800404e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	e005      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800405c:	4b2d      	ldr	r3, [pc, #180]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004068:	4a2b      	ldr	r2, [pc, #172]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x10c>)
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004070:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10d      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b04      	cmp	r3, #4
 8004082:	d102      	bne.n	800408a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004084:	4b25      	ldr	r3, [pc, #148]	@ (800411c <HAL_RCC_GetSysClockFreq+0x110>)
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	e004      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d101      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004090:	4b23      	ldr	r3, [pc, #140]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x114>)
 8004092:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b0c      	cmp	r3, #12
 8004098:	d134      	bne.n	8004104 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800409a:	4b1e      	ldr	r3, [pc, #120]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d003      	beq.n	80040b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d003      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0xac>
 80040b0:	e005      	b.n	80040be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040b2:	4b1a      	ldr	r3, [pc, #104]	@ (800411c <HAL_RCC_GetSysClockFreq+0x110>)
 80040b4:	617b      	str	r3, [r7, #20]
      break;
 80040b6:	e005      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040b8:	4b19      	ldr	r3, [pc, #100]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x114>)
 80040ba:	617b      	str	r3, [r7, #20]
      break;
 80040bc:	e002      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	617b      	str	r3, [r7, #20]
      break;
 80040c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040c4:	4b13      	ldr	r3, [pc, #76]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	3301      	adds	r3, #1
 80040d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040d2:	4b10      	ldr	r3, [pc, #64]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	0a1b      	lsrs	r3, r3, #8
 80040d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	fb03 f202 	mul.w	r2, r3, r2
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	0e5b      	lsrs	r3, r3, #25
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	3301      	adds	r3, #1
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004102:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004104:	69bb      	ldr	r3, [r7, #24]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3724      	adds	r7, #36	@ 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	0800ae5c 	.word	0x0800ae5c
 800411c:	00f42400 	.word	0x00f42400
 8004120:	007a1200 	.word	0x007a1200

08004124 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004128:	4b03      	ldr	r3, [pc, #12]	@ (8004138 <HAL_RCC_GetHCLKFreq+0x14>)
 800412a:	681b      	ldr	r3, [r3, #0]
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	200400a8 	.word	0x200400a8

0800413c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004140:	f7ff fff0 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 8004144:	4602      	mov	r2, r0
 8004146:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	0a1b      	lsrs	r3, r3, #8
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	4904      	ldr	r1, [pc, #16]	@ (8004164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004152:	5ccb      	ldrb	r3, [r1, r3]
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800415c:	4618      	mov	r0, r3
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40021000 	.word	0x40021000
 8004164:	0800ae54 	.word	0x0800ae54

08004168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800416c:	f7ff ffda 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b06      	ldr	r3, [pc, #24]	@ (800418c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0adb      	lsrs	r3, r3, #11
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4904      	ldr	r1, [pc, #16]	@ (8004190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004188:	4618      	mov	r0, r3
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40021000 	.word	0x40021000
 8004190:	0800ae54 	.word	0x0800ae54

08004194 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041a0:	4b27      	ldr	r3, [pc, #156]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041ac:	f7ff f906 	bl	80033bc <HAL_PWREx_GetVoltageRange>
 80041b0:	6178      	str	r0, [r7, #20]
 80041b2:	e014      	b.n	80041de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041b4:	4b22      	ldr	r3, [pc, #136]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b8:	4a21      	ldr	r2, [pc, #132]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041be:	6593      	str	r3, [r2, #88]	@ 0x58
 80041c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041cc:	f7ff f8f6 	bl	80033bc <HAL_PWREx_GetVoltageRange>
 80041d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041e4:	d10b      	bne.n	80041fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b80      	cmp	r3, #128	@ 0x80
 80041ea:	d913      	bls.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80041f0:	d902      	bls.n	80041f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041f2:	2302      	movs	r3, #2
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	e00d      	b.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041f8:	2301      	movs	r3, #1
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	e00a      	b.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b7f      	cmp	r3, #127	@ 0x7f
 8004202:	d902      	bls.n	800420a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004204:	2302      	movs	r3, #2
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	e004      	b.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b70      	cmp	r3, #112	@ 0x70
 800420e:	d101      	bne.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004210:	2301      	movs	r3, #1
 8004212:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004214:	4b0b      	ldr	r3, [pc, #44]	@ (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f023 020f 	bic.w	r2, r3, #15
 800421c:	4909      	ldr	r1, [pc, #36]	@ (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004224:	4b07      	ldr	r3, [pc, #28]	@ (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	429a      	cmp	r2, r3
 8004230:	d001      	beq.n	8004236 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40021000 	.word	0x40021000
 8004244:	40022000 	.word	0x40022000

08004248 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800424e:	4b2d      	ldr	r3, [pc, #180]	@ (8004304 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b03      	cmp	r3, #3
 800425c:	d00b      	beq.n	8004276 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d825      	bhi.n	80042b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d008      	beq.n	800427c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d11f      	bne.n	80042b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004270:	4b25      	ldr	r3, [pc, #148]	@ (8004308 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004272:	613b      	str	r3, [r7, #16]
    break;
 8004274:	e01f      	b.n	80042b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004276:	4b25      	ldr	r3, [pc, #148]	@ (800430c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004278:	613b      	str	r3, [r7, #16]
    break;
 800427a:	e01c      	b.n	80042b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800427c:	4b21      	ldr	r3, [pc, #132]	@ (8004304 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d107      	bne.n	8004298 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004288:	4b1e      	ldr	r3, [pc, #120]	@ (8004304 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800428a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	e005      	b.n	80042a4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004298:	4b1a      	ldr	r3, [pc, #104]	@ (8004304 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80042a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004310 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ac:	613b      	str	r3, [r7, #16]
    break;
 80042ae:	e002      	b.n	80042b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]
    break;
 80042b4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042b6:	4b13      	ldr	r3, [pc, #76]	@ (8004304 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	091b      	lsrs	r3, r3, #4
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	3301      	adds	r3, #1
 80042c2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004304 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	fb03 f202 	mul.w	r2, r3, r2
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042dc:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	0e5b      	lsrs	r3, r3, #25
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	3301      	adds	r3, #1
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80042f6:	683b      	ldr	r3, [r7, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40021000 	.word	0x40021000
 8004308:	00f42400 	.word	0x00f42400
 800430c:	007a1200 	.word	0x007a1200
 8004310:	0800ae5c 	.word	0x0800ae5c

08004314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800431c:	2300      	movs	r3, #0
 800431e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004320:	2300      	movs	r3, #0
 8004322:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800432c:	2b00      	cmp	r3, #0
 800432e:	d040      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004334:	2b80      	cmp	r3, #128	@ 0x80
 8004336:	d02a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004338:	2b80      	cmp	r3, #128	@ 0x80
 800433a:	d825      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800433c:	2b60      	cmp	r3, #96	@ 0x60
 800433e:	d026      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004340:	2b60      	cmp	r3, #96	@ 0x60
 8004342:	d821      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004344:	2b40      	cmp	r3, #64	@ 0x40
 8004346:	d006      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004348:	2b40      	cmp	r3, #64	@ 0x40
 800434a:	d81d      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004350:	2b20      	cmp	r3, #32
 8004352:	d010      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004354:	e018      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004356:	4b89      	ldr	r3, [pc, #548]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	4a88      	ldr	r2, [pc, #544]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800435c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004360:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004362:	e015      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3304      	adds	r3, #4
 8004368:	2100      	movs	r1, #0
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fb02 	bl	8004974 <RCCEx_PLLSAI1_Config>
 8004370:	4603      	mov	r3, r0
 8004372:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004374:	e00c      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3320      	adds	r3, #32
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fbed 	bl	8004b5c <RCCEx_PLLSAI2_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004386:	e003      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	74fb      	strb	r3, [r7, #19]
      break;
 800438c:	e000      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800438e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004390:	7cfb      	ldrb	r3, [r7, #19]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10b      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004396:	4b79      	ldr	r3, [pc, #484]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004398:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800439c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043a4:	4975      	ldr	r1, [pc, #468]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80043ac:	e001      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d047      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c6:	d030      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80043c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043cc:	d82a      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d2:	d02a      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80043d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d8:	d824      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043de:	d008      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80043e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043e4:	d81e      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80043ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ee:	d010      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80043f0:	e018      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043f2:	4b62      	ldr	r3, [pc, #392]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	4a61      	ldr	r2, [pc, #388]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043fe:	e015      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3304      	adds	r3, #4
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fab4 	bl	8004974 <RCCEx_PLLSAI1_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004410:	e00c      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3320      	adds	r3, #32
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fb9f 	bl	8004b5c <RCCEx_PLLSAI2_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004422:	e003      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	74fb      	strb	r3, [r7, #19]
      break;
 8004428:	e000      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800442a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800442c:	7cfb      	ldrb	r3, [r7, #19]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10b      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004432:	4b52      	ldr	r3, [pc, #328]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004434:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004438:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004440:	494e      	ldr	r1, [pc, #312]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004448:	e001      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444a:	7cfb      	ldrb	r3, [r7, #19]
 800444c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 809f 	beq.w	800459a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445c:	2300      	movs	r3, #0
 800445e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004460:	4b46      	ldr	r3, [pc, #280]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004470:	2300      	movs	r3, #0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004476:	4b41      	ldr	r3, [pc, #260]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447a:	4a40      	ldr	r2, [pc, #256]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800447c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004480:	6593      	str	r3, [r2, #88]	@ 0x58
 8004482:	4b3e      	ldr	r3, [pc, #248]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800448e:	2301      	movs	r3, #1
 8004490:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004492:	4b3b      	ldr	r3, [pc, #236]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a3a      	ldr	r2, [pc, #232]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800449c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800449e:	f7fe fcb5 	bl	8002e0c <HAL_GetTick>
 80044a2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044a4:	e009      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a6:	f7fe fcb1 	bl	8002e0c <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d902      	bls.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	74fb      	strb	r3, [r7, #19]
        break;
 80044b8:	e005      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044ba:	4b31      	ldr	r3, [pc, #196]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0ef      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80044c6:	7cfb      	ldrb	r3, [r7, #19]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d15b      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044cc:	4b2b      	ldr	r3, [pc, #172]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01f      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d019      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044ea:	4b24      	ldr	r3, [pc, #144]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044f6:	4b21      	ldr	r3, [pc, #132]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044fc:	4a1f      	ldr	r2, [pc, #124]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004502:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004506:	4b1d      	ldr	r3, [pc, #116]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450c:	4a1b      	ldr	r2, [pc, #108]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800450e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004516:	4a19      	ldr	r2, [pc, #100]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d016      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fe fc70 	bl	8002e0c <HAL_GetTick>
 800452c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800452e:	e00b      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004530:	f7fe fc6c 	bl	8002e0c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d902      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	74fb      	strb	r3, [r7, #19]
            break;
 8004546:	e006      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004548:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0ec      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004556:	7cfb      	ldrb	r3, [r7, #19]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10c      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800455c:	4b07      	ldr	r3, [pc, #28]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004562:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456c:	4903      	ldr	r1, [pc, #12]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004574:	e008      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004576:	7cfb      	ldrb	r3, [r7, #19]
 8004578:	74bb      	strb	r3, [r7, #18]
 800457a:	e005      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800457c:	40021000 	.word	0x40021000
 8004580:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004588:	7c7b      	ldrb	r3, [r7, #17]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d105      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458e:	4ba0      	ldr	r3, [pc, #640]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004592:	4a9f      	ldr	r2, [pc, #636]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004598:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045a6:	4b9a      	ldr	r3, [pc, #616]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ac:	f023 0203 	bic.w	r2, r3, #3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b4:	4996      	ldr	r1, [pc, #600]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045c8:	4b91      	ldr	r3, [pc, #580]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ce:	f023 020c 	bic.w	r2, r3, #12
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	498e      	ldr	r1, [pc, #568]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045ea:	4b89      	ldr	r3, [pc, #548]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f8:	4985      	ldr	r1, [pc, #532]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800460c:	4b80      	ldr	r3, [pc, #512]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004612:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800461a:	497d      	ldr	r1, [pc, #500]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0310 	and.w	r3, r3, #16
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800462e:	4b78      	ldr	r3, [pc, #480]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004634:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463c:	4974      	ldr	r1, [pc, #464]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004650:	4b6f      	ldr	r3, [pc, #444]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004656:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465e:	496c      	ldr	r1, [pc, #432]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004672:	4b67      	ldr	r3, [pc, #412]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004678:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004680:	4963      	ldr	r1, [pc, #396]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004694:	4b5e      	ldr	r3, [pc, #376]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046a2:	495b      	ldr	r1, [pc, #364]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046b6:	4b56      	ldr	r3, [pc, #344]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c4:	4952      	ldr	r1, [pc, #328]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e6:	494a      	ldr	r1, [pc, #296]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046fa:	4b45      	ldr	r3, [pc, #276]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004700:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004708:	4941      	ldr	r1, [pc, #260]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800471c:	4b3c      	ldr	r3, [pc, #240]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800471e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004722:	f023 0203 	bic.w	r2, r3, #3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800472a:	4939      	ldr	r1, [pc, #228]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d028      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800473e:	4b34      	ldr	r3, [pc, #208]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004744:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800474c:	4930      	ldr	r1, [pc, #192]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004758:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800475c:	d106      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800475e:	4b2c      	ldr	r3, [pc, #176]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	4a2b      	ldr	r2, [pc, #172]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004764:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004768:	60d3      	str	r3, [r2, #12]
 800476a:	e011      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004770:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004774:	d10c      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3304      	adds	r3, #4
 800477a:	2101      	movs	r1, #1
 800477c:	4618      	mov	r0, r3
 800477e:	f000 f8f9 	bl	8004974 <RCCEx_PLLSAI1_Config>
 8004782:	4603      	mov	r3, r0
 8004784:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d04d      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047a4:	d108      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80047a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047ac:	4a18      	ldr	r2, [pc, #96]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047b2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80047b6:	e012      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80047b8:	4b15      	ldr	r3, [pc, #84]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047be:	4a14      	ldr	r2, [pc, #80]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047c4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80047c8:	4b11      	ldr	r3, [pc, #68]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047d6:	490e      	ldr	r1, [pc, #56]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047e6:	d106      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e8:	4b09      	ldr	r3, [pc, #36]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4a08      	ldr	r2, [pc, #32]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047f2:	60d3      	str	r3, [r2, #12]
 80047f4:	e020      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047fe:	d109      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004800:	4b03      	ldr	r3, [pc, #12]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a02      	ldr	r2, [pc, #8]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800480a:	60d3      	str	r3, [r2, #12]
 800480c:	e014      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800480e:	bf00      	nop
 8004810:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004818:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800481c:	d10c      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3304      	adds	r3, #4
 8004822:	2101      	movs	r1, #1
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f8a5 	bl	8004974 <RCCEx_PLLSAI1_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800482e:	7cfb      	ldrb	r3, [r7, #19]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d028      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004844:	4b4a      	ldr	r3, [pc, #296]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004852:	4947      	ldr	r1, [pc, #284]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800485e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004862:	d106      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004864:	4b42      	ldr	r3, [pc, #264]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4a41      	ldr	r2, [pc, #260]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800486a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800486e:	60d3      	str	r3, [r2, #12]
 8004870:	e011      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004876:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800487a:	d10c      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	2101      	movs	r1, #1
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f876 	bl	8004974 <RCCEx_PLLSAI1_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004892:	7cfb      	ldrb	r3, [r7, #19]
 8004894:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d01e      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048a2:	4b33      	ldr	r3, [pc, #204]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048b2:	492f      	ldr	r1, [pc, #188]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	2102      	movs	r1, #2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 f851 	bl	8004974 <RCCEx_PLLSAI1_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048d6:	7cfb      	ldrb	r3, [r7, #19]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80048dc:	7cfb      	ldrb	r3, [r7, #19]
 80048de:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048ec:	4b20      	ldr	r3, [pc, #128]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048f2:	f023 0204 	bic.w	r2, r3, #4
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048fc:	491c      	ldr	r1, [pc, #112]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00b      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004910:	4b17      	ldr	r3, [pc, #92]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004912:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004916:	f023 0218 	bic.w	r2, r3, #24
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004920:	4913      	ldr	r1, [pc, #76]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d017      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004934:	4b0e      	ldr	r3, [pc, #56]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004936:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800493a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004944:	490a      	ldr	r1, [pc, #40]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004952:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004956:	d105      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004958:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4a04      	ldr	r2, [pc, #16]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800495e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004962:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004964:	7cbb      	ldrb	r3, [r7, #18]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000

08004974 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004982:	4b72      	ldr	r3, [pc, #456]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00e      	beq.n	80049ac <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800498e:	4b6f      	ldr	r3, [pc, #444]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0203 	and.w	r2, r3, #3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d103      	bne.n	80049a6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
       ||
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d142      	bne.n	8004a2c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
 80049aa:	e03f      	b.n	8004a2c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d018      	beq.n	80049e6 <RCCEx_PLLSAI1_Config+0x72>
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d825      	bhi.n	8004a04 <RCCEx_PLLSAI1_Config+0x90>
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d002      	beq.n	80049c2 <RCCEx_PLLSAI1_Config+0x4e>
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d009      	beq.n	80049d4 <RCCEx_PLLSAI1_Config+0x60>
 80049c0:	e020      	b.n	8004a04 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049c2:	4b62      	ldr	r3, [pc, #392]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d11d      	bne.n	8004a0a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d2:	e01a      	b.n	8004a0a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049d4:	4b5d      	ldr	r3, [pc, #372]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d116      	bne.n	8004a0e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049e4:	e013      	b.n	8004a0e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049e6:	4b59      	ldr	r3, [pc, #356]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10f      	bne.n	8004a12 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049f2:	4b56      	ldr	r3, [pc, #344]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d109      	bne.n	8004a12 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a02:	e006      	b.n	8004a12 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
      break;
 8004a08:	e004      	b.n	8004a14 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004a0a:	bf00      	nop
 8004a0c:	e002      	b.n	8004a14 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004a0e:	bf00      	nop
 8004a10:	e000      	b.n	8004a14 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004a12:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d108      	bne.n	8004a2c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f023 0203 	bic.w	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4949      	ldr	r1, [pc, #292]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 8086 	bne.w	8004b40 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a34:	4b45      	ldr	r3, [pc, #276]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a44      	ldr	r2, [pc, #272]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a40:	f7fe f9e4 	bl	8002e0c <HAL_GetTick>
 8004a44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a46:	e009      	b.n	8004a5c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a48:	f7fe f9e0 	bl	8002e0c <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d902      	bls.n	8004a5c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	73fb      	strb	r3, [r7, #15]
        break;
 8004a5a:	e005      	b.n	8004a68 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1ef      	bne.n	8004a48 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d168      	bne.n	8004b40 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d113      	bne.n	8004a9c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a74:	4b35      	ldr	r3, [pc, #212]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	4b35      	ldr	r3, [pc, #212]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6892      	ldr	r2, [r2, #8]
 8004a80:	0211      	lsls	r1, r2, #8
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68d2      	ldr	r2, [r2, #12]
 8004a86:	06d2      	lsls	r2, r2, #27
 8004a88:	4311      	orrs	r1, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6852      	ldr	r2, [r2, #4]
 8004a8e:	3a01      	subs	r2, #1
 8004a90:	0112      	lsls	r2, r2, #4
 8004a92:	430a      	orrs	r2, r1
 8004a94:	492d      	ldr	r1, [pc, #180]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	610b      	str	r3, [r1, #16]
 8004a9a:	e02d      	b.n	8004af8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d115      	bne.n	8004ace <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8004b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6892      	ldr	r2, [r2, #8]
 8004aae:	0211      	lsls	r1, r2, #8
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6912      	ldr	r2, [r2, #16]
 8004ab4:	0852      	lsrs	r2, r2, #1
 8004ab6:	3a01      	subs	r2, #1
 8004ab8:	0552      	lsls	r2, r2, #21
 8004aba:	4311      	orrs	r1, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6852      	ldr	r2, [r2, #4]
 8004ac0:	3a01      	subs	r2, #1
 8004ac2:	0112      	lsls	r2, r2, #4
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	4921      	ldr	r1, [pc, #132]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	610b      	str	r3, [r1, #16]
 8004acc:	e014      	b.n	8004af8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ace:	4b1f      	ldr	r3, [pc, #124]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	4b21      	ldr	r3, [pc, #132]	@ (8004b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6892      	ldr	r2, [r2, #8]
 8004ada:	0211      	lsls	r1, r2, #8
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6952      	ldr	r2, [r2, #20]
 8004ae0:	0852      	lsrs	r2, r2, #1
 8004ae2:	3a01      	subs	r2, #1
 8004ae4:	0652      	lsls	r2, r2, #25
 8004ae6:	4311      	orrs	r1, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6852      	ldr	r2, [r2, #4]
 8004aec:	3a01      	subs	r2, #1
 8004aee:	0112      	lsls	r2, r2, #4
 8004af0:	430a      	orrs	r2, r1
 8004af2:	4916      	ldr	r1, [pc, #88]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004af8:	4b14      	ldr	r3, [pc, #80]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a13      	ldr	r2, [pc, #76]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004afe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b04:	f7fe f982 	bl	8002e0c <HAL_GetTick>
 8004b08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b0a:	e009      	b.n	8004b20 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b0c:	f7fe f97e 	bl	8002e0c <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d902      	bls.n	8004b20 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	73fb      	strb	r3, [r7, #15]
          break;
 8004b1e:	e005      	b.n	8004b2c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b20:	4b0a      	ldr	r3, [pc, #40]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0ef      	beq.n	8004b0c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b32:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b34:	691a      	ldr	r2, [r3, #16]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	4904      	ldr	r1, [pc, #16]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	07ff800f 	.word	0x07ff800f
 8004b54:	ff9f800f 	.word	0xff9f800f
 8004b58:	f9ff800f 	.word	0xf9ff800f

08004b5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b6a:	4b72      	ldr	r3, [pc, #456]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00e      	beq.n	8004b94 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b76:	4b6f      	ldr	r3, [pc, #444]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0203 	and.w	r2, r3, #3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d103      	bne.n	8004b8e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
       ||
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d142      	bne.n	8004c14 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
 8004b92:	e03f      	b.n	8004c14 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d018      	beq.n	8004bce <RCCEx_PLLSAI2_Config+0x72>
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d825      	bhi.n	8004bec <RCCEx_PLLSAI2_Config+0x90>
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d002      	beq.n	8004baa <RCCEx_PLLSAI2_Config+0x4e>
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d009      	beq.n	8004bbc <RCCEx_PLLSAI2_Config+0x60>
 8004ba8:	e020      	b.n	8004bec <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004baa:	4b62      	ldr	r3, [pc, #392]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d11d      	bne.n	8004bf2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bba:	e01a      	b.n	8004bf2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bbc:	4b5d      	ldr	r3, [pc, #372]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d116      	bne.n	8004bf6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bcc:	e013      	b.n	8004bf6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bce:	4b59      	ldr	r3, [pc, #356]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10f      	bne.n	8004bfa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bda:	4b56      	ldr	r3, [pc, #344]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bea:	e006      	b.n	8004bfa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf0:	e004      	b.n	8004bfc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004bf2:	bf00      	nop
 8004bf4:	e002      	b.n	8004bfc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004bf6:	bf00      	nop
 8004bf8:	e000      	b.n	8004bfc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004bfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d108      	bne.n	8004c14 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004c02:	4b4c      	ldr	r3, [pc, #304]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f023 0203 	bic.w	r2, r3, #3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4949      	ldr	r1, [pc, #292]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 8086 	bne.w	8004d28 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c1c:	4b45      	ldr	r3, [pc, #276]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a44      	ldr	r2, [pc, #272]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c28:	f7fe f8f0 	bl	8002e0c <HAL_GetTick>
 8004c2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c2e:	e009      	b.n	8004c44 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c30:	f7fe f8ec 	bl	8002e0c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d902      	bls.n	8004c44 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	73fb      	strb	r3, [r7, #15]
        break;
 8004c42:	e005      	b.n	8004c50 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c44:	4b3b      	ldr	r3, [pc, #236]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1ef      	bne.n	8004c30 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d168      	bne.n	8004d28 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d113      	bne.n	8004c84 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c5c:	4b35      	ldr	r3, [pc, #212]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	4b35      	ldr	r3, [pc, #212]	@ (8004d38 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6892      	ldr	r2, [r2, #8]
 8004c68:	0211      	lsls	r1, r2, #8
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68d2      	ldr	r2, [r2, #12]
 8004c6e:	06d2      	lsls	r2, r2, #27
 8004c70:	4311      	orrs	r1, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6852      	ldr	r2, [r2, #4]
 8004c76:	3a01      	subs	r2, #1
 8004c78:	0112      	lsls	r2, r2, #4
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	492d      	ldr	r1, [pc, #180]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	614b      	str	r3, [r1, #20]
 8004c82:	e02d      	b.n	8004ce0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d115      	bne.n	8004cb6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c8c:	695a      	ldr	r2, [r3, #20]
 8004c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8004d3c <RCCEx_PLLSAI2_Config+0x1e0>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6892      	ldr	r2, [r2, #8]
 8004c96:	0211      	lsls	r1, r2, #8
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6912      	ldr	r2, [r2, #16]
 8004c9c:	0852      	lsrs	r2, r2, #1
 8004c9e:	3a01      	subs	r2, #1
 8004ca0:	0552      	lsls	r2, r2, #21
 8004ca2:	4311      	orrs	r1, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6852      	ldr	r2, [r2, #4]
 8004ca8:	3a01      	subs	r2, #1
 8004caa:	0112      	lsls	r2, r2, #4
 8004cac:	430a      	orrs	r2, r1
 8004cae:	4921      	ldr	r1, [pc, #132]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	614b      	str	r3, [r1, #20]
 8004cb4:	e014      	b.n	8004ce0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cb8:	695a      	ldr	r2, [r3, #20]
 8004cba:	4b21      	ldr	r3, [pc, #132]	@ (8004d40 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6892      	ldr	r2, [r2, #8]
 8004cc2:	0211      	lsls	r1, r2, #8
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6952      	ldr	r2, [r2, #20]
 8004cc8:	0852      	lsrs	r2, r2, #1
 8004cca:	3a01      	subs	r2, #1
 8004ccc:	0652      	lsls	r2, r2, #25
 8004cce:	4311      	orrs	r1, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6852      	ldr	r2, [r2, #4]
 8004cd4:	3a01      	subs	r2, #1
 8004cd6:	0112      	lsls	r2, r2, #4
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	4916      	ldr	r1, [pc, #88]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ce0:	4b14      	ldr	r3, [pc, #80]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a13      	ldr	r2, [pc, #76]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cec:	f7fe f88e 	bl	8002e0c <HAL_GetTick>
 8004cf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cf2:	e009      	b.n	8004d08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cf4:	f7fe f88a 	bl	8002e0c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d902      	bls.n	8004d08 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	73fb      	strb	r3, [r7, #15]
          break;
 8004d06:	e005      	b.n	8004d14 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d08:	4b0a      	ldr	r3, [pc, #40]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0ef      	beq.n	8004cf4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d1a:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	4904      	ldr	r1, [pc, #16]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000
 8004d38:	07ff800f 	.word	0x07ff800f
 8004d3c:	ff9f800f 	.word	0xff9f800f
 8004d40:	f9ff800f 	.word	0xf9ff800f

08004d44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e095      	b.n	8004e82 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d108      	bne.n	8004d70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d66:	d009      	beq.n	8004d7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	61da      	str	r2, [r3, #28]
 8004d6e:	e005      	b.n	8004d7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fd fdfa 	bl	8002990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004db2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004dbc:	d902      	bls.n	8004dc4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	e002      	b.n	8004dca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004dc8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004dd2:	d007      	beq.n	8004de4 <HAL_SPI_Init+0xa0>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ddc:	d002      	beq.n	8004de4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e26:	ea42 0103 	orr.w	r1, r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	0c1b      	lsrs	r3, r3, #16
 8004e40:	f003 0204 	and.w	r2, r3, #4
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004e60:	ea42 0103 	orr.w	r1, r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b088      	sub	sp, #32
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	603b      	str	r3, [r7, #0]
 8004e96:	4613      	mov	r3, r2
 8004e98:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e9a:	f7fd ffb7 	bl	8002e0c <HAL_GetTick>
 8004e9e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d001      	beq.n	8004eb4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e15c      	b.n	800516e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_SPI_Transmit+0x36>
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e154      	b.n	800516e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_SPI_Transmit+0x48>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e14d      	b.n	800516e <HAL_SPI_Transmit+0x2e4>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2203      	movs	r2, #3
 8004ede:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	88fa      	ldrh	r2, [r7, #6]
 8004ef8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f24:	d10f      	bne.n	8004f46 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f50:	2b40      	cmp	r3, #64	@ 0x40
 8004f52:	d007      	beq.n	8004f64 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f6c:	d952      	bls.n	8005014 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_SPI_Transmit+0xf2>
 8004f76:	8b7b      	ldrh	r3, [r7, #26]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d145      	bne.n	8005008 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f80:	881a      	ldrh	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8c:	1c9a      	adds	r2, r3, #2
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004fa0:	e032      	b.n	8005008 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d112      	bne.n	8004fd6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb4:	881a      	ldrh	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc0:	1c9a      	adds	r2, r3, #2
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004fd4:	e018      	b.n	8005008 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fd6:	f7fd ff19 	bl	8002e0c <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d803      	bhi.n	8004fee <HAL_SPI_Transmit+0x164>
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fec:	d102      	bne.n	8004ff4 <HAL_SPI_Transmit+0x16a>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e0b2      	b.n	800516e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1c7      	bne.n	8004fa2 <HAL_SPI_Transmit+0x118>
 8005012:	e083      	b.n	800511c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <HAL_SPI_Transmit+0x198>
 800501c:	8b7b      	ldrh	r3, [r7, #26]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d177      	bne.n	8005112 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	d912      	bls.n	8005052 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005030:	881a      	ldrh	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503c:	1c9a      	adds	r2, r3, #2
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b02      	subs	r3, #2
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005050:	e05f      	b.n	8005112 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	330c      	adds	r3, #12
 800505c:	7812      	ldrb	r2, [r2, #0]
 800505e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005078:	e04b      	b.n	8005112 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b02      	cmp	r3, #2
 8005086:	d12b      	bne.n	80050e0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b01      	cmp	r3, #1
 8005090:	d912      	bls.n	80050b8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005096:	881a      	ldrh	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a2:	1c9a      	adds	r2, r3, #2
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b02      	subs	r3, #2
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050b6:	e02c      	b.n	8005112 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	330c      	adds	r3, #12
 80050c2:	7812      	ldrb	r2, [r2, #0]
 80050c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050de:	e018      	b.n	8005112 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050e0:	f7fd fe94 	bl	8002e0c <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d803      	bhi.n	80050f8 <HAL_SPI_Transmit+0x26e>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f6:	d102      	bne.n	80050fe <HAL_SPI_Transmit+0x274>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e02d      	b.n	800516e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1ae      	bne.n	800507a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f947 	bl	80053b4 <SPI_EndRxTxTransaction>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2220      	movs	r2, #32
 8005130:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800516c:	2300      	movs	r3, #0
  }
}
 800516e:	4618      	mov	r0, r3
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005188:	f7fd fe40 	bl	8002e0c <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005190:	1a9b      	subs	r3, r3, r2
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	4413      	add	r3, r2
 8005196:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005198:	f7fd fe38 	bl	8002e0c <HAL_GetTick>
 800519c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800519e:	4b39      	ldr	r3, [pc, #228]	@ (8005284 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	015b      	lsls	r3, r3, #5
 80051a4:	0d1b      	lsrs	r3, r3, #20
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	fb02 f303 	mul.w	r3, r2, r3
 80051ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ae:	e054      	b.n	800525a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b6:	d050      	beq.n	800525a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051b8:	f7fd fe28 	bl	8002e0c <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d902      	bls.n	80051ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d13d      	bne.n	800524a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80051dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051e6:	d111      	bne.n	800520c <SPI_WaitFlagStateUntilTimeout+0x94>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051f0:	d004      	beq.n	80051fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051fa:	d107      	bne.n	800520c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800520a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005210:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005214:	d10f      	bne.n	8005236 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005234:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e017      	b.n	800527a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	3b01      	subs	r3, #1
 8005258:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4013      	ands	r3, r2
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	429a      	cmp	r2, r3
 8005268:	bf0c      	ite	eq
 800526a:	2301      	moveq	r3, #1
 800526c:	2300      	movne	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	461a      	mov	r2, r3
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	429a      	cmp	r2, r3
 8005276:	d19b      	bne.n	80051b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	200400a8 	.word	0x200400a8

08005288 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08a      	sub	sp, #40	@ 0x28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005296:	2300      	movs	r3, #0
 8005298:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800529a:	f7fd fdb7 	bl	8002e0c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	4413      	add	r3, r2
 80052a8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80052aa:	f7fd fdaf 	bl	8002e0c <HAL_GetTick>
 80052ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80052b8:	4b3d      	ldr	r3, [pc, #244]	@ (80053b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	00da      	lsls	r2, r3, #3
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	0d1b      	lsrs	r3, r3, #20
 80052c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ca:	fb02 f303 	mul.w	r3, r2, r3
 80052ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80052d0:	e060      	b.n	8005394 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80052d8:	d107      	bne.n	80052ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d104      	bne.n	80052ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d050      	beq.n	8005394 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052f2:	f7fd fd8b 	bl	8002e0c <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052fe:	429a      	cmp	r2, r3
 8005300:	d902      	bls.n	8005308 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	2b00      	cmp	r3, #0
 8005306:	d13d      	bne.n	8005384 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005316:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005320:	d111      	bne.n	8005346 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800532a:	d004      	beq.n	8005336 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005334:	d107      	bne.n	8005346 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005344:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800534e:	d10f      	bne.n	8005370 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800536e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e010      	b.n	80053a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	3b01      	subs	r3, #1
 8005392:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	4013      	ands	r3, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d196      	bne.n	80052d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3728      	adds	r7, #40	@ 0x28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	200400a8 	.word	0x200400a8

080053b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7ff ff5b 	bl	8005288 <SPI_WaitFifoStateUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d007      	beq.n	80053e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053dc:	f043 0220 	orr.w	r2, r3, #32
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e027      	b.n	8005438 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2200      	movs	r2, #0
 80053f0:	2180      	movs	r1, #128	@ 0x80
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f7ff fec0 	bl	8005178 <SPI_WaitFlagStateUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005402:	f043 0220 	orr.w	r2, r3, #32
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e014      	b.n	8005438 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2200      	movs	r2, #0
 8005416:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f7ff ff34 	bl	8005288 <SPI_WaitFifoStateUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800542a:	f043 0220 	orr.w	r2, r3, #32
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e000      	b.n	8005438 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e042      	b.n	80054d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005458:	2b00      	cmp	r3, #0
 800545a:	d106      	bne.n	800546a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fd f9a9 	bl	80027bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2224      	movs	r2, #36	@ 0x24
 800546e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0201 	bic.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fc7c 	bl	8005d88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f97d 	bl	8005790 <UART_SetConfig>
 8005496:	4603      	mov	r3, r0
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e01b      	b.n	80054d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0201 	orr.w	r2, r2, #1
 80054ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fcfb 	bl	8005ecc <UART_CheckIdleState>
 80054d6:	4603      	mov	r3, r0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	@ 0x28
 80054e4:	af02      	add	r7, sp, #8
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	4613      	mov	r3, r2
 80054ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d17b      	bne.n	80055f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <HAL_UART_Transmit+0x26>
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e074      	b.n	80055f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2221      	movs	r2, #33	@ 0x21
 8005516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800551a:	f7fd fc77 	bl	8002e0c <HAL_GetTick>
 800551e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	88fa      	ldrh	r2, [r7, #6]
 8005524:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005538:	d108      	bne.n	800554c <HAL_UART_Transmit+0x6c>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d104      	bne.n	800554c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	e003      	b.n	8005554 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005550:	2300      	movs	r3, #0
 8005552:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005554:	e030      	b.n	80055b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2200      	movs	r2, #0
 800555e:	2180      	movs	r1, #128	@ 0x80
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 fd5d 	bl	8006020 <UART_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e03d      	b.n	80055f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10b      	bne.n	8005596 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	881a      	ldrh	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800558a:	b292      	uxth	r2, r2
 800558c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	3302      	adds	r3, #2
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	e007      	b.n	80055a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	781a      	ldrb	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	3301      	adds	r3, #1
 80055a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1c8      	bne.n	8005556 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2200      	movs	r2, #0
 80055cc:	2140      	movs	r1, #64	@ 0x40
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 fd26 	bl	8006020 <UART_WaitOnFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d005      	beq.n	80055e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e006      	b.n	80055f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e000      	b.n	80055f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80055f2:	2302      	movs	r3, #2
  }
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	@ 0x28
 8005600:	af02      	add	r7, sp, #8
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	4613      	mov	r3, r2
 800560a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005612:	2b20      	cmp	r3, #32
 8005614:	f040 80b6 	bne.w	8005784 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_UART_Receive+0x28>
 800561e:	88fb      	ldrh	r3, [r7, #6]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0ae      	b.n	8005786 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2222      	movs	r2, #34	@ 0x22
 8005634:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800563e:	f7fd fbe5 	bl	8002e0c <HAL_GetTick>
 8005642:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	88fa      	ldrh	r2, [r7, #6]
 8005648:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	88fa      	ldrh	r2, [r7, #6]
 8005650:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800565c:	d10e      	bne.n	800567c <HAL_UART_Receive+0x80>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d105      	bne.n	8005672 <HAL_UART_Receive+0x76>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800566c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005670:	e02d      	b.n	80056ce <HAL_UART_Receive+0xd2>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	22ff      	movs	r2, #255	@ 0xff
 8005676:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800567a:	e028      	b.n	80056ce <HAL_UART_Receive+0xd2>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10d      	bne.n	80056a0 <HAL_UART_Receive+0xa4>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <HAL_UART_Receive+0x9a>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	22ff      	movs	r2, #255	@ 0xff
 8005690:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005694:	e01b      	b.n	80056ce <HAL_UART_Receive+0xd2>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	227f      	movs	r2, #127	@ 0x7f
 800569a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800569e:	e016      	b.n	80056ce <HAL_UART_Receive+0xd2>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056a8:	d10d      	bne.n	80056c6 <HAL_UART_Receive+0xca>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d104      	bne.n	80056bc <HAL_UART_Receive+0xc0>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	227f      	movs	r2, #127	@ 0x7f
 80056b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80056ba:	e008      	b.n	80056ce <HAL_UART_Receive+0xd2>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	223f      	movs	r2, #63	@ 0x3f
 80056c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80056c4:	e003      	b.n	80056ce <HAL_UART_Receive+0xd2>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80056d4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056de:	d108      	bne.n	80056f2 <HAL_UART_Receive+0xf6>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d104      	bne.n	80056f2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	61bb      	str	r3, [r7, #24]
 80056f0:	e003      	b.n	80056fa <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056fa:	e037      	b.n	800576c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2200      	movs	r2, #0
 8005704:	2120      	movs	r1, #32
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 fc8a 	bl	8006020 <UART_WaitOnFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e033      	b.n	8005786 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10c      	bne.n	800573e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800572a:	b29a      	uxth	r2, r3
 800572c:	8a7b      	ldrh	r3, [r7, #18]
 800572e:	4013      	ands	r3, r2
 8005730:	b29a      	uxth	r2, r3
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	3302      	adds	r3, #2
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	e00d      	b.n	800575a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005744:	b29b      	uxth	r3, r3
 8005746:	b2da      	uxtb	r2, r3
 8005748:	8a7b      	ldrh	r3, [r7, #18]
 800574a:	b2db      	uxtb	r3, r3
 800574c:	4013      	ands	r3, r2
 800574e:	b2da      	uxtb	r2, r3
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	3301      	adds	r3, #1
 8005758:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1c1      	bne.n	80056fc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	e000      	b.n	8005786 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005784:	2302      	movs	r3, #2
  }
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005794:	b08c      	sub	sp, #48	@ 0x30
 8005796:	af00      	add	r7, sp, #0
 8005798:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4baa      	ldr	r3, [pc, #680]	@ (8005a68 <UART_SetConfig+0x2d8>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a9f      	ldr	r2, [pc, #636]	@ (8005a6c <UART_SetConfig+0x2dc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057f8:	4313      	orrs	r3, r2
 80057fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005806:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	6812      	ldr	r2, [r2, #0]
 800580e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005810:	430b      	orrs	r3, r1
 8005812:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581a:	f023 010f 	bic.w	r1, r3, #15
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a90      	ldr	r2, [pc, #576]	@ (8005a70 <UART_SetConfig+0x2e0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d125      	bne.n	8005880 <UART_SetConfig+0xf0>
 8005834:	4b8f      	ldr	r3, [pc, #572]	@ (8005a74 <UART_SetConfig+0x2e4>)
 8005836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	2b03      	cmp	r3, #3
 8005840:	d81a      	bhi.n	8005878 <UART_SetConfig+0xe8>
 8005842:	a201      	add	r2, pc, #4	@ (adr r2, 8005848 <UART_SetConfig+0xb8>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	08005859 	.word	0x08005859
 800584c:	08005869 	.word	0x08005869
 8005850:	08005861 	.word	0x08005861
 8005854:	08005871 	.word	0x08005871
 8005858:	2301      	movs	r3, #1
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800585e:	e116      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005860:	2302      	movs	r3, #2
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005866:	e112      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005868:	2304      	movs	r3, #4
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800586e:	e10e      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005870:	2308      	movs	r3, #8
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005876:	e10a      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005878:	2310      	movs	r3, #16
 800587a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800587e:	e106      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a7c      	ldr	r2, [pc, #496]	@ (8005a78 <UART_SetConfig+0x2e8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d138      	bne.n	80058fc <UART_SetConfig+0x16c>
 800588a:	4b7a      	ldr	r3, [pc, #488]	@ (8005a74 <UART_SetConfig+0x2e4>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005890:	f003 030c 	and.w	r3, r3, #12
 8005894:	2b0c      	cmp	r3, #12
 8005896:	d82d      	bhi.n	80058f4 <UART_SetConfig+0x164>
 8005898:	a201      	add	r2, pc, #4	@ (adr r2, 80058a0 <UART_SetConfig+0x110>)
 800589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589e:	bf00      	nop
 80058a0:	080058d5 	.word	0x080058d5
 80058a4:	080058f5 	.word	0x080058f5
 80058a8:	080058f5 	.word	0x080058f5
 80058ac:	080058f5 	.word	0x080058f5
 80058b0:	080058e5 	.word	0x080058e5
 80058b4:	080058f5 	.word	0x080058f5
 80058b8:	080058f5 	.word	0x080058f5
 80058bc:	080058f5 	.word	0x080058f5
 80058c0:	080058dd 	.word	0x080058dd
 80058c4:	080058f5 	.word	0x080058f5
 80058c8:	080058f5 	.word	0x080058f5
 80058cc:	080058f5 	.word	0x080058f5
 80058d0:	080058ed 	.word	0x080058ed
 80058d4:	2300      	movs	r3, #0
 80058d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058da:	e0d8      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80058dc:	2302      	movs	r3, #2
 80058de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058e2:	e0d4      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80058e4:	2304      	movs	r3, #4
 80058e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ea:	e0d0      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80058ec:	2308      	movs	r3, #8
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058f2:	e0cc      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80058f4:	2310      	movs	r3, #16
 80058f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058fa:	e0c8      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a5e      	ldr	r2, [pc, #376]	@ (8005a7c <UART_SetConfig+0x2ec>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d125      	bne.n	8005952 <UART_SetConfig+0x1c2>
 8005906:	4b5b      	ldr	r3, [pc, #364]	@ (8005a74 <UART_SetConfig+0x2e4>)
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800590c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005910:	2b30      	cmp	r3, #48	@ 0x30
 8005912:	d016      	beq.n	8005942 <UART_SetConfig+0x1b2>
 8005914:	2b30      	cmp	r3, #48	@ 0x30
 8005916:	d818      	bhi.n	800594a <UART_SetConfig+0x1ba>
 8005918:	2b20      	cmp	r3, #32
 800591a:	d00a      	beq.n	8005932 <UART_SetConfig+0x1a2>
 800591c:	2b20      	cmp	r3, #32
 800591e:	d814      	bhi.n	800594a <UART_SetConfig+0x1ba>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <UART_SetConfig+0x19a>
 8005924:	2b10      	cmp	r3, #16
 8005926:	d008      	beq.n	800593a <UART_SetConfig+0x1aa>
 8005928:	e00f      	b.n	800594a <UART_SetConfig+0x1ba>
 800592a:	2300      	movs	r3, #0
 800592c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005930:	e0ad      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005932:	2302      	movs	r3, #2
 8005934:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005938:	e0a9      	b.n	8005a8e <UART_SetConfig+0x2fe>
 800593a:	2304      	movs	r3, #4
 800593c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005940:	e0a5      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005942:	2308      	movs	r3, #8
 8005944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005948:	e0a1      	b.n	8005a8e <UART_SetConfig+0x2fe>
 800594a:	2310      	movs	r3, #16
 800594c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005950:	e09d      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a4a      	ldr	r2, [pc, #296]	@ (8005a80 <UART_SetConfig+0x2f0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d125      	bne.n	80059a8 <UART_SetConfig+0x218>
 800595c:	4b45      	ldr	r3, [pc, #276]	@ (8005a74 <UART_SetConfig+0x2e4>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005962:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005966:	2bc0      	cmp	r3, #192	@ 0xc0
 8005968:	d016      	beq.n	8005998 <UART_SetConfig+0x208>
 800596a:	2bc0      	cmp	r3, #192	@ 0xc0
 800596c:	d818      	bhi.n	80059a0 <UART_SetConfig+0x210>
 800596e:	2b80      	cmp	r3, #128	@ 0x80
 8005970:	d00a      	beq.n	8005988 <UART_SetConfig+0x1f8>
 8005972:	2b80      	cmp	r3, #128	@ 0x80
 8005974:	d814      	bhi.n	80059a0 <UART_SetConfig+0x210>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <UART_SetConfig+0x1f0>
 800597a:	2b40      	cmp	r3, #64	@ 0x40
 800597c:	d008      	beq.n	8005990 <UART_SetConfig+0x200>
 800597e:	e00f      	b.n	80059a0 <UART_SetConfig+0x210>
 8005980:	2300      	movs	r3, #0
 8005982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005986:	e082      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005988:	2302      	movs	r3, #2
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800598e:	e07e      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005990:	2304      	movs	r3, #4
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005996:	e07a      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005998:	2308      	movs	r3, #8
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800599e:	e076      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80059a0:	2310      	movs	r3, #16
 80059a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059a6:	e072      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a35      	ldr	r2, [pc, #212]	@ (8005a84 <UART_SetConfig+0x2f4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d12a      	bne.n	8005a08 <UART_SetConfig+0x278>
 80059b2:	4b30      	ldr	r3, [pc, #192]	@ (8005a74 <UART_SetConfig+0x2e4>)
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059c0:	d01a      	beq.n	80059f8 <UART_SetConfig+0x268>
 80059c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059c6:	d81b      	bhi.n	8005a00 <UART_SetConfig+0x270>
 80059c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059cc:	d00c      	beq.n	80059e8 <UART_SetConfig+0x258>
 80059ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059d2:	d815      	bhi.n	8005a00 <UART_SetConfig+0x270>
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <UART_SetConfig+0x250>
 80059d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059dc:	d008      	beq.n	80059f0 <UART_SetConfig+0x260>
 80059de:	e00f      	b.n	8005a00 <UART_SetConfig+0x270>
 80059e0:	2300      	movs	r3, #0
 80059e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059e6:	e052      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80059e8:	2302      	movs	r3, #2
 80059ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ee:	e04e      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80059f0:	2304      	movs	r3, #4
 80059f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059f6:	e04a      	b.n	8005a8e <UART_SetConfig+0x2fe>
 80059f8:	2308      	movs	r3, #8
 80059fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059fe:	e046      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a00:	2310      	movs	r3, #16
 8005a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a06:	e042      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a17      	ldr	r2, [pc, #92]	@ (8005a6c <UART_SetConfig+0x2dc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d13a      	bne.n	8005a88 <UART_SetConfig+0x2f8>
 8005a12:	4b18      	ldr	r3, [pc, #96]	@ (8005a74 <UART_SetConfig+0x2e4>)
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005a1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a20:	d01a      	beq.n	8005a58 <UART_SetConfig+0x2c8>
 8005a22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a26:	d81b      	bhi.n	8005a60 <UART_SetConfig+0x2d0>
 8005a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a2c:	d00c      	beq.n	8005a48 <UART_SetConfig+0x2b8>
 8005a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a32:	d815      	bhi.n	8005a60 <UART_SetConfig+0x2d0>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <UART_SetConfig+0x2b0>
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a3c:	d008      	beq.n	8005a50 <UART_SetConfig+0x2c0>
 8005a3e:	e00f      	b.n	8005a60 <UART_SetConfig+0x2d0>
 8005a40:	2300      	movs	r3, #0
 8005a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a46:	e022      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a4e:	e01e      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a50:	2304      	movs	r3, #4
 8005a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a56:	e01a      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a58:	2308      	movs	r3, #8
 8005a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a5e:	e016      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a60:	2310      	movs	r3, #16
 8005a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a66:	e012      	b.n	8005a8e <UART_SetConfig+0x2fe>
 8005a68:	cfff69f3 	.word	0xcfff69f3
 8005a6c:	40008000 	.word	0x40008000
 8005a70:	40013800 	.word	0x40013800
 8005a74:	40021000 	.word	0x40021000
 8005a78:	40004400 	.word	0x40004400
 8005a7c:	40004800 	.word	0x40004800
 8005a80:	40004c00 	.word	0x40004c00
 8005a84:	40005000 	.word	0x40005000
 8005a88:	2310      	movs	r3, #16
 8005a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4aae      	ldr	r2, [pc, #696]	@ (8005d4c <UART_SetConfig+0x5bc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	f040 8097 	bne.w	8005bc8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d823      	bhi.n	8005aea <UART_SetConfig+0x35a>
 8005aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa8 <UART_SetConfig+0x318>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005acd 	.word	0x08005acd
 8005aac:	08005aeb 	.word	0x08005aeb
 8005ab0:	08005ad5 	.word	0x08005ad5
 8005ab4:	08005aeb 	.word	0x08005aeb
 8005ab8:	08005adb 	.word	0x08005adb
 8005abc:	08005aeb 	.word	0x08005aeb
 8005ac0:	08005aeb 	.word	0x08005aeb
 8005ac4:	08005aeb 	.word	0x08005aeb
 8005ac8:	08005ae3 	.word	0x08005ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005acc:	f7fe fb36 	bl	800413c <HAL_RCC_GetPCLK1Freq>
 8005ad0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ad2:	e010      	b.n	8005af6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad4:	4b9e      	ldr	r3, [pc, #632]	@ (8005d50 <UART_SetConfig+0x5c0>)
 8005ad6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ad8:	e00d      	b.n	8005af6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ada:	f7fe fa97 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8005ade:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ae0:	e009      	b.n	8005af6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ae8:	e005      	b.n	8005af6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005af4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8130 	beq.w	8005d5e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b02:	4a94      	ldr	r2, [pc, #592]	@ (8005d54 <UART_SetConfig+0x5c4>)
 8005b04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	4413      	add	r3, r2
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d305      	bcc.n	8005b2e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d903      	bls.n	8005b36 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b34:	e113      	b.n	8005d5e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	2200      	movs	r2, #0
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	60fa      	str	r2, [r7, #12]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b42:	4a84      	ldr	r2, [pc, #528]	@ (8005d54 <UART_SetConfig+0x5c4>)
 8005b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	603b      	str	r3, [r7, #0]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b58:	f7fb f8ae 	bl	8000cb8 <__aeabi_uldivmod>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4610      	mov	r0, r2
 8005b62:	4619      	mov	r1, r3
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	020b      	lsls	r3, r1, #8
 8005b6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b72:	0202      	lsls	r2, r0, #8
 8005b74:	6979      	ldr	r1, [r7, #20]
 8005b76:	6849      	ldr	r1, [r1, #4]
 8005b78:	0849      	lsrs	r1, r1, #1
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	4605      	mov	r5, r0
 8005b80:	eb12 0804 	adds.w	r8, r2, r4
 8005b84:	eb43 0905 	adc.w	r9, r3, r5
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	469a      	mov	sl, r3
 8005b90:	4693      	mov	fp, r2
 8005b92:	4652      	mov	r2, sl
 8005b94:	465b      	mov	r3, fp
 8005b96:	4640      	mov	r0, r8
 8005b98:	4649      	mov	r1, r9
 8005b9a:	f7fb f88d 	bl	8000cb8 <__aeabi_uldivmod>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bac:	d308      	bcc.n	8005bc0 <UART_SetConfig+0x430>
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bb4:	d204      	bcs.n	8005bc0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6a3a      	ldr	r2, [r7, #32]
 8005bbc:	60da      	str	r2, [r3, #12]
 8005bbe:	e0ce      	b.n	8005d5e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005bc6:	e0ca      	b.n	8005d5e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bd0:	d166      	bne.n	8005ca0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005bd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d827      	bhi.n	8005c2a <UART_SetConfig+0x49a>
 8005bda:	a201      	add	r2, pc, #4	@ (adr r2, 8005be0 <UART_SetConfig+0x450>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005c05 	.word	0x08005c05
 8005be4:	08005c0d 	.word	0x08005c0d
 8005be8:	08005c15 	.word	0x08005c15
 8005bec:	08005c2b 	.word	0x08005c2b
 8005bf0:	08005c1b 	.word	0x08005c1b
 8005bf4:	08005c2b 	.word	0x08005c2b
 8005bf8:	08005c2b 	.word	0x08005c2b
 8005bfc:	08005c2b 	.word	0x08005c2b
 8005c00:	08005c23 	.word	0x08005c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c04:	f7fe fa9a 	bl	800413c <HAL_RCC_GetPCLK1Freq>
 8005c08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c0a:	e014      	b.n	8005c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c0c:	f7fe faac 	bl	8004168 <HAL_RCC_GetPCLK2Freq>
 8005c10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c12:	e010      	b.n	8005c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c14:	4b4e      	ldr	r3, [pc, #312]	@ (8005d50 <UART_SetConfig+0x5c0>)
 8005c16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c18:	e00d      	b.n	8005c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c1a:	f7fe f9f7 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8005c1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c20:	e009      	b.n	8005c36 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c28:	e005      	b.n	8005c36 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 8090 	beq.w	8005d5e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c42:	4a44      	ldr	r2, [pc, #272]	@ (8005d54 <UART_SetConfig+0x5c4>)
 8005c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c50:	005a      	lsls	r2, r3, #1
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	441a      	add	r2, r3
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c62:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	2b0f      	cmp	r3, #15
 8005c68:	d916      	bls.n	8005c98 <UART_SetConfig+0x508>
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c70:	d212      	bcs.n	8005c98 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	f023 030f 	bic.w	r3, r3, #15
 8005c7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	8bfb      	ldrh	r3, [r7, #30]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	8bfa      	ldrh	r2, [r7, #30]
 8005c94:	60da      	str	r2, [r3, #12]
 8005c96:	e062      	b.n	8005d5e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c9e:	e05e      	b.n	8005d5e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ca0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d828      	bhi.n	8005cfa <UART_SetConfig+0x56a>
 8005ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb0 <UART_SetConfig+0x520>)
 8005caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cae:	bf00      	nop
 8005cb0:	08005cd5 	.word	0x08005cd5
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005ce5 	.word	0x08005ce5
 8005cbc:	08005cfb 	.word	0x08005cfb
 8005cc0:	08005ceb 	.word	0x08005ceb
 8005cc4:	08005cfb 	.word	0x08005cfb
 8005cc8:	08005cfb 	.word	0x08005cfb
 8005ccc:	08005cfb 	.word	0x08005cfb
 8005cd0:	08005cf3 	.word	0x08005cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd4:	f7fe fa32 	bl	800413c <HAL_RCC_GetPCLK1Freq>
 8005cd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cda:	e014      	b.n	8005d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cdc:	f7fe fa44 	bl	8004168 <HAL_RCC_GetPCLK2Freq>
 8005ce0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ce2:	e010      	b.n	8005d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8005d50 <UART_SetConfig+0x5c0>)
 8005ce6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ce8:	e00d      	b.n	8005d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cea:	f7fe f98f 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8005cee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cf0:	e009      	b.n	8005d06 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cf8:	e005      	b.n	8005d06 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d04:	bf00      	nop
    }

    if (pclk != 0U)
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d028      	beq.n	8005d5e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d10:	4a10      	ldr	r2, [pc, #64]	@ (8005d54 <UART_SetConfig+0x5c4>)
 8005d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d16:	461a      	mov	r2, r3
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	441a      	add	r2, r3
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	2b0f      	cmp	r3, #15
 8005d34:	d910      	bls.n	8005d58 <UART_SetConfig+0x5c8>
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d3c:	d20c      	bcs.n	8005d58 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	60da      	str	r2, [r3, #12]
 8005d48:	e009      	b.n	8005d5e <UART_SetConfig+0x5ce>
 8005d4a:	bf00      	nop
 8005d4c:	40008000 	.word	0x40008000
 8005d50:	00f42400 	.word	0x00f42400
 8005d54:	0800ae8c 	.word	0x0800ae8c
      }
      else
      {
        ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2200      	movs	r2, #0
 8005d72:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2200      	movs	r2, #0
 8005d78:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005d7a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3730      	adds	r7, #48	@ 0x30
 8005d82:	46bd      	mov	sp, r7
 8005d84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005d88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d94:	f003 0308 	and.w	r3, r3, #8
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01a      	beq.n	8005e9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e86:	d10a      	bne.n	8005e9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	605a      	str	r2, [r3, #4]
  }
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b098      	sub	sp, #96	@ 0x60
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005edc:	f7fc ff96 	bl	8002e0c <HAL_GetTick>
 8005ee0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d12f      	bne.n	8005f50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f88e 	bl	8006020 <UART_WaitOnFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d022      	beq.n	8005f50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f2a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e6      	bne.n	8005f0a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e063      	b.n	8006018 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d149      	bne.n	8005ff2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f5e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f66:	2200      	movs	r2, #0
 8005f68:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f857 	bl	8006020 <UART_WaitOnFlagUntilTimeout>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d03c      	beq.n	8005ff2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	623b      	str	r3, [r7, #32]
   return(result);
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f96:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e6      	bne.n	8005f78 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3308      	adds	r3, #8
 8005fb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f023 0301 	bic.w	r3, r3, #1
 8005fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3308      	adds	r3, #8
 8005fc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fca:	61fa      	str	r2, [r7, #28]
 8005fcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	69b9      	ldr	r1, [r7, #24]
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	617b      	str	r3, [r7, #20]
   return(result);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e5      	bne.n	8005faa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e012      	b.n	8006018 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3758      	adds	r7, #88	@ 0x58
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	4613      	mov	r3, r2
 800602e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006030:	e04f      	b.n	80060d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d04b      	beq.n	80060d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603a:	f7fc fee7 	bl	8002e0c <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	429a      	cmp	r2, r3
 8006048:	d302      	bcc.n	8006050 <UART_WaitOnFlagUntilTimeout+0x30>
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e04e      	b.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0304 	and.w	r3, r3, #4
 800605e:	2b00      	cmp	r3, #0
 8006060:	d037      	beq.n	80060d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b80      	cmp	r3, #128	@ 0x80
 8006066:	d034      	beq.n	80060d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b40      	cmp	r3, #64	@ 0x40
 800606c:	d031      	beq.n	80060d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b08      	cmp	r3, #8
 800607a:	d110      	bne.n	800609e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2208      	movs	r2, #8
 8006082:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f838 	bl	80060fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2208      	movs	r2, #8
 800608e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e029      	b.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060ac:	d111      	bne.n	80060d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 f81e 	bl	80060fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e00f      	b.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69da      	ldr	r2, [r3, #28]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	4013      	ands	r3, r2
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	429a      	cmp	r2, r3
 80060e0:	bf0c      	ite	eq
 80060e2:	2301      	moveq	r3, #1
 80060e4:	2300      	movne	r3, #0
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	79fb      	ldrb	r3, [r7, #7]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d0a0      	beq.n	8006032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b095      	sub	sp, #84	@ 0x54
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800610a:	e853 3f00 	ldrex	r3, [r3]
 800610e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006112:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006116:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006120:	643b      	str	r3, [r7, #64]	@ 0x40
 8006122:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006126:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006128:	e841 2300 	strex	r3, r2, [r1]
 800612c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800612e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e6      	bne.n	8006102 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3308      	adds	r3, #8
 800613a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	e853 3f00 	ldrex	r3, [r3]
 8006142:	61fb      	str	r3, [r7, #28]
   return(result);
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800614a:	f023 0301 	bic.w	r3, r3, #1
 800614e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3308      	adds	r3, #8
 8006156:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006158:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800615a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800615e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006160:	e841 2300 	strex	r3, r2, [r1]
 8006164:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e3      	bne.n	8006134 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d118      	bne.n	80061a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	60bb      	str	r3, [r7, #8]
   return(result);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f023 0310 	bic.w	r3, r3, #16
 8006188:	647b      	str	r3, [r7, #68]	@ 0x44
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006192:	61bb      	str	r3, [r7, #24]
 8006194:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6979      	ldr	r1, [r7, #20]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	613b      	str	r3, [r7, #16]
   return(result);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e6      	bne.n	8006174 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80061ba:	bf00      	nop
 80061bc:	3754      	adds	r7, #84	@ 0x54
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b085      	sub	sp, #20
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_UARTEx_DisableFifoMode+0x16>
 80061d8:	2302      	movs	r3, #2
 80061da:	e027      	b.n	800622c <HAL_UARTEx_DisableFifoMode+0x66>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2224      	movs	r2, #36	@ 0x24
 80061e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0201 	bic.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800620a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800624c:	2302      	movs	r3, #2
 800624e:	e02d      	b.n	80062ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2224      	movs	r2, #36	@ 0x24
 800625c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0201 	bic.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f84f 	bl	8006330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e02d      	b.n	8006328 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2224      	movs	r2, #36	@ 0x24
 80062d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0201 	bic.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f811 	bl	8006330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800633c:	2b00      	cmp	r3, #0
 800633e:	d108      	bne.n	8006352 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006350:	e031      	b.n	80063b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006352:	2308      	movs	r3, #8
 8006354:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006356:	2308      	movs	r3, #8
 8006358:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	0e5b      	lsrs	r3, r3, #25
 8006362:	b2db      	uxtb	r3, r3
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	0f5b      	lsrs	r3, r3, #29
 8006372:	b2db      	uxtb	r3, r3
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800637a:	7bbb      	ldrb	r3, [r7, #14]
 800637c:	7b3a      	ldrb	r2, [r7, #12]
 800637e:	4911      	ldr	r1, [pc, #68]	@ (80063c4 <UARTEx_SetNbDataToProcess+0x94>)
 8006380:	5c8a      	ldrb	r2, [r1, r2]
 8006382:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006386:	7b3a      	ldrb	r2, [r7, #12]
 8006388:	490f      	ldr	r1, [pc, #60]	@ (80063c8 <UARTEx_SetNbDataToProcess+0x98>)
 800638a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800638c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006390:	b29a      	uxth	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	7b7a      	ldrb	r2, [r7, #13]
 800639c:	4909      	ldr	r1, [pc, #36]	@ (80063c4 <UARTEx_SetNbDataToProcess+0x94>)
 800639e:	5c8a      	ldrb	r2, [r1, r2]
 80063a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063a4:	7b7a      	ldrb	r2, [r7, #13]
 80063a6:	4908      	ldr	r1, [pc, #32]	@ (80063c8 <UARTEx_SetNbDataToProcess+0x98>)
 80063a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80063b6:	bf00      	nop
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	0800aea4 	.word	0x0800aea4
 80063c8:	0800aeac 	.word	0x0800aeac

080063cc <sqrt>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	ed2d 8b02 	vpush	{d8}
 80063d2:	ec55 4b10 	vmov	r4, r5, d0
 80063d6:	f000 f825 	bl	8006424 <__ieee754_sqrt>
 80063da:	4622      	mov	r2, r4
 80063dc:	462b      	mov	r3, r5
 80063de:	4620      	mov	r0, r4
 80063e0:	4629      	mov	r1, r5
 80063e2:	eeb0 8a40 	vmov.f32	s16, s0
 80063e6:	eef0 8a60 	vmov.f32	s17, s1
 80063ea:	f7fa fbb7 	bl	8000b5c <__aeabi_dcmpun>
 80063ee:	b990      	cbnz	r0, 8006416 <sqrt+0x4a>
 80063f0:	2200      	movs	r2, #0
 80063f2:	2300      	movs	r3, #0
 80063f4:	4620      	mov	r0, r4
 80063f6:	4629      	mov	r1, r5
 80063f8:	f7fa fb88 	bl	8000b0c <__aeabi_dcmplt>
 80063fc:	b158      	cbz	r0, 8006416 <sqrt+0x4a>
 80063fe:	f001 fa11 	bl	8007824 <__errno>
 8006402:	2321      	movs	r3, #33	@ 0x21
 8006404:	6003      	str	r3, [r0, #0]
 8006406:	2200      	movs	r2, #0
 8006408:	2300      	movs	r3, #0
 800640a:	4610      	mov	r0, r2
 800640c:	4619      	mov	r1, r3
 800640e:	f7fa fa35 	bl	800087c <__aeabi_ddiv>
 8006412:	ec41 0b18 	vmov	d8, r0, r1
 8006416:	eeb0 0a48 	vmov.f32	s0, s16
 800641a:	eef0 0a68 	vmov.f32	s1, s17
 800641e:	ecbd 8b02 	vpop	{d8}
 8006422:	bd38      	pop	{r3, r4, r5, pc}

08006424 <__ieee754_sqrt>:
 8006424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006428:	4a66      	ldr	r2, [pc, #408]	@ (80065c4 <__ieee754_sqrt+0x1a0>)
 800642a:	ec55 4b10 	vmov	r4, r5, d0
 800642e:	43aa      	bics	r2, r5
 8006430:	462b      	mov	r3, r5
 8006432:	4621      	mov	r1, r4
 8006434:	d110      	bne.n	8006458 <__ieee754_sqrt+0x34>
 8006436:	4622      	mov	r2, r4
 8006438:	4620      	mov	r0, r4
 800643a:	4629      	mov	r1, r5
 800643c:	f7fa f8f4 	bl	8000628 <__aeabi_dmul>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4620      	mov	r0, r4
 8006446:	4629      	mov	r1, r5
 8006448:	f7f9 ff38 	bl	80002bc <__adddf3>
 800644c:	4604      	mov	r4, r0
 800644e:	460d      	mov	r5, r1
 8006450:	ec45 4b10 	vmov	d0, r4, r5
 8006454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006458:	2d00      	cmp	r5, #0
 800645a:	dc0e      	bgt.n	800647a <__ieee754_sqrt+0x56>
 800645c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006460:	4322      	orrs	r2, r4
 8006462:	d0f5      	beq.n	8006450 <__ieee754_sqrt+0x2c>
 8006464:	b19d      	cbz	r5, 800648e <__ieee754_sqrt+0x6a>
 8006466:	4622      	mov	r2, r4
 8006468:	4620      	mov	r0, r4
 800646a:	4629      	mov	r1, r5
 800646c:	f7f9 ff24 	bl	80002b8 <__aeabi_dsub>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	f7fa fa02 	bl	800087c <__aeabi_ddiv>
 8006478:	e7e8      	b.n	800644c <__ieee754_sqrt+0x28>
 800647a:	152a      	asrs	r2, r5, #20
 800647c:	d115      	bne.n	80064aa <__ieee754_sqrt+0x86>
 800647e:	2000      	movs	r0, #0
 8006480:	e009      	b.n	8006496 <__ieee754_sqrt+0x72>
 8006482:	0acb      	lsrs	r3, r1, #11
 8006484:	3a15      	subs	r2, #21
 8006486:	0549      	lsls	r1, r1, #21
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0fa      	beq.n	8006482 <__ieee754_sqrt+0x5e>
 800648c:	e7f7      	b.n	800647e <__ieee754_sqrt+0x5a>
 800648e:	462a      	mov	r2, r5
 8006490:	e7fa      	b.n	8006488 <__ieee754_sqrt+0x64>
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	3001      	adds	r0, #1
 8006496:	02dc      	lsls	r4, r3, #11
 8006498:	d5fb      	bpl.n	8006492 <__ieee754_sqrt+0x6e>
 800649a:	1e44      	subs	r4, r0, #1
 800649c:	1b12      	subs	r2, r2, r4
 800649e:	f1c0 0420 	rsb	r4, r0, #32
 80064a2:	fa21 f404 	lsr.w	r4, r1, r4
 80064a6:	4323      	orrs	r3, r4
 80064a8:	4081      	lsls	r1, r0
 80064aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064ae:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80064b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064b6:	07d2      	lsls	r2, r2, #31
 80064b8:	bf5c      	itt	pl
 80064ba:	005b      	lslpl	r3, r3, #1
 80064bc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80064c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80064c4:	bf58      	it	pl
 80064c6:	0049      	lslpl	r1, r1, #1
 80064c8:	2600      	movs	r6, #0
 80064ca:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80064ce:	107f      	asrs	r7, r7, #1
 80064d0:	0049      	lsls	r1, r1, #1
 80064d2:	2016      	movs	r0, #22
 80064d4:	4632      	mov	r2, r6
 80064d6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80064da:	1915      	adds	r5, r2, r4
 80064dc:	429d      	cmp	r5, r3
 80064de:	bfde      	ittt	le
 80064e0:	192a      	addle	r2, r5, r4
 80064e2:	1b5b      	suble	r3, r3, r5
 80064e4:	1936      	addle	r6, r6, r4
 80064e6:	0fcd      	lsrs	r5, r1, #31
 80064e8:	3801      	subs	r0, #1
 80064ea:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80064ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80064f2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80064f6:	d1f0      	bne.n	80064da <__ieee754_sqrt+0xb6>
 80064f8:	4605      	mov	r5, r0
 80064fa:	2420      	movs	r4, #32
 80064fc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006500:	4293      	cmp	r3, r2
 8006502:	eb0c 0e00 	add.w	lr, ip, r0
 8006506:	dc02      	bgt.n	800650e <__ieee754_sqrt+0xea>
 8006508:	d113      	bne.n	8006532 <__ieee754_sqrt+0x10e>
 800650a:	458e      	cmp	lr, r1
 800650c:	d811      	bhi.n	8006532 <__ieee754_sqrt+0x10e>
 800650e:	f1be 0f00 	cmp.w	lr, #0
 8006512:	eb0e 000c 	add.w	r0, lr, ip
 8006516:	da3f      	bge.n	8006598 <__ieee754_sqrt+0x174>
 8006518:	2800      	cmp	r0, #0
 800651a:	db3d      	blt.n	8006598 <__ieee754_sqrt+0x174>
 800651c:	f102 0801 	add.w	r8, r2, #1
 8006520:	1a9b      	subs	r3, r3, r2
 8006522:	458e      	cmp	lr, r1
 8006524:	bf88      	it	hi
 8006526:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800652a:	eba1 010e 	sub.w	r1, r1, lr
 800652e:	4465      	add	r5, ip
 8006530:	4642      	mov	r2, r8
 8006532:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006536:	3c01      	subs	r4, #1
 8006538:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800653c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006540:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006544:	d1dc      	bne.n	8006500 <__ieee754_sqrt+0xdc>
 8006546:	4319      	orrs	r1, r3
 8006548:	d01b      	beq.n	8006582 <__ieee754_sqrt+0x15e>
 800654a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80065c8 <__ieee754_sqrt+0x1a4>
 800654e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80065cc <__ieee754_sqrt+0x1a8>
 8006552:	e9da 0100 	ldrd	r0, r1, [sl]
 8006556:	e9db 2300 	ldrd	r2, r3, [fp]
 800655a:	f7f9 fead 	bl	80002b8 <__aeabi_dsub>
 800655e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	4640      	mov	r0, r8
 8006568:	4649      	mov	r1, r9
 800656a:	f7fa fad9 	bl	8000b20 <__aeabi_dcmple>
 800656e:	b140      	cbz	r0, 8006582 <__ieee754_sqrt+0x15e>
 8006570:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006574:	e9da 0100 	ldrd	r0, r1, [sl]
 8006578:	e9db 2300 	ldrd	r2, r3, [fp]
 800657c:	d10e      	bne.n	800659c <__ieee754_sqrt+0x178>
 800657e:	3601      	adds	r6, #1
 8006580:	4625      	mov	r5, r4
 8006582:	1073      	asrs	r3, r6, #1
 8006584:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8006588:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800658c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8006590:	086b      	lsrs	r3, r5, #1
 8006592:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8006596:	e759      	b.n	800644c <__ieee754_sqrt+0x28>
 8006598:	4690      	mov	r8, r2
 800659a:	e7c1      	b.n	8006520 <__ieee754_sqrt+0xfc>
 800659c:	f7f9 fe8e 	bl	80002bc <__adddf3>
 80065a0:	e9da 8900 	ldrd	r8, r9, [sl]
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4640      	mov	r0, r8
 80065aa:	4649      	mov	r1, r9
 80065ac:	f7fa faae 	bl	8000b0c <__aeabi_dcmplt>
 80065b0:	b120      	cbz	r0, 80065bc <__ieee754_sqrt+0x198>
 80065b2:	1cab      	adds	r3, r5, #2
 80065b4:	bf08      	it	eq
 80065b6:	3601      	addeq	r6, #1
 80065b8:	3502      	adds	r5, #2
 80065ba:	e7e2      	b.n	8006582 <__ieee754_sqrt+0x15e>
 80065bc:	1c6b      	adds	r3, r5, #1
 80065be:	f023 0501 	bic.w	r5, r3, #1
 80065c2:	e7de      	b.n	8006582 <__ieee754_sqrt+0x15e>
 80065c4:	7ff00000 	.word	0x7ff00000
 80065c8:	0800aec0 	.word	0x0800aec0
 80065cc:	0800aeb8 	.word	0x0800aeb8

080065d0 <malloc>:
 80065d0:	4b02      	ldr	r3, [pc, #8]	@ (80065dc <malloc+0xc>)
 80065d2:	4601      	mov	r1, r0
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	f000 b82d 	b.w	8006634 <_malloc_r>
 80065da:	bf00      	nop
 80065dc:	200400c0 	.word	0x200400c0

080065e0 <free>:
 80065e0:	4b02      	ldr	r3, [pc, #8]	@ (80065ec <free+0xc>)
 80065e2:	4601      	mov	r1, r0
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	f001 bfc7 	b.w	8008578 <_free_r>
 80065ea:	bf00      	nop
 80065ec:	200400c0 	.word	0x200400c0

080065f0 <sbrk_aligned>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	4e0f      	ldr	r6, [pc, #60]	@ (8006630 <sbrk_aligned+0x40>)
 80065f4:	460c      	mov	r4, r1
 80065f6:	6831      	ldr	r1, [r6, #0]
 80065f8:	4605      	mov	r5, r0
 80065fa:	b911      	cbnz	r1, 8006602 <sbrk_aligned+0x12>
 80065fc:	f001 f8f0 	bl	80077e0 <_sbrk_r>
 8006600:	6030      	str	r0, [r6, #0]
 8006602:	4621      	mov	r1, r4
 8006604:	4628      	mov	r0, r5
 8006606:	f001 f8eb 	bl	80077e0 <_sbrk_r>
 800660a:	1c43      	adds	r3, r0, #1
 800660c:	d103      	bne.n	8006616 <sbrk_aligned+0x26>
 800660e:	f04f 34ff 	mov.w	r4, #4294967295
 8006612:	4620      	mov	r0, r4
 8006614:	bd70      	pop	{r4, r5, r6, pc}
 8006616:	1cc4      	adds	r4, r0, #3
 8006618:	f024 0403 	bic.w	r4, r4, #3
 800661c:	42a0      	cmp	r0, r4
 800661e:	d0f8      	beq.n	8006612 <sbrk_aligned+0x22>
 8006620:	1a21      	subs	r1, r4, r0
 8006622:	4628      	mov	r0, r5
 8006624:	f001 f8dc 	bl	80077e0 <_sbrk_r>
 8006628:	3001      	adds	r0, #1
 800662a:	d1f2      	bne.n	8006612 <sbrk_aligned+0x22>
 800662c:	e7ef      	b.n	800660e <sbrk_aligned+0x1e>
 800662e:	bf00      	nop
 8006630:	20040b10 	.word	0x20040b10

08006634 <_malloc_r>:
 8006634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006638:	1ccd      	adds	r5, r1, #3
 800663a:	f025 0503 	bic.w	r5, r5, #3
 800663e:	3508      	adds	r5, #8
 8006640:	2d0c      	cmp	r5, #12
 8006642:	bf38      	it	cc
 8006644:	250c      	movcc	r5, #12
 8006646:	2d00      	cmp	r5, #0
 8006648:	4606      	mov	r6, r0
 800664a:	db01      	blt.n	8006650 <_malloc_r+0x1c>
 800664c:	42a9      	cmp	r1, r5
 800664e:	d904      	bls.n	800665a <_malloc_r+0x26>
 8006650:	230c      	movs	r3, #12
 8006652:	6033      	str	r3, [r6, #0]
 8006654:	2000      	movs	r0, #0
 8006656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800665a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006730 <_malloc_r+0xfc>
 800665e:	f000 f869 	bl	8006734 <__malloc_lock>
 8006662:	f8d8 3000 	ldr.w	r3, [r8]
 8006666:	461c      	mov	r4, r3
 8006668:	bb44      	cbnz	r4, 80066bc <_malloc_r+0x88>
 800666a:	4629      	mov	r1, r5
 800666c:	4630      	mov	r0, r6
 800666e:	f7ff ffbf 	bl	80065f0 <sbrk_aligned>
 8006672:	1c43      	adds	r3, r0, #1
 8006674:	4604      	mov	r4, r0
 8006676:	d158      	bne.n	800672a <_malloc_r+0xf6>
 8006678:	f8d8 4000 	ldr.w	r4, [r8]
 800667c:	4627      	mov	r7, r4
 800667e:	2f00      	cmp	r7, #0
 8006680:	d143      	bne.n	800670a <_malloc_r+0xd6>
 8006682:	2c00      	cmp	r4, #0
 8006684:	d04b      	beq.n	800671e <_malloc_r+0xea>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	4639      	mov	r1, r7
 800668a:	4630      	mov	r0, r6
 800668c:	eb04 0903 	add.w	r9, r4, r3
 8006690:	f001 f8a6 	bl	80077e0 <_sbrk_r>
 8006694:	4581      	cmp	r9, r0
 8006696:	d142      	bne.n	800671e <_malloc_r+0xea>
 8006698:	6821      	ldr	r1, [r4, #0]
 800669a:	1a6d      	subs	r5, r5, r1
 800669c:	4629      	mov	r1, r5
 800669e:	4630      	mov	r0, r6
 80066a0:	f7ff ffa6 	bl	80065f0 <sbrk_aligned>
 80066a4:	3001      	adds	r0, #1
 80066a6:	d03a      	beq.n	800671e <_malloc_r+0xea>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	442b      	add	r3, r5
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	f8d8 3000 	ldr.w	r3, [r8]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	bb62      	cbnz	r2, 8006710 <_malloc_r+0xdc>
 80066b6:	f8c8 7000 	str.w	r7, [r8]
 80066ba:	e00f      	b.n	80066dc <_malloc_r+0xa8>
 80066bc:	6822      	ldr	r2, [r4, #0]
 80066be:	1b52      	subs	r2, r2, r5
 80066c0:	d420      	bmi.n	8006704 <_malloc_r+0xd0>
 80066c2:	2a0b      	cmp	r2, #11
 80066c4:	d917      	bls.n	80066f6 <_malloc_r+0xc2>
 80066c6:	1961      	adds	r1, r4, r5
 80066c8:	42a3      	cmp	r3, r4
 80066ca:	6025      	str	r5, [r4, #0]
 80066cc:	bf18      	it	ne
 80066ce:	6059      	strne	r1, [r3, #4]
 80066d0:	6863      	ldr	r3, [r4, #4]
 80066d2:	bf08      	it	eq
 80066d4:	f8c8 1000 	streq.w	r1, [r8]
 80066d8:	5162      	str	r2, [r4, r5]
 80066da:	604b      	str	r3, [r1, #4]
 80066dc:	4630      	mov	r0, r6
 80066de:	f000 f82f 	bl	8006740 <__malloc_unlock>
 80066e2:	f104 000b 	add.w	r0, r4, #11
 80066e6:	1d23      	adds	r3, r4, #4
 80066e8:	f020 0007 	bic.w	r0, r0, #7
 80066ec:	1ac2      	subs	r2, r0, r3
 80066ee:	bf1c      	itt	ne
 80066f0:	1a1b      	subne	r3, r3, r0
 80066f2:	50a3      	strne	r3, [r4, r2]
 80066f4:	e7af      	b.n	8006656 <_malloc_r+0x22>
 80066f6:	6862      	ldr	r2, [r4, #4]
 80066f8:	42a3      	cmp	r3, r4
 80066fa:	bf0c      	ite	eq
 80066fc:	f8c8 2000 	streq.w	r2, [r8]
 8006700:	605a      	strne	r2, [r3, #4]
 8006702:	e7eb      	b.n	80066dc <_malloc_r+0xa8>
 8006704:	4623      	mov	r3, r4
 8006706:	6864      	ldr	r4, [r4, #4]
 8006708:	e7ae      	b.n	8006668 <_malloc_r+0x34>
 800670a:	463c      	mov	r4, r7
 800670c:	687f      	ldr	r7, [r7, #4]
 800670e:	e7b6      	b.n	800667e <_malloc_r+0x4a>
 8006710:	461a      	mov	r2, r3
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	42a3      	cmp	r3, r4
 8006716:	d1fb      	bne.n	8006710 <_malloc_r+0xdc>
 8006718:	2300      	movs	r3, #0
 800671a:	6053      	str	r3, [r2, #4]
 800671c:	e7de      	b.n	80066dc <_malloc_r+0xa8>
 800671e:	230c      	movs	r3, #12
 8006720:	6033      	str	r3, [r6, #0]
 8006722:	4630      	mov	r0, r6
 8006724:	f000 f80c 	bl	8006740 <__malloc_unlock>
 8006728:	e794      	b.n	8006654 <_malloc_r+0x20>
 800672a:	6005      	str	r5, [r0, #0]
 800672c:	e7d6      	b.n	80066dc <_malloc_r+0xa8>
 800672e:	bf00      	nop
 8006730:	20040b14 	.word	0x20040b14

08006734 <__malloc_lock>:
 8006734:	4801      	ldr	r0, [pc, #4]	@ (800673c <__malloc_lock+0x8>)
 8006736:	f001 b8a0 	b.w	800787a <__retarget_lock_acquire_recursive>
 800673a:	bf00      	nop
 800673c:	20040c58 	.word	0x20040c58

08006740 <__malloc_unlock>:
 8006740:	4801      	ldr	r0, [pc, #4]	@ (8006748 <__malloc_unlock+0x8>)
 8006742:	f001 b89b 	b.w	800787c <__retarget_lock_release_recursive>
 8006746:	bf00      	nop
 8006748:	20040c58 	.word	0x20040c58

0800674c <srand>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4b10      	ldr	r3, [pc, #64]	@ (8006790 <srand+0x44>)
 8006750:	681d      	ldr	r5, [r3, #0]
 8006752:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006754:	4604      	mov	r4, r0
 8006756:	b9b3      	cbnz	r3, 8006786 <srand+0x3a>
 8006758:	2018      	movs	r0, #24
 800675a:	f7ff ff39 	bl	80065d0 <malloc>
 800675e:	4602      	mov	r2, r0
 8006760:	6328      	str	r0, [r5, #48]	@ 0x30
 8006762:	b920      	cbnz	r0, 800676e <srand+0x22>
 8006764:	4b0b      	ldr	r3, [pc, #44]	@ (8006794 <srand+0x48>)
 8006766:	480c      	ldr	r0, [pc, #48]	@ (8006798 <srand+0x4c>)
 8006768:	2146      	movs	r1, #70	@ 0x46
 800676a:	f001 f88f 	bl	800788c <__assert_func>
 800676e:	490b      	ldr	r1, [pc, #44]	@ (800679c <srand+0x50>)
 8006770:	4b0b      	ldr	r3, [pc, #44]	@ (80067a0 <srand+0x54>)
 8006772:	e9c0 1300 	strd	r1, r3, [r0]
 8006776:	4b0b      	ldr	r3, [pc, #44]	@ (80067a4 <srand+0x58>)
 8006778:	6083      	str	r3, [r0, #8]
 800677a:	230b      	movs	r3, #11
 800677c:	8183      	strh	r3, [r0, #12]
 800677e:	2100      	movs	r1, #0
 8006780:	2001      	movs	r0, #1
 8006782:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006786:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006788:	2200      	movs	r2, #0
 800678a:	611c      	str	r4, [r3, #16]
 800678c:	615a      	str	r2, [r3, #20]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	200400c0 	.word	0x200400c0
 8006794:	0800aec8 	.word	0x0800aec8
 8006798:	0800aedf 	.word	0x0800aedf
 800679c:	abcd330e 	.word	0xabcd330e
 80067a0:	e66d1234 	.word	0xe66d1234
 80067a4:	0005deec 	.word	0x0005deec

080067a8 <rand>:
 80067a8:	4b16      	ldr	r3, [pc, #88]	@ (8006804 <rand+0x5c>)
 80067aa:	b510      	push	{r4, lr}
 80067ac:	681c      	ldr	r4, [r3, #0]
 80067ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80067b0:	b9b3      	cbnz	r3, 80067e0 <rand+0x38>
 80067b2:	2018      	movs	r0, #24
 80067b4:	f7ff ff0c 	bl	80065d0 <malloc>
 80067b8:	4602      	mov	r2, r0
 80067ba:	6320      	str	r0, [r4, #48]	@ 0x30
 80067bc:	b920      	cbnz	r0, 80067c8 <rand+0x20>
 80067be:	4b12      	ldr	r3, [pc, #72]	@ (8006808 <rand+0x60>)
 80067c0:	4812      	ldr	r0, [pc, #72]	@ (800680c <rand+0x64>)
 80067c2:	2152      	movs	r1, #82	@ 0x52
 80067c4:	f001 f862 	bl	800788c <__assert_func>
 80067c8:	4911      	ldr	r1, [pc, #68]	@ (8006810 <rand+0x68>)
 80067ca:	4b12      	ldr	r3, [pc, #72]	@ (8006814 <rand+0x6c>)
 80067cc:	e9c0 1300 	strd	r1, r3, [r0]
 80067d0:	4b11      	ldr	r3, [pc, #68]	@ (8006818 <rand+0x70>)
 80067d2:	6083      	str	r3, [r0, #8]
 80067d4:	230b      	movs	r3, #11
 80067d6:	8183      	strh	r3, [r0, #12]
 80067d8:	2100      	movs	r1, #0
 80067da:	2001      	movs	r0, #1
 80067dc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80067e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80067e2:	480e      	ldr	r0, [pc, #56]	@ (800681c <rand+0x74>)
 80067e4:	690b      	ldr	r3, [r1, #16]
 80067e6:	694c      	ldr	r4, [r1, #20]
 80067e8:	4a0d      	ldr	r2, [pc, #52]	@ (8006820 <rand+0x78>)
 80067ea:	4358      	muls	r0, r3
 80067ec:	fb02 0004 	mla	r0, r2, r4, r0
 80067f0:	fba3 3202 	umull	r3, r2, r3, r2
 80067f4:	3301      	adds	r3, #1
 80067f6:	eb40 0002 	adc.w	r0, r0, r2
 80067fa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80067fe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006802:	bd10      	pop	{r4, pc}
 8006804:	200400c0 	.word	0x200400c0
 8006808:	0800aec8 	.word	0x0800aec8
 800680c:	0800aedf 	.word	0x0800aedf
 8006810:	abcd330e 	.word	0xabcd330e
 8006814:	e66d1234 	.word	0xe66d1234
 8006818:	0005deec 	.word	0x0005deec
 800681c:	5851f42d 	.word	0x5851f42d
 8006820:	4c957f2d 	.word	0x4c957f2d

08006824 <__cvt>:
 8006824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006828:	ec57 6b10 	vmov	r6, r7, d0
 800682c:	2f00      	cmp	r7, #0
 800682e:	460c      	mov	r4, r1
 8006830:	4619      	mov	r1, r3
 8006832:	463b      	mov	r3, r7
 8006834:	bfbb      	ittet	lt
 8006836:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800683a:	461f      	movlt	r7, r3
 800683c:	2300      	movge	r3, #0
 800683e:	232d      	movlt	r3, #45	@ 0x2d
 8006840:	700b      	strb	r3, [r1, #0]
 8006842:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006844:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006848:	4691      	mov	r9, r2
 800684a:	f023 0820 	bic.w	r8, r3, #32
 800684e:	bfbc      	itt	lt
 8006850:	4632      	movlt	r2, r6
 8006852:	4616      	movlt	r6, r2
 8006854:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006858:	d005      	beq.n	8006866 <__cvt+0x42>
 800685a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800685e:	d100      	bne.n	8006862 <__cvt+0x3e>
 8006860:	3401      	adds	r4, #1
 8006862:	2102      	movs	r1, #2
 8006864:	e000      	b.n	8006868 <__cvt+0x44>
 8006866:	2103      	movs	r1, #3
 8006868:	ab03      	add	r3, sp, #12
 800686a:	9301      	str	r3, [sp, #4]
 800686c:	ab02      	add	r3, sp, #8
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	ec47 6b10 	vmov	d0, r6, r7
 8006874:	4653      	mov	r3, sl
 8006876:	4622      	mov	r2, r4
 8006878:	f001 f8ae 	bl	80079d8 <_dtoa_r>
 800687c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006880:	4605      	mov	r5, r0
 8006882:	d119      	bne.n	80068b8 <__cvt+0x94>
 8006884:	f019 0f01 	tst.w	r9, #1
 8006888:	d00e      	beq.n	80068a8 <__cvt+0x84>
 800688a:	eb00 0904 	add.w	r9, r0, r4
 800688e:	2200      	movs	r2, #0
 8006890:	2300      	movs	r3, #0
 8006892:	4630      	mov	r0, r6
 8006894:	4639      	mov	r1, r7
 8006896:	f7fa f92f 	bl	8000af8 <__aeabi_dcmpeq>
 800689a:	b108      	cbz	r0, 80068a0 <__cvt+0x7c>
 800689c:	f8cd 900c 	str.w	r9, [sp, #12]
 80068a0:	2230      	movs	r2, #48	@ 0x30
 80068a2:	9b03      	ldr	r3, [sp, #12]
 80068a4:	454b      	cmp	r3, r9
 80068a6:	d31e      	bcc.n	80068e6 <__cvt+0xc2>
 80068a8:	9b03      	ldr	r3, [sp, #12]
 80068aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068ac:	1b5b      	subs	r3, r3, r5
 80068ae:	4628      	mov	r0, r5
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	b004      	add	sp, #16
 80068b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068bc:	eb00 0904 	add.w	r9, r0, r4
 80068c0:	d1e5      	bne.n	800688e <__cvt+0x6a>
 80068c2:	7803      	ldrb	r3, [r0, #0]
 80068c4:	2b30      	cmp	r3, #48	@ 0x30
 80068c6:	d10a      	bne.n	80068de <__cvt+0xba>
 80068c8:	2200      	movs	r2, #0
 80068ca:	2300      	movs	r3, #0
 80068cc:	4630      	mov	r0, r6
 80068ce:	4639      	mov	r1, r7
 80068d0:	f7fa f912 	bl	8000af8 <__aeabi_dcmpeq>
 80068d4:	b918      	cbnz	r0, 80068de <__cvt+0xba>
 80068d6:	f1c4 0401 	rsb	r4, r4, #1
 80068da:	f8ca 4000 	str.w	r4, [sl]
 80068de:	f8da 3000 	ldr.w	r3, [sl]
 80068e2:	4499      	add	r9, r3
 80068e4:	e7d3      	b.n	800688e <__cvt+0x6a>
 80068e6:	1c59      	adds	r1, r3, #1
 80068e8:	9103      	str	r1, [sp, #12]
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	e7d9      	b.n	80068a2 <__cvt+0x7e>

080068ee <__exponent>:
 80068ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068f0:	2900      	cmp	r1, #0
 80068f2:	bfba      	itte	lt
 80068f4:	4249      	neglt	r1, r1
 80068f6:	232d      	movlt	r3, #45	@ 0x2d
 80068f8:	232b      	movge	r3, #43	@ 0x2b
 80068fa:	2909      	cmp	r1, #9
 80068fc:	7002      	strb	r2, [r0, #0]
 80068fe:	7043      	strb	r3, [r0, #1]
 8006900:	dd29      	ble.n	8006956 <__exponent+0x68>
 8006902:	f10d 0307 	add.w	r3, sp, #7
 8006906:	461d      	mov	r5, r3
 8006908:	270a      	movs	r7, #10
 800690a:	461a      	mov	r2, r3
 800690c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006910:	fb07 1416 	mls	r4, r7, r6, r1
 8006914:	3430      	adds	r4, #48	@ 0x30
 8006916:	f802 4c01 	strb.w	r4, [r2, #-1]
 800691a:	460c      	mov	r4, r1
 800691c:	2c63      	cmp	r4, #99	@ 0x63
 800691e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006922:	4631      	mov	r1, r6
 8006924:	dcf1      	bgt.n	800690a <__exponent+0x1c>
 8006926:	3130      	adds	r1, #48	@ 0x30
 8006928:	1e94      	subs	r4, r2, #2
 800692a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800692e:	1c41      	adds	r1, r0, #1
 8006930:	4623      	mov	r3, r4
 8006932:	42ab      	cmp	r3, r5
 8006934:	d30a      	bcc.n	800694c <__exponent+0x5e>
 8006936:	f10d 0309 	add.w	r3, sp, #9
 800693a:	1a9b      	subs	r3, r3, r2
 800693c:	42ac      	cmp	r4, r5
 800693e:	bf88      	it	hi
 8006940:	2300      	movhi	r3, #0
 8006942:	3302      	adds	r3, #2
 8006944:	4403      	add	r3, r0
 8006946:	1a18      	subs	r0, r3, r0
 8006948:	b003      	add	sp, #12
 800694a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800694c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006950:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006954:	e7ed      	b.n	8006932 <__exponent+0x44>
 8006956:	2330      	movs	r3, #48	@ 0x30
 8006958:	3130      	adds	r1, #48	@ 0x30
 800695a:	7083      	strb	r3, [r0, #2]
 800695c:	70c1      	strb	r1, [r0, #3]
 800695e:	1d03      	adds	r3, r0, #4
 8006960:	e7f1      	b.n	8006946 <__exponent+0x58>
	...

08006964 <_printf_float>:
 8006964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006968:	b08d      	sub	sp, #52	@ 0x34
 800696a:	460c      	mov	r4, r1
 800696c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006970:	4616      	mov	r6, r2
 8006972:	461f      	mov	r7, r3
 8006974:	4605      	mov	r5, r0
 8006976:	f000 fefb 	bl	8007770 <_localeconv_r>
 800697a:	6803      	ldr	r3, [r0, #0]
 800697c:	9304      	str	r3, [sp, #16]
 800697e:	4618      	mov	r0, r3
 8006980:	f7f9 fc8e 	bl	80002a0 <strlen>
 8006984:	2300      	movs	r3, #0
 8006986:	930a      	str	r3, [sp, #40]	@ 0x28
 8006988:	f8d8 3000 	ldr.w	r3, [r8]
 800698c:	9005      	str	r0, [sp, #20]
 800698e:	3307      	adds	r3, #7
 8006990:	f023 0307 	bic.w	r3, r3, #7
 8006994:	f103 0208 	add.w	r2, r3, #8
 8006998:	f894 a018 	ldrb.w	sl, [r4, #24]
 800699c:	f8d4 b000 	ldr.w	fp, [r4]
 80069a0:	f8c8 2000 	str.w	r2, [r8]
 80069a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80069ac:	9307      	str	r3, [sp, #28]
 80069ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80069b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80069b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ba:	4b9c      	ldr	r3, [pc, #624]	@ (8006c2c <_printf_float+0x2c8>)
 80069bc:	f04f 32ff 	mov.w	r2, #4294967295
 80069c0:	f7fa f8cc 	bl	8000b5c <__aeabi_dcmpun>
 80069c4:	bb70      	cbnz	r0, 8006a24 <_printf_float+0xc0>
 80069c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ca:	4b98      	ldr	r3, [pc, #608]	@ (8006c2c <_printf_float+0x2c8>)
 80069cc:	f04f 32ff 	mov.w	r2, #4294967295
 80069d0:	f7fa f8a6 	bl	8000b20 <__aeabi_dcmple>
 80069d4:	bb30      	cbnz	r0, 8006a24 <_printf_float+0xc0>
 80069d6:	2200      	movs	r2, #0
 80069d8:	2300      	movs	r3, #0
 80069da:	4640      	mov	r0, r8
 80069dc:	4649      	mov	r1, r9
 80069de:	f7fa f895 	bl	8000b0c <__aeabi_dcmplt>
 80069e2:	b110      	cbz	r0, 80069ea <_printf_float+0x86>
 80069e4:	232d      	movs	r3, #45	@ 0x2d
 80069e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069ea:	4a91      	ldr	r2, [pc, #580]	@ (8006c30 <_printf_float+0x2cc>)
 80069ec:	4b91      	ldr	r3, [pc, #580]	@ (8006c34 <_printf_float+0x2d0>)
 80069ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80069f2:	bf8c      	ite	hi
 80069f4:	4690      	movhi	r8, r2
 80069f6:	4698      	movls	r8, r3
 80069f8:	2303      	movs	r3, #3
 80069fa:	6123      	str	r3, [r4, #16]
 80069fc:	f02b 0304 	bic.w	r3, fp, #4
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	f04f 0900 	mov.w	r9, #0
 8006a06:	9700      	str	r7, [sp, #0]
 8006a08:	4633      	mov	r3, r6
 8006a0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f000 f9d2 	bl	8006db8 <_printf_common>
 8006a14:	3001      	adds	r0, #1
 8006a16:	f040 808d 	bne.w	8006b34 <_printf_float+0x1d0>
 8006a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1e:	b00d      	add	sp, #52	@ 0x34
 8006a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a24:	4642      	mov	r2, r8
 8006a26:	464b      	mov	r3, r9
 8006a28:	4640      	mov	r0, r8
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	f7fa f896 	bl	8000b5c <__aeabi_dcmpun>
 8006a30:	b140      	cbz	r0, 8006a44 <_printf_float+0xe0>
 8006a32:	464b      	mov	r3, r9
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	bfbc      	itt	lt
 8006a38:	232d      	movlt	r3, #45	@ 0x2d
 8006a3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006a3e:	4a7e      	ldr	r2, [pc, #504]	@ (8006c38 <_printf_float+0x2d4>)
 8006a40:	4b7e      	ldr	r3, [pc, #504]	@ (8006c3c <_printf_float+0x2d8>)
 8006a42:	e7d4      	b.n	80069ee <_printf_float+0x8a>
 8006a44:	6863      	ldr	r3, [r4, #4]
 8006a46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006a4a:	9206      	str	r2, [sp, #24]
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	d13b      	bne.n	8006ac8 <_printf_float+0x164>
 8006a50:	2306      	movs	r3, #6
 8006a52:	6063      	str	r3, [r4, #4]
 8006a54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006a58:	2300      	movs	r3, #0
 8006a5a:	6022      	str	r2, [r4, #0]
 8006a5c:	9303      	str	r3, [sp, #12]
 8006a5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006a60:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006a64:	ab09      	add	r3, sp, #36	@ 0x24
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	6861      	ldr	r1, [r4, #4]
 8006a6a:	ec49 8b10 	vmov	d0, r8, r9
 8006a6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006a72:	4628      	mov	r0, r5
 8006a74:	f7ff fed6 	bl	8006824 <__cvt>
 8006a78:	9b06      	ldr	r3, [sp, #24]
 8006a7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a7c:	2b47      	cmp	r3, #71	@ 0x47
 8006a7e:	4680      	mov	r8, r0
 8006a80:	d129      	bne.n	8006ad6 <_printf_float+0x172>
 8006a82:	1cc8      	adds	r0, r1, #3
 8006a84:	db02      	blt.n	8006a8c <_printf_float+0x128>
 8006a86:	6863      	ldr	r3, [r4, #4]
 8006a88:	4299      	cmp	r1, r3
 8006a8a:	dd41      	ble.n	8006b10 <_printf_float+0x1ac>
 8006a8c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a90:	fa5f fa8a 	uxtb.w	sl, sl
 8006a94:	3901      	subs	r1, #1
 8006a96:	4652      	mov	r2, sl
 8006a98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a9e:	f7ff ff26 	bl	80068ee <__exponent>
 8006aa2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006aa4:	1813      	adds	r3, r2, r0
 8006aa6:	2a01      	cmp	r2, #1
 8006aa8:	4681      	mov	r9, r0
 8006aaa:	6123      	str	r3, [r4, #16]
 8006aac:	dc02      	bgt.n	8006ab4 <_printf_float+0x150>
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	07d2      	lsls	r2, r2, #31
 8006ab2:	d501      	bpl.n	8006ab8 <_printf_float+0x154>
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	6123      	str	r3, [r4, #16]
 8006ab8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0a2      	beq.n	8006a06 <_printf_float+0xa2>
 8006ac0:	232d      	movs	r3, #45	@ 0x2d
 8006ac2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ac6:	e79e      	b.n	8006a06 <_printf_float+0xa2>
 8006ac8:	9a06      	ldr	r2, [sp, #24]
 8006aca:	2a47      	cmp	r2, #71	@ 0x47
 8006acc:	d1c2      	bne.n	8006a54 <_printf_float+0xf0>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1c0      	bne.n	8006a54 <_printf_float+0xf0>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e7bd      	b.n	8006a52 <_printf_float+0xee>
 8006ad6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ada:	d9db      	bls.n	8006a94 <_printf_float+0x130>
 8006adc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006ae0:	d118      	bne.n	8006b14 <_printf_float+0x1b0>
 8006ae2:	2900      	cmp	r1, #0
 8006ae4:	6863      	ldr	r3, [r4, #4]
 8006ae6:	dd0b      	ble.n	8006b00 <_printf_float+0x19c>
 8006ae8:	6121      	str	r1, [r4, #16]
 8006aea:	b913      	cbnz	r3, 8006af2 <_printf_float+0x18e>
 8006aec:	6822      	ldr	r2, [r4, #0]
 8006aee:	07d0      	lsls	r0, r2, #31
 8006af0:	d502      	bpl.n	8006af8 <_printf_float+0x194>
 8006af2:	3301      	adds	r3, #1
 8006af4:	440b      	add	r3, r1
 8006af6:	6123      	str	r3, [r4, #16]
 8006af8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006afa:	f04f 0900 	mov.w	r9, #0
 8006afe:	e7db      	b.n	8006ab8 <_printf_float+0x154>
 8006b00:	b913      	cbnz	r3, 8006b08 <_printf_float+0x1a4>
 8006b02:	6822      	ldr	r2, [r4, #0]
 8006b04:	07d2      	lsls	r2, r2, #31
 8006b06:	d501      	bpl.n	8006b0c <_printf_float+0x1a8>
 8006b08:	3302      	adds	r3, #2
 8006b0a:	e7f4      	b.n	8006af6 <_printf_float+0x192>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e7f2      	b.n	8006af6 <_printf_float+0x192>
 8006b10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b16:	4299      	cmp	r1, r3
 8006b18:	db05      	blt.n	8006b26 <_printf_float+0x1c2>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	6121      	str	r1, [r4, #16]
 8006b1e:	07d8      	lsls	r0, r3, #31
 8006b20:	d5ea      	bpl.n	8006af8 <_printf_float+0x194>
 8006b22:	1c4b      	adds	r3, r1, #1
 8006b24:	e7e7      	b.n	8006af6 <_printf_float+0x192>
 8006b26:	2900      	cmp	r1, #0
 8006b28:	bfd4      	ite	le
 8006b2a:	f1c1 0202 	rsble	r2, r1, #2
 8006b2e:	2201      	movgt	r2, #1
 8006b30:	4413      	add	r3, r2
 8006b32:	e7e0      	b.n	8006af6 <_printf_float+0x192>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	055a      	lsls	r2, r3, #21
 8006b38:	d407      	bmi.n	8006b4a <_printf_float+0x1e6>
 8006b3a:	6923      	ldr	r3, [r4, #16]
 8006b3c:	4642      	mov	r2, r8
 8006b3e:	4631      	mov	r1, r6
 8006b40:	4628      	mov	r0, r5
 8006b42:	47b8      	blx	r7
 8006b44:	3001      	adds	r0, #1
 8006b46:	d12b      	bne.n	8006ba0 <_printf_float+0x23c>
 8006b48:	e767      	b.n	8006a1a <_printf_float+0xb6>
 8006b4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b4e:	f240 80dd 	bls.w	8006d0c <_printf_float+0x3a8>
 8006b52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b56:	2200      	movs	r2, #0
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f7f9 ffcd 	bl	8000af8 <__aeabi_dcmpeq>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d033      	beq.n	8006bca <_printf_float+0x266>
 8006b62:	4a37      	ldr	r2, [pc, #220]	@ (8006c40 <_printf_float+0x2dc>)
 8006b64:	2301      	movs	r3, #1
 8006b66:	4631      	mov	r1, r6
 8006b68:	4628      	mov	r0, r5
 8006b6a:	47b8      	blx	r7
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	f43f af54 	beq.w	8006a1a <_printf_float+0xb6>
 8006b72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006b76:	4543      	cmp	r3, r8
 8006b78:	db02      	blt.n	8006b80 <_printf_float+0x21c>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	07d8      	lsls	r0, r3, #31
 8006b7e:	d50f      	bpl.n	8006ba0 <_printf_float+0x23c>
 8006b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b84:	4631      	mov	r1, r6
 8006b86:	4628      	mov	r0, r5
 8006b88:	47b8      	blx	r7
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	f43f af45 	beq.w	8006a1a <_printf_float+0xb6>
 8006b90:	f04f 0900 	mov.w	r9, #0
 8006b94:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b98:	f104 0a1a 	add.w	sl, r4, #26
 8006b9c:	45c8      	cmp	r8, r9
 8006b9e:	dc09      	bgt.n	8006bb4 <_printf_float+0x250>
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	079b      	lsls	r3, r3, #30
 8006ba4:	f100 8103 	bmi.w	8006dae <_printf_float+0x44a>
 8006ba8:	68e0      	ldr	r0, [r4, #12]
 8006baa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bac:	4298      	cmp	r0, r3
 8006bae:	bfb8      	it	lt
 8006bb0:	4618      	movlt	r0, r3
 8006bb2:	e734      	b.n	8006a1e <_printf_float+0xba>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	4652      	mov	r2, sl
 8006bb8:	4631      	mov	r1, r6
 8006bba:	4628      	mov	r0, r5
 8006bbc:	47b8      	blx	r7
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	f43f af2b 	beq.w	8006a1a <_printf_float+0xb6>
 8006bc4:	f109 0901 	add.w	r9, r9, #1
 8006bc8:	e7e8      	b.n	8006b9c <_printf_float+0x238>
 8006bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	dc39      	bgt.n	8006c44 <_printf_float+0x2e0>
 8006bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8006c40 <_printf_float+0x2dc>)
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	47b8      	blx	r7
 8006bda:	3001      	adds	r0, #1
 8006bdc:	f43f af1d 	beq.w	8006a1a <_printf_float+0xb6>
 8006be0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006be4:	ea59 0303 	orrs.w	r3, r9, r3
 8006be8:	d102      	bne.n	8006bf0 <_printf_float+0x28c>
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	07d9      	lsls	r1, r3, #31
 8006bee:	d5d7      	bpl.n	8006ba0 <_printf_float+0x23c>
 8006bf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	47b8      	blx	r7
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	f43f af0d 	beq.w	8006a1a <_printf_float+0xb6>
 8006c00:	f04f 0a00 	mov.w	sl, #0
 8006c04:	f104 0b1a 	add.w	fp, r4, #26
 8006c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c0a:	425b      	negs	r3, r3
 8006c0c:	4553      	cmp	r3, sl
 8006c0e:	dc01      	bgt.n	8006c14 <_printf_float+0x2b0>
 8006c10:	464b      	mov	r3, r9
 8006c12:	e793      	b.n	8006b3c <_printf_float+0x1d8>
 8006c14:	2301      	movs	r3, #1
 8006c16:	465a      	mov	r2, fp
 8006c18:	4631      	mov	r1, r6
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	47b8      	blx	r7
 8006c1e:	3001      	adds	r0, #1
 8006c20:	f43f aefb 	beq.w	8006a1a <_printf_float+0xb6>
 8006c24:	f10a 0a01 	add.w	sl, sl, #1
 8006c28:	e7ee      	b.n	8006c08 <_printf_float+0x2a4>
 8006c2a:	bf00      	nop
 8006c2c:	7fefffff 	.word	0x7fefffff
 8006c30:	0800af3b 	.word	0x0800af3b
 8006c34:	0800af37 	.word	0x0800af37
 8006c38:	0800af43 	.word	0x0800af43
 8006c3c:	0800af3f 	.word	0x0800af3f
 8006c40:	0800af47 	.word	0x0800af47
 8006c44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c4a:	4553      	cmp	r3, sl
 8006c4c:	bfa8      	it	ge
 8006c4e:	4653      	movge	r3, sl
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	4699      	mov	r9, r3
 8006c54:	dc36      	bgt.n	8006cc4 <_printf_float+0x360>
 8006c56:	f04f 0b00 	mov.w	fp, #0
 8006c5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c5e:	f104 021a 	add.w	r2, r4, #26
 8006c62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c64:	9306      	str	r3, [sp, #24]
 8006c66:	eba3 0309 	sub.w	r3, r3, r9
 8006c6a:	455b      	cmp	r3, fp
 8006c6c:	dc31      	bgt.n	8006cd2 <_printf_float+0x36e>
 8006c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c70:	459a      	cmp	sl, r3
 8006c72:	dc3a      	bgt.n	8006cea <_printf_float+0x386>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	07da      	lsls	r2, r3, #31
 8006c78:	d437      	bmi.n	8006cea <_printf_float+0x386>
 8006c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c7c:	ebaa 0903 	sub.w	r9, sl, r3
 8006c80:	9b06      	ldr	r3, [sp, #24]
 8006c82:	ebaa 0303 	sub.w	r3, sl, r3
 8006c86:	4599      	cmp	r9, r3
 8006c88:	bfa8      	it	ge
 8006c8a:	4699      	movge	r9, r3
 8006c8c:	f1b9 0f00 	cmp.w	r9, #0
 8006c90:	dc33      	bgt.n	8006cfa <_printf_float+0x396>
 8006c92:	f04f 0800 	mov.w	r8, #0
 8006c96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c9a:	f104 0b1a 	add.w	fp, r4, #26
 8006c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca0:	ebaa 0303 	sub.w	r3, sl, r3
 8006ca4:	eba3 0309 	sub.w	r3, r3, r9
 8006ca8:	4543      	cmp	r3, r8
 8006caa:	f77f af79 	ble.w	8006ba0 <_printf_float+0x23c>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	465a      	mov	r2, fp
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	47b8      	blx	r7
 8006cb8:	3001      	adds	r0, #1
 8006cba:	f43f aeae 	beq.w	8006a1a <_printf_float+0xb6>
 8006cbe:	f108 0801 	add.w	r8, r8, #1
 8006cc2:	e7ec      	b.n	8006c9e <_printf_float+0x33a>
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b8      	blx	r7
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d1c2      	bne.n	8006c56 <_printf_float+0x2f2>
 8006cd0:	e6a3      	b.n	8006a1a <_printf_float+0xb6>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	9206      	str	r2, [sp, #24]
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	f43f ae9c 	beq.w	8006a1a <_printf_float+0xb6>
 8006ce2:	9a06      	ldr	r2, [sp, #24]
 8006ce4:	f10b 0b01 	add.w	fp, fp, #1
 8006ce8:	e7bb      	b.n	8006c62 <_printf_float+0x2fe>
 8006cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cee:	4631      	mov	r1, r6
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	47b8      	blx	r7
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d1c0      	bne.n	8006c7a <_printf_float+0x316>
 8006cf8:	e68f      	b.n	8006a1a <_printf_float+0xb6>
 8006cfa:	9a06      	ldr	r2, [sp, #24]
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	4442      	add	r2, r8
 8006d00:	4631      	mov	r1, r6
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b8      	blx	r7
 8006d06:	3001      	adds	r0, #1
 8006d08:	d1c3      	bne.n	8006c92 <_printf_float+0x32e>
 8006d0a:	e686      	b.n	8006a1a <_printf_float+0xb6>
 8006d0c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d10:	f1ba 0f01 	cmp.w	sl, #1
 8006d14:	dc01      	bgt.n	8006d1a <_printf_float+0x3b6>
 8006d16:	07db      	lsls	r3, r3, #31
 8006d18:	d536      	bpl.n	8006d88 <_printf_float+0x424>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	4642      	mov	r2, r8
 8006d1e:	4631      	mov	r1, r6
 8006d20:	4628      	mov	r0, r5
 8006d22:	47b8      	blx	r7
 8006d24:	3001      	adds	r0, #1
 8006d26:	f43f ae78 	beq.w	8006a1a <_printf_float+0xb6>
 8006d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4628      	mov	r0, r5
 8006d32:	47b8      	blx	r7
 8006d34:	3001      	adds	r0, #1
 8006d36:	f43f ae70 	beq.w	8006a1a <_printf_float+0xb6>
 8006d3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2300      	movs	r3, #0
 8006d42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d46:	f7f9 fed7 	bl	8000af8 <__aeabi_dcmpeq>
 8006d4a:	b9c0      	cbnz	r0, 8006d7e <_printf_float+0x41a>
 8006d4c:	4653      	mov	r3, sl
 8006d4e:	f108 0201 	add.w	r2, r8, #1
 8006d52:	4631      	mov	r1, r6
 8006d54:	4628      	mov	r0, r5
 8006d56:	47b8      	blx	r7
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d10c      	bne.n	8006d76 <_printf_float+0x412>
 8006d5c:	e65d      	b.n	8006a1a <_printf_float+0xb6>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	465a      	mov	r2, fp
 8006d62:	4631      	mov	r1, r6
 8006d64:	4628      	mov	r0, r5
 8006d66:	47b8      	blx	r7
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f43f ae56 	beq.w	8006a1a <_printf_float+0xb6>
 8006d6e:	f108 0801 	add.w	r8, r8, #1
 8006d72:	45d0      	cmp	r8, sl
 8006d74:	dbf3      	blt.n	8006d5e <_printf_float+0x3fa>
 8006d76:	464b      	mov	r3, r9
 8006d78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d7c:	e6df      	b.n	8006b3e <_printf_float+0x1da>
 8006d7e:	f04f 0800 	mov.w	r8, #0
 8006d82:	f104 0b1a 	add.w	fp, r4, #26
 8006d86:	e7f4      	b.n	8006d72 <_printf_float+0x40e>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	4642      	mov	r2, r8
 8006d8c:	e7e1      	b.n	8006d52 <_printf_float+0x3ee>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	464a      	mov	r2, r9
 8006d92:	4631      	mov	r1, r6
 8006d94:	4628      	mov	r0, r5
 8006d96:	47b8      	blx	r7
 8006d98:	3001      	adds	r0, #1
 8006d9a:	f43f ae3e 	beq.w	8006a1a <_printf_float+0xb6>
 8006d9e:	f108 0801 	add.w	r8, r8, #1
 8006da2:	68e3      	ldr	r3, [r4, #12]
 8006da4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006da6:	1a5b      	subs	r3, r3, r1
 8006da8:	4543      	cmp	r3, r8
 8006daa:	dcf0      	bgt.n	8006d8e <_printf_float+0x42a>
 8006dac:	e6fc      	b.n	8006ba8 <_printf_float+0x244>
 8006dae:	f04f 0800 	mov.w	r8, #0
 8006db2:	f104 0919 	add.w	r9, r4, #25
 8006db6:	e7f4      	b.n	8006da2 <_printf_float+0x43e>

08006db8 <_printf_common>:
 8006db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dbc:	4616      	mov	r6, r2
 8006dbe:	4698      	mov	r8, r3
 8006dc0:	688a      	ldr	r2, [r1, #8]
 8006dc2:	690b      	ldr	r3, [r1, #16]
 8006dc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	bfb8      	it	lt
 8006dcc:	4613      	movlt	r3, r2
 8006dce:	6033      	str	r3, [r6, #0]
 8006dd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006dd4:	4607      	mov	r7, r0
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	b10a      	cbz	r2, 8006dde <_printf_common+0x26>
 8006dda:	3301      	adds	r3, #1
 8006ddc:	6033      	str	r3, [r6, #0]
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	0699      	lsls	r1, r3, #26
 8006de2:	bf42      	ittt	mi
 8006de4:	6833      	ldrmi	r3, [r6, #0]
 8006de6:	3302      	addmi	r3, #2
 8006de8:	6033      	strmi	r3, [r6, #0]
 8006dea:	6825      	ldr	r5, [r4, #0]
 8006dec:	f015 0506 	ands.w	r5, r5, #6
 8006df0:	d106      	bne.n	8006e00 <_printf_common+0x48>
 8006df2:	f104 0a19 	add.w	sl, r4, #25
 8006df6:	68e3      	ldr	r3, [r4, #12]
 8006df8:	6832      	ldr	r2, [r6, #0]
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	42ab      	cmp	r3, r5
 8006dfe:	dc26      	bgt.n	8006e4e <_printf_common+0x96>
 8006e00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e04:	6822      	ldr	r2, [r4, #0]
 8006e06:	3b00      	subs	r3, #0
 8006e08:	bf18      	it	ne
 8006e0a:	2301      	movne	r3, #1
 8006e0c:	0692      	lsls	r2, r2, #26
 8006e0e:	d42b      	bmi.n	8006e68 <_printf_common+0xb0>
 8006e10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e14:	4641      	mov	r1, r8
 8006e16:	4638      	mov	r0, r7
 8006e18:	47c8      	blx	r9
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	d01e      	beq.n	8006e5c <_printf_common+0xa4>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	6922      	ldr	r2, [r4, #16]
 8006e22:	f003 0306 	and.w	r3, r3, #6
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	bf02      	ittt	eq
 8006e2a:	68e5      	ldreq	r5, [r4, #12]
 8006e2c:	6833      	ldreq	r3, [r6, #0]
 8006e2e:	1aed      	subeq	r5, r5, r3
 8006e30:	68a3      	ldr	r3, [r4, #8]
 8006e32:	bf0c      	ite	eq
 8006e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e38:	2500      	movne	r5, #0
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	bfc4      	itt	gt
 8006e3e:	1a9b      	subgt	r3, r3, r2
 8006e40:	18ed      	addgt	r5, r5, r3
 8006e42:	2600      	movs	r6, #0
 8006e44:	341a      	adds	r4, #26
 8006e46:	42b5      	cmp	r5, r6
 8006e48:	d11a      	bne.n	8006e80 <_printf_common+0xc8>
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	e008      	b.n	8006e60 <_printf_common+0xa8>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	4652      	mov	r2, sl
 8006e52:	4641      	mov	r1, r8
 8006e54:	4638      	mov	r0, r7
 8006e56:	47c8      	blx	r9
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d103      	bne.n	8006e64 <_printf_common+0xac>
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e64:	3501      	adds	r5, #1
 8006e66:	e7c6      	b.n	8006df6 <_printf_common+0x3e>
 8006e68:	18e1      	adds	r1, r4, r3
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	2030      	movs	r0, #48	@ 0x30
 8006e6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e72:	4422      	add	r2, r4
 8006e74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e7c:	3302      	adds	r3, #2
 8006e7e:	e7c7      	b.n	8006e10 <_printf_common+0x58>
 8006e80:	2301      	movs	r3, #1
 8006e82:	4622      	mov	r2, r4
 8006e84:	4641      	mov	r1, r8
 8006e86:	4638      	mov	r0, r7
 8006e88:	47c8      	blx	r9
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	d0e6      	beq.n	8006e5c <_printf_common+0xa4>
 8006e8e:	3601      	adds	r6, #1
 8006e90:	e7d9      	b.n	8006e46 <_printf_common+0x8e>
	...

08006e94 <_printf_i>:
 8006e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e98:	7e0f      	ldrb	r7, [r1, #24]
 8006e9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e9c:	2f78      	cmp	r7, #120	@ 0x78
 8006e9e:	4691      	mov	r9, r2
 8006ea0:	4680      	mov	r8, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	469a      	mov	sl, r3
 8006ea6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006eaa:	d807      	bhi.n	8006ebc <_printf_i+0x28>
 8006eac:	2f62      	cmp	r7, #98	@ 0x62
 8006eae:	d80a      	bhi.n	8006ec6 <_printf_i+0x32>
 8006eb0:	2f00      	cmp	r7, #0
 8006eb2:	f000 80d1 	beq.w	8007058 <_printf_i+0x1c4>
 8006eb6:	2f58      	cmp	r7, #88	@ 0x58
 8006eb8:	f000 80b8 	beq.w	800702c <_printf_i+0x198>
 8006ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ec0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ec4:	e03a      	b.n	8006f3c <_printf_i+0xa8>
 8006ec6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006eca:	2b15      	cmp	r3, #21
 8006ecc:	d8f6      	bhi.n	8006ebc <_printf_i+0x28>
 8006ece:	a101      	add	r1, pc, #4	@ (adr r1, 8006ed4 <_printf_i+0x40>)
 8006ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ed4:	08006f2d 	.word	0x08006f2d
 8006ed8:	08006f41 	.word	0x08006f41
 8006edc:	08006ebd 	.word	0x08006ebd
 8006ee0:	08006ebd 	.word	0x08006ebd
 8006ee4:	08006ebd 	.word	0x08006ebd
 8006ee8:	08006ebd 	.word	0x08006ebd
 8006eec:	08006f41 	.word	0x08006f41
 8006ef0:	08006ebd 	.word	0x08006ebd
 8006ef4:	08006ebd 	.word	0x08006ebd
 8006ef8:	08006ebd 	.word	0x08006ebd
 8006efc:	08006ebd 	.word	0x08006ebd
 8006f00:	0800703f 	.word	0x0800703f
 8006f04:	08006f6b 	.word	0x08006f6b
 8006f08:	08006ff9 	.word	0x08006ff9
 8006f0c:	08006ebd 	.word	0x08006ebd
 8006f10:	08006ebd 	.word	0x08006ebd
 8006f14:	08007061 	.word	0x08007061
 8006f18:	08006ebd 	.word	0x08006ebd
 8006f1c:	08006f6b 	.word	0x08006f6b
 8006f20:	08006ebd 	.word	0x08006ebd
 8006f24:	08006ebd 	.word	0x08006ebd
 8006f28:	08007001 	.word	0x08007001
 8006f2c:	6833      	ldr	r3, [r6, #0]
 8006f2e:	1d1a      	adds	r2, r3, #4
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6032      	str	r2, [r6, #0]
 8006f34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e09c      	b.n	800707a <_printf_i+0x1e6>
 8006f40:	6833      	ldr	r3, [r6, #0]
 8006f42:	6820      	ldr	r0, [r4, #0]
 8006f44:	1d19      	adds	r1, r3, #4
 8006f46:	6031      	str	r1, [r6, #0]
 8006f48:	0606      	lsls	r6, r0, #24
 8006f4a:	d501      	bpl.n	8006f50 <_printf_i+0xbc>
 8006f4c:	681d      	ldr	r5, [r3, #0]
 8006f4e:	e003      	b.n	8006f58 <_printf_i+0xc4>
 8006f50:	0645      	lsls	r5, r0, #25
 8006f52:	d5fb      	bpl.n	8006f4c <_printf_i+0xb8>
 8006f54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f58:	2d00      	cmp	r5, #0
 8006f5a:	da03      	bge.n	8006f64 <_printf_i+0xd0>
 8006f5c:	232d      	movs	r3, #45	@ 0x2d
 8006f5e:	426d      	negs	r5, r5
 8006f60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f64:	4858      	ldr	r0, [pc, #352]	@ (80070c8 <_printf_i+0x234>)
 8006f66:	230a      	movs	r3, #10
 8006f68:	e011      	b.n	8006f8e <_printf_i+0xfa>
 8006f6a:	6821      	ldr	r1, [r4, #0]
 8006f6c:	6833      	ldr	r3, [r6, #0]
 8006f6e:	0608      	lsls	r0, r1, #24
 8006f70:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f74:	d402      	bmi.n	8006f7c <_printf_i+0xe8>
 8006f76:	0649      	lsls	r1, r1, #25
 8006f78:	bf48      	it	mi
 8006f7a:	b2ad      	uxthmi	r5, r5
 8006f7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f7e:	4852      	ldr	r0, [pc, #328]	@ (80070c8 <_printf_i+0x234>)
 8006f80:	6033      	str	r3, [r6, #0]
 8006f82:	bf14      	ite	ne
 8006f84:	230a      	movne	r3, #10
 8006f86:	2308      	moveq	r3, #8
 8006f88:	2100      	movs	r1, #0
 8006f8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f8e:	6866      	ldr	r6, [r4, #4]
 8006f90:	60a6      	str	r6, [r4, #8]
 8006f92:	2e00      	cmp	r6, #0
 8006f94:	db05      	blt.n	8006fa2 <_printf_i+0x10e>
 8006f96:	6821      	ldr	r1, [r4, #0]
 8006f98:	432e      	orrs	r6, r5
 8006f9a:	f021 0104 	bic.w	r1, r1, #4
 8006f9e:	6021      	str	r1, [r4, #0]
 8006fa0:	d04b      	beq.n	800703a <_printf_i+0x1a6>
 8006fa2:	4616      	mov	r6, r2
 8006fa4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fa8:	fb03 5711 	mls	r7, r3, r1, r5
 8006fac:	5dc7      	ldrb	r7, [r0, r7]
 8006fae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fb2:	462f      	mov	r7, r5
 8006fb4:	42bb      	cmp	r3, r7
 8006fb6:	460d      	mov	r5, r1
 8006fb8:	d9f4      	bls.n	8006fa4 <_printf_i+0x110>
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d10b      	bne.n	8006fd6 <_printf_i+0x142>
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	07df      	lsls	r7, r3, #31
 8006fc2:	d508      	bpl.n	8006fd6 <_printf_i+0x142>
 8006fc4:	6923      	ldr	r3, [r4, #16]
 8006fc6:	6861      	ldr	r1, [r4, #4]
 8006fc8:	4299      	cmp	r1, r3
 8006fca:	bfde      	ittt	le
 8006fcc:	2330      	movle	r3, #48	@ 0x30
 8006fce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fd6:	1b92      	subs	r2, r2, r6
 8006fd8:	6122      	str	r2, [r4, #16]
 8006fda:	f8cd a000 	str.w	sl, [sp]
 8006fde:	464b      	mov	r3, r9
 8006fe0:	aa03      	add	r2, sp, #12
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	4640      	mov	r0, r8
 8006fe6:	f7ff fee7 	bl	8006db8 <_printf_common>
 8006fea:	3001      	adds	r0, #1
 8006fec:	d14a      	bne.n	8007084 <_printf_i+0x1f0>
 8006fee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff2:	b004      	add	sp, #16
 8006ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	f043 0320 	orr.w	r3, r3, #32
 8006ffe:	6023      	str	r3, [r4, #0]
 8007000:	4832      	ldr	r0, [pc, #200]	@ (80070cc <_printf_i+0x238>)
 8007002:	2778      	movs	r7, #120	@ 0x78
 8007004:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007008:	6823      	ldr	r3, [r4, #0]
 800700a:	6831      	ldr	r1, [r6, #0]
 800700c:	061f      	lsls	r7, r3, #24
 800700e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007012:	d402      	bmi.n	800701a <_printf_i+0x186>
 8007014:	065f      	lsls	r7, r3, #25
 8007016:	bf48      	it	mi
 8007018:	b2ad      	uxthmi	r5, r5
 800701a:	6031      	str	r1, [r6, #0]
 800701c:	07d9      	lsls	r1, r3, #31
 800701e:	bf44      	itt	mi
 8007020:	f043 0320 	orrmi.w	r3, r3, #32
 8007024:	6023      	strmi	r3, [r4, #0]
 8007026:	b11d      	cbz	r5, 8007030 <_printf_i+0x19c>
 8007028:	2310      	movs	r3, #16
 800702a:	e7ad      	b.n	8006f88 <_printf_i+0xf4>
 800702c:	4826      	ldr	r0, [pc, #152]	@ (80070c8 <_printf_i+0x234>)
 800702e:	e7e9      	b.n	8007004 <_printf_i+0x170>
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	f023 0320 	bic.w	r3, r3, #32
 8007036:	6023      	str	r3, [r4, #0]
 8007038:	e7f6      	b.n	8007028 <_printf_i+0x194>
 800703a:	4616      	mov	r6, r2
 800703c:	e7bd      	b.n	8006fba <_printf_i+0x126>
 800703e:	6833      	ldr	r3, [r6, #0]
 8007040:	6825      	ldr	r5, [r4, #0]
 8007042:	6961      	ldr	r1, [r4, #20]
 8007044:	1d18      	adds	r0, r3, #4
 8007046:	6030      	str	r0, [r6, #0]
 8007048:	062e      	lsls	r6, r5, #24
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	d501      	bpl.n	8007052 <_printf_i+0x1be>
 800704e:	6019      	str	r1, [r3, #0]
 8007050:	e002      	b.n	8007058 <_printf_i+0x1c4>
 8007052:	0668      	lsls	r0, r5, #25
 8007054:	d5fb      	bpl.n	800704e <_printf_i+0x1ba>
 8007056:	8019      	strh	r1, [r3, #0]
 8007058:	2300      	movs	r3, #0
 800705a:	6123      	str	r3, [r4, #16]
 800705c:	4616      	mov	r6, r2
 800705e:	e7bc      	b.n	8006fda <_printf_i+0x146>
 8007060:	6833      	ldr	r3, [r6, #0]
 8007062:	1d1a      	adds	r2, r3, #4
 8007064:	6032      	str	r2, [r6, #0]
 8007066:	681e      	ldr	r6, [r3, #0]
 8007068:	6862      	ldr	r2, [r4, #4]
 800706a:	2100      	movs	r1, #0
 800706c:	4630      	mov	r0, r6
 800706e:	f7f9 f8c7 	bl	8000200 <memchr>
 8007072:	b108      	cbz	r0, 8007078 <_printf_i+0x1e4>
 8007074:	1b80      	subs	r0, r0, r6
 8007076:	6060      	str	r0, [r4, #4]
 8007078:	6863      	ldr	r3, [r4, #4]
 800707a:	6123      	str	r3, [r4, #16]
 800707c:	2300      	movs	r3, #0
 800707e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007082:	e7aa      	b.n	8006fda <_printf_i+0x146>
 8007084:	6923      	ldr	r3, [r4, #16]
 8007086:	4632      	mov	r2, r6
 8007088:	4649      	mov	r1, r9
 800708a:	4640      	mov	r0, r8
 800708c:	47d0      	blx	sl
 800708e:	3001      	adds	r0, #1
 8007090:	d0ad      	beq.n	8006fee <_printf_i+0x15a>
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	079b      	lsls	r3, r3, #30
 8007096:	d413      	bmi.n	80070c0 <_printf_i+0x22c>
 8007098:	68e0      	ldr	r0, [r4, #12]
 800709a:	9b03      	ldr	r3, [sp, #12]
 800709c:	4298      	cmp	r0, r3
 800709e:	bfb8      	it	lt
 80070a0:	4618      	movlt	r0, r3
 80070a2:	e7a6      	b.n	8006ff2 <_printf_i+0x15e>
 80070a4:	2301      	movs	r3, #1
 80070a6:	4632      	mov	r2, r6
 80070a8:	4649      	mov	r1, r9
 80070aa:	4640      	mov	r0, r8
 80070ac:	47d0      	blx	sl
 80070ae:	3001      	adds	r0, #1
 80070b0:	d09d      	beq.n	8006fee <_printf_i+0x15a>
 80070b2:	3501      	adds	r5, #1
 80070b4:	68e3      	ldr	r3, [r4, #12]
 80070b6:	9903      	ldr	r1, [sp, #12]
 80070b8:	1a5b      	subs	r3, r3, r1
 80070ba:	42ab      	cmp	r3, r5
 80070bc:	dcf2      	bgt.n	80070a4 <_printf_i+0x210>
 80070be:	e7eb      	b.n	8007098 <_printf_i+0x204>
 80070c0:	2500      	movs	r5, #0
 80070c2:	f104 0619 	add.w	r6, r4, #25
 80070c6:	e7f5      	b.n	80070b4 <_printf_i+0x220>
 80070c8:	0800af49 	.word	0x0800af49
 80070cc:	0800af5a 	.word	0x0800af5a

080070d0 <_scanf_float>:
 80070d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d4:	b087      	sub	sp, #28
 80070d6:	4691      	mov	r9, r2
 80070d8:	9303      	str	r3, [sp, #12]
 80070da:	688b      	ldr	r3, [r1, #8]
 80070dc:	1e5a      	subs	r2, r3, #1
 80070de:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80070e2:	bf81      	itttt	hi
 80070e4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80070e8:	eb03 0b05 	addhi.w	fp, r3, r5
 80070ec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80070f0:	608b      	strhi	r3, [r1, #8]
 80070f2:	680b      	ldr	r3, [r1, #0]
 80070f4:	460a      	mov	r2, r1
 80070f6:	f04f 0500 	mov.w	r5, #0
 80070fa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80070fe:	f842 3b1c 	str.w	r3, [r2], #28
 8007102:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007106:	4680      	mov	r8, r0
 8007108:	460c      	mov	r4, r1
 800710a:	bf98      	it	ls
 800710c:	f04f 0b00 	movls.w	fp, #0
 8007110:	9201      	str	r2, [sp, #4]
 8007112:	4616      	mov	r6, r2
 8007114:	46aa      	mov	sl, r5
 8007116:	462f      	mov	r7, r5
 8007118:	9502      	str	r5, [sp, #8]
 800711a:	68a2      	ldr	r2, [r4, #8]
 800711c:	b15a      	cbz	r2, 8007136 <_scanf_float+0x66>
 800711e:	f8d9 3000 	ldr.w	r3, [r9]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b4e      	cmp	r3, #78	@ 0x4e
 8007126:	d863      	bhi.n	80071f0 <_scanf_float+0x120>
 8007128:	2b40      	cmp	r3, #64	@ 0x40
 800712a:	d83b      	bhi.n	80071a4 <_scanf_float+0xd4>
 800712c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007130:	b2c8      	uxtb	r0, r1
 8007132:	280e      	cmp	r0, #14
 8007134:	d939      	bls.n	80071aa <_scanf_float+0xda>
 8007136:	b11f      	cbz	r7, 8007140 <_scanf_float+0x70>
 8007138:	6823      	ldr	r3, [r4, #0]
 800713a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800713e:	6023      	str	r3, [r4, #0]
 8007140:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007144:	f1ba 0f01 	cmp.w	sl, #1
 8007148:	f200 8114 	bhi.w	8007374 <_scanf_float+0x2a4>
 800714c:	9b01      	ldr	r3, [sp, #4]
 800714e:	429e      	cmp	r6, r3
 8007150:	f200 8105 	bhi.w	800735e <_scanf_float+0x28e>
 8007154:	2001      	movs	r0, #1
 8007156:	b007      	add	sp, #28
 8007158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007160:	2a0d      	cmp	r2, #13
 8007162:	d8e8      	bhi.n	8007136 <_scanf_float+0x66>
 8007164:	a101      	add	r1, pc, #4	@ (adr r1, 800716c <_scanf_float+0x9c>)
 8007166:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800716a:	bf00      	nop
 800716c:	080072b5 	.word	0x080072b5
 8007170:	08007137 	.word	0x08007137
 8007174:	08007137 	.word	0x08007137
 8007178:	08007137 	.word	0x08007137
 800717c:	08007311 	.word	0x08007311
 8007180:	080072eb 	.word	0x080072eb
 8007184:	08007137 	.word	0x08007137
 8007188:	08007137 	.word	0x08007137
 800718c:	080072c3 	.word	0x080072c3
 8007190:	08007137 	.word	0x08007137
 8007194:	08007137 	.word	0x08007137
 8007198:	08007137 	.word	0x08007137
 800719c:	08007137 	.word	0x08007137
 80071a0:	0800727f 	.word	0x0800727f
 80071a4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80071a8:	e7da      	b.n	8007160 <_scanf_float+0x90>
 80071aa:	290e      	cmp	r1, #14
 80071ac:	d8c3      	bhi.n	8007136 <_scanf_float+0x66>
 80071ae:	a001      	add	r0, pc, #4	@ (adr r0, 80071b4 <_scanf_float+0xe4>)
 80071b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80071b4:	0800726f 	.word	0x0800726f
 80071b8:	08007137 	.word	0x08007137
 80071bc:	0800726f 	.word	0x0800726f
 80071c0:	080072ff 	.word	0x080072ff
 80071c4:	08007137 	.word	0x08007137
 80071c8:	08007211 	.word	0x08007211
 80071cc:	08007255 	.word	0x08007255
 80071d0:	08007255 	.word	0x08007255
 80071d4:	08007255 	.word	0x08007255
 80071d8:	08007255 	.word	0x08007255
 80071dc:	08007255 	.word	0x08007255
 80071e0:	08007255 	.word	0x08007255
 80071e4:	08007255 	.word	0x08007255
 80071e8:	08007255 	.word	0x08007255
 80071ec:	08007255 	.word	0x08007255
 80071f0:	2b6e      	cmp	r3, #110	@ 0x6e
 80071f2:	d809      	bhi.n	8007208 <_scanf_float+0x138>
 80071f4:	2b60      	cmp	r3, #96	@ 0x60
 80071f6:	d8b1      	bhi.n	800715c <_scanf_float+0x8c>
 80071f8:	2b54      	cmp	r3, #84	@ 0x54
 80071fa:	d07b      	beq.n	80072f4 <_scanf_float+0x224>
 80071fc:	2b59      	cmp	r3, #89	@ 0x59
 80071fe:	d19a      	bne.n	8007136 <_scanf_float+0x66>
 8007200:	2d07      	cmp	r5, #7
 8007202:	d198      	bne.n	8007136 <_scanf_float+0x66>
 8007204:	2508      	movs	r5, #8
 8007206:	e02f      	b.n	8007268 <_scanf_float+0x198>
 8007208:	2b74      	cmp	r3, #116	@ 0x74
 800720a:	d073      	beq.n	80072f4 <_scanf_float+0x224>
 800720c:	2b79      	cmp	r3, #121	@ 0x79
 800720e:	e7f6      	b.n	80071fe <_scanf_float+0x12e>
 8007210:	6821      	ldr	r1, [r4, #0]
 8007212:	05c8      	lsls	r0, r1, #23
 8007214:	d51e      	bpl.n	8007254 <_scanf_float+0x184>
 8007216:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800721a:	6021      	str	r1, [r4, #0]
 800721c:	3701      	adds	r7, #1
 800721e:	f1bb 0f00 	cmp.w	fp, #0
 8007222:	d003      	beq.n	800722c <_scanf_float+0x15c>
 8007224:	3201      	adds	r2, #1
 8007226:	f10b 3bff 	add.w	fp, fp, #4294967295
 800722a:	60a2      	str	r2, [r4, #8]
 800722c:	68a3      	ldr	r3, [r4, #8]
 800722e:	3b01      	subs	r3, #1
 8007230:	60a3      	str	r3, [r4, #8]
 8007232:	6923      	ldr	r3, [r4, #16]
 8007234:	3301      	adds	r3, #1
 8007236:	6123      	str	r3, [r4, #16]
 8007238:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800723c:	3b01      	subs	r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	f8c9 3004 	str.w	r3, [r9, #4]
 8007244:	f340 8082 	ble.w	800734c <_scanf_float+0x27c>
 8007248:	f8d9 3000 	ldr.w	r3, [r9]
 800724c:	3301      	adds	r3, #1
 800724e:	f8c9 3000 	str.w	r3, [r9]
 8007252:	e762      	b.n	800711a <_scanf_float+0x4a>
 8007254:	eb1a 0105 	adds.w	r1, sl, r5
 8007258:	f47f af6d 	bne.w	8007136 <_scanf_float+0x66>
 800725c:	6822      	ldr	r2, [r4, #0]
 800725e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007262:	6022      	str	r2, [r4, #0]
 8007264:	460d      	mov	r5, r1
 8007266:	468a      	mov	sl, r1
 8007268:	f806 3b01 	strb.w	r3, [r6], #1
 800726c:	e7de      	b.n	800722c <_scanf_float+0x15c>
 800726e:	6822      	ldr	r2, [r4, #0]
 8007270:	0610      	lsls	r0, r2, #24
 8007272:	f57f af60 	bpl.w	8007136 <_scanf_float+0x66>
 8007276:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800727a:	6022      	str	r2, [r4, #0]
 800727c:	e7f4      	b.n	8007268 <_scanf_float+0x198>
 800727e:	f1ba 0f00 	cmp.w	sl, #0
 8007282:	d10c      	bne.n	800729e <_scanf_float+0x1ce>
 8007284:	b977      	cbnz	r7, 80072a4 <_scanf_float+0x1d4>
 8007286:	6822      	ldr	r2, [r4, #0]
 8007288:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800728c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007290:	d108      	bne.n	80072a4 <_scanf_float+0x1d4>
 8007292:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007296:	6022      	str	r2, [r4, #0]
 8007298:	f04f 0a01 	mov.w	sl, #1
 800729c:	e7e4      	b.n	8007268 <_scanf_float+0x198>
 800729e:	f1ba 0f02 	cmp.w	sl, #2
 80072a2:	d050      	beq.n	8007346 <_scanf_float+0x276>
 80072a4:	2d01      	cmp	r5, #1
 80072a6:	d002      	beq.n	80072ae <_scanf_float+0x1de>
 80072a8:	2d04      	cmp	r5, #4
 80072aa:	f47f af44 	bne.w	8007136 <_scanf_float+0x66>
 80072ae:	3501      	adds	r5, #1
 80072b0:	b2ed      	uxtb	r5, r5
 80072b2:	e7d9      	b.n	8007268 <_scanf_float+0x198>
 80072b4:	f1ba 0f01 	cmp.w	sl, #1
 80072b8:	f47f af3d 	bne.w	8007136 <_scanf_float+0x66>
 80072bc:	f04f 0a02 	mov.w	sl, #2
 80072c0:	e7d2      	b.n	8007268 <_scanf_float+0x198>
 80072c2:	b975      	cbnz	r5, 80072e2 <_scanf_float+0x212>
 80072c4:	2f00      	cmp	r7, #0
 80072c6:	f47f af37 	bne.w	8007138 <_scanf_float+0x68>
 80072ca:	6822      	ldr	r2, [r4, #0]
 80072cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80072d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80072d4:	f040 8103 	bne.w	80074de <_scanf_float+0x40e>
 80072d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072dc:	6022      	str	r2, [r4, #0]
 80072de:	2501      	movs	r5, #1
 80072e0:	e7c2      	b.n	8007268 <_scanf_float+0x198>
 80072e2:	2d03      	cmp	r5, #3
 80072e4:	d0e3      	beq.n	80072ae <_scanf_float+0x1de>
 80072e6:	2d05      	cmp	r5, #5
 80072e8:	e7df      	b.n	80072aa <_scanf_float+0x1da>
 80072ea:	2d02      	cmp	r5, #2
 80072ec:	f47f af23 	bne.w	8007136 <_scanf_float+0x66>
 80072f0:	2503      	movs	r5, #3
 80072f2:	e7b9      	b.n	8007268 <_scanf_float+0x198>
 80072f4:	2d06      	cmp	r5, #6
 80072f6:	f47f af1e 	bne.w	8007136 <_scanf_float+0x66>
 80072fa:	2507      	movs	r5, #7
 80072fc:	e7b4      	b.n	8007268 <_scanf_float+0x198>
 80072fe:	6822      	ldr	r2, [r4, #0]
 8007300:	0591      	lsls	r1, r2, #22
 8007302:	f57f af18 	bpl.w	8007136 <_scanf_float+0x66>
 8007306:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800730a:	6022      	str	r2, [r4, #0]
 800730c:	9702      	str	r7, [sp, #8]
 800730e:	e7ab      	b.n	8007268 <_scanf_float+0x198>
 8007310:	6822      	ldr	r2, [r4, #0]
 8007312:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007316:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800731a:	d005      	beq.n	8007328 <_scanf_float+0x258>
 800731c:	0550      	lsls	r0, r2, #21
 800731e:	f57f af0a 	bpl.w	8007136 <_scanf_float+0x66>
 8007322:	2f00      	cmp	r7, #0
 8007324:	f000 80db 	beq.w	80074de <_scanf_float+0x40e>
 8007328:	0591      	lsls	r1, r2, #22
 800732a:	bf58      	it	pl
 800732c:	9902      	ldrpl	r1, [sp, #8]
 800732e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007332:	bf58      	it	pl
 8007334:	1a79      	subpl	r1, r7, r1
 8007336:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800733a:	bf58      	it	pl
 800733c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007340:	6022      	str	r2, [r4, #0]
 8007342:	2700      	movs	r7, #0
 8007344:	e790      	b.n	8007268 <_scanf_float+0x198>
 8007346:	f04f 0a03 	mov.w	sl, #3
 800734a:	e78d      	b.n	8007268 <_scanf_float+0x198>
 800734c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007350:	4649      	mov	r1, r9
 8007352:	4640      	mov	r0, r8
 8007354:	4798      	blx	r3
 8007356:	2800      	cmp	r0, #0
 8007358:	f43f aedf 	beq.w	800711a <_scanf_float+0x4a>
 800735c:	e6eb      	b.n	8007136 <_scanf_float+0x66>
 800735e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007362:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007366:	464a      	mov	r2, r9
 8007368:	4640      	mov	r0, r8
 800736a:	4798      	blx	r3
 800736c:	6923      	ldr	r3, [r4, #16]
 800736e:	3b01      	subs	r3, #1
 8007370:	6123      	str	r3, [r4, #16]
 8007372:	e6eb      	b.n	800714c <_scanf_float+0x7c>
 8007374:	1e6b      	subs	r3, r5, #1
 8007376:	2b06      	cmp	r3, #6
 8007378:	d824      	bhi.n	80073c4 <_scanf_float+0x2f4>
 800737a:	2d02      	cmp	r5, #2
 800737c:	d836      	bhi.n	80073ec <_scanf_float+0x31c>
 800737e:	9b01      	ldr	r3, [sp, #4]
 8007380:	429e      	cmp	r6, r3
 8007382:	f67f aee7 	bls.w	8007154 <_scanf_float+0x84>
 8007386:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800738a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800738e:	464a      	mov	r2, r9
 8007390:	4640      	mov	r0, r8
 8007392:	4798      	blx	r3
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	3b01      	subs	r3, #1
 8007398:	6123      	str	r3, [r4, #16]
 800739a:	e7f0      	b.n	800737e <_scanf_float+0x2ae>
 800739c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073a0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80073a4:	464a      	mov	r2, r9
 80073a6:	4640      	mov	r0, r8
 80073a8:	4798      	blx	r3
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	6123      	str	r3, [r4, #16]
 80073b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073b4:	fa5f fa8a 	uxtb.w	sl, sl
 80073b8:	f1ba 0f02 	cmp.w	sl, #2
 80073bc:	d1ee      	bne.n	800739c <_scanf_float+0x2cc>
 80073be:	3d03      	subs	r5, #3
 80073c0:	b2ed      	uxtb	r5, r5
 80073c2:	1b76      	subs	r6, r6, r5
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	05da      	lsls	r2, r3, #23
 80073c8:	d530      	bpl.n	800742c <_scanf_float+0x35c>
 80073ca:	055b      	lsls	r3, r3, #21
 80073cc:	d511      	bpl.n	80073f2 <_scanf_float+0x322>
 80073ce:	9b01      	ldr	r3, [sp, #4]
 80073d0:	429e      	cmp	r6, r3
 80073d2:	f67f aebf 	bls.w	8007154 <_scanf_float+0x84>
 80073d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073de:	464a      	mov	r2, r9
 80073e0:	4640      	mov	r0, r8
 80073e2:	4798      	blx	r3
 80073e4:	6923      	ldr	r3, [r4, #16]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	6123      	str	r3, [r4, #16]
 80073ea:	e7f0      	b.n	80073ce <_scanf_float+0x2fe>
 80073ec:	46aa      	mov	sl, r5
 80073ee:	46b3      	mov	fp, r6
 80073f0:	e7de      	b.n	80073b0 <_scanf_float+0x2e0>
 80073f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80073f6:	6923      	ldr	r3, [r4, #16]
 80073f8:	2965      	cmp	r1, #101	@ 0x65
 80073fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80073fe:	f106 35ff 	add.w	r5, r6, #4294967295
 8007402:	6123      	str	r3, [r4, #16]
 8007404:	d00c      	beq.n	8007420 <_scanf_float+0x350>
 8007406:	2945      	cmp	r1, #69	@ 0x45
 8007408:	d00a      	beq.n	8007420 <_scanf_float+0x350>
 800740a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800740e:	464a      	mov	r2, r9
 8007410:	4640      	mov	r0, r8
 8007412:	4798      	blx	r3
 8007414:	6923      	ldr	r3, [r4, #16]
 8007416:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800741a:	3b01      	subs	r3, #1
 800741c:	1eb5      	subs	r5, r6, #2
 800741e:	6123      	str	r3, [r4, #16]
 8007420:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007424:	464a      	mov	r2, r9
 8007426:	4640      	mov	r0, r8
 8007428:	4798      	blx	r3
 800742a:	462e      	mov	r6, r5
 800742c:	6822      	ldr	r2, [r4, #0]
 800742e:	f012 0210 	ands.w	r2, r2, #16
 8007432:	d001      	beq.n	8007438 <_scanf_float+0x368>
 8007434:	2000      	movs	r0, #0
 8007436:	e68e      	b.n	8007156 <_scanf_float+0x86>
 8007438:	7032      	strb	r2, [r6, #0]
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007444:	d125      	bne.n	8007492 <_scanf_float+0x3c2>
 8007446:	9b02      	ldr	r3, [sp, #8]
 8007448:	429f      	cmp	r7, r3
 800744a:	d00a      	beq.n	8007462 <_scanf_float+0x392>
 800744c:	1bda      	subs	r2, r3, r7
 800744e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007452:	429e      	cmp	r6, r3
 8007454:	bf28      	it	cs
 8007456:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800745a:	4922      	ldr	r1, [pc, #136]	@ (80074e4 <_scanf_float+0x414>)
 800745c:	4630      	mov	r0, r6
 800745e:	f000 f919 	bl	8007694 <siprintf>
 8007462:	9901      	ldr	r1, [sp, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	4640      	mov	r0, r8
 8007468:	f002 fb7e 	bl	8009b68 <_strtod_r>
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	6821      	ldr	r1, [r4, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f011 0f02 	tst.w	r1, #2
 8007476:	ec57 6b10 	vmov	r6, r7, d0
 800747a:	f103 0204 	add.w	r2, r3, #4
 800747e:	d015      	beq.n	80074ac <_scanf_float+0x3dc>
 8007480:	9903      	ldr	r1, [sp, #12]
 8007482:	600a      	str	r2, [r1, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	e9c3 6700 	strd	r6, r7, [r3]
 800748a:	68e3      	ldr	r3, [r4, #12]
 800748c:	3301      	adds	r3, #1
 800748e:	60e3      	str	r3, [r4, #12]
 8007490:	e7d0      	b.n	8007434 <_scanf_float+0x364>
 8007492:	9b04      	ldr	r3, [sp, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0e4      	beq.n	8007462 <_scanf_float+0x392>
 8007498:	9905      	ldr	r1, [sp, #20]
 800749a:	230a      	movs	r3, #10
 800749c:	3101      	adds	r1, #1
 800749e:	4640      	mov	r0, r8
 80074a0:	f002 fbe2 	bl	8009c68 <_strtol_r>
 80074a4:	9b04      	ldr	r3, [sp, #16]
 80074a6:	9e05      	ldr	r6, [sp, #20]
 80074a8:	1ac2      	subs	r2, r0, r3
 80074aa:	e7d0      	b.n	800744e <_scanf_float+0x37e>
 80074ac:	f011 0f04 	tst.w	r1, #4
 80074b0:	9903      	ldr	r1, [sp, #12]
 80074b2:	600a      	str	r2, [r1, #0]
 80074b4:	d1e6      	bne.n	8007484 <_scanf_float+0x3b4>
 80074b6:	681d      	ldr	r5, [r3, #0]
 80074b8:	4632      	mov	r2, r6
 80074ba:	463b      	mov	r3, r7
 80074bc:	4630      	mov	r0, r6
 80074be:	4639      	mov	r1, r7
 80074c0:	f7f9 fb4c 	bl	8000b5c <__aeabi_dcmpun>
 80074c4:	b128      	cbz	r0, 80074d2 <_scanf_float+0x402>
 80074c6:	4808      	ldr	r0, [pc, #32]	@ (80074e8 <_scanf_float+0x418>)
 80074c8:	f000 f9da 	bl	8007880 <nanf>
 80074cc:	ed85 0a00 	vstr	s0, [r5]
 80074d0:	e7db      	b.n	800748a <_scanf_float+0x3ba>
 80074d2:	4630      	mov	r0, r6
 80074d4:	4639      	mov	r1, r7
 80074d6:	f7f9 fb9f 	bl	8000c18 <__aeabi_d2f>
 80074da:	6028      	str	r0, [r5, #0]
 80074dc:	e7d5      	b.n	800748a <_scanf_float+0x3ba>
 80074de:	2700      	movs	r7, #0
 80074e0:	e62e      	b.n	8007140 <_scanf_float+0x70>
 80074e2:	bf00      	nop
 80074e4:	0800af6b 	.word	0x0800af6b
 80074e8:	0800afab 	.word	0x0800afab

080074ec <std>:
 80074ec:	2300      	movs	r3, #0
 80074ee:	b510      	push	{r4, lr}
 80074f0:	4604      	mov	r4, r0
 80074f2:	e9c0 3300 	strd	r3, r3, [r0]
 80074f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074fa:	6083      	str	r3, [r0, #8]
 80074fc:	8181      	strh	r1, [r0, #12]
 80074fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8007500:	81c2      	strh	r2, [r0, #14]
 8007502:	6183      	str	r3, [r0, #24]
 8007504:	4619      	mov	r1, r3
 8007506:	2208      	movs	r2, #8
 8007508:	305c      	adds	r0, #92	@ 0x5c
 800750a:	f000 f928 	bl	800775e <memset>
 800750e:	4b0d      	ldr	r3, [pc, #52]	@ (8007544 <std+0x58>)
 8007510:	6263      	str	r3, [r4, #36]	@ 0x24
 8007512:	4b0d      	ldr	r3, [pc, #52]	@ (8007548 <std+0x5c>)
 8007514:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007516:	4b0d      	ldr	r3, [pc, #52]	@ (800754c <std+0x60>)
 8007518:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800751a:	4b0d      	ldr	r3, [pc, #52]	@ (8007550 <std+0x64>)
 800751c:	6323      	str	r3, [r4, #48]	@ 0x30
 800751e:	4b0d      	ldr	r3, [pc, #52]	@ (8007554 <std+0x68>)
 8007520:	6224      	str	r4, [r4, #32]
 8007522:	429c      	cmp	r4, r3
 8007524:	d006      	beq.n	8007534 <std+0x48>
 8007526:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800752a:	4294      	cmp	r4, r2
 800752c:	d002      	beq.n	8007534 <std+0x48>
 800752e:	33d0      	adds	r3, #208	@ 0xd0
 8007530:	429c      	cmp	r4, r3
 8007532:	d105      	bne.n	8007540 <std+0x54>
 8007534:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800753c:	f000 b99c 	b.w	8007878 <__retarget_lock_init_recursive>
 8007540:	bd10      	pop	{r4, pc}
 8007542:	bf00      	nop
 8007544:	080076d9 	.word	0x080076d9
 8007548:	080076fb 	.word	0x080076fb
 800754c:	08007733 	.word	0x08007733
 8007550:	08007757 	.word	0x08007757
 8007554:	20040b18 	.word	0x20040b18

08007558 <stdio_exit_handler>:
 8007558:	4a02      	ldr	r2, [pc, #8]	@ (8007564 <stdio_exit_handler+0xc>)
 800755a:	4903      	ldr	r1, [pc, #12]	@ (8007568 <stdio_exit_handler+0x10>)
 800755c:	4803      	ldr	r0, [pc, #12]	@ (800756c <stdio_exit_handler+0x14>)
 800755e:	f000 b869 	b.w	8007634 <_fwalk_sglue>
 8007562:	bf00      	nop
 8007564:	200400b4 	.word	0x200400b4
 8007568:	0800a2a9 	.word	0x0800a2a9
 800756c:	200400c4 	.word	0x200400c4

08007570 <cleanup_stdio>:
 8007570:	6841      	ldr	r1, [r0, #4]
 8007572:	4b0c      	ldr	r3, [pc, #48]	@ (80075a4 <cleanup_stdio+0x34>)
 8007574:	4299      	cmp	r1, r3
 8007576:	b510      	push	{r4, lr}
 8007578:	4604      	mov	r4, r0
 800757a:	d001      	beq.n	8007580 <cleanup_stdio+0x10>
 800757c:	f002 fe94 	bl	800a2a8 <_fflush_r>
 8007580:	68a1      	ldr	r1, [r4, #8]
 8007582:	4b09      	ldr	r3, [pc, #36]	@ (80075a8 <cleanup_stdio+0x38>)
 8007584:	4299      	cmp	r1, r3
 8007586:	d002      	beq.n	800758e <cleanup_stdio+0x1e>
 8007588:	4620      	mov	r0, r4
 800758a:	f002 fe8d 	bl	800a2a8 <_fflush_r>
 800758e:	68e1      	ldr	r1, [r4, #12]
 8007590:	4b06      	ldr	r3, [pc, #24]	@ (80075ac <cleanup_stdio+0x3c>)
 8007592:	4299      	cmp	r1, r3
 8007594:	d004      	beq.n	80075a0 <cleanup_stdio+0x30>
 8007596:	4620      	mov	r0, r4
 8007598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800759c:	f002 be84 	b.w	800a2a8 <_fflush_r>
 80075a0:	bd10      	pop	{r4, pc}
 80075a2:	bf00      	nop
 80075a4:	20040b18 	.word	0x20040b18
 80075a8:	20040b80 	.word	0x20040b80
 80075ac:	20040be8 	.word	0x20040be8

080075b0 <global_stdio_init.part.0>:
 80075b0:	b510      	push	{r4, lr}
 80075b2:	4b0b      	ldr	r3, [pc, #44]	@ (80075e0 <global_stdio_init.part.0+0x30>)
 80075b4:	4c0b      	ldr	r4, [pc, #44]	@ (80075e4 <global_stdio_init.part.0+0x34>)
 80075b6:	4a0c      	ldr	r2, [pc, #48]	@ (80075e8 <global_stdio_init.part.0+0x38>)
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	4620      	mov	r0, r4
 80075bc:	2200      	movs	r2, #0
 80075be:	2104      	movs	r1, #4
 80075c0:	f7ff ff94 	bl	80074ec <std>
 80075c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075c8:	2201      	movs	r2, #1
 80075ca:	2109      	movs	r1, #9
 80075cc:	f7ff ff8e 	bl	80074ec <std>
 80075d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075d4:	2202      	movs	r2, #2
 80075d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075da:	2112      	movs	r1, #18
 80075dc:	f7ff bf86 	b.w	80074ec <std>
 80075e0:	20040c50 	.word	0x20040c50
 80075e4:	20040b18 	.word	0x20040b18
 80075e8:	08007559 	.word	0x08007559

080075ec <__sfp_lock_acquire>:
 80075ec:	4801      	ldr	r0, [pc, #4]	@ (80075f4 <__sfp_lock_acquire+0x8>)
 80075ee:	f000 b944 	b.w	800787a <__retarget_lock_acquire_recursive>
 80075f2:	bf00      	nop
 80075f4:	20040c59 	.word	0x20040c59

080075f8 <__sfp_lock_release>:
 80075f8:	4801      	ldr	r0, [pc, #4]	@ (8007600 <__sfp_lock_release+0x8>)
 80075fa:	f000 b93f 	b.w	800787c <__retarget_lock_release_recursive>
 80075fe:	bf00      	nop
 8007600:	20040c59 	.word	0x20040c59

08007604 <__sinit>:
 8007604:	b510      	push	{r4, lr}
 8007606:	4604      	mov	r4, r0
 8007608:	f7ff fff0 	bl	80075ec <__sfp_lock_acquire>
 800760c:	6a23      	ldr	r3, [r4, #32]
 800760e:	b11b      	cbz	r3, 8007618 <__sinit+0x14>
 8007610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007614:	f7ff bff0 	b.w	80075f8 <__sfp_lock_release>
 8007618:	4b04      	ldr	r3, [pc, #16]	@ (800762c <__sinit+0x28>)
 800761a:	6223      	str	r3, [r4, #32]
 800761c:	4b04      	ldr	r3, [pc, #16]	@ (8007630 <__sinit+0x2c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1f5      	bne.n	8007610 <__sinit+0xc>
 8007624:	f7ff ffc4 	bl	80075b0 <global_stdio_init.part.0>
 8007628:	e7f2      	b.n	8007610 <__sinit+0xc>
 800762a:	bf00      	nop
 800762c:	08007571 	.word	0x08007571
 8007630:	20040c50 	.word	0x20040c50

08007634 <_fwalk_sglue>:
 8007634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007638:	4607      	mov	r7, r0
 800763a:	4688      	mov	r8, r1
 800763c:	4614      	mov	r4, r2
 800763e:	2600      	movs	r6, #0
 8007640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007644:	f1b9 0901 	subs.w	r9, r9, #1
 8007648:	d505      	bpl.n	8007656 <_fwalk_sglue+0x22>
 800764a:	6824      	ldr	r4, [r4, #0]
 800764c:	2c00      	cmp	r4, #0
 800764e:	d1f7      	bne.n	8007640 <_fwalk_sglue+0xc>
 8007650:	4630      	mov	r0, r6
 8007652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007656:	89ab      	ldrh	r3, [r5, #12]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d907      	bls.n	800766c <_fwalk_sglue+0x38>
 800765c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007660:	3301      	adds	r3, #1
 8007662:	d003      	beq.n	800766c <_fwalk_sglue+0x38>
 8007664:	4629      	mov	r1, r5
 8007666:	4638      	mov	r0, r7
 8007668:	47c0      	blx	r8
 800766a:	4306      	orrs	r6, r0
 800766c:	3568      	adds	r5, #104	@ 0x68
 800766e:	e7e9      	b.n	8007644 <_fwalk_sglue+0x10>

08007670 <iprintf>:
 8007670:	b40f      	push	{r0, r1, r2, r3}
 8007672:	b507      	push	{r0, r1, r2, lr}
 8007674:	4906      	ldr	r1, [pc, #24]	@ (8007690 <iprintf+0x20>)
 8007676:	ab04      	add	r3, sp, #16
 8007678:	6808      	ldr	r0, [r1, #0]
 800767a:	f853 2b04 	ldr.w	r2, [r3], #4
 800767e:	6881      	ldr	r1, [r0, #8]
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	f002 fc75 	bl	8009f70 <_vfiprintf_r>
 8007686:	b003      	add	sp, #12
 8007688:	f85d eb04 	ldr.w	lr, [sp], #4
 800768c:	b004      	add	sp, #16
 800768e:	4770      	bx	lr
 8007690:	200400c0 	.word	0x200400c0

08007694 <siprintf>:
 8007694:	b40e      	push	{r1, r2, r3}
 8007696:	b510      	push	{r4, lr}
 8007698:	b09d      	sub	sp, #116	@ 0x74
 800769a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800769c:	9002      	str	r0, [sp, #8]
 800769e:	9006      	str	r0, [sp, #24]
 80076a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80076a4:	480a      	ldr	r0, [pc, #40]	@ (80076d0 <siprintf+0x3c>)
 80076a6:	9107      	str	r1, [sp, #28]
 80076a8:	9104      	str	r1, [sp, #16]
 80076aa:	490a      	ldr	r1, [pc, #40]	@ (80076d4 <siprintf+0x40>)
 80076ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b0:	9105      	str	r1, [sp, #20]
 80076b2:	2400      	movs	r4, #0
 80076b4:	a902      	add	r1, sp, #8
 80076b6:	6800      	ldr	r0, [r0, #0]
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80076bc:	f002 fb32 	bl	8009d24 <_svfiprintf_r>
 80076c0:	9b02      	ldr	r3, [sp, #8]
 80076c2:	701c      	strb	r4, [r3, #0]
 80076c4:	b01d      	add	sp, #116	@ 0x74
 80076c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ca:	b003      	add	sp, #12
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	200400c0 	.word	0x200400c0
 80076d4:	ffff0208 	.word	0xffff0208

080076d8 <__sread>:
 80076d8:	b510      	push	{r4, lr}
 80076da:	460c      	mov	r4, r1
 80076dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e0:	f000 f86c 	bl	80077bc <_read_r>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	bfab      	itete	ge
 80076e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076ea:	89a3      	ldrhlt	r3, [r4, #12]
 80076ec:	181b      	addge	r3, r3, r0
 80076ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076f2:	bfac      	ite	ge
 80076f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076f6:	81a3      	strhlt	r3, [r4, #12]
 80076f8:	bd10      	pop	{r4, pc}

080076fa <__swrite>:
 80076fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076fe:	461f      	mov	r7, r3
 8007700:	898b      	ldrh	r3, [r1, #12]
 8007702:	05db      	lsls	r3, r3, #23
 8007704:	4605      	mov	r5, r0
 8007706:	460c      	mov	r4, r1
 8007708:	4616      	mov	r6, r2
 800770a:	d505      	bpl.n	8007718 <__swrite+0x1e>
 800770c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007710:	2302      	movs	r3, #2
 8007712:	2200      	movs	r2, #0
 8007714:	f000 f840 	bl	8007798 <_lseek_r>
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800771e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007722:	81a3      	strh	r3, [r4, #12]
 8007724:	4632      	mov	r2, r6
 8007726:	463b      	mov	r3, r7
 8007728:	4628      	mov	r0, r5
 800772a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800772e:	f000 b867 	b.w	8007800 <_write_r>

08007732 <__sseek>:
 8007732:	b510      	push	{r4, lr}
 8007734:	460c      	mov	r4, r1
 8007736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800773a:	f000 f82d 	bl	8007798 <_lseek_r>
 800773e:	1c43      	adds	r3, r0, #1
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	bf15      	itete	ne
 8007744:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007746:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800774a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800774e:	81a3      	strheq	r3, [r4, #12]
 8007750:	bf18      	it	ne
 8007752:	81a3      	strhne	r3, [r4, #12]
 8007754:	bd10      	pop	{r4, pc}

08007756 <__sclose>:
 8007756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775a:	f000 b80d 	b.w	8007778 <_close_r>

0800775e <memset>:
 800775e:	4402      	add	r2, r0
 8007760:	4603      	mov	r3, r0
 8007762:	4293      	cmp	r3, r2
 8007764:	d100      	bne.n	8007768 <memset+0xa>
 8007766:	4770      	bx	lr
 8007768:	f803 1b01 	strb.w	r1, [r3], #1
 800776c:	e7f9      	b.n	8007762 <memset+0x4>
	...

08007770 <_localeconv_r>:
 8007770:	4800      	ldr	r0, [pc, #0]	@ (8007774 <_localeconv_r+0x4>)
 8007772:	4770      	bx	lr
 8007774:	20040200 	.word	0x20040200

08007778 <_close_r>:
 8007778:	b538      	push	{r3, r4, r5, lr}
 800777a:	4d06      	ldr	r5, [pc, #24]	@ (8007794 <_close_r+0x1c>)
 800777c:	2300      	movs	r3, #0
 800777e:	4604      	mov	r4, r0
 8007780:	4608      	mov	r0, r1
 8007782:	602b      	str	r3, [r5, #0]
 8007784:	f7fb fa33 	bl	8002bee <_close>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d102      	bne.n	8007792 <_close_r+0x1a>
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	b103      	cbz	r3, 8007792 <_close_r+0x1a>
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	bd38      	pop	{r3, r4, r5, pc}
 8007794:	20040c54 	.word	0x20040c54

08007798 <_lseek_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4d07      	ldr	r5, [pc, #28]	@ (80077b8 <_lseek_r+0x20>)
 800779c:	4604      	mov	r4, r0
 800779e:	4608      	mov	r0, r1
 80077a0:	4611      	mov	r1, r2
 80077a2:	2200      	movs	r2, #0
 80077a4:	602a      	str	r2, [r5, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	f7fb fa48 	bl	8002c3c <_lseek>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d102      	bne.n	80077b6 <_lseek_r+0x1e>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	b103      	cbz	r3, 80077b6 <_lseek_r+0x1e>
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	20040c54 	.word	0x20040c54

080077bc <_read_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	4d07      	ldr	r5, [pc, #28]	@ (80077dc <_read_r+0x20>)
 80077c0:	4604      	mov	r4, r0
 80077c2:	4608      	mov	r0, r1
 80077c4:	4611      	mov	r1, r2
 80077c6:	2200      	movs	r2, #0
 80077c8:	602a      	str	r2, [r5, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	f7fb f9d6 	bl	8002b7c <_read>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d102      	bne.n	80077da <_read_r+0x1e>
 80077d4:	682b      	ldr	r3, [r5, #0]
 80077d6:	b103      	cbz	r3, 80077da <_read_r+0x1e>
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	bd38      	pop	{r3, r4, r5, pc}
 80077dc:	20040c54 	.word	0x20040c54

080077e0 <_sbrk_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4d06      	ldr	r5, [pc, #24]	@ (80077fc <_sbrk_r+0x1c>)
 80077e4:	2300      	movs	r3, #0
 80077e6:	4604      	mov	r4, r0
 80077e8:	4608      	mov	r0, r1
 80077ea:	602b      	str	r3, [r5, #0]
 80077ec:	f7fb fa34 	bl	8002c58 <_sbrk>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d102      	bne.n	80077fa <_sbrk_r+0x1a>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	b103      	cbz	r3, 80077fa <_sbrk_r+0x1a>
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	20040c54 	.word	0x20040c54

08007800 <_write_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4d07      	ldr	r5, [pc, #28]	@ (8007820 <_write_r+0x20>)
 8007804:	4604      	mov	r4, r0
 8007806:	4608      	mov	r0, r1
 8007808:	4611      	mov	r1, r2
 800780a:	2200      	movs	r2, #0
 800780c:	602a      	str	r2, [r5, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	f7fb f9d1 	bl	8002bb6 <_write>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <_write_r+0x1e>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	b103      	cbz	r3, 800781e <_write_r+0x1e>
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	20040c54 	.word	0x20040c54

08007824 <__errno>:
 8007824:	4b01      	ldr	r3, [pc, #4]	@ (800782c <__errno+0x8>)
 8007826:	6818      	ldr	r0, [r3, #0]
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	200400c0 	.word	0x200400c0

08007830 <__libc_init_array>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4d0d      	ldr	r5, [pc, #52]	@ (8007868 <__libc_init_array+0x38>)
 8007834:	4c0d      	ldr	r4, [pc, #52]	@ (800786c <__libc_init_array+0x3c>)
 8007836:	1b64      	subs	r4, r4, r5
 8007838:	10a4      	asrs	r4, r4, #2
 800783a:	2600      	movs	r6, #0
 800783c:	42a6      	cmp	r6, r4
 800783e:	d109      	bne.n	8007854 <__libc_init_array+0x24>
 8007840:	4d0b      	ldr	r5, [pc, #44]	@ (8007870 <__libc_init_array+0x40>)
 8007842:	4c0c      	ldr	r4, [pc, #48]	@ (8007874 <__libc_init_array+0x44>)
 8007844:	f003 fab0 	bl	800ada8 <_init>
 8007848:	1b64      	subs	r4, r4, r5
 800784a:	10a4      	asrs	r4, r4, #2
 800784c:	2600      	movs	r6, #0
 800784e:	42a6      	cmp	r6, r4
 8007850:	d105      	bne.n	800785e <__libc_init_array+0x2e>
 8007852:	bd70      	pop	{r4, r5, r6, pc}
 8007854:	f855 3b04 	ldr.w	r3, [r5], #4
 8007858:	4798      	blx	r3
 800785a:	3601      	adds	r6, #1
 800785c:	e7ee      	b.n	800783c <__libc_init_array+0xc>
 800785e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007862:	4798      	blx	r3
 8007864:	3601      	adds	r6, #1
 8007866:	e7f2      	b.n	800784e <__libc_init_array+0x1e>
 8007868:	0800b354 	.word	0x0800b354
 800786c:	0800b354 	.word	0x0800b354
 8007870:	0800b354 	.word	0x0800b354
 8007874:	0800b35c 	.word	0x0800b35c

08007878 <__retarget_lock_init_recursive>:
 8007878:	4770      	bx	lr

0800787a <__retarget_lock_acquire_recursive>:
 800787a:	4770      	bx	lr

0800787c <__retarget_lock_release_recursive>:
 800787c:	4770      	bx	lr
	...

08007880 <nanf>:
 8007880:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007888 <nanf+0x8>
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	7fc00000 	.word	0x7fc00000

0800788c <__assert_func>:
 800788c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800788e:	4614      	mov	r4, r2
 8007890:	461a      	mov	r2, r3
 8007892:	4b09      	ldr	r3, [pc, #36]	@ (80078b8 <__assert_func+0x2c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4605      	mov	r5, r0
 8007898:	68d8      	ldr	r0, [r3, #12]
 800789a:	b14c      	cbz	r4, 80078b0 <__assert_func+0x24>
 800789c:	4b07      	ldr	r3, [pc, #28]	@ (80078bc <__assert_func+0x30>)
 800789e:	9100      	str	r1, [sp, #0]
 80078a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078a4:	4906      	ldr	r1, [pc, #24]	@ (80078c0 <__assert_func+0x34>)
 80078a6:	462b      	mov	r3, r5
 80078a8:	f002 fd26 	bl	800a2f8 <fiprintf>
 80078ac:	f002 fe0c 	bl	800a4c8 <abort>
 80078b0:	4b04      	ldr	r3, [pc, #16]	@ (80078c4 <__assert_func+0x38>)
 80078b2:	461c      	mov	r4, r3
 80078b4:	e7f3      	b.n	800789e <__assert_func+0x12>
 80078b6:	bf00      	nop
 80078b8:	200400c0 	.word	0x200400c0
 80078bc:	0800af70 	.word	0x0800af70
 80078c0:	0800af7d 	.word	0x0800af7d
 80078c4:	0800afab 	.word	0x0800afab

080078c8 <quorem>:
 80078c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	6903      	ldr	r3, [r0, #16]
 80078ce:	690c      	ldr	r4, [r1, #16]
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	4607      	mov	r7, r0
 80078d4:	db7e      	blt.n	80079d4 <quorem+0x10c>
 80078d6:	3c01      	subs	r4, #1
 80078d8:	f101 0814 	add.w	r8, r1, #20
 80078dc:	00a3      	lsls	r3, r4, #2
 80078de:	f100 0514 	add.w	r5, r0, #20
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078f2:	3301      	adds	r3, #1
 80078f4:	429a      	cmp	r2, r3
 80078f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078fa:	fbb2 f6f3 	udiv	r6, r2, r3
 80078fe:	d32e      	bcc.n	800795e <quorem+0x96>
 8007900:	f04f 0a00 	mov.w	sl, #0
 8007904:	46c4      	mov	ip, r8
 8007906:	46ae      	mov	lr, r5
 8007908:	46d3      	mov	fp, sl
 800790a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800790e:	b298      	uxth	r0, r3
 8007910:	fb06 a000 	mla	r0, r6, r0, sl
 8007914:	0c02      	lsrs	r2, r0, #16
 8007916:	0c1b      	lsrs	r3, r3, #16
 8007918:	fb06 2303 	mla	r3, r6, r3, r2
 800791c:	f8de 2000 	ldr.w	r2, [lr]
 8007920:	b280      	uxth	r0, r0
 8007922:	b292      	uxth	r2, r2
 8007924:	1a12      	subs	r2, r2, r0
 8007926:	445a      	add	r2, fp
 8007928:	f8de 0000 	ldr.w	r0, [lr]
 800792c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007930:	b29b      	uxth	r3, r3
 8007932:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007936:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800793a:	b292      	uxth	r2, r2
 800793c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007940:	45e1      	cmp	r9, ip
 8007942:	f84e 2b04 	str.w	r2, [lr], #4
 8007946:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800794a:	d2de      	bcs.n	800790a <quorem+0x42>
 800794c:	9b00      	ldr	r3, [sp, #0]
 800794e:	58eb      	ldr	r3, [r5, r3]
 8007950:	b92b      	cbnz	r3, 800795e <quorem+0x96>
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	3b04      	subs	r3, #4
 8007956:	429d      	cmp	r5, r3
 8007958:	461a      	mov	r2, r3
 800795a:	d32f      	bcc.n	80079bc <quorem+0xf4>
 800795c:	613c      	str	r4, [r7, #16]
 800795e:	4638      	mov	r0, r7
 8007960:	f001 f910 	bl	8008b84 <__mcmp>
 8007964:	2800      	cmp	r0, #0
 8007966:	db25      	blt.n	80079b4 <quorem+0xec>
 8007968:	4629      	mov	r1, r5
 800796a:	2000      	movs	r0, #0
 800796c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007970:	f8d1 c000 	ldr.w	ip, [r1]
 8007974:	fa1f fe82 	uxth.w	lr, r2
 8007978:	fa1f f38c 	uxth.w	r3, ip
 800797c:	eba3 030e 	sub.w	r3, r3, lr
 8007980:	4403      	add	r3, r0
 8007982:	0c12      	lsrs	r2, r2, #16
 8007984:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007988:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800798c:	b29b      	uxth	r3, r3
 800798e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007992:	45c1      	cmp	r9, r8
 8007994:	f841 3b04 	str.w	r3, [r1], #4
 8007998:	ea4f 4022 	mov.w	r0, r2, asr #16
 800799c:	d2e6      	bcs.n	800796c <quorem+0xa4>
 800799e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079a6:	b922      	cbnz	r2, 80079b2 <quorem+0xea>
 80079a8:	3b04      	subs	r3, #4
 80079aa:	429d      	cmp	r5, r3
 80079ac:	461a      	mov	r2, r3
 80079ae:	d30b      	bcc.n	80079c8 <quorem+0x100>
 80079b0:	613c      	str	r4, [r7, #16]
 80079b2:	3601      	adds	r6, #1
 80079b4:	4630      	mov	r0, r6
 80079b6:	b003      	add	sp, #12
 80079b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079bc:	6812      	ldr	r2, [r2, #0]
 80079be:	3b04      	subs	r3, #4
 80079c0:	2a00      	cmp	r2, #0
 80079c2:	d1cb      	bne.n	800795c <quorem+0x94>
 80079c4:	3c01      	subs	r4, #1
 80079c6:	e7c6      	b.n	8007956 <quorem+0x8e>
 80079c8:	6812      	ldr	r2, [r2, #0]
 80079ca:	3b04      	subs	r3, #4
 80079cc:	2a00      	cmp	r2, #0
 80079ce:	d1ef      	bne.n	80079b0 <quorem+0xe8>
 80079d0:	3c01      	subs	r4, #1
 80079d2:	e7ea      	b.n	80079aa <quorem+0xe2>
 80079d4:	2000      	movs	r0, #0
 80079d6:	e7ee      	b.n	80079b6 <quorem+0xee>

080079d8 <_dtoa_r>:
 80079d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	69c7      	ldr	r7, [r0, #28]
 80079de:	b097      	sub	sp, #92	@ 0x5c
 80079e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80079e4:	ec55 4b10 	vmov	r4, r5, d0
 80079e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80079ea:	9107      	str	r1, [sp, #28]
 80079ec:	4681      	mov	r9, r0
 80079ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80079f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80079f2:	b97f      	cbnz	r7, 8007a14 <_dtoa_r+0x3c>
 80079f4:	2010      	movs	r0, #16
 80079f6:	f7fe fdeb 	bl	80065d0 <malloc>
 80079fa:	4602      	mov	r2, r0
 80079fc:	f8c9 001c 	str.w	r0, [r9, #28]
 8007a00:	b920      	cbnz	r0, 8007a0c <_dtoa_r+0x34>
 8007a02:	4ba9      	ldr	r3, [pc, #676]	@ (8007ca8 <_dtoa_r+0x2d0>)
 8007a04:	21ef      	movs	r1, #239	@ 0xef
 8007a06:	48a9      	ldr	r0, [pc, #676]	@ (8007cac <_dtoa_r+0x2d4>)
 8007a08:	f7ff ff40 	bl	800788c <__assert_func>
 8007a0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a10:	6007      	str	r7, [r0, #0]
 8007a12:	60c7      	str	r7, [r0, #12]
 8007a14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a18:	6819      	ldr	r1, [r3, #0]
 8007a1a:	b159      	cbz	r1, 8007a34 <_dtoa_r+0x5c>
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	604a      	str	r2, [r1, #4]
 8007a20:	2301      	movs	r3, #1
 8007a22:	4093      	lsls	r3, r2
 8007a24:	608b      	str	r3, [r1, #8]
 8007a26:	4648      	mov	r0, r9
 8007a28:	f000 fe30 	bl	800868c <_Bfree>
 8007a2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	1e2b      	subs	r3, r5, #0
 8007a36:	bfb9      	ittee	lt
 8007a38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a3c:	9305      	strlt	r3, [sp, #20]
 8007a3e:	2300      	movge	r3, #0
 8007a40:	6033      	strge	r3, [r6, #0]
 8007a42:	9f05      	ldr	r7, [sp, #20]
 8007a44:	4b9a      	ldr	r3, [pc, #616]	@ (8007cb0 <_dtoa_r+0x2d8>)
 8007a46:	bfbc      	itt	lt
 8007a48:	2201      	movlt	r2, #1
 8007a4a:	6032      	strlt	r2, [r6, #0]
 8007a4c:	43bb      	bics	r3, r7
 8007a4e:	d112      	bne.n	8007a76 <_dtoa_r+0x9e>
 8007a50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a56:	6013      	str	r3, [r2, #0]
 8007a58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a5c:	4323      	orrs	r3, r4
 8007a5e:	f000 855a 	beq.w	8008516 <_dtoa_r+0xb3e>
 8007a62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a64:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007cc4 <_dtoa_r+0x2ec>
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 855c 	beq.w	8008526 <_dtoa_r+0xb4e>
 8007a6e:	f10a 0303 	add.w	r3, sl, #3
 8007a72:	f000 bd56 	b.w	8008522 <_dtoa_r+0xb4a>
 8007a76:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	ec51 0b17 	vmov	r0, r1, d7
 8007a80:	2300      	movs	r3, #0
 8007a82:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007a86:	f7f9 f837 	bl	8000af8 <__aeabi_dcmpeq>
 8007a8a:	4680      	mov	r8, r0
 8007a8c:	b158      	cbz	r0, 8007aa6 <_dtoa_r+0xce>
 8007a8e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a90:	2301      	movs	r3, #1
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a96:	b113      	cbz	r3, 8007a9e <_dtoa_r+0xc6>
 8007a98:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007a9a:	4b86      	ldr	r3, [pc, #536]	@ (8007cb4 <_dtoa_r+0x2dc>)
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007cc8 <_dtoa_r+0x2f0>
 8007aa2:	f000 bd40 	b.w	8008526 <_dtoa_r+0xb4e>
 8007aa6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007aaa:	aa14      	add	r2, sp, #80	@ 0x50
 8007aac:	a915      	add	r1, sp, #84	@ 0x54
 8007aae:	4648      	mov	r0, r9
 8007ab0:	f001 f988 	bl	8008dc4 <__d2b>
 8007ab4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ab8:	9002      	str	r0, [sp, #8]
 8007aba:	2e00      	cmp	r6, #0
 8007abc:	d078      	beq.n	8007bb0 <_dtoa_r+0x1d8>
 8007abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ac0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ac8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007acc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ad0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ad4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ad8:	4619      	mov	r1, r3
 8007ada:	2200      	movs	r2, #0
 8007adc:	4b76      	ldr	r3, [pc, #472]	@ (8007cb8 <_dtoa_r+0x2e0>)
 8007ade:	f7f8 fbeb 	bl	80002b8 <__aeabi_dsub>
 8007ae2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007c90 <_dtoa_r+0x2b8>)
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	f7f8 fd9e 	bl	8000628 <__aeabi_dmul>
 8007aec:	a36a      	add	r3, pc, #424	@ (adr r3, 8007c98 <_dtoa_r+0x2c0>)
 8007aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af2:	f7f8 fbe3 	bl	80002bc <__adddf3>
 8007af6:	4604      	mov	r4, r0
 8007af8:	4630      	mov	r0, r6
 8007afa:	460d      	mov	r5, r1
 8007afc:	f7f8 fd2a 	bl	8000554 <__aeabi_i2d>
 8007b00:	a367      	add	r3, pc, #412	@ (adr r3, 8007ca0 <_dtoa_r+0x2c8>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	f7f8 fd8f 	bl	8000628 <__aeabi_dmul>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4620      	mov	r0, r4
 8007b10:	4629      	mov	r1, r5
 8007b12:	f7f8 fbd3 	bl	80002bc <__adddf3>
 8007b16:	4604      	mov	r4, r0
 8007b18:	460d      	mov	r5, r1
 8007b1a:	f7f9 f835 	bl	8000b88 <__aeabi_d2iz>
 8007b1e:	2200      	movs	r2, #0
 8007b20:	4607      	mov	r7, r0
 8007b22:	2300      	movs	r3, #0
 8007b24:	4620      	mov	r0, r4
 8007b26:	4629      	mov	r1, r5
 8007b28:	f7f8 fff0 	bl	8000b0c <__aeabi_dcmplt>
 8007b2c:	b140      	cbz	r0, 8007b40 <_dtoa_r+0x168>
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f7f8 fd10 	bl	8000554 <__aeabi_i2d>
 8007b34:	4622      	mov	r2, r4
 8007b36:	462b      	mov	r3, r5
 8007b38:	f7f8 ffde 	bl	8000af8 <__aeabi_dcmpeq>
 8007b3c:	b900      	cbnz	r0, 8007b40 <_dtoa_r+0x168>
 8007b3e:	3f01      	subs	r7, #1
 8007b40:	2f16      	cmp	r7, #22
 8007b42:	d852      	bhi.n	8007bea <_dtoa_r+0x212>
 8007b44:	4b5d      	ldr	r3, [pc, #372]	@ (8007cbc <_dtoa_r+0x2e4>)
 8007b46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b52:	f7f8 ffdb 	bl	8000b0c <__aeabi_dcmplt>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d049      	beq.n	8007bee <_dtoa_r+0x216>
 8007b5a:	3f01      	subs	r7, #1
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b62:	1b9b      	subs	r3, r3, r6
 8007b64:	1e5a      	subs	r2, r3, #1
 8007b66:	bf45      	ittet	mi
 8007b68:	f1c3 0301 	rsbmi	r3, r3, #1
 8007b6c:	9300      	strmi	r3, [sp, #0]
 8007b6e:	2300      	movpl	r3, #0
 8007b70:	2300      	movmi	r3, #0
 8007b72:	9206      	str	r2, [sp, #24]
 8007b74:	bf54      	ite	pl
 8007b76:	9300      	strpl	r3, [sp, #0]
 8007b78:	9306      	strmi	r3, [sp, #24]
 8007b7a:	2f00      	cmp	r7, #0
 8007b7c:	db39      	blt.n	8007bf2 <_dtoa_r+0x21a>
 8007b7e:	9b06      	ldr	r3, [sp, #24]
 8007b80:	970d      	str	r7, [sp, #52]	@ 0x34
 8007b82:	443b      	add	r3, r7
 8007b84:	9306      	str	r3, [sp, #24]
 8007b86:	2300      	movs	r3, #0
 8007b88:	9308      	str	r3, [sp, #32]
 8007b8a:	9b07      	ldr	r3, [sp, #28]
 8007b8c:	2b09      	cmp	r3, #9
 8007b8e:	d863      	bhi.n	8007c58 <_dtoa_r+0x280>
 8007b90:	2b05      	cmp	r3, #5
 8007b92:	bfc4      	itt	gt
 8007b94:	3b04      	subgt	r3, #4
 8007b96:	9307      	strgt	r3, [sp, #28]
 8007b98:	9b07      	ldr	r3, [sp, #28]
 8007b9a:	f1a3 0302 	sub.w	r3, r3, #2
 8007b9e:	bfcc      	ite	gt
 8007ba0:	2400      	movgt	r4, #0
 8007ba2:	2401      	movle	r4, #1
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d863      	bhi.n	8007c70 <_dtoa_r+0x298>
 8007ba8:	e8df f003 	tbb	[pc, r3]
 8007bac:	2b375452 	.word	0x2b375452
 8007bb0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007bb4:	441e      	add	r6, r3
 8007bb6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	bfc1      	itttt	gt
 8007bbe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007bc2:	409f      	lslgt	r7, r3
 8007bc4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007bc8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007bcc:	bfd6      	itet	le
 8007bce:	f1c3 0320 	rsble	r3, r3, #32
 8007bd2:	ea47 0003 	orrgt.w	r0, r7, r3
 8007bd6:	fa04 f003 	lslle.w	r0, r4, r3
 8007bda:	f7f8 fcab 	bl	8000534 <__aeabi_ui2d>
 8007bde:	2201      	movs	r2, #1
 8007be0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007be4:	3e01      	subs	r6, #1
 8007be6:	9212      	str	r2, [sp, #72]	@ 0x48
 8007be8:	e776      	b.n	8007ad8 <_dtoa_r+0x100>
 8007bea:	2301      	movs	r3, #1
 8007bec:	e7b7      	b.n	8007b5e <_dtoa_r+0x186>
 8007bee:	9010      	str	r0, [sp, #64]	@ 0x40
 8007bf0:	e7b6      	b.n	8007b60 <_dtoa_r+0x188>
 8007bf2:	9b00      	ldr	r3, [sp, #0]
 8007bf4:	1bdb      	subs	r3, r3, r7
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	427b      	negs	r3, r7
 8007bfa:	9308      	str	r3, [sp, #32]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	930d      	str	r3, [sp, #52]	@ 0x34
 8007c00:	e7c3      	b.n	8007b8a <_dtoa_r+0x1b2>
 8007c02:	2301      	movs	r3, #1
 8007c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c08:	eb07 0b03 	add.w	fp, r7, r3
 8007c0c:	f10b 0301 	add.w	r3, fp, #1
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	9303      	str	r3, [sp, #12]
 8007c14:	bfb8      	it	lt
 8007c16:	2301      	movlt	r3, #1
 8007c18:	e006      	b.n	8007c28 <_dtoa_r+0x250>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	dd28      	ble.n	8007c76 <_dtoa_r+0x29e>
 8007c24:	469b      	mov	fp, r3
 8007c26:	9303      	str	r3, [sp, #12]
 8007c28:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	2204      	movs	r2, #4
 8007c30:	f102 0514 	add.w	r5, r2, #20
 8007c34:	429d      	cmp	r5, r3
 8007c36:	d926      	bls.n	8007c86 <_dtoa_r+0x2ae>
 8007c38:	6041      	str	r1, [r0, #4]
 8007c3a:	4648      	mov	r0, r9
 8007c3c:	f000 fce6 	bl	800860c <_Balloc>
 8007c40:	4682      	mov	sl, r0
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d142      	bne.n	8007ccc <_dtoa_r+0x2f4>
 8007c46:	4b1e      	ldr	r3, [pc, #120]	@ (8007cc0 <_dtoa_r+0x2e8>)
 8007c48:	4602      	mov	r2, r0
 8007c4a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c4e:	e6da      	b.n	8007a06 <_dtoa_r+0x2e>
 8007c50:	2300      	movs	r3, #0
 8007c52:	e7e3      	b.n	8007c1c <_dtoa_r+0x244>
 8007c54:	2300      	movs	r3, #0
 8007c56:	e7d5      	b.n	8007c04 <_dtoa_r+0x22c>
 8007c58:	2401      	movs	r4, #1
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	9307      	str	r3, [sp, #28]
 8007c5e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007c60:	f04f 3bff 	mov.w	fp, #4294967295
 8007c64:	2200      	movs	r2, #0
 8007c66:	f8cd b00c 	str.w	fp, [sp, #12]
 8007c6a:	2312      	movs	r3, #18
 8007c6c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c6e:	e7db      	b.n	8007c28 <_dtoa_r+0x250>
 8007c70:	2301      	movs	r3, #1
 8007c72:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c74:	e7f4      	b.n	8007c60 <_dtoa_r+0x288>
 8007c76:	f04f 0b01 	mov.w	fp, #1
 8007c7a:	f8cd b00c 	str.w	fp, [sp, #12]
 8007c7e:	465b      	mov	r3, fp
 8007c80:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007c84:	e7d0      	b.n	8007c28 <_dtoa_r+0x250>
 8007c86:	3101      	adds	r1, #1
 8007c88:	0052      	lsls	r2, r2, #1
 8007c8a:	e7d1      	b.n	8007c30 <_dtoa_r+0x258>
 8007c8c:	f3af 8000 	nop.w
 8007c90:	636f4361 	.word	0x636f4361
 8007c94:	3fd287a7 	.word	0x3fd287a7
 8007c98:	8b60c8b3 	.word	0x8b60c8b3
 8007c9c:	3fc68a28 	.word	0x3fc68a28
 8007ca0:	509f79fb 	.word	0x509f79fb
 8007ca4:	3fd34413 	.word	0x3fd34413
 8007ca8:	0800aec8 	.word	0x0800aec8
 8007cac:	0800afb9 	.word	0x0800afb9
 8007cb0:	7ff00000 	.word	0x7ff00000
 8007cb4:	0800af48 	.word	0x0800af48
 8007cb8:	3ff80000 	.word	0x3ff80000
 8007cbc:	0800b130 	.word	0x0800b130
 8007cc0:	0800b011 	.word	0x0800b011
 8007cc4:	0800afb5 	.word	0x0800afb5
 8007cc8:	0800af47 	.word	0x0800af47
 8007ccc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007cd0:	6018      	str	r0, [r3, #0]
 8007cd2:	9b03      	ldr	r3, [sp, #12]
 8007cd4:	2b0e      	cmp	r3, #14
 8007cd6:	f200 80a1 	bhi.w	8007e1c <_dtoa_r+0x444>
 8007cda:	2c00      	cmp	r4, #0
 8007cdc:	f000 809e 	beq.w	8007e1c <_dtoa_r+0x444>
 8007ce0:	2f00      	cmp	r7, #0
 8007ce2:	dd33      	ble.n	8007d4c <_dtoa_r+0x374>
 8007ce4:	4b9c      	ldr	r3, [pc, #624]	@ (8007f58 <_dtoa_r+0x580>)
 8007ce6:	f007 020f 	and.w	r2, r7, #15
 8007cea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cee:	ed93 7b00 	vldr	d7, [r3]
 8007cf2:	05f8      	lsls	r0, r7, #23
 8007cf4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007cf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007cfc:	d516      	bpl.n	8007d2c <_dtoa_r+0x354>
 8007cfe:	4b97      	ldr	r3, [pc, #604]	@ (8007f5c <_dtoa_r+0x584>)
 8007d00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d08:	f7f8 fdb8 	bl	800087c <__aeabi_ddiv>
 8007d0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d10:	f004 040f 	and.w	r4, r4, #15
 8007d14:	2603      	movs	r6, #3
 8007d16:	4d91      	ldr	r5, [pc, #580]	@ (8007f5c <_dtoa_r+0x584>)
 8007d18:	b954      	cbnz	r4, 8007d30 <_dtoa_r+0x358>
 8007d1a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d22:	f7f8 fdab 	bl	800087c <__aeabi_ddiv>
 8007d26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d2a:	e028      	b.n	8007d7e <_dtoa_r+0x3a6>
 8007d2c:	2602      	movs	r6, #2
 8007d2e:	e7f2      	b.n	8007d16 <_dtoa_r+0x33e>
 8007d30:	07e1      	lsls	r1, r4, #31
 8007d32:	d508      	bpl.n	8007d46 <_dtoa_r+0x36e>
 8007d34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d3c:	f7f8 fc74 	bl	8000628 <__aeabi_dmul>
 8007d40:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d44:	3601      	adds	r6, #1
 8007d46:	1064      	asrs	r4, r4, #1
 8007d48:	3508      	adds	r5, #8
 8007d4a:	e7e5      	b.n	8007d18 <_dtoa_r+0x340>
 8007d4c:	f000 80af 	beq.w	8007eae <_dtoa_r+0x4d6>
 8007d50:	427c      	negs	r4, r7
 8007d52:	4b81      	ldr	r3, [pc, #516]	@ (8007f58 <_dtoa_r+0x580>)
 8007d54:	4d81      	ldr	r5, [pc, #516]	@ (8007f5c <_dtoa_r+0x584>)
 8007d56:	f004 020f 	and.w	r2, r4, #15
 8007d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d66:	f7f8 fc5f 	bl	8000628 <__aeabi_dmul>
 8007d6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d6e:	1124      	asrs	r4, r4, #4
 8007d70:	2300      	movs	r3, #0
 8007d72:	2602      	movs	r6, #2
 8007d74:	2c00      	cmp	r4, #0
 8007d76:	f040 808f 	bne.w	8007e98 <_dtoa_r+0x4c0>
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1d3      	bne.n	8007d26 <_dtoa_r+0x34e>
 8007d7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d80:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 8094 	beq.w	8007eb2 <_dtoa_r+0x4da>
 8007d8a:	4b75      	ldr	r3, [pc, #468]	@ (8007f60 <_dtoa_r+0x588>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	4620      	mov	r0, r4
 8007d90:	4629      	mov	r1, r5
 8007d92:	f7f8 febb 	bl	8000b0c <__aeabi_dcmplt>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	f000 808b 	beq.w	8007eb2 <_dtoa_r+0x4da>
 8007d9c:	9b03      	ldr	r3, [sp, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 8087 	beq.w	8007eb2 <_dtoa_r+0x4da>
 8007da4:	f1bb 0f00 	cmp.w	fp, #0
 8007da8:	dd34      	ble.n	8007e14 <_dtoa_r+0x43c>
 8007daa:	4620      	mov	r0, r4
 8007dac:	4b6d      	ldr	r3, [pc, #436]	@ (8007f64 <_dtoa_r+0x58c>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	4629      	mov	r1, r5
 8007db2:	f7f8 fc39 	bl	8000628 <__aeabi_dmul>
 8007db6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dba:	f107 38ff 	add.w	r8, r7, #4294967295
 8007dbe:	3601      	adds	r6, #1
 8007dc0:	465c      	mov	r4, fp
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f7f8 fbc6 	bl	8000554 <__aeabi_i2d>
 8007dc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dcc:	f7f8 fc2c 	bl	8000628 <__aeabi_dmul>
 8007dd0:	4b65      	ldr	r3, [pc, #404]	@ (8007f68 <_dtoa_r+0x590>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f7f8 fa72 	bl	80002bc <__adddf3>
 8007dd8:	4605      	mov	r5, r0
 8007dda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007dde:	2c00      	cmp	r4, #0
 8007de0:	d16a      	bne.n	8007eb8 <_dtoa_r+0x4e0>
 8007de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007de6:	4b61      	ldr	r3, [pc, #388]	@ (8007f6c <_dtoa_r+0x594>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	f7f8 fa65 	bl	80002b8 <__aeabi_dsub>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007df6:	462a      	mov	r2, r5
 8007df8:	4633      	mov	r3, r6
 8007dfa:	f7f8 fea5 	bl	8000b48 <__aeabi_dcmpgt>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f040 8298 	bne.w	8008334 <_dtoa_r+0x95c>
 8007e04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e08:	462a      	mov	r2, r5
 8007e0a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e0e:	f7f8 fe7d 	bl	8000b0c <__aeabi_dcmplt>
 8007e12:	bb38      	cbnz	r0, 8007e64 <_dtoa_r+0x48c>
 8007e14:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007e18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f2c0 8157 	blt.w	80080d2 <_dtoa_r+0x6fa>
 8007e24:	2f0e      	cmp	r7, #14
 8007e26:	f300 8154 	bgt.w	80080d2 <_dtoa_r+0x6fa>
 8007e2a:	4b4b      	ldr	r3, [pc, #300]	@ (8007f58 <_dtoa_r+0x580>)
 8007e2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e30:	ed93 7b00 	vldr	d7, [r3]
 8007e34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	ed8d 7b00 	vstr	d7, [sp]
 8007e3c:	f280 80e5 	bge.w	800800a <_dtoa_r+0x632>
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f300 80e1 	bgt.w	800800a <_dtoa_r+0x632>
 8007e48:	d10c      	bne.n	8007e64 <_dtoa_r+0x48c>
 8007e4a:	4b48      	ldr	r3, [pc, #288]	@ (8007f6c <_dtoa_r+0x594>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	ec51 0b17 	vmov	r0, r1, d7
 8007e52:	f7f8 fbe9 	bl	8000628 <__aeabi_dmul>
 8007e56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e5a:	f7f8 fe6b 	bl	8000b34 <__aeabi_dcmpge>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f000 8266 	beq.w	8008330 <_dtoa_r+0x958>
 8007e64:	2400      	movs	r4, #0
 8007e66:	4625      	mov	r5, r4
 8007e68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e6a:	4656      	mov	r6, sl
 8007e6c:	ea6f 0803 	mvn.w	r8, r3
 8007e70:	2700      	movs	r7, #0
 8007e72:	4621      	mov	r1, r4
 8007e74:	4648      	mov	r0, r9
 8007e76:	f000 fc09 	bl	800868c <_Bfree>
 8007e7a:	2d00      	cmp	r5, #0
 8007e7c:	f000 80bd 	beq.w	8007ffa <_dtoa_r+0x622>
 8007e80:	b12f      	cbz	r7, 8007e8e <_dtoa_r+0x4b6>
 8007e82:	42af      	cmp	r7, r5
 8007e84:	d003      	beq.n	8007e8e <_dtoa_r+0x4b6>
 8007e86:	4639      	mov	r1, r7
 8007e88:	4648      	mov	r0, r9
 8007e8a:	f000 fbff 	bl	800868c <_Bfree>
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4648      	mov	r0, r9
 8007e92:	f000 fbfb 	bl	800868c <_Bfree>
 8007e96:	e0b0      	b.n	8007ffa <_dtoa_r+0x622>
 8007e98:	07e2      	lsls	r2, r4, #31
 8007e9a:	d505      	bpl.n	8007ea8 <_dtoa_r+0x4d0>
 8007e9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ea0:	f7f8 fbc2 	bl	8000628 <__aeabi_dmul>
 8007ea4:	3601      	adds	r6, #1
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	1064      	asrs	r4, r4, #1
 8007eaa:	3508      	adds	r5, #8
 8007eac:	e762      	b.n	8007d74 <_dtoa_r+0x39c>
 8007eae:	2602      	movs	r6, #2
 8007eb0:	e765      	b.n	8007d7e <_dtoa_r+0x3a6>
 8007eb2:	9c03      	ldr	r4, [sp, #12]
 8007eb4:	46b8      	mov	r8, r7
 8007eb6:	e784      	b.n	8007dc2 <_dtoa_r+0x3ea>
 8007eb8:	4b27      	ldr	r3, [pc, #156]	@ (8007f58 <_dtoa_r+0x580>)
 8007eba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ebc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ec0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ec4:	4454      	add	r4, sl
 8007ec6:	2900      	cmp	r1, #0
 8007ec8:	d054      	beq.n	8007f74 <_dtoa_r+0x59c>
 8007eca:	4929      	ldr	r1, [pc, #164]	@ (8007f70 <_dtoa_r+0x598>)
 8007ecc:	2000      	movs	r0, #0
 8007ece:	f7f8 fcd5 	bl	800087c <__aeabi_ddiv>
 8007ed2:	4633      	mov	r3, r6
 8007ed4:	462a      	mov	r2, r5
 8007ed6:	f7f8 f9ef 	bl	80002b8 <__aeabi_dsub>
 8007eda:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007ede:	4656      	mov	r6, sl
 8007ee0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ee4:	f7f8 fe50 	bl	8000b88 <__aeabi_d2iz>
 8007ee8:	4605      	mov	r5, r0
 8007eea:	f7f8 fb33 	bl	8000554 <__aeabi_i2d>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ef6:	f7f8 f9df 	bl	80002b8 <__aeabi_dsub>
 8007efa:	3530      	adds	r5, #48	@ 0x30
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f04:	f806 5b01 	strb.w	r5, [r6], #1
 8007f08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f0c:	f7f8 fdfe 	bl	8000b0c <__aeabi_dcmplt>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d172      	bne.n	8007ffa <_dtoa_r+0x622>
 8007f14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f18:	4911      	ldr	r1, [pc, #68]	@ (8007f60 <_dtoa_r+0x588>)
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	f7f8 f9cc 	bl	80002b8 <__aeabi_dsub>
 8007f20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f24:	f7f8 fdf2 	bl	8000b0c <__aeabi_dcmplt>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	f040 80b4 	bne.w	8008096 <_dtoa_r+0x6be>
 8007f2e:	42a6      	cmp	r6, r4
 8007f30:	f43f af70 	beq.w	8007e14 <_dtoa_r+0x43c>
 8007f34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007f38:	4b0a      	ldr	r3, [pc, #40]	@ (8007f64 <_dtoa_r+0x58c>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f7f8 fb74 	bl	8000628 <__aeabi_dmul>
 8007f40:	4b08      	ldr	r3, [pc, #32]	@ (8007f64 <_dtoa_r+0x58c>)
 8007f42:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f46:	2200      	movs	r2, #0
 8007f48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f4c:	f7f8 fb6c 	bl	8000628 <__aeabi_dmul>
 8007f50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f54:	e7c4      	b.n	8007ee0 <_dtoa_r+0x508>
 8007f56:	bf00      	nop
 8007f58:	0800b130 	.word	0x0800b130
 8007f5c:	0800b108 	.word	0x0800b108
 8007f60:	3ff00000 	.word	0x3ff00000
 8007f64:	40240000 	.word	0x40240000
 8007f68:	401c0000 	.word	0x401c0000
 8007f6c:	40140000 	.word	0x40140000
 8007f70:	3fe00000 	.word	0x3fe00000
 8007f74:	4631      	mov	r1, r6
 8007f76:	4628      	mov	r0, r5
 8007f78:	f7f8 fb56 	bl	8000628 <__aeabi_dmul>
 8007f7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f80:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007f82:	4656      	mov	r6, sl
 8007f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f88:	f7f8 fdfe 	bl	8000b88 <__aeabi_d2iz>
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	f7f8 fae1 	bl	8000554 <__aeabi_i2d>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f9a:	f7f8 f98d 	bl	80002b8 <__aeabi_dsub>
 8007f9e:	3530      	adds	r5, #48	@ 0x30
 8007fa0:	f806 5b01 	strb.w	r5, [r6], #1
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	42a6      	cmp	r6, r4
 8007faa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fae:	f04f 0200 	mov.w	r2, #0
 8007fb2:	d124      	bne.n	8007ffe <_dtoa_r+0x626>
 8007fb4:	4baf      	ldr	r3, [pc, #700]	@ (8008274 <_dtoa_r+0x89c>)
 8007fb6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007fba:	f7f8 f97f 	bl	80002bc <__adddf3>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fc6:	f7f8 fdbf 	bl	8000b48 <__aeabi_dcmpgt>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d163      	bne.n	8008096 <_dtoa_r+0x6be>
 8007fce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007fd2:	49a8      	ldr	r1, [pc, #672]	@ (8008274 <_dtoa_r+0x89c>)
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	f7f8 f96f 	bl	80002b8 <__aeabi_dsub>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fe2:	f7f8 fd93 	bl	8000b0c <__aeabi_dcmplt>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	f43f af14 	beq.w	8007e14 <_dtoa_r+0x43c>
 8007fec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007fee:	1e73      	subs	r3, r6, #1
 8007ff0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ff2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007ff6:	2b30      	cmp	r3, #48	@ 0x30
 8007ff8:	d0f8      	beq.n	8007fec <_dtoa_r+0x614>
 8007ffa:	4647      	mov	r7, r8
 8007ffc:	e03b      	b.n	8008076 <_dtoa_r+0x69e>
 8007ffe:	4b9e      	ldr	r3, [pc, #632]	@ (8008278 <_dtoa_r+0x8a0>)
 8008000:	f7f8 fb12 	bl	8000628 <__aeabi_dmul>
 8008004:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008008:	e7bc      	b.n	8007f84 <_dtoa_r+0x5ac>
 800800a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800800e:	4656      	mov	r6, sl
 8008010:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008014:	4620      	mov	r0, r4
 8008016:	4629      	mov	r1, r5
 8008018:	f7f8 fc30 	bl	800087c <__aeabi_ddiv>
 800801c:	f7f8 fdb4 	bl	8000b88 <__aeabi_d2iz>
 8008020:	4680      	mov	r8, r0
 8008022:	f7f8 fa97 	bl	8000554 <__aeabi_i2d>
 8008026:	e9dd 2300 	ldrd	r2, r3, [sp]
 800802a:	f7f8 fafd 	bl	8000628 <__aeabi_dmul>
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	4620      	mov	r0, r4
 8008034:	4629      	mov	r1, r5
 8008036:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800803a:	f7f8 f93d 	bl	80002b8 <__aeabi_dsub>
 800803e:	f806 4b01 	strb.w	r4, [r6], #1
 8008042:	9d03      	ldr	r5, [sp, #12]
 8008044:	eba6 040a 	sub.w	r4, r6, sl
 8008048:	42a5      	cmp	r5, r4
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	d133      	bne.n	80080b8 <_dtoa_r+0x6e0>
 8008050:	f7f8 f934 	bl	80002bc <__adddf3>
 8008054:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008058:	4604      	mov	r4, r0
 800805a:	460d      	mov	r5, r1
 800805c:	f7f8 fd74 	bl	8000b48 <__aeabi_dcmpgt>
 8008060:	b9c0      	cbnz	r0, 8008094 <_dtoa_r+0x6bc>
 8008062:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008066:	4620      	mov	r0, r4
 8008068:	4629      	mov	r1, r5
 800806a:	f7f8 fd45 	bl	8000af8 <__aeabi_dcmpeq>
 800806e:	b110      	cbz	r0, 8008076 <_dtoa_r+0x69e>
 8008070:	f018 0f01 	tst.w	r8, #1
 8008074:	d10e      	bne.n	8008094 <_dtoa_r+0x6bc>
 8008076:	9902      	ldr	r1, [sp, #8]
 8008078:	4648      	mov	r0, r9
 800807a:	f000 fb07 	bl	800868c <_Bfree>
 800807e:	2300      	movs	r3, #0
 8008080:	7033      	strb	r3, [r6, #0]
 8008082:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008084:	3701      	adds	r7, #1
 8008086:	601f      	str	r7, [r3, #0]
 8008088:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 824b 	beq.w	8008526 <_dtoa_r+0xb4e>
 8008090:	601e      	str	r6, [r3, #0]
 8008092:	e248      	b.n	8008526 <_dtoa_r+0xb4e>
 8008094:	46b8      	mov	r8, r7
 8008096:	4633      	mov	r3, r6
 8008098:	461e      	mov	r6, r3
 800809a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800809e:	2a39      	cmp	r2, #57	@ 0x39
 80080a0:	d106      	bne.n	80080b0 <_dtoa_r+0x6d8>
 80080a2:	459a      	cmp	sl, r3
 80080a4:	d1f8      	bne.n	8008098 <_dtoa_r+0x6c0>
 80080a6:	2230      	movs	r2, #48	@ 0x30
 80080a8:	f108 0801 	add.w	r8, r8, #1
 80080ac:	f88a 2000 	strb.w	r2, [sl]
 80080b0:	781a      	ldrb	r2, [r3, #0]
 80080b2:	3201      	adds	r2, #1
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	e7a0      	b.n	8007ffa <_dtoa_r+0x622>
 80080b8:	4b6f      	ldr	r3, [pc, #444]	@ (8008278 <_dtoa_r+0x8a0>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	f7f8 fab4 	bl	8000628 <__aeabi_dmul>
 80080c0:	2200      	movs	r2, #0
 80080c2:	2300      	movs	r3, #0
 80080c4:	4604      	mov	r4, r0
 80080c6:	460d      	mov	r5, r1
 80080c8:	f7f8 fd16 	bl	8000af8 <__aeabi_dcmpeq>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d09f      	beq.n	8008010 <_dtoa_r+0x638>
 80080d0:	e7d1      	b.n	8008076 <_dtoa_r+0x69e>
 80080d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080d4:	2a00      	cmp	r2, #0
 80080d6:	f000 80ea 	beq.w	80082ae <_dtoa_r+0x8d6>
 80080da:	9a07      	ldr	r2, [sp, #28]
 80080dc:	2a01      	cmp	r2, #1
 80080de:	f300 80cd 	bgt.w	800827c <_dtoa_r+0x8a4>
 80080e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80080e4:	2a00      	cmp	r2, #0
 80080e6:	f000 80c1 	beq.w	800826c <_dtoa_r+0x894>
 80080ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80080ee:	9c08      	ldr	r4, [sp, #32]
 80080f0:	9e00      	ldr	r6, [sp, #0]
 80080f2:	9a00      	ldr	r2, [sp, #0]
 80080f4:	441a      	add	r2, r3
 80080f6:	9200      	str	r2, [sp, #0]
 80080f8:	9a06      	ldr	r2, [sp, #24]
 80080fa:	2101      	movs	r1, #1
 80080fc:	441a      	add	r2, r3
 80080fe:	4648      	mov	r0, r9
 8008100:	9206      	str	r2, [sp, #24]
 8008102:	f000 fbc1 	bl	8008888 <__i2b>
 8008106:	4605      	mov	r5, r0
 8008108:	b166      	cbz	r6, 8008124 <_dtoa_r+0x74c>
 800810a:	9b06      	ldr	r3, [sp, #24]
 800810c:	2b00      	cmp	r3, #0
 800810e:	dd09      	ble.n	8008124 <_dtoa_r+0x74c>
 8008110:	42b3      	cmp	r3, r6
 8008112:	9a00      	ldr	r2, [sp, #0]
 8008114:	bfa8      	it	ge
 8008116:	4633      	movge	r3, r6
 8008118:	1ad2      	subs	r2, r2, r3
 800811a:	9200      	str	r2, [sp, #0]
 800811c:	9a06      	ldr	r2, [sp, #24]
 800811e:	1af6      	subs	r6, r6, r3
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	9306      	str	r3, [sp, #24]
 8008124:	9b08      	ldr	r3, [sp, #32]
 8008126:	b30b      	cbz	r3, 800816c <_dtoa_r+0x794>
 8008128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 80c6 	beq.w	80082bc <_dtoa_r+0x8e4>
 8008130:	2c00      	cmp	r4, #0
 8008132:	f000 80c0 	beq.w	80082b6 <_dtoa_r+0x8de>
 8008136:	4629      	mov	r1, r5
 8008138:	4622      	mov	r2, r4
 800813a:	4648      	mov	r0, r9
 800813c:	f000 fc5c 	bl	80089f8 <__pow5mult>
 8008140:	9a02      	ldr	r2, [sp, #8]
 8008142:	4601      	mov	r1, r0
 8008144:	4605      	mov	r5, r0
 8008146:	4648      	mov	r0, r9
 8008148:	f000 fbb4 	bl	80088b4 <__multiply>
 800814c:	9902      	ldr	r1, [sp, #8]
 800814e:	4680      	mov	r8, r0
 8008150:	4648      	mov	r0, r9
 8008152:	f000 fa9b 	bl	800868c <_Bfree>
 8008156:	9b08      	ldr	r3, [sp, #32]
 8008158:	1b1b      	subs	r3, r3, r4
 800815a:	9308      	str	r3, [sp, #32]
 800815c:	f000 80b1 	beq.w	80082c2 <_dtoa_r+0x8ea>
 8008160:	9a08      	ldr	r2, [sp, #32]
 8008162:	4641      	mov	r1, r8
 8008164:	4648      	mov	r0, r9
 8008166:	f000 fc47 	bl	80089f8 <__pow5mult>
 800816a:	9002      	str	r0, [sp, #8]
 800816c:	2101      	movs	r1, #1
 800816e:	4648      	mov	r0, r9
 8008170:	f000 fb8a 	bl	8008888 <__i2b>
 8008174:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008176:	4604      	mov	r4, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 81d8 	beq.w	800852e <_dtoa_r+0xb56>
 800817e:	461a      	mov	r2, r3
 8008180:	4601      	mov	r1, r0
 8008182:	4648      	mov	r0, r9
 8008184:	f000 fc38 	bl	80089f8 <__pow5mult>
 8008188:	9b07      	ldr	r3, [sp, #28]
 800818a:	2b01      	cmp	r3, #1
 800818c:	4604      	mov	r4, r0
 800818e:	f300 809f 	bgt.w	80082d0 <_dtoa_r+0x8f8>
 8008192:	9b04      	ldr	r3, [sp, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	f040 8097 	bne.w	80082c8 <_dtoa_r+0x8f0>
 800819a:	9b05      	ldr	r3, [sp, #20]
 800819c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f040 8093 	bne.w	80082cc <_dtoa_r+0x8f4>
 80081a6:	9b05      	ldr	r3, [sp, #20]
 80081a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081ac:	0d1b      	lsrs	r3, r3, #20
 80081ae:	051b      	lsls	r3, r3, #20
 80081b0:	b133      	cbz	r3, 80081c0 <_dtoa_r+0x7e8>
 80081b2:	9b00      	ldr	r3, [sp, #0]
 80081b4:	3301      	adds	r3, #1
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	9b06      	ldr	r3, [sp, #24]
 80081ba:	3301      	adds	r3, #1
 80081bc:	9306      	str	r3, [sp, #24]
 80081be:	2301      	movs	r3, #1
 80081c0:	9308      	str	r3, [sp, #32]
 80081c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 81b8 	beq.w	800853a <_dtoa_r+0xb62>
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081d0:	6918      	ldr	r0, [r3, #16]
 80081d2:	f000 fb0d 	bl	80087f0 <__hi0bits>
 80081d6:	f1c0 0020 	rsb	r0, r0, #32
 80081da:	9b06      	ldr	r3, [sp, #24]
 80081dc:	4418      	add	r0, r3
 80081de:	f010 001f 	ands.w	r0, r0, #31
 80081e2:	f000 8082 	beq.w	80082ea <_dtoa_r+0x912>
 80081e6:	f1c0 0320 	rsb	r3, r0, #32
 80081ea:	2b04      	cmp	r3, #4
 80081ec:	dd73      	ble.n	80082d6 <_dtoa_r+0x8fe>
 80081ee:	9b00      	ldr	r3, [sp, #0]
 80081f0:	f1c0 001c 	rsb	r0, r0, #28
 80081f4:	4403      	add	r3, r0
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	9b06      	ldr	r3, [sp, #24]
 80081fa:	4403      	add	r3, r0
 80081fc:	4406      	add	r6, r0
 80081fe:	9306      	str	r3, [sp, #24]
 8008200:	9b00      	ldr	r3, [sp, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	dd05      	ble.n	8008212 <_dtoa_r+0x83a>
 8008206:	9902      	ldr	r1, [sp, #8]
 8008208:	461a      	mov	r2, r3
 800820a:	4648      	mov	r0, r9
 800820c:	f000 fc4e 	bl	8008aac <__lshift>
 8008210:	9002      	str	r0, [sp, #8]
 8008212:	9b06      	ldr	r3, [sp, #24]
 8008214:	2b00      	cmp	r3, #0
 8008216:	dd05      	ble.n	8008224 <_dtoa_r+0x84c>
 8008218:	4621      	mov	r1, r4
 800821a:	461a      	mov	r2, r3
 800821c:	4648      	mov	r0, r9
 800821e:	f000 fc45 	bl	8008aac <__lshift>
 8008222:	4604      	mov	r4, r0
 8008224:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008226:	2b00      	cmp	r3, #0
 8008228:	d061      	beq.n	80082ee <_dtoa_r+0x916>
 800822a:	9802      	ldr	r0, [sp, #8]
 800822c:	4621      	mov	r1, r4
 800822e:	f000 fca9 	bl	8008b84 <__mcmp>
 8008232:	2800      	cmp	r0, #0
 8008234:	da5b      	bge.n	80082ee <_dtoa_r+0x916>
 8008236:	2300      	movs	r3, #0
 8008238:	9902      	ldr	r1, [sp, #8]
 800823a:	220a      	movs	r2, #10
 800823c:	4648      	mov	r0, r9
 800823e:	f000 fa47 	bl	80086d0 <__multadd>
 8008242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008244:	9002      	str	r0, [sp, #8]
 8008246:	f107 38ff 	add.w	r8, r7, #4294967295
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 8177 	beq.w	800853e <_dtoa_r+0xb66>
 8008250:	4629      	mov	r1, r5
 8008252:	2300      	movs	r3, #0
 8008254:	220a      	movs	r2, #10
 8008256:	4648      	mov	r0, r9
 8008258:	f000 fa3a 	bl	80086d0 <__multadd>
 800825c:	f1bb 0f00 	cmp.w	fp, #0
 8008260:	4605      	mov	r5, r0
 8008262:	dc6f      	bgt.n	8008344 <_dtoa_r+0x96c>
 8008264:	9b07      	ldr	r3, [sp, #28]
 8008266:	2b02      	cmp	r3, #2
 8008268:	dc49      	bgt.n	80082fe <_dtoa_r+0x926>
 800826a:	e06b      	b.n	8008344 <_dtoa_r+0x96c>
 800826c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800826e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008272:	e73c      	b.n	80080ee <_dtoa_r+0x716>
 8008274:	3fe00000 	.word	0x3fe00000
 8008278:	40240000 	.word	0x40240000
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	1e5c      	subs	r4, r3, #1
 8008280:	9b08      	ldr	r3, [sp, #32]
 8008282:	42a3      	cmp	r3, r4
 8008284:	db09      	blt.n	800829a <_dtoa_r+0x8c2>
 8008286:	1b1c      	subs	r4, r3, r4
 8008288:	9b03      	ldr	r3, [sp, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	f6bf af30 	bge.w	80080f0 <_dtoa_r+0x718>
 8008290:	9b00      	ldr	r3, [sp, #0]
 8008292:	9a03      	ldr	r2, [sp, #12]
 8008294:	1a9e      	subs	r6, r3, r2
 8008296:	2300      	movs	r3, #0
 8008298:	e72b      	b.n	80080f2 <_dtoa_r+0x71a>
 800829a:	9b08      	ldr	r3, [sp, #32]
 800829c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800829e:	9408      	str	r4, [sp, #32]
 80082a0:	1ae3      	subs	r3, r4, r3
 80082a2:	441a      	add	r2, r3
 80082a4:	9e00      	ldr	r6, [sp, #0]
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	920d      	str	r2, [sp, #52]	@ 0x34
 80082aa:	2400      	movs	r4, #0
 80082ac:	e721      	b.n	80080f2 <_dtoa_r+0x71a>
 80082ae:	9c08      	ldr	r4, [sp, #32]
 80082b0:	9e00      	ldr	r6, [sp, #0]
 80082b2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80082b4:	e728      	b.n	8008108 <_dtoa_r+0x730>
 80082b6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80082ba:	e751      	b.n	8008160 <_dtoa_r+0x788>
 80082bc:	9a08      	ldr	r2, [sp, #32]
 80082be:	9902      	ldr	r1, [sp, #8]
 80082c0:	e750      	b.n	8008164 <_dtoa_r+0x78c>
 80082c2:	f8cd 8008 	str.w	r8, [sp, #8]
 80082c6:	e751      	b.n	800816c <_dtoa_r+0x794>
 80082c8:	2300      	movs	r3, #0
 80082ca:	e779      	b.n	80081c0 <_dtoa_r+0x7e8>
 80082cc:	9b04      	ldr	r3, [sp, #16]
 80082ce:	e777      	b.n	80081c0 <_dtoa_r+0x7e8>
 80082d0:	2300      	movs	r3, #0
 80082d2:	9308      	str	r3, [sp, #32]
 80082d4:	e779      	b.n	80081ca <_dtoa_r+0x7f2>
 80082d6:	d093      	beq.n	8008200 <_dtoa_r+0x828>
 80082d8:	9a00      	ldr	r2, [sp, #0]
 80082da:	331c      	adds	r3, #28
 80082dc:	441a      	add	r2, r3
 80082de:	9200      	str	r2, [sp, #0]
 80082e0:	9a06      	ldr	r2, [sp, #24]
 80082e2:	441a      	add	r2, r3
 80082e4:	441e      	add	r6, r3
 80082e6:	9206      	str	r2, [sp, #24]
 80082e8:	e78a      	b.n	8008200 <_dtoa_r+0x828>
 80082ea:	4603      	mov	r3, r0
 80082ec:	e7f4      	b.n	80082d8 <_dtoa_r+0x900>
 80082ee:	9b03      	ldr	r3, [sp, #12]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	46b8      	mov	r8, r7
 80082f4:	dc20      	bgt.n	8008338 <_dtoa_r+0x960>
 80082f6:	469b      	mov	fp, r3
 80082f8:	9b07      	ldr	r3, [sp, #28]
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	dd1e      	ble.n	800833c <_dtoa_r+0x964>
 80082fe:	f1bb 0f00 	cmp.w	fp, #0
 8008302:	f47f adb1 	bne.w	8007e68 <_dtoa_r+0x490>
 8008306:	4621      	mov	r1, r4
 8008308:	465b      	mov	r3, fp
 800830a:	2205      	movs	r2, #5
 800830c:	4648      	mov	r0, r9
 800830e:	f000 f9df 	bl	80086d0 <__multadd>
 8008312:	4601      	mov	r1, r0
 8008314:	4604      	mov	r4, r0
 8008316:	9802      	ldr	r0, [sp, #8]
 8008318:	f000 fc34 	bl	8008b84 <__mcmp>
 800831c:	2800      	cmp	r0, #0
 800831e:	f77f ada3 	ble.w	8007e68 <_dtoa_r+0x490>
 8008322:	4656      	mov	r6, sl
 8008324:	2331      	movs	r3, #49	@ 0x31
 8008326:	f806 3b01 	strb.w	r3, [r6], #1
 800832a:	f108 0801 	add.w	r8, r8, #1
 800832e:	e59f      	b.n	8007e70 <_dtoa_r+0x498>
 8008330:	9c03      	ldr	r4, [sp, #12]
 8008332:	46b8      	mov	r8, r7
 8008334:	4625      	mov	r5, r4
 8008336:	e7f4      	b.n	8008322 <_dtoa_r+0x94a>
 8008338:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800833c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 8101 	beq.w	8008546 <_dtoa_r+0xb6e>
 8008344:	2e00      	cmp	r6, #0
 8008346:	dd05      	ble.n	8008354 <_dtoa_r+0x97c>
 8008348:	4629      	mov	r1, r5
 800834a:	4632      	mov	r2, r6
 800834c:	4648      	mov	r0, r9
 800834e:	f000 fbad 	bl	8008aac <__lshift>
 8008352:	4605      	mov	r5, r0
 8008354:	9b08      	ldr	r3, [sp, #32]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d05c      	beq.n	8008414 <_dtoa_r+0xa3c>
 800835a:	6869      	ldr	r1, [r5, #4]
 800835c:	4648      	mov	r0, r9
 800835e:	f000 f955 	bl	800860c <_Balloc>
 8008362:	4606      	mov	r6, r0
 8008364:	b928      	cbnz	r0, 8008372 <_dtoa_r+0x99a>
 8008366:	4b82      	ldr	r3, [pc, #520]	@ (8008570 <_dtoa_r+0xb98>)
 8008368:	4602      	mov	r2, r0
 800836a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800836e:	f7ff bb4a 	b.w	8007a06 <_dtoa_r+0x2e>
 8008372:	692a      	ldr	r2, [r5, #16]
 8008374:	3202      	adds	r2, #2
 8008376:	0092      	lsls	r2, r2, #2
 8008378:	f105 010c 	add.w	r1, r5, #12
 800837c:	300c      	adds	r0, #12
 800837e:	f002 f88d 	bl	800a49c <memcpy>
 8008382:	2201      	movs	r2, #1
 8008384:	4631      	mov	r1, r6
 8008386:	4648      	mov	r0, r9
 8008388:	f000 fb90 	bl	8008aac <__lshift>
 800838c:	f10a 0301 	add.w	r3, sl, #1
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	eb0a 030b 	add.w	r3, sl, fp
 8008396:	9308      	str	r3, [sp, #32]
 8008398:	9b04      	ldr	r3, [sp, #16]
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	462f      	mov	r7, r5
 80083a0:	9306      	str	r3, [sp, #24]
 80083a2:	4605      	mov	r5, r0
 80083a4:	9b00      	ldr	r3, [sp, #0]
 80083a6:	9802      	ldr	r0, [sp, #8]
 80083a8:	4621      	mov	r1, r4
 80083aa:	f103 3bff 	add.w	fp, r3, #4294967295
 80083ae:	f7ff fa8b 	bl	80078c8 <quorem>
 80083b2:	4603      	mov	r3, r0
 80083b4:	3330      	adds	r3, #48	@ 0x30
 80083b6:	9003      	str	r0, [sp, #12]
 80083b8:	4639      	mov	r1, r7
 80083ba:	9802      	ldr	r0, [sp, #8]
 80083bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80083be:	f000 fbe1 	bl	8008b84 <__mcmp>
 80083c2:	462a      	mov	r2, r5
 80083c4:	9004      	str	r0, [sp, #16]
 80083c6:	4621      	mov	r1, r4
 80083c8:	4648      	mov	r0, r9
 80083ca:	f000 fbf7 	bl	8008bbc <__mdiff>
 80083ce:	68c2      	ldr	r2, [r0, #12]
 80083d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d2:	4606      	mov	r6, r0
 80083d4:	bb02      	cbnz	r2, 8008418 <_dtoa_r+0xa40>
 80083d6:	4601      	mov	r1, r0
 80083d8:	9802      	ldr	r0, [sp, #8]
 80083da:	f000 fbd3 	bl	8008b84 <__mcmp>
 80083de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e0:	4602      	mov	r2, r0
 80083e2:	4631      	mov	r1, r6
 80083e4:	4648      	mov	r0, r9
 80083e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80083e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80083ea:	f000 f94f 	bl	800868c <_Bfree>
 80083ee:	9b07      	ldr	r3, [sp, #28]
 80083f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80083f2:	9e00      	ldr	r6, [sp, #0]
 80083f4:	ea42 0103 	orr.w	r1, r2, r3
 80083f8:	9b06      	ldr	r3, [sp, #24]
 80083fa:	4319      	orrs	r1, r3
 80083fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083fe:	d10d      	bne.n	800841c <_dtoa_r+0xa44>
 8008400:	2b39      	cmp	r3, #57	@ 0x39
 8008402:	d027      	beq.n	8008454 <_dtoa_r+0xa7c>
 8008404:	9a04      	ldr	r2, [sp, #16]
 8008406:	2a00      	cmp	r2, #0
 8008408:	dd01      	ble.n	800840e <_dtoa_r+0xa36>
 800840a:	9b03      	ldr	r3, [sp, #12]
 800840c:	3331      	adds	r3, #49	@ 0x31
 800840e:	f88b 3000 	strb.w	r3, [fp]
 8008412:	e52e      	b.n	8007e72 <_dtoa_r+0x49a>
 8008414:	4628      	mov	r0, r5
 8008416:	e7b9      	b.n	800838c <_dtoa_r+0x9b4>
 8008418:	2201      	movs	r2, #1
 800841a:	e7e2      	b.n	80083e2 <_dtoa_r+0xa0a>
 800841c:	9904      	ldr	r1, [sp, #16]
 800841e:	2900      	cmp	r1, #0
 8008420:	db04      	blt.n	800842c <_dtoa_r+0xa54>
 8008422:	9807      	ldr	r0, [sp, #28]
 8008424:	4301      	orrs	r1, r0
 8008426:	9806      	ldr	r0, [sp, #24]
 8008428:	4301      	orrs	r1, r0
 800842a:	d120      	bne.n	800846e <_dtoa_r+0xa96>
 800842c:	2a00      	cmp	r2, #0
 800842e:	ddee      	ble.n	800840e <_dtoa_r+0xa36>
 8008430:	9902      	ldr	r1, [sp, #8]
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	2201      	movs	r2, #1
 8008436:	4648      	mov	r0, r9
 8008438:	f000 fb38 	bl	8008aac <__lshift>
 800843c:	4621      	mov	r1, r4
 800843e:	9002      	str	r0, [sp, #8]
 8008440:	f000 fba0 	bl	8008b84 <__mcmp>
 8008444:	2800      	cmp	r0, #0
 8008446:	9b00      	ldr	r3, [sp, #0]
 8008448:	dc02      	bgt.n	8008450 <_dtoa_r+0xa78>
 800844a:	d1e0      	bne.n	800840e <_dtoa_r+0xa36>
 800844c:	07da      	lsls	r2, r3, #31
 800844e:	d5de      	bpl.n	800840e <_dtoa_r+0xa36>
 8008450:	2b39      	cmp	r3, #57	@ 0x39
 8008452:	d1da      	bne.n	800840a <_dtoa_r+0xa32>
 8008454:	2339      	movs	r3, #57	@ 0x39
 8008456:	f88b 3000 	strb.w	r3, [fp]
 800845a:	4633      	mov	r3, r6
 800845c:	461e      	mov	r6, r3
 800845e:	3b01      	subs	r3, #1
 8008460:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008464:	2a39      	cmp	r2, #57	@ 0x39
 8008466:	d04e      	beq.n	8008506 <_dtoa_r+0xb2e>
 8008468:	3201      	adds	r2, #1
 800846a:	701a      	strb	r2, [r3, #0]
 800846c:	e501      	b.n	8007e72 <_dtoa_r+0x49a>
 800846e:	2a00      	cmp	r2, #0
 8008470:	dd03      	ble.n	800847a <_dtoa_r+0xaa2>
 8008472:	2b39      	cmp	r3, #57	@ 0x39
 8008474:	d0ee      	beq.n	8008454 <_dtoa_r+0xa7c>
 8008476:	3301      	adds	r3, #1
 8008478:	e7c9      	b.n	800840e <_dtoa_r+0xa36>
 800847a:	9a00      	ldr	r2, [sp, #0]
 800847c:	9908      	ldr	r1, [sp, #32]
 800847e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008482:	428a      	cmp	r2, r1
 8008484:	d028      	beq.n	80084d8 <_dtoa_r+0xb00>
 8008486:	9902      	ldr	r1, [sp, #8]
 8008488:	2300      	movs	r3, #0
 800848a:	220a      	movs	r2, #10
 800848c:	4648      	mov	r0, r9
 800848e:	f000 f91f 	bl	80086d0 <__multadd>
 8008492:	42af      	cmp	r7, r5
 8008494:	9002      	str	r0, [sp, #8]
 8008496:	f04f 0300 	mov.w	r3, #0
 800849a:	f04f 020a 	mov.w	r2, #10
 800849e:	4639      	mov	r1, r7
 80084a0:	4648      	mov	r0, r9
 80084a2:	d107      	bne.n	80084b4 <_dtoa_r+0xadc>
 80084a4:	f000 f914 	bl	80086d0 <__multadd>
 80084a8:	4607      	mov	r7, r0
 80084aa:	4605      	mov	r5, r0
 80084ac:	9b00      	ldr	r3, [sp, #0]
 80084ae:	3301      	adds	r3, #1
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	e777      	b.n	80083a4 <_dtoa_r+0x9cc>
 80084b4:	f000 f90c 	bl	80086d0 <__multadd>
 80084b8:	4629      	mov	r1, r5
 80084ba:	4607      	mov	r7, r0
 80084bc:	2300      	movs	r3, #0
 80084be:	220a      	movs	r2, #10
 80084c0:	4648      	mov	r0, r9
 80084c2:	f000 f905 	bl	80086d0 <__multadd>
 80084c6:	4605      	mov	r5, r0
 80084c8:	e7f0      	b.n	80084ac <_dtoa_r+0xad4>
 80084ca:	f1bb 0f00 	cmp.w	fp, #0
 80084ce:	bfcc      	ite	gt
 80084d0:	465e      	movgt	r6, fp
 80084d2:	2601      	movle	r6, #1
 80084d4:	4456      	add	r6, sl
 80084d6:	2700      	movs	r7, #0
 80084d8:	9902      	ldr	r1, [sp, #8]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	2201      	movs	r2, #1
 80084de:	4648      	mov	r0, r9
 80084e0:	f000 fae4 	bl	8008aac <__lshift>
 80084e4:	4621      	mov	r1, r4
 80084e6:	9002      	str	r0, [sp, #8]
 80084e8:	f000 fb4c 	bl	8008b84 <__mcmp>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	dcb4      	bgt.n	800845a <_dtoa_r+0xa82>
 80084f0:	d102      	bne.n	80084f8 <_dtoa_r+0xb20>
 80084f2:	9b00      	ldr	r3, [sp, #0]
 80084f4:	07db      	lsls	r3, r3, #31
 80084f6:	d4b0      	bmi.n	800845a <_dtoa_r+0xa82>
 80084f8:	4633      	mov	r3, r6
 80084fa:	461e      	mov	r6, r3
 80084fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008500:	2a30      	cmp	r2, #48	@ 0x30
 8008502:	d0fa      	beq.n	80084fa <_dtoa_r+0xb22>
 8008504:	e4b5      	b.n	8007e72 <_dtoa_r+0x49a>
 8008506:	459a      	cmp	sl, r3
 8008508:	d1a8      	bne.n	800845c <_dtoa_r+0xa84>
 800850a:	2331      	movs	r3, #49	@ 0x31
 800850c:	f108 0801 	add.w	r8, r8, #1
 8008510:	f88a 3000 	strb.w	r3, [sl]
 8008514:	e4ad      	b.n	8007e72 <_dtoa_r+0x49a>
 8008516:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008518:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008574 <_dtoa_r+0xb9c>
 800851c:	b11b      	cbz	r3, 8008526 <_dtoa_r+0xb4e>
 800851e:	f10a 0308 	add.w	r3, sl, #8
 8008522:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	4650      	mov	r0, sl
 8008528:	b017      	add	sp, #92	@ 0x5c
 800852a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852e:	9b07      	ldr	r3, [sp, #28]
 8008530:	2b01      	cmp	r3, #1
 8008532:	f77f ae2e 	ble.w	8008192 <_dtoa_r+0x7ba>
 8008536:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008538:	9308      	str	r3, [sp, #32]
 800853a:	2001      	movs	r0, #1
 800853c:	e64d      	b.n	80081da <_dtoa_r+0x802>
 800853e:	f1bb 0f00 	cmp.w	fp, #0
 8008542:	f77f aed9 	ble.w	80082f8 <_dtoa_r+0x920>
 8008546:	4656      	mov	r6, sl
 8008548:	9802      	ldr	r0, [sp, #8]
 800854a:	4621      	mov	r1, r4
 800854c:	f7ff f9bc 	bl	80078c8 <quorem>
 8008550:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008554:	f806 3b01 	strb.w	r3, [r6], #1
 8008558:	eba6 020a 	sub.w	r2, r6, sl
 800855c:	4593      	cmp	fp, r2
 800855e:	ddb4      	ble.n	80084ca <_dtoa_r+0xaf2>
 8008560:	9902      	ldr	r1, [sp, #8]
 8008562:	2300      	movs	r3, #0
 8008564:	220a      	movs	r2, #10
 8008566:	4648      	mov	r0, r9
 8008568:	f000 f8b2 	bl	80086d0 <__multadd>
 800856c:	9002      	str	r0, [sp, #8]
 800856e:	e7eb      	b.n	8008548 <_dtoa_r+0xb70>
 8008570:	0800b011 	.word	0x0800b011
 8008574:	0800afac 	.word	0x0800afac

08008578 <_free_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4605      	mov	r5, r0
 800857c:	2900      	cmp	r1, #0
 800857e:	d041      	beq.n	8008604 <_free_r+0x8c>
 8008580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008584:	1f0c      	subs	r4, r1, #4
 8008586:	2b00      	cmp	r3, #0
 8008588:	bfb8      	it	lt
 800858a:	18e4      	addlt	r4, r4, r3
 800858c:	f7fe f8d2 	bl	8006734 <__malloc_lock>
 8008590:	4a1d      	ldr	r2, [pc, #116]	@ (8008608 <_free_r+0x90>)
 8008592:	6813      	ldr	r3, [r2, #0]
 8008594:	b933      	cbnz	r3, 80085a4 <_free_r+0x2c>
 8008596:	6063      	str	r3, [r4, #4]
 8008598:	6014      	str	r4, [r2, #0]
 800859a:	4628      	mov	r0, r5
 800859c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085a0:	f7fe b8ce 	b.w	8006740 <__malloc_unlock>
 80085a4:	42a3      	cmp	r3, r4
 80085a6:	d908      	bls.n	80085ba <_free_r+0x42>
 80085a8:	6820      	ldr	r0, [r4, #0]
 80085aa:	1821      	adds	r1, r4, r0
 80085ac:	428b      	cmp	r3, r1
 80085ae:	bf01      	itttt	eq
 80085b0:	6819      	ldreq	r1, [r3, #0]
 80085b2:	685b      	ldreq	r3, [r3, #4]
 80085b4:	1809      	addeq	r1, r1, r0
 80085b6:	6021      	streq	r1, [r4, #0]
 80085b8:	e7ed      	b.n	8008596 <_free_r+0x1e>
 80085ba:	461a      	mov	r2, r3
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	b10b      	cbz	r3, 80085c4 <_free_r+0x4c>
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	d9fa      	bls.n	80085ba <_free_r+0x42>
 80085c4:	6811      	ldr	r1, [r2, #0]
 80085c6:	1850      	adds	r0, r2, r1
 80085c8:	42a0      	cmp	r0, r4
 80085ca:	d10b      	bne.n	80085e4 <_free_r+0x6c>
 80085cc:	6820      	ldr	r0, [r4, #0]
 80085ce:	4401      	add	r1, r0
 80085d0:	1850      	adds	r0, r2, r1
 80085d2:	4283      	cmp	r3, r0
 80085d4:	6011      	str	r1, [r2, #0]
 80085d6:	d1e0      	bne.n	800859a <_free_r+0x22>
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	6053      	str	r3, [r2, #4]
 80085de:	4408      	add	r0, r1
 80085e0:	6010      	str	r0, [r2, #0]
 80085e2:	e7da      	b.n	800859a <_free_r+0x22>
 80085e4:	d902      	bls.n	80085ec <_free_r+0x74>
 80085e6:	230c      	movs	r3, #12
 80085e8:	602b      	str	r3, [r5, #0]
 80085ea:	e7d6      	b.n	800859a <_free_r+0x22>
 80085ec:	6820      	ldr	r0, [r4, #0]
 80085ee:	1821      	adds	r1, r4, r0
 80085f0:	428b      	cmp	r3, r1
 80085f2:	bf04      	itt	eq
 80085f4:	6819      	ldreq	r1, [r3, #0]
 80085f6:	685b      	ldreq	r3, [r3, #4]
 80085f8:	6063      	str	r3, [r4, #4]
 80085fa:	bf04      	itt	eq
 80085fc:	1809      	addeq	r1, r1, r0
 80085fe:	6021      	streq	r1, [r4, #0]
 8008600:	6054      	str	r4, [r2, #4]
 8008602:	e7ca      	b.n	800859a <_free_r+0x22>
 8008604:	bd38      	pop	{r3, r4, r5, pc}
 8008606:	bf00      	nop
 8008608:	20040b14 	.word	0x20040b14

0800860c <_Balloc>:
 800860c:	b570      	push	{r4, r5, r6, lr}
 800860e:	69c6      	ldr	r6, [r0, #28]
 8008610:	4604      	mov	r4, r0
 8008612:	460d      	mov	r5, r1
 8008614:	b976      	cbnz	r6, 8008634 <_Balloc+0x28>
 8008616:	2010      	movs	r0, #16
 8008618:	f7fd ffda 	bl	80065d0 <malloc>
 800861c:	4602      	mov	r2, r0
 800861e:	61e0      	str	r0, [r4, #28]
 8008620:	b920      	cbnz	r0, 800862c <_Balloc+0x20>
 8008622:	4b18      	ldr	r3, [pc, #96]	@ (8008684 <_Balloc+0x78>)
 8008624:	4818      	ldr	r0, [pc, #96]	@ (8008688 <_Balloc+0x7c>)
 8008626:	216b      	movs	r1, #107	@ 0x6b
 8008628:	f7ff f930 	bl	800788c <__assert_func>
 800862c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008630:	6006      	str	r6, [r0, #0]
 8008632:	60c6      	str	r6, [r0, #12]
 8008634:	69e6      	ldr	r6, [r4, #28]
 8008636:	68f3      	ldr	r3, [r6, #12]
 8008638:	b183      	cbz	r3, 800865c <_Balloc+0x50>
 800863a:	69e3      	ldr	r3, [r4, #28]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008642:	b9b8      	cbnz	r0, 8008674 <_Balloc+0x68>
 8008644:	2101      	movs	r1, #1
 8008646:	fa01 f605 	lsl.w	r6, r1, r5
 800864a:	1d72      	adds	r2, r6, #5
 800864c:	0092      	lsls	r2, r2, #2
 800864e:	4620      	mov	r0, r4
 8008650:	f001 ff41 	bl	800a4d6 <_calloc_r>
 8008654:	b160      	cbz	r0, 8008670 <_Balloc+0x64>
 8008656:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800865a:	e00e      	b.n	800867a <_Balloc+0x6e>
 800865c:	2221      	movs	r2, #33	@ 0x21
 800865e:	2104      	movs	r1, #4
 8008660:	4620      	mov	r0, r4
 8008662:	f001 ff38 	bl	800a4d6 <_calloc_r>
 8008666:	69e3      	ldr	r3, [r4, #28]
 8008668:	60f0      	str	r0, [r6, #12]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e4      	bne.n	800863a <_Balloc+0x2e>
 8008670:	2000      	movs	r0, #0
 8008672:	bd70      	pop	{r4, r5, r6, pc}
 8008674:	6802      	ldr	r2, [r0, #0]
 8008676:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800867a:	2300      	movs	r3, #0
 800867c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008680:	e7f7      	b.n	8008672 <_Balloc+0x66>
 8008682:	bf00      	nop
 8008684:	0800aec8 	.word	0x0800aec8
 8008688:	0800b022 	.word	0x0800b022

0800868c <_Bfree>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	69c6      	ldr	r6, [r0, #28]
 8008690:	4605      	mov	r5, r0
 8008692:	460c      	mov	r4, r1
 8008694:	b976      	cbnz	r6, 80086b4 <_Bfree+0x28>
 8008696:	2010      	movs	r0, #16
 8008698:	f7fd ff9a 	bl	80065d0 <malloc>
 800869c:	4602      	mov	r2, r0
 800869e:	61e8      	str	r0, [r5, #28]
 80086a0:	b920      	cbnz	r0, 80086ac <_Bfree+0x20>
 80086a2:	4b09      	ldr	r3, [pc, #36]	@ (80086c8 <_Bfree+0x3c>)
 80086a4:	4809      	ldr	r0, [pc, #36]	@ (80086cc <_Bfree+0x40>)
 80086a6:	218f      	movs	r1, #143	@ 0x8f
 80086a8:	f7ff f8f0 	bl	800788c <__assert_func>
 80086ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086b0:	6006      	str	r6, [r0, #0]
 80086b2:	60c6      	str	r6, [r0, #12]
 80086b4:	b13c      	cbz	r4, 80086c6 <_Bfree+0x3a>
 80086b6:	69eb      	ldr	r3, [r5, #28]
 80086b8:	6862      	ldr	r2, [r4, #4]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086c0:	6021      	str	r1, [r4, #0]
 80086c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086c6:	bd70      	pop	{r4, r5, r6, pc}
 80086c8:	0800aec8 	.word	0x0800aec8
 80086cc:	0800b022 	.word	0x0800b022

080086d0 <__multadd>:
 80086d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d4:	690d      	ldr	r5, [r1, #16]
 80086d6:	4607      	mov	r7, r0
 80086d8:	460c      	mov	r4, r1
 80086da:	461e      	mov	r6, r3
 80086dc:	f101 0c14 	add.w	ip, r1, #20
 80086e0:	2000      	movs	r0, #0
 80086e2:	f8dc 3000 	ldr.w	r3, [ip]
 80086e6:	b299      	uxth	r1, r3
 80086e8:	fb02 6101 	mla	r1, r2, r1, r6
 80086ec:	0c1e      	lsrs	r6, r3, #16
 80086ee:	0c0b      	lsrs	r3, r1, #16
 80086f0:	fb02 3306 	mla	r3, r2, r6, r3
 80086f4:	b289      	uxth	r1, r1
 80086f6:	3001      	adds	r0, #1
 80086f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086fc:	4285      	cmp	r5, r0
 80086fe:	f84c 1b04 	str.w	r1, [ip], #4
 8008702:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008706:	dcec      	bgt.n	80086e2 <__multadd+0x12>
 8008708:	b30e      	cbz	r6, 800874e <__multadd+0x7e>
 800870a:	68a3      	ldr	r3, [r4, #8]
 800870c:	42ab      	cmp	r3, r5
 800870e:	dc19      	bgt.n	8008744 <__multadd+0x74>
 8008710:	6861      	ldr	r1, [r4, #4]
 8008712:	4638      	mov	r0, r7
 8008714:	3101      	adds	r1, #1
 8008716:	f7ff ff79 	bl	800860c <_Balloc>
 800871a:	4680      	mov	r8, r0
 800871c:	b928      	cbnz	r0, 800872a <__multadd+0x5a>
 800871e:	4602      	mov	r2, r0
 8008720:	4b0c      	ldr	r3, [pc, #48]	@ (8008754 <__multadd+0x84>)
 8008722:	480d      	ldr	r0, [pc, #52]	@ (8008758 <__multadd+0x88>)
 8008724:	21ba      	movs	r1, #186	@ 0xba
 8008726:	f7ff f8b1 	bl	800788c <__assert_func>
 800872a:	6922      	ldr	r2, [r4, #16]
 800872c:	3202      	adds	r2, #2
 800872e:	f104 010c 	add.w	r1, r4, #12
 8008732:	0092      	lsls	r2, r2, #2
 8008734:	300c      	adds	r0, #12
 8008736:	f001 feb1 	bl	800a49c <memcpy>
 800873a:	4621      	mov	r1, r4
 800873c:	4638      	mov	r0, r7
 800873e:	f7ff ffa5 	bl	800868c <_Bfree>
 8008742:	4644      	mov	r4, r8
 8008744:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008748:	3501      	adds	r5, #1
 800874a:	615e      	str	r6, [r3, #20]
 800874c:	6125      	str	r5, [r4, #16]
 800874e:	4620      	mov	r0, r4
 8008750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008754:	0800b011 	.word	0x0800b011
 8008758:	0800b022 	.word	0x0800b022

0800875c <__s2b>:
 800875c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008760:	460c      	mov	r4, r1
 8008762:	4615      	mov	r5, r2
 8008764:	461f      	mov	r7, r3
 8008766:	2209      	movs	r2, #9
 8008768:	3308      	adds	r3, #8
 800876a:	4606      	mov	r6, r0
 800876c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008770:	2100      	movs	r1, #0
 8008772:	2201      	movs	r2, #1
 8008774:	429a      	cmp	r2, r3
 8008776:	db09      	blt.n	800878c <__s2b+0x30>
 8008778:	4630      	mov	r0, r6
 800877a:	f7ff ff47 	bl	800860c <_Balloc>
 800877e:	b940      	cbnz	r0, 8008792 <__s2b+0x36>
 8008780:	4602      	mov	r2, r0
 8008782:	4b19      	ldr	r3, [pc, #100]	@ (80087e8 <__s2b+0x8c>)
 8008784:	4819      	ldr	r0, [pc, #100]	@ (80087ec <__s2b+0x90>)
 8008786:	21d3      	movs	r1, #211	@ 0xd3
 8008788:	f7ff f880 	bl	800788c <__assert_func>
 800878c:	0052      	lsls	r2, r2, #1
 800878e:	3101      	adds	r1, #1
 8008790:	e7f0      	b.n	8008774 <__s2b+0x18>
 8008792:	9b08      	ldr	r3, [sp, #32]
 8008794:	6143      	str	r3, [r0, #20]
 8008796:	2d09      	cmp	r5, #9
 8008798:	f04f 0301 	mov.w	r3, #1
 800879c:	6103      	str	r3, [r0, #16]
 800879e:	dd16      	ble.n	80087ce <__s2b+0x72>
 80087a0:	f104 0909 	add.w	r9, r4, #9
 80087a4:	46c8      	mov	r8, r9
 80087a6:	442c      	add	r4, r5
 80087a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80087ac:	4601      	mov	r1, r0
 80087ae:	3b30      	subs	r3, #48	@ 0x30
 80087b0:	220a      	movs	r2, #10
 80087b2:	4630      	mov	r0, r6
 80087b4:	f7ff ff8c 	bl	80086d0 <__multadd>
 80087b8:	45a0      	cmp	r8, r4
 80087ba:	d1f5      	bne.n	80087a8 <__s2b+0x4c>
 80087bc:	f1a5 0408 	sub.w	r4, r5, #8
 80087c0:	444c      	add	r4, r9
 80087c2:	1b2d      	subs	r5, r5, r4
 80087c4:	1963      	adds	r3, r4, r5
 80087c6:	42bb      	cmp	r3, r7
 80087c8:	db04      	blt.n	80087d4 <__s2b+0x78>
 80087ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ce:	340a      	adds	r4, #10
 80087d0:	2509      	movs	r5, #9
 80087d2:	e7f6      	b.n	80087c2 <__s2b+0x66>
 80087d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087d8:	4601      	mov	r1, r0
 80087da:	3b30      	subs	r3, #48	@ 0x30
 80087dc:	220a      	movs	r2, #10
 80087de:	4630      	mov	r0, r6
 80087e0:	f7ff ff76 	bl	80086d0 <__multadd>
 80087e4:	e7ee      	b.n	80087c4 <__s2b+0x68>
 80087e6:	bf00      	nop
 80087e8:	0800b011 	.word	0x0800b011
 80087ec:	0800b022 	.word	0x0800b022

080087f0 <__hi0bits>:
 80087f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80087f4:	4603      	mov	r3, r0
 80087f6:	bf36      	itet	cc
 80087f8:	0403      	lslcc	r3, r0, #16
 80087fa:	2000      	movcs	r0, #0
 80087fc:	2010      	movcc	r0, #16
 80087fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008802:	bf3c      	itt	cc
 8008804:	021b      	lslcc	r3, r3, #8
 8008806:	3008      	addcc	r0, #8
 8008808:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800880c:	bf3c      	itt	cc
 800880e:	011b      	lslcc	r3, r3, #4
 8008810:	3004      	addcc	r0, #4
 8008812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008816:	bf3c      	itt	cc
 8008818:	009b      	lslcc	r3, r3, #2
 800881a:	3002      	addcc	r0, #2
 800881c:	2b00      	cmp	r3, #0
 800881e:	db05      	blt.n	800882c <__hi0bits+0x3c>
 8008820:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008824:	f100 0001 	add.w	r0, r0, #1
 8008828:	bf08      	it	eq
 800882a:	2020      	moveq	r0, #32
 800882c:	4770      	bx	lr

0800882e <__lo0bits>:
 800882e:	6803      	ldr	r3, [r0, #0]
 8008830:	4602      	mov	r2, r0
 8008832:	f013 0007 	ands.w	r0, r3, #7
 8008836:	d00b      	beq.n	8008850 <__lo0bits+0x22>
 8008838:	07d9      	lsls	r1, r3, #31
 800883a:	d421      	bmi.n	8008880 <__lo0bits+0x52>
 800883c:	0798      	lsls	r0, r3, #30
 800883e:	bf49      	itett	mi
 8008840:	085b      	lsrmi	r3, r3, #1
 8008842:	089b      	lsrpl	r3, r3, #2
 8008844:	2001      	movmi	r0, #1
 8008846:	6013      	strmi	r3, [r2, #0]
 8008848:	bf5c      	itt	pl
 800884a:	6013      	strpl	r3, [r2, #0]
 800884c:	2002      	movpl	r0, #2
 800884e:	4770      	bx	lr
 8008850:	b299      	uxth	r1, r3
 8008852:	b909      	cbnz	r1, 8008858 <__lo0bits+0x2a>
 8008854:	0c1b      	lsrs	r3, r3, #16
 8008856:	2010      	movs	r0, #16
 8008858:	b2d9      	uxtb	r1, r3
 800885a:	b909      	cbnz	r1, 8008860 <__lo0bits+0x32>
 800885c:	3008      	adds	r0, #8
 800885e:	0a1b      	lsrs	r3, r3, #8
 8008860:	0719      	lsls	r1, r3, #28
 8008862:	bf04      	itt	eq
 8008864:	091b      	lsreq	r3, r3, #4
 8008866:	3004      	addeq	r0, #4
 8008868:	0799      	lsls	r1, r3, #30
 800886a:	bf04      	itt	eq
 800886c:	089b      	lsreq	r3, r3, #2
 800886e:	3002      	addeq	r0, #2
 8008870:	07d9      	lsls	r1, r3, #31
 8008872:	d403      	bmi.n	800887c <__lo0bits+0x4e>
 8008874:	085b      	lsrs	r3, r3, #1
 8008876:	f100 0001 	add.w	r0, r0, #1
 800887a:	d003      	beq.n	8008884 <__lo0bits+0x56>
 800887c:	6013      	str	r3, [r2, #0]
 800887e:	4770      	bx	lr
 8008880:	2000      	movs	r0, #0
 8008882:	4770      	bx	lr
 8008884:	2020      	movs	r0, #32
 8008886:	4770      	bx	lr

08008888 <__i2b>:
 8008888:	b510      	push	{r4, lr}
 800888a:	460c      	mov	r4, r1
 800888c:	2101      	movs	r1, #1
 800888e:	f7ff febd 	bl	800860c <_Balloc>
 8008892:	4602      	mov	r2, r0
 8008894:	b928      	cbnz	r0, 80088a2 <__i2b+0x1a>
 8008896:	4b05      	ldr	r3, [pc, #20]	@ (80088ac <__i2b+0x24>)
 8008898:	4805      	ldr	r0, [pc, #20]	@ (80088b0 <__i2b+0x28>)
 800889a:	f240 1145 	movw	r1, #325	@ 0x145
 800889e:	f7fe fff5 	bl	800788c <__assert_func>
 80088a2:	2301      	movs	r3, #1
 80088a4:	6144      	str	r4, [r0, #20]
 80088a6:	6103      	str	r3, [r0, #16]
 80088a8:	bd10      	pop	{r4, pc}
 80088aa:	bf00      	nop
 80088ac:	0800b011 	.word	0x0800b011
 80088b0:	0800b022 	.word	0x0800b022

080088b4 <__multiply>:
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	4617      	mov	r7, r2
 80088ba:	690a      	ldr	r2, [r1, #16]
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	429a      	cmp	r2, r3
 80088c0:	bfa8      	it	ge
 80088c2:	463b      	movge	r3, r7
 80088c4:	4689      	mov	r9, r1
 80088c6:	bfa4      	itt	ge
 80088c8:	460f      	movge	r7, r1
 80088ca:	4699      	movge	r9, r3
 80088cc:	693d      	ldr	r5, [r7, #16]
 80088ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	eb05 060a 	add.w	r6, r5, sl
 80088da:	42b3      	cmp	r3, r6
 80088dc:	b085      	sub	sp, #20
 80088de:	bfb8      	it	lt
 80088e0:	3101      	addlt	r1, #1
 80088e2:	f7ff fe93 	bl	800860c <_Balloc>
 80088e6:	b930      	cbnz	r0, 80088f6 <__multiply+0x42>
 80088e8:	4602      	mov	r2, r0
 80088ea:	4b41      	ldr	r3, [pc, #260]	@ (80089f0 <__multiply+0x13c>)
 80088ec:	4841      	ldr	r0, [pc, #260]	@ (80089f4 <__multiply+0x140>)
 80088ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80088f2:	f7fe ffcb 	bl	800788c <__assert_func>
 80088f6:	f100 0414 	add.w	r4, r0, #20
 80088fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80088fe:	4623      	mov	r3, r4
 8008900:	2200      	movs	r2, #0
 8008902:	4573      	cmp	r3, lr
 8008904:	d320      	bcc.n	8008948 <__multiply+0x94>
 8008906:	f107 0814 	add.w	r8, r7, #20
 800890a:	f109 0114 	add.w	r1, r9, #20
 800890e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008912:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008916:	9302      	str	r3, [sp, #8]
 8008918:	1beb      	subs	r3, r5, r7
 800891a:	3b15      	subs	r3, #21
 800891c:	f023 0303 	bic.w	r3, r3, #3
 8008920:	3304      	adds	r3, #4
 8008922:	3715      	adds	r7, #21
 8008924:	42bd      	cmp	r5, r7
 8008926:	bf38      	it	cc
 8008928:	2304      	movcc	r3, #4
 800892a:	9301      	str	r3, [sp, #4]
 800892c:	9b02      	ldr	r3, [sp, #8]
 800892e:	9103      	str	r1, [sp, #12]
 8008930:	428b      	cmp	r3, r1
 8008932:	d80c      	bhi.n	800894e <__multiply+0x9a>
 8008934:	2e00      	cmp	r6, #0
 8008936:	dd03      	ble.n	8008940 <__multiply+0x8c>
 8008938:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800893c:	2b00      	cmp	r3, #0
 800893e:	d055      	beq.n	80089ec <__multiply+0x138>
 8008940:	6106      	str	r6, [r0, #16]
 8008942:	b005      	add	sp, #20
 8008944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008948:	f843 2b04 	str.w	r2, [r3], #4
 800894c:	e7d9      	b.n	8008902 <__multiply+0x4e>
 800894e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008952:	f1ba 0f00 	cmp.w	sl, #0
 8008956:	d01f      	beq.n	8008998 <__multiply+0xe4>
 8008958:	46c4      	mov	ip, r8
 800895a:	46a1      	mov	r9, r4
 800895c:	2700      	movs	r7, #0
 800895e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008962:	f8d9 3000 	ldr.w	r3, [r9]
 8008966:	fa1f fb82 	uxth.w	fp, r2
 800896a:	b29b      	uxth	r3, r3
 800896c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008970:	443b      	add	r3, r7
 8008972:	f8d9 7000 	ldr.w	r7, [r9]
 8008976:	0c12      	lsrs	r2, r2, #16
 8008978:	0c3f      	lsrs	r7, r7, #16
 800897a:	fb0a 7202 	mla	r2, sl, r2, r7
 800897e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008982:	b29b      	uxth	r3, r3
 8008984:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008988:	4565      	cmp	r5, ip
 800898a:	f849 3b04 	str.w	r3, [r9], #4
 800898e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008992:	d8e4      	bhi.n	800895e <__multiply+0xaa>
 8008994:	9b01      	ldr	r3, [sp, #4]
 8008996:	50e7      	str	r7, [r4, r3]
 8008998:	9b03      	ldr	r3, [sp, #12]
 800899a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800899e:	3104      	adds	r1, #4
 80089a0:	f1b9 0f00 	cmp.w	r9, #0
 80089a4:	d020      	beq.n	80089e8 <__multiply+0x134>
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	4647      	mov	r7, r8
 80089aa:	46a4      	mov	ip, r4
 80089ac:	f04f 0a00 	mov.w	sl, #0
 80089b0:	f8b7 b000 	ldrh.w	fp, [r7]
 80089b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80089b8:	fb09 220b 	mla	r2, r9, fp, r2
 80089bc:	4452      	add	r2, sl
 80089be:	b29b      	uxth	r3, r3
 80089c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089c4:	f84c 3b04 	str.w	r3, [ip], #4
 80089c8:	f857 3b04 	ldr.w	r3, [r7], #4
 80089cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089d0:	f8bc 3000 	ldrh.w	r3, [ip]
 80089d4:	fb09 330a 	mla	r3, r9, sl, r3
 80089d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80089dc:	42bd      	cmp	r5, r7
 80089de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089e2:	d8e5      	bhi.n	80089b0 <__multiply+0xfc>
 80089e4:	9a01      	ldr	r2, [sp, #4]
 80089e6:	50a3      	str	r3, [r4, r2]
 80089e8:	3404      	adds	r4, #4
 80089ea:	e79f      	b.n	800892c <__multiply+0x78>
 80089ec:	3e01      	subs	r6, #1
 80089ee:	e7a1      	b.n	8008934 <__multiply+0x80>
 80089f0:	0800b011 	.word	0x0800b011
 80089f4:	0800b022 	.word	0x0800b022

080089f8 <__pow5mult>:
 80089f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089fc:	4615      	mov	r5, r2
 80089fe:	f012 0203 	ands.w	r2, r2, #3
 8008a02:	4607      	mov	r7, r0
 8008a04:	460e      	mov	r6, r1
 8008a06:	d007      	beq.n	8008a18 <__pow5mult+0x20>
 8008a08:	4c25      	ldr	r4, [pc, #148]	@ (8008aa0 <__pow5mult+0xa8>)
 8008a0a:	3a01      	subs	r2, #1
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a12:	f7ff fe5d 	bl	80086d0 <__multadd>
 8008a16:	4606      	mov	r6, r0
 8008a18:	10ad      	asrs	r5, r5, #2
 8008a1a:	d03d      	beq.n	8008a98 <__pow5mult+0xa0>
 8008a1c:	69fc      	ldr	r4, [r7, #28]
 8008a1e:	b97c      	cbnz	r4, 8008a40 <__pow5mult+0x48>
 8008a20:	2010      	movs	r0, #16
 8008a22:	f7fd fdd5 	bl	80065d0 <malloc>
 8008a26:	4602      	mov	r2, r0
 8008a28:	61f8      	str	r0, [r7, #28]
 8008a2a:	b928      	cbnz	r0, 8008a38 <__pow5mult+0x40>
 8008a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8008aa4 <__pow5mult+0xac>)
 8008a2e:	481e      	ldr	r0, [pc, #120]	@ (8008aa8 <__pow5mult+0xb0>)
 8008a30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008a34:	f7fe ff2a 	bl	800788c <__assert_func>
 8008a38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a3c:	6004      	str	r4, [r0, #0]
 8008a3e:	60c4      	str	r4, [r0, #12]
 8008a40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008a44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a48:	b94c      	cbnz	r4, 8008a5e <__pow5mult+0x66>
 8008a4a:	f240 2171 	movw	r1, #625	@ 0x271
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f7ff ff1a 	bl	8008888 <__i2b>
 8008a54:	2300      	movs	r3, #0
 8008a56:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	6003      	str	r3, [r0, #0]
 8008a5e:	f04f 0900 	mov.w	r9, #0
 8008a62:	07eb      	lsls	r3, r5, #31
 8008a64:	d50a      	bpl.n	8008a7c <__pow5mult+0x84>
 8008a66:	4631      	mov	r1, r6
 8008a68:	4622      	mov	r2, r4
 8008a6a:	4638      	mov	r0, r7
 8008a6c:	f7ff ff22 	bl	80088b4 <__multiply>
 8008a70:	4631      	mov	r1, r6
 8008a72:	4680      	mov	r8, r0
 8008a74:	4638      	mov	r0, r7
 8008a76:	f7ff fe09 	bl	800868c <_Bfree>
 8008a7a:	4646      	mov	r6, r8
 8008a7c:	106d      	asrs	r5, r5, #1
 8008a7e:	d00b      	beq.n	8008a98 <__pow5mult+0xa0>
 8008a80:	6820      	ldr	r0, [r4, #0]
 8008a82:	b938      	cbnz	r0, 8008a94 <__pow5mult+0x9c>
 8008a84:	4622      	mov	r2, r4
 8008a86:	4621      	mov	r1, r4
 8008a88:	4638      	mov	r0, r7
 8008a8a:	f7ff ff13 	bl	80088b4 <__multiply>
 8008a8e:	6020      	str	r0, [r4, #0]
 8008a90:	f8c0 9000 	str.w	r9, [r0]
 8008a94:	4604      	mov	r4, r0
 8008a96:	e7e4      	b.n	8008a62 <__pow5mult+0x6a>
 8008a98:	4630      	mov	r0, r6
 8008a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a9e:	bf00      	nop
 8008aa0:	0800b0f8 	.word	0x0800b0f8
 8008aa4:	0800aec8 	.word	0x0800aec8
 8008aa8:	0800b022 	.word	0x0800b022

08008aac <__lshift>:
 8008aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	6849      	ldr	r1, [r1, #4]
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008aba:	68a3      	ldr	r3, [r4, #8]
 8008abc:	4607      	mov	r7, r0
 8008abe:	4691      	mov	r9, r2
 8008ac0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ac4:	f108 0601 	add.w	r6, r8, #1
 8008ac8:	42b3      	cmp	r3, r6
 8008aca:	db0b      	blt.n	8008ae4 <__lshift+0x38>
 8008acc:	4638      	mov	r0, r7
 8008ace:	f7ff fd9d 	bl	800860c <_Balloc>
 8008ad2:	4605      	mov	r5, r0
 8008ad4:	b948      	cbnz	r0, 8008aea <__lshift+0x3e>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	4b28      	ldr	r3, [pc, #160]	@ (8008b7c <__lshift+0xd0>)
 8008ada:	4829      	ldr	r0, [pc, #164]	@ (8008b80 <__lshift+0xd4>)
 8008adc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008ae0:	f7fe fed4 	bl	800788c <__assert_func>
 8008ae4:	3101      	adds	r1, #1
 8008ae6:	005b      	lsls	r3, r3, #1
 8008ae8:	e7ee      	b.n	8008ac8 <__lshift+0x1c>
 8008aea:	2300      	movs	r3, #0
 8008aec:	f100 0114 	add.w	r1, r0, #20
 8008af0:	f100 0210 	add.w	r2, r0, #16
 8008af4:	4618      	mov	r0, r3
 8008af6:	4553      	cmp	r3, sl
 8008af8:	db33      	blt.n	8008b62 <__lshift+0xb6>
 8008afa:	6920      	ldr	r0, [r4, #16]
 8008afc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b00:	f104 0314 	add.w	r3, r4, #20
 8008b04:	f019 091f 	ands.w	r9, r9, #31
 8008b08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b10:	d02b      	beq.n	8008b6a <__lshift+0xbe>
 8008b12:	f1c9 0e20 	rsb	lr, r9, #32
 8008b16:	468a      	mov	sl, r1
 8008b18:	2200      	movs	r2, #0
 8008b1a:	6818      	ldr	r0, [r3, #0]
 8008b1c:	fa00 f009 	lsl.w	r0, r0, r9
 8008b20:	4310      	orrs	r0, r2
 8008b22:	f84a 0b04 	str.w	r0, [sl], #4
 8008b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b2a:	459c      	cmp	ip, r3
 8008b2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b30:	d8f3      	bhi.n	8008b1a <__lshift+0x6e>
 8008b32:	ebac 0304 	sub.w	r3, ip, r4
 8008b36:	3b15      	subs	r3, #21
 8008b38:	f023 0303 	bic.w	r3, r3, #3
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	f104 0015 	add.w	r0, r4, #21
 8008b42:	4560      	cmp	r0, ip
 8008b44:	bf88      	it	hi
 8008b46:	2304      	movhi	r3, #4
 8008b48:	50ca      	str	r2, [r1, r3]
 8008b4a:	b10a      	cbz	r2, 8008b50 <__lshift+0xa4>
 8008b4c:	f108 0602 	add.w	r6, r8, #2
 8008b50:	3e01      	subs	r6, #1
 8008b52:	4638      	mov	r0, r7
 8008b54:	612e      	str	r6, [r5, #16]
 8008b56:	4621      	mov	r1, r4
 8008b58:	f7ff fd98 	bl	800868c <_Bfree>
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b62:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b66:	3301      	adds	r3, #1
 8008b68:	e7c5      	b.n	8008af6 <__lshift+0x4a>
 8008b6a:	3904      	subs	r1, #4
 8008b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b70:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b74:	459c      	cmp	ip, r3
 8008b76:	d8f9      	bhi.n	8008b6c <__lshift+0xc0>
 8008b78:	e7ea      	b.n	8008b50 <__lshift+0xa4>
 8008b7a:	bf00      	nop
 8008b7c:	0800b011 	.word	0x0800b011
 8008b80:	0800b022 	.word	0x0800b022

08008b84 <__mcmp>:
 8008b84:	690a      	ldr	r2, [r1, #16]
 8008b86:	4603      	mov	r3, r0
 8008b88:	6900      	ldr	r0, [r0, #16]
 8008b8a:	1a80      	subs	r0, r0, r2
 8008b8c:	b530      	push	{r4, r5, lr}
 8008b8e:	d10e      	bne.n	8008bae <__mcmp+0x2a>
 8008b90:	3314      	adds	r3, #20
 8008b92:	3114      	adds	r1, #20
 8008b94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ba0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ba4:	4295      	cmp	r5, r2
 8008ba6:	d003      	beq.n	8008bb0 <__mcmp+0x2c>
 8008ba8:	d205      	bcs.n	8008bb6 <__mcmp+0x32>
 8008baa:	f04f 30ff 	mov.w	r0, #4294967295
 8008bae:	bd30      	pop	{r4, r5, pc}
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	d3f3      	bcc.n	8008b9c <__mcmp+0x18>
 8008bb4:	e7fb      	b.n	8008bae <__mcmp+0x2a>
 8008bb6:	2001      	movs	r0, #1
 8008bb8:	e7f9      	b.n	8008bae <__mcmp+0x2a>
	...

08008bbc <__mdiff>:
 8008bbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	4689      	mov	r9, r1
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	4648      	mov	r0, r9
 8008bc8:	4614      	mov	r4, r2
 8008bca:	f7ff ffdb 	bl	8008b84 <__mcmp>
 8008bce:	1e05      	subs	r5, r0, #0
 8008bd0:	d112      	bne.n	8008bf8 <__mdiff+0x3c>
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f7ff fd19 	bl	800860c <_Balloc>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	b928      	cbnz	r0, 8008bea <__mdiff+0x2e>
 8008bde:	4b3f      	ldr	r3, [pc, #252]	@ (8008cdc <__mdiff+0x120>)
 8008be0:	f240 2137 	movw	r1, #567	@ 0x237
 8008be4:	483e      	ldr	r0, [pc, #248]	@ (8008ce0 <__mdiff+0x124>)
 8008be6:	f7fe fe51 	bl	800788c <__assert_func>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	b003      	add	sp, #12
 8008bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf8:	bfbc      	itt	lt
 8008bfa:	464b      	movlt	r3, r9
 8008bfc:	46a1      	movlt	r9, r4
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008c04:	bfba      	itte	lt
 8008c06:	461c      	movlt	r4, r3
 8008c08:	2501      	movlt	r5, #1
 8008c0a:	2500      	movge	r5, #0
 8008c0c:	f7ff fcfe 	bl	800860c <_Balloc>
 8008c10:	4602      	mov	r2, r0
 8008c12:	b918      	cbnz	r0, 8008c1c <__mdiff+0x60>
 8008c14:	4b31      	ldr	r3, [pc, #196]	@ (8008cdc <__mdiff+0x120>)
 8008c16:	f240 2145 	movw	r1, #581	@ 0x245
 8008c1a:	e7e3      	b.n	8008be4 <__mdiff+0x28>
 8008c1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008c20:	6926      	ldr	r6, [r4, #16]
 8008c22:	60c5      	str	r5, [r0, #12]
 8008c24:	f109 0310 	add.w	r3, r9, #16
 8008c28:	f109 0514 	add.w	r5, r9, #20
 8008c2c:	f104 0e14 	add.w	lr, r4, #20
 8008c30:	f100 0b14 	add.w	fp, r0, #20
 8008c34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008c38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	46d9      	mov	r9, fp
 8008c40:	f04f 0c00 	mov.w	ip, #0
 8008c44:	9b01      	ldr	r3, [sp, #4]
 8008c46:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008c4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008c4e:	9301      	str	r3, [sp, #4]
 8008c50:	fa1f f38a 	uxth.w	r3, sl
 8008c54:	4619      	mov	r1, r3
 8008c56:	b283      	uxth	r3, r0
 8008c58:	1acb      	subs	r3, r1, r3
 8008c5a:	0c00      	lsrs	r0, r0, #16
 8008c5c:	4463      	add	r3, ip
 8008c5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008c62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008c6c:	4576      	cmp	r6, lr
 8008c6e:	f849 3b04 	str.w	r3, [r9], #4
 8008c72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c76:	d8e5      	bhi.n	8008c44 <__mdiff+0x88>
 8008c78:	1b33      	subs	r3, r6, r4
 8008c7a:	3b15      	subs	r3, #21
 8008c7c:	f023 0303 	bic.w	r3, r3, #3
 8008c80:	3415      	adds	r4, #21
 8008c82:	3304      	adds	r3, #4
 8008c84:	42a6      	cmp	r6, r4
 8008c86:	bf38      	it	cc
 8008c88:	2304      	movcc	r3, #4
 8008c8a:	441d      	add	r5, r3
 8008c8c:	445b      	add	r3, fp
 8008c8e:	461e      	mov	r6, r3
 8008c90:	462c      	mov	r4, r5
 8008c92:	4544      	cmp	r4, r8
 8008c94:	d30e      	bcc.n	8008cb4 <__mdiff+0xf8>
 8008c96:	f108 0103 	add.w	r1, r8, #3
 8008c9a:	1b49      	subs	r1, r1, r5
 8008c9c:	f021 0103 	bic.w	r1, r1, #3
 8008ca0:	3d03      	subs	r5, #3
 8008ca2:	45a8      	cmp	r8, r5
 8008ca4:	bf38      	it	cc
 8008ca6:	2100      	movcc	r1, #0
 8008ca8:	440b      	add	r3, r1
 8008caa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cae:	b191      	cbz	r1, 8008cd6 <__mdiff+0x11a>
 8008cb0:	6117      	str	r7, [r2, #16]
 8008cb2:	e79d      	b.n	8008bf0 <__mdiff+0x34>
 8008cb4:	f854 1b04 	ldr.w	r1, [r4], #4
 8008cb8:	46e6      	mov	lr, ip
 8008cba:	0c08      	lsrs	r0, r1, #16
 8008cbc:	fa1c fc81 	uxtah	ip, ip, r1
 8008cc0:	4471      	add	r1, lr
 8008cc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008cc6:	b289      	uxth	r1, r1
 8008cc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ccc:	f846 1b04 	str.w	r1, [r6], #4
 8008cd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008cd4:	e7dd      	b.n	8008c92 <__mdiff+0xd6>
 8008cd6:	3f01      	subs	r7, #1
 8008cd8:	e7e7      	b.n	8008caa <__mdiff+0xee>
 8008cda:	bf00      	nop
 8008cdc:	0800b011 	.word	0x0800b011
 8008ce0:	0800b022 	.word	0x0800b022

08008ce4 <__ulp>:
 8008ce4:	b082      	sub	sp, #8
 8008ce6:	ed8d 0b00 	vstr	d0, [sp]
 8008cea:	9a01      	ldr	r2, [sp, #4]
 8008cec:	4b0f      	ldr	r3, [pc, #60]	@ (8008d2c <__ulp+0x48>)
 8008cee:	4013      	ands	r3, r2
 8008cf0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	dc08      	bgt.n	8008d0a <__ulp+0x26>
 8008cf8:	425b      	negs	r3, r3
 8008cfa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008cfe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008d02:	da04      	bge.n	8008d0e <__ulp+0x2a>
 8008d04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008d08:	4113      	asrs	r3, r2
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	e008      	b.n	8008d20 <__ulp+0x3c>
 8008d0e:	f1a2 0314 	sub.w	r3, r2, #20
 8008d12:	2b1e      	cmp	r3, #30
 8008d14:	bfda      	itte	le
 8008d16:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008d1a:	40da      	lsrle	r2, r3
 8008d1c:	2201      	movgt	r2, #1
 8008d1e:	2300      	movs	r3, #0
 8008d20:	4619      	mov	r1, r3
 8008d22:	4610      	mov	r0, r2
 8008d24:	ec41 0b10 	vmov	d0, r0, r1
 8008d28:	b002      	add	sp, #8
 8008d2a:	4770      	bx	lr
 8008d2c:	7ff00000 	.word	0x7ff00000

08008d30 <__b2d>:
 8008d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d34:	6906      	ldr	r6, [r0, #16]
 8008d36:	f100 0814 	add.w	r8, r0, #20
 8008d3a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008d3e:	1f37      	subs	r7, r6, #4
 8008d40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008d44:	4610      	mov	r0, r2
 8008d46:	f7ff fd53 	bl	80087f0 <__hi0bits>
 8008d4a:	f1c0 0320 	rsb	r3, r0, #32
 8008d4e:	280a      	cmp	r0, #10
 8008d50:	600b      	str	r3, [r1, #0]
 8008d52:	491b      	ldr	r1, [pc, #108]	@ (8008dc0 <__b2d+0x90>)
 8008d54:	dc15      	bgt.n	8008d82 <__b2d+0x52>
 8008d56:	f1c0 0c0b 	rsb	ip, r0, #11
 8008d5a:	fa22 f30c 	lsr.w	r3, r2, ip
 8008d5e:	45b8      	cmp	r8, r7
 8008d60:	ea43 0501 	orr.w	r5, r3, r1
 8008d64:	bf34      	ite	cc
 8008d66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008d6a:	2300      	movcs	r3, #0
 8008d6c:	3015      	adds	r0, #21
 8008d6e:	fa02 f000 	lsl.w	r0, r2, r0
 8008d72:	fa23 f30c 	lsr.w	r3, r3, ip
 8008d76:	4303      	orrs	r3, r0
 8008d78:	461c      	mov	r4, r3
 8008d7a:	ec45 4b10 	vmov	d0, r4, r5
 8008d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d82:	45b8      	cmp	r8, r7
 8008d84:	bf3a      	itte	cc
 8008d86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008d8a:	f1a6 0708 	subcc.w	r7, r6, #8
 8008d8e:	2300      	movcs	r3, #0
 8008d90:	380b      	subs	r0, #11
 8008d92:	d012      	beq.n	8008dba <__b2d+0x8a>
 8008d94:	f1c0 0120 	rsb	r1, r0, #32
 8008d98:	fa23 f401 	lsr.w	r4, r3, r1
 8008d9c:	4082      	lsls	r2, r0
 8008d9e:	4322      	orrs	r2, r4
 8008da0:	4547      	cmp	r7, r8
 8008da2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008da6:	bf8c      	ite	hi
 8008da8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008dac:	2200      	movls	r2, #0
 8008dae:	4083      	lsls	r3, r0
 8008db0:	40ca      	lsrs	r2, r1
 8008db2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008db6:	4313      	orrs	r3, r2
 8008db8:	e7de      	b.n	8008d78 <__b2d+0x48>
 8008dba:	ea42 0501 	orr.w	r5, r2, r1
 8008dbe:	e7db      	b.n	8008d78 <__b2d+0x48>
 8008dc0:	3ff00000 	.word	0x3ff00000

08008dc4 <__d2b>:
 8008dc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008dc8:	460f      	mov	r7, r1
 8008dca:	2101      	movs	r1, #1
 8008dcc:	ec59 8b10 	vmov	r8, r9, d0
 8008dd0:	4616      	mov	r6, r2
 8008dd2:	f7ff fc1b 	bl	800860c <_Balloc>
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	b930      	cbnz	r0, 8008de8 <__d2b+0x24>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	4b23      	ldr	r3, [pc, #140]	@ (8008e6c <__d2b+0xa8>)
 8008dde:	4824      	ldr	r0, [pc, #144]	@ (8008e70 <__d2b+0xac>)
 8008de0:	f240 310f 	movw	r1, #783	@ 0x30f
 8008de4:	f7fe fd52 	bl	800788c <__assert_func>
 8008de8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008dec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008df0:	b10d      	cbz	r5, 8008df6 <__d2b+0x32>
 8008df2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008df6:	9301      	str	r3, [sp, #4]
 8008df8:	f1b8 0300 	subs.w	r3, r8, #0
 8008dfc:	d023      	beq.n	8008e46 <__d2b+0x82>
 8008dfe:	4668      	mov	r0, sp
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	f7ff fd14 	bl	800882e <__lo0bits>
 8008e06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e0a:	b1d0      	cbz	r0, 8008e42 <__d2b+0x7e>
 8008e0c:	f1c0 0320 	rsb	r3, r0, #32
 8008e10:	fa02 f303 	lsl.w	r3, r2, r3
 8008e14:	430b      	orrs	r3, r1
 8008e16:	40c2      	lsrs	r2, r0
 8008e18:	6163      	str	r3, [r4, #20]
 8008e1a:	9201      	str	r2, [sp, #4]
 8008e1c:	9b01      	ldr	r3, [sp, #4]
 8008e1e:	61a3      	str	r3, [r4, #24]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	bf0c      	ite	eq
 8008e24:	2201      	moveq	r2, #1
 8008e26:	2202      	movne	r2, #2
 8008e28:	6122      	str	r2, [r4, #16]
 8008e2a:	b1a5      	cbz	r5, 8008e56 <__d2b+0x92>
 8008e2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008e30:	4405      	add	r5, r0
 8008e32:	603d      	str	r5, [r7, #0]
 8008e34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008e38:	6030      	str	r0, [r6, #0]
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	b003      	add	sp, #12
 8008e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e42:	6161      	str	r1, [r4, #20]
 8008e44:	e7ea      	b.n	8008e1c <__d2b+0x58>
 8008e46:	a801      	add	r0, sp, #4
 8008e48:	f7ff fcf1 	bl	800882e <__lo0bits>
 8008e4c:	9b01      	ldr	r3, [sp, #4]
 8008e4e:	6163      	str	r3, [r4, #20]
 8008e50:	3020      	adds	r0, #32
 8008e52:	2201      	movs	r2, #1
 8008e54:	e7e8      	b.n	8008e28 <__d2b+0x64>
 8008e56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008e5e:	6038      	str	r0, [r7, #0]
 8008e60:	6918      	ldr	r0, [r3, #16]
 8008e62:	f7ff fcc5 	bl	80087f0 <__hi0bits>
 8008e66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e6a:	e7e5      	b.n	8008e38 <__d2b+0x74>
 8008e6c:	0800b011 	.word	0x0800b011
 8008e70:	0800b022 	.word	0x0800b022

08008e74 <__ratio>:
 8008e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e78:	b085      	sub	sp, #20
 8008e7a:	e9cd 1000 	strd	r1, r0, [sp]
 8008e7e:	a902      	add	r1, sp, #8
 8008e80:	f7ff ff56 	bl	8008d30 <__b2d>
 8008e84:	9800      	ldr	r0, [sp, #0]
 8008e86:	a903      	add	r1, sp, #12
 8008e88:	ec55 4b10 	vmov	r4, r5, d0
 8008e8c:	f7ff ff50 	bl	8008d30 <__b2d>
 8008e90:	9b01      	ldr	r3, [sp, #4]
 8008e92:	6919      	ldr	r1, [r3, #16]
 8008e94:	9b00      	ldr	r3, [sp, #0]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	1ac9      	subs	r1, r1, r3
 8008e9a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008e9e:	1a9b      	subs	r3, r3, r2
 8008ea0:	ec5b ab10 	vmov	sl, fp, d0
 8008ea4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	bfce      	itee	gt
 8008eac:	462a      	movgt	r2, r5
 8008eae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008eb2:	465a      	movle	r2, fp
 8008eb4:	462f      	mov	r7, r5
 8008eb6:	46d9      	mov	r9, fp
 8008eb8:	bfcc      	ite	gt
 8008eba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008ebe:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008ec2:	464b      	mov	r3, r9
 8008ec4:	4652      	mov	r2, sl
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	4639      	mov	r1, r7
 8008eca:	f7f7 fcd7 	bl	800087c <__aeabi_ddiv>
 8008ece:	ec41 0b10 	vmov	d0, r0, r1
 8008ed2:	b005      	add	sp, #20
 8008ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ed8 <__copybits>:
 8008ed8:	3901      	subs	r1, #1
 8008eda:	b570      	push	{r4, r5, r6, lr}
 8008edc:	1149      	asrs	r1, r1, #5
 8008ede:	6914      	ldr	r4, [r2, #16]
 8008ee0:	3101      	adds	r1, #1
 8008ee2:	f102 0314 	add.w	r3, r2, #20
 8008ee6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008eea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008eee:	1f05      	subs	r5, r0, #4
 8008ef0:	42a3      	cmp	r3, r4
 8008ef2:	d30c      	bcc.n	8008f0e <__copybits+0x36>
 8008ef4:	1aa3      	subs	r3, r4, r2
 8008ef6:	3b11      	subs	r3, #17
 8008ef8:	f023 0303 	bic.w	r3, r3, #3
 8008efc:	3211      	adds	r2, #17
 8008efe:	42a2      	cmp	r2, r4
 8008f00:	bf88      	it	hi
 8008f02:	2300      	movhi	r3, #0
 8008f04:	4418      	add	r0, r3
 8008f06:	2300      	movs	r3, #0
 8008f08:	4288      	cmp	r0, r1
 8008f0a:	d305      	bcc.n	8008f18 <__copybits+0x40>
 8008f0c:	bd70      	pop	{r4, r5, r6, pc}
 8008f0e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f12:	f845 6f04 	str.w	r6, [r5, #4]!
 8008f16:	e7eb      	b.n	8008ef0 <__copybits+0x18>
 8008f18:	f840 3b04 	str.w	r3, [r0], #4
 8008f1c:	e7f4      	b.n	8008f08 <__copybits+0x30>

08008f1e <__any_on>:
 8008f1e:	f100 0214 	add.w	r2, r0, #20
 8008f22:	6900      	ldr	r0, [r0, #16]
 8008f24:	114b      	asrs	r3, r1, #5
 8008f26:	4298      	cmp	r0, r3
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	db11      	blt.n	8008f50 <__any_on+0x32>
 8008f2c:	dd0a      	ble.n	8008f44 <__any_on+0x26>
 8008f2e:	f011 011f 	ands.w	r1, r1, #31
 8008f32:	d007      	beq.n	8008f44 <__any_on+0x26>
 8008f34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f38:	fa24 f001 	lsr.w	r0, r4, r1
 8008f3c:	fa00 f101 	lsl.w	r1, r0, r1
 8008f40:	428c      	cmp	r4, r1
 8008f42:	d10b      	bne.n	8008f5c <__any_on+0x3e>
 8008f44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d803      	bhi.n	8008f54 <__any_on+0x36>
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	bd10      	pop	{r4, pc}
 8008f50:	4603      	mov	r3, r0
 8008f52:	e7f7      	b.n	8008f44 <__any_on+0x26>
 8008f54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f58:	2900      	cmp	r1, #0
 8008f5a:	d0f5      	beq.n	8008f48 <__any_on+0x2a>
 8008f5c:	2001      	movs	r0, #1
 8008f5e:	e7f6      	b.n	8008f4e <__any_on+0x30>

08008f60 <sulp>:
 8008f60:	b570      	push	{r4, r5, r6, lr}
 8008f62:	4604      	mov	r4, r0
 8008f64:	460d      	mov	r5, r1
 8008f66:	ec45 4b10 	vmov	d0, r4, r5
 8008f6a:	4616      	mov	r6, r2
 8008f6c:	f7ff feba 	bl	8008ce4 <__ulp>
 8008f70:	ec51 0b10 	vmov	r0, r1, d0
 8008f74:	b17e      	cbz	r6, 8008f96 <sulp+0x36>
 8008f76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008f7a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	dd09      	ble.n	8008f96 <sulp+0x36>
 8008f82:	051b      	lsls	r3, r3, #20
 8008f84:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008f88:	2400      	movs	r4, #0
 8008f8a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008f8e:	4622      	mov	r2, r4
 8008f90:	462b      	mov	r3, r5
 8008f92:	f7f7 fb49 	bl	8000628 <__aeabi_dmul>
 8008f96:	ec41 0b10 	vmov	d0, r0, r1
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}
 8008f9c:	0000      	movs	r0, r0
	...

08008fa0 <_strtod_l>:
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	b09f      	sub	sp, #124	@ 0x7c
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008faa:	2200      	movs	r2, #0
 8008fac:	921a      	str	r2, [sp, #104]	@ 0x68
 8008fae:	9005      	str	r0, [sp, #20]
 8008fb0:	f04f 0a00 	mov.w	sl, #0
 8008fb4:	f04f 0b00 	mov.w	fp, #0
 8008fb8:	460a      	mov	r2, r1
 8008fba:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fbc:	7811      	ldrb	r1, [r2, #0]
 8008fbe:	292b      	cmp	r1, #43	@ 0x2b
 8008fc0:	d04a      	beq.n	8009058 <_strtod_l+0xb8>
 8008fc2:	d838      	bhi.n	8009036 <_strtod_l+0x96>
 8008fc4:	290d      	cmp	r1, #13
 8008fc6:	d832      	bhi.n	800902e <_strtod_l+0x8e>
 8008fc8:	2908      	cmp	r1, #8
 8008fca:	d832      	bhi.n	8009032 <_strtod_l+0x92>
 8008fcc:	2900      	cmp	r1, #0
 8008fce:	d03b      	beq.n	8009048 <_strtod_l+0xa8>
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008fd6:	782a      	ldrb	r2, [r5, #0]
 8008fd8:	2a30      	cmp	r2, #48	@ 0x30
 8008fda:	f040 80b2 	bne.w	8009142 <_strtod_l+0x1a2>
 8008fde:	786a      	ldrb	r2, [r5, #1]
 8008fe0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008fe4:	2a58      	cmp	r2, #88	@ 0x58
 8008fe6:	d16e      	bne.n	80090c6 <_strtod_l+0x126>
 8008fe8:	9302      	str	r3, [sp, #8]
 8008fea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fec:	9301      	str	r3, [sp, #4]
 8008fee:	ab1a      	add	r3, sp, #104	@ 0x68
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	4a8f      	ldr	r2, [pc, #572]	@ (8009230 <_strtod_l+0x290>)
 8008ff4:	9805      	ldr	r0, [sp, #20]
 8008ff6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008ff8:	a919      	add	r1, sp, #100	@ 0x64
 8008ffa:	f001 fae7 	bl	800a5cc <__gethex>
 8008ffe:	f010 060f 	ands.w	r6, r0, #15
 8009002:	4604      	mov	r4, r0
 8009004:	d005      	beq.n	8009012 <_strtod_l+0x72>
 8009006:	2e06      	cmp	r6, #6
 8009008:	d128      	bne.n	800905c <_strtod_l+0xbc>
 800900a:	3501      	adds	r5, #1
 800900c:	2300      	movs	r3, #0
 800900e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009010:	930e      	str	r3, [sp, #56]	@ 0x38
 8009012:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009014:	2b00      	cmp	r3, #0
 8009016:	f040 858e 	bne.w	8009b36 <_strtod_l+0xb96>
 800901a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800901c:	b1cb      	cbz	r3, 8009052 <_strtod_l+0xb2>
 800901e:	4652      	mov	r2, sl
 8009020:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009024:	ec43 2b10 	vmov	d0, r2, r3
 8009028:	b01f      	add	sp, #124	@ 0x7c
 800902a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902e:	2920      	cmp	r1, #32
 8009030:	d1ce      	bne.n	8008fd0 <_strtod_l+0x30>
 8009032:	3201      	adds	r2, #1
 8009034:	e7c1      	b.n	8008fba <_strtod_l+0x1a>
 8009036:	292d      	cmp	r1, #45	@ 0x2d
 8009038:	d1ca      	bne.n	8008fd0 <_strtod_l+0x30>
 800903a:	2101      	movs	r1, #1
 800903c:	910e      	str	r1, [sp, #56]	@ 0x38
 800903e:	1c51      	adds	r1, r2, #1
 8009040:	9119      	str	r1, [sp, #100]	@ 0x64
 8009042:	7852      	ldrb	r2, [r2, #1]
 8009044:	2a00      	cmp	r2, #0
 8009046:	d1c5      	bne.n	8008fd4 <_strtod_l+0x34>
 8009048:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800904a:	9419      	str	r4, [sp, #100]	@ 0x64
 800904c:	2b00      	cmp	r3, #0
 800904e:	f040 8570 	bne.w	8009b32 <_strtod_l+0xb92>
 8009052:	4652      	mov	r2, sl
 8009054:	465b      	mov	r3, fp
 8009056:	e7e5      	b.n	8009024 <_strtod_l+0x84>
 8009058:	2100      	movs	r1, #0
 800905a:	e7ef      	b.n	800903c <_strtod_l+0x9c>
 800905c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800905e:	b13a      	cbz	r2, 8009070 <_strtod_l+0xd0>
 8009060:	2135      	movs	r1, #53	@ 0x35
 8009062:	a81c      	add	r0, sp, #112	@ 0x70
 8009064:	f7ff ff38 	bl	8008ed8 <__copybits>
 8009068:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800906a:	9805      	ldr	r0, [sp, #20]
 800906c:	f7ff fb0e 	bl	800868c <_Bfree>
 8009070:	3e01      	subs	r6, #1
 8009072:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009074:	2e04      	cmp	r6, #4
 8009076:	d806      	bhi.n	8009086 <_strtod_l+0xe6>
 8009078:	e8df f006 	tbb	[pc, r6]
 800907c:	201d0314 	.word	0x201d0314
 8009080:	14          	.byte	0x14
 8009081:	00          	.byte	0x00
 8009082:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009086:	05e1      	lsls	r1, r4, #23
 8009088:	bf48      	it	mi
 800908a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800908e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009092:	0d1b      	lsrs	r3, r3, #20
 8009094:	051b      	lsls	r3, r3, #20
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1bb      	bne.n	8009012 <_strtod_l+0x72>
 800909a:	f7fe fbc3 	bl	8007824 <__errno>
 800909e:	2322      	movs	r3, #34	@ 0x22
 80090a0:	6003      	str	r3, [r0, #0]
 80090a2:	e7b6      	b.n	8009012 <_strtod_l+0x72>
 80090a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80090a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80090ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80090b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80090b4:	e7e7      	b.n	8009086 <_strtod_l+0xe6>
 80090b6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009238 <_strtod_l+0x298>
 80090ba:	e7e4      	b.n	8009086 <_strtod_l+0xe6>
 80090bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80090c0:	f04f 3aff 	mov.w	sl, #4294967295
 80090c4:	e7df      	b.n	8009086 <_strtod_l+0xe6>
 80090c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090c8:	1c5a      	adds	r2, r3, #1
 80090ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80090cc:	785b      	ldrb	r3, [r3, #1]
 80090ce:	2b30      	cmp	r3, #48	@ 0x30
 80090d0:	d0f9      	beq.n	80090c6 <_strtod_l+0x126>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d09d      	beq.n	8009012 <_strtod_l+0x72>
 80090d6:	2301      	movs	r3, #1
 80090d8:	2700      	movs	r7, #0
 80090da:	9308      	str	r3, [sp, #32]
 80090dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090de:	930c      	str	r3, [sp, #48]	@ 0x30
 80090e0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80090e2:	46b9      	mov	r9, r7
 80090e4:	220a      	movs	r2, #10
 80090e6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80090e8:	7805      	ldrb	r5, [r0, #0]
 80090ea:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80090ee:	b2d9      	uxtb	r1, r3
 80090f0:	2909      	cmp	r1, #9
 80090f2:	d928      	bls.n	8009146 <_strtod_l+0x1a6>
 80090f4:	494f      	ldr	r1, [pc, #316]	@ (8009234 <_strtod_l+0x294>)
 80090f6:	2201      	movs	r2, #1
 80090f8:	f001 f9be 	bl	800a478 <strncmp>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d032      	beq.n	8009166 <_strtod_l+0x1c6>
 8009100:	2000      	movs	r0, #0
 8009102:	462a      	mov	r2, r5
 8009104:	900a      	str	r0, [sp, #40]	@ 0x28
 8009106:	464d      	mov	r5, r9
 8009108:	4603      	mov	r3, r0
 800910a:	2a65      	cmp	r2, #101	@ 0x65
 800910c:	d001      	beq.n	8009112 <_strtod_l+0x172>
 800910e:	2a45      	cmp	r2, #69	@ 0x45
 8009110:	d114      	bne.n	800913c <_strtod_l+0x19c>
 8009112:	b91d      	cbnz	r5, 800911c <_strtod_l+0x17c>
 8009114:	9a08      	ldr	r2, [sp, #32]
 8009116:	4302      	orrs	r2, r0
 8009118:	d096      	beq.n	8009048 <_strtod_l+0xa8>
 800911a:	2500      	movs	r5, #0
 800911c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800911e:	1c62      	adds	r2, r4, #1
 8009120:	9219      	str	r2, [sp, #100]	@ 0x64
 8009122:	7862      	ldrb	r2, [r4, #1]
 8009124:	2a2b      	cmp	r2, #43	@ 0x2b
 8009126:	d07a      	beq.n	800921e <_strtod_l+0x27e>
 8009128:	2a2d      	cmp	r2, #45	@ 0x2d
 800912a:	d07e      	beq.n	800922a <_strtod_l+0x28a>
 800912c:	f04f 0c00 	mov.w	ip, #0
 8009130:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009134:	2909      	cmp	r1, #9
 8009136:	f240 8085 	bls.w	8009244 <_strtod_l+0x2a4>
 800913a:	9419      	str	r4, [sp, #100]	@ 0x64
 800913c:	f04f 0800 	mov.w	r8, #0
 8009140:	e0a5      	b.n	800928e <_strtod_l+0x2ee>
 8009142:	2300      	movs	r3, #0
 8009144:	e7c8      	b.n	80090d8 <_strtod_l+0x138>
 8009146:	f1b9 0f08 	cmp.w	r9, #8
 800914a:	bfd8      	it	le
 800914c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800914e:	f100 0001 	add.w	r0, r0, #1
 8009152:	bfda      	itte	le
 8009154:	fb02 3301 	mlale	r3, r2, r1, r3
 8009158:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800915a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800915e:	f109 0901 	add.w	r9, r9, #1
 8009162:	9019      	str	r0, [sp, #100]	@ 0x64
 8009164:	e7bf      	b.n	80090e6 <_strtod_l+0x146>
 8009166:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	9219      	str	r2, [sp, #100]	@ 0x64
 800916c:	785a      	ldrb	r2, [r3, #1]
 800916e:	f1b9 0f00 	cmp.w	r9, #0
 8009172:	d03b      	beq.n	80091ec <_strtod_l+0x24c>
 8009174:	900a      	str	r0, [sp, #40]	@ 0x28
 8009176:	464d      	mov	r5, r9
 8009178:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800917c:	2b09      	cmp	r3, #9
 800917e:	d912      	bls.n	80091a6 <_strtod_l+0x206>
 8009180:	2301      	movs	r3, #1
 8009182:	e7c2      	b.n	800910a <_strtod_l+0x16a>
 8009184:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009186:	1c5a      	adds	r2, r3, #1
 8009188:	9219      	str	r2, [sp, #100]	@ 0x64
 800918a:	785a      	ldrb	r2, [r3, #1]
 800918c:	3001      	adds	r0, #1
 800918e:	2a30      	cmp	r2, #48	@ 0x30
 8009190:	d0f8      	beq.n	8009184 <_strtod_l+0x1e4>
 8009192:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009196:	2b08      	cmp	r3, #8
 8009198:	f200 84d2 	bhi.w	8009b40 <_strtod_l+0xba0>
 800919c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800919e:	900a      	str	r0, [sp, #40]	@ 0x28
 80091a0:	2000      	movs	r0, #0
 80091a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80091a4:	4605      	mov	r5, r0
 80091a6:	3a30      	subs	r2, #48	@ 0x30
 80091a8:	f100 0301 	add.w	r3, r0, #1
 80091ac:	d018      	beq.n	80091e0 <_strtod_l+0x240>
 80091ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80091b0:	4419      	add	r1, r3
 80091b2:	910a      	str	r1, [sp, #40]	@ 0x28
 80091b4:	462e      	mov	r6, r5
 80091b6:	f04f 0e0a 	mov.w	lr, #10
 80091ba:	1c71      	adds	r1, r6, #1
 80091bc:	eba1 0c05 	sub.w	ip, r1, r5
 80091c0:	4563      	cmp	r3, ip
 80091c2:	dc15      	bgt.n	80091f0 <_strtod_l+0x250>
 80091c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80091c8:	182b      	adds	r3, r5, r0
 80091ca:	2b08      	cmp	r3, #8
 80091cc:	f105 0501 	add.w	r5, r5, #1
 80091d0:	4405      	add	r5, r0
 80091d2:	dc1a      	bgt.n	800920a <_strtod_l+0x26a>
 80091d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091d6:	230a      	movs	r3, #10
 80091d8:	fb03 2301 	mla	r3, r3, r1, r2
 80091dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091de:	2300      	movs	r3, #0
 80091e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091e2:	1c51      	adds	r1, r2, #1
 80091e4:	9119      	str	r1, [sp, #100]	@ 0x64
 80091e6:	7852      	ldrb	r2, [r2, #1]
 80091e8:	4618      	mov	r0, r3
 80091ea:	e7c5      	b.n	8009178 <_strtod_l+0x1d8>
 80091ec:	4648      	mov	r0, r9
 80091ee:	e7ce      	b.n	800918e <_strtod_l+0x1ee>
 80091f0:	2e08      	cmp	r6, #8
 80091f2:	dc05      	bgt.n	8009200 <_strtod_l+0x260>
 80091f4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80091f6:	fb0e f606 	mul.w	r6, lr, r6
 80091fa:	960b      	str	r6, [sp, #44]	@ 0x2c
 80091fc:	460e      	mov	r6, r1
 80091fe:	e7dc      	b.n	80091ba <_strtod_l+0x21a>
 8009200:	2910      	cmp	r1, #16
 8009202:	bfd8      	it	le
 8009204:	fb0e f707 	mulle.w	r7, lr, r7
 8009208:	e7f8      	b.n	80091fc <_strtod_l+0x25c>
 800920a:	2b0f      	cmp	r3, #15
 800920c:	bfdc      	itt	le
 800920e:	230a      	movle	r3, #10
 8009210:	fb03 2707 	mlale	r7, r3, r7, r2
 8009214:	e7e3      	b.n	80091de <_strtod_l+0x23e>
 8009216:	2300      	movs	r3, #0
 8009218:	930a      	str	r3, [sp, #40]	@ 0x28
 800921a:	2301      	movs	r3, #1
 800921c:	e77a      	b.n	8009114 <_strtod_l+0x174>
 800921e:	f04f 0c00 	mov.w	ip, #0
 8009222:	1ca2      	adds	r2, r4, #2
 8009224:	9219      	str	r2, [sp, #100]	@ 0x64
 8009226:	78a2      	ldrb	r2, [r4, #2]
 8009228:	e782      	b.n	8009130 <_strtod_l+0x190>
 800922a:	f04f 0c01 	mov.w	ip, #1
 800922e:	e7f8      	b.n	8009222 <_strtod_l+0x282>
 8009230:	0800b20c 	.word	0x0800b20c
 8009234:	0800b07b 	.word	0x0800b07b
 8009238:	7ff00000 	.word	0x7ff00000
 800923c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800923e:	1c51      	adds	r1, r2, #1
 8009240:	9119      	str	r1, [sp, #100]	@ 0x64
 8009242:	7852      	ldrb	r2, [r2, #1]
 8009244:	2a30      	cmp	r2, #48	@ 0x30
 8009246:	d0f9      	beq.n	800923c <_strtod_l+0x29c>
 8009248:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800924c:	2908      	cmp	r1, #8
 800924e:	f63f af75 	bhi.w	800913c <_strtod_l+0x19c>
 8009252:	3a30      	subs	r2, #48	@ 0x30
 8009254:	9209      	str	r2, [sp, #36]	@ 0x24
 8009256:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009258:	920f      	str	r2, [sp, #60]	@ 0x3c
 800925a:	f04f 080a 	mov.w	r8, #10
 800925e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009260:	1c56      	adds	r6, r2, #1
 8009262:	9619      	str	r6, [sp, #100]	@ 0x64
 8009264:	7852      	ldrb	r2, [r2, #1]
 8009266:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800926a:	f1be 0f09 	cmp.w	lr, #9
 800926e:	d939      	bls.n	80092e4 <_strtod_l+0x344>
 8009270:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009272:	1a76      	subs	r6, r6, r1
 8009274:	2e08      	cmp	r6, #8
 8009276:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800927a:	dc03      	bgt.n	8009284 <_strtod_l+0x2e4>
 800927c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800927e:	4588      	cmp	r8, r1
 8009280:	bfa8      	it	ge
 8009282:	4688      	movge	r8, r1
 8009284:	f1bc 0f00 	cmp.w	ip, #0
 8009288:	d001      	beq.n	800928e <_strtod_l+0x2ee>
 800928a:	f1c8 0800 	rsb	r8, r8, #0
 800928e:	2d00      	cmp	r5, #0
 8009290:	d14e      	bne.n	8009330 <_strtod_l+0x390>
 8009292:	9908      	ldr	r1, [sp, #32]
 8009294:	4308      	orrs	r0, r1
 8009296:	f47f aebc 	bne.w	8009012 <_strtod_l+0x72>
 800929a:	2b00      	cmp	r3, #0
 800929c:	f47f aed4 	bne.w	8009048 <_strtod_l+0xa8>
 80092a0:	2a69      	cmp	r2, #105	@ 0x69
 80092a2:	d028      	beq.n	80092f6 <_strtod_l+0x356>
 80092a4:	dc25      	bgt.n	80092f2 <_strtod_l+0x352>
 80092a6:	2a49      	cmp	r2, #73	@ 0x49
 80092a8:	d025      	beq.n	80092f6 <_strtod_l+0x356>
 80092aa:	2a4e      	cmp	r2, #78	@ 0x4e
 80092ac:	f47f aecc 	bne.w	8009048 <_strtod_l+0xa8>
 80092b0:	499a      	ldr	r1, [pc, #616]	@ (800951c <_strtod_l+0x57c>)
 80092b2:	a819      	add	r0, sp, #100	@ 0x64
 80092b4:	f001 fbac 	bl	800aa10 <__match>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	f43f aec5 	beq.w	8009048 <_strtod_l+0xa8>
 80092be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	2b28      	cmp	r3, #40	@ 0x28
 80092c4:	d12e      	bne.n	8009324 <_strtod_l+0x384>
 80092c6:	4996      	ldr	r1, [pc, #600]	@ (8009520 <_strtod_l+0x580>)
 80092c8:	aa1c      	add	r2, sp, #112	@ 0x70
 80092ca:	a819      	add	r0, sp, #100	@ 0x64
 80092cc:	f001 fbb4 	bl	800aa38 <__hexnan>
 80092d0:	2805      	cmp	r0, #5
 80092d2:	d127      	bne.n	8009324 <_strtod_l+0x384>
 80092d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80092d6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80092da:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80092de:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80092e2:	e696      	b.n	8009012 <_strtod_l+0x72>
 80092e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80092e6:	fb08 2101 	mla	r1, r8, r1, r2
 80092ea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80092ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80092f0:	e7b5      	b.n	800925e <_strtod_l+0x2be>
 80092f2:	2a6e      	cmp	r2, #110	@ 0x6e
 80092f4:	e7da      	b.n	80092ac <_strtod_l+0x30c>
 80092f6:	498b      	ldr	r1, [pc, #556]	@ (8009524 <_strtod_l+0x584>)
 80092f8:	a819      	add	r0, sp, #100	@ 0x64
 80092fa:	f001 fb89 	bl	800aa10 <__match>
 80092fe:	2800      	cmp	r0, #0
 8009300:	f43f aea2 	beq.w	8009048 <_strtod_l+0xa8>
 8009304:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009306:	4988      	ldr	r1, [pc, #544]	@ (8009528 <_strtod_l+0x588>)
 8009308:	3b01      	subs	r3, #1
 800930a:	a819      	add	r0, sp, #100	@ 0x64
 800930c:	9319      	str	r3, [sp, #100]	@ 0x64
 800930e:	f001 fb7f 	bl	800aa10 <__match>
 8009312:	b910      	cbnz	r0, 800931a <_strtod_l+0x37a>
 8009314:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009316:	3301      	adds	r3, #1
 8009318:	9319      	str	r3, [sp, #100]	@ 0x64
 800931a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009538 <_strtod_l+0x598>
 800931e:	f04f 0a00 	mov.w	sl, #0
 8009322:	e676      	b.n	8009012 <_strtod_l+0x72>
 8009324:	4881      	ldr	r0, [pc, #516]	@ (800952c <_strtod_l+0x58c>)
 8009326:	f001 f8c7 	bl	800a4b8 <nan>
 800932a:	ec5b ab10 	vmov	sl, fp, d0
 800932e:	e670      	b.n	8009012 <_strtod_l+0x72>
 8009330:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009332:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009334:	eba8 0303 	sub.w	r3, r8, r3
 8009338:	f1b9 0f00 	cmp.w	r9, #0
 800933c:	bf08      	it	eq
 800933e:	46a9      	moveq	r9, r5
 8009340:	2d10      	cmp	r5, #16
 8009342:	9309      	str	r3, [sp, #36]	@ 0x24
 8009344:	462c      	mov	r4, r5
 8009346:	bfa8      	it	ge
 8009348:	2410      	movge	r4, #16
 800934a:	f7f7 f8f3 	bl	8000534 <__aeabi_ui2d>
 800934e:	2d09      	cmp	r5, #9
 8009350:	4682      	mov	sl, r0
 8009352:	468b      	mov	fp, r1
 8009354:	dc13      	bgt.n	800937e <_strtod_l+0x3de>
 8009356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009358:	2b00      	cmp	r3, #0
 800935a:	f43f ae5a 	beq.w	8009012 <_strtod_l+0x72>
 800935e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009360:	dd78      	ble.n	8009454 <_strtod_l+0x4b4>
 8009362:	2b16      	cmp	r3, #22
 8009364:	dc5f      	bgt.n	8009426 <_strtod_l+0x486>
 8009366:	4972      	ldr	r1, [pc, #456]	@ (8009530 <_strtod_l+0x590>)
 8009368:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800936c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009370:	4652      	mov	r2, sl
 8009372:	465b      	mov	r3, fp
 8009374:	f7f7 f958 	bl	8000628 <__aeabi_dmul>
 8009378:	4682      	mov	sl, r0
 800937a:	468b      	mov	fp, r1
 800937c:	e649      	b.n	8009012 <_strtod_l+0x72>
 800937e:	4b6c      	ldr	r3, [pc, #432]	@ (8009530 <_strtod_l+0x590>)
 8009380:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009384:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009388:	f7f7 f94e 	bl	8000628 <__aeabi_dmul>
 800938c:	4682      	mov	sl, r0
 800938e:	4638      	mov	r0, r7
 8009390:	468b      	mov	fp, r1
 8009392:	f7f7 f8cf 	bl	8000534 <__aeabi_ui2d>
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	4650      	mov	r0, sl
 800939c:	4659      	mov	r1, fp
 800939e:	f7f6 ff8d 	bl	80002bc <__adddf3>
 80093a2:	2d0f      	cmp	r5, #15
 80093a4:	4682      	mov	sl, r0
 80093a6:	468b      	mov	fp, r1
 80093a8:	ddd5      	ble.n	8009356 <_strtod_l+0x3b6>
 80093aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ac:	1b2c      	subs	r4, r5, r4
 80093ae:	441c      	add	r4, r3
 80093b0:	2c00      	cmp	r4, #0
 80093b2:	f340 8093 	ble.w	80094dc <_strtod_l+0x53c>
 80093b6:	f014 030f 	ands.w	r3, r4, #15
 80093ba:	d00a      	beq.n	80093d2 <_strtod_l+0x432>
 80093bc:	495c      	ldr	r1, [pc, #368]	@ (8009530 <_strtod_l+0x590>)
 80093be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093c2:	4652      	mov	r2, sl
 80093c4:	465b      	mov	r3, fp
 80093c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ca:	f7f7 f92d 	bl	8000628 <__aeabi_dmul>
 80093ce:	4682      	mov	sl, r0
 80093d0:	468b      	mov	fp, r1
 80093d2:	f034 040f 	bics.w	r4, r4, #15
 80093d6:	d073      	beq.n	80094c0 <_strtod_l+0x520>
 80093d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80093dc:	dd49      	ble.n	8009472 <_strtod_l+0x4d2>
 80093de:	2400      	movs	r4, #0
 80093e0:	46a0      	mov	r8, r4
 80093e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80093e4:	46a1      	mov	r9, r4
 80093e6:	9a05      	ldr	r2, [sp, #20]
 80093e8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009538 <_strtod_l+0x598>
 80093ec:	2322      	movs	r3, #34	@ 0x22
 80093ee:	6013      	str	r3, [r2, #0]
 80093f0:	f04f 0a00 	mov.w	sl, #0
 80093f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f43f ae0b 	beq.w	8009012 <_strtod_l+0x72>
 80093fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093fe:	9805      	ldr	r0, [sp, #20]
 8009400:	f7ff f944 	bl	800868c <_Bfree>
 8009404:	9805      	ldr	r0, [sp, #20]
 8009406:	4649      	mov	r1, r9
 8009408:	f7ff f940 	bl	800868c <_Bfree>
 800940c:	9805      	ldr	r0, [sp, #20]
 800940e:	4641      	mov	r1, r8
 8009410:	f7ff f93c 	bl	800868c <_Bfree>
 8009414:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009416:	9805      	ldr	r0, [sp, #20]
 8009418:	f7ff f938 	bl	800868c <_Bfree>
 800941c:	9805      	ldr	r0, [sp, #20]
 800941e:	4621      	mov	r1, r4
 8009420:	f7ff f934 	bl	800868c <_Bfree>
 8009424:	e5f5      	b.n	8009012 <_strtod_l+0x72>
 8009426:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009428:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800942c:	4293      	cmp	r3, r2
 800942e:	dbbc      	blt.n	80093aa <_strtod_l+0x40a>
 8009430:	4c3f      	ldr	r4, [pc, #252]	@ (8009530 <_strtod_l+0x590>)
 8009432:	f1c5 050f 	rsb	r5, r5, #15
 8009436:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800943a:	4652      	mov	r2, sl
 800943c:	465b      	mov	r3, fp
 800943e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009442:	f7f7 f8f1 	bl	8000628 <__aeabi_dmul>
 8009446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009448:	1b5d      	subs	r5, r3, r5
 800944a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800944e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009452:	e78f      	b.n	8009374 <_strtod_l+0x3d4>
 8009454:	3316      	adds	r3, #22
 8009456:	dba8      	blt.n	80093aa <_strtod_l+0x40a>
 8009458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800945a:	eba3 0808 	sub.w	r8, r3, r8
 800945e:	4b34      	ldr	r3, [pc, #208]	@ (8009530 <_strtod_l+0x590>)
 8009460:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009464:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009468:	4650      	mov	r0, sl
 800946a:	4659      	mov	r1, fp
 800946c:	f7f7 fa06 	bl	800087c <__aeabi_ddiv>
 8009470:	e782      	b.n	8009378 <_strtod_l+0x3d8>
 8009472:	2300      	movs	r3, #0
 8009474:	4f2f      	ldr	r7, [pc, #188]	@ (8009534 <_strtod_l+0x594>)
 8009476:	1124      	asrs	r4, r4, #4
 8009478:	4650      	mov	r0, sl
 800947a:	4659      	mov	r1, fp
 800947c:	461e      	mov	r6, r3
 800947e:	2c01      	cmp	r4, #1
 8009480:	dc21      	bgt.n	80094c6 <_strtod_l+0x526>
 8009482:	b10b      	cbz	r3, 8009488 <_strtod_l+0x4e8>
 8009484:	4682      	mov	sl, r0
 8009486:	468b      	mov	fp, r1
 8009488:	492a      	ldr	r1, [pc, #168]	@ (8009534 <_strtod_l+0x594>)
 800948a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800948e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009492:	4652      	mov	r2, sl
 8009494:	465b      	mov	r3, fp
 8009496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800949a:	f7f7 f8c5 	bl	8000628 <__aeabi_dmul>
 800949e:	4b26      	ldr	r3, [pc, #152]	@ (8009538 <_strtod_l+0x598>)
 80094a0:	460a      	mov	r2, r1
 80094a2:	400b      	ands	r3, r1
 80094a4:	4925      	ldr	r1, [pc, #148]	@ (800953c <_strtod_l+0x59c>)
 80094a6:	428b      	cmp	r3, r1
 80094a8:	4682      	mov	sl, r0
 80094aa:	d898      	bhi.n	80093de <_strtod_l+0x43e>
 80094ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80094b0:	428b      	cmp	r3, r1
 80094b2:	bf86      	itte	hi
 80094b4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009540 <_strtod_l+0x5a0>
 80094b8:	f04f 3aff 	movhi.w	sl, #4294967295
 80094bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80094c0:	2300      	movs	r3, #0
 80094c2:	9308      	str	r3, [sp, #32]
 80094c4:	e076      	b.n	80095b4 <_strtod_l+0x614>
 80094c6:	07e2      	lsls	r2, r4, #31
 80094c8:	d504      	bpl.n	80094d4 <_strtod_l+0x534>
 80094ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ce:	f7f7 f8ab 	bl	8000628 <__aeabi_dmul>
 80094d2:	2301      	movs	r3, #1
 80094d4:	3601      	adds	r6, #1
 80094d6:	1064      	asrs	r4, r4, #1
 80094d8:	3708      	adds	r7, #8
 80094da:	e7d0      	b.n	800947e <_strtod_l+0x4de>
 80094dc:	d0f0      	beq.n	80094c0 <_strtod_l+0x520>
 80094de:	4264      	negs	r4, r4
 80094e0:	f014 020f 	ands.w	r2, r4, #15
 80094e4:	d00a      	beq.n	80094fc <_strtod_l+0x55c>
 80094e6:	4b12      	ldr	r3, [pc, #72]	@ (8009530 <_strtod_l+0x590>)
 80094e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094ec:	4650      	mov	r0, sl
 80094ee:	4659      	mov	r1, fp
 80094f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f4:	f7f7 f9c2 	bl	800087c <__aeabi_ddiv>
 80094f8:	4682      	mov	sl, r0
 80094fa:	468b      	mov	fp, r1
 80094fc:	1124      	asrs	r4, r4, #4
 80094fe:	d0df      	beq.n	80094c0 <_strtod_l+0x520>
 8009500:	2c1f      	cmp	r4, #31
 8009502:	dd1f      	ble.n	8009544 <_strtod_l+0x5a4>
 8009504:	2400      	movs	r4, #0
 8009506:	46a0      	mov	r8, r4
 8009508:	940b      	str	r4, [sp, #44]	@ 0x2c
 800950a:	46a1      	mov	r9, r4
 800950c:	9a05      	ldr	r2, [sp, #20]
 800950e:	2322      	movs	r3, #34	@ 0x22
 8009510:	f04f 0a00 	mov.w	sl, #0
 8009514:	f04f 0b00 	mov.w	fp, #0
 8009518:	6013      	str	r3, [r2, #0]
 800951a:	e76b      	b.n	80093f4 <_strtod_l+0x454>
 800951c:	0800af44 	.word	0x0800af44
 8009520:	0800b1f8 	.word	0x0800b1f8
 8009524:	0800af3c 	.word	0x0800af3c
 8009528:	0800afaf 	.word	0x0800afaf
 800952c:	0800afab 	.word	0x0800afab
 8009530:	0800b130 	.word	0x0800b130
 8009534:	0800b108 	.word	0x0800b108
 8009538:	7ff00000 	.word	0x7ff00000
 800953c:	7ca00000 	.word	0x7ca00000
 8009540:	7fefffff 	.word	0x7fefffff
 8009544:	f014 0310 	ands.w	r3, r4, #16
 8009548:	bf18      	it	ne
 800954a:	236a      	movne	r3, #106	@ 0x6a
 800954c:	4ea9      	ldr	r6, [pc, #676]	@ (80097f4 <_strtod_l+0x854>)
 800954e:	9308      	str	r3, [sp, #32]
 8009550:	4650      	mov	r0, sl
 8009552:	4659      	mov	r1, fp
 8009554:	2300      	movs	r3, #0
 8009556:	07e7      	lsls	r7, r4, #31
 8009558:	d504      	bpl.n	8009564 <_strtod_l+0x5c4>
 800955a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800955e:	f7f7 f863 	bl	8000628 <__aeabi_dmul>
 8009562:	2301      	movs	r3, #1
 8009564:	1064      	asrs	r4, r4, #1
 8009566:	f106 0608 	add.w	r6, r6, #8
 800956a:	d1f4      	bne.n	8009556 <_strtod_l+0x5b6>
 800956c:	b10b      	cbz	r3, 8009572 <_strtod_l+0x5d2>
 800956e:	4682      	mov	sl, r0
 8009570:	468b      	mov	fp, r1
 8009572:	9b08      	ldr	r3, [sp, #32]
 8009574:	b1b3      	cbz	r3, 80095a4 <_strtod_l+0x604>
 8009576:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800957a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800957e:	2b00      	cmp	r3, #0
 8009580:	4659      	mov	r1, fp
 8009582:	dd0f      	ble.n	80095a4 <_strtod_l+0x604>
 8009584:	2b1f      	cmp	r3, #31
 8009586:	dd56      	ble.n	8009636 <_strtod_l+0x696>
 8009588:	2b34      	cmp	r3, #52	@ 0x34
 800958a:	bfde      	ittt	le
 800958c:	f04f 33ff 	movle.w	r3, #4294967295
 8009590:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009594:	4093      	lslle	r3, r2
 8009596:	f04f 0a00 	mov.w	sl, #0
 800959a:	bfcc      	ite	gt
 800959c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80095a0:	ea03 0b01 	andle.w	fp, r3, r1
 80095a4:	2200      	movs	r2, #0
 80095a6:	2300      	movs	r3, #0
 80095a8:	4650      	mov	r0, sl
 80095aa:	4659      	mov	r1, fp
 80095ac:	f7f7 faa4 	bl	8000af8 <__aeabi_dcmpeq>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d1a7      	bne.n	8009504 <_strtod_l+0x564>
 80095b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80095ba:	9805      	ldr	r0, [sp, #20]
 80095bc:	462b      	mov	r3, r5
 80095be:	464a      	mov	r2, r9
 80095c0:	f7ff f8cc 	bl	800875c <__s2b>
 80095c4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80095c6:	2800      	cmp	r0, #0
 80095c8:	f43f af09 	beq.w	80093de <_strtod_l+0x43e>
 80095cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095d0:	2a00      	cmp	r2, #0
 80095d2:	eba3 0308 	sub.w	r3, r3, r8
 80095d6:	bfa8      	it	ge
 80095d8:	2300      	movge	r3, #0
 80095da:	9312      	str	r3, [sp, #72]	@ 0x48
 80095dc:	2400      	movs	r4, #0
 80095de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80095e2:	9316      	str	r3, [sp, #88]	@ 0x58
 80095e4:	46a0      	mov	r8, r4
 80095e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095e8:	9805      	ldr	r0, [sp, #20]
 80095ea:	6859      	ldr	r1, [r3, #4]
 80095ec:	f7ff f80e 	bl	800860c <_Balloc>
 80095f0:	4681      	mov	r9, r0
 80095f2:	2800      	cmp	r0, #0
 80095f4:	f43f aef7 	beq.w	80093e6 <_strtod_l+0x446>
 80095f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095fa:	691a      	ldr	r2, [r3, #16]
 80095fc:	3202      	adds	r2, #2
 80095fe:	f103 010c 	add.w	r1, r3, #12
 8009602:	0092      	lsls	r2, r2, #2
 8009604:	300c      	adds	r0, #12
 8009606:	f000 ff49 	bl	800a49c <memcpy>
 800960a:	ec4b ab10 	vmov	d0, sl, fp
 800960e:	9805      	ldr	r0, [sp, #20]
 8009610:	aa1c      	add	r2, sp, #112	@ 0x70
 8009612:	a91b      	add	r1, sp, #108	@ 0x6c
 8009614:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009618:	f7ff fbd4 	bl	8008dc4 <__d2b>
 800961c:	901a      	str	r0, [sp, #104]	@ 0x68
 800961e:	2800      	cmp	r0, #0
 8009620:	f43f aee1 	beq.w	80093e6 <_strtod_l+0x446>
 8009624:	9805      	ldr	r0, [sp, #20]
 8009626:	2101      	movs	r1, #1
 8009628:	f7ff f92e 	bl	8008888 <__i2b>
 800962c:	4680      	mov	r8, r0
 800962e:	b948      	cbnz	r0, 8009644 <_strtod_l+0x6a4>
 8009630:	f04f 0800 	mov.w	r8, #0
 8009634:	e6d7      	b.n	80093e6 <_strtod_l+0x446>
 8009636:	f04f 32ff 	mov.w	r2, #4294967295
 800963a:	fa02 f303 	lsl.w	r3, r2, r3
 800963e:	ea03 0a0a 	and.w	sl, r3, sl
 8009642:	e7af      	b.n	80095a4 <_strtod_l+0x604>
 8009644:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009646:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009648:	2d00      	cmp	r5, #0
 800964a:	bfab      	itete	ge
 800964c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800964e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009650:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009652:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009654:	bfac      	ite	ge
 8009656:	18ef      	addge	r7, r5, r3
 8009658:	1b5e      	sublt	r6, r3, r5
 800965a:	9b08      	ldr	r3, [sp, #32]
 800965c:	1aed      	subs	r5, r5, r3
 800965e:	4415      	add	r5, r2
 8009660:	4b65      	ldr	r3, [pc, #404]	@ (80097f8 <_strtod_l+0x858>)
 8009662:	3d01      	subs	r5, #1
 8009664:	429d      	cmp	r5, r3
 8009666:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800966a:	da50      	bge.n	800970e <_strtod_l+0x76e>
 800966c:	1b5b      	subs	r3, r3, r5
 800966e:	2b1f      	cmp	r3, #31
 8009670:	eba2 0203 	sub.w	r2, r2, r3
 8009674:	f04f 0101 	mov.w	r1, #1
 8009678:	dc3d      	bgt.n	80096f6 <_strtod_l+0x756>
 800967a:	fa01 f303 	lsl.w	r3, r1, r3
 800967e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009680:	2300      	movs	r3, #0
 8009682:	9310      	str	r3, [sp, #64]	@ 0x40
 8009684:	18bd      	adds	r5, r7, r2
 8009686:	9b08      	ldr	r3, [sp, #32]
 8009688:	42af      	cmp	r7, r5
 800968a:	4416      	add	r6, r2
 800968c:	441e      	add	r6, r3
 800968e:	463b      	mov	r3, r7
 8009690:	bfa8      	it	ge
 8009692:	462b      	movge	r3, r5
 8009694:	42b3      	cmp	r3, r6
 8009696:	bfa8      	it	ge
 8009698:	4633      	movge	r3, r6
 800969a:	2b00      	cmp	r3, #0
 800969c:	bfc2      	ittt	gt
 800969e:	1aed      	subgt	r5, r5, r3
 80096a0:	1af6      	subgt	r6, r6, r3
 80096a2:	1aff      	subgt	r7, r7, r3
 80096a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	dd16      	ble.n	80096d8 <_strtod_l+0x738>
 80096aa:	4641      	mov	r1, r8
 80096ac:	9805      	ldr	r0, [sp, #20]
 80096ae:	461a      	mov	r2, r3
 80096b0:	f7ff f9a2 	bl	80089f8 <__pow5mult>
 80096b4:	4680      	mov	r8, r0
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d0ba      	beq.n	8009630 <_strtod_l+0x690>
 80096ba:	4601      	mov	r1, r0
 80096bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80096be:	9805      	ldr	r0, [sp, #20]
 80096c0:	f7ff f8f8 	bl	80088b4 <__multiply>
 80096c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80096c6:	2800      	cmp	r0, #0
 80096c8:	f43f ae8d 	beq.w	80093e6 <_strtod_l+0x446>
 80096cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096ce:	9805      	ldr	r0, [sp, #20]
 80096d0:	f7fe ffdc 	bl	800868c <_Bfree>
 80096d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80096d8:	2d00      	cmp	r5, #0
 80096da:	dc1d      	bgt.n	8009718 <_strtod_l+0x778>
 80096dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096de:	2b00      	cmp	r3, #0
 80096e0:	dd23      	ble.n	800972a <_strtod_l+0x78a>
 80096e2:	4649      	mov	r1, r9
 80096e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80096e6:	9805      	ldr	r0, [sp, #20]
 80096e8:	f7ff f986 	bl	80089f8 <__pow5mult>
 80096ec:	4681      	mov	r9, r0
 80096ee:	b9e0      	cbnz	r0, 800972a <_strtod_l+0x78a>
 80096f0:	f04f 0900 	mov.w	r9, #0
 80096f4:	e677      	b.n	80093e6 <_strtod_l+0x446>
 80096f6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80096fa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80096fe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009702:	35e2      	adds	r5, #226	@ 0xe2
 8009704:	fa01 f305 	lsl.w	r3, r1, r5
 8009708:	9310      	str	r3, [sp, #64]	@ 0x40
 800970a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800970c:	e7ba      	b.n	8009684 <_strtod_l+0x6e4>
 800970e:	2300      	movs	r3, #0
 8009710:	9310      	str	r3, [sp, #64]	@ 0x40
 8009712:	2301      	movs	r3, #1
 8009714:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009716:	e7b5      	b.n	8009684 <_strtod_l+0x6e4>
 8009718:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800971a:	9805      	ldr	r0, [sp, #20]
 800971c:	462a      	mov	r2, r5
 800971e:	f7ff f9c5 	bl	8008aac <__lshift>
 8009722:	901a      	str	r0, [sp, #104]	@ 0x68
 8009724:	2800      	cmp	r0, #0
 8009726:	d1d9      	bne.n	80096dc <_strtod_l+0x73c>
 8009728:	e65d      	b.n	80093e6 <_strtod_l+0x446>
 800972a:	2e00      	cmp	r6, #0
 800972c:	dd07      	ble.n	800973e <_strtod_l+0x79e>
 800972e:	4649      	mov	r1, r9
 8009730:	9805      	ldr	r0, [sp, #20]
 8009732:	4632      	mov	r2, r6
 8009734:	f7ff f9ba 	bl	8008aac <__lshift>
 8009738:	4681      	mov	r9, r0
 800973a:	2800      	cmp	r0, #0
 800973c:	d0d8      	beq.n	80096f0 <_strtod_l+0x750>
 800973e:	2f00      	cmp	r7, #0
 8009740:	dd08      	ble.n	8009754 <_strtod_l+0x7b4>
 8009742:	4641      	mov	r1, r8
 8009744:	9805      	ldr	r0, [sp, #20]
 8009746:	463a      	mov	r2, r7
 8009748:	f7ff f9b0 	bl	8008aac <__lshift>
 800974c:	4680      	mov	r8, r0
 800974e:	2800      	cmp	r0, #0
 8009750:	f43f ae49 	beq.w	80093e6 <_strtod_l+0x446>
 8009754:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009756:	9805      	ldr	r0, [sp, #20]
 8009758:	464a      	mov	r2, r9
 800975a:	f7ff fa2f 	bl	8008bbc <__mdiff>
 800975e:	4604      	mov	r4, r0
 8009760:	2800      	cmp	r0, #0
 8009762:	f43f ae40 	beq.w	80093e6 <_strtod_l+0x446>
 8009766:	68c3      	ldr	r3, [r0, #12]
 8009768:	930f      	str	r3, [sp, #60]	@ 0x3c
 800976a:	2300      	movs	r3, #0
 800976c:	60c3      	str	r3, [r0, #12]
 800976e:	4641      	mov	r1, r8
 8009770:	f7ff fa08 	bl	8008b84 <__mcmp>
 8009774:	2800      	cmp	r0, #0
 8009776:	da45      	bge.n	8009804 <_strtod_l+0x864>
 8009778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800977a:	ea53 030a 	orrs.w	r3, r3, sl
 800977e:	d16b      	bne.n	8009858 <_strtod_l+0x8b8>
 8009780:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009784:	2b00      	cmp	r3, #0
 8009786:	d167      	bne.n	8009858 <_strtod_l+0x8b8>
 8009788:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800978c:	0d1b      	lsrs	r3, r3, #20
 800978e:	051b      	lsls	r3, r3, #20
 8009790:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009794:	d960      	bls.n	8009858 <_strtod_l+0x8b8>
 8009796:	6963      	ldr	r3, [r4, #20]
 8009798:	b913      	cbnz	r3, 80097a0 <_strtod_l+0x800>
 800979a:	6923      	ldr	r3, [r4, #16]
 800979c:	2b01      	cmp	r3, #1
 800979e:	dd5b      	ble.n	8009858 <_strtod_l+0x8b8>
 80097a0:	4621      	mov	r1, r4
 80097a2:	2201      	movs	r2, #1
 80097a4:	9805      	ldr	r0, [sp, #20]
 80097a6:	f7ff f981 	bl	8008aac <__lshift>
 80097aa:	4641      	mov	r1, r8
 80097ac:	4604      	mov	r4, r0
 80097ae:	f7ff f9e9 	bl	8008b84 <__mcmp>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	dd50      	ble.n	8009858 <_strtod_l+0x8b8>
 80097b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80097ba:	9a08      	ldr	r2, [sp, #32]
 80097bc:	0d1b      	lsrs	r3, r3, #20
 80097be:	051b      	lsls	r3, r3, #20
 80097c0:	2a00      	cmp	r2, #0
 80097c2:	d06a      	beq.n	800989a <_strtod_l+0x8fa>
 80097c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80097c8:	d867      	bhi.n	800989a <_strtod_l+0x8fa>
 80097ca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80097ce:	f67f ae9d 	bls.w	800950c <_strtod_l+0x56c>
 80097d2:	4b0a      	ldr	r3, [pc, #40]	@ (80097fc <_strtod_l+0x85c>)
 80097d4:	4650      	mov	r0, sl
 80097d6:	4659      	mov	r1, fp
 80097d8:	2200      	movs	r2, #0
 80097da:	f7f6 ff25 	bl	8000628 <__aeabi_dmul>
 80097de:	4b08      	ldr	r3, [pc, #32]	@ (8009800 <_strtod_l+0x860>)
 80097e0:	400b      	ands	r3, r1
 80097e2:	4682      	mov	sl, r0
 80097e4:	468b      	mov	fp, r1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f47f ae08 	bne.w	80093fc <_strtod_l+0x45c>
 80097ec:	9a05      	ldr	r2, [sp, #20]
 80097ee:	2322      	movs	r3, #34	@ 0x22
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	e603      	b.n	80093fc <_strtod_l+0x45c>
 80097f4:	0800b220 	.word	0x0800b220
 80097f8:	fffffc02 	.word	0xfffffc02
 80097fc:	39500000 	.word	0x39500000
 8009800:	7ff00000 	.word	0x7ff00000
 8009804:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009808:	d165      	bne.n	80098d6 <_strtod_l+0x936>
 800980a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800980c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009810:	b35a      	cbz	r2, 800986a <_strtod_l+0x8ca>
 8009812:	4a9f      	ldr	r2, [pc, #636]	@ (8009a90 <_strtod_l+0xaf0>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d12b      	bne.n	8009870 <_strtod_l+0x8d0>
 8009818:	9b08      	ldr	r3, [sp, #32]
 800981a:	4651      	mov	r1, sl
 800981c:	b303      	cbz	r3, 8009860 <_strtod_l+0x8c0>
 800981e:	4b9d      	ldr	r3, [pc, #628]	@ (8009a94 <_strtod_l+0xaf4>)
 8009820:	465a      	mov	r2, fp
 8009822:	4013      	ands	r3, r2
 8009824:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009828:	f04f 32ff 	mov.w	r2, #4294967295
 800982c:	d81b      	bhi.n	8009866 <_strtod_l+0x8c6>
 800982e:	0d1b      	lsrs	r3, r3, #20
 8009830:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009834:	fa02 f303 	lsl.w	r3, r2, r3
 8009838:	4299      	cmp	r1, r3
 800983a:	d119      	bne.n	8009870 <_strtod_l+0x8d0>
 800983c:	4b96      	ldr	r3, [pc, #600]	@ (8009a98 <_strtod_l+0xaf8>)
 800983e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009840:	429a      	cmp	r2, r3
 8009842:	d102      	bne.n	800984a <_strtod_l+0x8aa>
 8009844:	3101      	adds	r1, #1
 8009846:	f43f adce 	beq.w	80093e6 <_strtod_l+0x446>
 800984a:	4b92      	ldr	r3, [pc, #584]	@ (8009a94 <_strtod_l+0xaf4>)
 800984c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800984e:	401a      	ands	r2, r3
 8009850:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009854:	f04f 0a00 	mov.w	sl, #0
 8009858:	9b08      	ldr	r3, [sp, #32]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1b9      	bne.n	80097d2 <_strtod_l+0x832>
 800985e:	e5cd      	b.n	80093fc <_strtod_l+0x45c>
 8009860:	f04f 33ff 	mov.w	r3, #4294967295
 8009864:	e7e8      	b.n	8009838 <_strtod_l+0x898>
 8009866:	4613      	mov	r3, r2
 8009868:	e7e6      	b.n	8009838 <_strtod_l+0x898>
 800986a:	ea53 030a 	orrs.w	r3, r3, sl
 800986e:	d0a2      	beq.n	80097b6 <_strtod_l+0x816>
 8009870:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009872:	b1db      	cbz	r3, 80098ac <_strtod_l+0x90c>
 8009874:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009876:	4213      	tst	r3, r2
 8009878:	d0ee      	beq.n	8009858 <_strtod_l+0x8b8>
 800987a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800987c:	9a08      	ldr	r2, [sp, #32]
 800987e:	4650      	mov	r0, sl
 8009880:	4659      	mov	r1, fp
 8009882:	b1bb      	cbz	r3, 80098b4 <_strtod_l+0x914>
 8009884:	f7ff fb6c 	bl	8008f60 <sulp>
 8009888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800988c:	ec53 2b10 	vmov	r2, r3, d0
 8009890:	f7f6 fd14 	bl	80002bc <__adddf3>
 8009894:	4682      	mov	sl, r0
 8009896:	468b      	mov	fp, r1
 8009898:	e7de      	b.n	8009858 <_strtod_l+0x8b8>
 800989a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800989e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80098a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80098a6:	f04f 3aff 	mov.w	sl, #4294967295
 80098aa:	e7d5      	b.n	8009858 <_strtod_l+0x8b8>
 80098ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80098ae:	ea13 0f0a 	tst.w	r3, sl
 80098b2:	e7e1      	b.n	8009878 <_strtod_l+0x8d8>
 80098b4:	f7ff fb54 	bl	8008f60 <sulp>
 80098b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098bc:	ec53 2b10 	vmov	r2, r3, d0
 80098c0:	f7f6 fcfa 	bl	80002b8 <__aeabi_dsub>
 80098c4:	2200      	movs	r2, #0
 80098c6:	2300      	movs	r3, #0
 80098c8:	4682      	mov	sl, r0
 80098ca:	468b      	mov	fp, r1
 80098cc:	f7f7 f914 	bl	8000af8 <__aeabi_dcmpeq>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d0c1      	beq.n	8009858 <_strtod_l+0x8b8>
 80098d4:	e61a      	b.n	800950c <_strtod_l+0x56c>
 80098d6:	4641      	mov	r1, r8
 80098d8:	4620      	mov	r0, r4
 80098da:	f7ff facb 	bl	8008e74 <__ratio>
 80098de:	ec57 6b10 	vmov	r6, r7, d0
 80098e2:	2200      	movs	r2, #0
 80098e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80098e8:	4630      	mov	r0, r6
 80098ea:	4639      	mov	r1, r7
 80098ec:	f7f7 f918 	bl	8000b20 <__aeabi_dcmple>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d06f      	beq.n	80099d4 <_strtod_l+0xa34>
 80098f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d17a      	bne.n	80099f0 <_strtod_l+0xa50>
 80098fa:	f1ba 0f00 	cmp.w	sl, #0
 80098fe:	d158      	bne.n	80099b2 <_strtod_l+0xa12>
 8009900:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009902:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009906:	2b00      	cmp	r3, #0
 8009908:	d15a      	bne.n	80099c0 <_strtod_l+0xa20>
 800990a:	4b64      	ldr	r3, [pc, #400]	@ (8009a9c <_strtod_l+0xafc>)
 800990c:	2200      	movs	r2, #0
 800990e:	4630      	mov	r0, r6
 8009910:	4639      	mov	r1, r7
 8009912:	f7f7 f8fb 	bl	8000b0c <__aeabi_dcmplt>
 8009916:	2800      	cmp	r0, #0
 8009918:	d159      	bne.n	80099ce <_strtod_l+0xa2e>
 800991a:	4630      	mov	r0, r6
 800991c:	4639      	mov	r1, r7
 800991e:	4b60      	ldr	r3, [pc, #384]	@ (8009aa0 <_strtod_l+0xb00>)
 8009920:	2200      	movs	r2, #0
 8009922:	f7f6 fe81 	bl	8000628 <__aeabi_dmul>
 8009926:	4606      	mov	r6, r0
 8009928:	460f      	mov	r7, r1
 800992a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800992e:	9606      	str	r6, [sp, #24]
 8009930:	9307      	str	r3, [sp, #28]
 8009932:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009936:	4d57      	ldr	r5, [pc, #348]	@ (8009a94 <_strtod_l+0xaf4>)
 8009938:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800993c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800993e:	401d      	ands	r5, r3
 8009940:	4b58      	ldr	r3, [pc, #352]	@ (8009aa4 <_strtod_l+0xb04>)
 8009942:	429d      	cmp	r5, r3
 8009944:	f040 80b2 	bne.w	8009aac <_strtod_l+0xb0c>
 8009948:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800994a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800994e:	ec4b ab10 	vmov	d0, sl, fp
 8009952:	f7ff f9c7 	bl	8008ce4 <__ulp>
 8009956:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800995a:	ec51 0b10 	vmov	r0, r1, d0
 800995e:	f7f6 fe63 	bl	8000628 <__aeabi_dmul>
 8009962:	4652      	mov	r2, sl
 8009964:	465b      	mov	r3, fp
 8009966:	f7f6 fca9 	bl	80002bc <__adddf3>
 800996a:	460b      	mov	r3, r1
 800996c:	4949      	ldr	r1, [pc, #292]	@ (8009a94 <_strtod_l+0xaf4>)
 800996e:	4a4e      	ldr	r2, [pc, #312]	@ (8009aa8 <_strtod_l+0xb08>)
 8009970:	4019      	ands	r1, r3
 8009972:	4291      	cmp	r1, r2
 8009974:	4682      	mov	sl, r0
 8009976:	d942      	bls.n	80099fe <_strtod_l+0xa5e>
 8009978:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800997a:	4b47      	ldr	r3, [pc, #284]	@ (8009a98 <_strtod_l+0xaf8>)
 800997c:	429a      	cmp	r2, r3
 800997e:	d103      	bne.n	8009988 <_strtod_l+0x9e8>
 8009980:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009982:	3301      	adds	r3, #1
 8009984:	f43f ad2f 	beq.w	80093e6 <_strtod_l+0x446>
 8009988:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009a98 <_strtod_l+0xaf8>
 800998c:	f04f 3aff 	mov.w	sl, #4294967295
 8009990:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009992:	9805      	ldr	r0, [sp, #20]
 8009994:	f7fe fe7a 	bl	800868c <_Bfree>
 8009998:	9805      	ldr	r0, [sp, #20]
 800999a:	4649      	mov	r1, r9
 800999c:	f7fe fe76 	bl	800868c <_Bfree>
 80099a0:	9805      	ldr	r0, [sp, #20]
 80099a2:	4641      	mov	r1, r8
 80099a4:	f7fe fe72 	bl	800868c <_Bfree>
 80099a8:	9805      	ldr	r0, [sp, #20]
 80099aa:	4621      	mov	r1, r4
 80099ac:	f7fe fe6e 	bl	800868c <_Bfree>
 80099b0:	e619      	b.n	80095e6 <_strtod_l+0x646>
 80099b2:	f1ba 0f01 	cmp.w	sl, #1
 80099b6:	d103      	bne.n	80099c0 <_strtod_l+0xa20>
 80099b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f43f ada6 	beq.w	800950c <_strtod_l+0x56c>
 80099c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009a70 <_strtod_l+0xad0>
 80099c4:	4f35      	ldr	r7, [pc, #212]	@ (8009a9c <_strtod_l+0xafc>)
 80099c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80099ca:	2600      	movs	r6, #0
 80099cc:	e7b1      	b.n	8009932 <_strtod_l+0x992>
 80099ce:	4f34      	ldr	r7, [pc, #208]	@ (8009aa0 <_strtod_l+0xb00>)
 80099d0:	2600      	movs	r6, #0
 80099d2:	e7aa      	b.n	800992a <_strtod_l+0x98a>
 80099d4:	4b32      	ldr	r3, [pc, #200]	@ (8009aa0 <_strtod_l+0xb00>)
 80099d6:	4630      	mov	r0, r6
 80099d8:	4639      	mov	r1, r7
 80099da:	2200      	movs	r2, #0
 80099dc:	f7f6 fe24 	bl	8000628 <__aeabi_dmul>
 80099e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099e2:	4606      	mov	r6, r0
 80099e4:	460f      	mov	r7, r1
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d09f      	beq.n	800992a <_strtod_l+0x98a>
 80099ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80099ee:	e7a0      	b.n	8009932 <_strtod_l+0x992>
 80099f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009a78 <_strtod_l+0xad8>
 80099f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80099f8:	ec57 6b17 	vmov	r6, r7, d7
 80099fc:	e799      	b.n	8009932 <_strtod_l+0x992>
 80099fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009a02:	9b08      	ldr	r3, [sp, #32]
 8009a04:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1c1      	bne.n	8009990 <_strtod_l+0x9f0>
 8009a0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a10:	0d1b      	lsrs	r3, r3, #20
 8009a12:	051b      	lsls	r3, r3, #20
 8009a14:	429d      	cmp	r5, r3
 8009a16:	d1bb      	bne.n	8009990 <_strtod_l+0x9f0>
 8009a18:	4630      	mov	r0, r6
 8009a1a:	4639      	mov	r1, r7
 8009a1c:	f7f7 f964 	bl	8000ce8 <__aeabi_d2lz>
 8009a20:	f7f6 fdd4 	bl	80005cc <__aeabi_l2d>
 8009a24:	4602      	mov	r2, r0
 8009a26:	460b      	mov	r3, r1
 8009a28:	4630      	mov	r0, r6
 8009a2a:	4639      	mov	r1, r7
 8009a2c:	f7f6 fc44 	bl	80002b8 <__aeabi_dsub>
 8009a30:	460b      	mov	r3, r1
 8009a32:	4602      	mov	r2, r0
 8009a34:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009a38:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009a3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a3e:	ea46 060a 	orr.w	r6, r6, sl
 8009a42:	431e      	orrs	r6, r3
 8009a44:	d06f      	beq.n	8009b26 <_strtod_l+0xb86>
 8009a46:	a30e      	add	r3, pc, #56	@ (adr r3, 8009a80 <_strtod_l+0xae0>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	f7f7 f85e 	bl	8000b0c <__aeabi_dcmplt>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	f47f acd3 	bne.w	80093fc <_strtod_l+0x45c>
 8009a56:	a30c      	add	r3, pc, #48	@ (adr r3, 8009a88 <_strtod_l+0xae8>)
 8009a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a60:	f7f7 f872 	bl	8000b48 <__aeabi_dcmpgt>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d093      	beq.n	8009990 <_strtod_l+0x9f0>
 8009a68:	e4c8      	b.n	80093fc <_strtod_l+0x45c>
 8009a6a:	bf00      	nop
 8009a6c:	f3af 8000 	nop.w
 8009a70:	00000000 	.word	0x00000000
 8009a74:	bff00000 	.word	0xbff00000
 8009a78:	00000000 	.word	0x00000000
 8009a7c:	3ff00000 	.word	0x3ff00000
 8009a80:	94a03595 	.word	0x94a03595
 8009a84:	3fdfffff 	.word	0x3fdfffff
 8009a88:	35afe535 	.word	0x35afe535
 8009a8c:	3fe00000 	.word	0x3fe00000
 8009a90:	000fffff 	.word	0x000fffff
 8009a94:	7ff00000 	.word	0x7ff00000
 8009a98:	7fefffff 	.word	0x7fefffff
 8009a9c:	3ff00000 	.word	0x3ff00000
 8009aa0:	3fe00000 	.word	0x3fe00000
 8009aa4:	7fe00000 	.word	0x7fe00000
 8009aa8:	7c9fffff 	.word	0x7c9fffff
 8009aac:	9b08      	ldr	r3, [sp, #32]
 8009aae:	b323      	cbz	r3, 8009afa <_strtod_l+0xb5a>
 8009ab0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009ab4:	d821      	bhi.n	8009afa <_strtod_l+0xb5a>
 8009ab6:	a328      	add	r3, pc, #160	@ (adr r3, 8009b58 <_strtod_l+0xbb8>)
 8009ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abc:	4630      	mov	r0, r6
 8009abe:	4639      	mov	r1, r7
 8009ac0:	f7f7 f82e 	bl	8000b20 <__aeabi_dcmple>
 8009ac4:	b1a0      	cbz	r0, 8009af0 <_strtod_l+0xb50>
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f7f7 f885 	bl	8000bd8 <__aeabi_d2uiz>
 8009ace:	2801      	cmp	r0, #1
 8009ad0:	bf38      	it	cc
 8009ad2:	2001      	movcc	r0, #1
 8009ad4:	f7f6 fd2e 	bl	8000534 <__aeabi_ui2d>
 8009ad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ada:	4606      	mov	r6, r0
 8009adc:	460f      	mov	r7, r1
 8009ade:	b9fb      	cbnz	r3, 8009b20 <_strtod_l+0xb80>
 8009ae0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ae4:	9014      	str	r0, [sp, #80]	@ 0x50
 8009ae6:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ae8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009aec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009af0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009af2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009af6:	1b5b      	subs	r3, r3, r5
 8009af8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009afa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009afe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009b02:	f7ff f8ef 	bl	8008ce4 <__ulp>
 8009b06:	4650      	mov	r0, sl
 8009b08:	ec53 2b10 	vmov	r2, r3, d0
 8009b0c:	4659      	mov	r1, fp
 8009b0e:	f7f6 fd8b 	bl	8000628 <__aeabi_dmul>
 8009b12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009b16:	f7f6 fbd1 	bl	80002bc <__adddf3>
 8009b1a:	4682      	mov	sl, r0
 8009b1c:	468b      	mov	fp, r1
 8009b1e:	e770      	b.n	8009a02 <_strtod_l+0xa62>
 8009b20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009b24:	e7e0      	b.n	8009ae8 <_strtod_l+0xb48>
 8009b26:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b60 <_strtod_l+0xbc0>)
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	f7f6 ffee 	bl	8000b0c <__aeabi_dcmplt>
 8009b30:	e798      	b.n	8009a64 <_strtod_l+0xac4>
 8009b32:	2300      	movs	r3, #0
 8009b34:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b36:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009b38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b3a:	6013      	str	r3, [r2, #0]
 8009b3c:	f7ff ba6d 	b.w	800901a <_strtod_l+0x7a>
 8009b40:	2a65      	cmp	r2, #101	@ 0x65
 8009b42:	f43f ab68 	beq.w	8009216 <_strtod_l+0x276>
 8009b46:	2a45      	cmp	r2, #69	@ 0x45
 8009b48:	f43f ab65 	beq.w	8009216 <_strtod_l+0x276>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	f7ff bba0 	b.w	8009292 <_strtod_l+0x2f2>
 8009b52:	bf00      	nop
 8009b54:	f3af 8000 	nop.w
 8009b58:	ffc00000 	.word	0xffc00000
 8009b5c:	41dfffff 	.word	0x41dfffff
 8009b60:	94a03595 	.word	0x94a03595
 8009b64:	3fcfffff 	.word	0x3fcfffff

08009b68 <_strtod_r>:
 8009b68:	4b01      	ldr	r3, [pc, #4]	@ (8009b70 <_strtod_r+0x8>)
 8009b6a:	f7ff ba19 	b.w	8008fa0 <_strtod_l>
 8009b6e:	bf00      	nop
 8009b70:	20040110 	.word	0x20040110

08009b74 <_strtol_l.isra.0>:
 8009b74:	2b24      	cmp	r3, #36	@ 0x24
 8009b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b7a:	4686      	mov	lr, r0
 8009b7c:	4690      	mov	r8, r2
 8009b7e:	d801      	bhi.n	8009b84 <_strtol_l.isra.0+0x10>
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d106      	bne.n	8009b92 <_strtol_l.isra.0+0x1e>
 8009b84:	f7fd fe4e 	bl	8007824 <__errno>
 8009b88:	2316      	movs	r3, #22
 8009b8a:	6003      	str	r3, [r0, #0]
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b92:	4834      	ldr	r0, [pc, #208]	@ (8009c64 <_strtol_l.isra.0+0xf0>)
 8009b94:	460d      	mov	r5, r1
 8009b96:	462a      	mov	r2, r5
 8009b98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b9c:	5d06      	ldrb	r6, [r0, r4]
 8009b9e:	f016 0608 	ands.w	r6, r6, #8
 8009ba2:	d1f8      	bne.n	8009b96 <_strtol_l.isra.0+0x22>
 8009ba4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009ba6:	d110      	bne.n	8009bca <_strtol_l.isra.0+0x56>
 8009ba8:	782c      	ldrb	r4, [r5, #0]
 8009baa:	2601      	movs	r6, #1
 8009bac:	1c95      	adds	r5, r2, #2
 8009bae:	f033 0210 	bics.w	r2, r3, #16
 8009bb2:	d115      	bne.n	8009be0 <_strtol_l.isra.0+0x6c>
 8009bb4:	2c30      	cmp	r4, #48	@ 0x30
 8009bb6:	d10d      	bne.n	8009bd4 <_strtol_l.isra.0+0x60>
 8009bb8:	782a      	ldrb	r2, [r5, #0]
 8009bba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009bbe:	2a58      	cmp	r2, #88	@ 0x58
 8009bc0:	d108      	bne.n	8009bd4 <_strtol_l.isra.0+0x60>
 8009bc2:	786c      	ldrb	r4, [r5, #1]
 8009bc4:	3502      	adds	r5, #2
 8009bc6:	2310      	movs	r3, #16
 8009bc8:	e00a      	b.n	8009be0 <_strtol_l.isra.0+0x6c>
 8009bca:	2c2b      	cmp	r4, #43	@ 0x2b
 8009bcc:	bf04      	itt	eq
 8009bce:	782c      	ldrbeq	r4, [r5, #0]
 8009bd0:	1c95      	addeq	r5, r2, #2
 8009bd2:	e7ec      	b.n	8009bae <_strtol_l.isra.0+0x3a>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1f6      	bne.n	8009bc6 <_strtol_l.isra.0+0x52>
 8009bd8:	2c30      	cmp	r4, #48	@ 0x30
 8009bda:	bf14      	ite	ne
 8009bdc:	230a      	movne	r3, #10
 8009bde:	2308      	moveq	r3, #8
 8009be0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009be4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009be8:	2200      	movs	r2, #0
 8009bea:	fbbc f9f3 	udiv	r9, ip, r3
 8009bee:	4610      	mov	r0, r2
 8009bf0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009bf4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009bf8:	2f09      	cmp	r7, #9
 8009bfa:	d80f      	bhi.n	8009c1c <_strtol_l.isra.0+0xa8>
 8009bfc:	463c      	mov	r4, r7
 8009bfe:	42a3      	cmp	r3, r4
 8009c00:	dd1b      	ble.n	8009c3a <_strtol_l.isra.0+0xc6>
 8009c02:	1c57      	adds	r7, r2, #1
 8009c04:	d007      	beq.n	8009c16 <_strtol_l.isra.0+0xa2>
 8009c06:	4581      	cmp	r9, r0
 8009c08:	d314      	bcc.n	8009c34 <_strtol_l.isra.0+0xc0>
 8009c0a:	d101      	bne.n	8009c10 <_strtol_l.isra.0+0x9c>
 8009c0c:	45a2      	cmp	sl, r4
 8009c0e:	db11      	blt.n	8009c34 <_strtol_l.isra.0+0xc0>
 8009c10:	fb00 4003 	mla	r0, r0, r3, r4
 8009c14:	2201      	movs	r2, #1
 8009c16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c1a:	e7eb      	b.n	8009bf4 <_strtol_l.isra.0+0x80>
 8009c1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009c20:	2f19      	cmp	r7, #25
 8009c22:	d801      	bhi.n	8009c28 <_strtol_l.isra.0+0xb4>
 8009c24:	3c37      	subs	r4, #55	@ 0x37
 8009c26:	e7ea      	b.n	8009bfe <_strtol_l.isra.0+0x8a>
 8009c28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009c2c:	2f19      	cmp	r7, #25
 8009c2e:	d804      	bhi.n	8009c3a <_strtol_l.isra.0+0xc6>
 8009c30:	3c57      	subs	r4, #87	@ 0x57
 8009c32:	e7e4      	b.n	8009bfe <_strtol_l.isra.0+0x8a>
 8009c34:	f04f 32ff 	mov.w	r2, #4294967295
 8009c38:	e7ed      	b.n	8009c16 <_strtol_l.isra.0+0xa2>
 8009c3a:	1c53      	adds	r3, r2, #1
 8009c3c:	d108      	bne.n	8009c50 <_strtol_l.isra.0+0xdc>
 8009c3e:	2322      	movs	r3, #34	@ 0x22
 8009c40:	f8ce 3000 	str.w	r3, [lr]
 8009c44:	4660      	mov	r0, ip
 8009c46:	f1b8 0f00 	cmp.w	r8, #0
 8009c4a:	d0a0      	beq.n	8009b8e <_strtol_l.isra.0+0x1a>
 8009c4c:	1e69      	subs	r1, r5, #1
 8009c4e:	e006      	b.n	8009c5e <_strtol_l.isra.0+0xea>
 8009c50:	b106      	cbz	r6, 8009c54 <_strtol_l.isra.0+0xe0>
 8009c52:	4240      	negs	r0, r0
 8009c54:	f1b8 0f00 	cmp.w	r8, #0
 8009c58:	d099      	beq.n	8009b8e <_strtol_l.isra.0+0x1a>
 8009c5a:	2a00      	cmp	r2, #0
 8009c5c:	d1f6      	bne.n	8009c4c <_strtol_l.isra.0+0xd8>
 8009c5e:	f8c8 1000 	str.w	r1, [r8]
 8009c62:	e794      	b.n	8009b8e <_strtol_l.isra.0+0x1a>
 8009c64:	0800b249 	.word	0x0800b249

08009c68 <_strtol_r>:
 8009c68:	f7ff bf84 	b.w	8009b74 <_strtol_l.isra.0>

08009c6c <__ssputs_r>:
 8009c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c70:	688e      	ldr	r6, [r1, #8]
 8009c72:	461f      	mov	r7, r3
 8009c74:	42be      	cmp	r6, r7
 8009c76:	680b      	ldr	r3, [r1, #0]
 8009c78:	4682      	mov	sl, r0
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	4690      	mov	r8, r2
 8009c7e:	d82d      	bhi.n	8009cdc <__ssputs_r+0x70>
 8009c80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c88:	d026      	beq.n	8009cd8 <__ssputs_r+0x6c>
 8009c8a:	6965      	ldr	r5, [r4, #20]
 8009c8c:	6909      	ldr	r1, [r1, #16]
 8009c8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c92:	eba3 0901 	sub.w	r9, r3, r1
 8009c96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c9a:	1c7b      	adds	r3, r7, #1
 8009c9c:	444b      	add	r3, r9
 8009c9e:	106d      	asrs	r5, r5, #1
 8009ca0:	429d      	cmp	r5, r3
 8009ca2:	bf38      	it	cc
 8009ca4:	461d      	movcc	r5, r3
 8009ca6:	0553      	lsls	r3, r2, #21
 8009ca8:	d527      	bpl.n	8009cfa <__ssputs_r+0x8e>
 8009caa:	4629      	mov	r1, r5
 8009cac:	f7fc fcc2 	bl	8006634 <_malloc_r>
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	b360      	cbz	r0, 8009d0e <__ssputs_r+0xa2>
 8009cb4:	6921      	ldr	r1, [r4, #16]
 8009cb6:	464a      	mov	r2, r9
 8009cb8:	f000 fbf0 	bl	800a49c <memcpy>
 8009cbc:	89a3      	ldrh	r3, [r4, #12]
 8009cbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cc6:	81a3      	strh	r3, [r4, #12]
 8009cc8:	6126      	str	r6, [r4, #16]
 8009cca:	6165      	str	r5, [r4, #20]
 8009ccc:	444e      	add	r6, r9
 8009cce:	eba5 0509 	sub.w	r5, r5, r9
 8009cd2:	6026      	str	r6, [r4, #0]
 8009cd4:	60a5      	str	r5, [r4, #8]
 8009cd6:	463e      	mov	r6, r7
 8009cd8:	42be      	cmp	r6, r7
 8009cda:	d900      	bls.n	8009cde <__ssputs_r+0x72>
 8009cdc:	463e      	mov	r6, r7
 8009cde:	6820      	ldr	r0, [r4, #0]
 8009ce0:	4632      	mov	r2, r6
 8009ce2:	4641      	mov	r1, r8
 8009ce4:	f000 fbae 	bl	800a444 <memmove>
 8009ce8:	68a3      	ldr	r3, [r4, #8]
 8009cea:	1b9b      	subs	r3, r3, r6
 8009cec:	60a3      	str	r3, [r4, #8]
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	4433      	add	r3, r6
 8009cf2:	6023      	str	r3, [r4, #0]
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cfa:	462a      	mov	r2, r5
 8009cfc:	f000 ff49 	bl	800ab92 <_realloc_r>
 8009d00:	4606      	mov	r6, r0
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d1e0      	bne.n	8009cc8 <__ssputs_r+0x5c>
 8009d06:	6921      	ldr	r1, [r4, #16]
 8009d08:	4650      	mov	r0, sl
 8009d0a:	f7fe fc35 	bl	8008578 <_free_r>
 8009d0e:	230c      	movs	r3, #12
 8009d10:	f8ca 3000 	str.w	r3, [sl]
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d1a:	81a3      	strh	r3, [r4, #12]
 8009d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d20:	e7e9      	b.n	8009cf6 <__ssputs_r+0x8a>
	...

08009d24 <_svfiprintf_r>:
 8009d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d28:	4698      	mov	r8, r3
 8009d2a:	898b      	ldrh	r3, [r1, #12]
 8009d2c:	061b      	lsls	r3, r3, #24
 8009d2e:	b09d      	sub	sp, #116	@ 0x74
 8009d30:	4607      	mov	r7, r0
 8009d32:	460d      	mov	r5, r1
 8009d34:	4614      	mov	r4, r2
 8009d36:	d510      	bpl.n	8009d5a <_svfiprintf_r+0x36>
 8009d38:	690b      	ldr	r3, [r1, #16]
 8009d3a:	b973      	cbnz	r3, 8009d5a <_svfiprintf_r+0x36>
 8009d3c:	2140      	movs	r1, #64	@ 0x40
 8009d3e:	f7fc fc79 	bl	8006634 <_malloc_r>
 8009d42:	6028      	str	r0, [r5, #0]
 8009d44:	6128      	str	r0, [r5, #16]
 8009d46:	b930      	cbnz	r0, 8009d56 <_svfiprintf_r+0x32>
 8009d48:	230c      	movs	r3, #12
 8009d4a:	603b      	str	r3, [r7, #0]
 8009d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d50:	b01d      	add	sp, #116	@ 0x74
 8009d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d56:	2340      	movs	r3, #64	@ 0x40
 8009d58:	616b      	str	r3, [r5, #20]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d5e:	2320      	movs	r3, #32
 8009d60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d68:	2330      	movs	r3, #48	@ 0x30
 8009d6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f08 <_svfiprintf_r+0x1e4>
 8009d6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d72:	f04f 0901 	mov.w	r9, #1
 8009d76:	4623      	mov	r3, r4
 8009d78:	469a      	mov	sl, r3
 8009d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d7e:	b10a      	cbz	r2, 8009d84 <_svfiprintf_r+0x60>
 8009d80:	2a25      	cmp	r2, #37	@ 0x25
 8009d82:	d1f9      	bne.n	8009d78 <_svfiprintf_r+0x54>
 8009d84:	ebba 0b04 	subs.w	fp, sl, r4
 8009d88:	d00b      	beq.n	8009da2 <_svfiprintf_r+0x7e>
 8009d8a:	465b      	mov	r3, fp
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	4629      	mov	r1, r5
 8009d90:	4638      	mov	r0, r7
 8009d92:	f7ff ff6b 	bl	8009c6c <__ssputs_r>
 8009d96:	3001      	adds	r0, #1
 8009d98:	f000 80a7 	beq.w	8009eea <_svfiprintf_r+0x1c6>
 8009d9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d9e:	445a      	add	r2, fp
 8009da0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009da2:	f89a 3000 	ldrb.w	r3, [sl]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 809f 	beq.w	8009eea <_svfiprintf_r+0x1c6>
 8009dac:	2300      	movs	r3, #0
 8009dae:	f04f 32ff 	mov.w	r2, #4294967295
 8009db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009db6:	f10a 0a01 	add.w	sl, sl, #1
 8009dba:	9304      	str	r3, [sp, #16]
 8009dbc:	9307      	str	r3, [sp, #28]
 8009dbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009dc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009dc4:	4654      	mov	r4, sl
 8009dc6:	2205      	movs	r2, #5
 8009dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dcc:	484e      	ldr	r0, [pc, #312]	@ (8009f08 <_svfiprintf_r+0x1e4>)
 8009dce:	f7f6 fa17 	bl	8000200 <memchr>
 8009dd2:	9a04      	ldr	r2, [sp, #16]
 8009dd4:	b9d8      	cbnz	r0, 8009e0e <_svfiprintf_r+0xea>
 8009dd6:	06d0      	lsls	r0, r2, #27
 8009dd8:	bf44      	itt	mi
 8009dda:	2320      	movmi	r3, #32
 8009ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009de0:	0711      	lsls	r1, r2, #28
 8009de2:	bf44      	itt	mi
 8009de4:	232b      	movmi	r3, #43	@ 0x2b
 8009de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dea:	f89a 3000 	ldrb.w	r3, [sl]
 8009dee:	2b2a      	cmp	r3, #42	@ 0x2a
 8009df0:	d015      	beq.n	8009e1e <_svfiprintf_r+0xfa>
 8009df2:	9a07      	ldr	r2, [sp, #28]
 8009df4:	4654      	mov	r4, sl
 8009df6:	2000      	movs	r0, #0
 8009df8:	f04f 0c0a 	mov.w	ip, #10
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e02:	3b30      	subs	r3, #48	@ 0x30
 8009e04:	2b09      	cmp	r3, #9
 8009e06:	d94b      	bls.n	8009ea0 <_svfiprintf_r+0x17c>
 8009e08:	b1b0      	cbz	r0, 8009e38 <_svfiprintf_r+0x114>
 8009e0a:	9207      	str	r2, [sp, #28]
 8009e0c:	e014      	b.n	8009e38 <_svfiprintf_r+0x114>
 8009e0e:	eba0 0308 	sub.w	r3, r0, r8
 8009e12:	fa09 f303 	lsl.w	r3, r9, r3
 8009e16:	4313      	orrs	r3, r2
 8009e18:	9304      	str	r3, [sp, #16]
 8009e1a:	46a2      	mov	sl, r4
 8009e1c:	e7d2      	b.n	8009dc4 <_svfiprintf_r+0xa0>
 8009e1e:	9b03      	ldr	r3, [sp, #12]
 8009e20:	1d19      	adds	r1, r3, #4
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	9103      	str	r1, [sp, #12]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	bfbb      	ittet	lt
 8009e2a:	425b      	neglt	r3, r3
 8009e2c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e30:	9307      	strge	r3, [sp, #28]
 8009e32:	9307      	strlt	r3, [sp, #28]
 8009e34:	bfb8      	it	lt
 8009e36:	9204      	strlt	r2, [sp, #16]
 8009e38:	7823      	ldrb	r3, [r4, #0]
 8009e3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e3c:	d10a      	bne.n	8009e54 <_svfiprintf_r+0x130>
 8009e3e:	7863      	ldrb	r3, [r4, #1]
 8009e40:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e42:	d132      	bne.n	8009eaa <_svfiprintf_r+0x186>
 8009e44:	9b03      	ldr	r3, [sp, #12]
 8009e46:	1d1a      	adds	r2, r3, #4
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	9203      	str	r2, [sp, #12]
 8009e4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e50:	3402      	adds	r4, #2
 8009e52:	9305      	str	r3, [sp, #20]
 8009e54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f18 <_svfiprintf_r+0x1f4>
 8009e58:	7821      	ldrb	r1, [r4, #0]
 8009e5a:	2203      	movs	r2, #3
 8009e5c:	4650      	mov	r0, sl
 8009e5e:	f7f6 f9cf 	bl	8000200 <memchr>
 8009e62:	b138      	cbz	r0, 8009e74 <_svfiprintf_r+0x150>
 8009e64:	9b04      	ldr	r3, [sp, #16]
 8009e66:	eba0 000a 	sub.w	r0, r0, sl
 8009e6a:	2240      	movs	r2, #64	@ 0x40
 8009e6c:	4082      	lsls	r2, r0
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	3401      	adds	r4, #1
 8009e72:	9304      	str	r3, [sp, #16]
 8009e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e78:	4824      	ldr	r0, [pc, #144]	@ (8009f0c <_svfiprintf_r+0x1e8>)
 8009e7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e7e:	2206      	movs	r2, #6
 8009e80:	f7f6 f9be 	bl	8000200 <memchr>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d036      	beq.n	8009ef6 <_svfiprintf_r+0x1d2>
 8009e88:	4b21      	ldr	r3, [pc, #132]	@ (8009f10 <_svfiprintf_r+0x1ec>)
 8009e8a:	bb1b      	cbnz	r3, 8009ed4 <_svfiprintf_r+0x1b0>
 8009e8c:	9b03      	ldr	r3, [sp, #12]
 8009e8e:	3307      	adds	r3, #7
 8009e90:	f023 0307 	bic.w	r3, r3, #7
 8009e94:	3308      	adds	r3, #8
 8009e96:	9303      	str	r3, [sp, #12]
 8009e98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e9a:	4433      	add	r3, r6
 8009e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e9e:	e76a      	b.n	8009d76 <_svfiprintf_r+0x52>
 8009ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	2001      	movs	r0, #1
 8009ea8:	e7a8      	b.n	8009dfc <_svfiprintf_r+0xd8>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	3401      	adds	r4, #1
 8009eae:	9305      	str	r3, [sp, #20]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	f04f 0c0a 	mov.w	ip, #10
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ebc:	3a30      	subs	r2, #48	@ 0x30
 8009ebe:	2a09      	cmp	r2, #9
 8009ec0:	d903      	bls.n	8009eca <_svfiprintf_r+0x1a6>
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d0c6      	beq.n	8009e54 <_svfiprintf_r+0x130>
 8009ec6:	9105      	str	r1, [sp, #20]
 8009ec8:	e7c4      	b.n	8009e54 <_svfiprintf_r+0x130>
 8009eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ece:	4604      	mov	r4, r0
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e7f0      	b.n	8009eb6 <_svfiprintf_r+0x192>
 8009ed4:	ab03      	add	r3, sp, #12
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	462a      	mov	r2, r5
 8009eda:	4b0e      	ldr	r3, [pc, #56]	@ (8009f14 <_svfiprintf_r+0x1f0>)
 8009edc:	a904      	add	r1, sp, #16
 8009ede:	4638      	mov	r0, r7
 8009ee0:	f7fc fd40 	bl	8006964 <_printf_float>
 8009ee4:	1c42      	adds	r2, r0, #1
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	d1d6      	bne.n	8009e98 <_svfiprintf_r+0x174>
 8009eea:	89ab      	ldrh	r3, [r5, #12]
 8009eec:	065b      	lsls	r3, r3, #25
 8009eee:	f53f af2d 	bmi.w	8009d4c <_svfiprintf_r+0x28>
 8009ef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ef4:	e72c      	b.n	8009d50 <_svfiprintf_r+0x2c>
 8009ef6:	ab03      	add	r3, sp, #12
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	462a      	mov	r2, r5
 8009efc:	4b05      	ldr	r3, [pc, #20]	@ (8009f14 <_svfiprintf_r+0x1f0>)
 8009efe:	a904      	add	r1, sp, #16
 8009f00:	4638      	mov	r0, r7
 8009f02:	f7fc ffc7 	bl	8006e94 <_printf_i>
 8009f06:	e7ed      	b.n	8009ee4 <_svfiprintf_r+0x1c0>
 8009f08:	0800b07d 	.word	0x0800b07d
 8009f0c:	0800b087 	.word	0x0800b087
 8009f10:	08006965 	.word	0x08006965
 8009f14:	08009c6d 	.word	0x08009c6d
 8009f18:	0800b083 	.word	0x0800b083

08009f1c <__sfputc_r>:
 8009f1c:	6893      	ldr	r3, [r2, #8]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	b410      	push	{r4}
 8009f24:	6093      	str	r3, [r2, #8]
 8009f26:	da08      	bge.n	8009f3a <__sfputc_r+0x1e>
 8009f28:	6994      	ldr	r4, [r2, #24]
 8009f2a:	42a3      	cmp	r3, r4
 8009f2c:	db01      	blt.n	8009f32 <__sfputc_r+0x16>
 8009f2e:	290a      	cmp	r1, #10
 8009f30:	d103      	bne.n	8009f3a <__sfputc_r+0x1e>
 8009f32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f36:	f000 b9f1 	b.w	800a31c <__swbuf_r>
 8009f3a:	6813      	ldr	r3, [r2, #0]
 8009f3c:	1c58      	adds	r0, r3, #1
 8009f3e:	6010      	str	r0, [r2, #0]
 8009f40:	7019      	strb	r1, [r3, #0]
 8009f42:	4608      	mov	r0, r1
 8009f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <__sfputs_r>:
 8009f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	460f      	mov	r7, r1
 8009f50:	4614      	mov	r4, r2
 8009f52:	18d5      	adds	r5, r2, r3
 8009f54:	42ac      	cmp	r4, r5
 8009f56:	d101      	bne.n	8009f5c <__sfputs_r+0x12>
 8009f58:	2000      	movs	r0, #0
 8009f5a:	e007      	b.n	8009f6c <__sfputs_r+0x22>
 8009f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f60:	463a      	mov	r2, r7
 8009f62:	4630      	mov	r0, r6
 8009f64:	f7ff ffda 	bl	8009f1c <__sfputc_r>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d1f3      	bne.n	8009f54 <__sfputs_r+0xa>
 8009f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f70 <_vfiprintf_r>:
 8009f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f74:	460d      	mov	r5, r1
 8009f76:	b09d      	sub	sp, #116	@ 0x74
 8009f78:	4614      	mov	r4, r2
 8009f7a:	4698      	mov	r8, r3
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	b118      	cbz	r0, 8009f88 <_vfiprintf_r+0x18>
 8009f80:	6a03      	ldr	r3, [r0, #32]
 8009f82:	b90b      	cbnz	r3, 8009f88 <_vfiprintf_r+0x18>
 8009f84:	f7fd fb3e 	bl	8007604 <__sinit>
 8009f88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f8a:	07d9      	lsls	r1, r3, #31
 8009f8c:	d405      	bmi.n	8009f9a <_vfiprintf_r+0x2a>
 8009f8e:	89ab      	ldrh	r3, [r5, #12]
 8009f90:	059a      	lsls	r2, r3, #22
 8009f92:	d402      	bmi.n	8009f9a <_vfiprintf_r+0x2a>
 8009f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f96:	f7fd fc70 	bl	800787a <__retarget_lock_acquire_recursive>
 8009f9a:	89ab      	ldrh	r3, [r5, #12]
 8009f9c:	071b      	lsls	r3, r3, #28
 8009f9e:	d501      	bpl.n	8009fa4 <_vfiprintf_r+0x34>
 8009fa0:	692b      	ldr	r3, [r5, #16]
 8009fa2:	b99b      	cbnz	r3, 8009fcc <_vfiprintf_r+0x5c>
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f000 f9f6 	bl	800a398 <__swsetup_r>
 8009fac:	b170      	cbz	r0, 8009fcc <_vfiprintf_r+0x5c>
 8009fae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fb0:	07dc      	lsls	r4, r3, #31
 8009fb2:	d504      	bpl.n	8009fbe <_vfiprintf_r+0x4e>
 8009fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb8:	b01d      	add	sp, #116	@ 0x74
 8009fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fbe:	89ab      	ldrh	r3, [r5, #12]
 8009fc0:	0598      	lsls	r0, r3, #22
 8009fc2:	d4f7      	bmi.n	8009fb4 <_vfiprintf_r+0x44>
 8009fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fc6:	f7fd fc59 	bl	800787c <__retarget_lock_release_recursive>
 8009fca:	e7f3      	b.n	8009fb4 <_vfiprintf_r+0x44>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fd0:	2320      	movs	r3, #32
 8009fd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fda:	2330      	movs	r3, #48	@ 0x30
 8009fdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a18c <_vfiprintf_r+0x21c>
 8009fe0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fe4:	f04f 0901 	mov.w	r9, #1
 8009fe8:	4623      	mov	r3, r4
 8009fea:	469a      	mov	sl, r3
 8009fec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ff0:	b10a      	cbz	r2, 8009ff6 <_vfiprintf_r+0x86>
 8009ff2:	2a25      	cmp	r2, #37	@ 0x25
 8009ff4:	d1f9      	bne.n	8009fea <_vfiprintf_r+0x7a>
 8009ff6:	ebba 0b04 	subs.w	fp, sl, r4
 8009ffa:	d00b      	beq.n	800a014 <_vfiprintf_r+0xa4>
 8009ffc:	465b      	mov	r3, fp
 8009ffe:	4622      	mov	r2, r4
 800a000:	4629      	mov	r1, r5
 800a002:	4630      	mov	r0, r6
 800a004:	f7ff ffa1 	bl	8009f4a <__sfputs_r>
 800a008:	3001      	adds	r0, #1
 800a00a:	f000 80a7 	beq.w	800a15c <_vfiprintf_r+0x1ec>
 800a00e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a010:	445a      	add	r2, fp
 800a012:	9209      	str	r2, [sp, #36]	@ 0x24
 800a014:	f89a 3000 	ldrb.w	r3, [sl]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 809f 	beq.w	800a15c <_vfiprintf_r+0x1ec>
 800a01e:	2300      	movs	r3, #0
 800a020:	f04f 32ff 	mov.w	r2, #4294967295
 800a024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a028:	f10a 0a01 	add.w	sl, sl, #1
 800a02c:	9304      	str	r3, [sp, #16]
 800a02e:	9307      	str	r3, [sp, #28]
 800a030:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a034:	931a      	str	r3, [sp, #104]	@ 0x68
 800a036:	4654      	mov	r4, sl
 800a038:	2205      	movs	r2, #5
 800a03a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a03e:	4853      	ldr	r0, [pc, #332]	@ (800a18c <_vfiprintf_r+0x21c>)
 800a040:	f7f6 f8de 	bl	8000200 <memchr>
 800a044:	9a04      	ldr	r2, [sp, #16]
 800a046:	b9d8      	cbnz	r0, 800a080 <_vfiprintf_r+0x110>
 800a048:	06d1      	lsls	r1, r2, #27
 800a04a:	bf44      	itt	mi
 800a04c:	2320      	movmi	r3, #32
 800a04e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a052:	0713      	lsls	r3, r2, #28
 800a054:	bf44      	itt	mi
 800a056:	232b      	movmi	r3, #43	@ 0x2b
 800a058:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a05c:	f89a 3000 	ldrb.w	r3, [sl]
 800a060:	2b2a      	cmp	r3, #42	@ 0x2a
 800a062:	d015      	beq.n	800a090 <_vfiprintf_r+0x120>
 800a064:	9a07      	ldr	r2, [sp, #28]
 800a066:	4654      	mov	r4, sl
 800a068:	2000      	movs	r0, #0
 800a06a:	f04f 0c0a 	mov.w	ip, #10
 800a06e:	4621      	mov	r1, r4
 800a070:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a074:	3b30      	subs	r3, #48	@ 0x30
 800a076:	2b09      	cmp	r3, #9
 800a078:	d94b      	bls.n	800a112 <_vfiprintf_r+0x1a2>
 800a07a:	b1b0      	cbz	r0, 800a0aa <_vfiprintf_r+0x13a>
 800a07c:	9207      	str	r2, [sp, #28]
 800a07e:	e014      	b.n	800a0aa <_vfiprintf_r+0x13a>
 800a080:	eba0 0308 	sub.w	r3, r0, r8
 800a084:	fa09 f303 	lsl.w	r3, r9, r3
 800a088:	4313      	orrs	r3, r2
 800a08a:	9304      	str	r3, [sp, #16]
 800a08c:	46a2      	mov	sl, r4
 800a08e:	e7d2      	b.n	800a036 <_vfiprintf_r+0xc6>
 800a090:	9b03      	ldr	r3, [sp, #12]
 800a092:	1d19      	adds	r1, r3, #4
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	9103      	str	r1, [sp, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	bfbb      	ittet	lt
 800a09c:	425b      	neglt	r3, r3
 800a09e:	f042 0202 	orrlt.w	r2, r2, #2
 800a0a2:	9307      	strge	r3, [sp, #28]
 800a0a4:	9307      	strlt	r3, [sp, #28]
 800a0a6:	bfb8      	it	lt
 800a0a8:	9204      	strlt	r2, [sp, #16]
 800a0aa:	7823      	ldrb	r3, [r4, #0]
 800a0ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0ae:	d10a      	bne.n	800a0c6 <_vfiprintf_r+0x156>
 800a0b0:	7863      	ldrb	r3, [r4, #1]
 800a0b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0b4:	d132      	bne.n	800a11c <_vfiprintf_r+0x1ac>
 800a0b6:	9b03      	ldr	r3, [sp, #12]
 800a0b8:	1d1a      	adds	r2, r3, #4
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	9203      	str	r2, [sp, #12]
 800a0be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0c2:	3402      	adds	r4, #2
 800a0c4:	9305      	str	r3, [sp, #20]
 800a0c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a19c <_vfiprintf_r+0x22c>
 800a0ca:	7821      	ldrb	r1, [r4, #0]
 800a0cc:	2203      	movs	r2, #3
 800a0ce:	4650      	mov	r0, sl
 800a0d0:	f7f6 f896 	bl	8000200 <memchr>
 800a0d4:	b138      	cbz	r0, 800a0e6 <_vfiprintf_r+0x176>
 800a0d6:	9b04      	ldr	r3, [sp, #16]
 800a0d8:	eba0 000a 	sub.w	r0, r0, sl
 800a0dc:	2240      	movs	r2, #64	@ 0x40
 800a0de:	4082      	lsls	r2, r0
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	3401      	adds	r4, #1
 800a0e4:	9304      	str	r3, [sp, #16]
 800a0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ea:	4829      	ldr	r0, [pc, #164]	@ (800a190 <_vfiprintf_r+0x220>)
 800a0ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0f0:	2206      	movs	r2, #6
 800a0f2:	f7f6 f885 	bl	8000200 <memchr>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d03f      	beq.n	800a17a <_vfiprintf_r+0x20a>
 800a0fa:	4b26      	ldr	r3, [pc, #152]	@ (800a194 <_vfiprintf_r+0x224>)
 800a0fc:	bb1b      	cbnz	r3, 800a146 <_vfiprintf_r+0x1d6>
 800a0fe:	9b03      	ldr	r3, [sp, #12]
 800a100:	3307      	adds	r3, #7
 800a102:	f023 0307 	bic.w	r3, r3, #7
 800a106:	3308      	adds	r3, #8
 800a108:	9303      	str	r3, [sp, #12]
 800a10a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a10c:	443b      	add	r3, r7
 800a10e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a110:	e76a      	b.n	8009fe8 <_vfiprintf_r+0x78>
 800a112:	fb0c 3202 	mla	r2, ip, r2, r3
 800a116:	460c      	mov	r4, r1
 800a118:	2001      	movs	r0, #1
 800a11a:	e7a8      	b.n	800a06e <_vfiprintf_r+0xfe>
 800a11c:	2300      	movs	r3, #0
 800a11e:	3401      	adds	r4, #1
 800a120:	9305      	str	r3, [sp, #20]
 800a122:	4619      	mov	r1, r3
 800a124:	f04f 0c0a 	mov.w	ip, #10
 800a128:	4620      	mov	r0, r4
 800a12a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a12e:	3a30      	subs	r2, #48	@ 0x30
 800a130:	2a09      	cmp	r2, #9
 800a132:	d903      	bls.n	800a13c <_vfiprintf_r+0x1cc>
 800a134:	2b00      	cmp	r3, #0
 800a136:	d0c6      	beq.n	800a0c6 <_vfiprintf_r+0x156>
 800a138:	9105      	str	r1, [sp, #20]
 800a13a:	e7c4      	b.n	800a0c6 <_vfiprintf_r+0x156>
 800a13c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a140:	4604      	mov	r4, r0
 800a142:	2301      	movs	r3, #1
 800a144:	e7f0      	b.n	800a128 <_vfiprintf_r+0x1b8>
 800a146:	ab03      	add	r3, sp, #12
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	462a      	mov	r2, r5
 800a14c:	4b12      	ldr	r3, [pc, #72]	@ (800a198 <_vfiprintf_r+0x228>)
 800a14e:	a904      	add	r1, sp, #16
 800a150:	4630      	mov	r0, r6
 800a152:	f7fc fc07 	bl	8006964 <_printf_float>
 800a156:	4607      	mov	r7, r0
 800a158:	1c78      	adds	r0, r7, #1
 800a15a:	d1d6      	bne.n	800a10a <_vfiprintf_r+0x19a>
 800a15c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a15e:	07d9      	lsls	r1, r3, #31
 800a160:	d405      	bmi.n	800a16e <_vfiprintf_r+0x1fe>
 800a162:	89ab      	ldrh	r3, [r5, #12]
 800a164:	059a      	lsls	r2, r3, #22
 800a166:	d402      	bmi.n	800a16e <_vfiprintf_r+0x1fe>
 800a168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a16a:	f7fd fb87 	bl	800787c <__retarget_lock_release_recursive>
 800a16e:	89ab      	ldrh	r3, [r5, #12]
 800a170:	065b      	lsls	r3, r3, #25
 800a172:	f53f af1f 	bmi.w	8009fb4 <_vfiprintf_r+0x44>
 800a176:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a178:	e71e      	b.n	8009fb8 <_vfiprintf_r+0x48>
 800a17a:	ab03      	add	r3, sp, #12
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	462a      	mov	r2, r5
 800a180:	4b05      	ldr	r3, [pc, #20]	@ (800a198 <_vfiprintf_r+0x228>)
 800a182:	a904      	add	r1, sp, #16
 800a184:	4630      	mov	r0, r6
 800a186:	f7fc fe85 	bl	8006e94 <_printf_i>
 800a18a:	e7e4      	b.n	800a156 <_vfiprintf_r+0x1e6>
 800a18c:	0800b07d 	.word	0x0800b07d
 800a190:	0800b087 	.word	0x0800b087
 800a194:	08006965 	.word	0x08006965
 800a198:	08009f4b 	.word	0x08009f4b
 800a19c:	0800b083 	.word	0x0800b083

0800a1a0 <__sflush_r>:
 800a1a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a8:	0716      	lsls	r6, r2, #28
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	460c      	mov	r4, r1
 800a1ae:	d454      	bmi.n	800a25a <__sflush_r+0xba>
 800a1b0:	684b      	ldr	r3, [r1, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	dc02      	bgt.n	800a1bc <__sflush_r+0x1c>
 800a1b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	dd48      	ble.n	800a24e <__sflush_r+0xae>
 800a1bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1be:	2e00      	cmp	r6, #0
 800a1c0:	d045      	beq.n	800a24e <__sflush_r+0xae>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a1c8:	682f      	ldr	r7, [r5, #0]
 800a1ca:	6a21      	ldr	r1, [r4, #32]
 800a1cc:	602b      	str	r3, [r5, #0]
 800a1ce:	d030      	beq.n	800a232 <__sflush_r+0x92>
 800a1d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	0759      	lsls	r1, r3, #29
 800a1d6:	d505      	bpl.n	800a1e4 <__sflush_r+0x44>
 800a1d8:	6863      	ldr	r3, [r4, #4]
 800a1da:	1ad2      	subs	r2, r2, r3
 800a1dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a1de:	b10b      	cbz	r3, 800a1e4 <__sflush_r+0x44>
 800a1e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a1e2:	1ad2      	subs	r2, r2, r3
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1e8:	6a21      	ldr	r1, [r4, #32]
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	47b0      	blx	r6
 800a1ee:	1c43      	adds	r3, r0, #1
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	d106      	bne.n	800a202 <__sflush_r+0x62>
 800a1f4:	6829      	ldr	r1, [r5, #0]
 800a1f6:	291d      	cmp	r1, #29
 800a1f8:	d82b      	bhi.n	800a252 <__sflush_r+0xb2>
 800a1fa:	4a2a      	ldr	r2, [pc, #168]	@ (800a2a4 <__sflush_r+0x104>)
 800a1fc:	40ca      	lsrs	r2, r1
 800a1fe:	07d6      	lsls	r6, r2, #31
 800a200:	d527      	bpl.n	800a252 <__sflush_r+0xb2>
 800a202:	2200      	movs	r2, #0
 800a204:	6062      	str	r2, [r4, #4]
 800a206:	04d9      	lsls	r1, r3, #19
 800a208:	6922      	ldr	r2, [r4, #16]
 800a20a:	6022      	str	r2, [r4, #0]
 800a20c:	d504      	bpl.n	800a218 <__sflush_r+0x78>
 800a20e:	1c42      	adds	r2, r0, #1
 800a210:	d101      	bne.n	800a216 <__sflush_r+0x76>
 800a212:	682b      	ldr	r3, [r5, #0]
 800a214:	b903      	cbnz	r3, 800a218 <__sflush_r+0x78>
 800a216:	6560      	str	r0, [r4, #84]	@ 0x54
 800a218:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a21a:	602f      	str	r7, [r5, #0]
 800a21c:	b1b9      	cbz	r1, 800a24e <__sflush_r+0xae>
 800a21e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a222:	4299      	cmp	r1, r3
 800a224:	d002      	beq.n	800a22c <__sflush_r+0x8c>
 800a226:	4628      	mov	r0, r5
 800a228:	f7fe f9a6 	bl	8008578 <_free_r>
 800a22c:	2300      	movs	r3, #0
 800a22e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a230:	e00d      	b.n	800a24e <__sflush_r+0xae>
 800a232:	2301      	movs	r3, #1
 800a234:	4628      	mov	r0, r5
 800a236:	47b0      	blx	r6
 800a238:	4602      	mov	r2, r0
 800a23a:	1c50      	adds	r0, r2, #1
 800a23c:	d1c9      	bne.n	800a1d2 <__sflush_r+0x32>
 800a23e:	682b      	ldr	r3, [r5, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d0c6      	beq.n	800a1d2 <__sflush_r+0x32>
 800a244:	2b1d      	cmp	r3, #29
 800a246:	d001      	beq.n	800a24c <__sflush_r+0xac>
 800a248:	2b16      	cmp	r3, #22
 800a24a:	d11e      	bne.n	800a28a <__sflush_r+0xea>
 800a24c:	602f      	str	r7, [r5, #0]
 800a24e:	2000      	movs	r0, #0
 800a250:	e022      	b.n	800a298 <__sflush_r+0xf8>
 800a252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a256:	b21b      	sxth	r3, r3
 800a258:	e01b      	b.n	800a292 <__sflush_r+0xf2>
 800a25a:	690f      	ldr	r7, [r1, #16]
 800a25c:	2f00      	cmp	r7, #0
 800a25e:	d0f6      	beq.n	800a24e <__sflush_r+0xae>
 800a260:	0793      	lsls	r3, r2, #30
 800a262:	680e      	ldr	r6, [r1, #0]
 800a264:	bf08      	it	eq
 800a266:	694b      	ldreq	r3, [r1, #20]
 800a268:	600f      	str	r7, [r1, #0]
 800a26a:	bf18      	it	ne
 800a26c:	2300      	movne	r3, #0
 800a26e:	eba6 0807 	sub.w	r8, r6, r7
 800a272:	608b      	str	r3, [r1, #8]
 800a274:	f1b8 0f00 	cmp.w	r8, #0
 800a278:	dde9      	ble.n	800a24e <__sflush_r+0xae>
 800a27a:	6a21      	ldr	r1, [r4, #32]
 800a27c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a27e:	4643      	mov	r3, r8
 800a280:	463a      	mov	r2, r7
 800a282:	4628      	mov	r0, r5
 800a284:	47b0      	blx	r6
 800a286:	2800      	cmp	r0, #0
 800a288:	dc08      	bgt.n	800a29c <__sflush_r+0xfc>
 800a28a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a28e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a292:	81a3      	strh	r3, [r4, #12]
 800a294:	f04f 30ff 	mov.w	r0, #4294967295
 800a298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a29c:	4407      	add	r7, r0
 800a29e:	eba8 0800 	sub.w	r8, r8, r0
 800a2a2:	e7e7      	b.n	800a274 <__sflush_r+0xd4>
 800a2a4:	20400001 	.word	0x20400001

0800a2a8 <_fflush_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	690b      	ldr	r3, [r1, #16]
 800a2ac:	4605      	mov	r5, r0
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	b913      	cbnz	r3, 800a2b8 <_fflush_r+0x10>
 800a2b2:	2500      	movs	r5, #0
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	bd38      	pop	{r3, r4, r5, pc}
 800a2b8:	b118      	cbz	r0, 800a2c2 <_fflush_r+0x1a>
 800a2ba:	6a03      	ldr	r3, [r0, #32]
 800a2bc:	b90b      	cbnz	r3, 800a2c2 <_fflush_r+0x1a>
 800a2be:	f7fd f9a1 	bl	8007604 <__sinit>
 800a2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0f3      	beq.n	800a2b2 <_fflush_r+0xa>
 800a2ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a2cc:	07d0      	lsls	r0, r2, #31
 800a2ce:	d404      	bmi.n	800a2da <_fflush_r+0x32>
 800a2d0:	0599      	lsls	r1, r3, #22
 800a2d2:	d402      	bmi.n	800a2da <_fflush_r+0x32>
 800a2d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2d6:	f7fd fad0 	bl	800787a <__retarget_lock_acquire_recursive>
 800a2da:	4628      	mov	r0, r5
 800a2dc:	4621      	mov	r1, r4
 800a2de:	f7ff ff5f 	bl	800a1a0 <__sflush_r>
 800a2e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2e4:	07da      	lsls	r2, r3, #31
 800a2e6:	4605      	mov	r5, r0
 800a2e8:	d4e4      	bmi.n	800a2b4 <_fflush_r+0xc>
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	059b      	lsls	r3, r3, #22
 800a2ee:	d4e1      	bmi.n	800a2b4 <_fflush_r+0xc>
 800a2f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2f2:	f7fd fac3 	bl	800787c <__retarget_lock_release_recursive>
 800a2f6:	e7dd      	b.n	800a2b4 <_fflush_r+0xc>

0800a2f8 <fiprintf>:
 800a2f8:	b40e      	push	{r1, r2, r3}
 800a2fa:	b503      	push	{r0, r1, lr}
 800a2fc:	4601      	mov	r1, r0
 800a2fe:	ab03      	add	r3, sp, #12
 800a300:	4805      	ldr	r0, [pc, #20]	@ (800a318 <fiprintf+0x20>)
 800a302:	f853 2b04 	ldr.w	r2, [r3], #4
 800a306:	6800      	ldr	r0, [r0, #0]
 800a308:	9301      	str	r3, [sp, #4]
 800a30a:	f7ff fe31 	bl	8009f70 <_vfiprintf_r>
 800a30e:	b002      	add	sp, #8
 800a310:	f85d eb04 	ldr.w	lr, [sp], #4
 800a314:	b003      	add	sp, #12
 800a316:	4770      	bx	lr
 800a318:	200400c0 	.word	0x200400c0

0800a31c <__swbuf_r>:
 800a31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31e:	460e      	mov	r6, r1
 800a320:	4614      	mov	r4, r2
 800a322:	4605      	mov	r5, r0
 800a324:	b118      	cbz	r0, 800a32e <__swbuf_r+0x12>
 800a326:	6a03      	ldr	r3, [r0, #32]
 800a328:	b90b      	cbnz	r3, 800a32e <__swbuf_r+0x12>
 800a32a:	f7fd f96b 	bl	8007604 <__sinit>
 800a32e:	69a3      	ldr	r3, [r4, #24]
 800a330:	60a3      	str	r3, [r4, #8]
 800a332:	89a3      	ldrh	r3, [r4, #12]
 800a334:	071a      	lsls	r2, r3, #28
 800a336:	d501      	bpl.n	800a33c <__swbuf_r+0x20>
 800a338:	6923      	ldr	r3, [r4, #16]
 800a33a:	b943      	cbnz	r3, 800a34e <__swbuf_r+0x32>
 800a33c:	4621      	mov	r1, r4
 800a33e:	4628      	mov	r0, r5
 800a340:	f000 f82a 	bl	800a398 <__swsetup_r>
 800a344:	b118      	cbz	r0, 800a34e <__swbuf_r+0x32>
 800a346:	f04f 37ff 	mov.w	r7, #4294967295
 800a34a:	4638      	mov	r0, r7
 800a34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	6922      	ldr	r2, [r4, #16]
 800a352:	1a98      	subs	r0, r3, r2
 800a354:	6963      	ldr	r3, [r4, #20]
 800a356:	b2f6      	uxtb	r6, r6
 800a358:	4283      	cmp	r3, r0
 800a35a:	4637      	mov	r7, r6
 800a35c:	dc05      	bgt.n	800a36a <__swbuf_r+0x4e>
 800a35e:	4621      	mov	r1, r4
 800a360:	4628      	mov	r0, r5
 800a362:	f7ff ffa1 	bl	800a2a8 <_fflush_r>
 800a366:	2800      	cmp	r0, #0
 800a368:	d1ed      	bne.n	800a346 <__swbuf_r+0x2a>
 800a36a:	68a3      	ldr	r3, [r4, #8]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	60a3      	str	r3, [r4, #8]
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	1c5a      	adds	r2, r3, #1
 800a374:	6022      	str	r2, [r4, #0]
 800a376:	701e      	strb	r6, [r3, #0]
 800a378:	6962      	ldr	r2, [r4, #20]
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d004      	beq.n	800a38a <__swbuf_r+0x6e>
 800a380:	89a3      	ldrh	r3, [r4, #12]
 800a382:	07db      	lsls	r3, r3, #31
 800a384:	d5e1      	bpl.n	800a34a <__swbuf_r+0x2e>
 800a386:	2e0a      	cmp	r6, #10
 800a388:	d1df      	bne.n	800a34a <__swbuf_r+0x2e>
 800a38a:	4621      	mov	r1, r4
 800a38c:	4628      	mov	r0, r5
 800a38e:	f7ff ff8b 	bl	800a2a8 <_fflush_r>
 800a392:	2800      	cmp	r0, #0
 800a394:	d0d9      	beq.n	800a34a <__swbuf_r+0x2e>
 800a396:	e7d6      	b.n	800a346 <__swbuf_r+0x2a>

0800a398 <__swsetup_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4b29      	ldr	r3, [pc, #164]	@ (800a440 <__swsetup_r+0xa8>)
 800a39c:	4605      	mov	r5, r0
 800a39e:	6818      	ldr	r0, [r3, #0]
 800a3a0:	460c      	mov	r4, r1
 800a3a2:	b118      	cbz	r0, 800a3ac <__swsetup_r+0x14>
 800a3a4:	6a03      	ldr	r3, [r0, #32]
 800a3a6:	b90b      	cbnz	r3, 800a3ac <__swsetup_r+0x14>
 800a3a8:	f7fd f92c 	bl	8007604 <__sinit>
 800a3ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3b0:	0719      	lsls	r1, r3, #28
 800a3b2:	d422      	bmi.n	800a3fa <__swsetup_r+0x62>
 800a3b4:	06da      	lsls	r2, r3, #27
 800a3b6:	d407      	bmi.n	800a3c8 <__swsetup_r+0x30>
 800a3b8:	2209      	movs	r2, #9
 800a3ba:	602a      	str	r2, [r5, #0]
 800a3bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3c0:	81a3      	strh	r3, [r4, #12]
 800a3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c6:	e033      	b.n	800a430 <__swsetup_r+0x98>
 800a3c8:	0758      	lsls	r0, r3, #29
 800a3ca:	d512      	bpl.n	800a3f2 <__swsetup_r+0x5a>
 800a3cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3ce:	b141      	cbz	r1, 800a3e2 <__swsetup_r+0x4a>
 800a3d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3d4:	4299      	cmp	r1, r3
 800a3d6:	d002      	beq.n	800a3de <__swsetup_r+0x46>
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f7fe f8cd 	bl	8008578 <_free_r>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3e2:	89a3      	ldrh	r3, [r4, #12]
 800a3e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a3e8:	81a3      	strh	r3, [r4, #12]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	6063      	str	r3, [r4, #4]
 800a3ee:	6923      	ldr	r3, [r4, #16]
 800a3f0:	6023      	str	r3, [r4, #0]
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	f043 0308 	orr.w	r3, r3, #8
 800a3f8:	81a3      	strh	r3, [r4, #12]
 800a3fa:	6923      	ldr	r3, [r4, #16]
 800a3fc:	b94b      	cbnz	r3, 800a412 <__swsetup_r+0x7a>
 800a3fe:	89a3      	ldrh	r3, [r4, #12]
 800a400:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a408:	d003      	beq.n	800a412 <__swsetup_r+0x7a>
 800a40a:	4621      	mov	r1, r4
 800a40c:	4628      	mov	r0, r5
 800a40e:	f000 fc21 	bl	800ac54 <__smakebuf_r>
 800a412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a416:	f013 0201 	ands.w	r2, r3, #1
 800a41a:	d00a      	beq.n	800a432 <__swsetup_r+0x9a>
 800a41c:	2200      	movs	r2, #0
 800a41e:	60a2      	str	r2, [r4, #8]
 800a420:	6962      	ldr	r2, [r4, #20]
 800a422:	4252      	negs	r2, r2
 800a424:	61a2      	str	r2, [r4, #24]
 800a426:	6922      	ldr	r2, [r4, #16]
 800a428:	b942      	cbnz	r2, 800a43c <__swsetup_r+0xa4>
 800a42a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a42e:	d1c5      	bne.n	800a3bc <__swsetup_r+0x24>
 800a430:	bd38      	pop	{r3, r4, r5, pc}
 800a432:	0799      	lsls	r1, r3, #30
 800a434:	bf58      	it	pl
 800a436:	6962      	ldrpl	r2, [r4, #20]
 800a438:	60a2      	str	r2, [r4, #8]
 800a43a:	e7f4      	b.n	800a426 <__swsetup_r+0x8e>
 800a43c:	2000      	movs	r0, #0
 800a43e:	e7f7      	b.n	800a430 <__swsetup_r+0x98>
 800a440:	200400c0 	.word	0x200400c0

0800a444 <memmove>:
 800a444:	4288      	cmp	r0, r1
 800a446:	b510      	push	{r4, lr}
 800a448:	eb01 0402 	add.w	r4, r1, r2
 800a44c:	d902      	bls.n	800a454 <memmove+0x10>
 800a44e:	4284      	cmp	r4, r0
 800a450:	4623      	mov	r3, r4
 800a452:	d807      	bhi.n	800a464 <memmove+0x20>
 800a454:	1e43      	subs	r3, r0, #1
 800a456:	42a1      	cmp	r1, r4
 800a458:	d008      	beq.n	800a46c <memmove+0x28>
 800a45a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a45e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a462:	e7f8      	b.n	800a456 <memmove+0x12>
 800a464:	4402      	add	r2, r0
 800a466:	4601      	mov	r1, r0
 800a468:	428a      	cmp	r2, r1
 800a46a:	d100      	bne.n	800a46e <memmove+0x2a>
 800a46c:	bd10      	pop	{r4, pc}
 800a46e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a472:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a476:	e7f7      	b.n	800a468 <memmove+0x24>

0800a478 <strncmp>:
 800a478:	b510      	push	{r4, lr}
 800a47a:	b16a      	cbz	r2, 800a498 <strncmp+0x20>
 800a47c:	3901      	subs	r1, #1
 800a47e:	1884      	adds	r4, r0, r2
 800a480:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a484:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a488:	429a      	cmp	r2, r3
 800a48a:	d103      	bne.n	800a494 <strncmp+0x1c>
 800a48c:	42a0      	cmp	r0, r4
 800a48e:	d001      	beq.n	800a494 <strncmp+0x1c>
 800a490:	2a00      	cmp	r2, #0
 800a492:	d1f5      	bne.n	800a480 <strncmp+0x8>
 800a494:	1ad0      	subs	r0, r2, r3
 800a496:	bd10      	pop	{r4, pc}
 800a498:	4610      	mov	r0, r2
 800a49a:	e7fc      	b.n	800a496 <strncmp+0x1e>

0800a49c <memcpy>:
 800a49c:	440a      	add	r2, r1
 800a49e:	4291      	cmp	r1, r2
 800a4a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4a4:	d100      	bne.n	800a4a8 <memcpy+0xc>
 800a4a6:	4770      	bx	lr
 800a4a8:	b510      	push	{r4, lr}
 800a4aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4b2:	4291      	cmp	r1, r2
 800a4b4:	d1f9      	bne.n	800a4aa <memcpy+0xe>
 800a4b6:	bd10      	pop	{r4, pc}

0800a4b8 <nan>:
 800a4b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a4c0 <nan+0x8>
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	00000000 	.word	0x00000000
 800a4c4:	7ff80000 	.word	0x7ff80000

0800a4c8 <abort>:
 800a4c8:	b508      	push	{r3, lr}
 800a4ca:	2006      	movs	r0, #6
 800a4cc:	f000 fc26 	bl	800ad1c <raise>
 800a4d0:	2001      	movs	r0, #1
 800a4d2:	f7f8 fb48 	bl	8002b66 <_exit>

0800a4d6 <_calloc_r>:
 800a4d6:	b570      	push	{r4, r5, r6, lr}
 800a4d8:	fba1 5402 	umull	r5, r4, r1, r2
 800a4dc:	b934      	cbnz	r4, 800a4ec <_calloc_r+0x16>
 800a4de:	4629      	mov	r1, r5
 800a4e0:	f7fc f8a8 	bl	8006634 <_malloc_r>
 800a4e4:	4606      	mov	r6, r0
 800a4e6:	b928      	cbnz	r0, 800a4f4 <_calloc_r+0x1e>
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	bd70      	pop	{r4, r5, r6, pc}
 800a4ec:	220c      	movs	r2, #12
 800a4ee:	6002      	str	r2, [r0, #0]
 800a4f0:	2600      	movs	r6, #0
 800a4f2:	e7f9      	b.n	800a4e8 <_calloc_r+0x12>
 800a4f4:	462a      	mov	r2, r5
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	f7fd f931 	bl	800775e <memset>
 800a4fc:	e7f4      	b.n	800a4e8 <_calloc_r+0x12>

0800a4fe <rshift>:
 800a4fe:	6903      	ldr	r3, [r0, #16]
 800a500:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a508:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a50c:	f100 0414 	add.w	r4, r0, #20
 800a510:	dd45      	ble.n	800a59e <rshift+0xa0>
 800a512:	f011 011f 	ands.w	r1, r1, #31
 800a516:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a51a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a51e:	d10c      	bne.n	800a53a <rshift+0x3c>
 800a520:	f100 0710 	add.w	r7, r0, #16
 800a524:	4629      	mov	r1, r5
 800a526:	42b1      	cmp	r1, r6
 800a528:	d334      	bcc.n	800a594 <rshift+0x96>
 800a52a:	1a9b      	subs	r3, r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	1eea      	subs	r2, r5, #3
 800a530:	4296      	cmp	r6, r2
 800a532:	bf38      	it	cc
 800a534:	2300      	movcc	r3, #0
 800a536:	4423      	add	r3, r4
 800a538:	e015      	b.n	800a566 <rshift+0x68>
 800a53a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a53e:	f1c1 0820 	rsb	r8, r1, #32
 800a542:	40cf      	lsrs	r7, r1
 800a544:	f105 0e04 	add.w	lr, r5, #4
 800a548:	46a1      	mov	r9, r4
 800a54a:	4576      	cmp	r6, lr
 800a54c:	46f4      	mov	ip, lr
 800a54e:	d815      	bhi.n	800a57c <rshift+0x7e>
 800a550:	1a9a      	subs	r2, r3, r2
 800a552:	0092      	lsls	r2, r2, #2
 800a554:	3a04      	subs	r2, #4
 800a556:	3501      	adds	r5, #1
 800a558:	42ae      	cmp	r6, r5
 800a55a:	bf38      	it	cc
 800a55c:	2200      	movcc	r2, #0
 800a55e:	18a3      	adds	r3, r4, r2
 800a560:	50a7      	str	r7, [r4, r2]
 800a562:	b107      	cbz	r7, 800a566 <rshift+0x68>
 800a564:	3304      	adds	r3, #4
 800a566:	1b1a      	subs	r2, r3, r4
 800a568:	42a3      	cmp	r3, r4
 800a56a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a56e:	bf08      	it	eq
 800a570:	2300      	moveq	r3, #0
 800a572:	6102      	str	r2, [r0, #16]
 800a574:	bf08      	it	eq
 800a576:	6143      	streq	r3, [r0, #20]
 800a578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a57c:	f8dc c000 	ldr.w	ip, [ip]
 800a580:	fa0c fc08 	lsl.w	ip, ip, r8
 800a584:	ea4c 0707 	orr.w	r7, ip, r7
 800a588:	f849 7b04 	str.w	r7, [r9], #4
 800a58c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a590:	40cf      	lsrs	r7, r1
 800a592:	e7da      	b.n	800a54a <rshift+0x4c>
 800a594:	f851 cb04 	ldr.w	ip, [r1], #4
 800a598:	f847 cf04 	str.w	ip, [r7, #4]!
 800a59c:	e7c3      	b.n	800a526 <rshift+0x28>
 800a59e:	4623      	mov	r3, r4
 800a5a0:	e7e1      	b.n	800a566 <rshift+0x68>

0800a5a2 <__hexdig_fun>:
 800a5a2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a5a6:	2b09      	cmp	r3, #9
 800a5a8:	d802      	bhi.n	800a5b0 <__hexdig_fun+0xe>
 800a5aa:	3820      	subs	r0, #32
 800a5ac:	b2c0      	uxtb	r0, r0
 800a5ae:	4770      	bx	lr
 800a5b0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a5b4:	2b05      	cmp	r3, #5
 800a5b6:	d801      	bhi.n	800a5bc <__hexdig_fun+0x1a>
 800a5b8:	3847      	subs	r0, #71	@ 0x47
 800a5ba:	e7f7      	b.n	800a5ac <__hexdig_fun+0xa>
 800a5bc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a5c0:	2b05      	cmp	r3, #5
 800a5c2:	d801      	bhi.n	800a5c8 <__hexdig_fun+0x26>
 800a5c4:	3827      	subs	r0, #39	@ 0x27
 800a5c6:	e7f1      	b.n	800a5ac <__hexdig_fun+0xa>
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	4770      	bx	lr

0800a5cc <__gethex>:
 800a5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d0:	b085      	sub	sp, #20
 800a5d2:	468a      	mov	sl, r1
 800a5d4:	9302      	str	r3, [sp, #8]
 800a5d6:	680b      	ldr	r3, [r1, #0]
 800a5d8:	9001      	str	r0, [sp, #4]
 800a5da:	4690      	mov	r8, r2
 800a5dc:	1c9c      	adds	r4, r3, #2
 800a5de:	46a1      	mov	r9, r4
 800a5e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a5e4:	2830      	cmp	r0, #48	@ 0x30
 800a5e6:	d0fa      	beq.n	800a5de <__gethex+0x12>
 800a5e8:	eba9 0303 	sub.w	r3, r9, r3
 800a5ec:	f1a3 0b02 	sub.w	fp, r3, #2
 800a5f0:	f7ff ffd7 	bl	800a5a2 <__hexdig_fun>
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d168      	bne.n	800a6cc <__gethex+0x100>
 800a5fa:	49a0      	ldr	r1, [pc, #640]	@ (800a87c <__gethex+0x2b0>)
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	4648      	mov	r0, r9
 800a600:	f7ff ff3a 	bl	800a478 <strncmp>
 800a604:	4607      	mov	r7, r0
 800a606:	2800      	cmp	r0, #0
 800a608:	d167      	bne.n	800a6da <__gethex+0x10e>
 800a60a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a60e:	4626      	mov	r6, r4
 800a610:	f7ff ffc7 	bl	800a5a2 <__hexdig_fun>
 800a614:	2800      	cmp	r0, #0
 800a616:	d062      	beq.n	800a6de <__gethex+0x112>
 800a618:	4623      	mov	r3, r4
 800a61a:	7818      	ldrb	r0, [r3, #0]
 800a61c:	2830      	cmp	r0, #48	@ 0x30
 800a61e:	4699      	mov	r9, r3
 800a620:	f103 0301 	add.w	r3, r3, #1
 800a624:	d0f9      	beq.n	800a61a <__gethex+0x4e>
 800a626:	f7ff ffbc 	bl	800a5a2 <__hexdig_fun>
 800a62a:	fab0 f580 	clz	r5, r0
 800a62e:	096d      	lsrs	r5, r5, #5
 800a630:	f04f 0b01 	mov.w	fp, #1
 800a634:	464a      	mov	r2, r9
 800a636:	4616      	mov	r6, r2
 800a638:	3201      	adds	r2, #1
 800a63a:	7830      	ldrb	r0, [r6, #0]
 800a63c:	f7ff ffb1 	bl	800a5a2 <__hexdig_fun>
 800a640:	2800      	cmp	r0, #0
 800a642:	d1f8      	bne.n	800a636 <__gethex+0x6a>
 800a644:	498d      	ldr	r1, [pc, #564]	@ (800a87c <__gethex+0x2b0>)
 800a646:	2201      	movs	r2, #1
 800a648:	4630      	mov	r0, r6
 800a64a:	f7ff ff15 	bl	800a478 <strncmp>
 800a64e:	2800      	cmp	r0, #0
 800a650:	d13f      	bne.n	800a6d2 <__gethex+0x106>
 800a652:	b944      	cbnz	r4, 800a666 <__gethex+0x9a>
 800a654:	1c74      	adds	r4, r6, #1
 800a656:	4622      	mov	r2, r4
 800a658:	4616      	mov	r6, r2
 800a65a:	3201      	adds	r2, #1
 800a65c:	7830      	ldrb	r0, [r6, #0]
 800a65e:	f7ff ffa0 	bl	800a5a2 <__hexdig_fun>
 800a662:	2800      	cmp	r0, #0
 800a664:	d1f8      	bne.n	800a658 <__gethex+0x8c>
 800a666:	1ba4      	subs	r4, r4, r6
 800a668:	00a7      	lsls	r7, r4, #2
 800a66a:	7833      	ldrb	r3, [r6, #0]
 800a66c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a670:	2b50      	cmp	r3, #80	@ 0x50
 800a672:	d13e      	bne.n	800a6f2 <__gethex+0x126>
 800a674:	7873      	ldrb	r3, [r6, #1]
 800a676:	2b2b      	cmp	r3, #43	@ 0x2b
 800a678:	d033      	beq.n	800a6e2 <__gethex+0x116>
 800a67a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a67c:	d034      	beq.n	800a6e8 <__gethex+0x11c>
 800a67e:	1c71      	adds	r1, r6, #1
 800a680:	2400      	movs	r4, #0
 800a682:	7808      	ldrb	r0, [r1, #0]
 800a684:	f7ff ff8d 	bl	800a5a2 <__hexdig_fun>
 800a688:	1e43      	subs	r3, r0, #1
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b18      	cmp	r3, #24
 800a68e:	d830      	bhi.n	800a6f2 <__gethex+0x126>
 800a690:	f1a0 0210 	sub.w	r2, r0, #16
 800a694:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a698:	f7ff ff83 	bl	800a5a2 <__hexdig_fun>
 800a69c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a6a0:	fa5f fc8c 	uxtb.w	ip, ip
 800a6a4:	f1bc 0f18 	cmp.w	ip, #24
 800a6a8:	f04f 030a 	mov.w	r3, #10
 800a6ac:	d91e      	bls.n	800a6ec <__gethex+0x120>
 800a6ae:	b104      	cbz	r4, 800a6b2 <__gethex+0xe6>
 800a6b0:	4252      	negs	r2, r2
 800a6b2:	4417      	add	r7, r2
 800a6b4:	f8ca 1000 	str.w	r1, [sl]
 800a6b8:	b1ed      	cbz	r5, 800a6f6 <__gethex+0x12a>
 800a6ba:	f1bb 0f00 	cmp.w	fp, #0
 800a6be:	bf0c      	ite	eq
 800a6c0:	2506      	moveq	r5, #6
 800a6c2:	2500      	movne	r5, #0
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	b005      	add	sp, #20
 800a6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6cc:	2500      	movs	r5, #0
 800a6ce:	462c      	mov	r4, r5
 800a6d0:	e7b0      	b.n	800a634 <__gethex+0x68>
 800a6d2:	2c00      	cmp	r4, #0
 800a6d4:	d1c7      	bne.n	800a666 <__gethex+0x9a>
 800a6d6:	4627      	mov	r7, r4
 800a6d8:	e7c7      	b.n	800a66a <__gethex+0x9e>
 800a6da:	464e      	mov	r6, r9
 800a6dc:	462f      	mov	r7, r5
 800a6de:	2501      	movs	r5, #1
 800a6e0:	e7c3      	b.n	800a66a <__gethex+0x9e>
 800a6e2:	2400      	movs	r4, #0
 800a6e4:	1cb1      	adds	r1, r6, #2
 800a6e6:	e7cc      	b.n	800a682 <__gethex+0xb6>
 800a6e8:	2401      	movs	r4, #1
 800a6ea:	e7fb      	b.n	800a6e4 <__gethex+0x118>
 800a6ec:	fb03 0002 	mla	r0, r3, r2, r0
 800a6f0:	e7ce      	b.n	800a690 <__gethex+0xc4>
 800a6f2:	4631      	mov	r1, r6
 800a6f4:	e7de      	b.n	800a6b4 <__gethex+0xe8>
 800a6f6:	eba6 0309 	sub.w	r3, r6, r9
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	2b07      	cmp	r3, #7
 800a700:	dc0a      	bgt.n	800a718 <__gethex+0x14c>
 800a702:	9801      	ldr	r0, [sp, #4]
 800a704:	f7fd ff82 	bl	800860c <_Balloc>
 800a708:	4604      	mov	r4, r0
 800a70a:	b940      	cbnz	r0, 800a71e <__gethex+0x152>
 800a70c:	4b5c      	ldr	r3, [pc, #368]	@ (800a880 <__gethex+0x2b4>)
 800a70e:	4602      	mov	r2, r0
 800a710:	21e4      	movs	r1, #228	@ 0xe4
 800a712:	485c      	ldr	r0, [pc, #368]	@ (800a884 <__gethex+0x2b8>)
 800a714:	f7fd f8ba 	bl	800788c <__assert_func>
 800a718:	3101      	adds	r1, #1
 800a71a:	105b      	asrs	r3, r3, #1
 800a71c:	e7ef      	b.n	800a6fe <__gethex+0x132>
 800a71e:	f100 0a14 	add.w	sl, r0, #20
 800a722:	2300      	movs	r3, #0
 800a724:	4655      	mov	r5, sl
 800a726:	469b      	mov	fp, r3
 800a728:	45b1      	cmp	r9, r6
 800a72a:	d337      	bcc.n	800a79c <__gethex+0x1d0>
 800a72c:	f845 bb04 	str.w	fp, [r5], #4
 800a730:	eba5 050a 	sub.w	r5, r5, sl
 800a734:	10ad      	asrs	r5, r5, #2
 800a736:	6125      	str	r5, [r4, #16]
 800a738:	4658      	mov	r0, fp
 800a73a:	f7fe f859 	bl	80087f0 <__hi0bits>
 800a73e:	016d      	lsls	r5, r5, #5
 800a740:	f8d8 6000 	ldr.w	r6, [r8]
 800a744:	1a2d      	subs	r5, r5, r0
 800a746:	42b5      	cmp	r5, r6
 800a748:	dd54      	ble.n	800a7f4 <__gethex+0x228>
 800a74a:	1bad      	subs	r5, r5, r6
 800a74c:	4629      	mov	r1, r5
 800a74e:	4620      	mov	r0, r4
 800a750:	f7fe fbe5 	bl	8008f1e <__any_on>
 800a754:	4681      	mov	r9, r0
 800a756:	b178      	cbz	r0, 800a778 <__gethex+0x1ac>
 800a758:	1e6b      	subs	r3, r5, #1
 800a75a:	1159      	asrs	r1, r3, #5
 800a75c:	f003 021f 	and.w	r2, r3, #31
 800a760:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a764:	f04f 0901 	mov.w	r9, #1
 800a768:	fa09 f202 	lsl.w	r2, r9, r2
 800a76c:	420a      	tst	r2, r1
 800a76e:	d003      	beq.n	800a778 <__gethex+0x1ac>
 800a770:	454b      	cmp	r3, r9
 800a772:	dc36      	bgt.n	800a7e2 <__gethex+0x216>
 800a774:	f04f 0902 	mov.w	r9, #2
 800a778:	4629      	mov	r1, r5
 800a77a:	4620      	mov	r0, r4
 800a77c:	f7ff febf 	bl	800a4fe <rshift>
 800a780:	442f      	add	r7, r5
 800a782:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a786:	42bb      	cmp	r3, r7
 800a788:	da42      	bge.n	800a810 <__gethex+0x244>
 800a78a:	9801      	ldr	r0, [sp, #4]
 800a78c:	4621      	mov	r1, r4
 800a78e:	f7fd ff7d 	bl	800868c <_Bfree>
 800a792:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a794:	2300      	movs	r3, #0
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	25a3      	movs	r5, #163	@ 0xa3
 800a79a:	e793      	b.n	800a6c4 <__gethex+0xf8>
 800a79c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a7a0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a7a2:	d012      	beq.n	800a7ca <__gethex+0x1fe>
 800a7a4:	2b20      	cmp	r3, #32
 800a7a6:	d104      	bne.n	800a7b2 <__gethex+0x1e6>
 800a7a8:	f845 bb04 	str.w	fp, [r5], #4
 800a7ac:	f04f 0b00 	mov.w	fp, #0
 800a7b0:	465b      	mov	r3, fp
 800a7b2:	7830      	ldrb	r0, [r6, #0]
 800a7b4:	9303      	str	r3, [sp, #12]
 800a7b6:	f7ff fef4 	bl	800a5a2 <__hexdig_fun>
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	f000 000f 	and.w	r0, r0, #15
 800a7c0:	4098      	lsls	r0, r3
 800a7c2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a7c6:	3304      	adds	r3, #4
 800a7c8:	e7ae      	b.n	800a728 <__gethex+0x15c>
 800a7ca:	45b1      	cmp	r9, r6
 800a7cc:	d8ea      	bhi.n	800a7a4 <__gethex+0x1d8>
 800a7ce:	492b      	ldr	r1, [pc, #172]	@ (800a87c <__gethex+0x2b0>)
 800a7d0:	9303      	str	r3, [sp, #12]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	f7ff fe4f 	bl	800a478 <strncmp>
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d1e1      	bne.n	800a7a4 <__gethex+0x1d8>
 800a7e0:	e7a2      	b.n	800a728 <__gethex+0x15c>
 800a7e2:	1ea9      	subs	r1, r5, #2
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f7fe fb9a 	bl	8008f1e <__any_on>
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	d0c2      	beq.n	800a774 <__gethex+0x1a8>
 800a7ee:	f04f 0903 	mov.w	r9, #3
 800a7f2:	e7c1      	b.n	800a778 <__gethex+0x1ac>
 800a7f4:	da09      	bge.n	800a80a <__gethex+0x23e>
 800a7f6:	1b75      	subs	r5, r6, r5
 800a7f8:	4621      	mov	r1, r4
 800a7fa:	9801      	ldr	r0, [sp, #4]
 800a7fc:	462a      	mov	r2, r5
 800a7fe:	f7fe f955 	bl	8008aac <__lshift>
 800a802:	1b7f      	subs	r7, r7, r5
 800a804:	4604      	mov	r4, r0
 800a806:	f100 0a14 	add.w	sl, r0, #20
 800a80a:	f04f 0900 	mov.w	r9, #0
 800a80e:	e7b8      	b.n	800a782 <__gethex+0x1b6>
 800a810:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a814:	42bd      	cmp	r5, r7
 800a816:	dd6f      	ble.n	800a8f8 <__gethex+0x32c>
 800a818:	1bed      	subs	r5, r5, r7
 800a81a:	42ae      	cmp	r6, r5
 800a81c:	dc34      	bgt.n	800a888 <__gethex+0x2bc>
 800a81e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a822:	2b02      	cmp	r3, #2
 800a824:	d022      	beq.n	800a86c <__gethex+0x2a0>
 800a826:	2b03      	cmp	r3, #3
 800a828:	d024      	beq.n	800a874 <__gethex+0x2a8>
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d115      	bne.n	800a85a <__gethex+0x28e>
 800a82e:	42ae      	cmp	r6, r5
 800a830:	d113      	bne.n	800a85a <__gethex+0x28e>
 800a832:	2e01      	cmp	r6, #1
 800a834:	d10b      	bne.n	800a84e <__gethex+0x282>
 800a836:	9a02      	ldr	r2, [sp, #8]
 800a838:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a83c:	6013      	str	r3, [r2, #0]
 800a83e:	2301      	movs	r3, #1
 800a840:	6123      	str	r3, [r4, #16]
 800a842:	f8ca 3000 	str.w	r3, [sl]
 800a846:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a848:	2562      	movs	r5, #98	@ 0x62
 800a84a:	601c      	str	r4, [r3, #0]
 800a84c:	e73a      	b.n	800a6c4 <__gethex+0xf8>
 800a84e:	1e71      	subs	r1, r6, #1
 800a850:	4620      	mov	r0, r4
 800a852:	f7fe fb64 	bl	8008f1e <__any_on>
 800a856:	2800      	cmp	r0, #0
 800a858:	d1ed      	bne.n	800a836 <__gethex+0x26a>
 800a85a:	9801      	ldr	r0, [sp, #4]
 800a85c:	4621      	mov	r1, r4
 800a85e:	f7fd ff15 	bl	800868c <_Bfree>
 800a862:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a864:	2300      	movs	r3, #0
 800a866:	6013      	str	r3, [r2, #0]
 800a868:	2550      	movs	r5, #80	@ 0x50
 800a86a:	e72b      	b.n	800a6c4 <__gethex+0xf8>
 800a86c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1f3      	bne.n	800a85a <__gethex+0x28e>
 800a872:	e7e0      	b.n	800a836 <__gethex+0x26a>
 800a874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a876:	2b00      	cmp	r3, #0
 800a878:	d1dd      	bne.n	800a836 <__gethex+0x26a>
 800a87a:	e7ee      	b.n	800a85a <__gethex+0x28e>
 800a87c:	0800b07b 	.word	0x0800b07b
 800a880:	0800b011 	.word	0x0800b011
 800a884:	0800b096 	.word	0x0800b096
 800a888:	1e6f      	subs	r7, r5, #1
 800a88a:	f1b9 0f00 	cmp.w	r9, #0
 800a88e:	d130      	bne.n	800a8f2 <__gethex+0x326>
 800a890:	b127      	cbz	r7, 800a89c <__gethex+0x2d0>
 800a892:	4639      	mov	r1, r7
 800a894:	4620      	mov	r0, r4
 800a896:	f7fe fb42 	bl	8008f1e <__any_on>
 800a89a:	4681      	mov	r9, r0
 800a89c:	117a      	asrs	r2, r7, #5
 800a89e:	2301      	movs	r3, #1
 800a8a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a8a4:	f007 071f 	and.w	r7, r7, #31
 800a8a8:	40bb      	lsls	r3, r7
 800a8aa:	4213      	tst	r3, r2
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	bf18      	it	ne
 800a8b2:	f049 0902 	orrne.w	r9, r9, #2
 800a8b6:	f7ff fe22 	bl	800a4fe <rshift>
 800a8ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a8be:	1b76      	subs	r6, r6, r5
 800a8c0:	2502      	movs	r5, #2
 800a8c2:	f1b9 0f00 	cmp.w	r9, #0
 800a8c6:	d047      	beq.n	800a958 <__gethex+0x38c>
 800a8c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	d015      	beq.n	800a8fc <__gethex+0x330>
 800a8d0:	2b03      	cmp	r3, #3
 800a8d2:	d017      	beq.n	800a904 <__gethex+0x338>
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d109      	bne.n	800a8ec <__gethex+0x320>
 800a8d8:	f019 0f02 	tst.w	r9, #2
 800a8dc:	d006      	beq.n	800a8ec <__gethex+0x320>
 800a8de:	f8da 3000 	ldr.w	r3, [sl]
 800a8e2:	ea49 0903 	orr.w	r9, r9, r3
 800a8e6:	f019 0f01 	tst.w	r9, #1
 800a8ea:	d10e      	bne.n	800a90a <__gethex+0x33e>
 800a8ec:	f045 0510 	orr.w	r5, r5, #16
 800a8f0:	e032      	b.n	800a958 <__gethex+0x38c>
 800a8f2:	f04f 0901 	mov.w	r9, #1
 800a8f6:	e7d1      	b.n	800a89c <__gethex+0x2d0>
 800a8f8:	2501      	movs	r5, #1
 800a8fa:	e7e2      	b.n	800a8c2 <__gethex+0x2f6>
 800a8fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8fe:	f1c3 0301 	rsb	r3, r3, #1
 800a902:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a906:	2b00      	cmp	r3, #0
 800a908:	d0f0      	beq.n	800a8ec <__gethex+0x320>
 800a90a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a90e:	f104 0314 	add.w	r3, r4, #20
 800a912:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a916:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a91a:	f04f 0c00 	mov.w	ip, #0
 800a91e:	4618      	mov	r0, r3
 800a920:	f853 2b04 	ldr.w	r2, [r3], #4
 800a924:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a928:	d01b      	beq.n	800a962 <__gethex+0x396>
 800a92a:	3201      	adds	r2, #1
 800a92c:	6002      	str	r2, [r0, #0]
 800a92e:	2d02      	cmp	r5, #2
 800a930:	f104 0314 	add.w	r3, r4, #20
 800a934:	d13c      	bne.n	800a9b0 <__gethex+0x3e4>
 800a936:	f8d8 2000 	ldr.w	r2, [r8]
 800a93a:	3a01      	subs	r2, #1
 800a93c:	42b2      	cmp	r2, r6
 800a93e:	d109      	bne.n	800a954 <__gethex+0x388>
 800a940:	1171      	asrs	r1, r6, #5
 800a942:	2201      	movs	r2, #1
 800a944:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a948:	f006 061f 	and.w	r6, r6, #31
 800a94c:	fa02 f606 	lsl.w	r6, r2, r6
 800a950:	421e      	tst	r6, r3
 800a952:	d13a      	bne.n	800a9ca <__gethex+0x3fe>
 800a954:	f045 0520 	orr.w	r5, r5, #32
 800a958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a95a:	601c      	str	r4, [r3, #0]
 800a95c:	9b02      	ldr	r3, [sp, #8]
 800a95e:	601f      	str	r7, [r3, #0]
 800a960:	e6b0      	b.n	800a6c4 <__gethex+0xf8>
 800a962:	4299      	cmp	r1, r3
 800a964:	f843 cc04 	str.w	ip, [r3, #-4]
 800a968:	d8d9      	bhi.n	800a91e <__gethex+0x352>
 800a96a:	68a3      	ldr	r3, [r4, #8]
 800a96c:	459b      	cmp	fp, r3
 800a96e:	db17      	blt.n	800a9a0 <__gethex+0x3d4>
 800a970:	6861      	ldr	r1, [r4, #4]
 800a972:	9801      	ldr	r0, [sp, #4]
 800a974:	3101      	adds	r1, #1
 800a976:	f7fd fe49 	bl	800860c <_Balloc>
 800a97a:	4681      	mov	r9, r0
 800a97c:	b918      	cbnz	r0, 800a986 <__gethex+0x3ba>
 800a97e:	4b1a      	ldr	r3, [pc, #104]	@ (800a9e8 <__gethex+0x41c>)
 800a980:	4602      	mov	r2, r0
 800a982:	2184      	movs	r1, #132	@ 0x84
 800a984:	e6c5      	b.n	800a712 <__gethex+0x146>
 800a986:	6922      	ldr	r2, [r4, #16]
 800a988:	3202      	adds	r2, #2
 800a98a:	f104 010c 	add.w	r1, r4, #12
 800a98e:	0092      	lsls	r2, r2, #2
 800a990:	300c      	adds	r0, #12
 800a992:	f7ff fd83 	bl	800a49c <memcpy>
 800a996:	4621      	mov	r1, r4
 800a998:	9801      	ldr	r0, [sp, #4]
 800a99a:	f7fd fe77 	bl	800868c <_Bfree>
 800a99e:	464c      	mov	r4, r9
 800a9a0:	6923      	ldr	r3, [r4, #16]
 800a9a2:	1c5a      	adds	r2, r3, #1
 800a9a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a9a8:	6122      	str	r2, [r4, #16]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	615a      	str	r2, [r3, #20]
 800a9ae:	e7be      	b.n	800a92e <__gethex+0x362>
 800a9b0:	6922      	ldr	r2, [r4, #16]
 800a9b2:	455a      	cmp	r2, fp
 800a9b4:	dd0b      	ble.n	800a9ce <__gethex+0x402>
 800a9b6:	2101      	movs	r1, #1
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f7ff fda0 	bl	800a4fe <rshift>
 800a9be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9c2:	3701      	adds	r7, #1
 800a9c4:	42bb      	cmp	r3, r7
 800a9c6:	f6ff aee0 	blt.w	800a78a <__gethex+0x1be>
 800a9ca:	2501      	movs	r5, #1
 800a9cc:	e7c2      	b.n	800a954 <__gethex+0x388>
 800a9ce:	f016 061f 	ands.w	r6, r6, #31
 800a9d2:	d0fa      	beq.n	800a9ca <__gethex+0x3fe>
 800a9d4:	4453      	add	r3, sl
 800a9d6:	f1c6 0620 	rsb	r6, r6, #32
 800a9da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a9de:	f7fd ff07 	bl	80087f0 <__hi0bits>
 800a9e2:	42b0      	cmp	r0, r6
 800a9e4:	dbe7      	blt.n	800a9b6 <__gethex+0x3ea>
 800a9e6:	e7f0      	b.n	800a9ca <__gethex+0x3fe>
 800a9e8:	0800b011 	.word	0x0800b011

0800a9ec <L_shift>:
 800a9ec:	f1c2 0208 	rsb	r2, r2, #8
 800a9f0:	0092      	lsls	r2, r2, #2
 800a9f2:	b570      	push	{r4, r5, r6, lr}
 800a9f4:	f1c2 0620 	rsb	r6, r2, #32
 800a9f8:	6843      	ldr	r3, [r0, #4]
 800a9fa:	6804      	ldr	r4, [r0, #0]
 800a9fc:	fa03 f506 	lsl.w	r5, r3, r6
 800aa00:	432c      	orrs	r4, r5
 800aa02:	40d3      	lsrs	r3, r2
 800aa04:	6004      	str	r4, [r0, #0]
 800aa06:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa0a:	4288      	cmp	r0, r1
 800aa0c:	d3f4      	bcc.n	800a9f8 <L_shift+0xc>
 800aa0e:	bd70      	pop	{r4, r5, r6, pc}

0800aa10 <__match>:
 800aa10:	b530      	push	{r4, r5, lr}
 800aa12:	6803      	ldr	r3, [r0, #0]
 800aa14:	3301      	adds	r3, #1
 800aa16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa1a:	b914      	cbnz	r4, 800aa22 <__match+0x12>
 800aa1c:	6003      	str	r3, [r0, #0]
 800aa1e:	2001      	movs	r0, #1
 800aa20:	bd30      	pop	{r4, r5, pc}
 800aa22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa26:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aa2a:	2d19      	cmp	r5, #25
 800aa2c:	bf98      	it	ls
 800aa2e:	3220      	addls	r2, #32
 800aa30:	42a2      	cmp	r2, r4
 800aa32:	d0f0      	beq.n	800aa16 <__match+0x6>
 800aa34:	2000      	movs	r0, #0
 800aa36:	e7f3      	b.n	800aa20 <__match+0x10>

0800aa38 <__hexnan>:
 800aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	680b      	ldr	r3, [r1, #0]
 800aa3e:	6801      	ldr	r1, [r0, #0]
 800aa40:	115e      	asrs	r6, r3, #5
 800aa42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa46:	f013 031f 	ands.w	r3, r3, #31
 800aa4a:	b087      	sub	sp, #28
 800aa4c:	bf18      	it	ne
 800aa4e:	3604      	addne	r6, #4
 800aa50:	2500      	movs	r5, #0
 800aa52:	1f37      	subs	r7, r6, #4
 800aa54:	4682      	mov	sl, r0
 800aa56:	4690      	mov	r8, r2
 800aa58:	9301      	str	r3, [sp, #4]
 800aa5a:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa5e:	46b9      	mov	r9, r7
 800aa60:	463c      	mov	r4, r7
 800aa62:	9502      	str	r5, [sp, #8]
 800aa64:	46ab      	mov	fp, r5
 800aa66:	784a      	ldrb	r2, [r1, #1]
 800aa68:	1c4b      	adds	r3, r1, #1
 800aa6a:	9303      	str	r3, [sp, #12]
 800aa6c:	b342      	cbz	r2, 800aac0 <__hexnan+0x88>
 800aa6e:	4610      	mov	r0, r2
 800aa70:	9105      	str	r1, [sp, #20]
 800aa72:	9204      	str	r2, [sp, #16]
 800aa74:	f7ff fd95 	bl	800a5a2 <__hexdig_fun>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	d151      	bne.n	800ab20 <__hexnan+0xe8>
 800aa7c:	9a04      	ldr	r2, [sp, #16]
 800aa7e:	9905      	ldr	r1, [sp, #20]
 800aa80:	2a20      	cmp	r2, #32
 800aa82:	d818      	bhi.n	800aab6 <__hexnan+0x7e>
 800aa84:	9b02      	ldr	r3, [sp, #8]
 800aa86:	459b      	cmp	fp, r3
 800aa88:	dd13      	ble.n	800aab2 <__hexnan+0x7a>
 800aa8a:	454c      	cmp	r4, r9
 800aa8c:	d206      	bcs.n	800aa9c <__hexnan+0x64>
 800aa8e:	2d07      	cmp	r5, #7
 800aa90:	dc04      	bgt.n	800aa9c <__hexnan+0x64>
 800aa92:	462a      	mov	r2, r5
 800aa94:	4649      	mov	r1, r9
 800aa96:	4620      	mov	r0, r4
 800aa98:	f7ff ffa8 	bl	800a9ec <L_shift>
 800aa9c:	4544      	cmp	r4, r8
 800aa9e:	d952      	bls.n	800ab46 <__hexnan+0x10e>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f1a4 0904 	sub.w	r9, r4, #4
 800aaa6:	f844 3c04 	str.w	r3, [r4, #-4]
 800aaaa:	f8cd b008 	str.w	fp, [sp, #8]
 800aaae:	464c      	mov	r4, r9
 800aab0:	461d      	mov	r5, r3
 800aab2:	9903      	ldr	r1, [sp, #12]
 800aab4:	e7d7      	b.n	800aa66 <__hexnan+0x2e>
 800aab6:	2a29      	cmp	r2, #41	@ 0x29
 800aab8:	d157      	bne.n	800ab6a <__hexnan+0x132>
 800aaba:	3102      	adds	r1, #2
 800aabc:	f8ca 1000 	str.w	r1, [sl]
 800aac0:	f1bb 0f00 	cmp.w	fp, #0
 800aac4:	d051      	beq.n	800ab6a <__hexnan+0x132>
 800aac6:	454c      	cmp	r4, r9
 800aac8:	d206      	bcs.n	800aad8 <__hexnan+0xa0>
 800aaca:	2d07      	cmp	r5, #7
 800aacc:	dc04      	bgt.n	800aad8 <__hexnan+0xa0>
 800aace:	462a      	mov	r2, r5
 800aad0:	4649      	mov	r1, r9
 800aad2:	4620      	mov	r0, r4
 800aad4:	f7ff ff8a 	bl	800a9ec <L_shift>
 800aad8:	4544      	cmp	r4, r8
 800aada:	d936      	bls.n	800ab4a <__hexnan+0x112>
 800aadc:	f1a8 0204 	sub.w	r2, r8, #4
 800aae0:	4623      	mov	r3, r4
 800aae2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aae6:	f842 1f04 	str.w	r1, [r2, #4]!
 800aaea:	429f      	cmp	r7, r3
 800aaec:	d2f9      	bcs.n	800aae2 <__hexnan+0xaa>
 800aaee:	1b3b      	subs	r3, r7, r4
 800aaf0:	f023 0303 	bic.w	r3, r3, #3
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	3401      	adds	r4, #1
 800aaf8:	3e03      	subs	r6, #3
 800aafa:	42b4      	cmp	r4, r6
 800aafc:	bf88      	it	hi
 800aafe:	2304      	movhi	r3, #4
 800ab00:	4443      	add	r3, r8
 800ab02:	2200      	movs	r2, #0
 800ab04:	f843 2b04 	str.w	r2, [r3], #4
 800ab08:	429f      	cmp	r7, r3
 800ab0a:	d2fb      	bcs.n	800ab04 <__hexnan+0xcc>
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	b91b      	cbnz	r3, 800ab18 <__hexnan+0xe0>
 800ab10:	4547      	cmp	r7, r8
 800ab12:	d128      	bne.n	800ab66 <__hexnan+0x12e>
 800ab14:	2301      	movs	r3, #1
 800ab16:	603b      	str	r3, [r7, #0]
 800ab18:	2005      	movs	r0, #5
 800ab1a:	b007      	add	sp, #28
 800ab1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab20:	3501      	adds	r5, #1
 800ab22:	2d08      	cmp	r5, #8
 800ab24:	f10b 0b01 	add.w	fp, fp, #1
 800ab28:	dd06      	ble.n	800ab38 <__hexnan+0x100>
 800ab2a:	4544      	cmp	r4, r8
 800ab2c:	d9c1      	bls.n	800aab2 <__hexnan+0x7a>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab34:	2501      	movs	r5, #1
 800ab36:	3c04      	subs	r4, #4
 800ab38:	6822      	ldr	r2, [r4, #0]
 800ab3a:	f000 000f 	and.w	r0, r0, #15
 800ab3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ab42:	6020      	str	r0, [r4, #0]
 800ab44:	e7b5      	b.n	800aab2 <__hexnan+0x7a>
 800ab46:	2508      	movs	r5, #8
 800ab48:	e7b3      	b.n	800aab2 <__hexnan+0x7a>
 800ab4a:	9b01      	ldr	r3, [sp, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d0dd      	beq.n	800ab0c <__hexnan+0xd4>
 800ab50:	f1c3 0320 	rsb	r3, r3, #32
 800ab54:	f04f 32ff 	mov.w	r2, #4294967295
 800ab58:	40da      	lsrs	r2, r3
 800ab5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab5e:	4013      	ands	r3, r2
 800ab60:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab64:	e7d2      	b.n	800ab0c <__hexnan+0xd4>
 800ab66:	3f04      	subs	r7, #4
 800ab68:	e7d0      	b.n	800ab0c <__hexnan+0xd4>
 800ab6a:	2004      	movs	r0, #4
 800ab6c:	e7d5      	b.n	800ab1a <__hexnan+0xe2>

0800ab6e <__ascii_mbtowc>:
 800ab6e:	b082      	sub	sp, #8
 800ab70:	b901      	cbnz	r1, 800ab74 <__ascii_mbtowc+0x6>
 800ab72:	a901      	add	r1, sp, #4
 800ab74:	b142      	cbz	r2, 800ab88 <__ascii_mbtowc+0x1a>
 800ab76:	b14b      	cbz	r3, 800ab8c <__ascii_mbtowc+0x1e>
 800ab78:	7813      	ldrb	r3, [r2, #0]
 800ab7a:	600b      	str	r3, [r1, #0]
 800ab7c:	7812      	ldrb	r2, [r2, #0]
 800ab7e:	1e10      	subs	r0, r2, #0
 800ab80:	bf18      	it	ne
 800ab82:	2001      	movne	r0, #1
 800ab84:	b002      	add	sp, #8
 800ab86:	4770      	bx	lr
 800ab88:	4610      	mov	r0, r2
 800ab8a:	e7fb      	b.n	800ab84 <__ascii_mbtowc+0x16>
 800ab8c:	f06f 0001 	mvn.w	r0, #1
 800ab90:	e7f8      	b.n	800ab84 <__ascii_mbtowc+0x16>

0800ab92 <_realloc_r>:
 800ab92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab96:	4607      	mov	r7, r0
 800ab98:	4614      	mov	r4, r2
 800ab9a:	460d      	mov	r5, r1
 800ab9c:	b921      	cbnz	r1, 800aba8 <_realloc_r+0x16>
 800ab9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aba2:	4611      	mov	r1, r2
 800aba4:	f7fb bd46 	b.w	8006634 <_malloc_r>
 800aba8:	b92a      	cbnz	r2, 800abb6 <_realloc_r+0x24>
 800abaa:	f7fd fce5 	bl	8008578 <_free_r>
 800abae:	4625      	mov	r5, r4
 800abb0:	4628      	mov	r0, r5
 800abb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abb6:	f000 f8ef 	bl	800ad98 <_malloc_usable_size_r>
 800abba:	4284      	cmp	r4, r0
 800abbc:	4606      	mov	r6, r0
 800abbe:	d802      	bhi.n	800abc6 <_realloc_r+0x34>
 800abc0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abc4:	d8f4      	bhi.n	800abb0 <_realloc_r+0x1e>
 800abc6:	4621      	mov	r1, r4
 800abc8:	4638      	mov	r0, r7
 800abca:	f7fb fd33 	bl	8006634 <_malloc_r>
 800abce:	4680      	mov	r8, r0
 800abd0:	b908      	cbnz	r0, 800abd6 <_realloc_r+0x44>
 800abd2:	4645      	mov	r5, r8
 800abd4:	e7ec      	b.n	800abb0 <_realloc_r+0x1e>
 800abd6:	42b4      	cmp	r4, r6
 800abd8:	4622      	mov	r2, r4
 800abda:	4629      	mov	r1, r5
 800abdc:	bf28      	it	cs
 800abde:	4632      	movcs	r2, r6
 800abe0:	f7ff fc5c 	bl	800a49c <memcpy>
 800abe4:	4629      	mov	r1, r5
 800abe6:	4638      	mov	r0, r7
 800abe8:	f7fd fcc6 	bl	8008578 <_free_r>
 800abec:	e7f1      	b.n	800abd2 <_realloc_r+0x40>

0800abee <__ascii_wctomb>:
 800abee:	4603      	mov	r3, r0
 800abf0:	4608      	mov	r0, r1
 800abf2:	b141      	cbz	r1, 800ac06 <__ascii_wctomb+0x18>
 800abf4:	2aff      	cmp	r2, #255	@ 0xff
 800abf6:	d904      	bls.n	800ac02 <__ascii_wctomb+0x14>
 800abf8:	228a      	movs	r2, #138	@ 0x8a
 800abfa:	601a      	str	r2, [r3, #0]
 800abfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ac00:	4770      	bx	lr
 800ac02:	700a      	strb	r2, [r1, #0]
 800ac04:	2001      	movs	r0, #1
 800ac06:	4770      	bx	lr

0800ac08 <__swhatbuf_r>:
 800ac08:	b570      	push	{r4, r5, r6, lr}
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac10:	2900      	cmp	r1, #0
 800ac12:	b096      	sub	sp, #88	@ 0x58
 800ac14:	4615      	mov	r5, r2
 800ac16:	461e      	mov	r6, r3
 800ac18:	da0d      	bge.n	800ac36 <__swhatbuf_r+0x2e>
 800ac1a:	89a3      	ldrh	r3, [r4, #12]
 800ac1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac20:	f04f 0100 	mov.w	r1, #0
 800ac24:	bf14      	ite	ne
 800ac26:	2340      	movne	r3, #64	@ 0x40
 800ac28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	6031      	str	r1, [r6, #0]
 800ac30:	602b      	str	r3, [r5, #0]
 800ac32:	b016      	add	sp, #88	@ 0x58
 800ac34:	bd70      	pop	{r4, r5, r6, pc}
 800ac36:	466a      	mov	r2, sp
 800ac38:	f000 f878 	bl	800ad2c <_fstat_r>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	dbec      	blt.n	800ac1a <__swhatbuf_r+0x12>
 800ac40:	9901      	ldr	r1, [sp, #4]
 800ac42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac4a:	4259      	negs	r1, r3
 800ac4c:	4159      	adcs	r1, r3
 800ac4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac52:	e7eb      	b.n	800ac2c <__swhatbuf_r+0x24>

0800ac54 <__smakebuf_r>:
 800ac54:	898b      	ldrh	r3, [r1, #12]
 800ac56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac58:	079d      	lsls	r5, r3, #30
 800ac5a:	4606      	mov	r6, r0
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	d507      	bpl.n	800ac70 <__smakebuf_r+0x1c>
 800ac60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	6123      	str	r3, [r4, #16]
 800ac68:	2301      	movs	r3, #1
 800ac6a:	6163      	str	r3, [r4, #20]
 800ac6c:	b003      	add	sp, #12
 800ac6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac70:	ab01      	add	r3, sp, #4
 800ac72:	466a      	mov	r2, sp
 800ac74:	f7ff ffc8 	bl	800ac08 <__swhatbuf_r>
 800ac78:	9f00      	ldr	r7, [sp, #0]
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	4639      	mov	r1, r7
 800ac7e:	4630      	mov	r0, r6
 800ac80:	f7fb fcd8 	bl	8006634 <_malloc_r>
 800ac84:	b948      	cbnz	r0, 800ac9a <__smakebuf_r+0x46>
 800ac86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac8a:	059a      	lsls	r2, r3, #22
 800ac8c:	d4ee      	bmi.n	800ac6c <__smakebuf_r+0x18>
 800ac8e:	f023 0303 	bic.w	r3, r3, #3
 800ac92:	f043 0302 	orr.w	r3, r3, #2
 800ac96:	81a3      	strh	r3, [r4, #12]
 800ac98:	e7e2      	b.n	800ac60 <__smakebuf_r+0xc>
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	6020      	str	r0, [r4, #0]
 800ac9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aca2:	81a3      	strh	r3, [r4, #12]
 800aca4:	9b01      	ldr	r3, [sp, #4]
 800aca6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800acaa:	b15b      	cbz	r3, 800acc4 <__smakebuf_r+0x70>
 800acac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acb0:	4630      	mov	r0, r6
 800acb2:	f000 f84d 	bl	800ad50 <_isatty_r>
 800acb6:	b128      	cbz	r0, 800acc4 <__smakebuf_r+0x70>
 800acb8:	89a3      	ldrh	r3, [r4, #12]
 800acba:	f023 0303 	bic.w	r3, r3, #3
 800acbe:	f043 0301 	orr.w	r3, r3, #1
 800acc2:	81a3      	strh	r3, [r4, #12]
 800acc4:	89a3      	ldrh	r3, [r4, #12]
 800acc6:	431d      	orrs	r5, r3
 800acc8:	81a5      	strh	r5, [r4, #12]
 800acca:	e7cf      	b.n	800ac6c <__smakebuf_r+0x18>

0800accc <_raise_r>:
 800accc:	291f      	cmp	r1, #31
 800acce:	b538      	push	{r3, r4, r5, lr}
 800acd0:	4605      	mov	r5, r0
 800acd2:	460c      	mov	r4, r1
 800acd4:	d904      	bls.n	800ace0 <_raise_r+0x14>
 800acd6:	2316      	movs	r3, #22
 800acd8:	6003      	str	r3, [r0, #0]
 800acda:	f04f 30ff 	mov.w	r0, #4294967295
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ace2:	b112      	cbz	r2, 800acea <_raise_r+0x1e>
 800ace4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ace8:	b94b      	cbnz	r3, 800acfe <_raise_r+0x32>
 800acea:	4628      	mov	r0, r5
 800acec:	f000 f852 	bl	800ad94 <_getpid_r>
 800acf0:	4622      	mov	r2, r4
 800acf2:	4601      	mov	r1, r0
 800acf4:	4628      	mov	r0, r5
 800acf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acfa:	f000 b839 	b.w	800ad70 <_kill_r>
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d00a      	beq.n	800ad18 <_raise_r+0x4c>
 800ad02:	1c59      	adds	r1, r3, #1
 800ad04:	d103      	bne.n	800ad0e <_raise_r+0x42>
 800ad06:	2316      	movs	r3, #22
 800ad08:	6003      	str	r3, [r0, #0]
 800ad0a:	2001      	movs	r0, #1
 800ad0c:	e7e7      	b.n	800acde <_raise_r+0x12>
 800ad0e:	2100      	movs	r1, #0
 800ad10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad14:	4620      	mov	r0, r4
 800ad16:	4798      	blx	r3
 800ad18:	2000      	movs	r0, #0
 800ad1a:	e7e0      	b.n	800acde <_raise_r+0x12>

0800ad1c <raise>:
 800ad1c:	4b02      	ldr	r3, [pc, #8]	@ (800ad28 <raise+0xc>)
 800ad1e:	4601      	mov	r1, r0
 800ad20:	6818      	ldr	r0, [r3, #0]
 800ad22:	f7ff bfd3 	b.w	800accc <_raise_r>
 800ad26:	bf00      	nop
 800ad28:	200400c0 	.word	0x200400c0

0800ad2c <_fstat_r>:
 800ad2c:	b538      	push	{r3, r4, r5, lr}
 800ad2e:	4d07      	ldr	r5, [pc, #28]	@ (800ad4c <_fstat_r+0x20>)
 800ad30:	2300      	movs	r3, #0
 800ad32:	4604      	mov	r4, r0
 800ad34:	4608      	mov	r0, r1
 800ad36:	4611      	mov	r1, r2
 800ad38:	602b      	str	r3, [r5, #0]
 800ad3a:	f7f7 ff64 	bl	8002c06 <_fstat>
 800ad3e:	1c43      	adds	r3, r0, #1
 800ad40:	d102      	bne.n	800ad48 <_fstat_r+0x1c>
 800ad42:	682b      	ldr	r3, [r5, #0]
 800ad44:	b103      	cbz	r3, 800ad48 <_fstat_r+0x1c>
 800ad46:	6023      	str	r3, [r4, #0]
 800ad48:	bd38      	pop	{r3, r4, r5, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20040c54 	.word	0x20040c54

0800ad50 <_isatty_r>:
 800ad50:	b538      	push	{r3, r4, r5, lr}
 800ad52:	4d06      	ldr	r5, [pc, #24]	@ (800ad6c <_isatty_r+0x1c>)
 800ad54:	2300      	movs	r3, #0
 800ad56:	4604      	mov	r4, r0
 800ad58:	4608      	mov	r0, r1
 800ad5a:	602b      	str	r3, [r5, #0]
 800ad5c:	f7f7 ff63 	bl	8002c26 <_isatty>
 800ad60:	1c43      	adds	r3, r0, #1
 800ad62:	d102      	bne.n	800ad6a <_isatty_r+0x1a>
 800ad64:	682b      	ldr	r3, [r5, #0]
 800ad66:	b103      	cbz	r3, 800ad6a <_isatty_r+0x1a>
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	bd38      	pop	{r3, r4, r5, pc}
 800ad6c:	20040c54 	.word	0x20040c54

0800ad70 <_kill_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4d07      	ldr	r5, [pc, #28]	@ (800ad90 <_kill_r+0x20>)
 800ad74:	2300      	movs	r3, #0
 800ad76:	4604      	mov	r4, r0
 800ad78:	4608      	mov	r0, r1
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	602b      	str	r3, [r5, #0]
 800ad7e:	f7f7 fee2 	bl	8002b46 <_kill>
 800ad82:	1c43      	adds	r3, r0, #1
 800ad84:	d102      	bne.n	800ad8c <_kill_r+0x1c>
 800ad86:	682b      	ldr	r3, [r5, #0]
 800ad88:	b103      	cbz	r3, 800ad8c <_kill_r+0x1c>
 800ad8a:	6023      	str	r3, [r4, #0]
 800ad8c:	bd38      	pop	{r3, r4, r5, pc}
 800ad8e:	bf00      	nop
 800ad90:	20040c54 	.word	0x20040c54

0800ad94 <_getpid_r>:
 800ad94:	f7f7 becf 	b.w	8002b36 <_getpid>

0800ad98 <_malloc_usable_size_r>:
 800ad98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad9c:	1f18      	subs	r0, r3, #4
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	bfbc      	itt	lt
 800ada2:	580b      	ldrlt	r3, [r1, r0]
 800ada4:	18c0      	addlt	r0, r0, r3
 800ada6:	4770      	bx	lr

0800ada8 <_init>:
 800ada8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adaa:	bf00      	nop
 800adac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adae:	bc08      	pop	{r3}
 800adb0:	469e      	mov	lr, r3
 800adb2:	4770      	bx	lr

0800adb4 <_fini>:
 800adb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb6:	bf00      	nop
 800adb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adba:	bc08      	pop	{r3}
 800adbc:	469e      	mov	lr, r3
 800adbe:	4770      	bx	lr
