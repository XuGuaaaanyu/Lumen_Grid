
Playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abe0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800ada0  0800ada0  0000bda0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b32c  0800b32c  0000d27c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b32c  0800b32c  0000c32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b334  0800b334  0000d27c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b334  0800b334  0000c334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800b33c  0800b33c  0000c33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000027c  20040000  0800b344  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bc0  2004027c  0800b5c0  0000d27c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20040e3c  0800b5c0  0000de3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d27c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b5e  00000000  00000000  0000d2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d6  00000000  00000000  0001ee0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  000211e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab3  00000000  00000000  00021fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dce8  00000000  00000000  00022a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001054f  00000000  00000000  00050743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106041  00000000  00000000  00060c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166cd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f40  00000000  00000000  00166d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0016bc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2004027c 	.word	0x2004027c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ad88 	.word	0x0800ad88

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040280 	.word	0x20040280
 80001fc:	0800ad88 	.word	0x0800ad88

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9be 	b.w	800104c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	468e      	mov	lr, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d962      	bls.n	8000e30 <__udivmoddi4+0xdc>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	b14e      	cbz	r6, 8000d84 <__udivmoddi4+0x30>
 8000d70:	f1c6 0320 	rsb	r3, r6, #32
 8000d74:	fa01 f806 	lsl.w	r8, r1, r6
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	40b7      	lsls	r7, r6
 8000d7e:	ea43 0808 	orr.w	r8, r3, r8
 8000d82:	40b4      	lsls	r4, r6
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d90:	0c23      	lsrs	r3, r4, #16
 8000d92:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000da8:	f080 80ea 	bcs.w	8000f80 <__udivmoddi4+0x22c>
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f240 80e7 	bls.w	8000f80 <__udivmoddi4+0x22c>
 8000db2:	3902      	subs	r1, #2
 8000db4:	443b      	add	r3, r7
 8000db6:	1a9a      	subs	r2, r3, r2
 8000db8:	b2a3      	uxth	r3, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dca:	459c      	cmp	ip, r3
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x8e>
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd4:	f080 80d6 	bcs.w	8000f84 <__udivmoddi4+0x230>
 8000dd8:	459c      	cmp	ip, r3
 8000dda:	f240 80d3 	bls.w	8000f84 <__udivmoddi4+0x230>
 8000dde:	443b      	add	r3, r7
 8000de0:	3802      	subs	r0, #2
 8000de2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de6:	eba3 030c 	sub.w	r3, r3, ip
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11d      	cbz	r5, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40f3      	lsrs	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	e9c5 3200 	strd	r3, r2, [r5]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d905      	bls.n	8000e0a <__udivmoddi4+0xb6>
 8000dfe:	b10d      	cbz	r5, 8000e04 <__udivmoddi4+0xb0>
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4608      	mov	r0, r1
 8000e08:	e7f5      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e0a:	fab3 f183 	clz	r1, r3
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d146      	bne.n	8000ea0 <__udivmoddi4+0x14c>
 8000e12:	4573      	cmp	r3, lr
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xc8>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 8105 	bhi.w	8001026 <__udivmoddi4+0x2d2>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4690      	mov	r8, r2
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e5      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e2e:	e7e2      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f000 8090 	beq.w	8000f56 <__udivmoddi4+0x202>
 8000e36:	fab2 f682 	clz	r6, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f040 80a4 	bne.w	8000f88 <__udivmoddi4+0x234>
 8000e40:	1a8a      	subs	r2, r1, r2
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x11e>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x11c>
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f200 80e0 	bhi.w	8001030 <__udivmoddi4+0x2dc>
 8000e70:	46c4      	mov	ip, r8
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e80:	fb02 f404 	mul.w	r4, r2, r4
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x144>
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x142>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f200 80ca 	bhi.w	800102a <__udivmoddi4+0x2d6>
 8000e96:	4602      	mov	r2, r0
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e9e:	e7a5      	b.n	8000dec <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb0:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eca:	0c1c      	lsrs	r4, r3, #16
 8000ecc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x1a0>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	f080 809c 	bcs.w	8001022 <__udivmoddi4+0x2ce>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f240 8099 	bls.w	8001022 <__udivmoddi4+0x2ce>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	443c      	add	r4, r7
 8000ef4:	eba4 040e 	sub.w	r4, r4, lr
 8000ef8:	fa1f fe83 	uxth.w	lr, r3
 8000efc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f00:	fb09 4413 	mls	r4, r9, r3, r4
 8000f04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1ce>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f16:	f080 8082 	bcs.w	800101e <__udivmoddi4+0x2ca>
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d97f      	bls.n	800101e <__udivmoddi4+0x2ca>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f26:	eba4 040c 	sub.w	r4, r4, ip
 8000f2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f2e:	4564      	cmp	r4, ip
 8000f30:	4673      	mov	r3, lr
 8000f32:	46e1      	mov	r9, ip
 8000f34:	d362      	bcc.n	8000ffc <__udivmoddi4+0x2a8>
 8000f36:	d05f      	beq.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x1fe>
 8000f3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f42:	fa04 f606 	lsl.w	r6, r4, r6
 8000f46:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	40cc      	lsrs	r4, r1
 8000f4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f52:	2100      	movs	r1, #0
 8000f54:	e74f      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000f56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5a:	0c01      	lsrs	r1, r0, #16
 8000f5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f60:	b280      	uxth	r0, r0
 8000f62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f66:	463b      	mov	r3, r7
 8000f68:	4638      	mov	r0, r7
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	46b8      	mov	r8, r7
 8000f6e:	46be      	mov	lr, r7
 8000f70:	2620      	movs	r6, #32
 8000f72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f76:	eba2 0208 	sub.w	r2, r2, r8
 8000f7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f7e:	e766      	b.n	8000e4e <__udivmoddi4+0xfa>
 8000f80:	4601      	mov	r1, r0
 8000f82:	e718      	b.n	8000db6 <__udivmoddi4+0x62>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e72c      	b.n	8000de2 <__udivmoddi4+0x8e>
 8000f88:	f1c6 0220 	rsb	r2, r6, #32
 8000f8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f90:	40b7      	lsls	r7, r6
 8000f92:	40b1      	lsls	r1, r6
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa2:	b2bc      	uxth	r4, r7
 8000fa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fae:	fb08 f904 	mul.w	r9, r8, r4
 8000fb2:	40b0      	lsls	r0, r6
 8000fb4:	4589      	cmp	r9, r1
 8000fb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fba:	b280      	uxth	r0, r0
 8000fbc:	d93e      	bls.n	800103c <__udivmoddi4+0x2e8>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc4:	d201      	bcs.n	8000fca <__udivmoddi4+0x276>
 8000fc6:	4589      	cmp	r9, r1
 8000fc8:	d81f      	bhi.n	800100a <__udivmoddi4+0x2b6>
 8000fca:	eba1 0109 	sub.w	r1, r1, r9
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	4542      	cmp	r2, r8
 8000fe2:	d229      	bcs.n	8001038 <__udivmoddi4+0x2e4>
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fea:	d2c4      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000fec:	4542      	cmp	r2, r8
 8000fee:	d2c2      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000ff0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff4:	443a      	add	r2, r7
 8000ff6:	e7be      	b.n	8000f76 <__udivmoddi4+0x222>
 8000ff8:	45f0      	cmp	r8, lr
 8000ffa:	d29d      	bcs.n	8000f38 <__udivmoddi4+0x1e4>
 8000ffc:	ebbe 0302 	subs.w	r3, lr, r2
 8001000:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001004:	3801      	subs	r0, #1
 8001006:	46e1      	mov	r9, ip
 8001008:	e796      	b.n	8000f38 <__udivmoddi4+0x1e4>
 800100a:	eba7 0909 	sub.w	r9, r7, r9
 800100e:	4449      	add	r1, r9
 8001010:	f1a8 0c02 	sub.w	ip, r8, #2
 8001014:	fbb1 f9fe 	udiv	r9, r1, lr
 8001018:	fb09 f804 	mul.w	r8, r9, r4
 800101c:	e7db      	b.n	8000fd6 <__udivmoddi4+0x282>
 800101e:	4673      	mov	r3, lr
 8001020:	e77f      	b.n	8000f22 <__udivmoddi4+0x1ce>
 8001022:	4650      	mov	r0, sl
 8001024:	e766      	b.n	8000ef4 <__udivmoddi4+0x1a0>
 8001026:	4608      	mov	r0, r1
 8001028:	e6fd      	b.n	8000e26 <__udivmoddi4+0xd2>
 800102a:	443b      	add	r3, r7
 800102c:	3a02      	subs	r2, #2
 800102e:	e733      	b.n	8000e98 <__udivmoddi4+0x144>
 8001030:	f1ac 0c02 	sub.w	ip, ip, #2
 8001034:	443b      	add	r3, r7
 8001036:	e71c      	b.n	8000e72 <__udivmoddi4+0x11e>
 8001038:	4649      	mov	r1, r9
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x222>
 800103c:	eba1 0109 	sub.w	r1, r1, r9
 8001040:	46c4      	mov	ip, r8
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fb09 f804 	mul.w	r8, r9, r4
 800104a:	e7c4      	b.n	8000fd6 <__udivmoddi4+0x282>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <_Z7printlnPKc>:

extern UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef hlpuart1;

void println(const char * msg){
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff f921 	bl	80002a0 <strlen>
 800105e:	4603      	mov	r3, r0
 8001060:	b29a      	uxth	r2, r3
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <_Z7printlnPKc+0x28>)
 800106a:	f004 fa27 	bl	80054bc <HAL_UART_Transmit>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20040298 	.word	0x20040298

0800107c <_Z17delayMicrosecondsm>:

void delayMicroseconds(uint32_t us){
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	uint32_t start = DWT->CYCCNT;
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <_Z17delayMicrosecondsm+0x48>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = us * (HAL_RCC_GetHCLKFreq() / 1000000);
 800108a:	f003 f839 	bl	8004100 <HAL_RCC_GetHCLKFreq>
 800108e:	4603      	mov	r3, r0
 8001090:	4a0d      	ldr	r2, [pc, #52]	@ (80010c8 <_Z17delayMicrosecondsm+0x4c>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	0c9a      	lsrs	r2, r3, #18
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	fb02 f303 	mul.w	r3, r2, r3
 800109e:	60bb      	str	r3, [r7, #8]
	while ((DWT->CYCCNT - start) < ticks);
 80010a0:	bf00      	nop
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <_Z17delayMicrosecondsm+0x48>)
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	bf8c      	ite	hi
 80010b0:	2301      	movhi	r3, #1
 80010b2:	2300      	movls	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f3      	bne.n	80010a2 <_Z17delayMicrosecondsm+0x26>
}
 80010ba:	bf00      	nop
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	e0001000 	.word	0xe0001000
 80010c8:	431bde83 	.word	0x431bde83

080010cc <_ZN9Link2UART5closeEv>:
public:
	int8_t open(uint32_t arg) {
		return 0;
	}

	void close() {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_ZN9Link2UART4recvEPhhPt>:

	int16_t recv(uint8_t *buf, uint8_t len, uint16_t *cs = NULL) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71fb      	strb	r3, [r7, #7]
		if (cs)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d002      	beq.n	80010fc <_ZN9Link2UART4recvEPhhPt+0x1c>
			*cs = 0;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	2200      	movs	r2, #0
 80010fa:	801a      	strh	r2, [r3, #0]

		for (uint8_t i = 0; i < len; i++){
 80010fc:	2300      	movs	r3, #0
 80010fe:	75fb      	strb	r3, [r7, #23]
 8001100:	e022      	b.n	8001148 <_ZN9Link2UART4recvEPhhPt+0x68>
			uint8_t byte = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	757b      	strb	r3, [r7, #21]
			HAL_StatusTypeDef ret = HAL_UART_Receive(&huart3, &byte, 1, 2); // timeout = 2ms
 8001106:	f107 0115 	add.w	r1, r7, #21
 800110a:	2302      	movs	r3, #2
 800110c:	2201      	movs	r2, #1
 800110e:	4813      	ldr	r0, [pc, #76]	@ (800115c <_ZN9Link2UART4recvEPhhPt+0x7c>)
 8001110:	f004 fa62 	bl	80055d8 <HAL_UART_Receive>
 8001114:	4603      	mov	r3, r0
 8001116:	75bb      	strb	r3, [r7, #22]

			if (ret != HAL_OK){
 8001118:	7dbb      	ldrb	r3, [r7, #22]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <_ZN9Link2UART4recvEPhhPt+0x44>
				return -1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e017      	b.n	8001154 <_ZN9Link2UART4recvEPhhPt+0x74>
			}
			buf[i] = byte;
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	4413      	add	r3, r2
 800112a:	7d7a      	ldrb	r2, [r7, #21]
 800112c:	701a      	strb	r2, [r3, #0]

			if (cs)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d006      	beq.n	8001142 <_ZN9Link2UART4recvEPhhPt+0x62>
				*cs += byte;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	7d7a      	ldrb	r2, [r7, #21]
 800113a:	4413      	add	r3, r2
 800113c:	b29a      	uxth	r2, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++){
 8001142:	7dfb      	ldrb	r3, [r7, #23]
 8001144:	3301      	adds	r3, #1
 8001146:	75fb      	strb	r3, [r7, #23]
 8001148:	7dfa      	ldrb	r2, [r7, #23]
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	429a      	cmp	r2, r3
 800114e:	d3d8      	bcc.n	8001102 <_ZN9Link2UART4recvEPhhPt+0x22>
		}

		return len;
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	b21b      	sxth	r3, r3
	}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200403c0 	.word	0x200403c0

08001160 <_ZN9Link2UART4sendEPhh>:

	int16_t send(uint8_t *buf, uint8_t len) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	4613      	mov	r3, r2
 800116c:	71fb      	strb	r3, [r7, #7]
		if (HAL_UART_Transmit(&huart3, buf, len, HAL_MAX_DELAY) != HAL_OK)
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	b29a      	uxth	r2, r3
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	4809      	ldr	r0, [pc, #36]	@ (80011a0 <_ZN9Link2UART4sendEPhh+0x40>)
 800117a:	f004 f99f 	bl	80054bc <HAL_UART_Transmit>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf14      	ite	ne
 8001184:	2301      	movne	r3, #1
 8001186:	2300      	moveq	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <_ZN9Link2UART4sendEPhh+0x34>
			return -1;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	e001      	b.n	8001198 <_ZN9Link2UART4sendEPhh+0x38>
		return len;
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	b21b      	sxth	r3, r3
	}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200403c0 	.word	0x200403c0

080011a4 <_ZN3CarC1Ev>:
	Position p[20]; /*a filter buffer for positions*/
	uint8_t index; /*number of valid p's, 1-based indexing*/
	Position filtered_position;

public:
	Car() {
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
		for (int i = 0; i < 20; i++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	e00d      	b.n	80011ce <_ZN3CarC1Ev+0x2a>
			p[i].x = 0;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	2100      	movs	r1, #0
 80011b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			p[i].y = 0;
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
		for (int i = 0; i < 20; i++) {
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3301      	adds	r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b13      	cmp	r3, #19
 80011d2:	ddee      	ble.n	80011b2 <_ZN3CarC1Ev+0xe>
		}
	}
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <_ZN3Car14clear_positionEv>:

	//EFFECTS: clear the position filter buffer before processing next capture
	//MODIFIES: this->p, this->index
	void clear_position(){
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
		for (int i = 0; i < 20; i++) {
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	e00d      	b.n	800120c <_ZN3Car14clear_positionEv+0x2a>
			p[i].x = 0;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	2100      	movs	r1, #0
 80011f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			p[i].y = 0;
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4413      	add	r3, r2
 8001202:	2200      	movs	r2, #0
 8001204:	605a      	str	r2, [r3, #4]
		for (int i = 0; i < 20; i++) {
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3301      	adds	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b13      	cmp	r3, #19
 8001210:	ddee      	ble.n	80011f0 <_ZN3Car14clear_positionEv+0xe>
		}
		index = 0;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
	}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <_ZN3Car15update_positionEtt>:

	//EFFECT: add new position (x,y) to the position filter buffer, update index,
	//        and compute the filtered position.
	//MODIFIES: this->p, this->index. this->filtered_position
	void update_position(uint16_t x, uint16_t y){
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
 8001234:	4613      	mov	r3, r2
 8001236:	803b      	strh	r3, [r7, #0]
		if (index == 0) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d116      	bne.n	8001270 <_ZN3Car15update_positionEtt+0x48>
			filtered_position.x = x;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			filtered_position.y = y;
 800124a:	883a      	ldrh	r2, [r7, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
			p[0].x = x;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	601a      	str	r2, [r3, #0]
			p[0].y = y;
 8001258:	883a      	ldrh	r2, [r7, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	605a      	str	r2, [r3, #4]
			index++;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8001264:	3301      	adds	r3, #1
 8001266:	b2da      	uxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
			return;
 800126e:	e0c4      	b.n	80013fa <_ZN3Car15update_positionEtt+0x1d2>
		}

		// Check if within valid range
		bool valid = (x >= MIN_X && x <= MAX_X && y >= MIN_Y && y <= MAX_Y);
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	2b59      	cmp	r3, #89	@ 0x59
 8001274:	d90a      	bls.n	800128c <_ZN3Car15update_positionEtt+0x64>
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	2bf5      	cmp	r3, #245	@ 0xf5
 800127a:	d807      	bhi.n	800128c <_ZN3Car15update_positionEtt+0x64>
 800127c:	883b      	ldrh	r3, [r7, #0]
 800127e:	2b36      	cmp	r3, #54	@ 0x36
 8001280:	d904      	bls.n	800128c <_ZN3Car15update_positionEtt+0x64>
 8001282:	883b      	ldrh	r3, [r7, #0]
 8001284:	2bcd      	cmp	r3, #205	@ 0xcd
 8001286:	d801      	bhi.n	800128c <_ZN3Car15update_positionEtt+0x64>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <_ZN3Car15update_positionEtt+0x66>
 800128c:	2300      	movs	r3, #0
 800128e:	76fb      	strb	r3, [r7, #27]

		float alpha = 0.0f;
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
		if (valid) {
 8001296:	7efb      	ldrb	r3, [r7, #27]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d04f      	beq.n	800133c <_ZN3Car15update_positionEtt+0x114>
			float dx = x - filtered_position.x;
 800129c:	887a      	ldrh	r2, [r7, #2]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ae:	edc7 7a05 	vstr	s15, [r7, #20]
			float dy = y - filtered_position.y;
 80012b2:	883a      	ldrh	r2, [r7, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c4:	edc7 7a04 	vstr	s15, [r7, #16]
			float dist = sqrt(dx * dx + dy * dy);
 80012c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012dc:	ee17 0a90 	vmov	r0, s15
 80012e0:	f7ff f94a 	bl	8000578 <__aeabi_f2d>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	ec43 2b10 	vmov	d0, r2, r3
 80012ec:	f005 f85c 	bl	80063a8 <sqrt>
 80012f0:	ec53 2b10 	vmov	r2, r3, d0
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fc8e 	bl	8000c18 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	60fb      	str	r3, [r7, #12]

			// Linearly inverse relation to distance (you can tweak max_dist)
			const float max_dist = 220.0f; // A chosen constant for normalization
 8001300:	4b3f      	ldr	r3, [pc, #252]	@ (8001400 <_ZN3Car15update_positionEtt+0x1d8>)
 8001302:	60bb      	str	r3, [r7, #8]
			alpha = (dist / max_dist < 1.0f) ? (1.0f - dist / max_dist) : (0.0f);
 8001304:	ed97 7a03 	vldr	s14, [r7, #12]
 8001308:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8001404 <_ZN3Car15update_positionEtt+0x1dc>
 800130c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001310:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131c:	d50a      	bpl.n	8001334 <_ZN3Car15update_positionEtt+0x10c>
 800131e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001322:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001404 <_ZN3Car15update_positionEtt+0x1dc>
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800132e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001332:	e001      	b.n	8001338 <_ZN3Car15update_positionEtt+0x110>
 8001334:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8001408 <_ZN3Car15update_positionEtt+0x1e0>
 8001338:	edc7 7a07 	vstr	s15, [r7, #28]
		}

		// Exponential smoothing
		filtered_position.x = static_cast<int>(filtered_position.x * (1 - alpha) + x * alpha);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800134e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001352:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001364:	edd7 7a07 	vldr	s15, [r7, #28]
 8001368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001374:	ee17 2a90 	vmov	r2, s15
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		filtered_position.y = static_cast<int>(filtered_position.y * (1 - alpha) + y * alpha);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800138c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001390:	edd7 7a07 	vldr	s15, [r7, #28]
 8001394:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800139c:	883b      	ldrh	r3, [r7, #0]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b6:	ee17 2a90 	vmov	r2, s15
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

		// Add to buffer (circular if needed)
		if (index < 20) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80013c6:	2b13      	cmp	r3, #19
 80013c8:	d817      	bhi.n	80013fa <_ZN3Car15update_positionEtt+0x1d2>
			p[index].x = x;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80013d0:	4619      	mov	r1, r3
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
			p[index].y = y;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80013e0:	883a      	ldrh	r2, [r7, #0]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	440b      	add	r3, r1
 80013e8:	605a      	str	r2, [r3, #4]
			index++;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80013f0:	3301      	adds	r3, #1
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
		} else {
			// Optional: overwrite oldest if full, or just ignore
		}
	}
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	435c0000 	.word	0x435c0000
 8001404:	435c0000 	.word	0x435c0000
 8001408:	00000000 	.word	0x00000000

0800140c <_ZNK3Car12get_positionEv>:

	Position get_position() const {
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
		return filtered_position;
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	33a4      	adds	r3, #164	@ 0xa4
 800141c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001420:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN10Playground4initEv>:
	uint8_t num_occupied;

public:

	//EFFECTS: read in the position of each spot and set all is_available, is_occupied to 0
	void init() {
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
		for (int i = 0; i < NUM_LEDS; i++) {
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	e017      	b.n	800146e <_ZN10Playground4initEv+0x3e>
			parking_spots[i].x = x_centers[i];
 800143e:	4a11      	ldr	r2, [pc, #68]	@ (8001484 <_ZN10Playground4initEv+0x54>)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001446:	4619      	mov	r1, r3
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4413      	add	r3, r2
 8001450:	6019      	str	r1, [r3, #0]
			parking_spots[i].y = y_centers[i];
 8001452:	4a0d      	ldr	r2, [pc, #52]	@ (8001488 <_ZN10Playground4initEv+0x58>)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800145a:	4619      	mov	r1, r3
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	3304      	adds	r3, #4
 8001466:	6019      	str	r1, [r3, #0]
		for (int i = 0; i < NUM_LEDS; i++) {
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b23      	cmp	r3, #35	@ 0x23
 8001472:	dde4      	ble.n	800143e <_ZN10Playground4initEv+0xe>
		for (int i = 0; i < NUM_DECORATION_LEDS; i++){
			set_led(i, 255, 255, 255, 30);
		}
		APA102_SendFrame();
		*/
	}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20040000 	.word	0x20040000
 8001488:	20040048 	.word	0x20040048

0800148c <_ZN10Playground11start_videoEv>:

	void start_video(){
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b08b      	sub	sp, #44	@ 0x2c
 8001490:	af02      	add	r7, sp, #8
 8001492:	6078      	str	r0, [r7, #4]
		uint8_t red[3] = {0, 10, 14};
 8001494:	4a49      	ldr	r2, [pc, #292]	@ (80015bc <_ZN10Playground11start_videoEv+0x130>)
 8001496:	f107 0318 	add.w	r3, r7, #24
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	4611      	mov	r1, r2
 800149e:	8019      	strh	r1, [r3, #0]
 80014a0:	3302      	adds	r3, #2
 80014a2:	0c12      	lsrs	r2, r2, #16
 80014a4:	701a      	strb	r2, [r3, #0]
		uint8_t blue[3] = {5, 7, 15};
 80014a6:	4a46      	ldr	r2, [pc, #280]	@ (80015c0 <_ZN10Playground11start_videoEv+0x134>)
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	4611      	mov	r1, r2
 80014b0:	8019      	strh	r1, [r3, #0]
 80014b2:	3302      	adds	r3, #2
 80014b4:	0c12      	lsrs	r2, r2, #16
 80014b6:	701a      	strb	r2, [r3, #0]
		uint8_t green[3] = {30, 28, 20};
 80014b8:	4a42      	ldr	r2, [pc, #264]	@ (80015c4 <_ZN10Playground11start_videoEv+0x138>)
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	4611      	mov	r1, r2
 80014c2:	8019      	strh	r1, [r3, #0]
 80014c4:	3302      	adds	r3, #2
 80014c6:	0c12      	lsrs	r2, r2, #16
 80014c8:	701a      	strb	r2, [r3, #0]
		uint8_t yellow[3] = {35, 25, 21};
 80014ca:	4a3f      	ldr	r2, [pc, #252]	@ (80015c8 <_ZN10Playground11start_videoEv+0x13c>)
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	4611      	mov	r1, r2
 80014d4:	8019      	strh	r1, [r3, #0]
 80014d6:	3302      	adds	r3, #2
 80014d8:	0c12      	lsrs	r2, r2, #16
 80014da:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 3; i++){
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	e064      	b.n	80015ac <_ZN10Playground11start_videoEv+0x120>
			set_led(red[i], color[0][0], color[0][1], color[0][2], 15);
 80014e2:	f107 0218 	add.w	r2, r7, #24
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461c      	mov	r4, r3
 80014ee:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <_ZN10Playground11start_videoEv+0x140>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b35      	ldr	r3, [pc, #212]	@ (80015cc <_ZN10Playground11start_videoEv+0x140>)
 80014f6:	885b      	ldrh	r3, [r3, #2]
 80014f8:	b2d9      	uxtb	r1, r3
 80014fa:	4b34      	ldr	r3, [pc, #208]	@ (80015cc <_ZN10Playground11start_videoEv+0x140>)
 80014fc:	889b      	ldrh	r3, [r3, #4]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	200f      	movs	r0, #15
 8001502:	9001      	str	r0, [sp, #4]
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	460b      	mov	r3, r1
 8001508:	4621      	mov	r1, r4
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 fa48 	bl	80019a0 <_ZN10Playground7set_ledEihhhh>
			set_led(blue[i], color[1][0], color[1][1], color[1][2], 15);
 8001510:	f107 0214 	add.w	r2, r7, #20
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461c      	mov	r4, r3
 800151c:	4b2b      	ldr	r3, [pc, #172]	@ (80015cc <_ZN10Playground11start_videoEv+0x140>)
 800151e:	88db      	ldrh	r3, [r3, #6]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <_ZN10Playground11start_videoEv+0x140>)
 8001524:	891b      	ldrh	r3, [r3, #8]
 8001526:	b2d9      	uxtb	r1, r3
 8001528:	4b28      	ldr	r3, [pc, #160]	@ (80015cc <_ZN10Playground11start_videoEv+0x140>)
 800152a:	895b      	ldrh	r3, [r3, #10]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	200f      	movs	r0, #15
 8001530:	9001      	str	r0, [sp, #4]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	460b      	mov	r3, r1
 8001536:	4621      	mov	r1, r4
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 fa31 	bl	80019a0 <_ZN10Playground7set_ledEihhhh>
			set_led(green[i], color[2][0], color[2][1], color[2][2], 15);
 800153e:	f107 0210 	add.w	r2, r7, #16
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	4413      	add	r3, r2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461c      	mov	r4, r3
 800154a:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <_ZN10Playground11start_videoEv+0x140>)
 800154c:	899b      	ldrh	r3, [r3, #12]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <_ZN10Playground11start_videoEv+0x140>)
 8001552:	89db      	ldrh	r3, [r3, #14]
 8001554:	b2d9      	uxtb	r1, r3
 8001556:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <_ZN10Playground11start_videoEv+0x140>)
 8001558:	8a1b      	ldrh	r3, [r3, #16]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	200f      	movs	r0, #15
 800155e:	9001      	str	r0, [sp, #4]
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	460b      	mov	r3, r1
 8001564:	4621      	mov	r1, r4
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 fa1a 	bl	80019a0 <_ZN10Playground7set_ledEihhhh>
			set_led(yellow[i], color[3][0], color[3][1], color[3][2], 15);
 800156c:	f107 020c 	add.w	r2, r7, #12
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	4413      	add	r3, r2
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	461c      	mov	r4, r3
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <_ZN10Playground11start_videoEv+0x140>)
 800157a:	8a5b      	ldrh	r3, [r3, #18]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <_ZN10Playground11start_videoEv+0x140>)
 8001580:	8a9b      	ldrh	r3, [r3, #20]
 8001582:	b2d9      	uxtb	r1, r3
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <_ZN10Playground11start_videoEv+0x140>)
 8001586:	8adb      	ldrh	r3, [r3, #22]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	200f      	movs	r0, #15
 800158c:	9001      	str	r0, [sp, #4]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	460b      	mov	r3, r1
 8001592:	4621      	mov	r1, r4
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 fa03 	bl	80019a0 <_ZN10Playground7set_ledEihhhh>
			APA102_SendFrame();
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f9ae 	bl	80018fc <_ZN10Playground16APA102_SendFrameEv>
			HAL_Delay(200);
 80015a0:	20c8      	movs	r0, #200	@ 0xc8
 80015a2:	f001 fc2d 	bl	8002e00 <HAL_Delay>
		for (int i = 0; i < 3; i++){
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3301      	adds	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	dd97      	ble.n	80014e2 <_ZN10Playground11start_videoEv+0x56>
		}
		//clear_leds();
		//APA102_SendFrame();
	}
 80015b2:	bf00      	nop
 80015b4:	bf00      	nop
 80015b6:	3724      	adds	r7, #36	@ 0x24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}
 80015bc:	0800ada0 	.word	0x0800ada0
 80015c0:	0800ada4 	.word	0x0800ada4
 80015c4:	0800ada8 	.word	0x0800ada8
 80015c8:	0800adac 	.word	0x0800adac
 80015cc:	20040090 	.word	0x20040090

080015d0 <_ZN10Playground5clearEv>:

	void clear(){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
		for (int i = 0; i < NUM_LEDS; i++){
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	e01c      	b.n	8001618 <_ZN10Playground5clearEv+0x48>
			parking_spots[i].is_available = 0;
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	4413      	add	r3, r2
 80015e6:	3308      	adds	r3, #8
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
			parking_spots[i].is_occupied = 0;
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	4413      	add	r3, r2
 80015f4:	3309      	adds	r3, #9
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
			parking_spots[i].occupied_by = -1;
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	4413      	add	r3, r2
 8001602:	330c      	adds	r3, #12
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	601a      	str	r2, [r3, #0]
			num_occupied = 0;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
		for (int i = 0; i < NUM_LEDS; i++){
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3301      	adds	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b23      	cmp	r3, #35	@ 0x23
 800161c:	dddf      	ble.n	80015de <_ZN10Playground5clearEv+0xe>
		}
		clear_leds();
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f9f0 	bl	8001a04 <_ZN10Playground10clear_ledsEv>
		APA102_SendFrame();
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f969 	bl	80018fc <_ZN10Playground16APA102_SendFrameEv>
	}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <_ZN10Playground21generate_random_spotsEh>:

	//EFFECTS: randomly generates num spots where the spots are marked as is_available
	//MODIFIES: parking_spots.is_available
	void generate_random_spots(uint8_t num) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af02      	add	r7, sp, #8
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	70fb      	strb	r3, [r7, #3]
		uint8_t count = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]
		srand(HAL_GetTick());
 8001644:	f001 fbd0 	bl	8002de8 <HAL_GetTick>
 8001648:	4603      	mov	r3, r0
 800164a:	4618      	mov	r0, r3
 800164c:	f005 f86c 	bl	8006728 <srand>
		while (count < num){
 8001650:	e033      	b.n	80016ba <_ZN10Playground21generate_random_spotsEh+0x86>
			uint8_t retval = rand() % NUM_LEDS;
 8001652:	f005 f897 	bl	8006784 <rand>
 8001656:	4602      	mov	r2, r0
 8001658:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <_ZN10Playground21generate_random_spotsEh+0x9c>)
 800165a:	fb83 1302 	smull	r1, r3, r3, r2
 800165e:	10d9      	asrs	r1, r3, #3
 8001660:	17d3      	asrs	r3, r2, #31
 8001662:	1ac9      	subs	r1, r1, r3
 8001664:	460b      	mov	r3, r1
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	440b      	add	r3, r1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	1ad1      	subs	r1, r2, r3
 800166e:	460b      	mov	r3, r1
 8001670:	73bb      	strb	r3, [r7, #14]
			printf("Random Number Generated: %d\r\n", retval);
 8001672:	7bbb      	ldrb	r3, [r7, #14]
 8001674:	4619      	mov	r1, r3
 8001676:	4817      	ldr	r0, [pc, #92]	@ (80016d4 <_ZN10Playground21generate_random_spotsEh+0xa0>)
 8001678:	f005 ffe8 	bl	800764c <iprintf>
			if (!parking_spots[retval].is_available){
 800167c:	7bbb      	ldrb	r3, [r7, #14]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	4413      	add	r3, r2
 8001684:	3308      	adds	r3, #8
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	f083 0301 	eor.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d013      	beq.n	80016ba <_ZN10Playground21generate_random_spotsEh+0x86>
				parking_spots[retval].is_available = true;
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	4413      	add	r3, r2
 800169a:	3308      	adds	r3, #8
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]

				set_led(retval, 255, 255, 255, 15);
 80016a0:	7bb9      	ldrb	r1, [r7, #14]
 80016a2:	230f      	movs	r3, #15
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	23ff      	movs	r3, #255	@ 0xff
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	23ff      	movs	r3, #255	@ 0xff
 80016ac:	22ff      	movs	r2, #255	@ 0xff
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f976 	bl	80019a0 <_ZN10Playground7set_ledEihhhh>
				count ++;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	3301      	adds	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
		while (count < num){
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d3c7      	bcc.n	8001652 <_ZN10Playground21generate_random_spotsEh+0x1e>
			}
		}
		APA102_SendFrame();
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f91a 	bl	80018fc <_ZN10Playground16APA102_SendFrameEv>
	}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	38e38e39 	.word	0x38e38e39
 80016d4:	0800adb0 	.word	0x0800adb0

080016d8 <_ZN10Playground15check_occupencyEhRK8Position>:

	//EFFECTS: check if spot_id is occupied by a car
	bool check_occupency(uint8_t spot_id, const Position & pos) {
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	460b      	mov	r3, r1
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	72fb      	strb	r3, [r7, #11]
		if (parking_spots[spot_id].is_available
 80016e6:	7afb      	ldrb	r3, [r7, #11]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	4413      	add	r3, r2
 80016ee:	3308      	adds	r3, #8
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d036      	beq.n	8001764 <_ZN10Playground15check_occupencyEhRK8Position+0x8c>
				&& (!parking_spots[spot_id].is_occupied)) {
 80016f6:	7afb      	ldrb	r3, [r7, #11]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4413      	add	r3, r2
 80016fe:	3309      	adds	r3, #9
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	f083 0301 	eor.w	r3, r3, #1
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d02b      	beq.n	8001764 <_ZN10Playground15check_occupencyEhRK8Position+0x8c>
			if (pos.x - parking_spots[spot_id].x < TOLERANCE
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	7afb      	ldrb	r3, [r7, #11]
 8001712:	68f9      	ldr	r1, [r7, #12]
 8001714:	011b      	lsls	r3, r3, #4
 8001716:	440b      	add	r3, r1
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b0e      	cmp	r3, #14
 800171e:	dc21      	bgt.n	8001764 <_ZN10Playground15check_occupencyEhRK8Position+0x8c>
					&& parking_spots[spot_id].x - pos.x < TOLERANCE
 8001720:	7afb      	ldrb	r3, [r7, #11]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	4413      	add	r3, r2
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b0e      	cmp	r3, #14
 8001732:	dc17      	bgt.n	8001764 <_ZN10Playground15check_occupencyEhRK8Position+0x8c>
					&& pos.y - parking_spots[spot_id].y < TOLERANCE
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	7afb      	ldrb	r3, [r7, #11]
 800173a:	68f9      	ldr	r1, [r7, #12]
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	440b      	add	r3, r1
 8001740:	3304      	adds	r3, #4
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b0e      	cmp	r3, #14
 8001748:	dc0c      	bgt.n	8001764 <_ZN10Playground15check_occupencyEhRK8Position+0x8c>
					&& parking_spots[spot_id].y - pos.y < TOLERANCE) {
 800174a:	7afb      	ldrb	r3, [r7, #11]
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4413      	add	r3, r2
 8001752:	3304      	adds	r3, #4
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b0e      	cmp	r3, #14
 800175e:	dc01      	bgt.n	8001764 <_ZN10Playground15check_occupencyEhRK8Position+0x8c>
				return 1;
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <_ZN10Playground15check_occupencyEhRK8Position+0x8e>
			}
		}
		return 0;
 8001764:	2300      	movs	r3, #0
	}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <_ZN10Playground6occupyEhh>:

	//EEFECTS: car_id occupies spot_id, change the LED color
	//MODIFIES: parking_spots.is_occupied
	void occupy(uint8_t spot_id, uint8_t car_id){
 8001774:	b5b0      	push	{r4, r5, r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af02      	add	r7, sp, #8
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	70fb      	strb	r3, [r7, #3]
 8001780:	4613      	mov	r3, r2
 8001782:	70bb      	strb	r3, [r7, #2]
		parking_spots[spot_id].is_occupied = 1;
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4413      	add	r3, r2
 800178c:	3309      	adds	r3, #9
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
		parking_spots[spot_id].occupied_by = car_id;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	78ba      	ldrb	r2, [r7, #2]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	440b      	add	r3, r1
 800179c:	330c      	adds	r3, #12
 800179e:	601a      	str	r2, [r3, #0]

		set_led(spot_id, color[car_id][0], color[car_id][1],  color[car_id][2], 15);
 80017a0:	78f9      	ldrb	r1, [r7, #3]
 80017a2:	78ba      	ldrb	r2, [r7, #2]
 80017a4:	481f      	ldr	r0, [pc, #124]	@ (8001824 <_ZN10Playground6occupyEhh+0xb0>)
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4403      	add	r3, r0
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	b2d8      	uxtb	r0, r3
 80017b4:	78ba      	ldrb	r2, [r7, #2]
 80017b6:	4c1b      	ldr	r4, [pc, #108]	@ (8001824 <_ZN10Playground6occupyEhh+0xb0>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4423      	add	r3, r4
 80017c2:	3302      	adds	r3, #2
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	b2dc      	uxtb	r4, r3
 80017c8:	78ba      	ldrb	r2, [r7, #2]
 80017ca:	4d16      	ldr	r5, [pc, #88]	@ (8001824 <_ZN10Playground6occupyEhh+0xb0>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	442b      	add	r3, r5
 80017d6:	3304      	adds	r3, #4
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	220f      	movs	r2, #15
 80017de:	9201      	str	r2, [sp, #4]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	4623      	mov	r3, r4
 80017e4:	4602      	mov	r2, r0
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f8da 	bl	80019a0 <_ZN10Playground7set_ledEihhhh>
		APA102_SendFrame();
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f885 	bl	80018fc <_ZN10Playground16APA102_SendFrameEv>

		scores[car_id]++;
 80017f2:	78bb      	ldrb	r3, [r7, #2]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	f503 7196 	add.w	r1, r3, #300	@ 0x12c
 80017fa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80017fe:	1c51      	adds	r1, r2, #1
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8001806:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		num_occupied++;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8001810:	3301      	adds	r3, #1
 8001812:	b2da      	uxtb	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
	}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bdb0      	pop	{r4, r5, r7, pc}
 8001822:	bf00      	nop
 8001824:	20040090 	.word	0x20040090

08001828 <_ZN10Playground15is_all_occupiedEv>:

	bool is_all_occupied() {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
		return num_occupied == NUM_SPOTS;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8001836:	2b0a      	cmp	r3, #10
 8001838:	bf0c      	ite	eq
 800183a:	2301      	moveq	r3, #1
 800183c:	2300      	movne	r3, #0
 800183e:	b2db      	uxtb	r3, r3
	}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_ZN10Playground14display_resultEv>:

	void display_result(){
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b089      	sub	sp, #36	@ 0x24
 8001850:	af02      	add	r7, sp, #8
 8001852:	6078      	str	r0, [r7, #4]
		uint8_t max = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < NUM_CARS; i++){
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	e012      	b.n	8001884 <_ZN10Playground14display_resultEv+0x38>
			if(scores[max]<scores[i]) max = i;
 800185e:	7dfa      	ldrb	r2, [r7, #23]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 8001866:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6939      	ldr	r1, [r7, #16]
 800186e:	f501 7196 	add.w	r1, r1, #300	@ 0x12c
 8001872:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001876:	429a      	cmp	r2, r3
 8001878:	da01      	bge.n	800187e <_ZN10Playground14display_resultEv+0x32>
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < NUM_CARS; i++){
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	3301      	adds	r3, #1
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	2b03      	cmp	r3, #3
 8001888:	dde9      	ble.n	800185e <_ZN10Playground14display_resultEv+0x12>
		}
		for(int i = 0 ; i < NUM_LEDS ; i++){
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e02b      	b.n	80018e8 <_ZN10Playground14display_resultEv+0x9c>
			set_led(i, color[max][0], color[max][1],  color[max][2], 15);
 8001890:	7dfa      	ldrb	r2, [r7, #23]
 8001892:	4919      	ldr	r1, [pc, #100]	@ (80018f8 <_ZN10Playground14display_resultEv+0xac>)
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	440b      	add	r3, r1
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	b2d9      	uxtb	r1, r3
 80018a2:	7dfa      	ldrb	r2, [r7, #23]
 80018a4:	4814      	ldr	r0, [pc, #80]	@ (80018f8 <_ZN10Playground14display_resultEv+0xac>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4403      	add	r3, r0
 80018b0:	3302      	adds	r3, #2
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	b2d8      	uxtb	r0, r3
 80018b6:	7dfa      	ldrb	r2, [r7, #23]
 80018b8:	4c0f      	ldr	r4, [pc, #60]	@ (80018f8 <_ZN10Playground14display_resultEv+0xac>)
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4423      	add	r3, r4
 80018c4:	3304      	adds	r3, #4
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	220f      	movs	r2, #15
 80018cc:	9201      	str	r2, [sp, #4]
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	4603      	mov	r3, r0
 80018d2:	460a      	mov	r2, r1
 80018d4:	68f9      	ldr	r1, [r7, #12]
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f862 	bl	80019a0 <_ZN10Playground7set_ledEihhhh>
			APA102_SendFrame();
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f80d 	bl	80018fc <_ZN10Playground16APA102_SendFrameEv>
		for(int i = 0 ; i < NUM_LEDS ; i++){
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3301      	adds	r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b23      	cmp	r3, #35	@ 0x23
 80018ec:	ddd0      	ble.n	8001890 <_ZN10Playground14display_resultEv+0x44>
		}
	}
 80018ee:	bf00      	nop
 80018f0:	bf00      	nop
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}
 80018f8:	20040090 	.word	0x20040090

080018fc <_ZN10Playground16APA102_SendFrameEv>:
private:
	void APA102_SendFrame() {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
		uint8_t startFrame[4] = { 0x00, 0x00, 0x00, 0x00 };
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
		HAL_SPI_Transmit(&hspi1, startFrame, 4, HAL_MAX_DELAY);
 8001908:	f107 0110 	add.w	r1, r7, #16
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	2204      	movs	r2, #4
 8001912:	4822      	ldr	r0, [pc, #136]	@ (800199c <_ZN10Playground16APA102_SendFrameEv+0xa0>)
 8001914:	f003 faa7 	bl	8004e66 <HAL_SPI_Transmit>

		for (int i = 0; i < NUM_LEDS; i++) {
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e028      	b.n	8001970 <_ZN10Playground16APA102_SendFrameEv+0x74>
			uint8_t frame[4];
			frame[0] = 0b11100000 | (leds[i].brightness & 0x1F); // Brightness frame
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3390      	adds	r3, #144	@ 0x90
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	78db      	ldrb	r3, [r3, #3]
 800192a:	f063 031f 	orn	r3, r3, #31
 800192e:	b2db      	uxtb	r3, r3
 8001930:	723b      	strb	r3, [r7, #8]
			frame[1] = leds[i].blue;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	3290      	adds	r2, #144	@ 0x90
 8001938:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800193c:	727b      	strb	r3, [r7, #9]
			frame[2] = leds[i].green;
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3390      	adds	r3, #144	@ 0x90
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	785b      	ldrb	r3, [r3, #1]
 800194a:	72bb      	strb	r3, [r7, #10]
			frame[3] = leds[i].red;
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3390      	adds	r3, #144	@ 0x90
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	789b      	ldrb	r3, [r3, #2]
 8001958:	72fb      	strb	r3, [r7, #11]
			HAL_SPI_Transmit(&hspi1, frame, 4, HAL_MAX_DELAY);
 800195a:	f107 0108 	add.w	r1, r7, #8
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	2204      	movs	r2, #4
 8001964:	480d      	ldr	r0, [pc, #52]	@ (800199c <_ZN10Playground16APA102_SendFrameEv+0xa0>)
 8001966:	f003 fa7e 	bl	8004e66 <HAL_SPI_Transmit>
		for (int i = 0; i < NUM_LEDS; i++) {
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b23      	cmp	r3, #35	@ 0x23
 8001974:	ddd3      	ble.n	800191e <_ZN10Playground16APA102_SendFrameEv+0x22>
		}

		uint8_t endFrame[(NUM_LEDS / 16) + 1];
		memset(endFrame, 0xFF, sizeof(endFrame));
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	2203      	movs	r2, #3
 800197c:	21ff      	movs	r1, #255	@ 0xff
 800197e:	4618      	mov	r0, r3
 8001980:	f005 fedb 	bl	800773a <memset>
		HAL_SPI_Transmit(&hspi1, endFrame, sizeof(endFrame), HAL_MAX_DELAY);
 8001984:	f107 010c 	add.w	r1, r7, #12
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
 800198c:	2203      	movs	r2, #3
 800198e:	4803      	ldr	r0, [pc, #12]	@ (800199c <_ZN10Playground16APA102_SendFrameEv+0xa0>)
 8001990:	f003 fa69 	bl	8004e66 <HAL_SPI_Transmit>
	}
 8001994:	bf00      	nop
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20040454 	.word	0x20040454

080019a0 <_ZN10Playground7set_ledEihhhh>:

	void set_led(int index, uint8_t r, uint8_t g, uint8_t b, uint8_t brightness) {
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	4611      	mov	r1, r2
 80019ac:	461a      	mov	r2, r3
 80019ae:	460b      	mov	r3, r1
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	4613      	mov	r3, r2
 80019b4:	71bb      	strb	r3, [r7, #6]
		if (index >= 0 && index < NUM_LEDS) {
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	db1d      	blt.n	80019f8 <_ZN10Playground7set_ledEihhhh+0x58>
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b23      	cmp	r3, #35	@ 0x23
 80019c0:	dc1a      	bgt.n	80019f8 <_ZN10Playground7set_ledEihhhh+0x58>
			leds[index].red = r;
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	3390      	adds	r3, #144	@ 0x90
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	79fa      	ldrb	r2, [r7, #7]
 80019ce:	709a      	strb	r2, [r3, #2]
			leds[index].green = g;
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	3390      	adds	r3, #144	@ 0x90
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	79ba      	ldrb	r2, [r7, #6]
 80019dc:	705a      	strb	r2, [r3, #1]
			leds[index].blue = b;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	3290      	adds	r2, #144	@ 0x90
 80019e4:	7e39      	ldrb	r1, [r7, #24]
 80019e6:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			leds[index].brightness = brightness;
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	3390      	adds	r3, #144	@ 0x90
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	7f3a      	ldrb	r2, [r7, #28]
 80019f6:	70da      	strb	r2, [r3, #3]
		}
	}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <_ZN10Playground10clear_ledsEv>:

	void clear_leds() {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	6078      	str	r0, [r7, #4]
		for (int i = 0; i < NUM_LEDS; i++) {
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	e00c      	b.n	8001a2c <_ZN10Playground10clear_ledsEv+0x28>
			set_led(i, 0, 0, 0, 0);  // Off
 8001a12:	2300      	movs	r3, #0
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	2300      	movs	r3, #0
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	68f9      	ldr	r1, [r7, #12]
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ffbd 	bl	80019a0 <_ZN10Playground7set_ledEihhhh>
		for (int i = 0; i < NUM_LEDS; i++) {
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b23      	cmp	r3, #35	@ 0x23
 8001a30:	ddef      	ble.n	8001a12 <_ZN10Playground10clear_ledsEv+0xe>
		}
	}
 8001a32:	bf00      	nop
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b08b      	sub	sp, #44	@ 0x2c
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a42:	f001 f968 	bl	8002d16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a46:	f000 f91d 	bl	8001c84 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a4a:	f000 fb15 	bl	8002078 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001a4e:	f000 f9cf 	bl	8001df0 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8001a52:	f000 fa8d 	bl	8001f70 <_ZL12MX_SPI1_Initv>
  MX_USART3_UART_Init();
 8001a56:	f000 fa2b 	bl	8001eb0 <_ZL19MX_USART3_UART_Initv>
  MX_LPUART1_UART_Init();
 8001a5a:	f000 f969 	bl	8001d30 <_ZL20MX_LPUART1_UART_Initv>
  MX_SPI2_Init();
 8001a5e:	f000 fac9 	bl	8001ff4 <_ZL12MX_SPI2_Initv>
  /* USER CODE BEGIN 2 */
	DWT_Init();
 8001a62:	f000 fbdd 	bl	8002220 <_Z8DWT_Initv>

	playground.init();
 8001a66:	487f      	ldr	r0, [pc, #508]	@ (8001c64 <main+0x228>)
 8001a68:	f7ff fce2 	bl	8001430 <_ZN10Playground4initEv>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch (game_state) {
 8001a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8001c68 <main+0x22c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	f200 80f2 	bhi.w	8001c5a <main+0x21e>
 8001a76:	a201      	add	r2, pc, #4	@ (adr r2, 8001a7c <main+0x40>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001a8d 	.word	0x08001a8d
 8001a80:	08001abf 	.word	0x08001abf
 8001a84:	08001adf 	.word	0x08001adf
 8001a88:	08001c25 	.word	0x08001c25
			case INIT:{
				/* Start a new round when the blue button is pressed */
				if (is_button_pressed()) {
 8001a8c:	f000 fbe2 	bl	8002254 <_Z17is_button_pressedv>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <main+0x62>
					game_state = START_RUN;
 8001a96:	4b74      	ldr	r3, [pc, #464]	@ (8001c68 <main+0x22c>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	e002      	b.n	8001aa4 <main+0x68>
				} else {
					game_state = INIT;
 8001a9e:	4b72      	ldr	r3, [pc, #456]	@ (8001c68 <main+0x22c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
				}
				playground.clear();
 8001aa4:	486f      	ldr	r0, [pc, #444]	@ (8001c64 <main+0x228>)
 8001aa6:	f7ff fd93 	bl	80015d0 <_ZN10Playground5clearEv>
				HAL_Delay(200);
 8001aaa:	20c8      	movs	r0, #200	@ 0xc8
 8001aac:	f001 f9a8 	bl	8002e00 <HAL_Delay>
				playground.start_video();
 8001ab0:	486c      	ldr	r0, [pc, #432]	@ (8001c64 <main+0x228>)
 8001ab2:	f7ff fceb 	bl	800148c <_ZN10Playground11start_videoEv>
				num_run = 0;
 8001ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c6c <main+0x230>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]

				break;
 8001abc:	e0d0      	b.n	8001c60 <main+0x224>
			}
			case START_RUN: {
				/* Randomly choose 10 lights to light up */
				playground.clear();
 8001abe:	4869      	ldr	r0, [pc, #420]	@ (8001c64 <main+0x228>)
 8001ac0:	f7ff fd86 	bl	80015d0 <_ZN10Playground5clearEv>
				playground.generate_random_spots(NUM_SPOTS);
 8001ac4:	210a      	movs	r1, #10
 8001ac6:	4867      	ldr	r0, [pc, #412]	@ (8001c64 <main+0x228>)
 8001ac8:	f7ff fdb4 	bl	8001634 <_ZN10Playground21generate_random_spotsEh>
				game_state = IN_RUN;
 8001acc:	4b66      	ldr	r3, [pc, #408]	@ (8001c68 <main+0x22c>)
 8001ace:	2202      	movs	r2, #2
 8001ad0:	701a      	strb	r2, [r3, #0]
				run_start_time = HAL_GetTick();
 8001ad2:	f001 f989 	bl	8002de8 <HAL_GetTick>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4a65      	ldr	r2, [pc, #404]	@ (8001c70 <main+0x234>)
 8001ada:	6013      	str	r3, [r2, #0]
				break;
 8001adc:	e0c0      	b.n	8001c60 <main+0x224>
			}
			case IN_RUN: {
				/* Capture the position from PixyCam */
				pixy.ccc.getBlocks();
 8001ade:	23ff      	movs	r3, #255	@ 0xff
 8001ae0:	22ff      	movs	r2, #255	@ 0xff
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	4863      	ldr	r0, [pc, #396]	@ (8001c74 <main+0x238>)
 8001ae6:	f000 fc2b 	bl	8002340 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh>

				/* Update each car's position */
				for (int i = 0; i < NUM_CARS; i++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aee:	e00b      	b.n	8001b08 <main+0xcc>
					car_arry[i].clear_position();
 8001af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af2:	22ac      	movs	r2, #172	@ 0xac
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	4a5f      	ldr	r2, [pc, #380]	@ (8001c78 <main+0x23c>)
 8001afa:	4413      	add	r3, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fb70 	bl	80011e2 <_ZN3Car14clear_positionEv>
				for (int i = 0; i < NUM_CARS; i++)
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	3301      	adds	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	ddf0      	ble.n	8001af0 <main+0xb4>

				uint8_t num_blocks = pixy.ccc.numBlocks;
 8001b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8001c7c <main+0x240>)
 8001b10:	7a1b      	ldrb	r3, [r3, #8]
 8001b12:	75fb      	strb	r3, [r7, #23]
				if (num_blocks) {
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d06b      	beq.n	8001bf2 <main+0x1b6>
					for (int i = 0; i < num_blocks; i++) {
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
 8001b1e:	e032      	b.n	8001b86 <main+0x14a>

						uint16_t sig = pixy.ccc.blocks[i].m_signature;
 8001b20:	4b56      	ldr	r3, [pc, #344]	@ (8001c7c <main+0x240>)
 8001b22:	68d9      	ldr	r1, [r3, #12]
 8001b24:	6a3a      	ldr	r2, [r7, #32]
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	440b      	add	r3, r1
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	81fb      	strh	r3, [r7, #14]
						uint16_t x = pixy.ccc.blocks[i].m_x;
 8001b34:	4b51      	ldr	r3, [pc, #324]	@ (8001c7c <main+0x240>)
 8001b36:	68d9      	ldr	r1, [r3, #12]
 8001b38:	6a3a      	ldr	r2, [r7, #32]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	1a9b      	subs	r3, r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	440b      	add	r3, r1
 8001b44:	885b      	ldrh	r3, [r3, #2]
 8001b46:	81bb      	strh	r3, [r7, #12]
						uint16_t y = pixy.ccc.blocks[i].m_y;
 8001b48:	4b4c      	ldr	r3, [pc, #304]	@ (8001c7c <main+0x240>)
 8001b4a:	68d9      	ldr	r1, [r3, #12]
 8001b4c:	6a3a      	ldr	r2, [r7, #32]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	440b      	add	r3, r1
 8001b58:	889b      	ldrh	r3, [r3, #4]
 8001b5a:	817b      	strh	r3, [r7, #10]
						printf("Detected Block: sig: %d, x: %d, y:%d.\r\n",sig,x,y);
 8001b5c:	89f9      	ldrh	r1, [r7, #14]
 8001b5e:	89ba      	ldrh	r2, [r7, #12]
 8001b60:	897b      	ldrh	r3, [r7, #10]
 8001b62:	4847      	ldr	r0, [pc, #284]	@ (8001c80 <main+0x244>)
 8001b64:	f005 fd72 	bl	800764c <iprintf>
						car_arry[sig - 1].update_position(x, y);
 8001b68:	89fb      	ldrh	r3, [r7, #14]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	22ac      	movs	r2, #172	@ 0xac
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	4a41      	ldr	r2, [pc, #260]	@ (8001c78 <main+0x23c>)
 8001b74:	4413      	add	r3, r2
 8001b76:	897a      	ldrh	r2, [r7, #10]
 8001b78:	89b9      	ldrh	r1, [r7, #12]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fb54 	bl	8001228 <_ZN3Car15update_positionEtt>
					for (int i = 0; i < num_blocks; i++) {
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	3301      	adds	r3, #1
 8001b84:	623b      	str	r3, [r7, #32]
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	6a3a      	ldr	r2, [r7, #32]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	dbc8      	blt.n	8001b20 <main+0xe4>
					}

					/* Check occupancies for each spot */
					for (int i = 0; i < NUM_LEDS; i++) {
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	e02b      	b.n	8001bec <main+0x1b0>
						for (int j = 0; j < NUM_CARS; j++) {
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
 8001b98:	e022      	b.n	8001be0 <main+0x1a4>
							int is_occupied = playground.check_occupency(i, car_arry[j].get_position());
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	b2dc      	uxtb	r4, r3
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	22ac      	movs	r2, #172	@ 0xac
 8001ba2:	fb02 f303 	mul.w	r3, r2, r3
 8001ba6:	4a34      	ldr	r2, [pc, #208]	@ (8001c78 <main+0x23c>)
 8001ba8:	441a      	add	r2, r3
 8001baa:	463b      	mov	r3, r7
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fc2c 	bl	800140c <_ZNK3Car12get_positionEv>
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4621      	mov	r1, r4
 8001bba:	482a      	ldr	r0, [pc, #168]	@ (8001c64 <main+0x228>)
 8001bbc:	f7ff fd8c 	bl	80016d8 <_ZN10Playground15check_occupencyEhRK8Position>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	613b      	str	r3, [r7, #16]
							if (is_occupied)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <main+0x19e>
								playground.occupy(i, j);
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4823      	ldr	r0, [pc, #140]	@ (8001c64 <main+0x228>)
 8001bd6:	f7ff fdcd 	bl	8001774 <_ZN10Playground6occupyEhh>
						for (int j = 0; j < NUM_CARS; j++) {
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	ddd9      	ble.n	8001b9a <main+0x15e>
					for (int i = 0; i < NUM_LEDS; i++) {
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	2b23      	cmp	r3, #35	@ 0x23
 8001bf0:	ddd0      	ble.n	8001b94 <main+0x158>
						}
					}
				}

				/* If timeout or all spots are occupied, end this run */
				if (HAL_GetTick() - run_start_time > RUN_TIMEOUT
 8001bf2:	f001 f8f9 	bl	8002de8 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c70 <main+0x234>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	1ad3      	subs	r3, r2, r3
						|| playground.is_all_occupied()) {
 8001bfe:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d805      	bhi.n	8001c12 <main+0x1d6>
 8001c06:	4817      	ldr	r0, [pc, #92]	@ (8001c64 <main+0x228>)
 8001c08:	f7ff fe0e 	bl	8001828 <_ZN10Playground15is_all_occupiedEv>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <main+0x1da>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <main+0x1dc>
 8001c16:	2300      	movs	r3, #0
				if (HAL_GetTick() - run_start_time > RUN_TIMEOUT
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d020      	beq.n	8001c5e <main+0x222>
					game_state = END_RUN;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <main+0x22c>)
 8001c1e:	2203      	movs	r2, #3
 8001c20:	701a      	strb	r2, [r3, #0]
				}

				break;
 8001c22:	e01c      	b.n	8001c5e <main+0x222>
			}
			case END_RUN:{
				/* update the number of runs and clear the playground */
				num_run++;
 8001c24:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <main+0x230>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4a10      	ldr	r2, [pc, #64]	@ (8001c6c <main+0x230>)
 8001c2c:	6013      	str	r3, [r2, #0]
				playground.clear();
 8001c2e:	480d      	ldr	r0, [pc, #52]	@ (8001c64 <main+0x228>)
 8001c30:	f7ff fcce 	bl	80015d0 <_ZN10Playground5clearEv>
				/* if all NUM_RUNS has finished, display the winner */
				if (num_run >= NUM_RUNS) {
 8001c34:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <main+0x230>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	dd06      	ble.n	8001c4a <main+0x20e>
					playground.display_result();
 8001c3c:	4809      	ldr	r0, [pc, #36]	@ (8001c64 <main+0x228>)
 8001c3e:	f7ff fe05 	bl	800184c <_ZN10Playground14display_resultEv>
					game_state = INIT;
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <main+0x22c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e002      	b.n	8001c50 <main+0x214>

				} else {
					game_state = START_RUN;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <main+0x22c>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
				}
				HAL_Delay(5000);
 8001c50:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001c54:	f001 f8d4 	bl	8002e00 <HAL_Delay>
				break;
 8001c58:	e002      	b.n	8001c60 <main+0x224>
			}
			default:
				break;
 8001c5a:	bf00      	nop
 8001c5c:	e706      	b.n	8001a6c <main+0x30>
				break;
 8001c5e:	bf00      	nop
		}
	}
 8001c60:	e704      	b.n	8001a6c <main+0x30>
 8001c62:	bf00      	nop
 8001c64:	20040814 	.word	0x20040814
 8001c68:	20040560 	.word	0x20040560
 8001c6c:	20040cdc 	.word	0x20040cdc
 8001c70:	20040cd8 	.word	0x20040cd8
 8001c74:	20040524 	.word	0x20040524
 8001c78:	20040564 	.word	0x20040564
 8001c7c:	2004051c 	.word	0x2004051c
 8001c80:	0800add0 	.word	0x0800add0

08001c84 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b096      	sub	sp, #88	@ 0x58
 8001c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	2244      	movs	r2, #68	@ 0x44
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f005 fd51 	bl	800773a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c98:	463b      	mov	r3, r7
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ca6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001caa:	f001 fb95 	bl	80033d8 <HAL_PWREx_ControlVoltageScaling>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf14      	ite	ne
 8001cb4:	2301      	movne	r3, #1
 8001cb6:	2300      	moveq	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001cbe:	f000 fb07 	bl	80022d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001cc2:	2310      	movs	r3, #16
 8001cc4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001cce:	2360      	movs	r3, #96	@ 0x60
 8001cd0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 fc30 	bl	8003540 <HAL_RCC_OscConfig>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf14      	ite	ne
 8001ce6:	2301      	movne	r3, #1
 8001ce8:	2300      	moveq	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001cf0:	f000 faee 	bl	80022d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 f830 	bl	8003d74 <HAL_RCC_ClockConfig>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	bf14      	ite	ne
 8001d1a:	2301      	movne	r3, #1
 8001d1c:	2300      	moveq	r3, #0
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8001d24:	f000 fad4 	bl	80022d0 <Error_Handler>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3758      	adds	r7, #88	@ 0x58
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d34:	4b2c      	ldr	r3, [pc, #176]	@ (8001de8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d36:	4a2d      	ldr	r2, [pc, #180]	@ (8001dec <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 8001d38:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001de8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d40:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d42:	4b29      	ldr	r3, [pc, #164]	@ (8001de8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001d48:	4b27      	ldr	r3, [pc, #156]	@ (8001de8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001d4e:	4b26      	ldr	r3, [pc, #152]	@ (8001de8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001d54:	4b24      	ldr	r3, [pc, #144]	@ (8001de8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d56:	220c      	movs	r2, #12
 8001d58:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5a:	4b23      	ldr	r3, [pc, #140]	@ (8001de8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d60:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d66:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	@ (8001de8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001d78:	481b      	ldr	r0, [pc, #108]	@ (8001de8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d7a:	f003 fb4f 	bl	800541c <HAL_UART_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf14      	ite	ne
 8001d84:	2301      	movne	r3, #1
 8001d86:	2300      	moveq	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <_ZL20MX_LPUART1_UART_Initv+0x62>
  {
    Error_Handler();
 8001d8e:	f000 fa9f 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d92:	2100      	movs	r1, #0
 8001d94:	4814      	ldr	r0, [pc, #80]	@ (8001de8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001d96:	f004 fa3d 	bl	8006214 <HAL_UARTEx_SetTxFifoThreshold>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf14      	ite	ne
 8001da0:	2301      	movne	r3, #1
 8001da2:	2300      	moveq	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <_ZL20MX_LPUART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8001daa:	f000 fa91 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dae:	2100      	movs	r1, #0
 8001db0:	480d      	ldr	r0, [pc, #52]	@ (8001de8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001db2:	f004 fa6d 	bl	8006290 <HAL_UARTEx_SetRxFifoThreshold>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf14      	ite	ne
 8001dbc:	2301      	movne	r3, #1
 8001dbe:	2300      	moveq	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <_ZL20MX_LPUART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8001dc6:	f000 fa83 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001dca:	4807      	ldr	r0, [pc, #28]	@ (8001de8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8001dcc:	f004 f9e9 	bl	80061a2 <HAL_UARTEx_DisableFifoMode>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	bf14      	ite	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	2300      	moveq	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <_ZL20MX_LPUART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8001de0:	f000 fa76 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20040298 	.word	0x20040298
 8001dec:	40008000 	.word	0x40008000

08001df0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001df4:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001df6:	4a2d      	ldr	r2, [pc, #180]	@ (8001eac <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001dfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	4b29      	ldr	r3, [pc, #164]	@ (8001ea8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e08:	4b27      	ldr	r3, [pc, #156]	@ (8001ea8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ea8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e14:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e16:	220c      	movs	r2, #12
 8001e18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1a:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e20:	4b21      	ldr	r3, [pc, #132]	@ (8001ea8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e26:	4b20      	ldr	r3, [pc, #128]	@ (8001ea8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e38:	481b      	ldr	r0, [pc, #108]	@ (8001ea8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e3a:	f003 faef 	bl	800541c <HAL_UART_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001e4e:	f000 fa3f 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e52:	2100      	movs	r1, #0
 8001e54:	4814      	ldr	r0, [pc, #80]	@ (8001ea8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e56:	f004 f9dd 	bl	8006214 <HAL_UARTEx_SetTxFifoThreshold>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf14      	ite	ne
 8001e60:	2301      	movne	r3, #1
 8001e62:	2300      	moveq	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8001e6a:	f000 fa31 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	480d      	ldr	r0, [pc, #52]	@ (8001ea8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e72:	f004 fa0d 	bl	8006290 <HAL_UARTEx_SetRxFifoThreshold>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	bf14      	ite	ne
 8001e7c:	2301      	movne	r3, #1
 8001e7e:	2300      	moveq	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8001e86:	f000 fa23 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e8a:	4807      	ldr	r0, [pc, #28]	@ (8001ea8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001e8c:	f004 f989 	bl	80061a2 <HAL_UARTEx_DisableFifoMode>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bf14      	ite	ne
 8001e96:	2301      	movne	r3, #1
 8001e98:	2300      	moveq	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8001ea0:	f000 fa16 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	2004032c 	.word	0x2004032c
 8001eac:	40004400 	.word	0x40004400

08001eb0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f68 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001eb6:	4a2d      	ldr	r2, [pc, #180]	@ (8001f6c <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001eb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8001eba:	4b2b      	ldr	r3, [pc, #172]	@ (8001f68 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ebc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001ec0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec2:	4b29      	ldr	r3, [pc, #164]	@ (8001f68 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ec8:	4b27      	ldr	r3, [pc, #156]	@ (8001f68 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ece:	4b26      	ldr	r3, [pc, #152]	@ (8001f68 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ed4:	4b24      	ldr	r3, [pc, #144]	@ (8001f68 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eda:	4b23      	ldr	r3, [pc, #140]	@ (8001f68 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee0:	4b21      	ldr	r3, [pc, #132]	@ (8001f68 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee6:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eec:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ef8:	481b      	ldr	r0, [pc, #108]	@ (8001f68 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001efa:	f003 fa8f 	bl	800541c <HAL_UART_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf14      	ite	ne
 8001f04:	2301      	movne	r3, #1
 8001f06:	2300      	moveq	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001f0e:	f000 f9df 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f12:	2100      	movs	r1, #0
 8001f14:	4814      	ldr	r0, [pc, #80]	@ (8001f68 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001f16:	f004 f97d 	bl	8006214 <HAL_UARTEx_SetTxFifoThreshold>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf14      	ite	ne
 8001f20:	2301      	movne	r3, #1
 8001f22:	2300      	moveq	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8001f2a:	f000 f9d1 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f2e:	2100      	movs	r1, #0
 8001f30:	480d      	ldr	r0, [pc, #52]	@ (8001f68 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001f32:	f004 f9ad 	bl	8006290 <HAL_UARTEx_SetRxFifoThreshold>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8001f46:	f000 f9c3 	bl	80022d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f4a:	4807      	ldr	r0, [pc, #28]	@ (8001f68 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001f4c:	f004 f929 	bl	80061a2 <HAL_UARTEx_DisableFifoMode>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001f60:	f000 f9b6 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	200403c0 	.word	0x200403c0
 8001f6c:	40004800 	.word	0x40004800

08001f70 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f74:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <_ZL12MX_SPI1_Initv+0x7c>)
 8001f76:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff0 <_ZL12MX_SPI1_Initv+0x80>)
 8001f78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fec <_ZL12MX_SPI1_Initv+0x7c>)
 8001f7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <_ZL12MX_SPI1_Initv+0x7c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f88:	4b18      	ldr	r3, [pc, #96]	@ (8001fec <_ZL12MX_SPI1_Initv+0x7c>)
 8001f8a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001f8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f90:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <_ZL12MX_SPI1_Initv+0x7c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f96:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <_ZL12MX_SPI1_Initv+0x7c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f9c:	4b13      	ldr	r3, [pc, #76]	@ (8001fec <_ZL12MX_SPI1_Initv+0x7c>)
 8001f9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fa2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <_ZL12MX_SPI1_Initv+0x7c>)
 8001fa6:	2210      	movs	r2, #16
 8001fa8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001faa:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <_ZL12MX_SPI1_Initv+0x7c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <_ZL12MX_SPI1_Initv+0x7c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001fec <_ZL12MX_SPI1_Initv+0x7c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <_ZL12MX_SPI1_Initv+0x7c>)
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <_ZL12MX_SPI1_Initv+0x7c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fc8:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <_ZL12MX_SPI1_Initv+0x7c>)
 8001fca:	2208      	movs	r2, #8
 8001fcc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fce:	4807      	ldr	r0, [pc, #28]	@ (8001fec <_ZL12MX_SPI1_Initv+0x7c>)
 8001fd0:	f002 fea6 	bl	8004d20 <HAL_SPI_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bf14      	ite	ne
 8001fda:	2301      	movne	r3, #1
 8001fdc:	2300      	moveq	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8001fe4:	f000 f974 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20040454 	.word	0x20040454
 8001ff0:	40013000 	.word	0x40013000

08001ff4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <_ZL12MX_SPI2_Initv+0x7c>)
 8001ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8002074 <_ZL12MX_SPI2_Initv+0x80>)
 8001ffc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8002070 <_ZL12MX_SPI2_Initv+0x7c>)
 8002000:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002004:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002006:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <_ZL12MX_SPI2_Initv+0x7c>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800200c:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <_ZL12MX_SPI2_Initv+0x7c>)
 800200e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002012:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002014:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <_ZL12MX_SPI2_Initv+0x7c>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <_ZL12MX_SPI2_Initv+0x7c>)
 800201c:	2200      	movs	r2, #0
 800201e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002020:	4b13      	ldr	r3, [pc, #76]	@ (8002070 <_ZL12MX_SPI2_Initv+0x7c>)
 8002022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002026:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002028:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <_ZL12MX_SPI2_Initv+0x7c>)
 800202a:	2210      	movs	r2, #16
 800202c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800202e:	4b10      	ldr	r3, [pc, #64]	@ (8002070 <_ZL12MX_SPI2_Initv+0x7c>)
 8002030:	2200      	movs	r2, #0
 8002032:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002034:	4b0e      	ldr	r3, [pc, #56]	@ (8002070 <_ZL12MX_SPI2_Initv+0x7c>)
 8002036:	2200      	movs	r2, #0
 8002038:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800203a:	4b0d      	ldr	r3, [pc, #52]	@ (8002070 <_ZL12MX_SPI2_Initv+0x7c>)
 800203c:	2200      	movs	r2, #0
 800203e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002040:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <_ZL12MX_SPI2_Initv+0x7c>)
 8002042:	2207      	movs	r2, #7
 8002044:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002046:	4b0a      	ldr	r3, [pc, #40]	@ (8002070 <_ZL12MX_SPI2_Initv+0x7c>)
 8002048:	2200      	movs	r2, #0
 800204a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800204c:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <_ZL12MX_SPI2_Initv+0x7c>)
 800204e:	2208      	movs	r2, #8
 8002050:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002052:	4807      	ldr	r0, [pc, #28]	@ (8002070 <_ZL12MX_SPI2_Initv+0x7c>)
 8002054:	f002 fe64 	bl	8004d20 <HAL_SPI_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf14      	ite	ne
 800205e:	2301      	movne	r3, #1
 8002060:	2300      	moveq	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8002068:	f000 f932 	bl	80022d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200404b8 	.word	0x200404b8
 8002074:	40003800 	.word	0x40003800

08002078 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08c      	sub	sp, #48	@ 0x30
 800207c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
 800208c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800208e:	4b57      	ldr	r3, [pc, #348]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	4a56      	ldr	r2, [pc, #344]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800209a:	4b54      	ldr	r3, [pc, #336]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020a6:	4b51      	ldr	r3, [pc, #324]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	4a50      	ldr	r2, [pc, #320]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 80020ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020b2:	4b4e      	ldr	r3, [pc, #312]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	4b4b      	ldr	r3, [pc, #300]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	4a4a      	ldr	r2, [pc, #296]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ca:	4b48      	ldr	r3, [pc, #288]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d6:	4b45      	ldr	r3, [pc, #276]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	4a44      	ldr	r2, [pc, #272]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020e2:	4b42      	ldr	r3, [pc, #264]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ee:	4b3f      	ldr	r3, [pc, #252]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	4a3e      	ldr	r2, [pc, #248]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 80020f4:	f043 0308 	orr.w	r3, r3, #8
 80020f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020fa:	4b3c      	ldr	r3, [pc, #240]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002106:	4b39      	ldr	r3, [pc, #228]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	4a38      	ldr	r2, [pc, #224]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 800210c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002112:	4b36      	ldr	r3, [pc, #216]	@ (80021ec <_ZL12MX_GPIO_Initv+0x174>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800211e:	f001 f9ff 	bl	8003520 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8002128:	4831      	ldr	r0, [pc, #196]	@ (80021f0 <_ZL12MX_GPIO_Initv+0x178>)
 800212a:	f001 f91d 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	2140      	movs	r1, #64	@ 0x40
 8002132:	4830      	ldr	r0, [pc, #192]	@ (80021f4 <_ZL12MX_GPIO_Initv+0x17c>)
 8002134:	f001 f918 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002138:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800213c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	4619      	mov	r1, r3
 800214c:	482a      	ldr	r0, [pc, #168]	@ (80021f8 <_ZL12MX_GPIO_Initv+0x180>)
 800214e:	f000 ff61 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002152:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8002156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002158:	2301      	movs	r3, #1
 800215a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	4619      	mov	r1, r3
 800216a:	4821      	ldr	r0, [pc, #132]	@ (80021f0 <_ZL12MX_GPIO_Initv+0x178>)
 800216c:	f000 ff52 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002170:	2320      	movs	r3, #32
 8002172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800217c:	f107 031c 	add.w	r3, r7, #28
 8002180:	4619      	mov	r1, r3
 8002182:	481c      	ldr	r0, [pc, #112]	@ (80021f4 <_ZL12MX_GPIO_Initv+0x17c>)
 8002184:	f000 ff46 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002188:	2340      	movs	r3, #64	@ 0x40
 800218a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218c:	2301      	movs	r3, #1
 800218e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	4619      	mov	r1, r3
 800219e:	4815      	ldr	r0, [pc, #84]	@ (80021f4 <_ZL12MX_GPIO_Initv+0x17c>)
 80021a0:	f000 ff38 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80021a4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80021a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021b6:	230a      	movs	r3, #10
 80021b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 031c 	add.w	r3, r7, #28
 80021be:	4619      	mov	r1, r3
 80021c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c4:	f000 ff26 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	4619      	mov	r1, r3
 80021dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e0:	f000 ff18 	bl	8003014 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80021e4:	bf00      	nop
 80021e6:	3730      	adds	r7, #48	@ 0x30
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	48000400 	.word	0x48000400
 80021f4:	48001800 	.word	0x48001800
 80021f8:	48000800 	.word	0x48000800

080021fc <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*) &ch, 1, 0xFFFF);
 8002204:	1d39      	adds	r1, r7, #4
 8002206:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800220a:	2201      	movs	r2, #1
 800220c:	4803      	ldr	r0, [pc, #12]	@ (800221c <__io_putchar+0x20>)
 800220e:	f003 f955 	bl	80054bc <HAL_UART_Transmit>
	return ch;
 8002212:	687b      	ldr	r3, [r7, #4]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20040298 	.word	0x20040298

08002220 <_Z8DWT_Initv>:

void DWT_Init(void) {
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8002224:	4b09      	ldr	r3, [pc, #36]	@ (800224c <_Z8DWT_Initv+0x2c>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a08      	ldr	r2, [pc, #32]	@ (800224c <_Z8DWT_Initv+0x2c>)
 800222a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800222e:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;                                 // Reset counter
 8002230:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <_Z8DWT_Initv+0x30>)
 8002232:	2200      	movs	r2, #0
 8002234:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;             // Enable the cycle counter
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <_Z8DWT_Initv+0x30>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a05      	ldr	r2, [pc, #20]	@ (8002250 <_Z8DWT_Initv+0x30>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6013      	str	r3, [r2, #0]
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000edf0 	.word	0xe000edf0
 8002250:	e0001000 	.word	0xe0001000

08002254 <_Z17is_button_pressedv>:

bool is_button_pressed() {
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
	static uint32_t last_press_time = 0;
	static bool last_button_state = false;

	// Read current state
	bool current_state = (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET);
 800225a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800225e:	4819      	ldr	r0, [pc, #100]	@ (80022c4 <_Z17is_button_pressedv+0x70>)
 8002260:	f001 f86a 	bl	8003338 <HAL_GPIO_ReadPin>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf0c      	ite	eq
 800226a:	2301      	moveq	r3, #1
 800226c:	2300      	movne	r3, #0
 800226e:	71fb      	strb	r3, [r7, #7]

	// Debounce logic
	if (current_state && !last_button_state) {
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d01d      	beq.n	80022b2 <_Z17is_button_pressedv+0x5e>
 8002276:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <_Z17is_button_pressedv+0x74>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	f083 0301 	eor.w	r3, r3, #1
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d016      	beq.n	80022b2 <_Z17is_button_pressedv+0x5e>
		if ((HAL_GetTick() - last_press_time) > DEBOUNCE_TIME_MS) {
 8002284:	f000 fdb0 	bl	8002de8 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	4b10      	ldr	r3, [pc, #64]	@ (80022cc <_Z17is_button_pressedv+0x78>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b32      	cmp	r3, #50	@ 0x32
 8002292:	bf8c      	ite	hi
 8002294:	2301      	movhi	r3, #1
 8002296:	2300      	movls	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <_Z17is_button_pressedv+0x5e>
			last_press_time = HAL_GetTick();
 800229e:	f000 fda3 	bl	8002de8 <HAL_GetTick>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4a09      	ldr	r2, [pc, #36]	@ (80022cc <_Z17is_button_pressedv+0x78>)
 80022a6:	6013      	str	r3, [r2, #0]
			last_button_state = true;
 80022a8:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <_Z17is_button_pressedv+0x74>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
			return true;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e003      	b.n	80022ba <_Z17is_button_pressedv+0x66>
		}
	}

	// Update state
	last_button_state = current_state;
 80022b2:	4a05      	ldr	r2, [pc, #20]	@ (80022c8 <_Z17is_button_pressedv+0x74>)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	7013      	strb	r3, [r2, #0]
	return false;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	48000800 	.word	0x48000800
 80022c8:	20040ce4 	.word	0x20040ce4
 80022cc:	20040ce0 	.word	0x20040ce0

080022d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d4:	b672      	cpsid	i
}
 80022d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <Error_Handler+0x8>

080022dc <_ZN6TPixy2I9Link2UARTEC1Ev>:
	uint8_t m_length;
	bool m_cs;
};

template<class LinkType>
TPixy2<LinkType>::TPixy2() :
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
		ccc(this), line(this), video(this) {
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3308      	adds	r3, #8
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f8ac 	bl	8002448 <_ZN8Pixy2CCCI9Link2UARTEC1EP6TPixy2IS0_E>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3314      	adds	r3, #20
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f8b5 	bl	8002466 <_ZN9Pixy2LineI9Link2UARTEC1EP6TPixy2IS0_E>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3330      	adds	r3, #48	@ 0x30
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f8be 	bl	8002484 <_ZN10Pixy2VideoI9Link2UARTEC1EP6TPixy2IS0_E>
	// allocate buffer space for send/receive
	m_buf = (uint8_t*) malloc(PIXY_BUFFERSIZE);
 8002308:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800230c:	f004 f94e 	bl	80065ac <malloc>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	639a      	str	r2, [r3, #56]	@ 0x38
	// shifted buffer is used for sending, so we have space to write header information
	m_bufPayload = m_buf + PIXY_SEND_HEADER_SIZE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800231c:	1d1a      	adds	r2, r3, #4
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	63da      	str	r2, [r3, #60]	@ 0x3c
	frameWidth = frameHeight = 0;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	80da      	strh	r2, [r3, #6]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	88da      	ldrh	r2, [r3, #6]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	809a      	strh	r2, [r3, #4]
	version = NULL;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
}
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh>:
private:
  TPixy2<LinkType> *m_pixy;
};

template <class LinkType>
int8_t Pixy2CCC<LinkType>::getBlocks(bool wait, uint8_t sigmap, uint8_t maxBlocks)
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	4608      	mov	r0, r1
 800234a:	4611      	mov	r1, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4603      	mov	r3, r0
 8002350:	70fb      	strb	r3, [r7, #3]
 8002352:	460b      	mov	r3, r1
 8002354:	70bb      	strb	r3, [r7, #2]
 8002356:	4613      	mov	r3, r2
 8002358:	707b      	strb	r3, [r7, #1]
{
  blocks = NULL;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	605a      	str	r2, [r3, #4]
  numBlocks = 0;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
  
  while(1)
  {
    // fill in request data
    m_pixy->m_bufPayload[0] = sigmap;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236c:	78ba      	ldrb	r2, [r7, #2]
 800236e:	701a      	strb	r2, [r3, #0]
    m_pixy->m_bufPayload[1] = maxBlocks;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002376:	3301      	adds	r3, #1
 8002378:	787a      	ldrb	r2, [r7, #1]
 800237a:	701a      	strb	r2, [r3, #0]
    m_pixy->m_length = 2;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2202      	movs	r2, #2
 8002382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    m_pixy->m_type = CCC_REQUEST_BLOCKS;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  
    // send request
    m_pixy->sendPacket();
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f884 	bl	80024a2 <_ZN6TPixy2I9Link2UARTE10sendPacketEv>
    if (m_pixy->recvPacket()==0)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f8ac 	bl	80024fc <_ZN6TPixy2I9Link2UARTE10recvPacketEv>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	bf0c      	ite	eq
 80023aa:	2301      	moveq	r3, #1
 80023ac:	2300      	movne	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d03b      	beq.n	800242c <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xec>
    {
      if (m_pixy->m_type==CCC_RESPONSE_BLOCKS)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023bc:	2b21      	cmp	r3, #33	@ 0x21
 80023be:	d114      	bne.n	80023ea <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xaa>
      {
        blocks = (Block *)m_pixy->m_buf;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	605a      	str	r2, [r3, #4]
        numBlocks = m_pixy->m_length/sizeof(Block);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0x104>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	701a      	strb	r2, [r3, #0]
        return numBlocks;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b25b      	sxtb	r3, r3
 80023e8:	e028      	b.n	800243c <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xfc>
      }
	  // deal with busy and program changing states from Pixy (we'll wait)
      else if (m_pixy->m_type==PIXY_TYPE_RESPONSE_ERROR)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d11d      	bne.n	8002432 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xf2>
      {
        if ((int8_t)m_pixy->m_buf[0]==PIXY_RESULT_BUSY)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2bfe      	cmp	r3, #254	@ 0xfe
 8002400:	d108      	bne.n	8002414 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xd4>
        {
          if(!wait)
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	f083 0301 	eor.w	r3, r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d011      	beq.n	8002432 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xf2>
            return PIXY_RESULT_BUSY; // new data not available yet
 800240e:	f06f 0301 	mvn.w	r3, #1
 8002412:	e013      	b.n	800243c <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xfc>
		}
	    else if ((int8_t)m_pixy->m_buf[0]!=PIXY_RESULT_PROG_CHANGING)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2bfa      	cmp	r3, #250	@ 0xfa
 800241e:	d008      	beq.n	8002432 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xf2>
          return m_pixy->m_buf[0];
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b25b      	sxtb	r3, r3
 800242a:	e007      	b.n	800243c <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xfc>
      }
    }
    else
      return PIXY_RESULT_ERROR;  // some kind of bitstream error
 800242c:	f04f 33ff 	mov.w	r3, #4294967295
 8002430:	e004      	b.n	800243c <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0xfc>
  
    // If we're waiting for frame data, don't thrash Pixy with requests.
    // We can give up half a millisecond of latency (worst case)	
    delayMicroseconds(500);
 8002432:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002436:	f7fe fe21 	bl	800107c <_Z17delayMicrosecondsm>
    m_pixy->m_bufPayload[0] = sigmap;
 800243a:	e794      	b.n	8002366 <_ZN8Pixy2CCCI9Link2UARTE9getBlocksEbhh+0x26>
  }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	92492493 	.word	0x92492493

08002448 <_ZN8Pixy2CCCI9Link2UARTEC1EP6TPixy2IS0_E>:
  Pixy2CCC(TPixy2<LinkType> *pixy)
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
    m_pixy = pixy;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	609a      	str	r2, [r3, #8]
  }
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <_ZN9Pixy2LineI9Link2UARTEC1EP6TPixy2IS0_E>:

template<class LinkType> class TPixy2;

template<class LinkType> class Pixy2Line {
public:
	Pixy2Line(TPixy2<LinkType> *pixy) {
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
		m_pixy = pixy;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	619a      	str	r2, [r3, #24]
	}
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_ZN10Pixy2VideoI9Link2UARTEC1EP6TPixy2IS0_E>:
template <class LinkType> class TPixy2;

template <class LinkType> class Pixy2Video
{
public:
  Pixy2Video(TPixy2<LinkType> *pixy)
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  {
    m_pixy = pixy;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	601a      	str	r2, [r3, #0]
  }	  
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_ZN6TPixy2I9Link2UARTE10sendPacketEv>:
	}
	return PIXY_RESULT_OK;
}

template<class LinkType>
int16_t TPixy2<LinkType>::sendPacket() {
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
	// write header info at beginnig of buffer
	m_buf[0] = PIXY_NO_CHECKSUM_SYNC & 0xff;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ae:	22ae      	movs	r2, #174	@ 0xae
 80024b0:	701a      	strb	r2, [r3, #0]
	m_buf[1] = PIXY_NO_CHECKSUM_SYNC >> 8;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b6:	3301      	adds	r3, #1
 80024b8:	22c1      	movs	r2, #193	@ 0xc1
 80024ba:	701a      	strb	r2, [r3, #0]
	m_buf[2] = m_type;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c0:	3302      	adds	r3, #2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 80024c8:	701a      	strb	r2, [r3, #0]
	m_buf[3] = m_length;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ce:	3303      	adds	r3, #3
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 80024d6:	701a      	strb	r2, [r3, #0]
	// send whole thing -- header and data in one call
	return m_link.send(m_buf, m_length + PIXY_SEND_HEADER_SIZE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e8:	3304      	adds	r3, #4
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	f7fe fe37 	bl	8001160 <_ZN9Link2UART4sendEPhh>
 80024f2:	4603      	mov	r3, r0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <_ZN6TPixy2I9Link2UARTE10recvPacketEv>:
template<class LinkType> int16_t TPixy2<LinkType>::recvPacket() {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	res = getSync();
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f889 	bl	800261c <_ZN6TPixy2I9Link2UARTE7getSyncEv>
 800250a:	4603      	mov	r3, r0
 800250c:	81fb      	strh	r3, [r7, #14]
	if (res < 0)
 800250e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002512:	2b00      	cmp	r3, #0
 8002514:	da02      	bge.n	800251c <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x20>
		return res;
 8002516:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800251a:	e078      	b.n	800260e <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
	if (m_cs) {
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002522:	2b00      	cmp	r3, #0
 8002524:	d040      	beq.n	80025a8 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0xac>
		res = m_link.recv(m_buf, 4);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002530:	2300      	movs	r3, #0
 8002532:	2204      	movs	r2, #4
 8002534:	f7fe fdd4 	bl	80010e0 <_ZN9Link2UART4recvEPhhPt>
 8002538:	4603      	mov	r3, r0
 800253a:	81fb      	strh	r3, [r7, #14]
		if (res < 0)
 800253c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002540:	2b00      	cmp	r3, #0
 8002542:	da02      	bge.n	800254a <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x4e>
			return res;
 8002544:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002548:	e061      	b.n	800260e <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
		m_type = m_buf[0];
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		m_length = m_buf[1];
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255a:	785a      	ldrb	r2, [r3, #1]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		csSerial = *(uint16_t*) &m_buf[2];
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002566:	885b      	ldrh	r3, [r3, #2]
 8002568:	81bb      	strh	r3, [r7, #12]
		res = m_link.recv(m_buf, m_length, &csCalc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800257a:	f107 030a 	add.w	r3, r7, #10
 800257e:	f7fe fdaf 	bl	80010e0 <_ZN9Link2UART4recvEPhhPt>
 8002582:	4603      	mov	r3, r0
 8002584:	81fb      	strh	r3, [r7, #14]
		if (res < 0)
 8002586:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800258a:	2b00      	cmp	r3, #0
 800258c:	da02      	bge.n	8002594 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x98>
			return res;
 800258e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002592:	e03c      	b.n	800260e <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
		if (csSerial != csCalc) {
 8002594:	897b      	ldrh	r3, [r7, #10]
 8002596:	89ba      	ldrh	r2, [r7, #12]
 8002598:	429a      	cmp	r2, r3
 800259a:	d037      	beq.n	800260c <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x110>
			println("error: checksum\r\n");
 800259c:	481e      	ldr	r0, [pc, #120]	@ (8002618 <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x11c>)
 800259e:	f7fe fd57 	bl	8001050 <_Z7printlnPKc>
			return PIXY_RESULT_CHECKSUM_ERROR;
 80025a2:	f06f 0302 	mvn.w	r3, #2
 80025a6:	e032      	b.n	800260e <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
		res = m_link.recv(m_buf, 2);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80025b2:	2300      	movs	r3, #0
 80025b4:	2202      	movs	r2, #2
 80025b6:	f7fe fd93 	bl	80010e0 <_ZN9Link2UART4recvEPhhPt>
 80025ba:	4603      	mov	r3, r0
 80025bc:	81fb      	strh	r3, [r7, #14]
		if (res < 0)
 80025be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	da02      	bge.n	80025cc <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0xd0>
			return res;
 80025c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ca:	e020      	b.n	800260e <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
		m_type = m_buf[0];
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	781a      	ldrb	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		m_length = m_buf[1];
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025dc:	785a      	ldrb	r2, [r3, #1]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		res = m_link.recv(m_buf, m_length);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80025f4:	2300      	movs	r3, #0
 80025f6:	f7fe fd73 	bl	80010e0 <_ZN9Link2UART4recvEPhhPt>
 80025fa:	4603      	mov	r3, r0
 80025fc:	81fb      	strh	r3, [r7, #14]
		if (res < 0)
 80025fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002602:	2b00      	cmp	r3, #0
 8002604:	da02      	bge.n	800260c <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x110>
			return res;
 8002606:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800260a:	e000      	b.n	800260e <_ZN6TPixy2I9Link2UARTE10recvPacketEv+0x112>
	return PIXY_RESULT_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	0800adf8 	.word	0x0800adf8

0800261c <_ZN6TPixy2I9Link2UARTE7getSyncEv>:
template<class LinkType> int16_t TPixy2<LinkType>::getSync() {
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	for (i = j = 0, cprev = 0; true; i++) {
 8002624:	2300      	movs	r3, #0
 8002626:	75bb      	strb	r3, [r7, #22]
 8002628:	7dbb      	ldrb	r3, [r7, #22]
 800262a:	75fb      	strb	r3, [r7, #23]
 800262c:	2300      	movs	r3, #0
 800262e:	757b      	strb	r3, [r7, #21]
		res = m_link.recv(&c, 1);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8002636:	f107 010f 	add.w	r1, r7, #15
 800263a:	2300      	movs	r3, #0
 800263c:	2201      	movs	r2, #1
 800263e:	f7fe fd4f 	bl	80010e0 <_ZN9Link2UART4recvEPhhPt>
 8002642:	4603      	mov	r3, r0
 8002644:	827b      	strh	r3, [r7, #18]
		if (res >= PIXY_RESULT_OK) {
 8002646:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db22      	blt.n	8002694 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0x78>
			start = cprev;
 800264e:	7d7b      	ldrb	r3, [r7, #21]
 8002650:	823b      	strh	r3, [r7, #16]
			start |= c << 8;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	b21b      	sxth	r3, r3
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	b21a      	sxth	r2, r3
 800265a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	b21b      	sxth	r3, r3
 8002662:	823b      	strh	r3, [r7, #16]
			cprev = c;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	757b      	strb	r3, [r7, #21]
			if (start == PIXY_CHECKSUM_SYNC) {
 8002668:	8a3b      	ldrh	r3, [r7, #16]
 800266a:	f24c 12af 	movw	r2, #49583	@ 0xc1af
 800266e:	4293      	cmp	r3, r2
 8002670:	d105      	bne.n	800267e <_ZN6TPixy2I9Link2UARTE7getSyncEv+0x62>
				m_cs = true;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
				return PIXY_RESULT_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	e022      	b.n	80026c4 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0xa8>
			if (start == PIXY_NO_CHECKSUM_SYNC) {
 800267e:	8a3b      	ldrh	r3, [r7, #16]
 8002680:	f24c 12ae 	movw	r2, #49582	@ 0xc1ae
 8002684:	4293      	cmp	r3, r2
 8002686:	d105      	bne.n	8002694 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0x78>
				m_cs = false;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
				return PIXY_RESULT_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	e017      	b.n	80026c4 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0xa8>
		if (i >= 4) {
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d910      	bls.n	80026bc <_ZN6TPixy2I9Link2UARTE7getSyncEv+0xa0>
			if (j >= 4) {
 800269a:	7dbb      	ldrb	r3, [r7, #22]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d905      	bls.n	80026ac <_ZN6TPixy2I9Link2UARTE7getSyncEv+0x90>
				println("error: no response\r\n");
 80026a0:	480a      	ldr	r0, [pc, #40]	@ (80026cc <_ZN6TPixy2I9Link2UARTE7getSyncEv+0xb0>)
 80026a2:	f7fe fcd5 	bl	8001050 <_Z7printlnPKc>
				return PIXY_RESULT_ERROR;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	e00b      	b.n	80026c4 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0xa8>
			delayMicroseconds(25);
 80026ac:	2019      	movs	r0, #25
 80026ae:	f7fe fce5 	bl	800107c <_Z17delayMicrosecondsm>
			j++;
 80026b2:	7dbb      	ldrb	r3, [r7, #22]
 80026b4:	3301      	adds	r3, #1
 80026b6:	75bb      	strb	r3, [r7, #22]
			i = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	75fb      	strb	r3, [r7, #23]
	for (i = j = 0, cprev = 0; true; i++) {
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
 80026be:	3301      	adds	r3, #1
 80026c0:	75fb      	strb	r3, [r7, #23]
		res = m_link.recv(&c, 1);
 80026c2:	e7b5      	b.n	8002630 <_ZN6TPixy2I9Link2UARTE7getSyncEv+0x14>
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	0800ae0c 	.word	0x0800ae0c

080026d0 <_Z41__static_initialization_and_destruction_0v>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 80026d0:	b5b0      	push	{r4, r5, r7, lr}
 80026d2:	af00      	add	r7, sp, #0
Pixy2UART pixy;
 80026d4:	4808      	ldr	r0, [pc, #32]	@ (80026f8 <_Z41__static_initialization_and_destruction_0v+0x28>)
 80026d6:	f7ff fe01 	bl	80022dc <_ZN6TPixy2I9Link2UARTEC1Ev>
Car car_arry[NUM_CARS];
 80026da:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <_Z41__static_initialization_and_destruction_0v+0x2c>)
 80026dc:	2403      	movs	r4, #3
 80026de:	461d      	mov	r5, r3
 80026e0:	e004      	b.n	80026ec <_Z41__static_initialization_and_destruction_0v+0x1c>
 80026e2:	4628      	mov	r0, r5
 80026e4:	f7fe fd5e 	bl	80011a4 <_ZN3CarC1Ev>
 80026e8:	3c01      	subs	r4, #1
 80026ea:	35ac      	adds	r5, #172	@ 0xac
 80026ec:	2c00      	cmp	r4, #0
 80026ee:	daf8      	bge.n	80026e2 <_Z41__static_initialization_and_destruction_0v+0x12>
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	bdb0      	pop	{r4, r5, r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2004051c 	.word	0x2004051c
 80026fc:	20040564 	.word	0x20040564

08002700 <_Z41__static_initialization_and_destruction_1v>:
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
Pixy2UART pixy;
 8002704:	4802      	ldr	r0, [pc, #8]	@ (8002710 <_Z41__static_initialization_and_destruction_1v+0x10>)
 8002706:	f000 f805 	bl	8002714 <_ZN6TPixy2I9Link2UARTED1Ev>
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	2004051c 	.word	0x2004051c

08002714 <_ZN6TPixy2I9Link2UARTED1Ev>:
TPixy2<LinkType>::~TPixy2() {
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	m_link.close();
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3334      	adds	r3, #52	@ 0x34
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe fcd3 	bl	80010cc <_ZN9Link2UART5closeEv>
	free(m_buf);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272a:	4618      	mov	r0, r3
 800272c:	f003 ff46 	bl	80065bc <free>
}
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <_GLOBAL__sub_I__Z7printlnPKc>:
 800273a:	b580      	push	{r7, lr}
 800273c:	af00      	add	r7, sp, #0
 800273e:	f7ff ffc7 	bl	80026d0 <_Z41__static_initialization_and_destruction_0v>
 8002742:	bd80      	pop	{r7, pc}

08002744 <_GLOBAL__sub_D__Z7printlnPKc>:
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
 8002748:	f7ff ffda 	bl	8002700 <_Z41__static_initialization_and_destruction_1v>
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002756:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <HAL_MspInit+0x44>)
 8002758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275a:	4a0e      	ldr	r2, [pc, #56]	@ (8002794 <HAL_MspInit+0x44>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6613      	str	r3, [r2, #96]	@ 0x60
 8002762:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <HAL_MspInit+0x44>)
 8002764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800276e:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <HAL_MspInit+0x44>)
 8002770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002772:	4a08      	ldr	r2, [pc, #32]	@ (8002794 <HAL_MspInit+0x44>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002778:	6593      	str	r3, [r2, #88]	@ 0x58
 800277a:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <HAL_MspInit+0x44>)
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000

08002798 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0b2      	sub	sp, #200	@ 0xc8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027b0:	f107 0320 	add.w	r3, r7, #32
 80027b4:	2294      	movs	r2, #148	@ 0x94
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f004 ffbe 	bl	800773a <memset>
  if(huart->Instance==LPUART1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a64      	ldr	r2, [pc, #400]	@ (8002954 <HAL_UART_MspInit+0x1bc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d13e      	bne.n	8002846 <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80027c8:	2320      	movs	r3, #32
 80027ca:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80027cc:	2300      	movs	r3, #0
 80027ce:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027d0:	f107 0320 	add.w	r3, r7, #32
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 fd8b 	bl	80042f0 <HAL_RCCEx_PeriphCLKConfig>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027e0:	f7ff fd76 	bl	80022d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80027e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 80027e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e8:	4a5b      	ldr	r2, [pc, #364]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80027f0:	4b59      	ldr	r3, [pc, #356]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 80027f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027fc:	4b56      	ldr	r3, [pc, #344]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 80027fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002800:	4a55      	ldr	r2, [pc, #340]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 8002802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002806:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002808:	4b53      	ldr	r3, [pc, #332]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 800280a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8002814:	f000 fe84 	bl	8003520 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8002818:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800281c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002832:	2308      	movs	r3, #8
 8002834:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002838:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800283c:	4619      	mov	r1, r3
 800283e:	4847      	ldr	r0, [pc, #284]	@ (800295c <HAL_UART_MspInit+0x1c4>)
 8002840:	f000 fbe8 	bl	8003014 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002844:	e082      	b.n	800294c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a45      	ldr	r2, [pc, #276]	@ (8002960 <HAL_UART_MspInit+0x1c8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d13c      	bne.n	80028ca <HAL_UART_MspInit+0x132>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002850:	2302      	movs	r3, #2
 8002852:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002854:	2300      	movs	r3, #0
 8002856:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002858:	f107 0320 	add.w	r3, r7, #32
 800285c:	4618      	mov	r0, r3
 800285e:	f001 fd47 	bl	80042f0 <HAL_RCCEx_PeriphCLKConfig>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002868:	f7ff fd32 	bl	80022d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800286c:	4b3a      	ldr	r3, [pc, #232]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 800286e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002870:	4a39      	ldr	r2, [pc, #228]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 8002872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002876:	6593      	str	r3, [r2, #88]	@ 0x58
 8002878:	4b37      	ldr	r3, [pc, #220]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 800287a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002884:	4b34      	ldr	r3, [pc, #208]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 8002886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002888:	4a33      	ldr	r2, [pc, #204]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002890:	4b31      	ldr	r3, [pc, #196]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 8002892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800289c:	230c      	movs	r3, #12
 800289e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ae:	2303      	movs	r3, #3
 80028b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028b4:	2307      	movs	r3, #7
 80028b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ba:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80028be:	4619      	mov	r1, r3
 80028c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028c4:	f000 fba6 	bl	8003014 <HAL_GPIO_Init>
}
 80028c8:	e040      	b.n	800294c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART3)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a25      	ldr	r2, [pc, #148]	@ (8002964 <HAL_UART_MspInit+0x1cc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d13b      	bne.n	800294c <HAL_UART_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80028d4:	2304      	movs	r3, #4
 80028d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80028d8:	2300      	movs	r3, #0
 80028da:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028dc:	f107 0320 	add.w	r3, r7, #32
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 fd05 	bl	80042f0 <HAL_RCCEx_PeriphCLKConfig>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_UART_MspInit+0x158>
      Error_Handler();
 80028ec:	f7ff fcf0 	bl	80022d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028f0:	4b19      	ldr	r3, [pc, #100]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f4:	4a18      	ldr	r2, [pc, #96]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 80028f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80028fc:	4b16      	ldr	r3, [pc, #88]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002900:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002908:	4b13      	ldr	r3, [pc, #76]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 800290a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290c:	4a12      	ldr	r2, [pc, #72]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 800290e:	f043 0308 	orr.w	r3, r3, #8
 8002912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002914:	4b10      	ldr	r3, [pc, #64]	@ (8002958 <HAL_UART_MspInit+0x1c0>)
 8002916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002920:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002928:	2302      	movs	r3, #2
 800292a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002934:	2303      	movs	r3, #3
 8002936:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800293a:	2307      	movs	r3, #7
 800293c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002940:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002944:	4619      	mov	r1, r3
 8002946:	4808      	ldr	r0, [pc, #32]	@ (8002968 <HAL_UART_MspInit+0x1d0>)
 8002948:	f000 fb64 	bl	8003014 <HAL_GPIO_Init>
}
 800294c:	bf00      	nop
 800294e:	37c8      	adds	r7, #200	@ 0xc8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40008000 	.word	0x40008000
 8002958:	40021000 	.word	0x40021000
 800295c:	48001800 	.word	0x48001800
 8002960:	40004400 	.word	0x40004400
 8002964:	40004800 	.word	0x40004800
 8002968:	48000c00 	.word	0x48000c00

0800296c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	@ 0x30
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a45      	ldr	r2, [pc, #276]	@ (8002aa0 <HAL_SPI_MspInit+0x134>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d129      	bne.n	80029e2 <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800298e:	4b45      	ldr	r3, [pc, #276]	@ (8002aa4 <HAL_SPI_MspInit+0x138>)
 8002990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002992:	4a44      	ldr	r2, [pc, #272]	@ (8002aa4 <HAL_SPI_MspInit+0x138>)
 8002994:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002998:	6613      	str	r3, [r2, #96]	@ 0x60
 800299a:	4b42      	ldr	r3, [pc, #264]	@ (8002aa4 <HAL_SPI_MspInit+0x138>)
 800299c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	4b3f      	ldr	r3, [pc, #252]	@ (8002aa4 <HAL_SPI_MspInit+0x138>)
 80029a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029aa:	4a3e      	ldr	r2, [pc, #248]	@ (8002aa4 <HAL_SPI_MspInit+0x138>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029b2:	4b3c      	ldr	r3, [pc, #240]	@ (8002aa4 <HAL_SPI_MspInit+0x138>)
 80029b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029be:	23e0      	movs	r3, #224	@ 0xe0
 80029c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ce:	2305      	movs	r3, #5
 80029d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d2:	f107 031c 	add.w	r3, r7, #28
 80029d6:	4619      	mov	r1, r3
 80029d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029dc:	f000 fb1a 	bl	8003014 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 80029e0:	e059      	b.n	8002a96 <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a30      	ldr	r2, [pc, #192]	@ (8002aa8 <HAL_SPI_MspInit+0x13c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d154      	bne.n	8002a96 <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029ec:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa4 <HAL_SPI_MspInit+0x138>)
 80029ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f0:	4a2c      	ldr	r2, [pc, #176]	@ (8002aa4 <HAL_SPI_MspInit+0x138>)
 80029f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80029f8:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa4 <HAL_SPI_MspInit+0x138>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a04:	4b27      	ldr	r3, [pc, #156]	@ (8002aa4 <HAL_SPI_MspInit+0x138>)
 8002a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a08:	4a26      	ldr	r2, [pc, #152]	@ (8002aa4 <HAL_SPI_MspInit+0x138>)
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a10:	4b24      	ldr	r3, [pc, #144]	@ (8002aa4 <HAL_SPI_MspInit+0x138>)
 8002a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1c:	4b21      	ldr	r3, [pc, #132]	@ (8002aa4 <HAL_SPI_MspInit+0x138>)
 8002a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a20:	4a20      	ldr	r2, [pc, #128]	@ (8002aa4 <HAL_SPI_MspInit+0x138>)
 8002a22:	f043 0302 	orr.w	r3, r3, #2
 8002a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a28:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa4 <HAL_SPI_MspInit+0x138>)
 8002a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a34:	2302      	movs	r3, #2
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8002a44:	2303      	movs	r3, #3
 8002a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4817      	ldr	r0, [pc, #92]	@ (8002aac <HAL_SPI_MspInit+0x140>)
 8002a50:	f000 fae0 	bl	8003014 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a54:	2304      	movs	r3, #4
 8002a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a64:	2305      	movs	r3, #5
 8002a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	480f      	ldr	r0, [pc, #60]	@ (8002aac <HAL_SPI_MspInit+0x140>)
 8002a70:	f000 fad0 	bl	8003014 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a82:	2303      	movs	r3, #3
 8002a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a86:	2305      	movs	r3, #5
 8002a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8a:	f107 031c 	add.w	r3, r7, #28
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4807      	ldr	r0, [pc, #28]	@ (8002ab0 <HAL_SPI_MspInit+0x144>)
 8002a92:	f000 fabf 	bl	8003014 <HAL_GPIO_Init>
}
 8002a96:	bf00      	nop
 8002a98:	3730      	adds	r7, #48	@ 0x30
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40013000 	.word	0x40013000
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40003800 	.word	0x40003800
 8002aac:	48000800 	.word	0x48000800
 8002ab0:	48000400 	.word	0x48000400

08002ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ab8:	bf00      	nop
 8002aba:	e7fd      	b.n	8002ab8 <NMI_Handler+0x4>

08002abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ac0:	bf00      	nop
 8002ac2:	e7fd      	b.n	8002ac0 <HardFault_Handler+0x4>

08002ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <MemManage_Handler+0x4>

08002acc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ad0:	bf00      	nop
 8002ad2:	e7fd      	b.n	8002ad0 <BusFault_Handler+0x4>

08002ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ad8:	bf00      	nop
 8002ada:	e7fd      	b.n	8002ad8 <UsageFault_Handler+0x4>

08002adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b0a:	f000 f959 	bl	8002dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  return 1;
 8002b16:	2301      	movs	r3, #1
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <_kill>:

int _kill(int pid, int sig)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b2c:	f004 fe68 	bl	8007800 <__errno>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2216      	movs	r2, #22
 8002b34:	601a      	str	r2, [r3, #0]
  return -1;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <_exit>:

void _exit (int status)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b4a:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ffe7 	bl	8002b22 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b54:	bf00      	nop
 8002b56:	e7fd      	b.n	8002b54 <_exit+0x12>

08002b58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e00a      	b.n	8002b80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b6a:	f3af 8000 	nop.w
 8002b6e:	4601      	mov	r1, r0
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	60ba      	str	r2, [r7, #8]
 8002b76:	b2ca      	uxtb	r2, r1
 8002b78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	dbf0      	blt.n	8002b6a <_read+0x12>
  }

  return len;
 8002b88:	687b      	ldr	r3, [r7, #4]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	e009      	b.n	8002bb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	60ba      	str	r2, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fb25 	bl	80021fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	dbf1      	blt.n	8002ba4 <_write+0x12>
  }
  return len;
 8002bc0:	687b      	ldr	r3, [r7, #4]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <_close>:

int _close(int file)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bf2:	605a      	str	r2, [r3, #4]
  return 0;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <_isatty>:

int _isatty(int file)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c0a:	2301      	movs	r3, #1
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c3c:	4a14      	ldr	r2, [pc, #80]	@ (8002c90 <_sbrk+0x5c>)
 8002c3e:	4b15      	ldr	r3, [pc, #84]	@ (8002c94 <_sbrk+0x60>)
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c48:	4b13      	ldr	r3, [pc, #76]	@ (8002c98 <_sbrk+0x64>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d102      	bne.n	8002c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c50:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <_sbrk+0x64>)
 8002c52:	4a12      	ldr	r2, [pc, #72]	@ (8002c9c <_sbrk+0x68>)
 8002c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c56:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <_sbrk+0x64>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d207      	bcs.n	8002c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c64:	f004 fdcc 	bl	8007800 <__errno>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c72:	e009      	b.n	8002c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c74:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <_sbrk+0x64>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c7a:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <_sbrk+0x64>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	4a05      	ldr	r2, [pc, #20]	@ (8002c98 <_sbrk+0x64>)
 8002c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c86:	68fb      	ldr	r3, [r7, #12]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	200a0000 	.word	0x200a0000
 8002c94:	00000400 	.word	0x00000400
 8002c98:	20040ce8 	.word	0x20040ce8
 8002c9c:	20040e40 	.word	0x20040e40

08002ca0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ca4:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <SystemInit+0x20>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002caa:	4a05      	ldr	r2, [pc, #20]	@ (8002cc0 <SystemInit+0x20>)
 8002cac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002cc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cc8:	f7ff ffea 	bl	8002ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ccc:	480c      	ldr	r0, [pc, #48]	@ (8002d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cce:	490d      	ldr	r1, [pc, #52]	@ (8002d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d08 <LoopForever+0xe>)
  movs r3, #0
 8002cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd4:	e002      	b.n	8002cdc <LoopCopyDataInit>

08002cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cda:	3304      	adds	r3, #4

08002cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce0:	d3f9      	bcc.n	8002cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8002d10 <LoopForever+0x16>)
  movs r3, #0
 8002ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ce8:	e001      	b.n	8002cee <LoopFillZerobss>

08002cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cec:	3204      	adds	r2, #4

08002cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf0:	d3fb      	bcc.n	8002cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cf2:	f004 fd8b 	bl	800780c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cf6:	f7fe fea1 	bl	8001a3c <main>

08002cfa <LoopForever>:

LoopForever:
    b LoopForever
 8002cfa:	e7fe      	b.n	8002cfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002cfc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002d00:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8002d04:	2004027c 	.word	0x2004027c
  ldr r2, =_sidata
 8002d08:	0800b344 	.word	0x0800b344
  ldr r2, =_sbss
 8002d0c:	2004027c 	.word	0x2004027c
  ldr r4, =_ebss
 8002d10:	20040e3c 	.word	0x20040e3c

08002d14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d14:	e7fe      	b.n	8002d14 <ADC1_IRQHandler>

08002d16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d20:	2003      	movs	r0, #3
 8002d22:	f000 f943 	bl	8002fac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d26:	2000      	movs	r0, #0
 8002d28:	f000 f80e 	bl	8002d48 <HAL_InitTick>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	71fb      	strb	r3, [r7, #7]
 8002d36:	e001      	b.n	8002d3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d38:	f7ff fd0a 	bl	8002750 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d54:	4b17      	ldr	r3, [pc, #92]	@ (8002db4 <HAL_InitTick+0x6c>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d023      	beq.n	8002da4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d5c:	4b16      	ldr	r3, [pc, #88]	@ (8002db8 <HAL_InitTick+0x70>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b14      	ldr	r3, [pc, #80]	@ (8002db4 <HAL_InitTick+0x6c>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	4619      	mov	r1, r3
 8002d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f941 	bl	8002ffa <HAL_SYSTICK_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10f      	bne.n	8002d9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b0f      	cmp	r3, #15
 8002d82:	d809      	bhi.n	8002d98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d84:	2200      	movs	r2, #0
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	f000 f919 	bl	8002fc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d90:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <HAL_InitTick+0x74>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e007      	b.n	8002da8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	e004      	b.n	8002da8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
 8002da2:	e001      	b.n	8002da8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	200400b0 	.word	0x200400b0
 8002db8:	200400a8 	.word	0x200400a8
 8002dbc:	200400ac 	.word	0x200400ac

08002dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dc4:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <HAL_IncTick+0x20>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <HAL_IncTick+0x24>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	4a04      	ldr	r2, [pc, #16]	@ (8002de4 <HAL_IncTick+0x24>)
 8002dd2:	6013      	str	r3, [r2, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	200400b0 	.word	0x200400b0
 8002de4:	20040cec 	.word	0x20040cec

08002de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return uwTick;
 8002dec:	4b03      	ldr	r3, [pc, #12]	@ (8002dfc <HAL_GetTick+0x14>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20040cec 	.word	0x20040cec

08002e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e08:	f7ff ffee 	bl	8002de8 <HAL_GetTick>
 8002e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e18:	d005      	beq.n	8002e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e44 <HAL_Delay+0x44>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4413      	add	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e26:	bf00      	nop
 8002e28:	f7ff ffde 	bl	8002de8 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d8f7      	bhi.n	8002e28 <HAL_Delay+0x28>
  {
  }
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200400b0 	.word	0x200400b0

08002e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e58:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <__NVIC_SetPriorityGrouping+0x44>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e64:	4013      	ands	r3, r2
 8002e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e7a:	4a04      	ldr	r2, [pc, #16]	@ (8002e8c <__NVIC_SetPriorityGrouping+0x44>)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	60d3      	str	r3, [r2, #12]
}
 8002e80:	bf00      	nop
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e94:	4b04      	ldr	r3, [pc, #16]	@ (8002ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	0a1b      	lsrs	r3, r3, #8
 8002e9a:	f003 0307 	and.w	r3, r3, #7
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	6039      	str	r1, [r7, #0]
 8002eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	db0a      	blt.n	8002ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	490c      	ldr	r1, [pc, #48]	@ (8002ef8 <__NVIC_SetPriority+0x4c>)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	0112      	lsls	r2, r2, #4
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	440b      	add	r3, r1
 8002ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed4:	e00a      	b.n	8002eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4908      	ldr	r1, [pc, #32]	@ (8002efc <__NVIC_SetPriority+0x50>)
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	3b04      	subs	r3, #4
 8002ee4:	0112      	lsls	r2, r2, #4
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	440b      	add	r3, r1
 8002eea:	761a      	strb	r2, [r3, #24]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000e100 	.word	0xe000e100
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	@ 0x24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f1c3 0307 	rsb	r3, r3, #7
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	bf28      	it	cs
 8002f1e:	2304      	movcs	r3, #4
 8002f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3304      	adds	r3, #4
 8002f26:	2b06      	cmp	r3, #6
 8002f28:	d902      	bls.n	8002f30 <NVIC_EncodePriority+0x30>
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3b03      	subs	r3, #3
 8002f2e:	e000      	b.n	8002f32 <NVIC_EncodePriority+0x32>
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	f04f 32ff 	mov.w	r2, #4294967295
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	401a      	ands	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f48:	f04f 31ff 	mov.w	r1, #4294967295
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	43d9      	mvns	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	4313      	orrs	r3, r2
         );
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3724      	adds	r7, #36	@ 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f78:	d301      	bcc.n	8002f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e00f      	b.n	8002f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa8 <SysTick_Config+0x40>)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f86:	210f      	movs	r1, #15
 8002f88:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8c:	f7ff ff8e 	bl	8002eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f90:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <SysTick_Config+0x40>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f96:	4b04      	ldr	r3, [pc, #16]	@ (8002fa8 <SysTick_Config+0x40>)
 8002f98:	2207      	movs	r2, #7
 8002f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	e000e010 	.word	0xe000e010

08002fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff47 	bl	8002e48 <__NVIC_SetPriorityGrouping>
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b086      	sub	sp, #24
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	4603      	mov	r3, r0
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd4:	f7ff ff5c 	bl	8002e90 <__NVIC_GetPriorityGrouping>
 8002fd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	6978      	ldr	r0, [r7, #20]
 8002fe0:	f7ff ff8e 	bl	8002f00 <NVIC_EncodePriority>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff5d 	bl	8002eac <__NVIC_SetPriority>
}
 8002ff2:	bf00      	nop
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff ffb0 	bl	8002f68 <SysTick_Config>
 8003008:	4603      	mov	r3, r0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003022:	e166      	b.n	80032f2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2101      	movs	r1, #1
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	fa01 f303 	lsl.w	r3, r1, r3
 8003030:	4013      	ands	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8158 	beq.w	80032ec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d005      	beq.n	8003054 <HAL_GPIO_Init+0x40>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d130      	bne.n	80030b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	2203      	movs	r2, #3
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800308a:	2201      	movs	r2, #1
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	091b      	lsrs	r3, r3, #4
 80030a0:	f003 0201 	and.w	r2, r3, #1
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d017      	beq.n	80030f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	2203      	movs	r2, #3
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d123      	bne.n	8003146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	08da      	lsrs	r2, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3208      	adds	r2, #8
 8003106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800310a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	220f      	movs	r2, #15
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	08da      	lsrs	r2, r3, #3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3208      	adds	r2, #8
 8003140:	6939      	ldr	r1, [r7, #16]
 8003142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	2203      	movs	r2, #3
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0203 	and.w	r2, r3, #3
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80b2 	beq.w	80032ec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003188:	4b61      	ldr	r3, [pc, #388]	@ (8003310 <HAL_GPIO_Init+0x2fc>)
 800318a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318c:	4a60      	ldr	r2, [pc, #384]	@ (8003310 <HAL_GPIO_Init+0x2fc>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6613      	str	r3, [r2, #96]	@ 0x60
 8003194:	4b5e      	ldr	r3, [pc, #376]	@ (8003310 <HAL_GPIO_Init+0x2fc>)
 8003196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031a0:	4a5c      	ldr	r2, [pc, #368]	@ (8003314 <HAL_GPIO_Init+0x300>)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	220f      	movs	r2, #15
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031ca:	d02b      	beq.n	8003224 <HAL_GPIO_Init+0x210>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a52      	ldr	r2, [pc, #328]	@ (8003318 <HAL_GPIO_Init+0x304>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d025      	beq.n	8003220 <HAL_GPIO_Init+0x20c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a51      	ldr	r2, [pc, #324]	@ (800331c <HAL_GPIO_Init+0x308>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d01f      	beq.n	800321c <HAL_GPIO_Init+0x208>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a50      	ldr	r2, [pc, #320]	@ (8003320 <HAL_GPIO_Init+0x30c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d019      	beq.n	8003218 <HAL_GPIO_Init+0x204>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a4f      	ldr	r2, [pc, #316]	@ (8003324 <HAL_GPIO_Init+0x310>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d013      	beq.n	8003214 <HAL_GPIO_Init+0x200>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a4e      	ldr	r2, [pc, #312]	@ (8003328 <HAL_GPIO_Init+0x314>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00d      	beq.n	8003210 <HAL_GPIO_Init+0x1fc>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a4d      	ldr	r2, [pc, #308]	@ (800332c <HAL_GPIO_Init+0x318>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d007      	beq.n	800320c <HAL_GPIO_Init+0x1f8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a4c      	ldr	r2, [pc, #304]	@ (8003330 <HAL_GPIO_Init+0x31c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d101      	bne.n	8003208 <HAL_GPIO_Init+0x1f4>
 8003204:	2307      	movs	r3, #7
 8003206:	e00e      	b.n	8003226 <HAL_GPIO_Init+0x212>
 8003208:	2308      	movs	r3, #8
 800320a:	e00c      	b.n	8003226 <HAL_GPIO_Init+0x212>
 800320c:	2306      	movs	r3, #6
 800320e:	e00a      	b.n	8003226 <HAL_GPIO_Init+0x212>
 8003210:	2305      	movs	r3, #5
 8003212:	e008      	b.n	8003226 <HAL_GPIO_Init+0x212>
 8003214:	2304      	movs	r3, #4
 8003216:	e006      	b.n	8003226 <HAL_GPIO_Init+0x212>
 8003218:	2303      	movs	r3, #3
 800321a:	e004      	b.n	8003226 <HAL_GPIO_Init+0x212>
 800321c:	2302      	movs	r3, #2
 800321e:	e002      	b.n	8003226 <HAL_GPIO_Init+0x212>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <HAL_GPIO_Init+0x212>
 8003224:	2300      	movs	r3, #0
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	f002 0203 	and.w	r2, r2, #3
 800322c:	0092      	lsls	r2, r2, #2
 800322e:	4093      	lsls	r3, r2
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003236:	4937      	ldr	r1, [pc, #220]	@ (8003314 <HAL_GPIO_Init+0x300>)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	3302      	adds	r3, #2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003244:	4b3b      	ldr	r3, [pc, #236]	@ (8003334 <HAL_GPIO_Init+0x320>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	43db      	mvns	r3, r3
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4013      	ands	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003268:	4a32      	ldr	r2, [pc, #200]	@ (8003334 <HAL_GPIO_Init+0x320>)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800326e:	4b31      	ldr	r3, [pc, #196]	@ (8003334 <HAL_GPIO_Init+0x320>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	43db      	mvns	r3, r3
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4013      	ands	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003292:	4a28      	ldr	r2, [pc, #160]	@ (8003334 <HAL_GPIO_Init+0x320>)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003298:	4b26      	ldr	r3, [pc, #152]	@ (8003334 <HAL_GPIO_Init+0x320>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003334 <HAL_GPIO_Init+0x320>)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003334 <HAL_GPIO_Init+0x320>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4013      	ands	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032e6:	4a13      	ldr	r2, [pc, #76]	@ (8003334 <HAL_GPIO_Init+0x320>)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	3301      	adds	r3, #1
 80032f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f47f ae91 	bne.w	8003024 <HAL_GPIO_Init+0x10>
  }
}
 8003302:	bf00      	nop
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	40021000 	.word	0x40021000
 8003314:	40010000 	.word	0x40010000
 8003318:	48000400 	.word	0x48000400
 800331c:	48000800 	.word	0x48000800
 8003320:	48000c00 	.word	0x48000c00
 8003324:	48001000 	.word	0x48001000
 8003328:	48001400 	.word	0x48001400
 800332c:	48001800 	.word	0x48001800
 8003330:	48001c00 	.word	0x48001c00
 8003334:	40010400 	.word	0x40010400

08003338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	887b      	ldrh	r3, [r7, #2]
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e001      	b.n	800335a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	807b      	strh	r3, [r7, #2]
 8003374:	4613      	mov	r3, r2
 8003376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003378:	787b      	ldrb	r3, [r7, #1]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003384:	e002      	b.n	800338c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800339c:	4b0d      	ldr	r3, [pc, #52]	@ (80033d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a8:	d102      	bne.n	80033b0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80033aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033ae:	e00b      	b.n	80033c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80033b0:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80033b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033be:	d102      	bne.n	80033c6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80033c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033c4:	e000      	b.n	80033c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80033c6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40007000 	.word	0x40007000

080033d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d141      	bne.n	800346a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033e6:	4b4b      	ldr	r3, [pc, #300]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f2:	d131      	bne.n	8003458 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033f4:	4b47      	ldr	r3, [pc, #284]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033fa:	4a46      	ldr	r2, [pc, #280]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003400:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003404:	4b43      	ldr	r3, [pc, #268]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800340c:	4a41      	ldr	r2, [pc, #260]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003412:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003414:	4b40      	ldr	r3, [pc, #256]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2232      	movs	r2, #50	@ 0x32
 800341a:	fb02 f303 	mul.w	r3, r2, r3
 800341e:	4a3f      	ldr	r2, [pc, #252]	@ (800351c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	0c9b      	lsrs	r3, r3, #18
 8003426:	3301      	adds	r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800342a:	e002      	b.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3b01      	subs	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003432:	4b38      	ldr	r3, [pc, #224]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800343e:	d102      	bne.n	8003446 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f2      	bne.n	800342c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003446:	4b33      	ldr	r3, [pc, #204]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003452:	d158      	bne.n	8003506 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e057      	b.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003458:	4b2e      	ldr	r3, [pc, #184]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800345e:	4a2d      	ldr	r2, [pc, #180]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003464:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003468:	e04d      	b.n	8003506 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003470:	d141      	bne.n	80034f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003472:	4b28      	ldr	r3, [pc, #160]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800347a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800347e:	d131      	bne.n	80034e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003480:	4b24      	ldr	r3, [pc, #144]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003486:	4a23      	ldr	r2, [pc, #140]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800348c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003490:	4b20      	ldr	r3, [pc, #128]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003498:	4a1e      	ldr	r2, [pc, #120]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800349e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80034a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003518 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2232      	movs	r2, #50	@ 0x32
 80034a6:	fb02 f303 	mul.w	r3, r2, r3
 80034aa:	4a1c      	ldr	r2, [pc, #112]	@ (800351c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	0c9b      	lsrs	r3, r3, #18
 80034b2:	3301      	adds	r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034b6:	e002      	b.n	80034be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034be:	4b15      	ldr	r3, [pc, #84]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ca:	d102      	bne.n	80034d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f2      	bne.n	80034b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034d2:	4b10      	ldr	r3, [pc, #64]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034de:	d112      	bne.n	8003506 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e011      	b.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80034f4:	e007      	b.n	8003506 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034f6:	4b07      	ldr	r3, [pc, #28]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034fe:	4a05      	ldr	r2, [pc, #20]	@ (8003514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003500:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003504:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	40007000 	.word	0x40007000
 8003518:	200400a8 	.word	0x200400a8
 800351c:	431bde83 	.word	0x431bde83

08003520 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003524:	4b05      	ldr	r3, [pc, #20]	@ (800353c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4a04      	ldr	r2, [pc, #16]	@ (800353c <HAL_PWREx_EnableVddIO2+0x1c>)
 800352a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800352e:	6053      	str	r3, [r2, #4]
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40007000 	.word	0x40007000

08003540 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d102      	bne.n	8003554 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	f000 bc08 	b.w	8003d64 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003554:	4b96      	ldr	r3, [pc, #600]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800355e:	4b94      	ldr	r3, [pc, #592]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80e4 	beq.w	800373e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <HAL_RCC_OscConfig+0x4c>
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2b0c      	cmp	r3, #12
 8003580:	f040 808b 	bne.w	800369a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2b01      	cmp	r3, #1
 8003588:	f040 8087 	bne.w	800369a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800358c:	4b88      	ldr	r3, [pc, #544]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_OscConfig+0x64>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e3df      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1a      	ldr	r2, [r3, #32]
 80035a8:	4b81      	ldr	r3, [pc, #516]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d004      	beq.n	80035be <HAL_RCC_OscConfig+0x7e>
 80035b4:	4b7e      	ldr	r3, [pc, #504]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035bc:	e005      	b.n	80035ca <HAL_RCC_OscConfig+0x8a>
 80035be:	4b7c      	ldr	r3, [pc, #496]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80035c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d223      	bcs.n	8003616 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fdcc 	bl	8004170 <RCC_SetFlashLatencyFromMSIRange>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e3c0      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e2:	4b73      	ldr	r3, [pc, #460]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a72      	ldr	r2, [pc, #456]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80035e8:	f043 0308 	orr.w	r3, r3, #8
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	4b70      	ldr	r3, [pc, #448]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	496d      	ldr	r1, [pc, #436]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003600:	4b6b      	ldr	r3, [pc, #428]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	4968      	ldr	r1, [pc, #416]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
 8003614:	e025      	b.n	8003662 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003616:	4b66      	ldr	r3, [pc, #408]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a65      	ldr	r2, [pc, #404]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 800361c:	f043 0308 	orr.w	r3, r3, #8
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	4b63      	ldr	r3, [pc, #396]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	4960      	ldr	r1, [pc, #384]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 8003630:	4313      	orrs	r3, r2
 8003632:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003634:	4b5e      	ldr	r3, [pc, #376]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	495b      	ldr	r1, [pc, #364]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fd8c 	bl	8004170 <RCC_SetFlashLatencyFromMSIRange>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e380      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003662:	f000 fcc1 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 8003666:	4602      	mov	r2, r0
 8003668:	4b51      	ldr	r3, [pc, #324]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	091b      	lsrs	r3, r3, #4
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	4950      	ldr	r1, [pc, #320]	@ (80037b4 <HAL_RCC_OscConfig+0x274>)
 8003674:	5ccb      	ldrb	r3, [r1, r3]
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	fa22 f303 	lsr.w	r3, r2, r3
 800367e:	4a4e      	ldr	r2, [pc, #312]	@ (80037b8 <HAL_RCC_OscConfig+0x278>)
 8003680:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003682:	4b4e      	ldr	r3, [pc, #312]	@ (80037bc <HAL_RCC_OscConfig+0x27c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff fb5e 	bl	8002d48 <HAL_InitTick>
 800368c:	4603      	mov	r3, r0
 800368e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d052      	beq.n	800373c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	e364      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d032      	beq.n	8003708 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036a2:	4b43      	ldr	r3, [pc, #268]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a42      	ldr	r2, [pc, #264]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036ae:	f7ff fb9b 	bl	8002de8 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036b6:	f7ff fb97 	bl	8002de8 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e34d      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036c8:	4b39      	ldr	r3, [pc, #228]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036d4:	4b36      	ldr	r3, [pc, #216]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a35      	ldr	r2, [pc, #212]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80036da:	f043 0308 	orr.w	r3, r3, #8
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	4b33      	ldr	r3, [pc, #204]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4930      	ldr	r1, [pc, #192]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036f2:	4b2f      	ldr	r3, [pc, #188]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	492b      	ldr	r1, [pc, #172]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
 8003706:	e01a      	b.n	800373e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003708:	4b29      	ldr	r3, [pc, #164]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a28      	ldr	r2, [pc, #160]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 800370e:	f023 0301 	bic.w	r3, r3, #1
 8003712:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003714:	f7ff fb68 	bl	8002de8 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800371c:	f7ff fb64 	bl	8002de8 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e31a      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800372e:	4b20      	ldr	r3, [pc, #128]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x1dc>
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800373c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d073      	beq.n	8003832 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d005      	beq.n	800375c <HAL_RCC_OscConfig+0x21c>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b0c      	cmp	r3, #12
 8003754:	d10e      	bne.n	8003774 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d10b      	bne.n	8003774 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	4b14      	ldr	r3, [pc, #80]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d063      	beq.n	8003830 <HAL_RCC_OscConfig+0x2f0>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d15f      	bne.n	8003830 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e2f7      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800377c:	d106      	bne.n	800378c <HAL_RCC_OscConfig+0x24c>
 800377e:	4b0c      	ldr	r3, [pc, #48]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a0b      	ldr	r2, [pc, #44]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e025      	b.n	80037d8 <HAL_RCC_OscConfig+0x298>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003794:	d114      	bne.n	80037c0 <HAL_RCC_OscConfig+0x280>
 8003796:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a05      	ldr	r2, [pc, #20]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 800379c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	4b03      	ldr	r3, [pc, #12]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a02      	ldr	r2, [pc, #8]	@ (80037b0 <HAL_RCC_OscConfig+0x270>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e013      	b.n	80037d8 <HAL_RCC_OscConfig+0x298>
 80037b0:	40021000 	.word	0x40021000
 80037b4:	0800ae24 	.word	0x0800ae24
 80037b8:	200400a8 	.word	0x200400a8
 80037bc:	200400ac 	.word	0x200400ac
 80037c0:	4ba0      	ldr	r3, [pc, #640]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a9f      	ldr	r2, [pc, #636]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 80037c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	4b9d      	ldr	r3, [pc, #628]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a9c      	ldr	r2, [pc, #624]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 80037d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d013      	beq.n	8003808 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7ff fb02 	bl	8002de8 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e8:	f7ff fafe 	bl	8002de8 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	@ 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e2b4      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037fa:	4b92      	ldr	r3, [pc, #584]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x2a8>
 8003806:	e014      	b.n	8003832 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7ff faee 	bl	8002de8 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003810:	f7ff faea 	bl	8002de8 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	@ 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e2a0      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003822:	4b88      	ldr	r3, [pc, #544]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x2d0>
 800382e:	e000      	b.n	8003832 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d060      	beq.n	8003900 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b04      	cmp	r3, #4
 8003842:	d005      	beq.n	8003850 <HAL_RCC_OscConfig+0x310>
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2b0c      	cmp	r3, #12
 8003848:	d119      	bne.n	800387e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d116      	bne.n	800387e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003850:	4b7c      	ldr	r3, [pc, #496]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_OscConfig+0x328>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e27d      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003868:	4b76      	ldr	r3, [pc, #472]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	4973      	ldr	r1, [pc, #460]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 8003878:	4313      	orrs	r3, r2
 800387a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800387c:	e040      	b.n	8003900 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d023      	beq.n	80038ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003886:	4b6f      	ldr	r3, [pc, #444]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a6e      	ldr	r2, [pc, #440]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 800388c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003892:	f7ff faa9 	bl	8002de8 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389a:	f7ff faa5 	bl	8002de8 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e25b      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ac:	4b65      	ldr	r3, [pc, #404]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0f0      	beq.n	800389a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b8:	4b62      	ldr	r3, [pc, #392]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	061b      	lsls	r3, r3, #24
 80038c6:	495f      	ldr	r1, [pc, #380]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
 80038cc:	e018      	b.n	8003900 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 80038d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7ff fa85 	bl	8002de8 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e2:	f7ff fa81 	bl	8002de8 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e237      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038f4:	4b53      	ldr	r3, [pc, #332]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1f0      	bne.n	80038e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d03c      	beq.n	8003986 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01c      	beq.n	800394e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003914:	4b4b      	ldr	r3, [pc, #300]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 8003916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800391a:	4a4a      	ldr	r2, [pc, #296]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7ff fa60 	bl	8002de8 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392c:	f7ff fa5c 	bl	8002de8 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e212      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800393e:	4b41      	ldr	r3, [pc, #260]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 8003940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ef      	beq.n	800392c <HAL_RCC_OscConfig+0x3ec>
 800394c:	e01b      	b.n	8003986 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 8003950:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003954:	4a3b      	ldr	r2, [pc, #236]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395e:	f7ff fa43 	bl	8002de8 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003966:	f7ff fa3f 	bl	8002de8 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e1f5      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003978:	4b32      	ldr	r3, [pc, #200]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 800397a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1ef      	bne.n	8003966 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80a6 	beq.w	8003ae0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003994:	2300      	movs	r3, #0
 8003996:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003998:	4b2a      	ldr	r3, [pc, #168]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 800399a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10d      	bne.n	80039c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a4:	4b27      	ldr	r3, [pc, #156]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a8:	4a26      	ldr	r2, [pc, #152]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 80039aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80039b0:	4b24      	ldr	r3, [pc, #144]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 80039b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039bc:	2301      	movs	r3, #1
 80039be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c0:	4b21      	ldr	r3, [pc, #132]	@ (8003a48 <HAL_RCC_OscConfig+0x508>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d118      	bne.n	80039fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003a48 <HAL_RCC_OscConfig+0x508>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a48 <HAL_RCC_OscConfig+0x508>)
 80039d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d8:	f7ff fa06 	bl	8002de8 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e0:	f7ff fa02 	bl	8002de8 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e1b8      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039f2:	4b15      	ldr	r3, [pc, #84]	@ (8003a48 <HAL_RCC_OscConfig+0x508>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d108      	bne.n	8003a18 <HAL_RCC_OscConfig+0x4d8>
 8003a06:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 8003a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a16:	e029      	b.n	8003a6c <HAL_RCC_OscConfig+0x52c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b05      	cmp	r3, #5
 8003a1e:	d115      	bne.n	8003a4c <HAL_RCC_OscConfig+0x50c>
 8003a20:	4b08      	ldr	r3, [pc, #32]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 8003a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a26:	4a07      	ldr	r2, [pc, #28]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 8003a28:	f043 0304 	orr.w	r3, r3, #4
 8003a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a30:	4b04      	ldr	r3, [pc, #16]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a36:	4a03      	ldr	r2, [pc, #12]	@ (8003a44 <HAL_RCC_OscConfig+0x504>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a40:	e014      	b.n	8003a6c <HAL_RCC_OscConfig+0x52c>
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	4b9d      	ldr	r3, [pc, #628]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a52:	4a9c      	ldr	r2, [pc, #624]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a5c:	4b99      	ldr	r3, [pc, #612]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a62:	4a98      	ldr	r2, [pc, #608]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003a64:	f023 0304 	bic.w	r3, r3, #4
 8003a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d016      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a74:	f7ff f9b8 	bl	8002de8 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a7a:	e00a      	b.n	8003a92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7c:	f7ff f9b4 	bl	8002de8 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e168      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a92:	4b8c      	ldr	r3, [pc, #560]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0ed      	beq.n	8003a7c <HAL_RCC_OscConfig+0x53c>
 8003aa0:	e015      	b.n	8003ace <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa2:	f7ff f9a1 	bl	8002de8 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aa8:	e00a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aaa:	f7ff f99d 	bl	8002de8 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e151      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ac0:	4b80      	ldr	r3, [pc, #512]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1ed      	bne.n	8003aaa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ace:	7ffb      	ldrb	r3, [r7, #31]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d105      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad4:	4b7b      	ldr	r3, [pc, #492]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad8:	4a7a      	ldr	r2, [pc, #488]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ade:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d03c      	beq.n	8003b66 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01c      	beq.n	8003b2e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003af4:	4b73      	ldr	r3, [pc, #460]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003afa:	4a72      	ldr	r2, [pc, #456]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7ff f970 	bl	8002de8 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b0c:	f7ff f96c 	bl	8002de8 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e122      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b1e:	4b69      	ldr	r3, [pc, #420]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0ef      	beq.n	8003b0c <HAL_RCC_OscConfig+0x5cc>
 8003b2c:	e01b      	b.n	8003b66 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b2e:	4b65      	ldr	r3, [pc, #404]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b34:	4a63      	ldr	r2, [pc, #396]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3e:	f7ff f953 	bl	8002de8 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b46:	f7ff f94f 	bl	8002de8 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e105      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b58:	4b5a      	ldr	r3, [pc, #360]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1ef      	bne.n	8003b46 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80f9 	beq.w	8003d62 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	f040 80cf 	bne.w	8003d18 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b7a:	4b52      	ldr	r3, [pc, #328]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 0203 	and.w	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d12c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d123      	bne.n	8003be8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003baa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d11b      	bne.n	8003be8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d113      	bne.n	8003be8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bca:	085b      	lsrs	r3, r3, #1
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d109      	bne.n	8003be8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	085b      	lsrs	r3, r3, #1
 8003be0:	3b01      	subs	r3, #1
 8003be2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d071      	beq.n	8003ccc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	d068      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bee:	4b35      	ldr	r3, [pc, #212]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d105      	bne.n	8003c06 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bfa:	4b32      	ldr	r3, [pc, #200]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e0ac      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003c10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c16:	f7ff f8e7 	bl	8002de8 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1e:	f7ff f8e3 	bl	8002de8 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e099      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c30:	4b24      	ldr	r3, [pc, #144]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c3c:	4b21      	ldr	r3, [pc, #132]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	4b21      	ldr	r3, [pc, #132]	@ (8003cc8 <HAL_RCC_OscConfig+0x788>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c4c:	3a01      	subs	r2, #1
 8003c4e:	0112      	lsls	r2, r2, #4
 8003c50:	4311      	orrs	r1, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c56:	0212      	lsls	r2, r2, #8
 8003c58:	4311      	orrs	r1, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c5e:	0852      	lsrs	r2, r2, #1
 8003c60:	3a01      	subs	r2, #1
 8003c62:	0552      	lsls	r2, r2, #21
 8003c64:	4311      	orrs	r1, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c6a:	0852      	lsrs	r2, r2, #1
 8003c6c:	3a01      	subs	r2, #1
 8003c6e:	0652      	lsls	r2, r2, #25
 8003c70:	4311      	orrs	r1, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c76:	06d2      	lsls	r2, r2, #27
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	4912      	ldr	r1, [pc, #72]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c80:	4b10      	ldr	r3, [pc, #64]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a0f      	ldr	r2, [pc, #60]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003c86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4a0c      	ldr	r2, [pc, #48]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003c92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c98:	f7ff f8a6 	bl	8002de8 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca0:	f7ff f8a2 	bl	8002de8 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e058      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb2:	4b04      	ldr	r3, [pc, #16]	@ (8003cc4 <HAL_RCC_OscConfig+0x784>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cbe:	e050      	b.n	8003d62 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e04f      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ccc:	4b27      	ldr	r3, [pc, #156]	@ (8003d6c <HAL_RCC_OscConfig+0x82c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d144      	bne.n	8003d62 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cd8:	4b24      	ldr	r3, [pc, #144]	@ (8003d6c <HAL_RCC_OscConfig+0x82c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a23      	ldr	r2, [pc, #140]	@ (8003d6c <HAL_RCC_OscConfig+0x82c>)
 8003cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ce2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ce4:	4b21      	ldr	r3, [pc, #132]	@ (8003d6c <HAL_RCC_OscConfig+0x82c>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4a20      	ldr	r2, [pc, #128]	@ (8003d6c <HAL_RCC_OscConfig+0x82c>)
 8003cea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cf0:	f7ff f87a 	bl	8002de8 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7ff f876 	bl	8002de8 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e02c      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0a:	4b18      	ldr	r3, [pc, #96]	@ (8003d6c <HAL_RCC_OscConfig+0x82c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x7b8>
 8003d16:	e024      	b.n	8003d62 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b0c      	cmp	r3, #12
 8003d1c:	d01f      	beq.n	8003d5e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1e:	4b13      	ldr	r3, [pc, #76]	@ (8003d6c <HAL_RCC_OscConfig+0x82c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a12      	ldr	r2, [pc, #72]	@ (8003d6c <HAL_RCC_OscConfig+0x82c>)
 8003d24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7ff f85d 	bl	8002de8 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d32:	f7ff f859 	bl	8002de8 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e00f      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d44:	4b09      	ldr	r3, [pc, #36]	@ (8003d6c <HAL_RCC_OscConfig+0x82c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d50:	4b06      	ldr	r3, [pc, #24]	@ (8003d6c <HAL_RCC_OscConfig+0x82c>)
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	4905      	ldr	r1, [pc, #20]	@ (8003d6c <HAL_RCC_OscConfig+0x82c>)
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <HAL_RCC_OscConfig+0x830>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60cb      	str	r3, [r1, #12]
 8003d5c:	e001      	b.n	8003d62 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	feeefffc 	.word	0xfeeefffc

08003d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e11d      	b.n	8003fc8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b90      	ldr	r3, [pc, #576]	@ (8003fd0 <HAL_RCC_ClockConfig+0x25c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d910      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b8d      	ldr	r3, [pc, #564]	@ (8003fd0 <HAL_RCC_ClockConfig+0x25c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 020f 	bic.w	r2, r3, #15
 8003da2:	498b      	ldr	r1, [pc, #556]	@ (8003fd0 <HAL_RCC_ClockConfig+0x25c>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b89      	ldr	r3, [pc, #548]	@ (8003fd0 <HAL_RCC_ClockConfig+0x25c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e105      	b.n	8003fc8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d010      	beq.n	8003dea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	4b81      	ldr	r3, [pc, #516]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d908      	bls.n	8003dea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd8:	4b7e      	ldr	r3, [pc, #504]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	497b      	ldr	r1, [pc, #492]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d079      	beq.n	8003eea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d11e      	bne.n	8003e3c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfe:	4b75      	ldr	r3, [pc, #468]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e0dc      	b.n	8003fc8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003e0e:	f000 fa09 	bl	8004224 <RCC_GetSysClockFreqFromPLLSource>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4a70      	ldr	r2, [pc, #448]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d946      	bls.n	8003ea8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e1a:	4b6e      	ldr	r3, [pc, #440]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d140      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e26:	4b6b      	ldr	r3, [pc, #428]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e2e:	4a69      	ldr	r2, [pc, #420]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e36:	2380      	movs	r3, #128	@ 0x80
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	e035      	b.n	8003ea8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d107      	bne.n	8003e54 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e44:	4b63      	ldr	r3, [pc, #396]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d115      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0b9      	b.n	8003fc8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d107      	bne.n	8003e6c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e5c:	4b5d      	ldr	r3, [pc, #372]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d109      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0ad      	b.n	8003fc8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e6c:	4b59      	ldr	r3, [pc, #356]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0a5      	b.n	8003fc8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003e7c:	f000 f8b4 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 8003e80:	4603      	mov	r3, r0
 8003e82:	4a55      	ldr	r2, [pc, #340]	@ (8003fd8 <HAL_RCC_ClockConfig+0x264>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d90f      	bls.n	8003ea8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e88:	4b52      	ldr	r3, [pc, #328]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d109      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e94:	4b4f      	ldr	r3, [pc, #316]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ea2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ea4:	2380      	movs	r3, #128	@ 0x80
 8003ea6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ea8:	4b4a      	ldr	r3, [pc, #296]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f023 0203 	bic.w	r2, r3, #3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	4947      	ldr	r1, [pc, #284]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eba:	f7fe ff95 	bl	8002de8 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec2:	f7fe ff91 	bl	8002de8 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e077      	b.n	8003fc8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 020c 	and.w	r2, r3, #12
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d1eb      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b80      	cmp	r3, #128	@ 0x80
 8003eee:	d105      	bne.n	8003efc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ef0:	4b38      	ldr	r3, [pc, #224]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4a37      	ldr	r2, [pc, #220]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003ef6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003efa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d010      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	4b31      	ldr	r3, [pc, #196]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d208      	bcs.n	8003f2a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f18:	4b2e      	ldr	r3, [pc, #184]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	492b      	ldr	r1, [pc, #172]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f2a:	4b29      	ldr	r3, [pc, #164]	@ (8003fd0 <HAL_RCC_ClockConfig+0x25c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d210      	bcs.n	8003f5a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f38:	4b25      	ldr	r3, [pc, #148]	@ (8003fd0 <HAL_RCC_ClockConfig+0x25c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 020f 	bic.w	r2, r3, #15
 8003f40:	4923      	ldr	r1, [pc, #140]	@ (8003fd0 <HAL_RCC_ClockConfig+0x25c>)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f48:	4b21      	ldr	r3, [pc, #132]	@ (8003fd0 <HAL_RCC_ClockConfig+0x25c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d001      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e036      	b.n	8003fc8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d008      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f66:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	4918      	ldr	r1, [pc, #96]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d009      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f84:	4b13      	ldr	r3, [pc, #76]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4910      	ldr	r1, [pc, #64]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f98:	f000 f826 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd4 <HAL_RCC_ClockConfig+0x260>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	091b      	lsrs	r3, r3, #4
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	490c      	ldr	r1, [pc, #48]	@ (8003fdc <HAL_RCC_ClockConfig+0x268>)
 8003faa:	5ccb      	ldrb	r3, [r1, r3]
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe0 <HAL_RCC_ClockConfig+0x26c>)
 8003fb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe4 <HAL_RCC_ClockConfig+0x270>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fe fec3 	bl	8002d48 <HAL_InitTick>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	73fb      	strb	r3, [r7, #15]

  return status;
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40022000 	.word	0x40022000
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	04c4b400 	.word	0x04c4b400
 8003fdc:	0800ae24 	.word	0x0800ae24
 8003fe0:	200400a8 	.word	0x200400a8
 8003fe4:	200400ac 	.word	0x200400ac

08003fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b089      	sub	sp, #36	@ 0x24
 8003fec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004000:	4b3b      	ldr	r3, [pc, #236]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_GetSysClockFreq+0x34>
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	2b0c      	cmp	r3, #12
 8004014:	d121      	bne.n	800405a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d11e      	bne.n	800405a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800401c:	4b34      	ldr	r3, [pc, #208]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d107      	bne.n	8004038 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004028:	4b31      	ldr	r3, [pc, #196]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800402a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800402e:	0a1b      	lsrs	r3, r3, #8
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	e005      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004038:	4b2d      	ldr	r3, [pc, #180]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004044:	4a2b      	ldr	r2, [pc, #172]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10d      	bne.n	8004070 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004058:	e00a      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b04      	cmp	r3, #4
 800405e:	d102      	bne.n	8004066 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004060:	4b25      	ldr	r3, [pc, #148]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004062:	61bb      	str	r3, [r7, #24]
 8004064:	e004      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b08      	cmp	r3, #8
 800406a:	d101      	bne.n	8004070 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800406c:	4b23      	ldr	r3, [pc, #140]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x114>)
 800406e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b0c      	cmp	r3, #12
 8004074:	d134      	bne.n	80040e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004076:	4b1e      	ldr	r3, [pc, #120]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d003      	beq.n	800408e <HAL_RCC_GetSysClockFreq+0xa6>
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b03      	cmp	r3, #3
 800408a:	d003      	beq.n	8004094 <HAL_RCC_GetSysClockFreq+0xac>
 800408c:	e005      	b.n	800409a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800408e:	4b1a      	ldr	r3, [pc, #104]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004090:	617b      	str	r3, [r7, #20]
      break;
 8004092:	e005      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004094:	4b19      	ldr	r3, [pc, #100]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x114>)
 8004096:	617b      	str	r3, [r7, #20]
      break;
 8004098:	e002      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	617b      	str	r3, [r7, #20]
      break;
 800409e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040a0:	4b13      	ldr	r3, [pc, #76]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	3301      	adds	r3, #1
 80040ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040ae:	4b10      	ldr	r3, [pc, #64]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	0a1b      	lsrs	r3, r3, #8
 80040b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	fb03 f202 	mul.w	r2, r3, r2
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040c6:	4b0a      	ldr	r3, [pc, #40]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	0e5b      	lsrs	r3, r3, #25
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	3301      	adds	r3, #1
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	fbb2 f3f3 	udiv	r3, r2, r3
 80040de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040e0:	69bb      	ldr	r3, [r7, #24]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3724      	adds	r7, #36	@ 0x24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000
 80040f4:	0800ae3c 	.word	0x0800ae3c
 80040f8:	00f42400 	.word	0x00f42400
 80040fc:	007a1200 	.word	0x007a1200

08004100 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004104:	4b03      	ldr	r3, [pc, #12]	@ (8004114 <HAL_RCC_GetHCLKFreq+0x14>)
 8004106:	681b      	ldr	r3, [r3, #0]
}
 8004108:	4618      	mov	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	200400a8 	.word	0x200400a8

08004118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800411c:	f7ff fff0 	bl	8004100 <HAL_RCC_GetHCLKFreq>
 8004120:	4602      	mov	r2, r0
 8004122:	4b06      	ldr	r3, [pc, #24]	@ (800413c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	4904      	ldr	r1, [pc, #16]	@ (8004140 <HAL_RCC_GetPCLK1Freq+0x28>)
 800412e:	5ccb      	ldrb	r3, [r1, r3]
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004138:	4618      	mov	r0, r3
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40021000 	.word	0x40021000
 8004140:	0800ae34 	.word	0x0800ae34

08004144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004148:	f7ff ffda 	bl	8004100 <HAL_RCC_GetHCLKFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	0adb      	lsrs	r3, r3, #11
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4904      	ldr	r1, [pc, #16]	@ (800416c <HAL_RCC_GetPCLK2Freq+0x28>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000
 800416c:	0800ae34 	.word	0x0800ae34

08004170 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004178:	2300      	movs	r3, #0
 800417a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800417c:	4b27      	ldr	r3, [pc, #156]	@ (800421c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800417e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004188:	f7ff f906 	bl	8003398 <HAL_PWREx_GetVoltageRange>
 800418c:	6178      	str	r0, [r7, #20]
 800418e:	e014      	b.n	80041ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004190:	4b22      	ldr	r3, [pc, #136]	@ (800421c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004194:	4a21      	ldr	r2, [pc, #132]	@ (800421c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800419a:	6593      	str	r3, [r2, #88]	@ 0x58
 800419c:	4b1f      	ldr	r3, [pc, #124]	@ (800421c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041a8:	f7ff f8f6 	bl	8003398 <HAL_PWREx_GetVoltageRange>
 80041ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041ae:	4b1b      	ldr	r3, [pc, #108]	@ (800421c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b2:	4a1a      	ldr	r2, [pc, #104]	@ (800421c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041c0:	d10b      	bne.n	80041da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b80      	cmp	r3, #128	@ 0x80
 80041c6:	d913      	bls.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80041cc:	d902      	bls.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041ce:	2302      	movs	r3, #2
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	e00d      	b.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041d4:	2301      	movs	r3, #1
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	e00a      	b.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80041de:	d902      	bls.n	80041e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80041e0:	2302      	movs	r3, #2
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	e004      	b.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b70      	cmp	r3, #112	@ 0x70
 80041ea:	d101      	bne.n	80041f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041ec:	2301      	movs	r3, #1
 80041ee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f023 020f 	bic.w	r2, r3, #15
 80041f8:	4909      	ldr	r1, [pc, #36]	@ (8004220 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004200:	4b07      	ldr	r3, [pc, #28]	@ (8004220 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	429a      	cmp	r2, r3
 800420c:	d001      	beq.n	8004212 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000
 8004220:	40022000 	.word	0x40022000

08004224 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800422a:	4b2d      	ldr	r3, [pc, #180]	@ (80042e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b03      	cmp	r3, #3
 8004238:	d00b      	beq.n	8004252 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d825      	bhi.n	800428c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d008      	beq.n	8004258 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d11f      	bne.n	800428c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800424c:	4b25      	ldr	r3, [pc, #148]	@ (80042e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800424e:	613b      	str	r3, [r7, #16]
    break;
 8004250:	e01f      	b.n	8004292 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004252:	4b25      	ldr	r3, [pc, #148]	@ (80042e8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004254:	613b      	str	r3, [r7, #16]
    break;
 8004256:	e01c      	b.n	8004292 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004258:	4b21      	ldr	r3, [pc, #132]	@ (80042e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d107      	bne.n	8004274 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004264:	4b1e      	ldr	r3, [pc, #120]	@ (80042e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004266:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800426a:	0a1b      	lsrs	r3, r3, #8
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	e005      	b.n	8004280 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004274:	4b1a      	ldr	r3, [pc, #104]	@ (80042e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004280:	4a1a      	ldr	r2, [pc, #104]	@ (80042ec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004288:	613b      	str	r3, [r7, #16]
    break;
 800428a:	e002      	b.n	8004292 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]
    break;
 8004290:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004292:	4b13      	ldr	r3, [pc, #76]	@ (80042e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	3301      	adds	r3, #1
 800429e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042a0:	4b0f      	ldr	r3, [pc, #60]	@ (80042e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	0a1b      	lsrs	r3, r3, #8
 80042a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	fb03 f202 	mul.w	r2, r3, r2
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042b8:	4b09      	ldr	r3, [pc, #36]	@ (80042e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	0e5b      	lsrs	r3, r3, #25
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	3301      	adds	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80042d2:	683b      	ldr	r3, [r7, #0]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40021000 	.word	0x40021000
 80042e4:	00f42400 	.word	0x00f42400
 80042e8:	007a1200 	.word	0x007a1200
 80042ec:	0800ae3c 	.word	0x0800ae3c

080042f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042f8:	2300      	movs	r3, #0
 80042fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042fc:	2300      	movs	r3, #0
 80042fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004308:	2b00      	cmp	r3, #0
 800430a:	d040      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004310:	2b80      	cmp	r3, #128	@ 0x80
 8004312:	d02a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004314:	2b80      	cmp	r3, #128	@ 0x80
 8004316:	d825      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004318:	2b60      	cmp	r3, #96	@ 0x60
 800431a:	d026      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800431c:	2b60      	cmp	r3, #96	@ 0x60
 800431e:	d821      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004320:	2b40      	cmp	r3, #64	@ 0x40
 8004322:	d006      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004324:	2b40      	cmp	r3, #64	@ 0x40
 8004326:	d81d      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d009      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800432c:	2b20      	cmp	r3, #32
 800432e:	d010      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004330:	e018      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004332:	4b89      	ldr	r3, [pc, #548]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	4a88      	ldr	r2, [pc, #544]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800433e:	e015      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fb02 	bl	8004950 <RCCEx_PLLSAI1_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004350:	e00c      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3320      	adds	r3, #32
 8004356:	2100      	movs	r1, #0
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fbed 	bl	8004b38 <RCCEx_PLLSAI2_Config>
 800435e:	4603      	mov	r3, r0
 8004360:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004362:	e003      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	74fb      	strb	r3, [r7, #19]
      break;
 8004368:	e000      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800436a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436c:	7cfb      	ldrb	r3, [r7, #19]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10b      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004372:	4b79      	ldr	r3, [pc, #484]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004374:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004378:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004380:	4975      	ldr	r1, [pc, #468]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004388:	e001      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438a:	7cfb      	ldrb	r3, [r7, #19]
 800438c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d047      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043a2:	d030      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80043a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043a8:	d82a      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ae:	d02a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80043b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043b4:	d824      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043ba:	d008      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xde>
 80043bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043c0:	d81e      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80043c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ca:	d010      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80043cc:	e018      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043ce:	4b62      	ldr	r3, [pc, #392]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	4a61      	ldr	r2, [pc, #388]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043da:	e015      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fab4 	bl	8004950 <RCCEx_PLLSAI1_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043ec:	e00c      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3320      	adds	r3, #32
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fb9f 	bl	8004b38 <RCCEx_PLLSAI2_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043fe:	e003      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	74fb      	strb	r3, [r7, #19]
      break;
 8004404:	e000      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10b      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800440e:	4b52      	ldr	r3, [pc, #328]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004410:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004414:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441c:	494e      	ldr	r1, [pc, #312]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004424:	e001      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004426:	7cfb      	ldrb	r3, [r7, #19]
 8004428:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 809f 	beq.w	8004576 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004438:	2300      	movs	r3, #0
 800443a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800443c:	4b46      	ldr	r3, [pc, #280]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800443e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00d      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004452:	4b41      	ldr	r3, [pc, #260]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004456:	4a40      	ldr	r2, [pc, #256]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800445c:	6593      	str	r3, [r2, #88]	@ 0x58
 800445e:	4b3e      	ldr	r3, [pc, #248]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800446a:	2301      	movs	r3, #1
 800446c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800446e:	4b3b      	ldr	r3, [pc, #236]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a3a      	ldr	r2, [pc, #232]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004478:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800447a:	f7fe fcb5 	bl	8002de8 <HAL_GetTick>
 800447e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004480:	e009      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004482:	f7fe fcb1 	bl	8002de8 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d902      	bls.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	74fb      	strb	r3, [r7, #19]
        break;
 8004494:	e005      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004496:	4b31      	ldr	r3, [pc, #196]	@ (800455c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0ef      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80044a2:	7cfb      	ldrb	r3, [r7, #19]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d15b      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01f      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d019      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044c6:	4b24      	ldr	r3, [pc, #144]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044d2:	4b21      	ldr	r3, [pc, #132]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044f2:	4a19      	ldr	r2, [pc, #100]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d016      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fe fc70 	bl	8002de8 <HAL_GetTick>
 8004508:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800450a:	e00b      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450c:	f7fe fc6c 	bl	8002de8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d902      	bls.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	74fb      	strb	r3, [r7, #19]
            break;
 8004522:	e006      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004524:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0ec      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004532:	7cfb      	ldrb	r3, [r7, #19]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10c      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004538:	4b07      	ldr	r3, [pc, #28]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004548:	4903      	ldr	r1, [pc, #12]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004550:	e008      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004552:	7cfb      	ldrb	r3, [r7, #19]
 8004554:	74bb      	strb	r3, [r7, #18]
 8004556:	e005      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004558:	40021000 	.word	0x40021000
 800455c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004564:	7c7b      	ldrb	r3, [r7, #17]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d105      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800456a:	4ba0      	ldr	r3, [pc, #640]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800456c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456e:	4a9f      	ldr	r2, [pc, #636]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004570:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004574:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004582:	4b9a      	ldr	r3, [pc, #616]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004588:	f023 0203 	bic.w	r2, r3, #3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004590:	4996      	ldr	r1, [pc, #600]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045a4:	4b91      	ldr	r3, [pc, #580]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045aa:	f023 020c 	bic.w	r2, r3, #12
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	498e      	ldr	r1, [pc, #568]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045c6:	4b89      	ldr	r3, [pc, #548]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d4:	4985      	ldr	r1, [pc, #532]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045e8:	4b80      	ldr	r3, [pc, #512]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045f6:	497d      	ldr	r1, [pc, #500]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800460a:	4b78      	ldr	r3, [pc, #480]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004610:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004618:	4974      	ldr	r1, [pc, #464]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800462c:	4b6f      	ldr	r3, [pc, #444]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004632:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463a:	496c      	ldr	r1, [pc, #432]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800464e:	4b67      	ldr	r3, [pc, #412]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004654:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800465c:	4963      	ldr	r1, [pc, #396]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004670:	4b5e      	ldr	r3, [pc, #376]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004676:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800467e:	495b      	ldr	r1, [pc, #364]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004692:	4b56      	ldr	r3, [pc, #344]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004698:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a0:	4952      	ldr	r1, [pc, #328]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046b4:	4b4d      	ldr	r3, [pc, #308]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c2:	494a      	ldr	r1, [pc, #296]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046d6:	4b45      	ldr	r3, [pc, #276]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e4:	4941      	ldr	r1, [pc, #260]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046f8:	4b3c      	ldr	r3, [pc, #240]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046fe:	f023 0203 	bic.w	r2, r3, #3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004706:	4939      	ldr	r1, [pc, #228]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d028      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800471a:	4b34      	ldr	r3, [pc, #208]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004720:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004728:	4930      	ldr	r1, [pc, #192]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004734:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004738:	d106      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800473a:	4b2c      	ldr	r3, [pc, #176]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	4a2b      	ldr	r2, [pc, #172]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004740:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004744:	60d3      	str	r3, [r2, #12]
 8004746:	e011      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800474c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004750:	d10c      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3304      	adds	r3, #4
 8004756:	2101      	movs	r1, #1
 8004758:	4618      	mov	r0, r3
 800475a:	f000 f8f9 	bl	8004950 <RCCEx_PLLSAI1_Config>
 800475e:	4603      	mov	r3, r0
 8004760:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004762:	7cfb      	ldrb	r3, [r7, #19]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d04d      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800477c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004780:	d108      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004782:	4b1a      	ldr	r3, [pc, #104]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004784:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004788:	4a18      	ldr	r2, [pc, #96]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800478a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800478e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004792:	e012      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004794:	4b15      	ldr	r3, [pc, #84]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004796:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800479a:	4a14      	ldr	r2, [pc, #80]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800479c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047a0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80047a4:	4b11      	ldr	r3, [pc, #68]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047b2:	490e      	ldr	r1, [pc, #56]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047c2:	d106      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c4:	4b09      	ldr	r3, [pc, #36]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4a08      	ldr	r2, [pc, #32]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047ce:	60d3      	str	r3, [r2, #12]
 80047d0:	e020      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047da:	d109      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047dc:	4b03      	ldr	r3, [pc, #12]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	4a02      	ldr	r2, [pc, #8]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047e6:	60d3      	str	r3, [r2, #12]
 80047e8:	e014      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047f8:	d10c      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3304      	adds	r3, #4
 80047fe:	2101      	movs	r1, #1
 8004800:	4618      	mov	r0, r3
 8004802:	f000 f8a5 	bl	8004950 <RCCEx_PLLSAI1_Config>
 8004806:	4603      	mov	r3, r0
 8004808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d028      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004820:	4b4a      	ldr	r3, [pc, #296]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004826:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800482e:	4947      	ldr	r1, [pc, #284]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800483a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800483e:	d106      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004840:	4b42      	ldr	r3, [pc, #264]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4a41      	ldr	r2, [pc, #260]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800484a:	60d3      	str	r3, [r2, #12]
 800484c:	e011      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004852:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004856:	d10c      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	2101      	movs	r1, #1
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f876 	bl	8004950 <RCCEx_PLLSAI1_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800486e:	7cfb      	ldrb	r3, [r7, #19]
 8004870:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01e      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800487e:	4b33      	ldr	r3, [pc, #204]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004884:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800488e:	492f      	ldr	r1, [pc, #188]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004890:	4313      	orrs	r3, r2
 8004892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800489c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048a0:	d10c      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3304      	adds	r3, #4
 80048a6:	2102      	movs	r1, #2
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 f851 	bl	8004950 <RCCEx_PLLSAI1_Config>
 80048ae:	4603      	mov	r3, r0
 80048b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048b2:	7cfb      	ldrb	r3, [r7, #19]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80048b8:	7cfb      	ldrb	r3, [r7, #19]
 80048ba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00b      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048c8:	4b20      	ldr	r3, [pc, #128]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048ce:	f023 0204 	bic.w	r2, r3, #4
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048d8:	491c      	ldr	r1, [pc, #112]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048ec:	4b17      	ldr	r3, [pc, #92]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048f2:	f023 0218 	bic.w	r2, r3, #24
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fc:	4913      	ldr	r1, [pc, #76]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d017      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004910:	4b0e      	ldr	r3, [pc, #56]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004912:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004916:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004920:	490a      	ldr	r1, [pc, #40]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800492e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004932:	d105      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004934:	4b05      	ldr	r3, [pc, #20]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	4a04      	ldr	r2, [pc, #16]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800493a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800493e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004940:	7cbb      	ldrb	r3, [r7, #18]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40021000 	.word	0x40021000

08004950 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800495e:	4b72      	ldr	r3, [pc, #456]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00e      	beq.n	8004988 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800496a:	4b6f      	ldr	r3, [pc, #444]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0203 	and.w	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d103      	bne.n	8004982 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
       ||
 800497e:	2b00      	cmp	r3, #0
 8004980:	d142      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	73fb      	strb	r3, [r7, #15]
 8004986:	e03f      	b.n	8004a08 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b03      	cmp	r3, #3
 800498e:	d018      	beq.n	80049c2 <RCCEx_PLLSAI1_Config+0x72>
 8004990:	2b03      	cmp	r3, #3
 8004992:	d825      	bhi.n	80049e0 <RCCEx_PLLSAI1_Config+0x90>
 8004994:	2b01      	cmp	r3, #1
 8004996:	d002      	beq.n	800499e <RCCEx_PLLSAI1_Config+0x4e>
 8004998:	2b02      	cmp	r3, #2
 800499a:	d009      	beq.n	80049b0 <RCCEx_PLLSAI1_Config+0x60>
 800499c:	e020      	b.n	80049e0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800499e:	4b62      	ldr	r3, [pc, #392]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d11d      	bne.n	80049e6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ae:	e01a      	b.n	80049e6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049b0:	4b5d      	ldr	r3, [pc, #372]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d116      	bne.n	80049ea <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c0:	e013      	b.n	80049ea <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049c2:	4b59      	ldr	r3, [pc, #356]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10f      	bne.n	80049ee <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049ce:	4b56      	ldr	r3, [pc, #344]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049de:	e006      	b.n	80049ee <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
      break;
 80049e4:	e004      	b.n	80049f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80049e6:	bf00      	nop
 80049e8:	e002      	b.n	80049f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80049ea:	bf00      	nop
 80049ec:	e000      	b.n	80049f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80049ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d108      	bne.n	8004a08 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80049f6:	4b4c      	ldr	r3, [pc, #304]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f023 0203 	bic.w	r2, r3, #3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4949      	ldr	r1, [pc, #292]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f040 8086 	bne.w	8004b1c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a10:	4b45      	ldr	r3, [pc, #276]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a44      	ldr	r2, [pc, #272]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1c:	f7fe f9e4 	bl	8002de8 <HAL_GetTick>
 8004a20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a22:	e009      	b.n	8004a38 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a24:	f7fe f9e0 	bl	8002de8 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d902      	bls.n	8004a38 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	73fb      	strb	r3, [r7, #15]
        break;
 8004a36:	e005      	b.n	8004a44 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a38:	4b3b      	ldr	r3, [pc, #236]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1ef      	bne.n	8004a24 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d168      	bne.n	8004b1c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d113      	bne.n	8004a78 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a50:	4b35      	ldr	r3, [pc, #212]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	4b35      	ldr	r3, [pc, #212]	@ (8004b2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6892      	ldr	r2, [r2, #8]
 8004a5c:	0211      	lsls	r1, r2, #8
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68d2      	ldr	r2, [r2, #12]
 8004a62:	06d2      	lsls	r2, r2, #27
 8004a64:	4311      	orrs	r1, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6852      	ldr	r2, [r2, #4]
 8004a6a:	3a01      	subs	r2, #1
 8004a6c:	0112      	lsls	r2, r2, #4
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	492d      	ldr	r1, [pc, #180]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	610b      	str	r3, [r1, #16]
 8004a76:	e02d      	b.n	8004ad4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d115      	bne.n	8004aaa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	4b2b      	ldr	r3, [pc, #172]	@ (8004b30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6892      	ldr	r2, [r2, #8]
 8004a8a:	0211      	lsls	r1, r2, #8
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6912      	ldr	r2, [r2, #16]
 8004a90:	0852      	lsrs	r2, r2, #1
 8004a92:	3a01      	subs	r2, #1
 8004a94:	0552      	lsls	r2, r2, #21
 8004a96:	4311      	orrs	r1, r2
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6852      	ldr	r2, [r2, #4]
 8004a9c:	3a01      	subs	r2, #1
 8004a9e:	0112      	lsls	r2, r2, #4
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	4921      	ldr	r1, [pc, #132]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	610b      	str	r3, [r1, #16]
 8004aa8:	e014      	b.n	8004ad4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	4b21      	ldr	r3, [pc, #132]	@ (8004b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6892      	ldr	r2, [r2, #8]
 8004ab6:	0211      	lsls	r1, r2, #8
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6952      	ldr	r2, [r2, #20]
 8004abc:	0852      	lsrs	r2, r2, #1
 8004abe:	3a01      	subs	r2, #1
 8004ac0:	0652      	lsls	r2, r2, #25
 8004ac2:	4311      	orrs	r1, r2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6852      	ldr	r2, [r2, #4]
 8004ac8:	3a01      	subs	r2, #1
 8004aca:	0112      	lsls	r2, r2, #4
 8004acc:	430a      	orrs	r2, r1
 8004ace:	4916      	ldr	r1, [pc, #88]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ad4:	4b14      	ldr	r3, [pc, #80]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a13      	ldr	r2, [pc, #76]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ada:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ade:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae0:	f7fe f982 	bl	8002de8 <HAL_GetTick>
 8004ae4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ae6:	e009      	b.n	8004afc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ae8:	f7fe f97e 	bl	8002de8 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d902      	bls.n	8004afc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	73fb      	strb	r3, [r7, #15]
          break;
 8004afa:	e005      	b.n	8004b08 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004afc:	4b0a      	ldr	r3, [pc, #40]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0ef      	beq.n	8004ae8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b0e:	4b06      	ldr	r3, [pc, #24]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	4904      	ldr	r1, [pc, #16]	@ (8004b28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	07ff800f 	.word	0x07ff800f
 8004b30:	ff9f800f 	.word	0xff9f800f
 8004b34:	f9ff800f 	.word	0xf9ff800f

08004b38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b46:	4b72      	ldr	r3, [pc, #456]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00e      	beq.n	8004b70 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b52:	4b6f      	ldr	r3, [pc, #444]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0203 	and.w	r2, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d103      	bne.n	8004b6a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
       ||
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d142      	bne.n	8004bf0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	73fb      	strb	r3, [r7, #15]
 8004b6e:	e03f      	b.n	8004bf0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d018      	beq.n	8004baa <RCCEx_PLLSAI2_Config+0x72>
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d825      	bhi.n	8004bc8 <RCCEx_PLLSAI2_Config+0x90>
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d002      	beq.n	8004b86 <RCCEx_PLLSAI2_Config+0x4e>
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d009      	beq.n	8004b98 <RCCEx_PLLSAI2_Config+0x60>
 8004b84:	e020      	b.n	8004bc8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b86:	4b62      	ldr	r3, [pc, #392]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d11d      	bne.n	8004bce <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b96:	e01a      	b.n	8004bce <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b98:	4b5d      	ldr	r3, [pc, #372]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d116      	bne.n	8004bd2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ba8:	e013      	b.n	8004bd2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004baa:	4b59      	ldr	r3, [pc, #356]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10f      	bne.n	8004bd6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bb6:	4b56      	ldr	r3, [pc, #344]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d109      	bne.n	8004bd6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bc6:	e006      	b.n	8004bd6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
      break;
 8004bcc:	e004      	b.n	8004bd8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004bce:	bf00      	nop
 8004bd0:	e002      	b.n	8004bd8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004bd2:	bf00      	nop
 8004bd4:	e000      	b.n	8004bd8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004bd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d108      	bne.n	8004bf0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004bde:	4b4c      	ldr	r3, [pc, #304]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f023 0203 	bic.w	r2, r3, #3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4949      	ldr	r1, [pc, #292]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 8086 	bne.w	8004d04 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bf8:	4b45      	ldr	r3, [pc, #276]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a44      	ldr	r2, [pc, #272]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c04:	f7fe f8f0 	bl	8002de8 <HAL_GetTick>
 8004c08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c0a:	e009      	b.n	8004c20 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c0c:	f7fe f8ec 	bl	8002de8 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d902      	bls.n	8004c20 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c1e:	e005      	b.n	8004c2c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c20:	4b3b      	ldr	r3, [pc, #236]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1ef      	bne.n	8004c0c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d168      	bne.n	8004d04 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d113      	bne.n	8004c60 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c38:	4b35      	ldr	r3, [pc, #212]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c3a:	695a      	ldr	r2, [r3, #20]
 8004c3c:	4b35      	ldr	r3, [pc, #212]	@ (8004d14 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6892      	ldr	r2, [r2, #8]
 8004c44:	0211      	lsls	r1, r2, #8
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68d2      	ldr	r2, [r2, #12]
 8004c4a:	06d2      	lsls	r2, r2, #27
 8004c4c:	4311      	orrs	r1, r2
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6852      	ldr	r2, [r2, #4]
 8004c52:	3a01      	subs	r2, #1
 8004c54:	0112      	lsls	r2, r2, #4
 8004c56:	430a      	orrs	r2, r1
 8004c58:	492d      	ldr	r1, [pc, #180]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	614b      	str	r3, [r1, #20]
 8004c5e:	e02d      	b.n	8004cbc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d115      	bne.n	8004c92 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c66:	4b2a      	ldr	r3, [pc, #168]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c68:	695a      	ldr	r2, [r3, #20]
 8004c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004d18 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6892      	ldr	r2, [r2, #8]
 8004c72:	0211      	lsls	r1, r2, #8
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6912      	ldr	r2, [r2, #16]
 8004c78:	0852      	lsrs	r2, r2, #1
 8004c7a:	3a01      	subs	r2, #1
 8004c7c:	0552      	lsls	r2, r2, #21
 8004c7e:	4311      	orrs	r1, r2
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6852      	ldr	r2, [r2, #4]
 8004c84:	3a01      	subs	r2, #1
 8004c86:	0112      	lsls	r2, r2, #4
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	4921      	ldr	r1, [pc, #132]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	614b      	str	r3, [r1, #20]
 8004c90:	e014      	b.n	8004cbc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c92:	4b1f      	ldr	r3, [pc, #124]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	4b21      	ldr	r3, [pc, #132]	@ (8004d1c <RCCEx_PLLSAI2_Config+0x1e4>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6892      	ldr	r2, [r2, #8]
 8004c9e:	0211      	lsls	r1, r2, #8
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6952      	ldr	r2, [r2, #20]
 8004ca4:	0852      	lsrs	r2, r2, #1
 8004ca6:	3a01      	subs	r2, #1
 8004ca8:	0652      	lsls	r2, r2, #25
 8004caa:	4311      	orrs	r1, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6852      	ldr	r2, [r2, #4]
 8004cb0:	3a01      	subs	r2, #1
 8004cb2:	0112      	lsls	r2, r2, #4
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	4916      	ldr	r1, [pc, #88]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004cbc:	4b14      	ldr	r3, [pc, #80]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a13      	ldr	r2, [pc, #76]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fe f88e 	bl	8002de8 <HAL_GetTick>
 8004ccc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cce:	e009      	b.n	8004ce4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cd0:	f7fe f88a 	bl	8002de8 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d902      	bls.n	8004ce4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ce2:	e005      	b.n	8004cf0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0ef      	beq.n	8004cd0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004cf6:	4b06      	ldr	r3, [pc, #24]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	4904      	ldr	r1, [pc, #16]	@ (8004d10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40021000 	.word	0x40021000
 8004d14:	07ff800f 	.word	0x07ff800f
 8004d18:	ff9f800f 	.word	0xff9f800f
 8004d1c:	f9ff800f 	.word	0xf9ff800f

08004d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e095      	b.n	8004e5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d108      	bne.n	8004d4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d42:	d009      	beq.n	8004d58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	61da      	str	r2, [r3, #28]
 8004d4a:	e005      	b.n	8004d58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fd fdfa 	bl	800296c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d98:	d902      	bls.n	8004da0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e002      	b.n	8004da6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004da0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004da4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004dae:	d007      	beq.n	8004dc0 <HAL_SPI_Init+0xa0>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004db8:	d002      	beq.n	8004dc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e02:	ea42 0103 	orr.w	r1, r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	0c1b      	lsrs	r3, r3, #16
 8004e1c:	f003 0204 	and.w	r2, r3, #4
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004e3c:	ea42 0103 	orr.w	r1, r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b088      	sub	sp, #32
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4613      	mov	r3, r2
 8004e74:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e76:	f7fd ffb7 	bl	8002de8 <HAL_GetTick>
 8004e7a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d001      	beq.n	8004e90 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e15c      	b.n	800514a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <HAL_SPI_Transmit+0x36>
 8004e96:	88fb      	ldrh	r3, [r7, #6]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e154      	b.n	800514a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_SPI_Transmit+0x48>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e14d      	b.n	800514a <HAL_SPI_Transmit+0x2e4>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2203      	movs	r2, #3
 8004eba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	88fa      	ldrh	r2, [r7, #6]
 8004ece:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	88fa      	ldrh	r2, [r7, #6]
 8004ed4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f00:	d10f      	bne.n	8004f22 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2c:	2b40      	cmp	r3, #64	@ 0x40
 8004f2e:	d007      	beq.n	8004f40 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f48:	d952      	bls.n	8004ff0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d002      	beq.n	8004f58 <HAL_SPI_Transmit+0xf2>
 8004f52:	8b7b      	ldrh	r3, [r7, #26]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d145      	bne.n	8004fe4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5c:	881a      	ldrh	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f68:	1c9a      	adds	r2, r3, #2
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f7c:	e032      	b.n	8004fe4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d112      	bne.n	8004fb2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f90:	881a      	ldrh	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9c:	1c9a      	adds	r2, r3, #2
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004fb0:	e018      	b.n	8004fe4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fb2:	f7fd ff19 	bl	8002de8 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d803      	bhi.n	8004fca <HAL_SPI_Transmit+0x164>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc8:	d102      	bne.n	8004fd0 <HAL_SPI_Transmit+0x16a>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e0b2      	b.n	800514a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1c7      	bne.n	8004f7e <HAL_SPI_Transmit+0x118>
 8004fee:	e083      	b.n	80050f8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <HAL_SPI_Transmit+0x198>
 8004ff8:	8b7b      	ldrh	r3, [r7, #26]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d177      	bne.n	80050ee <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	d912      	bls.n	800502e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500c:	881a      	ldrh	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005018:	1c9a      	adds	r2, r3, #2
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005022:	b29b      	uxth	r3, r3
 8005024:	3b02      	subs	r3, #2
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800502c:	e05f      	b.n	80050ee <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	7812      	ldrb	r2, [r2, #0]
 800503a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005054:	e04b      	b.n	80050ee <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b02      	cmp	r3, #2
 8005062:	d12b      	bne.n	80050bc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b01      	cmp	r3, #1
 800506c:	d912      	bls.n	8005094 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005072:	881a      	ldrh	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507e:	1c9a      	adds	r2, r3, #2
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b02      	subs	r3, #2
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005092:	e02c      	b.n	80050ee <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	330c      	adds	r3, #12
 800509e:	7812      	ldrb	r2, [r2, #0]
 80050a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050ba:	e018      	b.n	80050ee <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050bc:	f7fd fe94 	bl	8002de8 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d803      	bhi.n	80050d4 <HAL_SPI_Transmit+0x26e>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d2:	d102      	bne.n	80050da <HAL_SPI_Transmit+0x274>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d109      	bne.n	80050ee <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e02d      	b.n	800514a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1ae      	bne.n	8005056 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	6839      	ldr	r1, [r7, #0]
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 f947 	bl	8005390 <SPI_EndRxTxTransaction>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10a      	bne.n	800512c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005116:	2300      	movs	r3, #0
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005148:	2300      	movs	r3, #0
  }
}
 800514a:	4618      	mov	r0, r3
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005164:	f7fd fe40 	bl	8002de8 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	4413      	add	r3, r2
 8005172:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005174:	f7fd fe38 	bl	8002de8 <HAL_GetTick>
 8005178:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800517a:	4b39      	ldr	r3, [pc, #228]	@ (8005260 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	015b      	lsls	r3, r3, #5
 8005180:	0d1b      	lsrs	r3, r3, #20
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	fb02 f303 	mul.w	r3, r2, r3
 8005188:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800518a:	e054      	b.n	8005236 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d050      	beq.n	8005236 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005194:	f7fd fe28 	bl	8002de8 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d902      	bls.n	80051aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d13d      	bne.n	8005226 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80051b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051c2:	d111      	bne.n	80051e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051cc:	d004      	beq.n	80051d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d6:	d107      	bne.n	80051e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051f0:	d10f      	bne.n	8005212 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005210:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e017      	b.n	8005256 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	3b01      	subs	r3, #1
 8005234:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4013      	ands	r3, r2
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	429a      	cmp	r2, r3
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	429a      	cmp	r2, r3
 8005252:	d19b      	bne.n	800518c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	200400a8 	.word	0x200400a8

08005264 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08a      	sub	sp, #40	@ 0x28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005276:	f7fd fdb7 	bl	8002de8 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527e:	1a9b      	subs	r3, r3, r2
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	4413      	add	r3, r2
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005286:	f7fd fdaf 	bl	8002de8 <HAL_GetTick>
 800528a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005294:	4b3d      	ldr	r3, [pc, #244]	@ (800538c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	00da      	lsls	r2, r3, #3
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	0d1b      	lsrs	r3, r3, #20
 80052a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
 80052aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80052ac:	e060      	b.n	8005370 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80052b4:	d107      	bne.n	80052c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d104      	bne.n	80052c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d050      	beq.n	8005370 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052ce:	f7fd fd8b 	bl	8002de8 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052da:	429a      	cmp	r2, r3
 80052dc:	d902      	bls.n	80052e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80052de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d13d      	bne.n	8005360 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052fc:	d111      	bne.n	8005322 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005306:	d004      	beq.n	8005312 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005310:	d107      	bne.n	8005322 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005320:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800532a:	d10f      	bne.n	800534c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800534a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e010      	b.n	8005382 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	3b01      	subs	r3, #1
 800536e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4013      	ands	r3, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	429a      	cmp	r2, r3
 800537e:	d196      	bne.n	80052ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3728      	adds	r7, #40	@ 0x28
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	200400a8 	.word	0x200400a8

08005390 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7ff ff5b 	bl	8005264 <SPI_WaitFifoStateUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b8:	f043 0220 	orr.w	r2, r3, #32
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e027      	b.n	8005414 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2200      	movs	r2, #0
 80053cc:	2180      	movs	r1, #128	@ 0x80
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff fec0 	bl	8005154 <SPI_WaitFlagStateUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053de:	f043 0220 	orr.w	r2, r3, #32
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e014      	b.n	8005414 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f7ff ff34 	bl	8005264 <SPI_WaitFifoStateUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005406:	f043 0220 	orr.w	r2, r3, #32
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e000      	b.n	8005414 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e042      	b.n	80054b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005434:	2b00      	cmp	r3, #0
 8005436:	d106      	bne.n	8005446 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7fd f9a9 	bl	8002798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2224      	movs	r2, #36	@ 0x24
 800544a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0201 	bic.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fc7c 	bl	8005d64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f97d 	bl	800576c <UART_SetConfig>
 8005472:	4603      	mov	r3, r0
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e01b      	b.n	80054b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800548a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800549a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fcfb 	bl	8005ea8 <UART_CheckIdleState>
 80054b2:	4603      	mov	r3, r0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08a      	sub	sp, #40	@ 0x28
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	d17b      	bne.n	80055ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <HAL_UART_Transmit+0x26>
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e074      	b.n	80055d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2221      	movs	r2, #33	@ 0x21
 80054f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054f6:	f7fd fc77 	bl	8002de8 <HAL_GetTick>
 80054fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	88fa      	ldrh	r2, [r7, #6]
 8005500:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005514:	d108      	bne.n	8005528 <HAL_UART_Transmit+0x6c>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d104      	bne.n	8005528 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	61bb      	str	r3, [r7, #24]
 8005526:	e003      	b.n	8005530 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800552c:	2300      	movs	r3, #0
 800552e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005530:	e030      	b.n	8005594 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2200      	movs	r2, #0
 800553a:	2180      	movs	r1, #128	@ 0x80
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 fd5d 	bl	8005ffc <UART_WaitOnFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e03d      	b.n	80055d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	881a      	ldrh	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005566:	b292      	uxth	r2, r2
 8005568:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	3302      	adds	r3, #2
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	e007      	b.n	8005582 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	781a      	ldrb	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	3301      	adds	r3, #1
 8005580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1c8      	bne.n	8005532 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2200      	movs	r2, #0
 80055a8:	2140      	movs	r1, #64	@ 0x40
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fd26 	bl	8005ffc <UART_WaitOnFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e006      	b.n	80055d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e000      	b.n	80055d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80055ce:	2302      	movs	r3, #2
  }
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3720      	adds	r7, #32
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08a      	sub	sp, #40	@ 0x28
 80055dc:	af02      	add	r7, sp, #8
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	f040 80b6 	bne.w	8005760 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_UART_Receive+0x28>
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e0ae      	b.n	8005762 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2222      	movs	r2, #34	@ 0x22
 8005610:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800561a:	f7fd fbe5 	bl	8002de8 <HAL_GetTick>
 800561e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	88fa      	ldrh	r2, [r7, #6]
 8005624:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005638:	d10e      	bne.n	8005658 <HAL_UART_Receive+0x80>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d105      	bne.n	800564e <HAL_UART_Receive+0x76>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005648:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800564c:	e02d      	b.n	80056aa <HAL_UART_Receive+0xd2>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	22ff      	movs	r2, #255	@ 0xff
 8005652:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005656:	e028      	b.n	80056aa <HAL_UART_Receive+0xd2>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10d      	bne.n	800567c <HAL_UART_Receive+0xa4>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d104      	bne.n	8005672 <HAL_UART_Receive+0x9a>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	22ff      	movs	r2, #255	@ 0xff
 800566c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005670:	e01b      	b.n	80056aa <HAL_UART_Receive+0xd2>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	227f      	movs	r2, #127	@ 0x7f
 8005676:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800567a:	e016      	b.n	80056aa <HAL_UART_Receive+0xd2>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005684:	d10d      	bne.n	80056a2 <HAL_UART_Receive+0xca>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d104      	bne.n	8005698 <HAL_UART_Receive+0xc0>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	227f      	movs	r2, #127	@ 0x7f
 8005692:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005696:	e008      	b.n	80056aa <HAL_UART_Receive+0xd2>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	223f      	movs	r2, #63	@ 0x3f
 800569c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80056a0:	e003      	b.n	80056aa <HAL_UART_Receive+0xd2>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80056b0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ba:	d108      	bne.n	80056ce <HAL_UART_Receive+0xf6>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d104      	bne.n	80056ce <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	61bb      	str	r3, [r7, #24]
 80056cc:	e003      	b.n	80056d6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056d6:	e037      	b.n	8005748 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2200      	movs	r2, #0
 80056e0:	2120      	movs	r1, #32
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 fc8a 	bl	8005ffc <UART_WaitOnFlagUntilTimeout>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e033      	b.n	8005762 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10c      	bne.n	800571a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005706:	b29a      	uxth	r2, r3
 8005708:	8a7b      	ldrh	r3, [r7, #18]
 800570a:	4013      	ands	r3, r2
 800570c:	b29a      	uxth	r2, r3
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	3302      	adds	r3, #2
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	e00d      	b.n	8005736 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005720:	b29b      	uxth	r3, r3
 8005722:	b2da      	uxtb	r2, r3
 8005724:	8a7b      	ldrh	r3, [r7, #18]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	4013      	ands	r3, r2
 800572a:	b2da      	uxtb	r2, r3
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	3301      	adds	r3, #1
 8005734:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800573c:	b29b      	uxth	r3, r3
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1c1      	bne.n	80056d8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	e000      	b.n	8005762 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005760:	2302      	movs	r3, #2
  }
}
 8005762:	4618      	mov	r0, r3
 8005764:	3720      	adds	r7, #32
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800576c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005770:	b08c      	sub	sp, #48	@ 0x30
 8005772:	af00      	add	r7, sp, #0
 8005774:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	431a      	orrs	r2, r3
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	431a      	orrs	r2, r3
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	4313      	orrs	r3, r2
 8005792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4baa      	ldr	r3, [pc, #680]	@ (8005a44 <UART_SetConfig+0x2d8>)
 800579c:	4013      	ands	r3, r2
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057a4:	430b      	orrs	r3, r1
 80057a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a9f      	ldr	r2, [pc, #636]	@ (8005a48 <UART_SetConfig+0x2dc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057d4:	4313      	orrs	r3, r2
 80057d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80057e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057ec:	430b      	orrs	r3, r1
 80057ee:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	f023 010f 	bic.w	r1, r3, #15
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a90      	ldr	r2, [pc, #576]	@ (8005a4c <UART_SetConfig+0x2e0>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d125      	bne.n	800585c <UART_SetConfig+0xf0>
 8005810:	4b8f      	ldr	r3, [pc, #572]	@ (8005a50 <UART_SetConfig+0x2e4>)
 8005812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	2b03      	cmp	r3, #3
 800581c:	d81a      	bhi.n	8005854 <UART_SetConfig+0xe8>
 800581e:	a201      	add	r2, pc, #4	@ (adr r2, 8005824 <UART_SetConfig+0xb8>)
 8005820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005824:	08005835 	.word	0x08005835
 8005828:	08005845 	.word	0x08005845
 800582c:	0800583d 	.word	0x0800583d
 8005830:	0800584d 	.word	0x0800584d
 8005834:	2301      	movs	r3, #1
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800583a:	e116      	b.n	8005a6a <UART_SetConfig+0x2fe>
 800583c:	2302      	movs	r3, #2
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005842:	e112      	b.n	8005a6a <UART_SetConfig+0x2fe>
 8005844:	2304      	movs	r3, #4
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800584a:	e10e      	b.n	8005a6a <UART_SetConfig+0x2fe>
 800584c:	2308      	movs	r3, #8
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005852:	e10a      	b.n	8005a6a <UART_SetConfig+0x2fe>
 8005854:	2310      	movs	r3, #16
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800585a:	e106      	b.n	8005a6a <UART_SetConfig+0x2fe>
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a7c      	ldr	r2, [pc, #496]	@ (8005a54 <UART_SetConfig+0x2e8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d138      	bne.n	80058d8 <UART_SetConfig+0x16c>
 8005866:	4b7a      	ldr	r3, [pc, #488]	@ (8005a50 <UART_SetConfig+0x2e4>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586c:	f003 030c 	and.w	r3, r3, #12
 8005870:	2b0c      	cmp	r3, #12
 8005872:	d82d      	bhi.n	80058d0 <UART_SetConfig+0x164>
 8005874:	a201      	add	r2, pc, #4	@ (adr r2, 800587c <UART_SetConfig+0x110>)
 8005876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587a:	bf00      	nop
 800587c:	080058b1 	.word	0x080058b1
 8005880:	080058d1 	.word	0x080058d1
 8005884:	080058d1 	.word	0x080058d1
 8005888:	080058d1 	.word	0x080058d1
 800588c:	080058c1 	.word	0x080058c1
 8005890:	080058d1 	.word	0x080058d1
 8005894:	080058d1 	.word	0x080058d1
 8005898:	080058d1 	.word	0x080058d1
 800589c:	080058b9 	.word	0x080058b9
 80058a0:	080058d1 	.word	0x080058d1
 80058a4:	080058d1 	.word	0x080058d1
 80058a8:	080058d1 	.word	0x080058d1
 80058ac:	080058c9 	.word	0x080058c9
 80058b0:	2300      	movs	r3, #0
 80058b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058b6:	e0d8      	b.n	8005a6a <UART_SetConfig+0x2fe>
 80058b8:	2302      	movs	r3, #2
 80058ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058be:	e0d4      	b.n	8005a6a <UART_SetConfig+0x2fe>
 80058c0:	2304      	movs	r3, #4
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058c6:	e0d0      	b.n	8005a6a <UART_SetConfig+0x2fe>
 80058c8:	2308      	movs	r3, #8
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ce:	e0cc      	b.n	8005a6a <UART_SetConfig+0x2fe>
 80058d0:	2310      	movs	r3, #16
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058d6:	e0c8      	b.n	8005a6a <UART_SetConfig+0x2fe>
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a5e      	ldr	r2, [pc, #376]	@ (8005a58 <UART_SetConfig+0x2ec>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d125      	bne.n	800592e <UART_SetConfig+0x1c2>
 80058e2:	4b5b      	ldr	r3, [pc, #364]	@ (8005a50 <UART_SetConfig+0x2e4>)
 80058e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80058ec:	2b30      	cmp	r3, #48	@ 0x30
 80058ee:	d016      	beq.n	800591e <UART_SetConfig+0x1b2>
 80058f0:	2b30      	cmp	r3, #48	@ 0x30
 80058f2:	d818      	bhi.n	8005926 <UART_SetConfig+0x1ba>
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d00a      	beq.n	800590e <UART_SetConfig+0x1a2>
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d814      	bhi.n	8005926 <UART_SetConfig+0x1ba>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <UART_SetConfig+0x19a>
 8005900:	2b10      	cmp	r3, #16
 8005902:	d008      	beq.n	8005916 <UART_SetConfig+0x1aa>
 8005904:	e00f      	b.n	8005926 <UART_SetConfig+0x1ba>
 8005906:	2300      	movs	r3, #0
 8005908:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800590c:	e0ad      	b.n	8005a6a <UART_SetConfig+0x2fe>
 800590e:	2302      	movs	r3, #2
 8005910:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005914:	e0a9      	b.n	8005a6a <UART_SetConfig+0x2fe>
 8005916:	2304      	movs	r3, #4
 8005918:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800591c:	e0a5      	b.n	8005a6a <UART_SetConfig+0x2fe>
 800591e:	2308      	movs	r3, #8
 8005920:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005924:	e0a1      	b.n	8005a6a <UART_SetConfig+0x2fe>
 8005926:	2310      	movs	r3, #16
 8005928:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800592c:	e09d      	b.n	8005a6a <UART_SetConfig+0x2fe>
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a4a      	ldr	r2, [pc, #296]	@ (8005a5c <UART_SetConfig+0x2f0>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d125      	bne.n	8005984 <UART_SetConfig+0x218>
 8005938:	4b45      	ldr	r3, [pc, #276]	@ (8005a50 <UART_SetConfig+0x2e4>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800593e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005942:	2bc0      	cmp	r3, #192	@ 0xc0
 8005944:	d016      	beq.n	8005974 <UART_SetConfig+0x208>
 8005946:	2bc0      	cmp	r3, #192	@ 0xc0
 8005948:	d818      	bhi.n	800597c <UART_SetConfig+0x210>
 800594a:	2b80      	cmp	r3, #128	@ 0x80
 800594c:	d00a      	beq.n	8005964 <UART_SetConfig+0x1f8>
 800594e:	2b80      	cmp	r3, #128	@ 0x80
 8005950:	d814      	bhi.n	800597c <UART_SetConfig+0x210>
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <UART_SetConfig+0x1f0>
 8005956:	2b40      	cmp	r3, #64	@ 0x40
 8005958:	d008      	beq.n	800596c <UART_SetConfig+0x200>
 800595a:	e00f      	b.n	800597c <UART_SetConfig+0x210>
 800595c:	2300      	movs	r3, #0
 800595e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005962:	e082      	b.n	8005a6a <UART_SetConfig+0x2fe>
 8005964:	2302      	movs	r3, #2
 8005966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800596a:	e07e      	b.n	8005a6a <UART_SetConfig+0x2fe>
 800596c:	2304      	movs	r3, #4
 800596e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005972:	e07a      	b.n	8005a6a <UART_SetConfig+0x2fe>
 8005974:	2308      	movs	r3, #8
 8005976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800597a:	e076      	b.n	8005a6a <UART_SetConfig+0x2fe>
 800597c:	2310      	movs	r3, #16
 800597e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005982:	e072      	b.n	8005a6a <UART_SetConfig+0x2fe>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a35      	ldr	r2, [pc, #212]	@ (8005a60 <UART_SetConfig+0x2f4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d12a      	bne.n	80059e4 <UART_SetConfig+0x278>
 800598e:	4b30      	ldr	r3, [pc, #192]	@ (8005a50 <UART_SetConfig+0x2e4>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005994:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005998:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800599c:	d01a      	beq.n	80059d4 <UART_SetConfig+0x268>
 800599e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059a2:	d81b      	bhi.n	80059dc <UART_SetConfig+0x270>
 80059a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059a8:	d00c      	beq.n	80059c4 <UART_SetConfig+0x258>
 80059aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059ae:	d815      	bhi.n	80059dc <UART_SetConfig+0x270>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <UART_SetConfig+0x250>
 80059b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059b8:	d008      	beq.n	80059cc <UART_SetConfig+0x260>
 80059ba:	e00f      	b.n	80059dc <UART_SetConfig+0x270>
 80059bc:	2300      	movs	r3, #0
 80059be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059c2:	e052      	b.n	8005a6a <UART_SetConfig+0x2fe>
 80059c4:	2302      	movs	r3, #2
 80059c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ca:	e04e      	b.n	8005a6a <UART_SetConfig+0x2fe>
 80059cc:	2304      	movs	r3, #4
 80059ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059d2:	e04a      	b.n	8005a6a <UART_SetConfig+0x2fe>
 80059d4:	2308      	movs	r3, #8
 80059d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059da:	e046      	b.n	8005a6a <UART_SetConfig+0x2fe>
 80059dc:	2310      	movs	r3, #16
 80059de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059e2:	e042      	b.n	8005a6a <UART_SetConfig+0x2fe>
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a17      	ldr	r2, [pc, #92]	@ (8005a48 <UART_SetConfig+0x2dc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d13a      	bne.n	8005a64 <UART_SetConfig+0x2f8>
 80059ee:	4b18      	ldr	r3, [pc, #96]	@ (8005a50 <UART_SetConfig+0x2e4>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80059f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80059fc:	d01a      	beq.n	8005a34 <UART_SetConfig+0x2c8>
 80059fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a02:	d81b      	bhi.n	8005a3c <UART_SetConfig+0x2d0>
 8005a04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a08:	d00c      	beq.n	8005a24 <UART_SetConfig+0x2b8>
 8005a0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a0e:	d815      	bhi.n	8005a3c <UART_SetConfig+0x2d0>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <UART_SetConfig+0x2b0>
 8005a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a18:	d008      	beq.n	8005a2c <UART_SetConfig+0x2c0>
 8005a1a:	e00f      	b.n	8005a3c <UART_SetConfig+0x2d0>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a22:	e022      	b.n	8005a6a <UART_SetConfig+0x2fe>
 8005a24:	2302      	movs	r3, #2
 8005a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a2a:	e01e      	b.n	8005a6a <UART_SetConfig+0x2fe>
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a32:	e01a      	b.n	8005a6a <UART_SetConfig+0x2fe>
 8005a34:	2308      	movs	r3, #8
 8005a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a3a:	e016      	b.n	8005a6a <UART_SetConfig+0x2fe>
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a42:	e012      	b.n	8005a6a <UART_SetConfig+0x2fe>
 8005a44:	cfff69f3 	.word	0xcfff69f3
 8005a48:	40008000 	.word	0x40008000
 8005a4c:	40013800 	.word	0x40013800
 8005a50:	40021000 	.word	0x40021000
 8005a54:	40004400 	.word	0x40004400
 8005a58:	40004800 	.word	0x40004800
 8005a5c:	40004c00 	.word	0x40004c00
 8005a60:	40005000 	.word	0x40005000
 8005a64:	2310      	movs	r3, #16
 8005a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4aae      	ldr	r2, [pc, #696]	@ (8005d28 <UART_SetConfig+0x5bc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	f040 8097 	bne.w	8005ba4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d823      	bhi.n	8005ac6 <UART_SetConfig+0x35a>
 8005a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a84 <UART_SetConfig+0x318>)
 8005a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a84:	08005aa9 	.word	0x08005aa9
 8005a88:	08005ac7 	.word	0x08005ac7
 8005a8c:	08005ab1 	.word	0x08005ab1
 8005a90:	08005ac7 	.word	0x08005ac7
 8005a94:	08005ab7 	.word	0x08005ab7
 8005a98:	08005ac7 	.word	0x08005ac7
 8005a9c:	08005ac7 	.word	0x08005ac7
 8005aa0:	08005ac7 	.word	0x08005ac7
 8005aa4:	08005abf 	.word	0x08005abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aa8:	f7fe fb36 	bl	8004118 <HAL_RCC_GetPCLK1Freq>
 8005aac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005aae:	e010      	b.n	8005ad2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ab0:	4b9e      	ldr	r3, [pc, #632]	@ (8005d2c <UART_SetConfig+0x5c0>)
 8005ab2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ab4:	e00d      	b.n	8005ad2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ab6:	f7fe fa97 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 8005aba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005abc:	e009      	b.n	8005ad2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ac2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ac4:	e005      	b.n	8005ad2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ad0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8130 	beq.w	8005d3a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ade:	4a94      	ldr	r2, [pc, #592]	@ (8005d30 <UART_SetConfig+0x5c4>)
 8005ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	4413      	add	r3, r2
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d305      	bcc.n	8005b0a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d903      	bls.n	8005b12 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b10:	e113      	b.n	8005d3a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	2200      	movs	r2, #0
 8005b16:	60bb      	str	r3, [r7, #8]
 8005b18:	60fa      	str	r2, [r7, #12]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1e:	4a84      	ldr	r2, [pc, #528]	@ (8005d30 <UART_SetConfig+0x5c4>)
 8005b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2200      	movs	r2, #0
 8005b28:	603b      	str	r3, [r7, #0]
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b34:	f7fb f8c0 	bl	8000cb8 <__aeabi_uldivmod>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4619      	mov	r1, r3
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	020b      	lsls	r3, r1, #8
 8005b4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b4e:	0202      	lsls	r2, r0, #8
 8005b50:	6979      	ldr	r1, [r7, #20]
 8005b52:	6849      	ldr	r1, [r1, #4]
 8005b54:	0849      	lsrs	r1, r1, #1
 8005b56:	2000      	movs	r0, #0
 8005b58:	460c      	mov	r4, r1
 8005b5a:	4605      	mov	r5, r0
 8005b5c:	eb12 0804 	adds.w	r8, r2, r4
 8005b60:	eb43 0905 	adc.w	r9, r3, r5
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	469a      	mov	sl, r3
 8005b6c:	4693      	mov	fp, r2
 8005b6e:	4652      	mov	r2, sl
 8005b70:	465b      	mov	r3, fp
 8005b72:	4640      	mov	r0, r8
 8005b74:	4649      	mov	r1, r9
 8005b76:	f7fb f89f 	bl	8000cb8 <__aeabi_uldivmod>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4613      	mov	r3, r2
 8005b80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b88:	d308      	bcc.n	8005b9c <UART_SetConfig+0x430>
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b90:	d204      	bcs.n	8005b9c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6a3a      	ldr	r2, [r7, #32]
 8005b98:	60da      	str	r2, [r3, #12]
 8005b9a:	e0ce      	b.n	8005d3a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ba2:	e0ca      	b.n	8005d3a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bac:	d166      	bne.n	8005c7c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005bae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d827      	bhi.n	8005c06 <UART_SetConfig+0x49a>
 8005bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bbc <UART_SetConfig+0x450>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005be1 	.word	0x08005be1
 8005bc0:	08005be9 	.word	0x08005be9
 8005bc4:	08005bf1 	.word	0x08005bf1
 8005bc8:	08005c07 	.word	0x08005c07
 8005bcc:	08005bf7 	.word	0x08005bf7
 8005bd0:	08005c07 	.word	0x08005c07
 8005bd4:	08005c07 	.word	0x08005c07
 8005bd8:	08005c07 	.word	0x08005c07
 8005bdc:	08005bff 	.word	0x08005bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be0:	f7fe fa9a 	bl	8004118 <HAL_RCC_GetPCLK1Freq>
 8005be4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005be6:	e014      	b.n	8005c12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005be8:	f7fe faac 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 8005bec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bee:	e010      	b.n	8005c12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf0:	4b4e      	ldr	r3, [pc, #312]	@ (8005d2c <UART_SetConfig+0x5c0>)
 8005bf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bf4:	e00d      	b.n	8005c12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bf6:	f7fe f9f7 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 8005bfa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bfc:	e009      	b.n	8005c12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c04:	e005      	b.n	8005c12 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 8090 	beq.w	8005d3a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1e:	4a44      	ldr	r2, [pc, #272]	@ (8005d30 <UART_SetConfig+0x5c4>)
 8005c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c24:	461a      	mov	r2, r3
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c2c:	005a      	lsls	r2, r3, #1
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	085b      	lsrs	r3, r3, #1
 8005c34:	441a      	add	r2, r3
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	2b0f      	cmp	r3, #15
 8005c44:	d916      	bls.n	8005c74 <UART_SetConfig+0x508>
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c4c:	d212      	bcs.n	8005c74 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f023 030f 	bic.w	r3, r3, #15
 8005c56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	085b      	lsrs	r3, r3, #1
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	8bfb      	ldrh	r3, [r7, #30]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	8bfa      	ldrh	r2, [r7, #30]
 8005c70:	60da      	str	r2, [r3, #12]
 8005c72:	e062      	b.n	8005d3a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c7a:	e05e      	b.n	8005d3a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d828      	bhi.n	8005cd6 <UART_SetConfig+0x56a>
 8005c84:	a201      	add	r2, pc, #4	@ (adr r2, 8005c8c <UART_SetConfig+0x520>)
 8005c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8a:	bf00      	nop
 8005c8c:	08005cb1 	.word	0x08005cb1
 8005c90:	08005cb9 	.word	0x08005cb9
 8005c94:	08005cc1 	.word	0x08005cc1
 8005c98:	08005cd7 	.word	0x08005cd7
 8005c9c:	08005cc7 	.word	0x08005cc7
 8005ca0:	08005cd7 	.word	0x08005cd7
 8005ca4:	08005cd7 	.word	0x08005cd7
 8005ca8:	08005cd7 	.word	0x08005cd7
 8005cac:	08005ccf 	.word	0x08005ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb0:	f7fe fa32 	bl	8004118 <HAL_RCC_GetPCLK1Freq>
 8005cb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cb6:	e014      	b.n	8005ce2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cb8:	f7fe fa44 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 8005cbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cbe:	e010      	b.n	8005ce2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d2c <UART_SetConfig+0x5c0>)
 8005cc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cc4:	e00d      	b.n	8005ce2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cc6:	f7fe f98f 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 8005cca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ccc:	e009      	b.n	8005ce2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cd4:	e005      	b.n	8005ce2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ce0:	bf00      	nop
    }

    if (pclk != 0U)
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d028      	beq.n	8005d3a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	4a10      	ldr	r2, [pc, #64]	@ (8005d30 <UART_SetConfig+0x5c4>)
 8005cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	441a      	add	r2, r3
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	2b0f      	cmp	r3, #15
 8005d10:	d910      	bls.n	8005d34 <UART_SetConfig+0x5c8>
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d18:	d20c      	bcs.n	8005d34 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60da      	str	r2, [r3, #12]
 8005d24:	e009      	b.n	8005d3a <UART_SetConfig+0x5ce>
 8005d26:	bf00      	nop
 8005d28:	40008000 	.word	0x40008000
 8005d2c:	00f42400 	.word	0x00f42400
 8005d30:	0800ae6c 	.word	0x0800ae6c
      }
      else
      {
        ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2200      	movs	r2, #0
 8005d54:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005d56:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3730      	adds	r7, #48	@ 0x30
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d70:	f003 0308 	and.w	r3, r3, #8
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd6:	f003 0304 	and.w	r3, r3, #4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01a      	beq.n	8005e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e62:	d10a      	bne.n	8005e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	605a      	str	r2, [r3, #4]
  }
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b098      	sub	sp, #96	@ 0x60
 8005eac:	af02      	add	r7, sp, #8
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005eb8:	f7fc ff96 	bl	8002de8 <HAL_GetTick>
 8005ebc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d12f      	bne.n	8005f2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ecc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f88e 	bl	8005ffc <UART_WaitOnFlagUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d022      	beq.n	8005f2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005efa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	461a      	mov	r2, r3
 8005f02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f0c:	e841 2300 	strex	r3, r2, [r1]
 8005f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e6      	bne.n	8005ee6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e063      	b.n	8005ff4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d149      	bne.n	8005fce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f42:	2200      	movs	r2, #0
 8005f44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f857 	bl	8005ffc <UART_WaitOnFlagUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d03c      	beq.n	8005fce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	623b      	str	r3, [r7, #32]
   return(result);
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f72:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e6      	bne.n	8005f54 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f023 0301 	bic.w	r3, r3, #1
 8005f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fa6:	61fa      	str	r2, [r7, #28]
 8005fa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	69b9      	ldr	r1, [r7, #24]
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	617b      	str	r3, [r7, #20]
   return(result);
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e5      	bne.n	8005f86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e012      	b.n	8005ff4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3758      	adds	r7, #88	@ 0x58
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	4613      	mov	r3, r2
 800600a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800600c:	e04f      	b.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d04b      	beq.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006016:	f7fc fee7 	bl	8002de8 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	429a      	cmp	r2, r3
 8006024:	d302      	bcc.n	800602c <UART_WaitOnFlagUntilTimeout+0x30>
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e04e      	b.n	80060ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	d037      	beq.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b80      	cmp	r3, #128	@ 0x80
 8006042:	d034      	beq.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b40      	cmp	r3, #64	@ 0x40
 8006048:	d031      	beq.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b08      	cmp	r3, #8
 8006056:	d110      	bne.n	800607a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2208      	movs	r2, #8
 800605e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 f838 	bl	80060d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2208      	movs	r2, #8
 800606a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e029      	b.n	80060ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006088:	d111      	bne.n	80060ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006092:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 f81e 	bl	80060d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2220      	movs	r2, #32
 800609e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e00f      	b.n	80060ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69da      	ldr	r2, [r3, #28]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4013      	ands	r3, r2
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	bf0c      	ite	eq
 80060be:	2301      	moveq	r3, #1
 80060c0:	2300      	movne	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d0a0      	beq.n	800600e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b095      	sub	sp, #84	@ 0x54
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80060fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006102:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800610a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e6      	bne.n	80060de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3308      	adds	r3, #8
 8006116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006126:	f023 0301 	bic.w	r3, r3, #1
 800612a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3308      	adds	r3, #8
 8006132:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006134:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006136:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800613a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800613c:	e841 2300 	strex	r3, r2, [r1]
 8006140:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e3      	bne.n	8006110 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800614c:	2b01      	cmp	r3, #1
 800614e:	d118      	bne.n	8006182 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	60bb      	str	r3, [r7, #8]
   return(result);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f023 0310 	bic.w	r3, r3, #16
 8006164:	647b      	str	r3, [r7, #68]	@ 0x44
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800616e:	61bb      	str	r3, [r7, #24]
 8006170:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	6979      	ldr	r1, [r7, #20]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	613b      	str	r3, [r7, #16]
   return(result);
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e6      	bne.n	8006150 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006196:	bf00      	nop
 8006198:	3754      	adds	r7, #84	@ 0x54
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b085      	sub	sp, #20
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e027      	b.n	8006208 <HAL_UARTEx_DisableFifoMode+0x66>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2224      	movs	r2, #36	@ 0x24
 80061c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80061e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006228:	2302      	movs	r3, #2
 800622a:	e02d      	b.n	8006288 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2224      	movs	r2, #36	@ 0x24
 8006238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0201 	bic.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f84f 	bl	800630c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e02d      	b.n	8006304 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2224      	movs	r2, #36	@ 0x24
 80062b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0201 	bic.w	r2, r2, #1
 80062ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f811 	bl	800630c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006318:	2b00      	cmp	r3, #0
 800631a:	d108      	bne.n	800632e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800632c:	e031      	b.n	8006392 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800632e:	2308      	movs	r3, #8
 8006330:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006332:	2308      	movs	r3, #8
 8006334:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	0e5b      	lsrs	r3, r3, #25
 800633e:	b2db      	uxtb	r3, r3
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	0f5b      	lsrs	r3, r3, #29
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006356:	7bbb      	ldrb	r3, [r7, #14]
 8006358:	7b3a      	ldrb	r2, [r7, #12]
 800635a:	4911      	ldr	r1, [pc, #68]	@ (80063a0 <UARTEx_SetNbDataToProcess+0x94>)
 800635c:	5c8a      	ldrb	r2, [r1, r2]
 800635e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006362:	7b3a      	ldrb	r2, [r7, #12]
 8006364:	490f      	ldr	r1, [pc, #60]	@ (80063a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006366:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006368:	fb93 f3f2 	sdiv	r3, r3, r2
 800636c:	b29a      	uxth	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	7b7a      	ldrb	r2, [r7, #13]
 8006378:	4909      	ldr	r1, [pc, #36]	@ (80063a0 <UARTEx_SetNbDataToProcess+0x94>)
 800637a:	5c8a      	ldrb	r2, [r1, r2]
 800637c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006380:	7b7a      	ldrb	r2, [r7, #13]
 8006382:	4908      	ldr	r1, [pc, #32]	@ (80063a4 <UARTEx_SetNbDataToProcess+0x98>)
 8006384:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006386:	fb93 f3f2 	sdiv	r3, r3, r2
 800638a:	b29a      	uxth	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006392:	bf00      	nop
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	0800ae84 	.word	0x0800ae84
 80063a4:	0800ae8c 	.word	0x0800ae8c

080063a8 <sqrt>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	ed2d 8b02 	vpush	{d8}
 80063ae:	ec55 4b10 	vmov	r4, r5, d0
 80063b2:	f000 f825 	bl	8006400 <__ieee754_sqrt>
 80063b6:	4622      	mov	r2, r4
 80063b8:	462b      	mov	r3, r5
 80063ba:	4620      	mov	r0, r4
 80063bc:	4629      	mov	r1, r5
 80063be:	eeb0 8a40 	vmov.f32	s16, s0
 80063c2:	eef0 8a60 	vmov.f32	s17, s1
 80063c6:	f7fa fbc9 	bl	8000b5c <__aeabi_dcmpun>
 80063ca:	b990      	cbnz	r0, 80063f2 <sqrt+0x4a>
 80063cc:	2200      	movs	r2, #0
 80063ce:	2300      	movs	r3, #0
 80063d0:	4620      	mov	r0, r4
 80063d2:	4629      	mov	r1, r5
 80063d4:	f7fa fb9a 	bl	8000b0c <__aeabi_dcmplt>
 80063d8:	b158      	cbz	r0, 80063f2 <sqrt+0x4a>
 80063da:	f001 fa11 	bl	8007800 <__errno>
 80063de:	2321      	movs	r3, #33	@ 0x21
 80063e0:	6003      	str	r3, [r0, #0]
 80063e2:	2200      	movs	r2, #0
 80063e4:	2300      	movs	r3, #0
 80063e6:	4610      	mov	r0, r2
 80063e8:	4619      	mov	r1, r3
 80063ea:	f7fa fa47 	bl	800087c <__aeabi_ddiv>
 80063ee:	ec41 0b18 	vmov	d8, r0, r1
 80063f2:	eeb0 0a48 	vmov.f32	s0, s16
 80063f6:	eef0 0a68 	vmov.f32	s1, s17
 80063fa:	ecbd 8b02 	vpop	{d8}
 80063fe:	bd38      	pop	{r3, r4, r5, pc}

08006400 <__ieee754_sqrt>:
 8006400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006404:	4a66      	ldr	r2, [pc, #408]	@ (80065a0 <__ieee754_sqrt+0x1a0>)
 8006406:	ec55 4b10 	vmov	r4, r5, d0
 800640a:	43aa      	bics	r2, r5
 800640c:	462b      	mov	r3, r5
 800640e:	4621      	mov	r1, r4
 8006410:	d110      	bne.n	8006434 <__ieee754_sqrt+0x34>
 8006412:	4622      	mov	r2, r4
 8006414:	4620      	mov	r0, r4
 8006416:	4629      	mov	r1, r5
 8006418:	f7fa f906 	bl	8000628 <__aeabi_dmul>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4620      	mov	r0, r4
 8006422:	4629      	mov	r1, r5
 8006424:	f7f9 ff4a 	bl	80002bc <__adddf3>
 8006428:	4604      	mov	r4, r0
 800642a:	460d      	mov	r5, r1
 800642c:	ec45 4b10 	vmov	d0, r4, r5
 8006430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006434:	2d00      	cmp	r5, #0
 8006436:	dc0e      	bgt.n	8006456 <__ieee754_sqrt+0x56>
 8006438:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800643c:	4322      	orrs	r2, r4
 800643e:	d0f5      	beq.n	800642c <__ieee754_sqrt+0x2c>
 8006440:	b19d      	cbz	r5, 800646a <__ieee754_sqrt+0x6a>
 8006442:	4622      	mov	r2, r4
 8006444:	4620      	mov	r0, r4
 8006446:	4629      	mov	r1, r5
 8006448:	f7f9 ff36 	bl	80002b8 <__aeabi_dsub>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	f7fa fa14 	bl	800087c <__aeabi_ddiv>
 8006454:	e7e8      	b.n	8006428 <__ieee754_sqrt+0x28>
 8006456:	152a      	asrs	r2, r5, #20
 8006458:	d115      	bne.n	8006486 <__ieee754_sqrt+0x86>
 800645a:	2000      	movs	r0, #0
 800645c:	e009      	b.n	8006472 <__ieee754_sqrt+0x72>
 800645e:	0acb      	lsrs	r3, r1, #11
 8006460:	3a15      	subs	r2, #21
 8006462:	0549      	lsls	r1, r1, #21
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0fa      	beq.n	800645e <__ieee754_sqrt+0x5e>
 8006468:	e7f7      	b.n	800645a <__ieee754_sqrt+0x5a>
 800646a:	462a      	mov	r2, r5
 800646c:	e7fa      	b.n	8006464 <__ieee754_sqrt+0x64>
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	3001      	adds	r0, #1
 8006472:	02dc      	lsls	r4, r3, #11
 8006474:	d5fb      	bpl.n	800646e <__ieee754_sqrt+0x6e>
 8006476:	1e44      	subs	r4, r0, #1
 8006478:	1b12      	subs	r2, r2, r4
 800647a:	f1c0 0420 	rsb	r4, r0, #32
 800647e:	fa21 f404 	lsr.w	r4, r1, r4
 8006482:	4323      	orrs	r3, r4
 8006484:	4081      	lsls	r1, r0
 8006486:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800648a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800648e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006492:	07d2      	lsls	r2, r2, #31
 8006494:	bf5c      	itt	pl
 8006496:	005b      	lslpl	r3, r3, #1
 8006498:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800649c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80064a0:	bf58      	it	pl
 80064a2:	0049      	lslpl	r1, r1, #1
 80064a4:	2600      	movs	r6, #0
 80064a6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80064aa:	107f      	asrs	r7, r7, #1
 80064ac:	0049      	lsls	r1, r1, #1
 80064ae:	2016      	movs	r0, #22
 80064b0:	4632      	mov	r2, r6
 80064b2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80064b6:	1915      	adds	r5, r2, r4
 80064b8:	429d      	cmp	r5, r3
 80064ba:	bfde      	ittt	le
 80064bc:	192a      	addle	r2, r5, r4
 80064be:	1b5b      	suble	r3, r3, r5
 80064c0:	1936      	addle	r6, r6, r4
 80064c2:	0fcd      	lsrs	r5, r1, #31
 80064c4:	3801      	subs	r0, #1
 80064c6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80064ca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80064ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80064d2:	d1f0      	bne.n	80064b6 <__ieee754_sqrt+0xb6>
 80064d4:	4605      	mov	r5, r0
 80064d6:	2420      	movs	r4, #32
 80064d8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80064dc:	4293      	cmp	r3, r2
 80064de:	eb0c 0e00 	add.w	lr, ip, r0
 80064e2:	dc02      	bgt.n	80064ea <__ieee754_sqrt+0xea>
 80064e4:	d113      	bne.n	800650e <__ieee754_sqrt+0x10e>
 80064e6:	458e      	cmp	lr, r1
 80064e8:	d811      	bhi.n	800650e <__ieee754_sqrt+0x10e>
 80064ea:	f1be 0f00 	cmp.w	lr, #0
 80064ee:	eb0e 000c 	add.w	r0, lr, ip
 80064f2:	da3f      	bge.n	8006574 <__ieee754_sqrt+0x174>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	db3d      	blt.n	8006574 <__ieee754_sqrt+0x174>
 80064f8:	f102 0801 	add.w	r8, r2, #1
 80064fc:	1a9b      	subs	r3, r3, r2
 80064fe:	458e      	cmp	lr, r1
 8006500:	bf88      	it	hi
 8006502:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006506:	eba1 010e 	sub.w	r1, r1, lr
 800650a:	4465      	add	r5, ip
 800650c:	4642      	mov	r2, r8
 800650e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006512:	3c01      	subs	r4, #1
 8006514:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006518:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800651c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006520:	d1dc      	bne.n	80064dc <__ieee754_sqrt+0xdc>
 8006522:	4319      	orrs	r1, r3
 8006524:	d01b      	beq.n	800655e <__ieee754_sqrt+0x15e>
 8006526:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80065a4 <__ieee754_sqrt+0x1a4>
 800652a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80065a8 <__ieee754_sqrt+0x1a8>
 800652e:	e9da 0100 	ldrd	r0, r1, [sl]
 8006532:	e9db 2300 	ldrd	r2, r3, [fp]
 8006536:	f7f9 febf 	bl	80002b8 <__aeabi_dsub>
 800653a:	e9da 8900 	ldrd	r8, r9, [sl]
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	4640      	mov	r0, r8
 8006544:	4649      	mov	r1, r9
 8006546:	f7fa faeb 	bl	8000b20 <__aeabi_dcmple>
 800654a:	b140      	cbz	r0, 800655e <__ieee754_sqrt+0x15e>
 800654c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006550:	e9da 0100 	ldrd	r0, r1, [sl]
 8006554:	e9db 2300 	ldrd	r2, r3, [fp]
 8006558:	d10e      	bne.n	8006578 <__ieee754_sqrt+0x178>
 800655a:	3601      	adds	r6, #1
 800655c:	4625      	mov	r5, r4
 800655e:	1073      	asrs	r3, r6, #1
 8006560:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8006564:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8006568:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800656c:	086b      	lsrs	r3, r5, #1
 800656e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8006572:	e759      	b.n	8006428 <__ieee754_sqrt+0x28>
 8006574:	4690      	mov	r8, r2
 8006576:	e7c1      	b.n	80064fc <__ieee754_sqrt+0xfc>
 8006578:	f7f9 fea0 	bl	80002bc <__adddf3>
 800657c:	e9da 8900 	ldrd	r8, r9, [sl]
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4640      	mov	r0, r8
 8006586:	4649      	mov	r1, r9
 8006588:	f7fa fac0 	bl	8000b0c <__aeabi_dcmplt>
 800658c:	b120      	cbz	r0, 8006598 <__ieee754_sqrt+0x198>
 800658e:	1cab      	adds	r3, r5, #2
 8006590:	bf08      	it	eq
 8006592:	3601      	addeq	r6, #1
 8006594:	3502      	adds	r5, #2
 8006596:	e7e2      	b.n	800655e <__ieee754_sqrt+0x15e>
 8006598:	1c6b      	adds	r3, r5, #1
 800659a:	f023 0501 	bic.w	r5, r3, #1
 800659e:	e7de      	b.n	800655e <__ieee754_sqrt+0x15e>
 80065a0:	7ff00000 	.word	0x7ff00000
 80065a4:	0800aea0 	.word	0x0800aea0
 80065a8:	0800ae98 	.word	0x0800ae98

080065ac <malloc>:
 80065ac:	4b02      	ldr	r3, [pc, #8]	@ (80065b8 <malloc+0xc>)
 80065ae:	4601      	mov	r1, r0
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	f000 b82d 	b.w	8006610 <_malloc_r>
 80065b6:	bf00      	nop
 80065b8:	200400c0 	.word	0x200400c0

080065bc <free>:
 80065bc:	4b02      	ldr	r3, [pc, #8]	@ (80065c8 <free+0xc>)
 80065be:	4601      	mov	r1, r0
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	f001 bfc9 	b.w	8008558 <_free_r>
 80065c6:	bf00      	nop
 80065c8:	200400c0 	.word	0x200400c0

080065cc <sbrk_aligned>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	4e0f      	ldr	r6, [pc, #60]	@ (800660c <sbrk_aligned+0x40>)
 80065d0:	460c      	mov	r4, r1
 80065d2:	6831      	ldr	r1, [r6, #0]
 80065d4:	4605      	mov	r5, r0
 80065d6:	b911      	cbnz	r1, 80065de <sbrk_aligned+0x12>
 80065d8:	f001 f8f0 	bl	80077bc <_sbrk_r>
 80065dc:	6030      	str	r0, [r6, #0]
 80065de:	4621      	mov	r1, r4
 80065e0:	4628      	mov	r0, r5
 80065e2:	f001 f8eb 	bl	80077bc <_sbrk_r>
 80065e6:	1c43      	adds	r3, r0, #1
 80065e8:	d103      	bne.n	80065f2 <sbrk_aligned+0x26>
 80065ea:	f04f 34ff 	mov.w	r4, #4294967295
 80065ee:	4620      	mov	r0, r4
 80065f0:	bd70      	pop	{r4, r5, r6, pc}
 80065f2:	1cc4      	adds	r4, r0, #3
 80065f4:	f024 0403 	bic.w	r4, r4, #3
 80065f8:	42a0      	cmp	r0, r4
 80065fa:	d0f8      	beq.n	80065ee <sbrk_aligned+0x22>
 80065fc:	1a21      	subs	r1, r4, r0
 80065fe:	4628      	mov	r0, r5
 8006600:	f001 f8dc 	bl	80077bc <_sbrk_r>
 8006604:	3001      	adds	r0, #1
 8006606:	d1f2      	bne.n	80065ee <sbrk_aligned+0x22>
 8006608:	e7ef      	b.n	80065ea <sbrk_aligned+0x1e>
 800660a:	bf00      	nop
 800660c:	20040cf0 	.word	0x20040cf0

08006610 <_malloc_r>:
 8006610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006614:	1ccd      	adds	r5, r1, #3
 8006616:	f025 0503 	bic.w	r5, r5, #3
 800661a:	3508      	adds	r5, #8
 800661c:	2d0c      	cmp	r5, #12
 800661e:	bf38      	it	cc
 8006620:	250c      	movcc	r5, #12
 8006622:	2d00      	cmp	r5, #0
 8006624:	4606      	mov	r6, r0
 8006626:	db01      	blt.n	800662c <_malloc_r+0x1c>
 8006628:	42a9      	cmp	r1, r5
 800662a:	d904      	bls.n	8006636 <_malloc_r+0x26>
 800662c:	230c      	movs	r3, #12
 800662e:	6033      	str	r3, [r6, #0]
 8006630:	2000      	movs	r0, #0
 8006632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006636:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800670c <_malloc_r+0xfc>
 800663a:	f000 f869 	bl	8006710 <__malloc_lock>
 800663e:	f8d8 3000 	ldr.w	r3, [r8]
 8006642:	461c      	mov	r4, r3
 8006644:	bb44      	cbnz	r4, 8006698 <_malloc_r+0x88>
 8006646:	4629      	mov	r1, r5
 8006648:	4630      	mov	r0, r6
 800664a:	f7ff ffbf 	bl	80065cc <sbrk_aligned>
 800664e:	1c43      	adds	r3, r0, #1
 8006650:	4604      	mov	r4, r0
 8006652:	d158      	bne.n	8006706 <_malloc_r+0xf6>
 8006654:	f8d8 4000 	ldr.w	r4, [r8]
 8006658:	4627      	mov	r7, r4
 800665a:	2f00      	cmp	r7, #0
 800665c:	d143      	bne.n	80066e6 <_malloc_r+0xd6>
 800665e:	2c00      	cmp	r4, #0
 8006660:	d04b      	beq.n	80066fa <_malloc_r+0xea>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	4639      	mov	r1, r7
 8006666:	4630      	mov	r0, r6
 8006668:	eb04 0903 	add.w	r9, r4, r3
 800666c:	f001 f8a6 	bl	80077bc <_sbrk_r>
 8006670:	4581      	cmp	r9, r0
 8006672:	d142      	bne.n	80066fa <_malloc_r+0xea>
 8006674:	6821      	ldr	r1, [r4, #0]
 8006676:	1a6d      	subs	r5, r5, r1
 8006678:	4629      	mov	r1, r5
 800667a:	4630      	mov	r0, r6
 800667c:	f7ff ffa6 	bl	80065cc <sbrk_aligned>
 8006680:	3001      	adds	r0, #1
 8006682:	d03a      	beq.n	80066fa <_malloc_r+0xea>
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	442b      	add	r3, r5
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	f8d8 3000 	ldr.w	r3, [r8]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	bb62      	cbnz	r2, 80066ec <_malloc_r+0xdc>
 8006692:	f8c8 7000 	str.w	r7, [r8]
 8006696:	e00f      	b.n	80066b8 <_malloc_r+0xa8>
 8006698:	6822      	ldr	r2, [r4, #0]
 800669a:	1b52      	subs	r2, r2, r5
 800669c:	d420      	bmi.n	80066e0 <_malloc_r+0xd0>
 800669e:	2a0b      	cmp	r2, #11
 80066a0:	d917      	bls.n	80066d2 <_malloc_r+0xc2>
 80066a2:	1961      	adds	r1, r4, r5
 80066a4:	42a3      	cmp	r3, r4
 80066a6:	6025      	str	r5, [r4, #0]
 80066a8:	bf18      	it	ne
 80066aa:	6059      	strne	r1, [r3, #4]
 80066ac:	6863      	ldr	r3, [r4, #4]
 80066ae:	bf08      	it	eq
 80066b0:	f8c8 1000 	streq.w	r1, [r8]
 80066b4:	5162      	str	r2, [r4, r5]
 80066b6:	604b      	str	r3, [r1, #4]
 80066b8:	4630      	mov	r0, r6
 80066ba:	f000 f82f 	bl	800671c <__malloc_unlock>
 80066be:	f104 000b 	add.w	r0, r4, #11
 80066c2:	1d23      	adds	r3, r4, #4
 80066c4:	f020 0007 	bic.w	r0, r0, #7
 80066c8:	1ac2      	subs	r2, r0, r3
 80066ca:	bf1c      	itt	ne
 80066cc:	1a1b      	subne	r3, r3, r0
 80066ce:	50a3      	strne	r3, [r4, r2]
 80066d0:	e7af      	b.n	8006632 <_malloc_r+0x22>
 80066d2:	6862      	ldr	r2, [r4, #4]
 80066d4:	42a3      	cmp	r3, r4
 80066d6:	bf0c      	ite	eq
 80066d8:	f8c8 2000 	streq.w	r2, [r8]
 80066dc:	605a      	strne	r2, [r3, #4]
 80066de:	e7eb      	b.n	80066b8 <_malloc_r+0xa8>
 80066e0:	4623      	mov	r3, r4
 80066e2:	6864      	ldr	r4, [r4, #4]
 80066e4:	e7ae      	b.n	8006644 <_malloc_r+0x34>
 80066e6:	463c      	mov	r4, r7
 80066e8:	687f      	ldr	r7, [r7, #4]
 80066ea:	e7b6      	b.n	800665a <_malloc_r+0x4a>
 80066ec:	461a      	mov	r2, r3
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	d1fb      	bne.n	80066ec <_malloc_r+0xdc>
 80066f4:	2300      	movs	r3, #0
 80066f6:	6053      	str	r3, [r2, #4]
 80066f8:	e7de      	b.n	80066b8 <_malloc_r+0xa8>
 80066fa:	230c      	movs	r3, #12
 80066fc:	6033      	str	r3, [r6, #0]
 80066fe:	4630      	mov	r0, r6
 8006700:	f000 f80c 	bl	800671c <__malloc_unlock>
 8006704:	e794      	b.n	8006630 <_malloc_r+0x20>
 8006706:	6005      	str	r5, [r0, #0]
 8006708:	e7d6      	b.n	80066b8 <_malloc_r+0xa8>
 800670a:	bf00      	nop
 800670c:	20040cf4 	.word	0x20040cf4

08006710 <__malloc_lock>:
 8006710:	4801      	ldr	r0, [pc, #4]	@ (8006718 <__malloc_lock+0x8>)
 8006712:	f001 b8a0 	b.w	8007856 <__retarget_lock_acquire_recursive>
 8006716:	bf00      	nop
 8006718:	20040e38 	.word	0x20040e38

0800671c <__malloc_unlock>:
 800671c:	4801      	ldr	r0, [pc, #4]	@ (8006724 <__malloc_unlock+0x8>)
 800671e:	f001 b89b 	b.w	8007858 <__retarget_lock_release_recursive>
 8006722:	bf00      	nop
 8006724:	20040e38 	.word	0x20040e38

08006728 <srand>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4b10      	ldr	r3, [pc, #64]	@ (800676c <srand+0x44>)
 800672c:	681d      	ldr	r5, [r3, #0]
 800672e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006730:	4604      	mov	r4, r0
 8006732:	b9b3      	cbnz	r3, 8006762 <srand+0x3a>
 8006734:	2018      	movs	r0, #24
 8006736:	f7ff ff39 	bl	80065ac <malloc>
 800673a:	4602      	mov	r2, r0
 800673c:	6328      	str	r0, [r5, #48]	@ 0x30
 800673e:	b920      	cbnz	r0, 800674a <srand+0x22>
 8006740:	4b0b      	ldr	r3, [pc, #44]	@ (8006770 <srand+0x48>)
 8006742:	480c      	ldr	r0, [pc, #48]	@ (8006774 <srand+0x4c>)
 8006744:	2146      	movs	r1, #70	@ 0x46
 8006746:	f001 f88f 	bl	8007868 <__assert_func>
 800674a:	490b      	ldr	r1, [pc, #44]	@ (8006778 <srand+0x50>)
 800674c:	4b0b      	ldr	r3, [pc, #44]	@ (800677c <srand+0x54>)
 800674e:	e9c0 1300 	strd	r1, r3, [r0]
 8006752:	4b0b      	ldr	r3, [pc, #44]	@ (8006780 <srand+0x58>)
 8006754:	6083      	str	r3, [r0, #8]
 8006756:	230b      	movs	r3, #11
 8006758:	8183      	strh	r3, [r0, #12]
 800675a:	2100      	movs	r1, #0
 800675c:	2001      	movs	r0, #1
 800675e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006762:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006764:	2200      	movs	r2, #0
 8006766:	611c      	str	r4, [r3, #16]
 8006768:	615a      	str	r2, [r3, #20]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	200400c0 	.word	0x200400c0
 8006770:	0800aea8 	.word	0x0800aea8
 8006774:	0800aebf 	.word	0x0800aebf
 8006778:	abcd330e 	.word	0xabcd330e
 800677c:	e66d1234 	.word	0xe66d1234
 8006780:	0005deec 	.word	0x0005deec

08006784 <rand>:
 8006784:	4b16      	ldr	r3, [pc, #88]	@ (80067e0 <rand+0x5c>)
 8006786:	b510      	push	{r4, lr}
 8006788:	681c      	ldr	r4, [r3, #0]
 800678a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800678c:	b9b3      	cbnz	r3, 80067bc <rand+0x38>
 800678e:	2018      	movs	r0, #24
 8006790:	f7ff ff0c 	bl	80065ac <malloc>
 8006794:	4602      	mov	r2, r0
 8006796:	6320      	str	r0, [r4, #48]	@ 0x30
 8006798:	b920      	cbnz	r0, 80067a4 <rand+0x20>
 800679a:	4b12      	ldr	r3, [pc, #72]	@ (80067e4 <rand+0x60>)
 800679c:	4812      	ldr	r0, [pc, #72]	@ (80067e8 <rand+0x64>)
 800679e:	2152      	movs	r1, #82	@ 0x52
 80067a0:	f001 f862 	bl	8007868 <__assert_func>
 80067a4:	4911      	ldr	r1, [pc, #68]	@ (80067ec <rand+0x68>)
 80067a6:	4b12      	ldr	r3, [pc, #72]	@ (80067f0 <rand+0x6c>)
 80067a8:	e9c0 1300 	strd	r1, r3, [r0]
 80067ac:	4b11      	ldr	r3, [pc, #68]	@ (80067f4 <rand+0x70>)
 80067ae:	6083      	str	r3, [r0, #8]
 80067b0:	230b      	movs	r3, #11
 80067b2:	8183      	strh	r3, [r0, #12]
 80067b4:	2100      	movs	r1, #0
 80067b6:	2001      	movs	r0, #1
 80067b8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80067bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80067be:	480e      	ldr	r0, [pc, #56]	@ (80067f8 <rand+0x74>)
 80067c0:	690b      	ldr	r3, [r1, #16]
 80067c2:	694c      	ldr	r4, [r1, #20]
 80067c4:	4a0d      	ldr	r2, [pc, #52]	@ (80067fc <rand+0x78>)
 80067c6:	4358      	muls	r0, r3
 80067c8:	fb02 0004 	mla	r0, r2, r4, r0
 80067cc:	fba3 3202 	umull	r3, r2, r3, r2
 80067d0:	3301      	adds	r3, #1
 80067d2:	eb40 0002 	adc.w	r0, r0, r2
 80067d6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80067da:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80067de:	bd10      	pop	{r4, pc}
 80067e0:	200400c0 	.word	0x200400c0
 80067e4:	0800aea8 	.word	0x0800aea8
 80067e8:	0800aebf 	.word	0x0800aebf
 80067ec:	abcd330e 	.word	0xabcd330e
 80067f0:	e66d1234 	.word	0xe66d1234
 80067f4:	0005deec 	.word	0x0005deec
 80067f8:	5851f42d 	.word	0x5851f42d
 80067fc:	4c957f2d 	.word	0x4c957f2d

08006800 <__cvt>:
 8006800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006804:	ec57 6b10 	vmov	r6, r7, d0
 8006808:	2f00      	cmp	r7, #0
 800680a:	460c      	mov	r4, r1
 800680c:	4619      	mov	r1, r3
 800680e:	463b      	mov	r3, r7
 8006810:	bfbb      	ittet	lt
 8006812:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006816:	461f      	movlt	r7, r3
 8006818:	2300      	movge	r3, #0
 800681a:	232d      	movlt	r3, #45	@ 0x2d
 800681c:	700b      	strb	r3, [r1, #0]
 800681e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006820:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006824:	4691      	mov	r9, r2
 8006826:	f023 0820 	bic.w	r8, r3, #32
 800682a:	bfbc      	itt	lt
 800682c:	4632      	movlt	r2, r6
 800682e:	4616      	movlt	r6, r2
 8006830:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006834:	d005      	beq.n	8006842 <__cvt+0x42>
 8006836:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800683a:	d100      	bne.n	800683e <__cvt+0x3e>
 800683c:	3401      	adds	r4, #1
 800683e:	2102      	movs	r1, #2
 8006840:	e000      	b.n	8006844 <__cvt+0x44>
 8006842:	2103      	movs	r1, #3
 8006844:	ab03      	add	r3, sp, #12
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	ab02      	add	r3, sp, #8
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	ec47 6b10 	vmov	d0, r6, r7
 8006850:	4653      	mov	r3, sl
 8006852:	4622      	mov	r2, r4
 8006854:	f001 f8b0 	bl	80079b8 <_dtoa_r>
 8006858:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800685c:	4605      	mov	r5, r0
 800685e:	d119      	bne.n	8006894 <__cvt+0x94>
 8006860:	f019 0f01 	tst.w	r9, #1
 8006864:	d00e      	beq.n	8006884 <__cvt+0x84>
 8006866:	eb00 0904 	add.w	r9, r0, r4
 800686a:	2200      	movs	r2, #0
 800686c:	2300      	movs	r3, #0
 800686e:	4630      	mov	r0, r6
 8006870:	4639      	mov	r1, r7
 8006872:	f7fa f941 	bl	8000af8 <__aeabi_dcmpeq>
 8006876:	b108      	cbz	r0, 800687c <__cvt+0x7c>
 8006878:	f8cd 900c 	str.w	r9, [sp, #12]
 800687c:	2230      	movs	r2, #48	@ 0x30
 800687e:	9b03      	ldr	r3, [sp, #12]
 8006880:	454b      	cmp	r3, r9
 8006882:	d31e      	bcc.n	80068c2 <__cvt+0xc2>
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006888:	1b5b      	subs	r3, r3, r5
 800688a:	4628      	mov	r0, r5
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	b004      	add	sp, #16
 8006890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006894:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006898:	eb00 0904 	add.w	r9, r0, r4
 800689c:	d1e5      	bne.n	800686a <__cvt+0x6a>
 800689e:	7803      	ldrb	r3, [r0, #0]
 80068a0:	2b30      	cmp	r3, #48	@ 0x30
 80068a2:	d10a      	bne.n	80068ba <__cvt+0xba>
 80068a4:	2200      	movs	r2, #0
 80068a6:	2300      	movs	r3, #0
 80068a8:	4630      	mov	r0, r6
 80068aa:	4639      	mov	r1, r7
 80068ac:	f7fa f924 	bl	8000af8 <__aeabi_dcmpeq>
 80068b0:	b918      	cbnz	r0, 80068ba <__cvt+0xba>
 80068b2:	f1c4 0401 	rsb	r4, r4, #1
 80068b6:	f8ca 4000 	str.w	r4, [sl]
 80068ba:	f8da 3000 	ldr.w	r3, [sl]
 80068be:	4499      	add	r9, r3
 80068c0:	e7d3      	b.n	800686a <__cvt+0x6a>
 80068c2:	1c59      	adds	r1, r3, #1
 80068c4:	9103      	str	r1, [sp, #12]
 80068c6:	701a      	strb	r2, [r3, #0]
 80068c8:	e7d9      	b.n	800687e <__cvt+0x7e>

080068ca <__exponent>:
 80068ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068cc:	2900      	cmp	r1, #0
 80068ce:	bfba      	itte	lt
 80068d0:	4249      	neglt	r1, r1
 80068d2:	232d      	movlt	r3, #45	@ 0x2d
 80068d4:	232b      	movge	r3, #43	@ 0x2b
 80068d6:	2909      	cmp	r1, #9
 80068d8:	7002      	strb	r2, [r0, #0]
 80068da:	7043      	strb	r3, [r0, #1]
 80068dc:	dd29      	ble.n	8006932 <__exponent+0x68>
 80068de:	f10d 0307 	add.w	r3, sp, #7
 80068e2:	461d      	mov	r5, r3
 80068e4:	270a      	movs	r7, #10
 80068e6:	461a      	mov	r2, r3
 80068e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80068ec:	fb07 1416 	mls	r4, r7, r6, r1
 80068f0:	3430      	adds	r4, #48	@ 0x30
 80068f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80068f6:	460c      	mov	r4, r1
 80068f8:	2c63      	cmp	r4, #99	@ 0x63
 80068fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80068fe:	4631      	mov	r1, r6
 8006900:	dcf1      	bgt.n	80068e6 <__exponent+0x1c>
 8006902:	3130      	adds	r1, #48	@ 0x30
 8006904:	1e94      	subs	r4, r2, #2
 8006906:	f803 1c01 	strb.w	r1, [r3, #-1]
 800690a:	1c41      	adds	r1, r0, #1
 800690c:	4623      	mov	r3, r4
 800690e:	42ab      	cmp	r3, r5
 8006910:	d30a      	bcc.n	8006928 <__exponent+0x5e>
 8006912:	f10d 0309 	add.w	r3, sp, #9
 8006916:	1a9b      	subs	r3, r3, r2
 8006918:	42ac      	cmp	r4, r5
 800691a:	bf88      	it	hi
 800691c:	2300      	movhi	r3, #0
 800691e:	3302      	adds	r3, #2
 8006920:	4403      	add	r3, r0
 8006922:	1a18      	subs	r0, r3, r0
 8006924:	b003      	add	sp, #12
 8006926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006928:	f813 6b01 	ldrb.w	r6, [r3], #1
 800692c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006930:	e7ed      	b.n	800690e <__exponent+0x44>
 8006932:	2330      	movs	r3, #48	@ 0x30
 8006934:	3130      	adds	r1, #48	@ 0x30
 8006936:	7083      	strb	r3, [r0, #2]
 8006938:	70c1      	strb	r1, [r0, #3]
 800693a:	1d03      	adds	r3, r0, #4
 800693c:	e7f1      	b.n	8006922 <__exponent+0x58>
	...

08006940 <_printf_float>:
 8006940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006944:	b08d      	sub	sp, #52	@ 0x34
 8006946:	460c      	mov	r4, r1
 8006948:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800694c:	4616      	mov	r6, r2
 800694e:	461f      	mov	r7, r3
 8006950:	4605      	mov	r5, r0
 8006952:	f000 fefb 	bl	800774c <_localeconv_r>
 8006956:	6803      	ldr	r3, [r0, #0]
 8006958:	9304      	str	r3, [sp, #16]
 800695a:	4618      	mov	r0, r3
 800695c:	f7f9 fca0 	bl	80002a0 <strlen>
 8006960:	2300      	movs	r3, #0
 8006962:	930a      	str	r3, [sp, #40]	@ 0x28
 8006964:	f8d8 3000 	ldr.w	r3, [r8]
 8006968:	9005      	str	r0, [sp, #20]
 800696a:	3307      	adds	r3, #7
 800696c:	f023 0307 	bic.w	r3, r3, #7
 8006970:	f103 0208 	add.w	r2, r3, #8
 8006974:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006978:	f8d4 b000 	ldr.w	fp, [r4]
 800697c:	f8c8 2000 	str.w	r2, [r8]
 8006980:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006984:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006988:	9307      	str	r3, [sp, #28]
 800698a:	f8cd 8018 	str.w	r8, [sp, #24]
 800698e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006992:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006996:	4b9c      	ldr	r3, [pc, #624]	@ (8006c08 <_printf_float+0x2c8>)
 8006998:	f04f 32ff 	mov.w	r2, #4294967295
 800699c:	f7fa f8de 	bl	8000b5c <__aeabi_dcmpun>
 80069a0:	bb70      	cbnz	r0, 8006a00 <_printf_float+0xc0>
 80069a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069a6:	4b98      	ldr	r3, [pc, #608]	@ (8006c08 <_printf_float+0x2c8>)
 80069a8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ac:	f7fa f8b8 	bl	8000b20 <__aeabi_dcmple>
 80069b0:	bb30      	cbnz	r0, 8006a00 <_printf_float+0xc0>
 80069b2:	2200      	movs	r2, #0
 80069b4:	2300      	movs	r3, #0
 80069b6:	4640      	mov	r0, r8
 80069b8:	4649      	mov	r1, r9
 80069ba:	f7fa f8a7 	bl	8000b0c <__aeabi_dcmplt>
 80069be:	b110      	cbz	r0, 80069c6 <_printf_float+0x86>
 80069c0:	232d      	movs	r3, #45	@ 0x2d
 80069c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069c6:	4a91      	ldr	r2, [pc, #580]	@ (8006c0c <_printf_float+0x2cc>)
 80069c8:	4b91      	ldr	r3, [pc, #580]	@ (8006c10 <_printf_float+0x2d0>)
 80069ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80069ce:	bf8c      	ite	hi
 80069d0:	4690      	movhi	r8, r2
 80069d2:	4698      	movls	r8, r3
 80069d4:	2303      	movs	r3, #3
 80069d6:	6123      	str	r3, [r4, #16]
 80069d8:	f02b 0304 	bic.w	r3, fp, #4
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	f04f 0900 	mov.w	r9, #0
 80069e2:	9700      	str	r7, [sp, #0]
 80069e4:	4633      	mov	r3, r6
 80069e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80069e8:	4621      	mov	r1, r4
 80069ea:	4628      	mov	r0, r5
 80069ec:	f000 f9d2 	bl	8006d94 <_printf_common>
 80069f0:	3001      	adds	r0, #1
 80069f2:	f040 808d 	bne.w	8006b10 <_printf_float+0x1d0>
 80069f6:	f04f 30ff 	mov.w	r0, #4294967295
 80069fa:	b00d      	add	sp, #52	@ 0x34
 80069fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a00:	4642      	mov	r2, r8
 8006a02:	464b      	mov	r3, r9
 8006a04:	4640      	mov	r0, r8
 8006a06:	4649      	mov	r1, r9
 8006a08:	f7fa f8a8 	bl	8000b5c <__aeabi_dcmpun>
 8006a0c:	b140      	cbz	r0, 8006a20 <_printf_float+0xe0>
 8006a0e:	464b      	mov	r3, r9
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bfbc      	itt	lt
 8006a14:	232d      	movlt	r3, #45	@ 0x2d
 8006a16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8006c14 <_printf_float+0x2d4>)
 8006a1c:	4b7e      	ldr	r3, [pc, #504]	@ (8006c18 <_printf_float+0x2d8>)
 8006a1e:	e7d4      	b.n	80069ca <_printf_float+0x8a>
 8006a20:	6863      	ldr	r3, [r4, #4]
 8006a22:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006a26:	9206      	str	r2, [sp, #24]
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	d13b      	bne.n	8006aa4 <_printf_float+0x164>
 8006a2c:	2306      	movs	r3, #6
 8006a2e:	6063      	str	r3, [r4, #4]
 8006a30:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006a34:	2300      	movs	r3, #0
 8006a36:	6022      	str	r2, [r4, #0]
 8006a38:	9303      	str	r3, [sp, #12]
 8006a3a:	ab0a      	add	r3, sp, #40	@ 0x28
 8006a3c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006a40:	ab09      	add	r3, sp, #36	@ 0x24
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	6861      	ldr	r1, [r4, #4]
 8006a46:	ec49 8b10 	vmov	d0, r8, r9
 8006a4a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f7ff fed6 	bl	8006800 <__cvt>
 8006a54:	9b06      	ldr	r3, [sp, #24]
 8006a56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a58:	2b47      	cmp	r3, #71	@ 0x47
 8006a5a:	4680      	mov	r8, r0
 8006a5c:	d129      	bne.n	8006ab2 <_printf_float+0x172>
 8006a5e:	1cc8      	adds	r0, r1, #3
 8006a60:	db02      	blt.n	8006a68 <_printf_float+0x128>
 8006a62:	6863      	ldr	r3, [r4, #4]
 8006a64:	4299      	cmp	r1, r3
 8006a66:	dd41      	ble.n	8006aec <_printf_float+0x1ac>
 8006a68:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a6c:	fa5f fa8a 	uxtb.w	sl, sl
 8006a70:	3901      	subs	r1, #1
 8006a72:	4652      	mov	r2, sl
 8006a74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a78:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a7a:	f7ff ff26 	bl	80068ca <__exponent>
 8006a7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a80:	1813      	adds	r3, r2, r0
 8006a82:	2a01      	cmp	r2, #1
 8006a84:	4681      	mov	r9, r0
 8006a86:	6123      	str	r3, [r4, #16]
 8006a88:	dc02      	bgt.n	8006a90 <_printf_float+0x150>
 8006a8a:	6822      	ldr	r2, [r4, #0]
 8006a8c:	07d2      	lsls	r2, r2, #31
 8006a8e:	d501      	bpl.n	8006a94 <_printf_float+0x154>
 8006a90:	3301      	adds	r3, #1
 8006a92:	6123      	str	r3, [r4, #16]
 8006a94:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0a2      	beq.n	80069e2 <_printf_float+0xa2>
 8006a9c:	232d      	movs	r3, #45	@ 0x2d
 8006a9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006aa2:	e79e      	b.n	80069e2 <_printf_float+0xa2>
 8006aa4:	9a06      	ldr	r2, [sp, #24]
 8006aa6:	2a47      	cmp	r2, #71	@ 0x47
 8006aa8:	d1c2      	bne.n	8006a30 <_printf_float+0xf0>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1c0      	bne.n	8006a30 <_printf_float+0xf0>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e7bd      	b.n	8006a2e <_printf_float+0xee>
 8006ab2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ab6:	d9db      	bls.n	8006a70 <_printf_float+0x130>
 8006ab8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006abc:	d118      	bne.n	8006af0 <_printf_float+0x1b0>
 8006abe:	2900      	cmp	r1, #0
 8006ac0:	6863      	ldr	r3, [r4, #4]
 8006ac2:	dd0b      	ble.n	8006adc <_printf_float+0x19c>
 8006ac4:	6121      	str	r1, [r4, #16]
 8006ac6:	b913      	cbnz	r3, 8006ace <_printf_float+0x18e>
 8006ac8:	6822      	ldr	r2, [r4, #0]
 8006aca:	07d0      	lsls	r0, r2, #31
 8006acc:	d502      	bpl.n	8006ad4 <_printf_float+0x194>
 8006ace:	3301      	adds	r3, #1
 8006ad0:	440b      	add	r3, r1
 8006ad2:	6123      	str	r3, [r4, #16]
 8006ad4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006ad6:	f04f 0900 	mov.w	r9, #0
 8006ada:	e7db      	b.n	8006a94 <_printf_float+0x154>
 8006adc:	b913      	cbnz	r3, 8006ae4 <_printf_float+0x1a4>
 8006ade:	6822      	ldr	r2, [r4, #0]
 8006ae0:	07d2      	lsls	r2, r2, #31
 8006ae2:	d501      	bpl.n	8006ae8 <_printf_float+0x1a8>
 8006ae4:	3302      	adds	r3, #2
 8006ae6:	e7f4      	b.n	8006ad2 <_printf_float+0x192>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e7f2      	b.n	8006ad2 <_printf_float+0x192>
 8006aec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006af0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006af2:	4299      	cmp	r1, r3
 8006af4:	db05      	blt.n	8006b02 <_printf_float+0x1c2>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	6121      	str	r1, [r4, #16]
 8006afa:	07d8      	lsls	r0, r3, #31
 8006afc:	d5ea      	bpl.n	8006ad4 <_printf_float+0x194>
 8006afe:	1c4b      	adds	r3, r1, #1
 8006b00:	e7e7      	b.n	8006ad2 <_printf_float+0x192>
 8006b02:	2900      	cmp	r1, #0
 8006b04:	bfd4      	ite	le
 8006b06:	f1c1 0202 	rsble	r2, r1, #2
 8006b0a:	2201      	movgt	r2, #1
 8006b0c:	4413      	add	r3, r2
 8006b0e:	e7e0      	b.n	8006ad2 <_printf_float+0x192>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	055a      	lsls	r2, r3, #21
 8006b14:	d407      	bmi.n	8006b26 <_printf_float+0x1e6>
 8006b16:	6923      	ldr	r3, [r4, #16]
 8006b18:	4642      	mov	r2, r8
 8006b1a:	4631      	mov	r1, r6
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	47b8      	blx	r7
 8006b20:	3001      	adds	r0, #1
 8006b22:	d12b      	bne.n	8006b7c <_printf_float+0x23c>
 8006b24:	e767      	b.n	80069f6 <_printf_float+0xb6>
 8006b26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b2a:	f240 80dd 	bls.w	8006ce8 <_printf_float+0x3a8>
 8006b2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b32:	2200      	movs	r2, #0
 8006b34:	2300      	movs	r3, #0
 8006b36:	f7f9 ffdf 	bl	8000af8 <__aeabi_dcmpeq>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d033      	beq.n	8006ba6 <_printf_float+0x266>
 8006b3e:	4a37      	ldr	r2, [pc, #220]	@ (8006c1c <_printf_float+0x2dc>)
 8006b40:	2301      	movs	r3, #1
 8006b42:	4631      	mov	r1, r6
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b8      	blx	r7
 8006b48:	3001      	adds	r0, #1
 8006b4a:	f43f af54 	beq.w	80069f6 <_printf_float+0xb6>
 8006b4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006b52:	4543      	cmp	r3, r8
 8006b54:	db02      	blt.n	8006b5c <_printf_float+0x21c>
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	07d8      	lsls	r0, r3, #31
 8006b5a:	d50f      	bpl.n	8006b7c <_printf_float+0x23c>
 8006b5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b60:	4631      	mov	r1, r6
 8006b62:	4628      	mov	r0, r5
 8006b64:	47b8      	blx	r7
 8006b66:	3001      	adds	r0, #1
 8006b68:	f43f af45 	beq.w	80069f6 <_printf_float+0xb6>
 8006b6c:	f04f 0900 	mov.w	r9, #0
 8006b70:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b74:	f104 0a1a 	add.w	sl, r4, #26
 8006b78:	45c8      	cmp	r8, r9
 8006b7a:	dc09      	bgt.n	8006b90 <_printf_float+0x250>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	079b      	lsls	r3, r3, #30
 8006b80:	f100 8103 	bmi.w	8006d8a <_printf_float+0x44a>
 8006b84:	68e0      	ldr	r0, [r4, #12]
 8006b86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b88:	4298      	cmp	r0, r3
 8006b8a:	bfb8      	it	lt
 8006b8c:	4618      	movlt	r0, r3
 8006b8e:	e734      	b.n	80069fa <_printf_float+0xba>
 8006b90:	2301      	movs	r3, #1
 8006b92:	4652      	mov	r2, sl
 8006b94:	4631      	mov	r1, r6
 8006b96:	4628      	mov	r0, r5
 8006b98:	47b8      	blx	r7
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	f43f af2b 	beq.w	80069f6 <_printf_float+0xb6>
 8006ba0:	f109 0901 	add.w	r9, r9, #1
 8006ba4:	e7e8      	b.n	8006b78 <_printf_float+0x238>
 8006ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	dc39      	bgt.n	8006c20 <_printf_float+0x2e0>
 8006bac:	4a1b      	ldr	r2, [pc, #108]	@ (8006c1c <_printf_float+0x2dc>)
 8006bae:	2301      	movs	r3, #1
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	47b8      	blx	r7
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	f43f af1d 	beq.w	80069f6 <_printf_float+0xb6>
 8006bbc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006bc0:	ea59 0303 	orrs.w	r3, r9, r3
 8006bc4:	d102      	bne.n	8006bcc <_printf_float+0x28c>
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	07d9      	lsls	r1, r3, #31
 8006bca:	d5d7      	bpl.n	8006b7c <_printf_float+0x23c>
 8006bcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bd0:	4631      	mov	r1, r6
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	47b8      	blx	r7
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	f43f af0d 	beq.w	80069f6 <_printf_float+0xb6>
 8006bdc:	f04f 0a00 	mov.w	sl, #0
 8006be0:	f104 0b1a 	add.w	fp, r4, #26
 8006be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be6:	425b      	negs	r3, r3
 8006be8:	4553      	cmp	r3, sl
 8006bea:	dc01      	bgt.n	8006bf0 <_printf_float+0x2b0>
 8006bec:	464b      	mov	r3, r9
 8006bee:	e793      	b.n	8006b18 <_printf_float+0x1d8>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	465a      	mov	r2, fp
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	47b8      	blx	r7
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	f43f aefb 	beq.w	80069f6 <_printf_float+0xb6>
 8006c00:	f10a 0a01 	add.w	sl, sl, #1
 8006c04:	e7ee      	b.n	8006be4 <_printf_float+0x2a4>
 8006c06:	bf00      	nop
 8006c08:	7fefffff 	.word	0x7fefffff
 8006c0c:	0800af1b 	.word	0x0800af1b
 8006c10:	0800af17 	.word	0x0800af17
 8006c14:	0800af23 	.word	0x0800af23
 8006c18:	0800af1f 	.word	0x0800af1f
 8006c1c:	0800af27 	.word	0x0800af27
 8006c20:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c22:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c26:	4553      	cmp	r3, sl
 8006c28:	bfa8      	it	ge
 8006c2a:	4653      	movge	r3, sl
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	4699      	mov	r9, r3
 8006c30:	dc36      	bgt.n	8006ca0 <_printf_float+0x360>
 8006c32:	f04f 0b00 	mov.w	fp, #0
 8006c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c3a:	f104 021a 	add.w	r2, r4, #26
 8006c3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c40:	9306      	str	r3, [sp, #24]
 8006c42:	eba3 0309 	sub.w	r3, r3, r9
 8006c46:	455b      	cmp	r3, fp
 8006c48:	dc31      	bgt.n	8006cae <_printf_float+0x36e>
 8006c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c4c:	459a      	cmp	sl, r3
 8006c4e:	dc3a      	bgt.n	8006cc6 <_printf_float+0x386>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	07da      	lsls	r2, r3, #31
 8006c54:	d437      	bmi.n	8006cc6 <_printf_float+0x386>
 8006c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c58:	ebaa 0903 	sub.w	r9, sl, r3
 8006c5c:	9b06      	ldr	r3, [sp, #24]
 8006c5e:	ebaa 0303 	sub.w	r3, sl, r3
 8006c62:	4599      	cmp	r9, r3
 8006c64:	bfa8      	it	ge
 8006c66:	4699      	movge	r9, r3
 8006c68:	f1b9 0f00 	cmp.w	r9, #0
 8006c6c:	dc33      	bgt.n	8006cd6 <_printf_float+0x396>
 8006c6e:	f04f 0800 	mov.w	r8, #0
 8006c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c76:	f104 0b1a 	add.w	fp, r4, #26
 8006c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c7c:	ebaa 0303 	sub.w	r3, sl, r3
 8006c80:	eba3 0309 	sub.w	r3, r3, r9
 8006c84:	4543      	cmp	r3, r8
 8006c86:	f77f af79 	ble.w	8006b7c <_printf_float+0x23c>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	465a      	mov	r2, fp
 8006c8e:	4631      	mov	r1, r6
 8006c90:	4628      	mov	r0, r5
 8006c92:	47b8      	blx	r7
 8006c94:	3001      	adds	r0, #1
 8006c96:	f43f aeae 	beq.w	80069f6 <_printf_float+0xb6>
 8006c9a:	f108 0801 	add.w	r8, r8, #1
 8006c9e:	e7ec      	b.n	8006c7a <_printf_float+0x33a>
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	d1c2      	bne.n	8006c32 <_printf_float+0x2f2>
 8006cac:	e6a3      	b.n	80069f6 <_printf_float+0xb6>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4631      	mov	r1, r6
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	9206      	str	r2, [sp, #24]
 8006cb6:	47b8      	blx	r7
 8006cb8:	3001      	adds	r0, #1
 8006cba:	f43f ae9c 	beq.w	80069f6 <_printf_float+0xb6>
 8006cbe:	9a06      	ldr	r2, [sp, #24]
 8006cc0:	f10b 0b01 	add.w	fp, fp, #1
 8006cc4:	e7bb      	b.n	8006c3e <_printf_float+0x2fe>
 8006cc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cca:	4631      	mov	r1, r6
 8006ccc:	4628      	mov	r0, r5
 8006cce:	47b8      	blx	r7
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d1c0      	bne.n	8006c56 <_printf_float+0x316>
 8006cd4:	e68f      	b.n	80069f6 <_printf_float+0xb6>
 8006cd6:	9a06      	ldr	r2, [sp, #24]
 8006cd8:	464b      	mov	r3, r9
 8006cda:	4442      	add	r2, r8
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4628      	mov	r0, r5
 8006ce0:	47b8      	blx	r7
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	d1c3      	bne.n	8006c6e <_printf_float+0x32e>
 8006ce6:	e686      	b.n	80069f6 <_printf_float+0xb6>
 8006ce8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006cec:	f1ba 0f01 	cmp.w	sl, #1
 8006cf0:	dc01      	bgt.n	8006cf6 <_printf_float+0x3b6>
 8006cf2:	07db      	lsls	r3, r3, #31
 8006cf4:	d536      	bpl.n	8006d64 <_printf_float+0x424>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	f43f ae78 	beq.w	80069f6 <_printf_float+0xb6>
 8006d06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	47b8      	blx	r7
 8006d10:	3001      	adds	r0, #1
 8006d12:	f43f ae70 	beq.w	80069f6 <_printf_float+0xb6>
 8006d16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d22:	f7f9 fee9 	bl	8000af8 <__aeabi_dcmpeq>
 8006d26:	b9c0      	cbnz	r0, 8006d5a <_printf_float+0x41a>
 8006d28:	4653      	mov	r3, sl
 8006d2a:	f108 0201 	add.w	r2, r8, #1
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4628      	mov	r0, r5
 8006d32:	47b8      	blx	r7
 8006d34:	3001      	adds	r0, #1
 8006d36:	d10c      	bne.n	8006d52 <_printf_float+0x412>
 8006d38:	e65d      	b.n	80069f6 <_printf_float+0xb6>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	465a      	mov	r2, fp
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b8      	blx	r7
 8006d44:	3001      	adds	r0, #1
 8006d46:	f43f ae56 	beq.w	80069f6 <_printf_float+0xb6>
 8006d4a:	f108 0801 	add.w	r8, r8, #1
 8006d4e:	45d0      	cmp	r8, sl
 8006d50:	dbf3      	blt.n	8006d3a <_printf_float+0x3fa>
 8006d52:	464b      	mov	r3, r9
 8006d54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d58:	e6df      	b.n	8006b1a <_printf_float+0x1da>
 8006d5a:	f04f 0800 	mov.w	r8, #0
 8006d5e:	f104 0b1a 	add.w	fp, r4, #26
 8006d62:	e7f4      	b.n	8006d4e <_printf_float+0x40e>
 8006d64:	2301      	movs	r3, #1
 8006d66:	4642      	mov	r2, r8
 8006d68:	e7e1      	b.n	8006d2e <_printf_float+0x3ee>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	464a      	mov	r2, r9
 8006d6e:	4631      	mov	r1, r6
 8006d70:	4628      	mov	r0, r5
 8006d72:	47b8      	blx	r7
 8006d74:	3001      	adds	r0, #1
 8006d76:	f43f ae3e 	beq.w	80069f6 <_printf_float+0xb6>
 8006d7a:	f108 0801 	add.w	r8, r8, #1
 8006d7e:	68e3      	ldr	r3, [r4, #12]
 8006d80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d82:	1a5b      	subs	r3, r3, r1
 8006d84:	4543      	cmp	r3, r8
 8006d86:	dcf0      	bgt.n	8006d6a <_printf_float+0x42a>
 8006d88:	e6fc      	b.n	8006b84 <_printf_float+0x244>
 8006d8a:	f04f 0800 	mov.w	r8, #0
 8006d8e:	f104 0919 	add.w	r9, r4, #25
 8006d92:	e7f4      	b.n	8006d7e <_printf_float+0x43e>

08006d94 <_printf_common>:
 8006d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d98:	4616      	mov	r6, r2
 8006d9a:	4698      	mov	r8, r3
 8006d9c:	688a      	ldr	r2, [r1, #8]
 8006d9e:	690b      	ldr	r3, [r1, #16]
 8006da0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006da4:	4293      	cmp	r3, r2
 8006da6:	bfb8      	it	lt
 8006da8:	4613      	movlt	r3, r2
 8006daa:	6033      	str	r3, [r6, #0]
 8006dac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006db0:	4607      	mov	r7, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	b10a      	cbz	r2, 8006dba <_printf_common+0x26>
 8006db6:	3301      	adds	r3, #1
 8006db8:	6033      	str	r3, [r6, #0]
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	0699      	lsls	r1, r3, #26
 8006dbe:	bf42      	ittt	mi
 8006dc0:	6833      	ldrmi	r3, [r6, #0]
 8006dc2:	3302      	addmi	r3, #2
 8006dc4:	6033      	strmi	r3, [r6, #0]
 8006dc6:	6825      	ldr	r5, [r4, #0]
 8006dc8:	f015 0506 	ands.w	r5, r5, #6
 8006dcc:	d106      	bne.n	8006ddc <_printf_common+0x48>
 8006dce:	f104 0a19 	add.w	sl, r4, #25
 8006dd2:	68e3      	ldr	r3, [r4, #12]
 8006dd4:	6832      	ldr	r2, [r6, #0]
 8006dd6:	1a9b      	subs	r3, r3, r2
 8006dd8:	42ab      	cmp	r3, r5
 8006dda:	dc26      	bgt.n	8006e2a <_printf_common+0x96>
 8006ddc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006de0:	6822      	ldr	r2, [r4, #0]
 8006de2:	3b00      	subs	r3, #0
 8006de4:	bf18      	it	ne
 8006de6:	2301      	movne	r3, #1
 8006de8:	0692      	lsls	r2, r2, #26
 8006dea:	d42b      	bmi.n	8006e44 <_printf_common+0xb0>
 8006dec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006df0:	4641      	mov	r1, r8
 8006df2:	4638      	mov	r0, r7
 8006df4:	47c8      	blx	r9
 8006df6:	3001      	adds	r0, #1
 8006df8:	d01e      	beq.n	8006e38 <_printf_common+0xa4>
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	6922      	ldr	r2, [r4, #16]
 8006dfe:	f003 0306 	and.w	r3, r3, #6
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	bf02      	ittt	eq
 8006e06:	68e5      	ldreq	r5, [r4, #12]
 8006e08:	6833      	ldreq	r3, [r6, #0]
 8006e0a:	1aed      	subeq	r5, r5, r3
 8006e0c:	68a3      	ldr	r3, [r4, #8]
 8006e0e:	bf0c      	ite	eq
 8006e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e14:	2500      	movne	r5, #0
 8006e16:	4293      	cmp	r3, r2
 8006e18:	bfc4      	itt	gt
 8006e1a:	1a9b      	subgt	r3, r3, r2
 8006e1c:	18ed      	addgt	r5, r5, r3
 8006e1e:	2600      	movs	r6, #0
 8006e20:	341a      	adds	r4, #26
 8006e22:	42b5      	cmp	r5, r6
 8006e24:	d11a      	bne.n	8006e5c <_printf_common+0xc8>
 8006e26:	2000      	movs	r0, #0
 8006e28:	e008      	b.n	8006e3c <_printf_common+0xa8>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	4652      	mov	r2, sl
 8006e2e:	4641      	mov	r1, r8
 8006e30:	4638      	mov	r0, r7
 8006e32:	47c8      	blx	r9
 8006e34:	3001      	adds	r0, #1
 8006e36:	d103      	bne.n	8006e40 <_printf_common+0xac>
 8006e38:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e40:	3501      	adds	r5, #1
 8006e42:	e7c6      	b.n	8006dd2 <_printf_common+0x3e>
 8006e44:	18e1      	adds	r1, r4, r3
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	2030      	movs	r0, #48	@ 0x30
 8006e4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e4e:	4422      	add	r2, r4
 8006e50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e58:	3302      	adds	r3, #2
 8006e5a:	e7c7      	b.n	8006dec <_printf_common+0x58>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	4622      	mov	r2, r4
 8006e60:	4641      	mov	r1, r8
 8006e62:	4638      	mov	r0, r7
 8006e64:	47c8      	blx	r9
 8006e66:	3001      	adds	r0, #1
 8006e68:	d0e6      	beq.n	8006e38 <_printf_common+0xa4>
 8006e6a:	3601      	adds	r6, #1
 8006e6c:	e7d9      	b.n	8006e22 <_printf_common+0x8e>
	...

08006e70 <_printf_i>:
 8006e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e74:	7e0f      	ldrb	r7, [r1, #24]
 8006e76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e78:	2f78      	cmp	r7, #120	@ 0x78
 8006e7a:	4691      	mov	r9, r2
 8006e7c:	4680      	mov	r8, r0
 8006e7e:	460c      	mov	r4, r1
 8006e80:	469a      	mov	sl, r3
 8006e82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e86:	d807      	bhi.n	8006e98 <_printf_i+0x28>
 8006e88:	2f62      	cmp	r7, #98	@ 0x62
 8006e8a:	d80a      	bhi.n	8006ea2 <_printf_i+0x32>
 8006e8c:	2f00      	cmp	r7, #0
 8006e8e:	f000 80d1 	beq.w	8007034 <_printf_i+0x1c4>
 8006e92:	2f58      	cmp	r7, #88	@ 0x58
 8006e94:	f000 80b8 	beq.w	8007008 <_printf_i+0x198>
 8006e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ea0:	e03a      	b.n	8006f18 <_printf_i+0xa8>
 8006ea2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ea6:	2b15      	cmp	r3, #21
 8006ea8:	d8f6      	bhi.n	8006e98 <_printf_i+0x28>
 8006eaa:	a101      	add	r1, pc, #4	@ (adr r1, 8006eb0 <_printf_i+0x40>)
 8006eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006eb0:	08006f09 	.word	0x08006f09
 8006eb4:	08006f1d 	.word	0x08006f1d
 8006eb8:	08006e99 	.word	0x08006e99
 8006ebc:	08006e99 	.word	0x08006e99
 8006ec0:	08006e99 	.word	0x08006e99
 8006ec4:	08006e99 	.word	0x08006e99
 8006ec8:	08006f1d 	.word	0x08006f1d
 8006ecc:	08006e99 	.word	0x08006e99
 8006ed0:	08006e99 	.word	0x08006e99
 8006ed4:	08006e99 	.word	0x08006e99
 8006ed8:	08006e99 	.word	0x08006e99
 8006edc:	0800701b 	.word	0x0800701b
 8006ee0:	08006f47 	.word	0x08006f47
 8006ee4:	08006fd5 	.word	0x08006fd5
 8006ee8:	08006e99 	.word	0x08006e99
 8006eec:	08006e99 	.word	0x08006e99
 8006ef0:	0800703d 	.word	0x0800703d
 8006ef4:	08006e99 	.word	0x08006e99
 8006ef8:	08006f47 	.word	0x08006f47
 8006efc:	08006e99 	.word	0x08006e99
 8006f00:	08006e99 	.word	0x08006e99
 8006f04:	08006fdd 	.word	0x08006fdd
 8006f08:	6833      	ldr	r3, [r6, #0]
 8006f0a:	1d1a      	adds	r2, r3, #4
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6032      	str	r2, [r6, #0]
 8006f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e09c      	b.n	8007056 <_printf_i+0x1e6>
 8006f1c:	6833      	ldr	r3, [r6, #0]
 8006f1e:	6820      	ldr	r0, [r4, #0]
 8006f20:	1d19      	adds	r1, r3, #4
 8006f22:	6031      	str	r1, [r6, #0]
 8006f24:	0606      	lsls	r6, r0, #24
 8006f26:	d501      	bpl.n	8006f2c <_printf_i+0xbc>
 8006f28:	681d      	ldr	r5, [r3, #0]
 8006f2a:	e003      	b.n	8006f34 <_printf_i+0xc4>
 8006f2c:	0645      	lsls	r5, r0, #25
 8006f2e:	d5fb      	bpl.n	8006f28 <_printf_i+0xb8>
 8006f30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f34:	2d00      	cmp	r5, #0
 8006f36:	da03      	bge.n	8006f40 <_printf_i+0xd0>
 8006f38:	232d      	movs	r3, #45	@ 0x2d
 8006f3a:	426d      	negs	r5, r5
 8006f3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f40:	4858      	ldr	r0, [pc, #352]	@ (80070a4 <_printf_i+0x234>)
 8006f42:	230a      	movs	r3, #10
 8006f44:	e011      	b.n	8006f6a <_printf_i+0xfa>
 8006f46:	6821      	ldr	r1, [r4, #0]
 8006f48:	6833      	ldr	r3, [r6, #0]
 8006f4a:	0608      	lsls	r0, r1, #24
 8006f4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f50:	d402      	bmi.n	8006f58 <_printf_i+0xe8>
 8006f52:	0649      	lsls	r1, r1, #25
 8006f54:	bf48      	it	mi
 8006f56:	b2ad      	uxthmi	r5, r5
 8006f58:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f5a:	4852      	ldr	r0, [pc, #328]	@ (80070a4 <_printf_i+0x234>)
 8006f5c:	6033      	str	r3, [r6, #0]
 8006f5e:	bf14      	ite	ne
 8006f60:	230a      	movne	r3, #10
 8006f62:	2308      	moveq	r3, #8
 8006f64:	2100      	movs	r1, #0
 8006f66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f6a:	6866      	ldr	r6, [r4, #4]
 8006f6c:	60a6      	str	r6, [r4, #8]
 8006f6e:	2e00      	cmp	r6, #0
 8006f70:	db05      	blt.n	8006f7e <_printf_i+0x10e>
 8006f72:	6821      	ldr	r1, [r4, #0]
 8006f74:	432e      	orrs	r6, r5
 8006f76:	f021 0104 	bic.w	r1, r1, #4
 8006f7a:	6021      	str	r1, [r4, #0]
 8006f7c:	d04b      	beq.n	8007016 <_printf_i+0x1a6>
 8006f7e:	4616      	mov	r6, r2
 8006f80:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f84:	fb03 5711 	mls	r7, r3, r1, r5
 8006f88:	5dc7      	ldrb	r7, [r0, r7]
 8006f8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f8e:	462f      	mov	r7, r5
 8006f90:	42bb      	cmp	r3, r7
 8006f92:	460d      	mov	r5, r1
 8006f94:	d9f4      	bls.n	8006f80 <_printf_i+0x110>
 8006f96:	2b08      	cmp	r3, #8
 8006f98:	d10b      	bne.n	8006fb2 <_printf_i+0x142>
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	07df      	lsls	r7, r3, #31
 8006f9e:	d508      	bpl.n	8006fb2 <_printf_i+0x142>
 8006fa0:	6923      	ldr	r3, [r4, #16]
 8006fa2:	6861      	ldr	r1, [r4, #4]
 8006fa4:	4299      	cmp	r1, r3
 8006fa6:	bfde      	ittt	le
 8006fa8:	2330      	movle	r3, #48	@ 0x30
 8006faa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fb2:	1b92      	subs	r2, r2, r6
 8006fb4:	6122      	str	r2, [r4, #16]
 8006fb6:	f8cd a000 	str.w	sl, [sp]
 8006fba:	464b      	mov	r3, r9
 8006fbc:	aa03      	add	r2, sp, #12
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	4640      	mov	r0, r8
 8006fc2:	f7ff fee7 	bl	8006d94 <_printf_common>
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	d14a      	bne.n	8007060 <_printf_i+0x1f0>
 8006fca:	f04f 30ff 	mov.w	r0, #4294967295
 8006fce:	b004      	add	sp, #16
 8006fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	f043 0320 	orr.w	r3, r3, #32
 8006fda:	6023      	str	r3, [r4, #0]
 8006fdc:	4832      	ldr	r0, [pc, #200]	@ (80070a8 <_printf_i+0x238>)
 8006fde:	2778      	movs	r7, #120	@ 0x78
 8006fe0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	6831      	ldr	r1, [r6, #0]
 8006fe8:	061f      	lsls	r7, r3, #24
 8006fea:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fee:	d402      	bmi.n	8006ff6 <_printf_i+0x186>
 8006ff0:	065f      	lsls	r7, r3, #25
 8006ff2:	bf48      	it	mi
 8006ff4:	b2ad      	uxthmi	r5, r5
 8006ff6:	6031      	str	r1, [r6, #0]
 8006ff8:	07d9      	lsls	r1, r3, #31
 8006ffa:	bf44      	itt	mi
 8006ffc:	f043 0320 	orrmi.w	r3, r3, #32
 8007000:	6023      	strmi	r3, [r4, #0]
 8007002:	b11d      	cbz	r5, 800700c <_printf_i+0x19c>
 8007004:	2310      	movs	r3, #16
 8007006:	e7ad      	b.n	8006f64 <_printf_i+0xf4>
 8007008:	4826      	ldr	r0, [pc, #152]	@ (80070a4 <_printf_i+0x234>)
 800700a:	e7e9      	b.n	8006fe0 <_printf_i+0x170>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	f023 0320 	bic.w	r3, r3, #32
 8007012:	6023      	str	r3, [r4, #0]
 8007014:	e7f6      	b.n	8007004 <_printf_i+0x194>
 8007016:	4616      	mov	r6, r2
 8007018:	e7bd      	b.n	8006f96 <_printf_i+0x126>
 800701a:	6833      	ldr	r3, [r6, #0]
 800701c:	6825      	ldr	r5, [r4, #0]
 800701e:	6961      	ldr	r1, [r4, #20]
 8007020:	1d18      	adds	r0, r3, #4
 8007022:	6030      	str	r0, [r6, #0]
 8007024:	062e      	lsls	r6, r5, #24
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	d501      	bpl.n	800702e <_printf_i+0x1be>
 800702a:	6019      	str	r1, [r3, #0]
 800702c:	e002      	b.n	8007034 <_printf_i+0x1c4>
 800702e:	0668      	lsls	r0, r5, #25
 8007030:	d5fb      	bpl.n	800702a <_printf_i+0x1ba>
 8007032:	8019      	strh	r1, [r3, #0]
 8007034:	2300      	movs	r3, #0
 8007036:	6123      	str	r3, [r4, #16]
 8007038:	4616      	mov	r6, r2
 800703a:	e7bc      	b.n	8006fb6 <_printf_i+0x146>
 800703c:	6833      	ldr	r3, [r6, #0]
 800703e:	1d1a      	adds	r2, r3, #4
 8007040:	6032      	str	r2, [r6, #0]
 8007042:	681e      	ldr	r6, [r3, #0]
 8007044:	6862      	ldr	r2, [r4, #4]
 8007046:	2100      	movs	r1, #0
 8007048:	4630      	mov	r0, r6
 800704a:	f7f9 f8d9 	bl	8000200 <memchr>
 800704e:	b108      	cbz	r0, 8007054 <_printf_i+0x1e4>
 8007050:	1b80      	subs	r0, r0, r6
 8007052:	6060      	str	r0, [r4, #4]
 8007054:	6863      	ldr	r3, [r4, #4]
 8007056:	6123      	str	r3, [r4, #16]
 8007058:	2300      	movs	r3, #0
 800705a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800705e:	e7aa      	b.n	8006fb6 <_printf_i+0x146>
 8007060:	6923      	ldr	r3, [r4, #16]
 8007062:	4632      	mov	r2, r6
 8007064:	4649      	mov	r1, r9
 8007066:	4640      	mov	r0, r8
 8007068:	47d0      	blx	sl
 800706a:	3001      	adds	r0, #1
 800706c:	d0ad      	beq.n	8006fca <_printf_i+0x15a>
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	079b      	lsls	r3, r3, #30
 8007072:	d413      	bmi.n	800709c <_printf_i+0x22c>
 8007074:	68e0      	ldr	r0, [r4, #12]
 8007076:	9b03      	ldr	r3, [sp, #12]
 8007078:	4298      	cmp	r0, r3
 800707a:	bfb8      	it	lt
 800707c:	4618      	movlt	r0, r3
 800707e:	e7a6      	b.n	8006fce <_printf_i+0x15e>
 8007080:	2301      	movs	r3, #1
 8007082:	4632      	mov	r2, r6
 8007084:	4649      	mov	r1, r9
 8007086:	4640      	mov	r0, r8
 8007088:	47d0      	blx	sl
 800708a:	3001      	adds	r0, #1
 800708c:	d09d      	beq.n	8006fca <_printf_i+0x15a>
 800708e:	3501      	adds	r5, #1
 8007090:	68e3      	ldr	r3, [r4, #12]
 8007092:	9903      	ldr	r1, [sp, #12]
 8007094:	1a5b      	subs	r3, r3, r1
 8007096:	42ab      	cmp	r3, r5
 8007098:	dcf2      	bgt.n	8007080 <_printf_i+0x210>
 800709a:	e7eb      	b.n	8007074 <_printf_i+0x204>
 800709c:	2500      	movs	r5, #0
 800709e:	f104 0619 	add.w	r6, r4, #25
 80070a2:	e7f5      	b.n	8007090 <_printf_i+0x220>
 80070a4:	0800af29 	.word	0x0800af29
 80070a8:	0800af3a 	.word	0x0800af3a

080070ac <_scanf_float>:
 80070ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b0:	b087      	sub	sp, #28
 80070b2:	4691      	mov	r9, r2
 80070b4:	9303      	str	r3, [sp, #12]
 80070b6:	688b      	ldr	r3, [r1, #8]
 80070b8:	1e5a      	subs	r2, r3, #1
 80070ba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80070be:	bf81      	itttt	hi
 80070c0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80070c4:	eb03 0b05 	addhi.w	fp, r3, r5
 80070c8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80070cc:	608b      	strhi	r3, [r1, #8]
 80070ce:	680b      	ldr	r3, [r1, #0]
 80070d0:	460a      	mov	r2, r1
 80070d2:	f04f 0500 	mov.w	r5, #0
 80070d6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80070da:	f842 3b1c 	str.w	r3, [r2], #28
 80070de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80070e2:	4680      	mov	r8, r0
 80070e4:	460c      	mov	r4, r1
 80070e6:	bf98      	it	ls
 80070e8:	f04f 0b00 	movls.w	fp, #0
 80070ec:	9201      	str	r2, [sp, #4]
 80070ee:	4616      	mov	r6, r2
 80070f0:	46aa      	mov	sl, r5
 80070f2:	462f      	mov	r7, r5
 80070f4:	9502      	str	r5, [sp, #8]
 80070f6:	68a2      	ldr	r2, [r4, #8]
 80070f8:	b15a      	cbz	r2, 8007112 <_scanf_float+0x66>
 80070fa:	f8d9 3000 	ldr.w	r3, [r9]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	2b4e      	cmp	r3, #78	@ 0x4e
 8007102:	d863      	bhi.n	80071cc <_scanf_float+0x120>
 8007104:	2b40      	cmp	r3, #64	@ 0x40
 8007106:	d83b      	bhi.n	8007180 <_scanf_float+0xd4>
 8007108:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800710c:	b2c8      	uxtb	r0, r1
 800710e:	280e      	cmp	r0, #14
 8007110:	d939      	bls.n	8007186 <_scanf_float+0xda>
 8007112:	b11f      	cbz	r7, 800711c <_scanf_float+0x70>
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800711a:	6023      	str	r3, [r4, #0]
 800711c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007120:	f1ba 0f01 	cmp.w	sl, #1
 8007124:	f200 8114 	bhi.w	8007350 <_scanf_float+0x2a4>
 8007128:	9b01      	ldr	r3, [sp, #4]
 800712a:	429e      	cmp	r6, r3
 800712c:	f200 8105 	bhi.w	800733a <_scanf_float+0x28e>
 8007130:	2001      	movs	r0, #1
 8007132:	b007      	add	sp, #28
 8007134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007138:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800713c:	2a0d      	cmp	r2, #13
 800713e:	d8e8      	bhi.n	8007112 <_scanf_float+0x66>
 8007140:	a101      	add	r1, pc, #4	@ (adr r1, 8007148 <_scanf_float+0x9c>)
 8007142:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007146:	bf00      	nop
 8007148:	08007291 	.word	0x08007291
 800714c:	08007113 	.word	0x08007113
 8007150:	08007113 	.word	0x08007113
 8007154:	08007113 	.word	0x08007113
 8007158:	080072ed 	.word	0x080072ed
 800715c:	080072c7 	.word	0x080072c7
 8007160:	08007113 	.word	0x08007113
 8007164:	08007113 	.word	0x08007113
 8007168:	0800729f 	.word	0x0800729f
 800716c:	08007113 	.word	0x08007113
 8007170:	08007113 	.word	0x08007113
 8007174:	08007113 	.word	0x08007113
 8007178:	08007113 	.word	0x08007113
 800717c:	0800725b 	.word	0x0800725b
 8007180:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007184:	e7da      	b.n	800713c <_scanf_float+0x90>
 8007186:	290e      	cmp	r1, #14
 8007188:	d8c3      	bhi.n	8007112 <_scanf_float+0x66>
 800718a:	a001      	add	r0, pc, #4	@ (adr r0, 8007190 <_scanf_float+0xe4>)
 800718c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007190:	0800724b 	.word	0x0800724b
 8007194:	08007113 	.word	0x08007113
 8007198:	0800724b 	.word	0x0800724b
 800719c:	080072db 	.word	0x080072db
 80071a0:	08007113 	.word	0x08007113
 80071a4:	080071ed 	.word	0x080071ed
 80071a8:	08007231 	.word	0x08007231
 80071ac:	08007231 	.word	0x08007231
 80071b0:	08007231 	.word	0x08007231
 80071b4:	08007231 	.word	0x08007231
 80071b8:	08007231 	.word	0x08007231
 80071bc:	08007231 	.word	0x08007231
 80071c0:	08007231 	.word	0x08007231
 80071c4:	08007231 	.word	0x08007231
 80071c8:	08007231 	.word	0x08007231
 80071cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80071ce:	d809      	bhi.n	80071e4 <_scanf_float+0x138>
 80071d0:	2b60      	cmp	r3, #96	@ 0x60
 80071d2:	d8b1      	bhi.n	8007138 <_scanf_float+0x8c>
 80071d4:	2b54      	cmp	r3, #84	@ 0x54
 80071d6:	d07b      	beq.n	80072d0 <_scanf_float+0x224>
 80071d8:	2b59      	cmp	r3, #89	@ 0x59
 80071da:	d19a      	bne.n	8007112 <_scanf_float+0x66>
 80071dc:	2d07      	cmp	r5, #7
 80071de:	d198      	bne.n	8007112 <_scanf_float+0x66>
 80071e0:	2508      	movs	r5, #8
 80071e2:	e02f      	b.n	8007244 <_scanf_float+0x198>
 80071e4:	2b74      	cmp	r3, #116	@ 0x74
 80071e6:	d073      	beq.n	80072d0 <_scanf_float+0x224>
 80071e8:	2b79      	cmp	r3, #121	@ 0x79
 80071ea:	e7f6      	b.n	80071da <_scanf_float+0x12e>
 80071ec:	6821      	ldr	r1, [r4, #0]
 80071ee:	05c8      	lsls	r0, r1, #23
 80071f0:	d51e      	bpl.n	8007230 <_scanf_float+0x184>
 80071f2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80071f6:	6021      	str	r1, [r4, #0]
 80071f8:	3701      	adds	r7, #1
 80071fa:	f1bb 0f00 	cmp.w	fp, #0
 80071fe:	d003      	beq.n	8007208 <_scanf_float+0x15c>
 8007200:	3201      	adds	r2, #1
 8007202:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007206:	60a2      	str	r2, [r4, #8]
 8007208:	68a3      	ldr	r3, [r4, #8]
 800720a:	3b01      	subs	r3, #1
 800720c:	60a3      	str	r3, [r4, #8]
 800720e:	6923      	ldr	r3, [r4, #16]
 8007210:	3301      	adds	r3, #1
 8007212:	6123      	str	r3, [r4, #16]
 8007214:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007218:	3b01      	subs	r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	f8c9 3004 	str.w	r3, [r9, #4]
 8007220:	f340 8082 	ble.w	8007328 <_scanf_float+0x27c>
 8007224:	f8d9 3000 	ldr.w	r3, [r9]
 8007228:	3301      	adds	r3, #1
 800722a:	f8c9 3000 	str.w	r3, [r9]
 800722e:	e762      	b.n	80070f6 <_scanf_float+0x4a>
 8007230:	eb1a 0105 	adds.w	r1, sl, r5
 8007234:	f47f af6d 	bne.w	8007112 <_scanf_float+0x66>
 8007238:	6822      	ldr	r2, [r4, #0]
 800723a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800723e:	6022      	str	r2, [r4, #0]
 8007240:	460d      	mov	r5, r1
 8007242:	468a      	mov	sl, r1
 8007244:	f806 3b01 	strb.w	r3, [r6], #1
 8007248:	e7de      	b.n	8007208 <_scanf_float+0x15c>
 800724a:	6822      	ldr	r2, [r4, #0]
 800724c:	0610      	lsls	r0, r2, #24
 800724e:	f57f af60 	bpl.w	8007112 <_scanf_float+0x66>
 8007252:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007256:	6022      	str	r2, [r4, #0]
 8007258:	e7f4      	b.n	8007244 <_scanf_float+0x198>
 800725a:	f1ba 0f00 	cmp.w	sl, #0
 800725e:	d10c      	bne.n	800727a <_scanf_float+0x1ce>
 8007260:	b977      	cbnz	r7, 8007280 <_scanf_float+0x1d4>
 8007262:	6822      	ldr	r2, [r4, #0]
 8007264:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007268:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800726c:	d108      	bne.n	8007280 <_scanf_float+0x1d4>
 800726e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007272:	6022      	str	r2, [r4, #0]
 8007274:	f04f 0a01 	mov.w	sl, #1
 8007278:	e7e4      	b.n	8007244 <_scanf_float+0x198>
 800727a:	f1ba 0f02 	cmp.w	sl, #2
 800727e:	d050      	beq.n	8007322 <_scanf_float+0x276>
 8007280:	2d01      	cmp	r5, #1
 8007282:	d002      	beq.n	800728a <_scanf_float+0x1de>
 8007284:	2d04      	cmp	r5, #4
 8007286:	f47f af44 	bne.w	8007112 <_scanf_float+0x66>
 800728a:	3501      	adds	r5, #1
 800728c:	b2ed      	uxtb	r5, r5
 800728e:	e7d9      	b.n	8007244 <_scanf_float+0x198>
 8007290:	f1ba 0f01 	cmp.w	sl, #1
 8007294:	f47f af3d 	bne.w	8007112 <_scanf_float+0x66>
 8007298:	f04f 0a02 	mov.w	sl, #2
 800729c:	e7d2      	b.n	8007244 <_scanf_float+0x198>
 800729e:	b975      	cbnz	r5, 80072be <_scanf_float+0x212>
 80072a0:	2f00      	cmp	r7, #0
 80072a2:	f47f af37 	bne.w	8007114 <_scanf_float+0x68>
 80072a6:	6822      	ldr	r2, [r4, #0]
 80072a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80072ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80072b0:	f040 8103 	bne.w	80074ba <_scanf_float+0x40e>
 80072b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072b8:	6022      	str	r2, [r4, #0]
 80072ba:	2501      	movs	r5, #1
 80072bc:	e7c2      	b.n	8007244 <_scanf_float+0x198>
 80072be:	2d03      	cmp	r5, #3
 80072c0:	d0e3      	beq.n	800728a <_scanf_float+0x1de>
 80072c2:	2d05      	cmp	r5, #5
 80072c4:	e7df      	b.n	8007286 <_scanf_float+0x1da>
 80072c6:	2d02      	cmp	r5, #2
 80072c8:	f47f af23 	bne.w	8007112 <_scanf_float+0x66>
 80072cc:	2503      	movs	r5, #3
 80072ce:	e7b9      	b.n	8007244 <_scanf_float+0x198>
 80072d0:	2d06      	cmp	r5, #6
 80072d2:	f47f af1e 	bne.w	8007112 <_scanf_float+0x66>
 80072d6:	2507      	movs	r5, #7
 80072d8:	e7b4      	b.n	8007244 <_scanf_float+0x198>
 80072da:	6822      	ldr	r2, [r4, #0]
 80072dc:	0591      	lsls	r1, r2, #22
 80072de:	f57f af18 	bpl.w	8007112 <_scanf_float+0x66>
 80072e2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80072e6:	6022      	str	r2, [r4, #0]
 80072e8:	9702      	str	r7, [sp, #8]
 80072ea:	e7ab      	b.n	8007244 <_scanf_float+0x198>
 80072ec:	6822      	ldr	r2, [r4, #0]
 80072ee:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80072f2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80072f6:	d005      	beq.n	8007304 <_scanf_float+0x258>
 80072f8:	0550      	lsls	r0, r2, #21
 80072fa:	f57f af0a 	bpl.w	8007112 <_scanf_float+0x66>
 80072fe:	2f00      	cmp	r7, #0
 8007300:	f000 80db 	beq.w	80074ba <_scanf_float+0x40e>
 8007304:	0591      	lsls	r1, r2, #22
 8007306:	bf58      	it	pl
 8007308:	9902      	ldrpl	r1, [sp, #8]
 800730a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800730e:	bf58      	it	pl
 8007310:	1a79      	subpl	r1, r7, r1
 8007312:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007316:	bf58      	it	pl
 8007318:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800731c:	6022      	str	r2, [r4, #0]
 800731e:	2700      	movs	r7, #0
 8007320:	e790      	b.n	8007244 <_scanf_float+0x198>
 8007322:	f04f 0a03 	mov.w	sl, #3
 8007326:	e78d      	b.n	8007244 <_scanf_float+0x198>
 8007328:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800732c:	4649      	mov	r1, r9
 800732e:	4640      	mov	r0, r8
 8007330:	4798      	blx	r3
 8007332:	2800      	cmp	r0, #0
 8007334:	f43f aedf 	beq.w	80070f6 <_scanf_float+0x4a>
 8007338:	e6eb      	b.n	8007112 <_scanf_float+0x66>
 800733a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800733e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007342:	464a      	mov	r2, r9
 8007344:	4640      	mov	r0, r8
 8007346:	4798      	blx	r3
 8007348:	6923      	ldr	r3, [r4, #16]
 800734a:	3b01      	subs	r3, #1
 800734c:	6123      	str	r3, [r4, #16]
 800734e:	e6eb      	b.n	8007128 <_scanf_float+0x7c>
 8007350:	1e6b      	subs	r3, r5, #1
 8007352:	2b06      	cmp	r3, #6
 8007354:	d824      	bhi.n	80073a0 <_scanf_float+0x2f4>
 8007356:	2d02      	cmp	r5, #2
 8007358:	d836      	bhi.n	80073c8 <_scanf_float+0x31c>
 800735a:	9b01      	ldr	r3, [sp, #4]
 800735c:	429e      	cmp	r6, r3
 800735e:	f67f aee7 	bls.w	8007130 <_scanf_float+0x84>
 8007362:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007366:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800736a:	464a      	mov	r2, r9
 800736c:	4640      	mov	r0, r8
 800736e:	4798      	blx	r3
 8007370:	6923      	ldr	r3, [r4, #16]
 8007372:	3b01      	subs	r3, #1
 8007374:	6123      	str	r3, [r4, #16]
 8007376:	e7f0      	b.n	800735a <_scanf_float+0x2ae>
 8007378:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800737c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007380:	464a      	mov	r2, r9
 8007382:	4640      	mov	r0, r8
 8007384:	4798      	blx	r3
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	3b01      	subs	r3, #1
 800738a:	6123      	str	r3, [r4, #16]
 800738c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007390:	fa5f fa8a 	uxtb.w	sl, sl
 8007394:	f1ba 0f02 	cmp.w	sl, #2
 8007398:	d1ee      	bne.n	8007378 <_scanf_float+0x2cc>
 800739a:	3d03      	subs	r5, #3
 800739c:	b2ed      	uxtb	r5, r5
 800739e:	1b76      	subs	r6, r6, r5
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	05da      	lsls	r2, r3, #23
 80073a4:	d530      	bpl.n	8007408 <_scanf_float+0x35c>
 80073a6:	055b      	lsls	r3, r3, #21
 80073a8:	d511      	bpl.n	80073ce <_scanf_float+0x322>
 80073aa:	9b01      	ldr	r3, [sp, #4]
 80073ac:	429e      	cmp	r6, r3
 80073ae:	f67f aebf 	bls.w	8007130 <_scanf_float+0x84>
 80073b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073ba:	464a      	mov	r2, r9
 80073bc:	4640      	mov	r0, r8
 80073be:	4798      	blx	r3
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	6123      	str	r3, [r4, #16]
 80073c6:	e7f0      	b.n	80073aa <_scanf_float+0x2fe>
 80073c8:	46aa      	mov	sl, r5
 80073ca:	46b3      	mov	fp, r6
 80073cc:	e7de      	b.n	800738c <_scanf_float+0x2e0>
 80073ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	2965      	cmp	r1, #101	@ 0x65
 80073d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80073da:	f106 35ff 	add.w	r5, r6, #4294967295
 80073de:	6123      	str	r3, [r4, #16]
 80073e0:	d00c      	beq.n	80073fc <_scanf_float+0x350>
 80073e2:	2945      	cmp	r1, #69	@ 0x45
 80073e4:	d00a      	beq.n	80073fc <_scanf_float+0x350>
 80073e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073ea:	464a      	mov	r2, r9
 80073ec:	4640      	mov	r0, r8
 80073ee:	4798      	blx	r3
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	1eb5      	subs	r5, r6, #2
 80073fa:	6123      	str	r3, [r4, #16]
 80073fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007400:	464a      	mov	r2, r9
 8007402:	4640      	mov	r0, r8
 8007404:	4798      	blx	r3
 8007406:	462e      	mov	r6, r5
 8007408:	6822      	ldr	r2, [r4, #0]
 800740a:	f012 0210 	ands.w	r2, r2, #16
 800740e:	d001      	beq.n	8007414 <_scanf_float+0x368>
 8007410:	2000      	movs	r0, #0
 8007412:	e68e      	b.n	8007132 <_scanf_float+0x86>
 8007414:	7032      	strb	r2, [r6, #0]
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800741c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007420:	d125      	bne.n	800746e <_scanf_float+0x3c2>
 8007422:	9b02      	ldr	r3, [sp, #8]
 8007424:	429f      	cmp	r7, r3
 8007426:	d00a      	beq.n	800743e <_scanf_float+0x392>
 8007428:	1bda      	subs	r2, r3, r7
 800742a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800742e:	429e      	cmp	r6, r3
 8007430:	bf28      	it	cs
 8007432:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007436:	4922      	ldr	r1, [pc, #136]	@ (80074c0 <_scanf_float+0x414>)
 8007438:	4630      	mov	r0, r6
 800743a:	f000 f919 	bl	8007670 <siprintf>
 800743e:	9901      	ldr	r1, [sp, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	4640      	mov	r0, r8
 8007444:	f002 fb80 	bl	8009b48 <_strtod_r>
 8007448:	9b03      	ldr	r3, [sp, #12]
 800744a:	6821      	ldr	r1, [r4, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f011 0f02 	tst.w	r1, #2
 8007452:	ec57 6b10 	vmov	r6, r7, d0
 8007456:	f103 0204 	add.w	r2, r3, #4
 800745a:	d015      	beq.n	8007488 <_scanf_float+0x3dc>
 800745c:	9903      	ldr	r1, [sp, #12]
 800745e:	600a      	str	r2, [r1, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	e9c3 6700 	strd	r6, r7, [r3]
 8007466:	68e3      	ldr	r3, [r4, #12]
 8007468:	3301      	adds	r3, #1
 800746a:	60e3      	str	r3, [r4, #12]
 800746c:	e7d0      	b.n	8007410 <_scanf_float+0x364>
 800746e:	9b04      	ldr	r3, [sp, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0e4      	beq.n	800743e <_scanf_float+0x392>
 8007474:	9905      	ldr	r1, [sp, #20]
 8007476:	230a      	movs	r3, #10
 8007478:	3101      	adds	r1, #1
 800747a:	4640      	mov	r0, r8
 800747c:	f002 fbe4 	bl	8009c48 <_strtol_r>
 8007480:	9b04      	ldr	r3, [sp, #16]
 8007482:	9e05      	ldr	r6, [sp, #20]
 8007484:	1ac2      	subs	r2, r0, r3
 8007486:	e7d0      	b.n	800742a <_scanf_float+0x37e>
 8007488:	f011 0f04 	tst.w	r1, #4
 800748c:	9903      	ldr	r1, [sp, #12]
 800748e:	600a      	str	r2, [r1, #0]
 8007490:	d1e6      	bne.n	8007460 <_scanf_float+0x3b4>
 8007492:	681d      	ldr	r5, [r3, #0]
 8007494:	4632      	mov	r2, r6
 8007496:	463b      	mov	r3, r7
 8007498:	4630      	mov	r0, r6
 800749a:	4639      	mov	r1, r7
 800749c:	f7f9 fb5e 	bl	8000b5c <__aeabi_dcmpun>
 80074a0:	b128      	cbz	r0, 80074ae <_scanf_float+0x402>
 80074a2:	4808      	ldr	r0, [pc, #32]	@ (80074c4 <_scanf_float+0x418>)
 80074a4:	f000 f9da 	bl	800785c <nanf>
 80074a8:	ed85 0a00 	vstr	s0, [r5]
 80074ac:	e7db      	b.n	8007466 <_scanf_float+0x3ba>
 80074ae:	4630      	mov	r0, r6
 80074b0:	4639      	mov	r1, r7
 80074b2:	f7f9 fbb1 	bl	8000c18 <__aeabi_d2f>
 80074b6:	6028      	str	r0, [r5, #0]
 80074b8:	e7d5      	b.n	8007466 <_scanf_float+0x3ba>
 80074ba:	2700      	movs	r7, #0
 80074bc:	e62e      	b.n	800711c <_scanf_float+0x70>
 80074be:	bf00      	nop
 80074c0:	0800af4b 	.word	0x0800af4b
 80074c4:	0800af8b 	.word	0x0800af8b

080074c8 <std>:
 80074c8:	2300      	movs	r3, #0
 80074ca:	b510      	push	{r4, lr}
 80074cc:	4604      	mov	r4, r0
 80074ce:	e9c0 3300 	strd	r3, r3, [r0]
 80074d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074d6:	6083      	str	r3, [r0, #8]
 80074d8:	8181      	strh	r1, [r0, #12]
 80074da:	6643      	str	r3, [r0, #100]	@ 0x64
 80074dc:	81c2      	strh	r2, [r0, #14]
 80074de:	6183      	str	r3, [r0, #24]
 80074e0:	4619      	mov	r1, r3
 80074e2:	2208      	movs	r2, #8
 80074e4:	305c      	adds	r0, #92	@ 0x5c
 80074e6:	f000 f928 	bl	800773a <memset>
 80074ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007520 <std+0x58>)
 80074ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80074ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <std+0x5c>)
 80074f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007528 <std+0x60>)
 80074f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074f6:	4b0d      	ldr	r3, [pc, #52]	@ (800752c <std+0x64>)
 80074f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80074fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007530 <std+0x68>)
 80074fc:	6224      	str	r4, [r4, #32]
 80074fe:	429c      	cmp	r4, r3
 8007500:	d006      	beq.n	8007510 <std+0x48>
 8007502:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007506:	4294      	cmp	r4, r2
 8007508:	d002      	beq.n	8007510 <std+0x48>
 800750a:	33d0      	adds	r3, #208	@ 0xd0
 800750c:	429c      	cmp	r4, r3
 800750e:	d105      	bne.n	800751c <std+0x54>
 8007510:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007518:	f000 b99c 	b.w	8007854 <__retarget_lock_init_recursive>
 800751c:	bd10      	pop	{r4, pc}
 800751e:	bf00      	nop
 8007520:	080076b5 	.word	0x080076b5
 8007524:	080076d7 	.word	0x080076d7
 8007528:	0800770f 	.word	0x0800770f
 800752c:	08007733 	.word	0x08007733
 8007530:	20040cf8 	.word	0x20040cf8

08007534 <stdio_exit_handler>:
 8007534:	4a02      	ldr	r2, [pc, #8]	@ (8007540 <stdio_exit_handler+0xc>)
 8007536:	4903      	ldr	r1, [pc, #12]	@ (8007544 <stdio_exit_handler+0x10>)
 8007538:	4803      	ldr	r0, [pc, #12]	@ (8007548 <stdio_exit_handler+0x14>)
 800753a:	f000 b869 	b.w	8007610 <_fwalk_sglue>
 800753e:	bf00      	nop
 8007540:	200400b4 	.word	0x200400b4
 8007544:	0800a289 	.word	0x0800a289
 8007548:	200400c4 	.word	0x200400c4

0800754c <cleanup_stdio>:
 800754c:	6841      	ldr	r1, [r0, #4]
 800754e:	4b0c      	ldr	r3, [pc, #48]	@ (8007580 <cleanup_stdio+0x34>)
 8007550:	4299      	cmp	r1, r3
 8007552:	b510      	push	{r4, lr}
 8007554:	4604      	mov	r4, r0
 8007556:	d001      	beq.n	800755c <cleanup_stdio+0x10>
 8007558:	f002 fe96 	bl	800a288 <_fflush_r>
 800755c:	68a1      	ldr	r1, [r4, #8]
 800755e:	4b09      	ldr	r3, [pc, #36]	@ (8007584 <cleanup_stdio+0x38>)
 8007560:	4299      	cmp	r1, r3
 8007562:	d002      	beq.n	800756a <cleanup_stdio+0x1e>
 8007564:	4620      	mov	r0, r4
 8007566:	f002 fe8f 	bl	800a288 <_fflush_r>
 800756a:	68e1      	ldr	r1, [r4, #12]
 800756c:	4b06      	ldr	r3, [pc, #24]	@ (8007588 <cleanup_stdio+0x3c>)
 800756e:	4299      	cmp	r1, r3
 8007570:	d004      	beq.n	800757c <cleanup_stdio+0x30>
 8007572:	4620      	mov	r0, r4
 8007574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007578:	f002 be86 	b.w	800a288 <_fflush_r>
 800757c:	bd10      	pop	{r4, pc}
 800757e:	bf00      	nop
 8007580:	20040cf8 	.word	0x20040cf8
 8007584:	20040d60 	.word	0x20040d60
 8007588:	20040dc8 	.word	0x20040dc8

0800758c <global_stdio_init.part.0>:
 800758c:	b510      	push	{r4, lr}
 800758e:	4b0b      	ldr	r3, [pc, #44]	@ (80075bc <global_stdio_init.part.0+0x30>)
 8007590:	4c0b      	ldr	r4, [pc, #44]	@ (80075c0 <global_stdio_init.part.0+0x34>)
 8007592:	4a0c      	ldr	r2, [pc, #48]	@ (80075c4 <global_stdio_init.part.0+0x38>)
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	4620      	mov	r0, r4
 8007598:	2200      	movs	r2, #0
 800759a:	2104      	movs	r1, #4
 800759c:	f7ff ff94 	bl	80074c8 <std>
 80075a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075a4:	2201      	movs	r2, #1
 80075a6:	2109      	movs	r1, #9
 80075a8:	f7ff ff8e 	bl	80074c8 <std>
 80075ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075b0:	2202      	movs	r2, #2
 80075b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b6:	2112      	movs	r1, #18
 80075b8:	f7ff bf86 	b.w	80074c8 <std>
 80075bc:	20040e30 	.word	0x20040e30
 80075c0:	20040cf8 	.word	0x20040cf8
 80075c4:	08007535 	.word	0x08007535

080075c8 <__sfp_lock_acquire>:
 80075c8:	4801      	ldr	r0, [pc, #4]	@ (80075d0 <__sfp_lock_acquire+0x8>)
 80075ca:	f000 b944 	b.w	8007856 <__retarget_lock_acquire_recursive>
 80075ce:	bf00      	nop
 80075d0:	20040e39 	.word	0x20040e39

080075d4 <__sfp_lock_release>:
 80075d4:	4801      	ldr	r0, [pc, #4]	@ (80075dc <__sfp_lock_release+0x8>)
 80075d6:	f000 b93f 	b.w	8007858 <__retarget_lock_release_recursive>
 80075da:	bf00      	nop
 80075dc:	20040e39 	.word	0x20040e39

080075e0 <__sinit>:
 80075e0:	b510      	push	{r4, lr}
 80075e2:	4604      	mov	r4, r0
 80075e4:	f7ff fff0 	bl	80075c8 <__sfp_lock_acquire>
 80075e8:	6a23      	ldr	r3, [r4, #32]
 80075ea:	b11b      	cbz	r3, 80075f4 <__sinit+0x14>
 80075ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f0:	f7ff bff0 	b.w	80075d4 <__sfp_lock_release>
 80075f4:	4b04      	ldr	r3, [pc, #16]	@ (8007608 <__sinit+0x28>)
 80075f6:	6223      	str	r3, [r4, #32]
 80075f8:	4b04      	ldr	r3, [pc, #16]	@ (800760c <__sinit+0x2c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1f5      	bne.n	80075ec <__sinit+0xc>
 8007600:	f7ff ffc4 	bl	800758c <global_stdio_init.part.0>
 8007604:	e7f2      	b.n	80075ec <__sinit+0xc>
 8007606:	bf00      	nop
 8007608:	0800754d 	.word	0x0800754d
 800760c:	20040e30 	.word	0x20040e30

08007610 <_fwalk_sglue>:
 8007610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007614:	4607      	mov	r7, r0
 8007616:	4688      	mov	r8, r1
 8007618:	4614      	mov	r4, r2
 800761a:	2600      	movs	r6, #0
 800761c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007620:	f1b9 0901 	subs.w	r9, r9, #1
 8007624:	d505      	bpl.n	8007632 <_fwalk_sglue+0x22>
 8007626:	6824      	ldr	r4, [r4, #0]
 8007628:	2c00      	cmp	r4, #0
 800762a:	d1f7      	bne.n	800761c <_fwalk_sglue+0xc>
 800762c:	4630      	mov	r0, r6
 800762e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007632:	89ab      	ldrh	r3, [r5, #12]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d907      	bls.n	8007648 <_fwalk_sglue+0x38>
 8007638:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800763c:	3301      	adds	r3, #1
 800763e:	d003      	beq.n	8007648 <_fwalk_sglue+0x38>
 8007640:	4629      	mov	r1, r5
 8007642:	4638      	mov	r0, r7
 8007644:	47c0      	blx	r8
 8007646:	4306      	orrs	r6, r0
 8007648:	3568      	adds	r5, #104	@ 0x68
 800764a:	e7e9      	b.n	8007620 <_fwalk_sglue+0x10>

0800764c <iprintf>:
 800764c:	b40f      	push	{r0, r1, r2, r3}
 800764e:	b507      	push	{r0, r1, r2, lr}
 8007650:	4906      	ldr	r1, [pc, #24]	@ (800766c <iprintf+0x20>)
 8007652:	ab04      	add	r3, sp, #16
 8007654:	6808      	ldr	r0, [r1, #0]
 8007656:	f853 2b04 	ldr.w	r2, [r3], #4
 800765a:	6881      	ldr	r1, [r0, #8]
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	f002 fc77 	bl	8009f50 <_vfiprintf_r>
 8007662:	b003      	add	sp, #12
 8007664:	f85d eb04 	ldr.w	lr, [sp], #4
 8007668:	b004      	add	sp, #16
 800766a:	4770      	bx	lr
 800766c:	200400c0 	.word	0x200400c0

08007670 <siprintf>:
 8007670:	b40e      	push	{r1, r2, r3}
 8007672:	b510      	push	{r4, lr}
 8007674:	b09d      	sub	sp, #116	@ 0x74
 8007676:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007678:	9002      	str	r0, [sp, #8]
 800767a:	9006      	str	r0, [sp, #24]
 800767c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007680:	480a      	ldr	r0, [pc, #40]	@ (80076ac <siprintf+0x3c>)
 8007682:	9107      	str	r1, [sp, #28]
 8007684:	9104      	str	r1, [sp, #16]
 8007686:	490a      	ldr	r1, [pc, #40]	@ (80076b0 <siprintf+0x40>)
 8007688:	f853 2b04 	ldr.w	r2, [r3], #4
 800768c:	9105      	str	r1, [sp, #20]
 800768e:	2400      	movs	r4, #0
 8007690:	a902      	add	r1, sp, #8
 8007692:	6800      	ldr	r0, [r0, #0]
 8007694:	9301      	str	r3, [sp, #4]
 8007696:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007698:	f002 fb34 	bl	8009d04 <_svfiprintf_r>
 800769c:	9b02      	ldr	r3, [sp, #8]
 800769e:	701c      	strb	r4, [r3, #0]
 80076a0:	b01d      	add	sp, #116	@ 0x74
 80076a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a6:	b003      	add	sp, #12
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	200400c0 	.word	0x200400c0
 80076b0:	ffff0208 	.word	0xffff0208

080076b4 <__sread>:
 80076b4:	b510      	push	{r4, lr}
 80076b6:	460c      	mov	r4, r1
 80076b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076bc:	f000 f86c 	bl	8007798 <_read_r>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	bfab      	itete	ge
 80076c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076c6:	89a3      	ldrhlt	r3, [r4, #12]
 80076c8:	181b      	addge	r3, r3, r0
 80076ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076ce:	bfac      	ite	ge
 80076d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076d2:	81a3      	strhlt	r3, [r4, #12]
 80076d4:	bd10      	pop	{r4, pc}

080076d6 <__swrite>:
 80076d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076da:	461f      	mov	r7, r3
 80076dc:	898b      	ldrh	r3, [r1, #12]
 80076de:	05db      	lsls	r3, r3, #23
 80076e0:	4605      	mov	r5, r0
 80076e2:	460c      	mov	r4, r1
 80076e4:	4616      	mov	r6, r2
 80076e6:	d505      	bpl.n	80076f4 <__swrite+0x1e>
 80076e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ec:	2302      	movs	r3, #2
 80076ee:	2200      	movs	r2, #0
 80076f0:	f000 f840 	bl	8007774 <_lseek_r>
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076fe:	81a3      	strh	r3, [r4, #12]
 8007700:	4632      	mov	r2, r6
 8007702:	463b      	mov	r3, r7
 8007704:	4628      	mov	r0, r5
 8007706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800770a:	f000 b867 	b.w	80077dc <_write_r>

0800770e <__sseek>:
 800770e:	b510      	push	{r4, lr}
 8007710:	460c      	mov	r4, r1
 8007712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007716:	f000 f82d 	bl	8007774 <_lseek_r>
 800771a:	1c43      	adds	r3, r0, #1
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	bf15      	itete	ne
 8007720:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007722:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007726:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800772a:	81a3      	strheq	r3, [r4, #12]
 800772c:	bf18      	it	ne
 800772e:	81a3      	strhne	r3, [r4, #12]
 8007730:	bd10      	pop	{r4, pc}

08007732 <__sclose>:
 8007732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007736:	f000 b80d 	b.w	8007754 <_close_r>

0800773a <memset>:
 800773a:	4402      	add	r2, r0
 800773c:	4603      	mov	r3, r0
 800773e:	4293      	cmp	r3, r2
 8007740:	d100      	bne.n	8007744 <memset+0xa>
 8007742:	4770      	bx	lr
 8007744:	f803 1b01 	strb.w	r1, [r3], #1
 8007748:	e7f9      	b.n	800773e <memset+0x4>
	...

0800774c <_localeconv_r>:
 800774c:	4800      	ldr	r0, [pc, #0]	@ (8007750 <_localeconv_r+0x4>)
 800774e:	4770      	bx	lr
 8007750:	20040200 	.word	0x20040200

08007754 <_close_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	4d06      	ldr	r5, [pc, #24]	@ (8007770 <_close_r+0x1c>)
 8007758:	2300      	movs	r3, #0
 800775a:	4604      	mov	r4, r0
 800775c:	4608      	mov	r0, r1
 800775e:	602b      	str	r3, [r5, #0]
 8007760:	f7fb fa33 	bl	8002bca <_close>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	d102      	bne.n	800776e <_close_r+0x1a>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	b103      	cbz	r3, 800776e <_close_r+0x1a>
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	bd38      	pop	{r3, r4, r5, pc}
 8007770:	20040e34 	.word	0x20040e34

08007774 <_lseek_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d07      	ldr	r5, [pc, #28]	@ (8007794 <_lseek_r+0x20>)
 8007778:	4604      	mov	r4, r0
 800777a:	4608      	mov	r0, r1
 800777c:	4611      	mov	r1, r2
 800777e:	2200      	movs	r2, #0
 8007780:	602a      	str	r2, [r5, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	f7fb fa48 	bl	8002c18 <_lseek>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d102      	bne.n	8007792 <_lseek_r+0x1e>
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	b103      	cbz	r3, 8007792 <_lseek_r+0x1e>
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	bd38      	pop	{r3, r4, r5, pc}
 8007794:	20040e34 	.word	0x20040e34

08007798 <_read_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4d07      	ldr	r5, [pc, #28]	@ (80077b8 <_read_r+0x20>)
 800779c:	4604      	mov	r4, r0
 800779e:	4608      	mov	r0, r1
 80077a0:	4611      	mov	r1, r2
 80077a2:	2200      	movs	r2, #0
 80077a4:	602a      	str	r2, [r5, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	f7fb f9d6 	bl	8002b58 <_read>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d102      	bne.n	80077b6 <_read_r+0x1e>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	b103      	cbz	r3, 80077b6 <_read_r+0x1e>
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	20040e34 	.word	0x20040e34

080077bc <_sbrk_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	4d06      	ldr	r5, [pc, #24]	@ (80077d8 <_sbrk_r+0x1c>)
 80077c0:	2300      	movs	r3, #0
 80077c2:	4604      	mov	r4, r0
 80077c4:	4608      	mov	r0, r1
 80077c6:	602b      	str	r3, [r5, #0]
 80077c8:	f7fb fa34 	bl	8002c34 <_sbrk>
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	d102      	bne.n	80077d6 <_sbrk_r+0x1a>
 80077d0:	682b      	ldr	r3, [r5, #0]
 80077d2:	b103      	cbz	r3, 80077d6 <_sbrk_r+0x1a>
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	bd38      	pop	{r3, r4, r5, pc}
 80077d8:	20040e34 	.word	0x20040e34

080077dc <_write_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4d07      	ldr	r5, [pc, #28]	@ (80077fc <_write_r+0x20>)
 80077e0:	4604      	mov	r4, r0
 80077e2:	4608      	mov	r0, r1
 80077e4:	4611      	mov	r1, r2
 80077e6:	2200      	movs	r2, #0
 80077e8:	602a      	str	r2, [r5, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	f7fb f9d1 	bl	8002b92 <_write>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d102      	bne.n	80077fa <_write_r+0x1e>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	b103      	cbz	r3, 80077fa <_write_r+0x1e>
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	20040e34 	.word	0x20040e34

08007800 <__errno>:
 8007800:	4b01      	ldr	r3, [pc, #4]	@ (8007808 <__errno+0x8>)
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	200400c0 	.word	0x200400c0

0800780c <__libc_init_array>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	4d0d      	ldr	r5, [pc, #52]	@ (8007844 <__libc_init_array+0x38>)
 8007810:	4c0d      	ldr	r4, [pc, #52]	@ (8007848 <__libc_init_array+0x3c>)
 8007812:	1b64      	subs	r4, r4, r5
 8007814:	10a4      	asrs	r4, r4, #2
 8007816:	2600      	movs	r6, #0
 8007818:	42a6      	cmp	r6, r4
 800781a:	d109      	bne.n	8007830 <__libc_init_array+0x24>
 800781c:	4d0b      	ldr	r5, [pc, #44]	@ (800784c <__libc_init_array+0x40>)
 800781e:	4c0c      	ldr	r4, [pc, #48]	@ (8007850 <__libc_init_array+0x44>)
 8007820:	f003 fab2 	bl	800ad88 <_init>
 8007824:	1b64      	subs	r4, r4, r5
 8007826:	10a4      	asrs	r4, r4, #2
 8007828:	2600      	movs	r6, #0
 800782a:	42a6      	cmp	r6, r4
 800782c:	d105      	bne.n	800783a <__libc_init_array+0x2e>
 800782e:	bd70      	pop	{r4, r5, r6, pc}
 8007830:	f855 3b04 	ldr.w	r3, [r5], #4
 8007834:	4798      	blx	r3
 8007836:	3601      	adds	r6, #1
 8007838:	e7ee      	b.n	8007818 <__libc_init_array+0xc>
 800783a:	f855 3b04 	ldr.w	r3, [r5], #4
 800783e:	4798      	blx	r3
 8007840:	3601      	adds	r6, #1
 8007842:	e7f2      	b.n	800782a <__libc_init_array+0x1e>
 8007844:	0800b334 	.word	0x0800b334
 8007848:	0800b334 	.word	0x0800b334
 800784c:	0800b334 	.word	0x0800b334
 8007850:	0800b33c 	.word	0x0800b33c

08007854 <__retarget_lock_init_recursive>:
 8007854:	4770      	bx	lr

08007856 <__retarget_lock_acquire_recursive>:
 8007856:	4770      	bx	lr

08007858 <__retarget_lock_release_recursive>:
 8007858:	4770      	bx	lr
	...

0800785c <nanf>:
 800785c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007864 <nanf+0x8>
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	7fc00000 	.word	0x7fc00000

08007868 <__assert_func>:
 8007868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800786a:	4614      	mov	r4, r2
 800786c:	461a      	mov	r2, r3
 800786e:	4b09      	ldr	r3, [pc, #36]	@ (8007894 <__assert_func+0x2c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4605      	mov	r5, r0
 8007874:	68d8      	ldr	r0, [r3, #12]
 8007876:	b14c      	cbz	r4, 800788c <__assert_func+0x24>
 8007878:	4b07      	ldr	r3, [pc, #28]	@ (8007898 <__assert_func+0x30>)
 800787a:	9100      	str	r1, [sp, #0]
 800787c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007880:	4906      	ldr	r1, [pc, #24]	@ (800789c <__assert_func+0x34>)
 8007882:	462b      	mov	r3, r5
 8007884:	f002 fd28 	bl	800a2d8 <fiprintf>
 8007888:	f002 fe0e 	bl	800a4a8 <abort>
 800788c:	4b04      	ldr	r3, [pc, #16]	@ (80078a0 <__assert_func+0x38>)
 800788e:	461c      	mov	r4, r3
 8007890:	e7f3      	b.n	800787a <__assert_func+0x12>
 8007892:	bf00      	nop
 8007894:	200400c0 	.word	0x200400c0
 8007898:	0800af50 	.word	0x0800af50
 800789c:	0800af5d 	.word	0x0800af5d
 80078a0:	0800af8b 	.word	0x0800af8b

080078a4 <quorem>:
 80078a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a8:	6903      	ldr	r3, [r0, #16]
 80078aa:	690c      	ldr	r4, [r1, #16]
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	4607      	mov	r7, r0
 80078b0:	db7e      	blt.n	80079b0 <quorem+0x10c>
 80078b2:	3c01      	subs	r4, #1
 80078b4:	f101 0814 	add.w	r8, r1, #20
 80078b8:	00a3      	lsls	r3, r4, #2
 80078ba:	f100 0514 	add.w	r5, r0, #20
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078ce:	3301      	adds	r3, #1
 80078d0:	429a      	cmp	r2, r3
 80078d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80078da:	d32e      	bcc.n	800793a <quorem+0x96>
 80078dc:	f04f 0a00 	mov.w	sl, #0
 80078e0:	46c4      	mov	ip, r8
 80078e2:	46ae      	mov	lr, r5
 80078e4:	46d3      	mov	fp, sl
 80078e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80078ea:	b298      	uxth	r0, r3
 80078ec:	fb06 a000 	mla	r0, r6, r0, sl
 80078f0:	0c02      	lsrs	r2, r0, #16
 80078f2:	0c1b      	lsrs	r3, r3, #16
 80078f4:	fb06 2303 	mla	r3, r6, r3, r2
 80078f8:	f8de 2000 	ldr.w	r2, [lr]
 80078fc:	b280      	uxth	r0, r0
 80078fe:	b292      	uxth	r2, r2
 8007900:	1a12      	subs	r2, r2, r0
 8007902:	445a      	add	r2, fp
 8007904:	f8de 0000 	ldr.w	r0, [lr]
 8007908:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800790c:	b29b      	uxth	r3, r3
 800790e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007912:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007916:	b292      	uxth	r2, r2
 8007918:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800791c:	45e1      	cmp	r9, ip
 800791e:	f84e 2b04 	str.w	r2, [lr], #4
 8007922:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007926:	d2de      	bcs.n	80078e6 <quorem+0x42>
 8007928:	9b00      	ldr	r3, [sp, #0]
 800792a:	58eb      	ldr	r3, [r5, r3]
 800792c:	b92b      	cbnz	r3, 800793a <quorem+0x96>
 800792e:	9b01      	ldr	r3, [sp, #4]
 8007930:	3b04      	subs	r3, #4
 8007932:	429d      	cmp	r5, r3
 8007934:	461a      	mov	r2, r3
 8007936:	d32f      	bcc.n	8007998 <quorem+0xf4>
 8007938:	613c      	str	r4, [r7, #16]
 800793a:	4638      	mov	r0, r7
 800793c:	f001 f912 	bl	8008b64 <__mcmp>
 8007940:	2800      	cmp	r0, #0
 8007942:	db25      	blt.n	8007990 <quorem+0xec>
 8007944:	4629      	mov	r1, r5
 8007946:	2000      	movs	r0, #0
 8007948:	f858 2b04 	ldr.w	r2, [r8], #4
 800794c:	f8d1 c000 	ldr.w	ip, [r1]
 8007950:	fa1f fe82 	uxth.w	lr, r2
 8007954:	fa1f f38c 	uxth.w	r3, ip
 8007958:	eba3 030e 	sub.w	r3, r3, lr
 800795c:	4403      	add	r3, r0
 800795e:	0c12      	lsrs	r2, r2, #16
 8007960:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007964:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007968:	b29b      	uxth	r3, r3
 800796a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800796e:	45c1      	cmp	r9, r8
 8007970:	f841 3b04 	str.w	r3, [r1], #4
 8007974:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007978:	d2e6      	bcs.n	8007948 <quorem+0xa4>
 800797a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800797e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007982:	b922      	cbnz	r2, 800798e <quorem+0xea>
 8007984:	3b04      	subs	r3, #4
 8007986:	429d      	cmp	r5, r3
 8007988:	461a      	mov	r2, r3
 800798a:	d30b      	bcc.n	80079a4 <quorem+0x100>
 800798c:	613c      	str	r4, [r7, #16]
 800798e:	3601      	adds	r6, #1
 8007990:	4630      	mov	r0, r6
 8007992:	b003      	add	sp, #12
 8007994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007998:	6812      	ldr	r2, [r2, #0]
 800799a:	3b04      	subs	r3, #4
 800799c:	2a00      	cmp	r2, #0
 800799e:	d1cb      	bne.n	8007938 <quorem+0x94>
 80079a0:	3c01      	subs	r4, #1
 80079a2:	e7c6      	b.n	8007932 <quorem+0x8e>
 80079a4:	6812      	ldr	r2, [r2, #0]
 80079a6:	3b04      	subs	r3, #4
 80079a8:	2a00      	cmp	r2, #0
 80079aa:	d1ef      	bne.n	800798c <quorem+0xe8>
 80079ac:	3c01      	subs	r4, #1
 80079ae:	e7ea      	b.n	8007986 <quorem+0xe2>
 80079b0:	2000      	movs	r0, #0
 80079b2:	e7ee      	b.n	8007992 <quorem+0xee>
 80079b4:	0000      	movs	r0, r0
	...

080079b8 <_dtoa_r>:
 80079b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079bc:	69c7      	ldr	r7, [r0, #28]
 80079be:	b097      	sub	sp, #92	@ 0x5c
 80079c0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80079c4:	ec55 4b10 	vmov	r4, r5, d0
 80079c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80079ca:	9107      	str	r1, [sp, #28]
 80079cc:	4681      	mov	r9, r0
 80079ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80079d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80079d2:	b97f      	cbnz	r7, 80079f4 <_dtoa_r+0x3c>
 80079d4:	2010      	movs	r0, #16
 80079d6:	f7fe fde9 	bl	80065ac <malloc>
 80079da:	4602      	mov	r2, r0
 80079dc:	f8c9 001c 	str.w	r0, [r9, #28]
 80079e0:	b920      	cbnz	r0, 80079ec <_dtoa_r+0x34>
 80079e2:	4ba9      	ldr	r3, [pc, #676]	@ (8007c88 <_dtoa_r+0x2d0>)
 80079e4:	21ef      	movs	r1, #239	@ 0xef
 80079e6:	48a9      	ldr	r0, [pc, #676]	@ (8007c8c <_dtoa_r+0x2d4>)
 80079e8:	f7ff ff3e 	bl	8007868 <__assert_func>
 80079ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80079f0:	6007      	str	r7, [r0, #0]
 80079f2:	60c7      	str	r7, [r0, #12]
 80079f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80079f8:	6819      	ldr	r1, [r3, #0]
 80079fa:	b159      	cbz	r1, 8007a14 <_dtoa_r+0x5c>
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	604a      	str	r2, [r1, #4]
 8007a00:	2301      	movs	r3, #1
 8007a02:	4093      	lsls	r3, r2
 8007a04:	608b      	str	r3, [r1, #8]
 8007a06:	4648      	mov	r0, r9
 8007a08:	f000 fe30 	bl	800866c <_Bfree>
 8007a0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a10:	2200      	movs	r2, #0
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	1e2b      	subs	r3, r5, #0
 8007a16:	bfb9      	ittee	lt
 8007a18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a1c:	9305      	strlt	r3, [sp, #20]
 8007a1e:	2300      	movge	r3, #0
 8007a20:	6033      	strge	r3, [r6, #0]
 8007a22:	9f05      	ldr	r7, [sp, #20]
 8007a24:	4b9a      	ldr	r3, [pc, #616]	@ (8007c90 <_dtoa_r+0x2d8>)
 8007a26:	bfbc      	itt	lt
 8007a28:	2201      	movlt	r2, #1
 8007a2a:	6032      	strlt	r2, [r6, #0]
 8007a2c:	43bb      	bics	r3, r7
 8007a2e:	d112      	bne.n	8007a56 <_dtoa_r+0x9e>
 8007a30:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a3c:	4323      	orrs	r3, r4
 8007a3e:	f000 855a 	beq.w	80084f6 <_dtoa_r+0xb3e>
 8007a42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a44:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007ca4 <_dtoa_r+0x2ec>
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 855c 	beq.w	8008506 <_dtoa_r+0xb4e>
 8007a4e:	f10a 0303 	add.w	r3, sl, #3
 8007a52:	f000 bd56 	b.w	8008502 <_dtoa_r+0xb4a>
 8007a56:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	ec51 0b17 	vmov	r0, r1, d7
 8007a60:	2300      	movs	r3, #0
 8007a62:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007a66:	f7f9 f847 	bl	8000af8 <__aeabi_dcmpeq>
 8007a6a:	4680      	mov	r8, r0
 8007a6c:	b158      	cbz	r0, 8007a86 <_dtoa_r+0xce>
 8007a6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a70:	2301      	movs	r3, #1
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a76:	b113      	cbz	r3, 8007a7e <_dtoa_r+0xc6>
 8007a78:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007a7a:	4b86      	ldr	r3, [pc, #536]	@ (8007c94 <_dtoa_r+0x2dc>)
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007ca8 <_dtoa_r+0x2f0>
 8007a82:	f000 bd40 	b.w	8008506 <_dtoa_r+0xb4e>
 8007a86:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007a8a:	aa14      	add	r2, sp, #80	@ 0x50
 8007a8c:	a915      	add	r1, sp, #84	@ 0x54
 8007a8e:	4648      	mov	r0, r9
 8007a90:	f001 f988 	bl	8008da4 <__d2b>
 8007a94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007a98:	9002      	str	r0, [sp, #8]
 8007a9a:	2e00      	cmp	r6, #0
 8007a9c:	d078      	beq.n	8007b90 <_dtoa_r+0x1d8>
 8007a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aa0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007aac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ab0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ab4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ab8:	4619      	mov	r1, r3
 8007aba:	2200      	movs	r2, #0
 8007abc:	4b76      	ldr	r3, [pc, #472]	@ (8007c98 <_dtoa_r+0x2e0>)
 8007abe:	f7f8 fbfb 	bl	80002b8 <__aeabi_dsub>
 8007ac2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007c70 <_dtoa_r+0x2b8>)
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	f7f8 fdae 	bl	8000628 <__aeabi_dmul>
 8007acc:	a36a      	add	r3, pc, #424	@ (adr r3, 8007c78 <_dtoa_r+0x2c0>)
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	f7f8 fbf3 	bl	80002bc <__adddf3>
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	4630      	mov	r0, r6
 8007ada:	460d      	mov	r5, r1
 8007adc:	f7f8 fd3a 	bl	8000554 <__aeabi_i2d>
 8007ae0:	a367      	add	r3, pc, #412	@ (adr r3, 8007c80 <_dtoa_r+0x2c8>)
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f7f8 fd9f 	bl	8000628 <__aeabi_dmul>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	4620      	mov	r0, r4
 8007af0:	4629      	mov	r1, r5
 8007af2:	f7f8 fbe3 	bl	80002bc <__adddf3>
 8007af6:	4604      	mov	r4, r0
 8007af8:	460d      	mov	r5, r1
 8007afa:	f7f9 f845 	bl	8000b88 <__aeabi_d2iz>
 8007afe:	2200      	movs	r2, #0
 8007b00:	4607      	mov	r7, r0
 8007b02:	2300      	movs	r3, #0
 8007b04:	4620      	mov	r0, r4
 8007b06:	4629      	mov	r1, r5
 8007b08:	f7f9 f800 	bl	8000b0c <__aeabi_dcmplt>
 8007b0c:	b140      	cbz	r0, 8007b20 <_dtoa_r+0x168>
 8007b0e:	4638      	mov	r0, r7
 8007b10:	f7f8 fd20 	bl	8000554 <__aeabi_i2d>
 8007b14:	4622      	mov	r2, r4
 8007b16:	462b      	mov	r3, r5
 8007b18:	f7f8 ffee 	bl	8000af8 <__aeabi_dcmpeq>
 8007b1c:	b900      	cbnz	r0, 8007b20 <_dtoa_r+0x168>
 8007b1e:	3f01      	subs	r7, #1
 8007b20:	2f16      	cmp	r7, #22
 8007b22:	d852      	bhi.n	8007bca <_dtoa_r+0x212>
 8007b24:	4b5d      	ldr	r3, [pc, #372]	@ (8007c9c <_dtoa_r+0x2e4>)
 8007b26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b32:	f7f8 ffeb 	bl	8000b0c <__aeabi_dcmplt>
 8007b36:	2800      	cmp	r0, #0
 8007b38:	d049      	beq.n	8007bce <_dtoa_r+0x216>
 8007b3a:	3f01      	subs	r7, #1
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b42:	1b9b      	subs	r3, r3, r6
 8007b44:	1e5a      	subs	r2, r3, #1
 8007b46:	bf45      	ittet	mi
 8007b48:	f1c3 0301 	rsbmi	r3, r3, #1
 8007b4c:	9300      	strmi	r3, [sp, #0]
 8007b4e:	2300      	movpl	r3, #0
 8007b50:	2300      	movmi	r3, #0
 8007b52:	9206      	str	r2, [sp, #24]
 8007b54:	bf54      	ite	pl
 8007b56:	9300      	strpl	r3, [sp, #0]
 8007b58:	9306      	strmi	r3, [sp, #24]
 8007b5a:	2f00      	cmp	r7, #0
 8007b5c:	db39      	blt.n	8007bd2 <_dtoa_r+0x21a>
 8007b5e:	9b06      	ldr	r3, [sp, #24]
 8007b60:	970d      	str	r7, [sp, #52]	@ 0x34
 8007b62:	443b      	add	r3, r7
 8007b64:	9306      	str	r3, [sp, #24]
 8007b66:	2300      	movs	r3, #0
 8007b68:	9308      	str	r3, [sp, #32]
 8007b6a:	9b07      	ldr	r3, [sp, #28]
 8007b6c:	2b09      	cmp	r3, #9
 8007b6e:	d863      	bhi.n	8007c38 <_dtoa_r+0x280>
 8007b70:	2b05      	cmp	r3, #5
 8007b72:	bfc4      	itt	gt
 8007b74:	3b04      	subgt	r3, #4
 8007b76:	9307      	strgt	r3, [sp, #28]
 8007b78:	9b07      	ldr	r3, [sp, #28]
 8007b7a:	f1a3 0302 	sub.w	r3, r3, #2
 8007b7e:	bfcc      	ite	gt
 8007b80:	2400      	movgt	r4, #0
 8007b82:	2401      	movle	r4, #1
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d863      	bhi.n	8007c50 <_dtoa_r+0x298>
 8007b88:	e8df f003 	tbb	[pc, r3]
 8007b8c:	2b375452 	.word	0x2b375452
 8007b90:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007b94:	441e      	add	r6, r3
 8007b96:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	bfc1      	itttt	gt
 8007b9e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007ba2:	409f      	lslgt	r7, r3
 8007ba4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007ba8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007bac:	bfd6      	itet	le
 8007bae:	f1c3 0320 	rsble	r3, r3, #32
 8007bb2:	ea47 0003 	orrgt.w	r0, r7, r3
 8007bb6:	fa04 f003 	lslle.w	r0, r4, r3
 8007bba:	f7f8 fcbb 	bl	8000534 <__aeabi_ui2d>
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007bc4:	3e01      	subs	r6, #1
 8007bc6:	9212      	str	r2, [sp, #72]	@ 0x48
 8007bc8:	e776      	b.n	8007ab8 <_dtoa_r+0x100>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e7b7      	b.n	8007b3e <_dtoa_r+0x186>
 8007bce:	9010      	str	r0, [sp, #64]	@ 0x40
 8007bd0:	e7b6      	b.n	8007b40 <_dtoa_r+0x188>
 8007bd2:	9b00      	ldr	r3, [sp, #0]
 8007bd4:	1bdb      	subs	r3, r3, r7
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	427b      	negs	r3, r7
 8007bda:	9308      	str	r3, [sp, #32]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	930d      	str	r3, [sp, #52]	@ 0x34
 8007be0:	e7c3      	b.n	8007b6a <_dtoa_r+0x1b2>
 8007be2:	2301      	movs	r3, #1
 8007be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007be6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007be8:	eb07 0b03 	add.w	fp, r7, r3
 8007bec:	f10b 0301 	add.w	r3, fp, #1
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	9303      	str	r3, [sp, #12]
 8007bf4:	bfb8      	it	lt
 8007bf6:	2301      	movlt	r3, #1
 8007bf8:	e006      	b.n	8007c08 <_dtoa_r+0x250>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	dd28      	ble.n	8007c56 <_dtoa_r+0x29e>
 8007c04:	469b      	mov	fp, r3
 8007c06:	9303      	str	r3, [sp, #12]
 8007c08:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	2204      	movs	r2, #4
 8007c10:	f102 0514 	add.w	r5, r2, #20
 8007c14:	429d      	cmp	r5, r3
 8007c16:	d926      	bls.n	8007c66 <_dtoa_r+0x2ae>
 8007c18:	6041      	str	r1, [r0, #4]
 8007c1a:	4648      	mov	r0, r9
 8007c1c:	f000 fce6 	bl	80085ec <_Balloc>
 8007c20:	4682      	mov	sl, r0
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d142      	bne.n	8007cac <_dtoa_r+0x2f4>
 8007c26:	4b1e      	ldr	r3, [pc, #120]	@ (8007ca0 <_dtoa_r+0x2e8>)
 8007c28:	4602      	mov	r2, r0
 8007c2a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c2e:	e6da      	b.n	80079e6 <_dtoa_r+0x2e>
 8007c30:	2300      	movs	r3, #0
 8007c32:	e7e3      	b.n	8007bfc <_dtoa_r+0x244>
 8007c34:	2300      	movs	r3, #0
 8007c36:	e7d5      	b.n	8007be4 <_dtoa_r+0x22c>
 8007c38:	2401      	movs	r4, #1
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	9307      	str	r3, [sp, #28]
 8007c3e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007c40:	f04f 3bff 	mov.w	fp, #4294967295
 8007c44:	2200      	movs	r2, #0
 8007c46:	f8cd b00c 	str.w	fp, [sp, #12]
 8007c4a:	2312      	movs	r3, #18
 8007c4c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c4e:	e7db      	b.n	8007c08 <_dtoa_r+0x250>
 8007c50:	2301      	movs	r3, #1
 8007c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c54:	e7f4      	b.n	8007c40 <_dtoa_r+0x288>
 8007c56:	f04f 0b01 	mov.w	fp, #1
 8007c5a:	f8cd b00c 	str.w	fp, [sp, #12]
 8007c5e:	465b      	mov	r3, fp
 8007c60:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007c64:	e7d0      	b.n	8007c08 <_dtoa_r+0x250>
 8007c66:	3101      	adds	r1, #1
 8007c68:	0052      	lsls	r2, r2, #1
 8007c6a:	e7d1      	b.n	8007c10 <_dtoa_r+0x258>
 8007c6c:	f3af 8000 	nop.w
 8007c70:	636f4361 	.word	0x636f4361
 8007c74:	3fd287a7 	.word	0x3fd287a7
 8007c78:	8b60c8b3 	.word	0x8b60c8b3
 8007c7c:	3fc68a28 	.word	0x3fc68a28
 8007c80:	509f79fb 	.word	0x509f79fb
 8007c84:	3fd34413 	.word	0x3fd34413
 8007c88:	0800aea8 	.word	0x0800aea8
 8007c8c:	0800af99 	.word	0x0800af99
 8007c90:	7ff00000 	.word	0x7ff00000
 8007c94:	0800af28 	.word	0x0800af28
 8007c98:	3ff80000 	.word	0x3ff80000
 8007c9c:	0800b110 	.word	0x0800b110
 8007ca0:	0800aff1 	.word	0x0800aff1
 8007ca4:	0800af95 	.word	0x0800af95
 8007ca8:	0800af27 	.word	0x0800af27
 8007cac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007cb0:	6018      	str	r0, [r3, #0]
 8007cb2:	9b03      	ldr	r3, [sp, #12]
 8007cb4:	2b0e      	cmp	r3, #14
 8007cb6:	f200 80a1 	bhi.w	8007dfc <_dtoa_r+0x444>
 8007cba:	2c00      	cmp	r4, #0
 8007cbc:	f000 809e 	beq.w	8007dfc <_dtoa_r+0x444>
 8007cc0:	2f00      	cmp	r7, #0
 8007cc2:	dd33      	ble.n	8007d2c <_dtoa_r+0x374>
 8007cc4:	4b9c      	ldr	r3, [pc, #624]	@ (8007f38 <_dtoa_r+0x580>)
 8007cc6:	f007 020f 	and.w	r2, r7, #15
 8007cca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cce:	ed93 7b00 	vldr	d7, [r3]
 8007cd2:	05f8      	lsls	r0, r7, #23
 8007cd4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007cd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007cdc:	d516      	bpl.n	8007d0c <_dtoa_r+0x354>
 8007cde:	4b97      	ldr	r3, [pc, #604]	@ (8007f3c <_dtoa_r+0x584>)
 8007ce0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007ce4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ce8:	f7f8 fdc8 	bl	800087c <__aeabi_ddiv>
 8007cec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cf0:	f004 040f 	and.w	r4, r4, #15
 8007cf4:	2603      	movs	r6, #3
 8007cf6:	4d91      	ldr	r5, [pc, #580]	@ (8007f3c <_dtoa_r+0x584>)
 8007cf8:	b954      	cbnz	r4, 8007d10 <_dtoa_r+0x358>
 8007cfa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007cfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d02:	f7f8 fdbb 	bl	800087c <__aeabi_ddiv>
 8007d06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d0a:	e028      	b.n	8007d5e <_dtoa_r+0x3a6>
 8007d0c:	2602      	movs	r6, #2
 8007d0e:	e7f2      	b.n	8007cf6 <_dtoa_r+0x33e>
 8007d10:	07e1      	lsls	r1, r4, #31
 8007d12:	d508      	bpl.n	8007d26 <_dtoa_r+0x36e>
 8007d14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d1c:	f7f8 fc84 	bl	8000628 <__aeabi_dmul>
 8007d20:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d24:	3601      	adds	r6, #1
 8007d26:	1064      	asrs	r4, r4, #1
 8007d28:	3508      	adds	r5, #8
 8007d2a:	e7e5      	b.n	8007cf8 <_dtoa_r+0x340>
 8007d2c:	f000 80af 	beq.w	8007e8e <_dtoa_r+0x4d6>
 8007d30:	427c      	negs	r4, r7
 8007d32:	4b81      	ldr	r3, [pc, #516]	@ (8007f38 <_dtoa_r+0x580>)
 8007d34:	4d81      	ldr	r5, [pc, #516]	@ (8007f3c <_dtoa_r+0x584>)
 8007d36:	f004 020f 	and.w	r2, r4, #15
 8007d3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d46:	f7f8 fc6f 	bl	8000628 <__aeabi_dmul>
 8007d4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d4e:	1124      	asrs	r4, r4, #4
 8007d50:	2300      	movs	r3, #0
 8007d52:	2602      	movs	r6, #2
 8007d54:	2c00      	cmp	r4, #0
 8007d56:	f040 808f 	bne.w	8007e78 <_dtoa_r+0x4c0>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1d3      	bne.n	8007d06 <_dtoa_r+0x34e>
 8007d5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d60:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 8094 	beq.w	8007e92 <_dtoa_r+0x4da>
 8007d6a:	4b75      	ldr	r3, [pc, #468]	@ (8007f40 <_dtoa_r+0x588>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	4620      	mov	r0, r4
 8007d70:	4629      	mov	r1, r5
 8007d72:	f7f8 fecb 	bl	8000b0c <__aeabi_dcmplt>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f000 808b 	beq.w	8007e92 <_dtoa_r+0x4da>
 8007d7c:	9b03      	ldr	r3, [sp, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 8087 	beq.w	8007e92 <_dtoa_r+0x4da>
 8007d84:	f1bb 0f00 	cmp.w	fp, #0
 8007d88:	dd34      	ble.n	8007df4 <_dtoa_r+0x43c>
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	4b6d      	ldr	r3, [pc, #436]	@ (8007f44 <_dtoa_r+0x58c>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	4629      	mov	r1, r5
 8007d92:	f7f8 fc49 	bl	8000628 <__aeabi_dmul>
 8007d96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d9a:	f107 38ff 	add.w	r8, r7, #4294967295
 8007d9e:	3601      	adds	r6, #1
 8007da0:	465c      	mov	r4, fp
 8007da2:	4630      	mov	r0, r6
 8007da4:	f7f8 fbd6 	bl	8000554 <__aeabi_i2d>
 8007da8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dac:	f7f8 fc3c 	bl	8000628 <__aeabi_dmul>
 8007db0:	4b65      	ldr	r3, [pc, #404]	@ (8007f48 <_dtoa_r+0x590>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	f7f8 fa82 	bl	80002bc <__adddf3>
 8007db8:	4605      	mov	r5, r0
 8007dba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007dbe:	2c00      	cmp	r4, #0
 8007dc0:	d16a      	bne.n	8007e98 <_dtoa_r+0x4e0>
 8007dc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dc6:	4b61      	ldr	r3, [pc, #388]	@ (8007f4c <_dtoa_r+0x594>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f7f8 fa75 	bl	80002b8 <__aeabi_dsub>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007dd6:	462a      	mov	r2, r5
 8007dd8:	4633      	mov	r3, r6
 8007dda:	f7f8 feb5 	bl	8000b48 <__aeabi_dcmpgt>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	f040 8298 	bne.w	8008314 <_dtoa_r+0x95c>
 8007de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007de8:	462a      	mov	r2, r5
 8007dea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007dee:	f7f8 fe8d 	bl	8000b0c <__aeabi_dcmplt>
 8007df2:	bb38      	cbnz	r0, 8007e44 <_dtoa_r+0x48c>
 8007df4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007df8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007dfc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f2c0 8157 	blt.w	80080b2 <_dtoa_r+0x6fa>
 8007e04:	2f0e      	cmp	r7, #14
 8007e06:	f300 8154 	bgt.w	80080b2 <_dtoa_r+0x6fa>
 8007e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8007f38 <_dtoa_r+0x580>)
 8007e0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e10:	ed93 7b00 	vldr	d7, [r3]
 8007e14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	ed8d 7b00 	vstr	d7, [sp]
 8007e1c:	f280 80e5 	bge.w	8007fea <_dtoa_r+0x632>
 8007e20:	9b03      	ldr	r3, [sp, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f300 80e1 	bgt.w	8007fea <_dtoa_r+0x632>
 8007e28:	d10c      	bne.n	8007e44 <_dtoa_r+0x48c>
 8007e2a:	4b48      	ldr	r3, [pc, #288]	@ (8007f4c <_dtoa_r+0x594>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	ec51 0b17 	vmov	r0, r1, d7
 8007e32:	f7f8 fbf9 	bl	8000628 <__aeabi_dmul>
 8007e36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e3a:	f7f8 fe7b 	bl	8000b34 <__aeabi_dcmpge>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f000 8266 	beq.w	8008310 <_dtoa_r+0x958>
 8007e44:	2400      	movs	r4, #0
 8007e46:	4625      	mov	r5, r4
 8007e48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e4a:	4656      	mov	r6, sl
 8007e4c:	ea6f 0803 	mvn.w	r8, r3
 8007e50:	2700      	movs	r7, #0
 8007e52:	4621      	mov	r1, r4
 8007e54:	4648      	mov	r0, r9
 8007e56:	f000 fc09 	bl	800866c <_Bfree>
 8007e5a:	2d00      	cmp	r5, #0
 8007e5c:	f000 80bd 	beq.w	8007fda <_dtoa_r+0x622>
 8007e60:	b12f      	cbz	r7, 8007e6e <_dtoa_r+0x4b6>
 8007e62:	42af      	cmp	r7, r5
 8007e64:	d003      	beq.n	8007e6e <_dtoa_r+0x4b6>
 8007e66:	4639      	mov	r1, r7
 8007e68:	4648      	mov	r0, r9
 8007e6a:	f000 fbff 	bl	800866c <_Bfree>
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4648      	mov	r0, r9
 8007e72:	f000 fbfb 	bl	800866c <_Bfree>
 8007e76:	e0b0      	b.n	8007fda <_dtoa_r+0x622>
 8007e78:	07e2      	lsls	r2, r4, #31
 8007e7a:	d505      	bpl.n	8007e88 <_dtoa_r+0x4d0>
 8007e7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e80:	f7f8 fbd2 	bl	8000628 <__aeabi_dmul>
 8007e84:	3601      	adds	r6, #1
 8007e86:	2301      	movs	r3, #1
 8007e88:	1064      	asrs	r4, r4, #1
 8007e8a:	3508      	adds	r5, #8
 8007e8c:	e762      	b.n	8007d54 <_dtoa_r+0x39c>
 8007e8e:	2602      	movs	r6, #2
 8007e90:	e765      	b.n	8007d5e <_dtoa_r+0x3a6>
 8007e92:	9c03      	ldr	r4, [sp, #12]
 8007e94:	46b8      	mov	r8, r7
 8007e96:	e784      	b.n	8007da2 <_dtoa_r+0x3ea>
 8007e98:	4b27      	ldr	r3, [pc, #156]	@ (8007f38 <_dtoa_r+0x580>)
 8007e9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ea0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ea4:	4454      	add	r4, sl
 8007ea6:	2900      	cmp	r1, #0
 8007ea8:	d054      	beq.n	8007f54 <_dtoa_r+0x59c>
 8007eaa:	4929      	ldr	r1, [pc, #164]	@ (8007f50 <_dtoa_r+0x598>)
 8007eac:	2000      	movs	r0, #0
 8007eae:	f7f8 fce5 	bl	800087c <__aeabi_ddiv>
 8007eb2:	4633      	mov	r3, r6
 8007eb4:	462a      	mov	r2, r5
 8007eb6:	f7f8 f9ff 	bl	80002b8 <__aeabi_dsub>
 8007eba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007ebe:	4656      	mov	r6, sl
 8007ec0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ec4:	f7f8 fe60 	bl	8000b88 <__aeabi_d2iz>
 8007ec8:	4605      	mov	r5, r0
 8007eca:	f7f8 fb43 	bl	8000554 <__aeabi_i2d>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ed6:	f7f8 f9ef 	bl	80002b8 <__aeabi_dsub>
 8007eda:	3530      	adds	r5, #48	@ 0x30
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ee4:	f806 5b01 	strb.w	r5, [r6], #1
 8007ee8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007eec:	f7f8 fe0e 	bl	8000b0c <__aeabi_dcmplt>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d172      	bne.n	8007fda <_dtoa_r+0x622>
 8007ef4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ef8:	4911      	ldr	r1, [pc, #68]	@ (8007f40 <_dtoa_r+0x588>)
 8007efa:	2000      	movs	r0, #0
 8007efc:	f7f8 f9dc 	bl	80002b8 <__aeabi_dsub>
 8007f00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f04:	f7f8 fe02 	bl	8000b0c <__aeabi_dcmplt>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f040 80b4 	bne.w	8008076 <_dtoa_r+0x6be>
 8007f0e:	42a6      	cmp	r6, r4
 8007f10:	f43f af70 	beq.w	8007df4 <_dtoa_r+0x43c>
 8007f14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007f18:	4b0a      	ldr	r3, [pc, #40]	@ (8007f44 <_dtoa_r+0x58c>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f7f8 fb84 	bl	8000628 <__aeabi_dmul>
 8007f20:	4b08      	ldr	r3, [pc, #32]	@ (8007f44 <_dtoa_r+0x58c>)
 8007f22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f26:	2200      	movs	r2, #0
 8007f28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f2c:	f7f8 fb7c 	bl	8000628 <__aeabi_dmul>
 8007f30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f34:	e7c4      	b.n	8007ec0 <_dtoa_r+0x508>
 8007f36:	bf00      	nop
 8007f38:	0800b110 	.word	0x0800b110
 8007f3c:	0800b0e8 	.word	0x0800b0e8
 8007f40:	3ff00000 	.word	0x3ff00000
 8007f44:	40240000 	.word	0x40240000
 8007f48:	401c0000 	.word	0x401c0000
 8007f4c:	40140000 	.word	0x40140000
 8007f50:	3fe00000 	.word	0x3fe00000
 8007f54:	4631      	mov	r1, r6
 8007f56:	4628      	mov	r0, r5
 8007f58:	f7f8 fb66 	bl	8000628 <__aeabi_dmul>
 8007f5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f60:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007f62:	4656      	mov	r6, sl
 8007f64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f68:	f7f8 fe0e 	bl	8000b88 <__aeabi_d2iz>
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	f7f8 faf1 	bl	8000554 <__aeabi_i2d>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f7a:	f7f8 f99d 	bl	80002b8 <__aeabi_dsub>
 8007f7e:	3530      	adds	r5, #48	@ 0x30
 8007f80:	f806 5b01 	strb.w	r5, [r6], #1
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	42a6      	cmp	r6, r4
 8007f8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f8e:	f04f 0200 	mov.w	r2, #0
 8007f92:	d124      	bne.n	8007fde <_dtoa_r+0x626>
 8007f94:	4baf      	ldr	r3, [pc, #700]	@ (8008254 <_dtoa_r+0x89c>)
 8007f96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007f9a:	f7f8 f98f 	bl	80002bc <__adddf3>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fa6:	f7f8 fdcf 	bl	8000b48 <__aeabi_dcmpgt>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d163      	bne.n	8008076 <_dtoa_r+0x6be>
 8007fae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007fb2:	49a8      	ldr	r1, [pc, #672]	@ (8008254 <_dtoa_r+0x89c>)
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f7f8 f97f 	bl	80002b8 <__aeabi_dsub>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fc2:	f7f8 fda3 	bl	8000b0c <__aeabi_dcmplt>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	f43f af14 	beq.w	8007df4 <_dtoa_r+0x43c>
 8007fcc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007fce:	1e73      	subs	r3, r6, #1
 8007fd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fd2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fd6:	2b30      	cmp	r3, #48	@ 0x30
 8007fd8:	d0f8      	beq.n	8007fcc <_dtoa_r+0x614>
 8007fda:	4647      	mov	r7, r8
 8007fdc:	e03b      	b.n	8008056 <_dtoa_r+0x69e>
 8007fde:	4b9e      	ldr	r3, [pc, #632]	@ (8008258 <_dtoa_r+0x8a0>)
 8007fe0:	f7f8 fb22 	bl	8000628 <__aeabi_dmul>
 8007fe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fe8:	e7bc      	b.n	8007f64 <_dtoa_r+0x5ac>
 8007fea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007fee:	4656      	mov	r6, sl
 8007ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	f7f8 fc40 	bl	800087c <__aeabi_ddiv>
 8007ffc:	f7f8 fdc4 	bl	8000b88 <__aeabi_d2iz>
 8008000:	4680      	mov	r8, r0
 8008002:	f7f8 faa7 	bl	8000554 <__aeabi_i2d>
 8008006:	e9dd 2300 	ldrd	r2, r3, [sp]
 800800a:	f7f8 fb0d 	bl	8000628 <__aeabi_dmul>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4620      	mov	r0, r4
 8008014:	4629      	mov	r1, r5
 8008016:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800801a:	f7f8 f94d 	bl	80002b8 <__aeabi_dsub>
 800801e:	f806 4b01 	strb.w	r4, [r6], #1
 8008022:	9d03      	ldr	r5, [sp, #12]
 8008024:	eba6 040a 	sub.w	r4, r6, sl
 8008028:	42a5      	cmp	r5, r4
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	d133      	bne.n	8008098 <_dtoa_r+0x6e0>
 8008030:	f7f8 f944 	bl	80002bc <__adddf3>
 8008034:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008038:	4604      	mov	r4, r0
 800803a:	460d      	mov	r5, r1
 800803c:	f7f8 fd84 	bl	8000b48 <__aeabi_dcmpgt>
 8008040:	b9c0      	cbnz	r0, 8008074 <_dtoa_r+0x6bc>
 8008042:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008046:	4620      	mov	r0, r4
 8008048:	4629      	mov	r1, r5
 800804a:	f7f8 fd55 	bl	8000af8 <__aeabi_dcmpeq>
 800804e:	b110      	cbz	r0, 8008056 <_dtoa_r+0x69e>
 8008050:	f018 0f01 	tst.w	r8, #1
 8008054:	d10e      	bne.n	8008074 <_dtoa_r+0x6bc>
 8008056:	9902      	ldr	r1, [sp, #8]
 8008058:	4648      	mov	r0, r9
 800805a:	f000 fb07 	bl	800866c <_Bfree>
 800805e:	2300      	movs	r3, #0
 8008060:	7033      	strb	r3, [r6, #0]
 8008062:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008064:	3701      	adds	r7, #1
 8008066:	601f      	str	r7, [r3, #0]
 8008068:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 824b 	beq.w	8008506 <_dtoa_r+0xb4e>
 8008070:	601e      	str	r6, [r3, #0]
 8008072:	e248      	b.n	8008506 <_dtoa_r+0xb4e>
 8008074:	46b8      	mov	r8, r7
 8008076:	4633      	mov	r3, r6
 8008078:	461e      	mov	r6, r3
 800807a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800807e:	2a39      	cmp	r2, #57	@ 0x39
 8008080:	d106      	bne.n	8008090 <_dtoa_r+0x6d8>
 8008082:	459a      	cmp	sl, r3
 8008084:	d1f8      	bne.n	8008078 <_dtoa_r+0x6c0>
 8008086:	2230      	movs	r2, #48	@ 0x30
 8008088:	f108 0801 	add.w	r8, r8, #1
 800808c:	f88a 2000 	strb.w	r2, [sl]
 8008090:	781a      	ldrb	r2, [r3, #0]
 8008092:	3201      	adds	r2, #1
 8008094:	701a      	strb	r2, [r3, #0]
 8008096:	e7a0      	b.n	8007fda <_dtoa_r+0x622>
 8008098:	4b6f      	ldr	r3, [pc, #444]	@ (8008258 <_dtoa_r+0x8a0>)
 800809a:	2200      	movs	r2, #0
 800809c:	f7f8 fac4 	bl	8000628 <__aeabi_dmul>
 80080a0:	2200      	movs	r2, #0
 80080a2:	2300      	movs	r3, #0
 80080a4:	4604      	mov	r4, r0
 80080a6:	460d      	mov	r5, r1
 80080a8:	f7f8 fd26 	bl	8000af8 <__aeabi_dcmpeq>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d09f      	beq.n	8007ff0 <_dtoa_r+0x638>
 80080b0:	e7d1      	b.n	8008056 <_dtoa_r+0x69e>
 80080b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080b4:	2a00      	cmp	r2, #0
 80080b6:	f000 80ea 	beq.w	800828e <_dtoa_r+0x8d6>
 80080ba:	9a07      	ldr	r2, [sp, #28]
 80080bc:	2a01      	cmp	r2, #1
 80080be:	f300 80cd 	bgt.w	800825c <_dtoa_r+0x8a4>
 80080c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80080c4:	2a00      	cmp	r2, #0
 80080c6:	f000 80c1 	beq.w	800824c <_dtoa_r+0x894>
 80080ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80080ce:	9c08      	ldr	r4, [sp, #32]
 80080d0:	9e00      	ldr	r6, [sp, #0]
 80080d2:	9a00      	ldr	r2, [sp, #0]
 80080d4:	441a      	add	r2, r3
 80080d6:	9200      	str	r2, [sp, #0]
 80080d8:	9a06      	ldr	r2, [sp, #24]
 80080da:	2101      	movs	r1, #1
 80080dc:	441a      	add	r2, r3
 80080de:	4648      	mov	r0, r9
 80080e0:	9206      	str	r2, [sp, #24]
 80080e2:	f000 fbc1 	bl	8008868 <__i2b>
 80080e6:	4605      	mov	r5, r0
 80080e8:	b166      	cbz	r6, 8008104 <_dtoa_r+0x74c>
 80080ea:	9b06      	ldr	r3, [sp, #24]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	dd09      	ble.n	8008104 <_dtoa_r+0x74c>
 80080f0:	42b3      	cmp	r3, r6
 80080f2:	9a00      	ldr	r2, [sp, #0]
 80080f4:	bfa8      	it	ge
 80080f6:	4633      	movge	r3, r6
 80080f8:	1ad2      	subs	r2, r2, r3
 80080fa:	9200      	str	r2, [sp, #0]
 80080fc:	9a06      	ldr	r2, [sp, #24]
 80080fe:	1af6      	subs	r6, r6, r3
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	9306      	str	r3, [sp, #24]
 8008104:	9b08      	ldr	r3, [sp, #32]
 8008106:	b30b      	cbz	r3, 800814c <_dtoa_r+0x794>
 8008108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 80c6 	beq.w	800829c <_dtoa_r+0x8e4>
 8008110:	2c00      	cmp	r4, #0
 8008112:	f000 80c0 	beq.w	8008296 <_dtoa_r+0x8de>
 8008116:	4629      	mov	r1, r5
 8008118:	4622      	mov	r2, r4
 800811a:	4648      	mov	r0, r9
 800811c:	f000 fc5c 	bl	80089d8 <__pow5mult>
 8008120:	9a02      	ldr	r2, [sp, #8]
 8008122:	4601      	mov	r1, r0
 8008124:	4605      	mov	r5, r0
 8008126:	4648      	mov	r0, r9
 8008128:	f000 fbb4 	bl	8008894 <__multiply>
 800812c:	9902      	ldr	r1, [sp, #8]
 800812e:	4680      	mov	r8, r0
 8008130:	4648      	mov	r0, r9
 8008132:	f000 fa9b 	bl	800866c <_Bfree>
 8008136:	9b08      	ldr	r3, [sp, #32]
 8008138:	1b1b      	subs	r3, r3, r4
 800813a:	9308      	str	r3, [sp, #32]
 800813c:	f000 80b1 	beq.w	80082a2 <_dtoa_r+0x8ea>
 8008140:	9a08      	ldr	r2, [sp, #32]
 8008142:	4641      	mov	r1, r8
 8008144:	4648      	mov	r0, r9
 8008146:	f000 fc47 	bl	80089d8 <__pow5mult>
 800814a:	9002      	str	r0, [sp, #8]
 800814c:	2101      	movs	r1, #1
 800814e:	4648      	mov	r0, r9
 8008150:	f000 fb8a 	bl	8008868 <__i2b>
 8008154:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008156:	4604      	mov	r4, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 81d8 	beq.w	800850e <_dtoa_r+0xb56>
 800815e:	461a      	mov	r2, r3
 8008160:	4601      	mov	r1, r0
 8008162:	4648      	mov	r0, r9
 8008164:	f000 fc38 	bl	80089d8 <__pow5mult>
 8008168:	9b07      	ldr	r3, [sp, #28]
 800816a:	2b01      	cmp	r3, #1
 800816c:	4604      	mov	r4, r0
 800816e:	f300 809f 	bgt.w	80082b0 <_dtoa_r+0x8f8>
 8008172:	9b04      	ldr	r3, [sp, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	f040 8097 	bne.w	80082a8 <_dtoa_r+0x8f0>
 800817a:	9b05      	ldr	r3, [sp, #20]
 800817c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008180:	2b00      	cmp	r3, #0
 8008182:	f040 8093 	bne.w	80082ac <_dtoa_r+0x8f4>
 8008186:	9b05      	ldr	r3, [sp, #20]
 8008188:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800818c:	0d1b      	lsrs	r3, r3, #20
 800818e:	051b      	lsls	r3, r3, #20
 8008190:	b133      	cbz	r3, 80081a0 <_dtoa_r+0x7e8>
 8008192:	9b00      	ldr	r3, [sp, #0]
 8008194:	3301      	adds	r3, #1
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	9b06      	ldr	r3, [sp, #24]
 800819a:	3301      	adds	r3, #1
 800819c:	9306      	str	r3, [sp, #24]
 800819e:	2301      	movs	r3, #1
 80081a0:	9308      	str	r3, [sp, #32]
 80081a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 81b8 	beq.w	800851a <_dtoa_r+0xb62>
 80081aa:	6923      	ldr	r3, [r4, #16]
 80081ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081b0:	6918      	ldr	r0, [r3, #16]
 80081b2:	f000 fb0d 	bl	80087d0 <__hi0bits>
 80081b6:	f1c0 0020 	rsb	r0, r0, #32
 80081ba:	9b06      	ldr	r3, [sp, #24]
 80081bc:	4418      	add	r0, r3
 80081be:	f010 001f 	ands.w	r0, r0, #31
 80081c2:	f000 8082 	beq.w	80082ca <_dtoa_r+0x912>
 80081c6:	f1c0 0320 	rsb	r3, r0, #32
 80081ca:	2b04      	cmp	r3, #4
 80081cc:	dd73      	ble.n	80082b6 <_dtoa_r+0x8fe>
 80081ce:	9b00      	ldr	r3, [sp, #0]
 80081d0:	f1c0 001c 	rsb	r0, r0, #28
 80081d4:	4403      	add	r3, r0
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	9b06      	ldr	r3, [sp, #24]
 80081da:	4403      	add	r3, r0
 80081dc:	4406      	add	r6, r0
 80081de:	9306      	str	r3, [sp, #24]
 80081e0:	9b00      	ldr	r3, [sp, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	dd05      	ble.n	80081f2 <_dtoa_r+0x83a>
 80081e6:	9902      	ldr	r1, [sp, #8]
 80081e8:	461a      	mov	r2, r3
 80081ea:	4648      	mov	r0, r9
 80081ec:	f000 fc4e 	bl	8008a8c <__lshift>
 80081f0:	9002      	str	r0, [sp, #8]
 80081f2:	9b06      	ldr	r3, [sp, #24]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	dd05      	ble.n	8008204 <_dtoa_r+0x84c>
 80081f8:	4621      	mov	r1, r4
 80081fa:	461a      	mov	r2, r3
 80081fc:	4648      	mov	r0, r9
 80081fe:	f000 fc45 	bl	8008a8c <__lshift>
 8008202:	4604      	mov	r4, r0
 8008204:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008206:	2b00      	cmp	r3, #0
 8008208:	d061      	beq.n	80082ce <_dtoa_r+0x916>
 800820a:	9802      	ldr	r0, [sp, #8]
 800820c:	4621      	mov	r1, r4
 800820e:	f000 fca9 	bl	8008b64 <__mcmp>
 8008212:	2800      	cmp	r0, #0
 8008214:	da5b      	bge.n	80082ce <_dtoa_r+0x916>
 8008216:	2300      	movs	r3, #0
 8008218:	9902      	ldr	r1, [sp, #8]
 800821a:	220a      	movs	r2, #10
 800821c:	4648      	mov	r0, r9
 800821e:	f000 fa47 	bl	80086b0 <__multadd>
 8008222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008224:	9002      	str	r0, [sp, #8]
 8008226:	f107 38ff 	add.w	r8, r7, #4294967295
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 8177 	beq.w	800851e <_dtoa_r+0xb66>
 8008230:	4629      	mov	r1, r5
 8008232:	2300      	movs	r3, #0
 8008234:	220a      	movs	r2, #10
 8008236:	4648      	mov	r0, r9
 8008238:	f000 fa3a 	bl	80086b0 <__multadd>
 800823c:	f1bb 0f00 	cmp.w	fp, #0
 8008240:	4605      	mov	r5, r0
 8008242:	dc6f      	bgt.n	8008324 <_dtoa_r+0x96c>
 8008244:	9b07      	ldr	r3, [sp, #28]
 8008246:	2b02      	cmp	r3, #2
 8008248:	dc49      	bgt.n	80082de <_dtoa_r+0x926>
 800824a:	e06b      	b.n	8008324 <_dtoa_r+0x96c>
 800824c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800824e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008252:	e73c      	b.n	80080ce <_dtoa_r+0x716>
 8008254:	3fe00000 	.word	0x3fe00000
 8008258:	40240000 	.word	0x40240000
 800825c:	9b03      	ldr	r3, [sp, #12]
 800825e:	1e5c      	subs	r4, r3, #1
 8008260:	9b08      	ldr	r3, [sp, #32]
 8008262:	42a3      	cmp	r3, r4
 8008264:	db09      	blt.n	800827a <_dtoa_r+0x8c2>
 8008266:	1b1c      	subs	r4, r3, r4
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	f6bf af30 	bge.w	80080d0 <_dtoa_r+0x718>
 8008270:	9b00      	ldr	r3, [sp, #0]
 8008272:	9a03      	ldr	r2, [sp, #12]
 8008274:	1a9e      	subs	r6, r3, r2
 8008276:	2300      	movs	r3, #0
 8008278:	e72b      	b.n	80080d2 <_dtoa_r+0x71a>
 800827a:	9b08      	ldr	r3, [sp, #32]
 800827c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800827e:	9408      	str	r4, [sp, #32]
 8008280:	1ae3      	subs	r3, r4, r3
 8008282:	441a      	add	r2, r3
 8008284:	9e00      	ldr	r6, [sp, #0]
 8008286:	9b03      	ldr	r3, [sp, #12]
 8008288:	920d      	str	r2, [sp, #52]	@ 0x34
 800828a:	2400      	movs	r4, #0
 800828c:	e721      	b.n	80080d2 <_dtoa_r+0x71a>
 800828e:	9c08      	ldr	r4, [sp, #32]
 8008290:	9e00      	ldr	r6, [sp, #0]
 8008292:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008294:	e728      	b.n	80080e8 <_dtoa_r+0x730>
 8008296:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800829a:	e751      	b.n	8008140 <_dtoa_r+0x788>
 800829c:	9a08      	ldr	r2, [sp, #32]
 800829e:	9902      	ldr	r1, [sp, #8]
 80082a0:	e750      	b.n	8008144 <_dtoa_r+0x78c>
 80082a2:	f8cd 8008 	str.w	r8, [sp, #8]
 80082a6:	e751      	b.n	800814c <_dtoa_r+0x794>
 80082a8:	2300      	movs	r3, #0
 80082aa:	e779      	b.n	80081a0 <_dtoa_r+0x7e8>
 80082ac:	9b04      	ldr	r3, [sp, #16]
 80082ae:	e777      	b.n	80081a0 <_dtoa_r+0x7e8>
 80082b0:	2300      	movs	r3, #0
 80082b2:	9308      	str	r3, [sp, #32]
 80082b4:	e779      	b.n	80081aa <_dtoa_r+0x7f2>
 80082b6:	d093      	beq.n	80081e0 <_dtoa_r+0x828>
 80082b8:	9a00      	ldr	r2, [sp, #0]
 80082ba:	331c      	adds	r3, #28
 80082bc:	441a      	add	r2, r3
 80082be:	9200      	str	r2, [sp, #0]
 80082c0:	9a06      	ldr	r2, [sp, #24]
 80082c2:	441a      	add	r2, r3
 80082c4:	441e      	add	r6, r3
 80082c6:	9206      	str	r2, [sp, #24]
 80082c8:	e78a      	b.n	80081e0 <_dtoa_r+0x828>
 80082ca:	4603      	mov	r3, r0
 80082cc:	e7f4      	b.n	80082b8 <_dtoa_r+0x900>
 80082ce:	9b03      	ldr	r3, [sp, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	46b8      	mov	r8, r7
 80082d4:	dc20      	bgt.n	8008318 <_dtoa_r+0x960>
 80082d6:	469b      	mov	fp, r3
 80082d8:	9b07      	ldr	r3, [sp, #28]
 80082da:	2b02      	cmp	r3, #2
 80082dc:	dd1e      	ble.n	800831c <_dtoa_r+0x964>
 80082de:	f1bb 0f00 	cmp.w	fp, #0
 80082e2:	f47f adb1 	bne.w	8007e48 <_dtoa_r+0x490>
 80082e6:	4621      	mov	r1, r4
 80082e8:	465b      	mov	r3, fp
 80082ea:	2205      	movs	r2, #5
 80082ec:	4648      	mov	r0, r9
 80082ee:	f000 f9df 	bl	80086b0 <__multadd>
 80082f2:	4601      	mov	r1, r0
 80082f4:	4604      	mov	r4, r0
 80082f6:	9802      	ldr	r0, [sp, #8]
 80082f8:	f000 fc34 	bl	8008b64 <__mcmp>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	f77f ada3 	ble.w	8007e48 <_dtoa_r+0x490>
 8008302:	4656      	mov	r6, sl
 8008304:	2331      	movs	r3, #49	@ 0x31
 8008306:	f806 3b01 	strb.w	r3, [r6], #1
 800830a:	f108 0801 	add.w	r8, r8, #1
 800830e:	e59f      	b.n	8007e50 <_dtoa_r+0x498>
 8008310:	9c03      	ldr	r4, [sp, #12]
 8008312:	46b8      	mov	r8, r7
 8008314:	4625      	mov	r5, r4
 8008316:	e7f4      	b.n	8008302 <_dtoa_r+0x94a>
 8008318:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800831c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 8101 	beq.w	8008526 <_dtoa_r+0xb6e>
 8008324:	2e00      	cmp	r6, #0
 8008326:	dd05      	ble.n	8008334 <_dtoa_r+0x97c>
 8008328:	4629      	mov	r1, r5
 800832a:	4632      	mov	r2, r6
 800832c:	4648      	mov	r0, r9
 800832e:	f000 fbad 	bl	8008a8c <__lshift>
 8008332:	4605      	mov	r5, r0
 8008334:	9b08      	ldr	r3, [sp, #32]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d05c      	beq.n	80083f4 <_dtoa_r+0xa3c>
 800833a:	6869      	ldr	r1, [r5, #4]
 800833c:	4648      	mov	r0, r9
 800833e:	f000 f955 	bl	80085ec <_Balloc>
 8008342:	4606      	mov	r6, r0
 8008344:	b928      	cbnz	r0, 8008352 <_dtoa_r+0x99a>
 8008346:	4b82      	ldr	r3, [pc, #520]	@ (8008550 <_dtoa_r+0xb98>)
 8008348:	4602      	mov	r2, r0
 800834a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800834e:	f7ff bb4a 	b.w	80079e6 <_dtoa_r+0x2e>
 8008352:	692a      	ldr	r2, [r5, #16]
 8008354:	3202      	adds	r2, #2
 8008356:	0092      	lsls	r2, r2, #2
 8008358:	f105 010c 	add.w	r1, r5, #12
 800835c:	300c      	adds	r0, #12
 800835e:	f002 f88d 	bl	800a47c <memcpy>
 8008362:	2201      	movs	r2, #1
 8008364:	4631      	mov	r1, r6
 8008366:	4648      	mov	r0, r9
 8008368:	f000 fb90 	bl	8008a8c <__lshift>
 800836c:	f10a 0301 	add.w	r3, sl, #1
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	eb0a 030b 	add.w	r3, sl, fp
 8008376:	9308      	str	r3, [sp, #32]
 8008378:	9b04      	ldr	r3, [sp, #16]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	462f      	mov	r7, r5
 8008380:	9306      	str	r3, [sp, #24]
 8008382:	4605      	mov	r5, r0
 8008384:	9b00      	ldr	r3, [sp, #0]
 8008386:	9802      	ldr	r0, [sp, #8]
 8008388:	4621      	mov	r1, r4
 800838a:	f103 3bff 	add.w	fp, r3, #4294967295
 800838e:	f7ff fa89 	bl	80078a4 <quorem>
 8008392:	4603      	mov	r3, r0
 8008394:	3330      	adds	r3, #48	@ 0x30
 8008396:	9003      	str	r0, [sp, #12]
 8008398:	4639      	mov	r1, r7
 800839a:	9802      	ldr	r0, [sp, #8]
 800839c:	9309      	str	r3, [sp, #36]	@ 0x24
 800839e:	f000 fbe1 	bl	8008b64 <__mcmp>
 80083a2:	462a      	mov	r2, r5
 80083a4:	9004      	str	r0, [sp, #16]
 80083a6:	4621      	mov	r1, r4
 80083a8:	4648      	mov	r0, r9
 80083aa:	f000 fbf7 	bl	8008b9c <__mdiff>
 80083ae:	68c2      	ldr	r2, [r0, #12]
 80083b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b2:	4606      	mov	r6, r0
 80083b4:	bb02      	cbnz	r2, 80083f8 <_dtoa_r+0xa40>
 80083b6:	4601      	mov	r1, r0
 80083b8:	9802      	ldr	r0, [sp, #8]
 80083ba:	f000 fbd3 	bl	8008b64 <__mcmp>
 80083be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083c0:	4602      	mov	r2, r0
 80083c2:	4631      	mov	r1, r6
 80083c4:	4648      	mov	r0, r9
 80083c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80083c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80083ca:	f000 f94f 	bl	800866c <_Bfree>
 80083ce:	9b07      	ldr	r3, [sp, #28]
 80083d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80083d2:	9e00      	ldr	r6, [sp, #0]
 80083d4:	ea42 0103 	orr.w	r1, r2, r3
 80083d8:	9b06      	ldr	r3, [sp, #24]
 80083da:	4319      	orrs	r1, r3
 80083dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083de:	d10d      	bne.n	80083fc <_dtoa_r+0xa44>
 80083e0:	2b39      	cmp	r3, #57	@ 0x39
 80083e2:	d027      	beq.n	8008434 <_dtoa_r+0xa7c>
 80083e4:	9a04      	ldr	r2, [sp, #16]
 80083e6:	2a00      	cmp	r2, #0
 80083e8:	dd01      	ble.n	80083ee <_dtoa_r+0xa36>
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	3331      	adds	r3, #49	@ 0x31
 80083ee:	f88b 3000 	strb.w	r3, [fp]
 80083f2:	e52e      	b.n	8007e52 <_dtoa_r+0x49a>
 80083f4:	4628      	mov	r0, r5
 80083f6:	e7b9      	b.n	800836c <_dtoa_r+0x9b4>
 80083f8:	2201      	movs	r2, #1
 80083fa:	e7e2      	b.n	80083c2 <_dtoa_r+0xa0a>
 80083fc:	9904      	ldr	r1, [sp, #16]
 80083fe:	2900      	cmp	r1, #0
 8008400:	db04      	blt.n	800840c <_dtoa_r+0xa54>
 8008402:	9807      	ldr	r0, [sp, #28]
 8008404:	4301      	orrs	r1, r0
 8008406:	9806      	ldr	r0, [sp, #24]
 8008408:	4301      	orrs	r1, r0
 800840a:	d120      	bne.n	800844e <_dtoa_r+0xa96>
 800840c:	2a00      	cmp	r2, #0
 800840e:	ddee      	ble.n	80083ee <_dtoa_r+0xa36>
 8008410:	9902      	ldr	r1, [sp, #8]
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	2201      	movs	r2, #1
 8008416:	4648      	mov	r0, r9
 8008418:	f000 fb38 	bl	8008a8c <__lshift>
 800841c:	4621      	mov	r1, r4
 800841e:	9002      	str	r0, [sp, #8]
 8008420:	f000 fba0 	bl	8008b64 <__mcmp>
 8008424:	2800      	cmp	r0, #0
 8008426:	9b00      	ldr	r3, [sp, #0]
 8008428:	dc02      	bgt.n	8008430 <_dtoa_r+0xa78>
 800842a:	d1e0      	bne.n	80083ee <_dtoa_r+0xa36>
 800842c:	07da      	lsls	r2, r3, #31
 800842e:	d5de      	bpl.n	80083ee <_dtoa_r+0xa36>
 8008430:	2b39      	cmp	r3, #57	@ 0x39
 8008432:	d1da      	bne.n	80083ea <_dtoa_r+0xa32>
 8008434:	2339      	movs	r3, #57	@ 0x39
 8008436:	f88b 3000 	strb.w	r3, [fp]
 800843a:	4633      	mov	r3, r6
 800843c:	461e      	mov	r6, r3
 800843e:	3b01      	subs	r3, #1
 8008440:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008444:	2a39      	cmp	r2, #57	@ 0x39
 8008446:	d04e      	beq.n	80084e6 <_dtoa_r+0xb2e>
 8008448:	3201      	adds	r2, #1
 800844a:	701a      	strb	r2, [r3, #0]
 800844c:	e501      	b.n	8007e52 <_dtoa_r+0x49a>
 800844e:	2a00      	cmp	r2, #0
 8008450:	dd03      	ble.n	800845a <_dtoa_r+0xaa2>
 8008452:	2b39      	cmp	r3, #57	@ 0x39
 8008454:	d0ee      	beq.n	8008434 <_dtoa_r+0xa7c>
 8008456:	3301      	adds	r3, #1
 8008458:	e7c9      	b.n	80083ee <_dtoa_r+0xa36>
 800845a:	9a00      	ldr	r2, [sp, #0]
 800845c:	9908      	ldr	r1, [sp, #32]
 800845e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008462:	428a      	cmp	r2, r1
 8008464:	d028      	beq.n	80084b8 <_dtoa_r+0xb00>
 8008466:	9902      	ldr	r1, [sp, #8]
 8008468:	2300      	movs	r3, #0
 800846a:	220a      	movs	r2, #10
 800846c:	4648      	mov	r0, r9
 800846e:	f000 f91f 	bl	80086b0 <__multadd>
 8008472:	42af      	cmp	r7, r5
 8008474:	9002      	str	r0, [sp, #8]
 8008476:	f04f 0300 	mov.w	r3, #0
 800847a:	f04f 020a 	mov.w	r2, #10
 800847e:	4639      	mov	r1, r7
 8008480:	4648      	mov	r0, r9
 8008482:	d107      	bne.n	8008494 <_dtoa_r+0xadc>
 8008484:	f000 f914 	bl	80086b0 <__multadd>
 8008488:	4607      	mov	r7, r0
 800848a:	4605      	mov	r5, r0
 800848c:	9b00      	ldr	r3, [sp, #0]
 800848e:	3301      	adds	r3, #1
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	e777      	b.n	8008384 <_dtoa_r+0x9cc>
 8008494:	f000 f90c 	bl	80086b0 <__multadd>
 8008498:	4629      	mov	r1, r5
 800849a:	4607      	mov	r7, r0
 800849c:	2300      	movs	r3, #0
 800849e:	220a      	movs	r2, #10
 80084a0:	4648      	mov	r0, r9
 80084a2:	f000 f905 	bl	80086b0 <__multadd>
 80084a6:	4605      	mov	r5, r0
 80084a8:	e7f0      	b.n	800848c <_dtoa_r+0xad4>
 80084aa:	f1bb 0f00 	cmp.w	fp, #0
 80084ae:	bfcc      	ite	gt
 80084b0:	465e      	movgt	r6, fp
 80084b2:	2601      	movle	r6, #1
 80084b4:	4456      	add	r6, sl
 80084b6:	2700      	movs	r7, #0
 80084b8:	9902      	ldr	r1, [sp, #8]
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	2201      	movs	r2, #1
 80084be:	4648      	mov	r0, r9
 80084c0:	f000 fae4 	bl	8008a8c <__lshift>
 80084c4:	4621      	mov	r1, r4
 80084c6:	9002      	str	r0, [sp, #8]
 80084c8:	f000 fb4c 	bl	8008b64 <__mcmp>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	dcb4      	bgt.n	800843a <_dtoa_r+0xa82>
 80084d0:	d102      	bne.n	80084d8 <_dtoa_r+0xb20>
 80084d2:	9b00      	ldr	r3, [sp, #0]
 80084d4:	07db      	lsls	r3, r3, #31
 80084d6:	d4b0      	bmi.n	800843a <_dtoa_r+0xa82>
 80084d8:	4633      	mov	r3, r6
 80084da:	461e      	mov	r6, r3
 80084dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084e0:	2a30      	cmp	r2, #48	@ 0x30
 80084e2:	d0fa      	beq.n	80084da <_dtoa_r+0xb22>
 80084e4:	e4b5      	b.n	8007e52 <_dtoa_r+0x49a>
 80084e6:	459a      	cmp	sl, r3
 80084e8:	d1a8      	bne.n	800843c <_dtoa_r+0xa84>
 80084ea:	2331      	movs	r3, #49	@ 0x31
 80084ec:	f108 0801 	add.w	r8, r8, #1
 80084f0:	f88a 3000 	strb.w	r3, [sl]
 80084f4:	e4ad      	b.n	8007e52 <_dtoa_r+0x49a>
 80084f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008554 <_dtoa_r+0xb9c>
 80084fc:	b11b      	cbz	r3, 8008506 <_dtoa_r+0xb4e>
 80084fe:	f10a 0308 	add.w	r3, sl, #8
 8008502:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	4650      	mov	r0, sl
 8008508:	b017      	add	sp, #92	@ 0x5c
 800850a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850e:	9b07      	ldr	r3, [sp, #28]
 8008510:	2b01      	cmp	r3, #1
 8008512:	f77f ae2e 	ble.w	8008172 <_dtoa_r+0x7ba>
 8008516:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008518:	9308      	str	r3, [sp, #32]
 800851a:	2001      	movs	r0, #1
 800851c:	e64d      	b.n	80081ba <_dtoa_r+0x802>
 800851e:	f1bb 0f00 	cmp.w	fp, #0
 8008522:	f77f aed9 	ble.w	80082d8 <_dtoa_r+0x920>
 8008526:	4656      	mov	r6, sl
 8008528:	9802      	ldr	r0, [sp, #8]
 800852a:	4621      	mov	r1, r4
 800852c:	f7ff f9ba 	bl	80078a4 <quorem>
 8008530:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008534:	f806 3b01 	strb.w	r3, [r6], #1
 8008538:	eba6 020a 	sub.w	r2, r6, sl
 800853c:	4593      	cmp	fp, r2
 800853e:	ddb4      	ble.n	80084aa <_dtoa_r+0xaf2>
 8008540:	9902      	ldr	r1, [sp, #8]
 8008542:	2300      	movs	r3, #0
 8008544:	220a      	movs	r2, #10
 8008546:	4648      	mov	r0, r9
 8008548:	f000 f8b2 	bl	80086b0 <__multadd>
 800854c:	9002      	str	r0, [sp, #8]
 800854e:	e7eb      	b.n	8008528 <_dtoa_r+0xb70>
 8008550:	0800aff1 	.word	0x0800aff1
 8008554:	0800af8c 	.word	0x0800af8c

08008558 <_free_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4605      	mov	r5, r0
 800855c:	2900      	cmp	r1, #0
 800855e:	d041      	beq.n	80085e4 <_free_r+0x8c>
 8008560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008564:	1f0c      	subs	r4, r1, #4
 8008566:	2b00      	cmp	r3, #0
 8008568:	bfb8      	it	lt
 800856a:	18e4      	addlt	r4, r4, r3
 800856c:	f7fe f8d0 	bl	8006710 <__malloc_lock>
 8008570:	4a1d      	ldr	r2, [pc, #116]	@ (80085e8 <_free_r+0x90>)
 8008572:	6813      	ldr	r3, [r2, #0]
 8008574:	b933      	cbnz	r3, 8008584 <_free_r+0x2c>
 8008576:	6063      	str	r3, [r4, #4]
 8008578:	6014      	str	r4, [r2, #0]
 800857a:	4628      	mov	r0, r5
 800857c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008580:	f7fe b8cc 	b.w	800671c <__malloc_unlock>
 8008584:	42a3      	cmp	r3, r4
 8008586:	d908      	bls.n	800859a <_free_r+0x42>
 8008588:	6820      	ldr	r0, [r4, #0]
 800858a:	1821      	adds	r1, r4, r0
 800858c:	428b      	cmp	r3, r1
 800858e:	bf01      	itttt	eq
 8008590:	6819      	ldreq	r1, [r3, #0]
 8008592:	685b      	ldreq	r3, [r3, #4]
 8008594:	1809      	addeq	r1, r1, r0
 8008596:	6021      	streq	r1, [r4, #0]
 8008598:	e7ed      	b.n	8008576 <_free_r+0x1e>
 800859a:	461a      	mov	r2, r3
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	b10b      	cbz	r3, 80085a4 <_free_r+0x4c>
 80085a0:	42a3      	cmp	r3, r4
 80085a2:	d9fa      	bls.n	800859a <_free_r+0x42>
 80085a4:	6811      	ldr	r1, [r2, #0]
 80085a6:	1850      	adds	r0, r2, r1
 80085a8:	42a0      	cmp	r0, r4
 80085aa:	d10b      	bne.n	80085c4 <_free_r+0x6c>
 80085ac:	6820      	ldr	r0, [r4, #0]
 80085ae:	4401      	add	r1, r0
 80085b0:	1850      	adds	r0, r2, r1
 80085b2:	4283      	cmp	r3, r0
 80085b4:	6011      	str	r1, [r2, #0]
 80085b6:	d1e0      	bne.n	800857a <_free_r+0x22>
 80085b8:	6818      	ldr	r0, [r3, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	6053      	str	r3, [r2, #4]
 80085be:	4408      	add	r0, r1
 80085c0:	6010      	str	r0, [r2, #0]
 80085c2:	e7da      	b.n	800857a <_free_r+0x22>
 80085c4:	d902      	bls.n	80085cc <_free_r+0x74>
 80085c6:	230c      	movs	r3, #12
 80085c8:	602b      	str	r3, [r5, #0]
 80085ca:	e7d6      	b.n	800857a <_free_r+0x22>
 80085cc:	6820      	ldr	r0, [r4, #0]
 80085ce:	1821      	adds	r1, r4, r0
 80085d0:	428b      	cmp	r3, r1
 80085d2:	bf04      	itt	eq
 80085d4:	6819      	ldreq	r1, [r3, #0]
 80085d6:	685b      	ldreq	r3, [r3, #4]
 80085d8:	6063      	str	r3, [r4, #4]
 80085da:	bf04      	itt	eq
 80085dc:	1809      	addeq	r1, r1, r0
 80085de:	6021      	streq	r1, [r4, #0]
 80085e0:	6054      	str	r4, [r2, #4]
 80085e2:	e7ca      	b.n	800857a <_free_r+0x22>
 80085e4:	bd38      	pop	{r3, r4, r5, pc}
 80085e6:	bf00      	nop
 80085e8:	20040cf4 	.word	0x20040cf4

080085ec <_Balloc>:
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	69c6      	ldr	r6, [r0, #28]
 80085f0:	4604      	mov	r4, r0
 80085f2:	460d      	mov	r5, r1
 80085f4:	b976      	cbnz	r6, 8008614 <_Balloc+0x28>
 80085f6:	2010      	movs	r0, #16
 80085f8:	f7fd ffd8 	bl	80065ac <malloc>
 80085fc:	4602      	mov	r2, r0
 80085fe:	61e0      	str	r0, [r4, #28]
 8008600:	b920      	cbnz	r0, 800860c <_Balloc+0x20>
 8008602:	4b18      	ldr	r3, [pc, #96]	@ (8008664 <_Balloc+0x78>)
 8008604:	4818      	ldr	r0, [pc, #96]	@ (8008668 <_Balloc+0x7c>)
 8008606:	216b      	movs	r1, #107	@ 0x6b
 8008608:	f7ff f92e 	bl	8007868 <__assert_func>
 800860c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008610:	6006      	str	r6, [r0, #0]
 8008612:	60c6      	str	r6, [r0, #12]
 8008614:	69e6      	ldr	r6, [r4, #28]
 8008616:	68f3      	ldr	r3, [r6, #12]
 8008618:	b183      	cbz	r3, 800863c <_Balloc+0x50>
 800861a:	69e3      	ldr	r3, [r4, #28]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008622:	b9b8      	cbnz	r0, 8008654 <_Balloc+0x68>
 8008624:	2101      	movs	r1, #1
 8008626:	fa01 f605 	lsl.w	r6, r1, r5
 800862a:	1d72      	adds	r2, r6, #5
 800862c:	0092      	lsls	r2, r2, #2
 800862e:	4620      	mov	r0, r4
 8008630:	f001 ff41 	bl	800a4b6 <_calloc_r>
 8008634:	b160      	cbz	r0, 8008650 <_Balloc+0x64>
 8008636:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800863a:	e00e      	b.n	800865a <_Balloc+0x6e>
 800863c:	2221      	movs	r2, #33	@ 0x21
 800863e:	2104      	movs	r1, #4
 8008640:	4620      	mov	r0, r4
 8008642:	f001 ff38 	bl	800a4b6 <_calloc_r>
 8008646:	69e3      	ldr	r3, [r4, #28]
 8008648:	60f0      	str	r0, [r6, #12]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e4      	bne.n	800861a <_Balloc+0x2e>
 8008650:	2000      	movs	r0, #0
 8008652:	bd70      	pop	{r4, r5, r6, pc}
 8008654:	6802      	ldr	r2, [r0, #0]
 8008656:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800865a:	2300      	movs	r3, #0
 800865c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008660:	e7f7      	b.n	8008652 <_Balloc+0x66>
 8008662:	bf00      	nop
 8008664:	0800aea8 	.word	0x0800aea8
 8008668:	0800b002 	.word	0x0800b002

0800866c <_Bfree>:
 800866c:	b570      	push	{r4, r5, r6, lr}
 800866e:	69c6      	ldr	r6, [r0, #28]
 8008670:	4605      	mov	r5, r0
 8008672:	460c      	mov	r4, r1
 8008674:	b976      	cbnz	r6, 8008694 <_Bfree+0x28>
 8008676:	2010      	movs	r0, #16
 8008678:	f7fd ff98 	bl	80065ac <malloc>
 800867c:	4602      	mov	r2, r0
 800867e:	61e8      	str	r0, [r5, #28]
 8008680:	b920      	cbnz	r0, 800868c <_Bfree+0x20>
 8008682:	4b09      	ldr	r3, [pc, #36]	@ (80086a8 <_Bfree+0x3c>)
 8008684:	4809      	ldr	r0, [pc, #36]	@ (80086ac <_Bfree+0x40>)
 8008686:	218f      	movs	r1, #143	@ 0x8f
 8008688:	f7ff f8ee 	bl	8007868 <__assert_func>
 800868c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008690:	6006      	str	r6, [r0, #0]
 8008692:	60c6      	str	r6, [r0, #12]
 8008694:	b13c      	cbz	r4, 80086a6 <_Bfree+0x3a>
 8008696:	69eb      	ldr	r3, [r5, #28]
 8008698:	6862      	ldr	r2, [r4, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086a0:	6021      	str	r1, [r4, #0]
 80086a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	0800aea8 	.word	0x0800aea8
 80086ac:	0800b002 	.word	0x0800b002

080086b0 <__multadd>:
 80086b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b4:	690d      	ldr	r5, [r1, #16]
 80086b6:	4607      	mov	r7, r0
 80086b8:	460c      	mov	r4, r1
 80086ba:	461e      	mov	r6, r3
 80086bc:	f101 0c14 	add.w	ip, r1, #20
 80086c0:	2000      	movs	r0, #0
 80086c2:	f8dc 3000 	ldr.w	r3, [ip]
 80086c6:	b299      	uxth	r1, r3
 80086c8:	fb02 6101 	mla	r1, r2, r1, r6
 80086cc:	0c1e      	lsrs	r6, r3, #16
 80086ce:	0c0b      	lsrs	r3, r1, #16
 80086d0:	fb02 3306 	mla	r3, r2, r6, r3
 80086d4:	b289      	uxth	r1, r1
 80086d6:	3001      	adds	r0, #1
 80086d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086dc:	4285      	cmp	r5, r0
 80086de:	f84c 1b04 	str.w	r1, [ip], #4
 80086e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086e6:	dcec      	bgt.n	80086c2 <__multadd+0x12>
 80086e8:	b30e      	cbz	r6, 800872e <__multadd+0x7e>
 80086ea:	68a3      	ldr	r3, [r4, #8]
 80086ec:	42ab      	cmp	r3, r5
 80086ee:	dc19      	bgt.n	8008724 <__multadd+0x74>
 80086f0:	6861      	ldr	r1, [r4, #4]
 80086f2:	4638      	mov	r0, r7
 80086f4:	3101      	adds	r1, #1
 80086f6:	f7ff ff79 	bl	80085ec <_Balloc>
 80086fa:	4680      	mov	r8, r0
 80086fc:	b928      	cbnz	r0, 800870a <__multadd+0x5a>
 80086fe:	4602      	mov	r2, r0
 8008700:	4b0c      	ldr	r3, [pc, #48]	@ (8008734 <__multadd+0x84>)
 8008702:	480d      	ldr	r0, [pc, #52]	@ (8008738 <__multadd+0x88>)
 8008704:	21ba      	movs	r1, #186	@ 0xba
 8008706:	f7ff f8af 	bl	8007868 <__assert_func>
 800870a:	6922      	ldr	r2, [r4, #16]
 800870c:	3202      	adds	r2, #2
 800870e:	f104 010c 	add.w	r1, r4, #12
 8008712:	0092      	lsls	r2, r2, #2
 8008714:	300c      	adds	r0, #12
 8008716:	f001 feb1 	bl	800a47c <memcpy>
 800871a:	4621      	mov	r1, r4
 800871c:	4638      	mov	r0, r7
 800871e:	f7ff ffa5 	bl	800866c <_Bfree>
 8008722:	4644      	mov	r4, r8
 8008724:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008728:	3501      	adds	r5, #1
 800872a:	615e      	str	r6, [r3, #20]
 800872c:	6125      	str	r5, [r4, #16]
 800872e:	4620      	mov	r0, r4
 8008730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008734:	0800aff1 	.word	0x0800aff1
 8008738:	0800b002 	.word	0x0800b002

0800873c <__s2b>:
 800873c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008740:	460c      	mov	r4, r1
 8008742:	4615      	mov	r5, r2
 8008744:	461f      	mov	r7, r3
 8008746:	2209      	movs	r2, #9
 8008748:	3308      	adds	r3, #8
 800874a:	4606      	mov	r6, r0
 800874c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008750:	2100      	movs	r1, #0
 8008752:	2201      	movs	r2, #1
 8008754:	429a      	cmp	r2, r3
 8008756:	db09      	blt.n	800876c <__s2b+0x30>
 8008758:	4630      	mov	r0, r6
 800875a:	f7ff ff47 	bl	80085ec <_Balloc>
 800875e:	b940      	cbnz	r0, 8008772 <__s2b+0x36>
 8008760:	4602      	mov	r2, r0
 8008762:	4b19      	ldr	r3, [pc, #100]	@ (80087c8 <__s2b+0x8c>)
 8008764:	4819      	ldr	r0, [pc, #100]	@ (80087cc <__s2b+0x90>)
 8008766:	21d3      	movs	r1, #211	@ 0xd3
 8008768:	f7ff f87e 	bl	8007868 <__assert_func>
 800876c:	0052      	lsls	r2, r2, #1
 800876e:	3101      	adds	r1, #1
 8008770:	e7f0      	b.n	8008754 <__s2b+0x18>
 8008772:	9b08      	ldr	r3, [sp, #32]
 8008774:	6143      	str	r3, [r0, #20]
 8008776:	2d09      	cmp	r5, #9
 8008778:	f04f 0301 	mov.w	r3, #1
 800877c:	6103      	str	r3, [r0, #16]
 800877e:	dd16      	ble.n	80087ae <__s2b+0x72>
 8008780:	f104 0909 	add.w	r9, r4, #9
 8008784:	46c8      	mov	r8, r9
 8008786:	442c      	add	r4, r5
 8008788:	f818 3b01 	ldrb.w	r3, [r8], #1
 800878c:	4601      	mov	r1, r0
 800878e:	3b30      	subs	r3, #48	@ 0x30
 8008790:	220a      	movs	r2, #10
 8008792:	4630      	mov	r0, r6
 8008794:	f7ff ff8c 	bl	80086b0 <__multadd>
 8008798:	45a0      	cmp	r8, r4
 800879a:	d1f5      	bne.n	8008788 <__s2b+0x4c>
 800879c:	f1a5 0408 	sub.w	r4, r5, #8
 80087a0:	444c      	add	r4, r9
 80087a2:	1b2d      	subs	r5, r5, r4
 80087a4:	1963      	adds	r3, r4, r5
 80087a6:	42bb      	cmp	r3, r7
 80087a8:	db04      	blt.n	80087b4 <__s2b+0x78>
 80087aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ae:	340a      	adds	r4, #10
 80087b0:	2509      	movs	r5, #9
 80087b2:	e7f6      	b.n	80087a2 <__s2b+0x66>
 80087b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087b8:	4601      	mov	r1, r0
 80087ba:	3b30      	subs	r3, #48	@ 0x30
 80087bc:	220a      	movs	r2, #10
 80087be:	4630      	mov	r0, r6
 80087c0:	f7ff ff76 	bl	80086b0 <__multadd>
 80087c4:	e7ee      	b.n	80087a4 <__s2b+0x68>
 80087c6:	bf00      	nop
 80087c8:	0800aff1 	.word	0x0800aff1
 80087cc:	0800b002 	.word	0x0800b002

080087d0 <__hi0bits>:
 80087d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80087d4:	4603      	mov	r3, r0
 80087d6:	bf36      	itet	cc
 80087d8:	0403      	lslcc	r3, r0, #16
 80087da:	2000      	movcs	r0, #0
 80087dc:	2010      	movcc	r0, #16
 80087de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087e2:	bf3c      	itt	cc
 80087e4:	021b      	lslcc	r3, r3, #8
 80087e6:	3008      	addcc	r0, #8
 80087e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087ec:	bf3c      	itt	cc
 80087ee:	011b      	lslcc	r3, r3, #4
 80087f0:	3004      	addcc	r0, #4
 80087f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087f6:	bf3c      	itt	cc
 80087f8:	009b      	lslcc	r3, r3, #2
 80087fa:	3002      	addcc	r0, #2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	db05      	blt.n	800880c <__hi0bits+0x3c>
 8008800:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008804:	f100 0001 	add.w	r0, r0, #1
 8008808:	bf08      	it	eq
 800880a:	2020      	moveq	r0, #32
 800880c:	4770      	bx	lr

0800880e <__lo0bits>:
 800880e:	6803      	ldr	r3, [r0, #0]
 8008810:	4602      	mov	r2, r0
 8008812:	f013 0007 	ands.w	r0, r3, #7
 8008816:	d00b      	beq.n	8008830 <__lo0bits+0x22>
 8008818:	07d9      	lsls	r1, r3, #31
 800881a:	d421      	bmi.n	8008860 <__lo0bits+0x52>
 800881c:	0798      	lsls	r0, r3, #30
 800881e:	bf49      	itett	mi
 8008820:	085b      	lsrmi	r3, r3, #1
 8008822:	089b      	lsrpl	r3, r3, #2
 8008824:	2001      	movmi	r0, #1
 8008826:	6013      	strmi	r3, [r2, #0]
 8008828:	bf5c      	itt	pl
 800882a:	6013      	strpl	r3, [r2, #0]
 800882c:	2002      	movpl	r0, #2
 800882e:	4770      	bx	lr
 8008830:	b299      	uxth	r1, r3
 8008832:	b909      	cbnz	r1, 8008838 <__lo0bits+0x2a>
 8008834:	0c1b      	lsrs	r3, r3, #16
 8008836:	2010      	movs	r0, #16
 8008838:	b2d9      	uxtb	r1, r3
 800883a:	b909      	cbnz	r1, 8008840 <__lo0bits+0x32>
 800883c:	3008      	adds	r0, #8
 800883e:	0a1b      	lsrs	r3, r3, #8
 8008840:	0719      	lsls	r1, r3, #28
 8008842:	bf04      	itt	eq
 8008844:	091b      	lsreq	r3, r3, #4
 8008846:	3004      	addeq	r0, #4
 8008848:	0799      	lsls	r1, r3, #30
 800884a:	bf04      	itt	eq
 800884c:	089b      	lsreq	r3, r3, #2
 800884e:	3002      	addeq	r0, #2
 8008850:	07d9      	lsls	r1, r3, #31
 8008852:	d403      	bmi.n	800885c <__lo0bits+0x4e>
 8008854:	085b      	lsrs	r3, r3, #1
 8008856:	f100 0001 	add.w	r0, r0, #1
 800885a:	d003      	beq.n	8008864 <__lo0bits+0x56>
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	4770      	bx	lr
 8008860:	2000      	movs	r0, #0
 8008862:	4770      	bx	lr
 8008864:	2020      	movs	r0, #32
 8008866:	4770      	bx	lr

08008868 <__i2b>:
 8008868:	b510      	push	{r4, lr}
 800886a:	460c      	mov	r4, r1
 800886c:	2101      	movs	r1, #1
 800886e:	f7ff febd 	bl	80085ec <_Balloc>
 8008872:	4602      	mov	r2, r0
 8008874:	b928      	cbnz	r0, 8008882 <__i2b+0x1a>
 8008876:	4b05      	ldr	r3, [pc, #20]	@ (800888c <__i2b+0x24>)
 8008878:	4805      	ldr	r0, [pc, #20]	@ (8008890 <__i2b+0x28>)
 800887a:	f240 1145 	movw	r1, #325	@ 0x145
 800887e:	f7fe fff3 	bl	8007868 <__assert_func>
 8008882:	2301      	movs	r3, #1
 8008884:	6144      	str	r4, [r0, #20]
 8008886:	6103      	str	r3, [r0, #16]
 8008888:	bd10      	pop	{r4, pc}
 800888a:	bf00      	nop
 800888c:	0800aff1 	.word	0x0800aff1
 8008890:	0800b002 	.word	0x0800b002

08008894 <__multiply>:
 8008894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008898:	4617      	mov	r7, r2
 800889a:	690a      	ldr	r2, [r1, #16]
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	429a      	cmp	r2, r3
 80088a0:	bfa8      	it	ge
 80088a2:	463b      	movge	r3, r7
 80088a4:	4689      	mov	r9, r1
 80088a6:	bfa4      	itt	ge
 80088a8:	460f      	movge	r7, r1
 80088aa:	4699      	movge	r9, r3
 80088ac:	693d      	ldr	r5, [r7, #16]
 80088ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	6879      	ldr	r1, [r7, #4]
 80088b6:	eb05 060a 	add.w	r6, r5, sl
 80088ba:	42b3      	cmp	r3, r6
 80088bc:	b085      	sub	sp, #20
 80088be:	bfb8      	it	lt
 80088c0:	3101      	addlt	r1, #1
 80088c2:	f7ff fe93 	bl	80085ec <_Balloc>
 80088c6:	b930      	cbnz	r0, 80088d6 <__multiply+0x42>
 80088c8:	4602      	mov	r2, r0
 80088ca:	4b41      	ldr	r3, [pc, #260]	@ (80089d0 <__multiply+0x13c>)
 80088cc:	4841      	ldr	r0, [pc, #260]	@ (80089d4 <__multiply+0x140>)
 80088ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80088d2:	f7fe ffc9 	bl	8007868 <__assert_func>
 80088d6:	f100 0414 	add.w	r4, r0, #20
 80088da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80088de:	4623      	mov	r3, r4
 80088e0:	2200      	movs	r2, #0
 80088e2:	4573      	cmp	r3, lr
 80088e4:	d320      	bcc.n	8008928 <__multiply+0x94>
 80088e6:	f107 0814 	add.w	r8, r7, #20
 80088ea:	f109 0114 	add.w	r1, r9, #20
 80088ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80088f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80088f6:	9302      	str	r3, [sp, #8]
 80088f8:	1beb      	subs	r3, r5, r7
 80088fa:	3b15      	subs	r3, #21
 80088fc:	f023 0303 	bic.w	r3, r3, #3
 8008900:	3304      	adds	r3, #4
 8008902:	3715      	adds	r7, #21
 8008904:	42bd      	cmp	r5, r7
 8008906:	bf38      	it	cc
 8008908:	2304      	movcc	r3, #4
 800890a:	9301      	str	r3, [sp, #4]
 800890c:	9b02      	ldr	r3, [sp, #8]
 800890e:	9103      	str	r1, [sp, #12]
 8008910:	428b      	cmp	r3, r1
 8008912:	d80c      	bhi.n	800892e <__multiply+0x9a>
 8008914:	2e00      	cmp	r6, #0
 8008916:	dd03      	ble.n	8008920 <__multiply+0x8c>
 8008918:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800891c:	2b00      	cmp	r3, #0
 800891e:	d055      	beq.n	80089cc <__multiply+0x138>
 8008920:	6106      	str	r6, [r0, #16]
 8008922:	b005      	add	sp, #20
 8008924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008928:	f843 2b04 	str.w	r2, [r3], #4
 800892c:	e7d9      	b.n	80088e2 <__multiply+0x4e>
 800892e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008932:	f1ba 0f00 	cmp.w	sl, #0
 8008936:	d01f      	beq.n	8008978 <__multiply+0xe4>
 8008938:	46c4      	mov	ip, r8
 800893a:	46a1      	mov	r9, r4
 800893c:	2700      	movs	r7, #0
 800893e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008942:	f8d9 3000 	ldr.w	r3, [r9]
 8008946:	fa1f fb82 	uxth.w	fp, r2
 800894a:	b29b      	uxth	r3, r3
 800894c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008950:	443b      	add	r3, r7
 8008952:	f8d9 7000 	ldr.w	r7, [r9]
 8008956:	0c12      	lsrs	r2, r2, #16
 8008958:	0c3f      	lsrs	r7, r7, #16
 800895a:	fb0a 7202 	mla	r2, sl, r2, r7
 800895e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008962:	b29b      	uxth	r3, r3
 8008964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008968:	4565      	cmp	r5, ip
 800896a:	f849 3b04 	str.w	r3, [r9], #4
 800896e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008972:	d8e4      	bhi.n	800893e <__multiply+0xaa>
 8008974:	9b01      	ldr	r3, [sp, #4]
 8008976:	50e7      	str	r7, [r4, r3]
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800897e:	3104      	adds	r1, #4
 8008980:	f1b9 0f00 	cmp.w	r9, #0
 8008984:	d020      	beq.n	80089c8 <__multiply+0x134>
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	4647      	mov	r7, r8
 800898a:	46a4      	mov	ip, r4
 800898c:	f04f 0a00 	mov.w	sl, #0
 8008990:	f8b7 b000 	ldrh.w	fp, [r7]
 8008994:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008998:	fb09 220b 	mla	r2, r9, fp, r2
 800899c:	4452      	add	r2, sl
 800899e:	b29b      	uxth	r3, r3
 80089a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089a4:	f84c 3b04 	str.w	r3, [ip], #4
 80089a8:	f857 3b04 	ldr.w	r3, [r7], #4
 80089ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80089b4:	fb09 330a 	mla	r3, r9, sl, r3
 80089b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80089bc:	42bd      	cmp	r5, r7
 80089be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089c2:	d8e5      	bhi.n	8008990 <__multiply+0xfc>
 80089c4:	9a01      	ldr	r2, [sp, #4]
 80089c6:	50a3      	str	r3, [r4, r2]
 80089c8:	3404      	adds	r4, #4
 80089ca:	e79f      	b.n	800890c <__multiply+0x78>
 80089cc:	3e01      	subs	r6, #1
 80089ce:	e7a1      	b.n	8008914 <__multiply+0x80>
 80089d0:	0800aff1 	.word	0x0800aff1
 80089d4:	0800b002 	.word	0x0800b002

080089d8 <__pow5mult>:
 80089d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089dc:	4615      	mov	r5, r2
 80089de:	f012 0203 	ands.w	r2, r2, #3
 80089e2:	4607      	mov	r7, r0
 80089e4:	460e      	mov	r6, r1
 80089e6:	d007      	beq.n	80089f8 <__pow5mult+0x20>
 80089e8:	4c25      	ldr	r4, [pc, #148]	@ (8008a80 <__pow5mult+0xa8>)
 80089ea:	3a01      	subs	r2, #1
 80089ec:	2300      	movs	r3, #0
 80089ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089f2:	f7ff fe5d 	bl	80086b0 <__multadd>
 80089f6:	4606      	mov	r6, r0
 80089f8:	10ad      	asrs	r5, r5, #2
 80089fa:	d03d      	beq.n	8008a78 <__pow5mult+0xa0>
 80089fc:	69fc      	ldr	r4, [r7, #28]
 80089fe:	b97c      	cbnz	r4, 8008a20 <__pow5mult+0x48>
 8008a00:	2010      	movs	r0, #16
 8008a02:	f7fd fdd3 	bl	80065ac <malloc>
 8008a06:	4602      	mov	r2, r0
 8008a08:	61f8      	str	r0, [r7, #28]
 8008a0a:	b928      	cbnz	r0, 8008a18 <__pow5mult+0x40>
 8008a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8008a84 <__pow5mult+0xac>)
 8008a0e:	481e      	ldr	r0, [pc, #120]	@ (8008a88 <__pow5mult+0xb0>)
 8008a10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008a14:	f7fe ff28 	bl	8007868 <__assert_func>
 8008a18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a1c:	6004      	str	r4, [r0, #0]
 8008a1e:	60c4      	str	r4, [r0, #12]
 8008a20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008a24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a28:	b94c      	cbnz	r4, 8008a3e <__pow5mult+0x66>
 8008a2a:	f240 2171 	movw	r1, #625	@ 0x271
 8008a2e:	4638      	mov	r0, r7
 8008a30:	f7ff ff1a 	bl	8008868 <__i2b>
 8008a34:	2300      	movs	r3, #0
 8008a36:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	6003      	str	r3, [r0, #0]
 8008a3e:	f04f 0900 	mov.w	r9, #0
 8008a42:	07eb      	lsls	r3, r5, #31
 8008a44:	d50a      	bpl.n	8008a5c <__pow5mult+0x84>
 8008a46:	4631      	mov	r1, r6
 8008a48:	4622      	mov	r2, r4
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	f7ff ff22 	bl	8008894 <__multiply>
 8008a50:	4631      	mov	r1, r6
 8008a52:	4680      	mov	r8, r0
 8008a54:	4638      	mov	r0, r7
 8008a56:	f7ff fe09 	bl	800866c <_Bfree>
 8008a5a:	4646      	mov	r6, r8
 8008a5c:	106d      	asrs	r5, r5, #1
 8008a5e:	d00b      	beq.n	8008a78 <__pow5mult+0xa0>
 8008a60:	6820      	ldr	r0, [r4, #0]
 8008a62:	b938      	cbnz	r0, 8008a74 <__pow5mult+0x9c>
 8008a64:	4622      	mov	r2, r4
 8008a66:	4621      	mov	r1, r4
 8008a68:	4638      	mov	r0, r7
 8008a6a:	f7ff ff13 	bl	8008894 <__multiply>
 8008a6e:	6020      	str	r0, [r4, #0]
 8008a70:	f8c0 9000 	str.w	r9, [r0]
 8008a74:	4604      	mov	r4, r0
 8008a76:	e7e4      	b.n	8008a42 <__pow5mult+0x6a>
 8008a78:	4630      	mov	r0, r6
 8008a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a7e:	bf00      	nop
 8008a80:	0800b0d8 	.word	0x0800b0d8
 8008a84:	0800aea8 	.word	0x0800aea8
 8008a88:	0800b002 	.word	0x0800b002

08008a8c <__lshift>:
 8008a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a90:	460c      	mov	r4, r1
 8008a92:	6849      	ldr	r1, [r1, #4]
 8008a94:	6923      	ldr	r3, [r4, #16]
 8008a96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a9a:	68a3      	ldr	r3, [r4, #8]
 8008a9c:	4607      	mov	r7, r0
 8008a9e:	4691      	mov	r9, r2
 8008aa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008aa4:	f108 0601 	add.w	r6, r8, #1
 8008aa8:	42b3      	cmp	r3, r6
 8008aaa:	db0b      	blt.n	8008ac4 <__lshift+0x38>
 8008aac:	4638      	mov	r0, r7
 8008aae:	f7ff fd9d 	bl	80085ec <_Balloc>
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	b948      	cbnz	r0, 8008aca <__lshift+0x3e>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	4b28      	ldr	r3, [pc, #160]	@ (8008b5c <__lshift+0xd0>)
 8008aba:	4829      	ldr	r0, [pc, #164]	@ (8008b60 <__lshift+0xd4>)
 8008abc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008ac0:	f7fe fed2 	bl	8007868 <__assert_func>
 8008ac4:	3101      	adds	r1, #1
 8008ac6:	005b      	lsls	r3, r3, #1
 8008ac8:	e7ee      	b.n	8008aa8 <__lshift+0x1c>
 8008aca:	2300      	movs	r3, #0
 8008acc:	f100 0114 	add.w	r1, r0, #20
 8008ad0:	f100 0210 	add.w	r2, r0, #16
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	4553      	cmp	r3, sl
 8008ad8:	db33      	blt.n	8008b42 <__lshift+0xb6>
 8008ada:	6920      	ldr	r0, [r4, #16]
 8008adc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ae0:	f104 0314 	add.w	r3, r4, #20
 8008ae4:	f019 091f 	ands.w	r9, r9, #31
 8008ae8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008aec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008af0:	d02b      	beq.n	8008b4a <__lshift+0xbe>
 8008af2:	f1c9 0e20 	rsb	lr, r9, #32
 8008af6:	468a      	mov	sl, r1
 8008af8:	2200      	movs	r2, #0
 8008afa:	6818      	ldr	r0, [r3, #0]
 8008afc:	fa00 f009 	lsl.w	r0, r0, r9
 8008b00:	4310      	orrs	r0, r2
 8008b02:	f84a 0b04 	str.w	r0, [sl], #4
 8008b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b0a:	459c      	cmp	ip, r3
 8008b0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b10:	d8f3      	bhi.n	8008afa <__lshift+0x6e>
 8008b12:	ebac 0304 	sub.w	r3, ip, r4
 8008b16:	3b15      	subs	r3, #21
 8008b18:	f023 0303 	bic.w	r3, r3, #3
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	f104 0015 	add.w	r0, r4, #21
 8008b22:	4560      	cmp	r0, ip
 8008b24:	bf88      	it	hi
 8008b26:	2304      	movhi	r3, #4
 8008b28:	50ca      	str	r2, [r1, r3]
 8008b2a:	b10a      	cbz	r2, 8008b30 <__lshift+0xa4>
 8008b2c:	f108 0602 	add.w	r6, r8, #2
 8008b30:	3e01      	subs	r6, #1
 8008b32:	4638      	mov	r0, r7
 8008b34:	612e      	str	r6, [r5, #16]
 8008b36:	4621      	mov	r1, r4
 8008b38:	f7ff fd98 	bl	800866c <_Bfree>
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b42:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b46:	3301      	adds	r3, #1
 8008b48:	e7c5      	b.n	8008ad6 <__lshift+0x4a>
 8008b4a:	3904      	subs	r1, #4
 8008b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b50:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b54:	459c      	cmp	ip, r3
 8008b56:	d8f9      	bhi.n	8008b4c <__lshift+0xc0>
 8008b58:	e7ea      	b.n	8008b30 <__lshift+0xa4>
 8008b5a:	bf00      	nop
 8008b5c:	0800aff1 	.word	0x0800aff1
 8008b60:	0800b002 	.word	0x0800b002

08008b64 <__mcmp>:
 8008b64:	690a      	ldr	r2, [r1, #16]
 8008b66:	4603      	mov	r3, r0
 8008b68:	6900      	ldr	r0, [r0, #16]
 8008b6a:	1a80      	subs	r0, r0, r2
 8008b6c:	b530      	push	{r4, r5, lr}
 8008b6e:	d10e      	bne.n	8008b8e <__mcmp+0x2a>
 8008b70:	3314      	adds	r3, #20
 8008b72:	3114      	adds	r1, #20
 8008b74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b84:	4295      	cmp	r5, r2
 8008b86:	d003      	beq.n	8008b90 <__mcmp+0x2c>
 8008b88:	d205      	bcs.n	8008b96 <__mcmp+0x32>
 8008b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8e:	bd30      	pop	{r4, r5, pc}
 8008b90:	42a3      	cmp	r3, r4
 8008b92:	d3f3      	bcc.n	8008b7c <__mcmp+0x18>
 8008b94:	e7fb      	b.n	8008b8e <__mcmp+0x2a>
 8008b96:	2001      	movs	r0, #1
 8008b98:	e7f9      	b.n	8008b8e <__mcmp+0x2a>
	...

08008b9c <__mdiff>:
 8008b9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba0:	4689      	mov	r9, r1
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	4648      	mov	r0, r9
 8008ba8:	4614      	mov	r4, r2
 8008baa:	f7ff ffdb 	bl	8008b64 <__mcmp>
 8008bae:	1e05      	subs	r5, r0, #0
 8008bb0:	d112      	bne.n	8008bd8 <__mdiff+0x3c>
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	f7ff fd19 	bl	80085ec <_Balloc>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	b928      	cbnz	r0, 8008bca <__mdiff+0x2e>
 8008bbe:	4b3f      	ldr	r3, [pc, #252]	@ (8008cbc <__mdiff+0x120>)
 8008bc0:	f240 2137 	movw	r1, #567	@ 0x237
 8008bc4:	483e      	ldr	r0, [pc, #248]	@ (8008cc0 <__mdiff+0x124>)
 8008bc6:	f7fe fe4f 	bl	8007868 <__assert_func>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	b003      	add	sp, #12
 8008bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd8:	bfbc      	itt	lt
 8008bda:	464b      	movlt	r3, r9
 8008bdc:	46a1      	movlt	r9, r4
 8008bde:	4630      	mov	r0, r6
 8008be0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008be4:	bfba      	itte	lt
 8008be6:	461c      	movlt	r4, r3
 8008be8:	2501      	movlt	r5, #1
 8008bea:	2500      	movge	r5, #0
 8008bec:	f7ff fcfe 	bl	80085ec <_Balloc>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	b918      	cbnz	r0, 8008bfc <__mdiff+0x60>
 8008bf4:	4b31      	ldr	r3, [pc, #196]	@ (8008cbc <__mdiff+0x120>)
 8008bf6:	f240 2145 	movw	r1, #581	@ 0x245
 8008bfa:	e7e3      	b.n	8008bc4 <__mdiff+0x28>
 8008bfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008c00:	6926      	ldr	r6, [r4, #16]
 8008c02:	60c5      	str	r5, [r0, #12]
 8008c04:	f109 0310 	add.w	r3, r9, #16
 8008c08:	f109 0514 	add.w	r5, r9, #20
 8008c0c:	f104 0e14 	add.w	lr, r4, #20
 8008c10:	f100 0b14 	add.w	fp, r0, #20
 8008c14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008c18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008c1c:	9301      	str	r3, [sp, #4]
 8008c1e:	46d9      	mov	r9, fp
 8008c20:	f04f 0c00 	mov.w	ip, #0
 8008c24:	9b01      	ldr	r3, [sp, #4]
 8008c26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008c2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008c2e:	9301      	str	r3, [sp, #4]
 8008c30:	fa1f f38a 	uxth.w	r3, sl
 8008c34:	4619      	mov	r1, r3
 8008c36:	b283      	uxth	r3, r0
 8008c38:	1acb      	subs	r3, r1, r3
 8008c3a:	0c00      	lsrs	r0, r0, #16
 8008c3c:	4463      	add	r3, ip
 8008c3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008c42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008c4c:	4576      	cmp	r6, lr
 8008c4e:	f849 3b04 	str.w	r3, [r9], #4
 8008c52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c56:	d8e5      	bhi.n	8008c24 <__mdiff+0x88>
 8008c58:	1b33      	subs	r3, r6, r4
 8008c5a:	3b15      	subs	r3, #21
 8008c5c:	f023 0303 	bic.w	r3, r3, #3
 8008c60:	3415      	adds	r4, #21
 8008c62:	3304      	adds	r3, #4
 8008c64:	42a6      	cmp	r6, r4
 8008c66:	bf38      	it	cc
 8008c68:	2304      	movcc	r3, #4
 8008c6a:	441d      	add	r5, r3
 8008c6c:	445b      	add	r3, fp
 8008c6e:	461e      	mov	r6, r3
 8008c70:	462c      	mov	r4, r5
 8008c72:	4544      	cmp	r4, r8
 8008c74:	d30e      	bcc.n	8008c94 <__mdiff+0xf8>
 8008c76:	f108 0103 	add.w	r1, r8, #3
 8008c7a:	1b49      	subs	r1, r1, r5
 8008c7c:	f021 0103 	bic.w	r1, r1, #3
 8008c80:	3d03      	subs	r5, #3
 8008c82:	45a8      	cmp	r8, r5
 8008c84:	bf38      	it	cc
 8008c86:	2100      	movcc	r1, #0
 8008c88:	440b      	add	r3, r1
 8008c8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c8e:	b191      	cbz	r1, 8008cb6 <__mdiff+0x11a>
 8008c90:	6117      	str	r7, [r2, #16]
 8008c92:	e79d      	b.n	8008bd0 <__mdiff+0x34>
 8008c94:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c98:	46e6      	mov	lr, ip
 8008c9a:	0c08      	lsrs	r0, r1, #16
 8008c9c:	fa1c fc81 	uxtah	ip, ip, r1
 8008ca0:	4471      	add	r1, lr
 8008ca2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ca6:	b289      	uxth	r1, r1
 8008ca8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008cac:	f846 1b04 	str.w	r1, [r6], #4
 8008cb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008cb4:	e7dd      	b.n	8008c72 <__mdiff+0xd6>
 8008cb6:	3f01      	subs	r7, #1
 8008cb8:	e7e7      	b.n	8008c8a <__mdiff+0xee>
 8008cba:	bf00      	nop
 8008cbc:	0800aff1 	.word	0x0800aff1
 8008cc0:	0800b002 	.word	0x0800b002

08008cc4 <__ulp>:
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	ed8d 0b00 	vstr	d0, [sp]
 8008cca:	9a01      	ldr	r2, [sp, #4]
 8008ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8008d0c <__ulp+0x48>)
 8008cce:	4013      	ands	r3, r2
 8008cd0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	dc08      	bgt.n	8008cea <__ulp+0x26>
 8008cd8:	425b      	negs	r3, r3
 8008cda:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008cde:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008ce2:	da04      	bge.n	8008cee <__ulp+0x2a>
 8008ce4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008ce8:	4113      	asrs	r3, r2
 8008cea:	2200      	movs	r2, #0
 8008cec:	e008      	b.n	8008d00 <__ulp+0x3c>
 8008cee:	f1a2 0314 	sub.w	r3, r2, #20
 8008cf2:	2b1e      	cmp	r3, #30
 8008cf4:	bfda      	itte	le
 8008cf6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008cfa:	40da      	lsrle	r2, r3
 8008cfc:	2201      	movgt	r2, #1
 8008cfe:	2300      	movs	r3, #0
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	ec41 0b10 	vmov	d0, r0, r1
 8008d08:	b002      	add	sp, #8
 8008d0a:	4770      	bx	lr
 8008d0c:	7ff00000 	.word	0x7ff00000

08008d10 <__b2d>:
 8008d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d14:	6906      	ldr	r6, [r0, #16]
 8008d16:	f100 0814 	add.w	r8, r0, #20
 8008d1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008d1e:	1f37      	subs	r7, r6, #4
 8008d20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008d24:	4610      	mov	r0, r2
 8008d26:	f7ff fd53 	bl	80087d0 <__hi0bits>
 8008d2a:	f1c0 0320 	rsb	r3, r0, #32
 8008d2e:	280a      	cmp	r0, #10
 8008d30:	600b      	str	r3, [r1, #0]
 8008d32:	491b      	ldr	r1, [pc, #108]	@ (8008da0 <__b2d+0x90>)
 8008d34:	dc15      	bgt.n	8008d62 <__b2d+0x52>
 8008d36:	f1c0 0c0b 	rsb	ip, r0, #11
 8008d3a:	fa22 f30c 	lsr.w	r3, r2, ip
 8008d3e:	45b8      	cmp	r8, r7
 8008d40:	ea43 0501 	orr.w	r5, r3, r1
 8008d44:	bf34      	ite	cc
 8008d46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008d4a:	2300      	movcs	r3, #0
 8008d4c:	3015      	adds	r0, #21
 8008d4e:	fa02 f000 	lsl.w	r0, r2, r0
 8008d52:	fa23 f30c 	lsr.w	r3, r3, ip
 8008d56:	4303      	orrs	r3, r0
 8008d58:	461c      	mov	r4, r3
 8008d5a:	ec45 4b10 	vmov	d0, r4, r5
 8008d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d62:	45b8      	cmp	r8, r7
 8008d64:	bf3a      	itte	cc
 8008d66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008d6a:	f1a6 0708 	subcc.w	r7, r6, #8
 8008d6e:	2300      	movcs	r3, #0
 8008d70:	380b      	subs	r0, #11
 8008d72:	d012      	beq.n	8008d9a <__b2d+0x8a>
 8008d74:	f1c0 0120 	rsb	r1, r0, #32
 8008d78:	fa23 f401 	lsr.w	r4, r3, r1
 8008d7c:	4082      	lsls	r2, r0
 8008d7e:	4322      	orrs	r2, r4
 8008d80:	4547      	cmp	r7, r8
 8008d82:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008d86:	bf8c      	ite	hi
 8008d88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008d8c:	2200      	movls	r2, #0
 8008d8e:	4083      	lsls	r3, r0
 8008d90:	40ca      	lsrs	r2, r1
 8008d92:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008d96:	4313      	orrs	r3, r2
 8008d98:	e7de      	b.n	8008d58 <__b2d+0x48>
 8008d9a:	ea42 0501 	orr.w	r5, r2, r1
 8008d9e:	e7db      	b.n	8008d58 <__b2d+0x48>
 8008da0:	3ff00000 	.word	0x3ff00000

08008da4 <__d2b>:
 8008da4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008da8:	460f      	mov	r7, r1
 8008daa:	2101      	movs	r1, #1
 8008dac:	ec59 8b10 	vmov	r8, r9, d0
 8008db0:	4616      	mov	r6, r2
 8008db2:	f7ff fc1b 	bl	80085ec <_Balloc>
 8008db6:	4604      	mov	r4, r0
 8008db8:	b930      	cbnz	r0, 8008dc8 <__d2b+0x24>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	4b23      	ldr	r3, [pc, #140]	@ (8008e4c <__d2b+0xa8>)
 8008dbe:	4824      	ldr	r0, [pc, #144]	@ (8008e50 <__d2b+0xac>)
 8008dc0:	f240 310f 	movw	r1, #783	@ 0x30f
 8008dc4:	f7fe fd50 	bl	8007868 <__assert_func>
 8008dc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008dcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008dd0:	b10d      	cbz	r5, 8008dd6 <__d2b+0x32>
 8008dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	f1b8 0300 	subs.w	r3, r8, #0
 8008ddc:	d023      	beq.n	8008e26 <__d2b+0x82>
 8008dde:	4668      	mov	r0, sp
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	f7ff fd14 	bl	800880e <__lo0bits>
 8008de6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008dea:	b1d0      	cbz	r0, 8008e22 <__d2b+0x7e>
 8008dec:	f1c0 0320 	rsb	r3, r0, #32
 8008df0:	fa02 f303 	lsl.w	r3, r2, r3
 8008df4:	430b      	orrs	r3, r1
 8008df6:	40c2      	lsrs	r2, r0
 8008df8:	6163      	str	r3, [r4, #20]
 8008dfa:	9201      	str	r2, [sp, #4]
 8008dfc:	9b01      	ldr	r3, [sp, #4]
 8008dfe:	61a3      	str	r3, [r4, #24]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	bf0c      	ite	eq
 8008e04:	2201      	moveq	r2, #1
 8008e06:	2202      	movne	r2, #2
 8008e08:	6122      	str	r2, [r4, #16]
 8008e0a:	b1a5      	cbz	r5, 8008e36 <__d2b+0x92>
 8008e0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008e10:	4405      	add	r5, r0
 8008e12:	603d      	str	r5, [r7, #0]
 8008e14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008e18:	6030      	str	r0, [r6, #0]
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	b003      	add	sp, #12
 8008e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e22:	6161      	str	r1, [r4, #20]
 8008e24:	e7ea      	b.n	8008dfc <__d2b+0x58>
 8008e26:	a801      	add	r0, sp, #4
 8008e28:	f7ff fcf1 	bl	800880e <__lo0bits>
 8008e2c:	9b01      	ldr	r3, [sp, #4]
 8008e2e:	6163      	str	r3, [r4, #20]
 8008e30:	3020      	adds	r0, #32
 8008e32:	2201      	movs	r2, #1
 8008e34:	e7e8      	b.n	8008e08 <__d2b+0x64>
 8008e36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008e3e:	6038      	str	r0, [r7, #0]
 8008e40:	6918      	ldr	r0, [r3, #16]
 8008e42:	f7ff fcc5 	bl	80087d0 <__hi0bits>
 8008e46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e4a:	e7e5      	b.n	8008e18 <__d2b+0x74>
 8008e4c:	0800aff1 	.word	0x0800aff1
 8008e50:	0800b002 	.word	0x0800b002

08008e54 <__ratio>:
 8008e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	b085      	sub	sp, #20
 8008e5a:	e9cd 1000 	strd	r1, r0, [sp]
 8008e5e:	a902      	add	r1, sp, #8
 8008e60:	f7ff ff56 	bl	8008d10 <__b2d>
 8008e64:	9800      	ldr	r0, [sp, #0]
 8008e66:	a903      	add	r1, sp, #12
 8008e68:	ec55 4b10 	vmov	r4, r5, d0
 8008e6c:	f7ff ff50 	bl	8008d10 <__b2d>
 8008e70:	9b01      	ldr	r3, [sp, #4]
 8008e72:	6919      	ldr	r1, [r3, #16]
 8008e74:	9b00      	ldr	r3, [sp, #0]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	1ac9      	subs	r1, r1, r3
 8008e7a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008e7e:	1a9b      	subs	r3, r3, r2
 8008e80:	ec5b ab10 	vmov	sl, fp, d0
 8008e84:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	bfce      	itee	gt
 8008e8c:	462a      	movgt	r2, r5
 8008e8e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e92:	465a      	movle	r2, fp
 8008e94:	462f      	mov	r7, r5
 8008e96:	46d9      	mov	r9, fp
 8008e98:	bfcc      	ite	gt
 8008e9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e9e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	4652      	mov	r2, sl
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	4639      	mov	r1, r7
 8008eaa:	f7f7 fce7 	bl	800087c <__aeabi_ddiv>
 8008eae:	ec41 0b10 	vmov	d0, r0, r1
 8008eb2:	b005      	add	sp, #20
 8008eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008eb8 <__copybits>:
 8008eb8:	3901      	subs	r1, #1
 8008eba:	b570      	push	{r4, r5, r6, lr}
 8008ebc:	1149      	asrs	r1, r1, #5
 8008ebe:	6914      	ldr	r4, [r2, #16]
 8008ec0:	3101      	adds	r1, #1
 8008ec2:	f102 0314 	add.w	r3, r2, #20
 8008ec6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008eca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ece:	1f05      	subs	r5, r0, #4
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	d30c      	bcc.n	8008eee <__copybits+0x36>
 8008ed4:	1aa3      	subs	r3, r4, r2
 8008ed6:	3b11      	subs	r3, #17
 8008ed8:	f023 0303 	bic.w	r3, r3, #3
 8008edc:	3211      	adds	r2, #17
 8008ede:	42a2      	cmp	r2, r4
 8008ee0:	bf88      	it	hi
 8008ee2:	2300      	movhi	r3, #0
 8008ee4:	4418      	add	r0, r3
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	4288      	cmp	r0, r1
 8008eea:	d305      	bcc.n	8008ef8 <__copybits+0x40>
 8008eec:	bd70      	pop	{r4, r5, r6, pc}
 8008eee:	f853 6b04 	ldr.w	r6, [r3], #4
 8008ef2:	f845 6f04 	str.w	r6, [r5, #4]!
 8008ef6:	e7eb      	b.n	8008ed0 <__copybits+0x18>
 8008ef8:	f840 3b04 	str.w	r3, [r0], #4
 8008efc:	e7f4      	b.n	8008ee8 <__copybits+0x30>

08008efe <__any_on>:
 8008efe:	f100 0214 	add.w	r2, r0, #20
 8008f02:	6900      	ldr	r0, [r0, #16]
 8008f04:	114b      	asrs	r3, r1, #5
 8008f06:	4298      	cmp	r0, r3
 8008f08:	b510      	push	{r4, lr}
 8008f0a:	db11      	blt.n	8008f30 <__any_on+0x32>
 8008f0c:	dd0a      	ble.n	8008f24 <__any_on+0x26>
 8008f0e:	f011 011f 	ands.w	r1, r1, #31
 8008f12:	d007      	beq.n	8008f24 <__any_on+0x26>
 8008f14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f18:	fa24 f001 	lsr.w	r0, r4, r1
 8008f1c:	fa00 f101 	lsl.w	r1, r0, r1
 8008f20:	428c      	cmp	r4, r1
 8008f22:	d10b      	bne.n	8008f3c <__any_on+0x3e>
 8008f24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d803      	bhi.n	8008f34 <__any_on+0x36>
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	bd10      	pop	{r4, pc}
 8008f30:	4603      	mov	r3, r0
 8008f32:	e7f7      	b.n	8008f24 <__any_on+0x26>
 8008f34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f38:	2900      	cmp	r1, #0
 8008f3a:	d0f5      	beq.n	8008f28 <__any_on+0x2a>
 8008f3c:	2001      	movs	r0, #1
 8008f3e:	e7f6      	b.n	8008f2e <__any_on+0x30>

08008f40 <sulp>:
 8008f40:	b570      	push	{r4, r5, r6, lr}
 8008f42:	4604      	mov	r4, r0
 8008f44:	460d      	mov	r5, r1
 8008f46:	ec45 4b10 	vmov	d0, r4, r5
 8008f4a:	4616      	mov	r6, r2
 8008f4c:	f7ff feba 	bl	8008cc4 <__ulp>
 8008f50:	ec51 0b10 	vmov	r0, r1, d0
 8008f54:	b17e      	cbz	r6, 8008f76 <sulp+0x36>
 8008f56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008f5a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	dd09      	ble.n	8008f76 <sulp+0x36>
 8008f62:	051b      	lsls	r3, r3, #20
 8008f64:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008f68:	2400      	movs	r4, #0
 8008f6a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008f6e:	4622      	mov	r2, r4
 8008f70:	462b      	mov	r3, r5
 8008f72:	f7f7 fb59 	bl	8000628 <__aeabi_dmul>
 8008f76:	ec41 0b10 	vmov	d0, r0, r1
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}
 8008f7c:	0000      	movs	r0, r0
	...

08008f80 <_strtod_l>:
 8008f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f84:	b09f      	sub	sp, #124	@ 0x7c
 8008f86:	460c      	mov	r4, r1
 8008f88:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008f8e:	9005      	str	r0, [sp, #20]
 8008f90:	f04f 0a00 	mov.w	sl, #0
 8008f94:	f04f 0b00 	mov.w	fp, #0
 8008f98:	460a      	mov	r2, r1
 8008f9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f9c:	7811      	ldrb	r1, [r2, #0]
 8008f9e:	292b      	cmp	r1, #43	@ 0x2b
 8008fa0:	d04a      	beq.n	8009038 <_strtod_l+0xb8>
 8008fa2:	d838      	bhi.n	8009016 <_strtod_l+0x96>
 8008fa4:	290d      	cmp	r1, #13
 8008fa6:	d832      	bhi.n	800900e <_strtod_l+0x8e>
 8008fa8:	2908      	cmp	r1, #8
 8008faa:	d832      	bhi.n	8009012 <_strtod_l+0x92>
 8008fac:	2900      	cmp	r1, #0
 8008fae:	d03b      	beq.n	8009028 <_strtod_l+0xa8>
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008fb6:	782a      	ldrb	r2, [r5, #0]
 8008fb8:	2a30      	cmp	r2, #48	@ 0x30
 8008fba:	f040 80b2 	bne.w	8009122 <_strtod_l+0x1a2>
 8008fbe:	786a      	ldrb	r2, [r5, #1]
 8008fc0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008fc4:	2a58      	cmp	r2, #88	@ 0x58
 8008fc6:	d16e      	bne.n	80090a6 <_strtod_l+0x126>
 8008fc8:	9302      	str	r3, [sp, #8]
 8008fca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fcc:	9301      	str	r3, [sp, #4]
 8008fce:	ab1a      	add	r3, sp, #104	@ 0x68
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	4a8f      	ldr	r2, [pc, #572]	@ (8009210 <_strtod_l+0x290>)
 8008fd4:	9805      	ldr	r0, [sp, #20]
 8008fd6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008fd8:	a919      	add	r1, sp, #100	@ 0x64
 8008fda:	f001 fae7 	bl	800a5ac <__gethex>
 8008fde:	f010 060f 	ands.w	r6, r0, #15
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	d005      	beq.n	8008ff2 <_strtod_l+0x72>
 8008fe6:	2e06      	cmp	r6, #6
 8008fe8:	d128      	bne.n	800903c <_strtod_l+0xbc>
 8008fea:	3501      	adds	r5, #1
 8008fec:	2300      	movs	r3, #0
 8008fee:	9519      	str	r5, [sp, #100]	@ 0x64
 8008ff0:	930e      	str	r3, [sp, #56]	@ 0x38
 8008ff2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f040 858e 	bne.w	8009b16 <_strtod_l+0xb96>
 8008ffa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ffc:	b1cb      	cbz	r3, 8009032 <_strtod_l+0xb2>
 8008ffe:	4652      	mov	r2, sl
 8009000:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009004:	ec43 2b10 	vmov	d0, r2, r3
 8009008:	b01f      	add	sp, #124	@ 0x7c
 800900a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800900e:	2920      	cmp	r1, #32
 8009010:	d1ce      	bne.n	8008fb0 <_strtod_l+0x30>
 8009012:	3201      	adds	r2, #1
 8009014:	e7c1      	b.n	8008f9a <_strtod_l+0x1a>
 8009016:	292d      	cmp	r1, #45	@ 0x2d
 8009018:	d1ca      	bne.n	8008fb0 <_strtod_l+0x30>
 800901a:	2101      	movs	r1, #1
 800901c:	910e      	str	r1, [sp, #56]	@ 0x38
 800901e:	1c51      	adds	r1, r2, #1
 8009020:	9119      	str	r1, [sp, #100]	@ 0x64
 8009022:	7852      	ldrb	r2, [r2, #1]
 8009024:	2a00      	cmp	r2, #0
 8009026:	d1c5      	bne.n	8008fb4 <_strtod_l+0x34>
 8009028:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800902a:	9419      	str	r4, [sp, #100]	@ 0x64
 800902c:	2b00      	cmp	r3, #0
 800902e:	f040 8570 	bne.w	8009b12 <_strtod_l+0xb92>
 8009032:	4652      	mov	r2, sl
 8009034:	465b      	mov	r3, fp
 8009036:	e7e5      	b.n	8009004 <_strtod_l+0x84>
 8009038:	2100      	movs	r1, #0
 800903a:	e7ef      	b.n	800901c <_strtod_l+0x9c>
 800903c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800903e:	b13a      	cbz	r2, 8009050 <_strtod_l+0xd0>
 8009040:	2135      	movs	r1, #53	@ 0x35
 8009042:	a81c      	add	r0, sp, #112	@ 0x70
 8009044:	f7ff ff38 	bl	8008eb8 <__copybits>
 8009048:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800904a:	9805      	ldr	r0, [sp, #20]
 800904c:	f7ff fb0e 	bl	800866c <_Bfree>
 8009050:	3e01      	subs	r6, #1
 8009052:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009054:	2e04      	cmp	r6, #4
 8009056:	d806      	bhi.n	8009066 <_strtod_l+0xe6>
 8009058:	e8df f006 	tbb	[pc, r6]
 800905c:	201d0314 	.word	0x201d0314
 8009060:	14          	.byte	0x14
 8009061:	00          	.byte	0x00
 8009062:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009066:	05e1      	lsls	r1, r4, #23
 8009068:	bf48      	it	mi
 800906a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800906e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009072:	0d1b      	lsrs	r3, r3, #20
 8009074:	051b      	lsls	r3, r3, #20
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1bb      	bne.n	8008ff2 <_strtod_l+0x72>
 800907a:	f7fe fbc1 	bl	8007800 <__errno>
 800907e:	2322      	movs	r3, #34	@ 0x22
 8009080:	6003      	str	r3, [r0, #0]
 8009082:	e7b6      	b.n	8008ff2 <_strtod_l+0x72>
 8009084:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009088:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800908c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009090:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009094:	e7e7      	b.n	8009066 <_strtod_l+0xe6>
 8009096:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009218 <_strtod_l+0x298>
 800909a:	e7e4      	b.n	8009066 <_strtod_l+0xe6>
 800909c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80090a0:	f04f 3aff 	mov.w	sl, #4294967295
 80090a4:	e7df      	b.n	8009066 <_strtod_l+0xe6>
 80090a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090a8:	1c5a      	adds	r2, r3, #1
 80090aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80090ac:	785b      	ldrb	r3, [r3, #1]
 80090ae:	2b30      	cmp	r3, #48	@ 0x30
 80090b0:	d0f9      	beq.n	80090a6 <_strtod_l+0x126>
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d09d      	beq.n	8008ff2 <_strtod_l+0x72>
 80090b6:	2301      	movs	r3, #1
 80090b8:	2700      	movs	r7, #0
 80090ba:	9308      	str	r3, [sp, #32]
 80090bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090be:	930c      	str	r3, [sp, #48]	@ 0x30
 80090c0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80090c2:	46b9      	mov	r9, r7
 80090c4:	220a      	movs	r2, #10
 80090c6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80090c8:	7805      	ldrb	r5, [r0, #0]
 80090ca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80090ce:	b2d9      	uxtb	r1, r3
 80090d0:	2909      	cmp	r1, #9
 80090d2:	d928      	bls.n	8009126 <_strtod_l+0x1a6>
 80090d4:	494f      	ldr	r1, [pc, #316]	@ (8009214 <_strtod_l+0x294>)
 80090d6:	2201      	movs	r2, #1
 80090d8:	f001 f9be 	bl	800a458 <strncmp>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d032      	beq.n	8009146 <_strtod_l+0x1c6>
 80090e0:	2000      	movs	r0, #0
 80090e2:	462a      	mov	r2, r5
 80090e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80090e6:	464d      	mov	r5, r9
 80090e8:	4603      	mov	r3, r0
 80090ea:	2a65      	cmp	r2, #101	@ 0x65
 80090ec:	d001      	beq.n	80090f2 <_strtod_l+0x172>
 80090ee:	2a45      	cmp	r2, #69	@ 0x45
 80090f0:	d114      	bne.n	800911c <_strtod_l+0x19c>
 80090f2:	b91d      	cbnz	r5, 80090fc <_strtod_l+0x17c>
 80090f4:	9a08      	ldr	r2, [sp, #32]
 80090f6:	4302      	orrs	r2, r0
 80090f8:	d096      	beq.n	8009028 <_strtod_l+0xa8>
 80090fa:	2500      	movs	r5, #0
 80090fc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80090fe:	1c62      	adds	r2, r4, #1
 8009100:	9219      	str	r2, [sp, #100]	@ 0x64
 8009102:	7862      	ldrb	r2, [r4, #1]
 8009104:	2a2b      	cmp	r2, #43	@ 0x2b
 8009106:	d07a      	beq.n	80091fe <_strtod_l+0x27e>
 8009108:	2a2d      	cmp	r2, #45	@ 0x2d
 800910a:	d07e      	beq.n	800920a <_strtod_l+0x28a>
 800910c:	f04f 0c00 	mov.w	ip, #0
 8009110:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009114:	2909      	cmp	r1, #9
 8009116:	f240 8085 	bls.w	8009224 <_strtod_l+0x2a4>
 800911a:	9419      	str	r4, [sp, #100]	@ 0x64
 800911c:	f04f 0800 	mov.w	r8, #0
 8009120:	e0a5      	b.n	800926e <_strtod_l+0x2ee>
 8009122:	2300      	movs	r3, #0
 8009124:	e7c8      	b.n	80090b8 <_strtod_l+0x138>
 8009126:	f1b9 0f08 	cmp.w	r9, #8
 800912a:	bfd8      	it	le
 800912c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800912e:	f100 0001 	add.w	r0, r0, #1
 8009132:	bfda      	itte	le
 8009134:	fb02 3301 	mlale	r3, r2, r1, r3
 8009138:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800913a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800913e:	f109 0901 	add.w	r9, r9, #1
 8009142:	9019      	str	r0, [sp, #100]	@ 0x64
 8009144:	e7bf      	b.n	80090c6 <_strtod_l+0x146>
 8009146:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	9219      	str	r2, [sp, #100]	@ 0x64
 800914c:	785a      	ldrb	r2, [r3, #1]
 800914e:	f1b9 0f00 	cmp.w	r9, #0
 8009152:	d03b      	beq.n	80091cc <_strtod_l+0x24c>
 8009154:	900a      	str	r0, [sp, #40]	@ 0x28
 8009156:	464d      	mov	r5, r9
 8009158:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800915c:	2b09      	cmp	r3, #9
 800915e:	d912      	bls.n	8009186 <_strtod_l+0x206>
 8009160:	2301      	movs	r3, #1
 8009162:	e7c2      	b.n	80090ea <_strtod_l+0x16a>
 8009164:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	9219      	str	r2, [sp, #100]	@ 0x64
 800916a:	785a      	ldrb	r2, [r3, #1]
 800916c:	3001      	adds	r0, #1
 800916e:	2a30      	cmp	r2, #48	@ 0x30
 8009170:	d0f8      	beq.n	8009164 <_strtod_l+0x1e4>
 8009172:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009176:	2b08      	cmp	r3, #8
 8009178:	f200 84d2 	bhi.w	8009b20 <_strtod_l+0xba0>
 800917c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800917e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009180:	2000      	movs	r0, #0
 8009182:	930c      	str	r3, [sp, #48]	@ 0x30
 8009184:	4605      	mov	r5, r0
 8009186:	3a30      	subs	r2, #48	@ 0x30
 8009188:	f100 0301 	add.w	r3, r0, #1
 800918c:	d018      	beq.n	80091c0 <_strtod_l+0x240>
 800918e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009190:	4419      	add	r1, r3
 8009192:	910a      	str	r1, [sp, #40]	@ 0x28
 8009194:	462e      	mov	r6, r5
 8009196:	f04f 0e0a 	mov.w	lr, #10
 800919a:	1c71      	adds	r1, r6, #1
 800919c:	eba1 0c05 	sub.w	ip, r1, r5
 80091a0:	4563      	cmp	r3, ip
 80091a2:	dc15      	bgt.n	80091d0 <_strtod_l+0x250>
 80091a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80091a8:	182b      	adds	r3, r5, r0
 80091aa:	2b08      	cmp	r3, #8
 80091ac:	f105 0501 	add.w	r5, r5, #1
 80091b0:	4405      	add	r5, r0
 80091b2:	dc1a      	bgt.n	80091ea <_strtod_l+0x26a>
 80091b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091b6:	230a      	movs	r3, #10
 80091b8:	fb03 2301 	mla	r3, r3, r1, r2
 80091bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091be:	2300      	movs	r3, #0
 80091c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091c2:	1c51      	adds	r1, r2, #1
 80091c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80091c6:	7852      	ldrb	r2, [r2, #1]
 80091c8:	4618      	mov	r0, r3
 80091ca:	e7c5      	b.n	8009158 <_strtod_l+0x1d8>
 80091cc:	4648      	mov	r0, r9
 80091ce:	e7ce      	b.n	800916e <_strtod_l+0x1ee>
 80091d0:	2e08      	cmp	r6, #8
 80091d2:	dc05      	bgt.n	80091e0 <_strtod_l+0x260>
 80091d4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80091d6:	fb0e f606 	mul.w	r6, lr, r6
 80091da:	960b      	str	r6, [sp, #44]	@ 0x2c
 80091dc:	460e      	mov	r6, r1
 80091de:	e7dc      	b.n	800919a <_strtod_l+0x21a>
 80091e0:	2910      	cmp	r1, #16
 80091e2:	bfd8      	it	le
 80091e4:	fb0e f707 	mulle.w	r7, lr, r7
 80091e8:	e7f8      	b.n	80091dc <_strtod_l+0x25c>
 80091ea:	2b0f      	cmp	r3, #15
 80091ec:	bfdc      	itt	le
 80091ee:	230a      	movle	r3, #10
 80091f0:	fb03 2707 	mlale	r7, r3, r7, r2
 80091f4:	e7e3      	b.n	80091be <_strtod_l+0x23e>
 80091f6:	2300      	movs	r3, #0
 80091f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80091fa:	2301      	movs	r3, #1
 80091fc:	e77a      	b.n	80090f4 <_strtod_l+0x174>
 80091fe:	f04f 0c00 	mov.w	ip, #0
 8009202:	1ca2      	adds	r2, r4, #2
 8009204:	9219      	str	r2, [sp, #100]	@ 0x64
 8009206:	78a2      	ldrb	r2, [r4, #2]
 8009208:	e782      	b.n	8009110 <_strtod_l+0x190>
 800920a:	f04f 0c01 	mov.w	ip, #1
 800920e:	e7f8      	b.n	8009202 <_strtod_l+0x282>
 8009210:	0800b1ec 	.word	0x0800b1ec
 8009214:	0800b05b 	.word	0x0800b05b
 8009218:	7ff00000 	.word	0x7ff00000
 800921c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800921e:	1c51      	adds	r1, r2, #1
 8009220:	9119      	str	r1, [sp, #100]	@ 0x64
 8009222:	7852      	ldrb	r2, [r2, #1]
 8009224:	2a30      	cmp	r2, #48	@ 0x30
 8009226:	d0f9      	beq.n	800921c <_strtod_l+0x29c>
 8009228:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800922c:	2908      	cmp	r1, #8
 800922e:	f63f af75 	bhi.w	800911c <_strtod_l+0x19c>
 8009232:	3a30      	subs	r2, #48	@ 0x30
 8009234:	9209      	str	r2, [sp, #36]	@ 0x24
 8009236:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009238:	920f      	str	r2, [sp, #60]	@ 0x3c
 800923a:	f04f 080a 	mov.w	r8, #10
 800923e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009240:	1c56      	adds	r6, r2, #1
 8009242:	9619      	str	r6, [sp, #100]	@ 0x64
 8009244:	7852      	ldrb	r2, [r2, #1]
 8009246:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800924a:	f1be 0f09 	cmp.w	lr, #9
 800924e:	d939      	bls.n	80092c4 <_strtod_l+0x344>
 8009250:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009252:	1a76      	subs	r6, r6, r1
 8009254:	2e08      	cmp	r6, #8
 8009256:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800925a:	dc03      	bgt.n	8009264 <_strtod_l+0x2e4>
 800925c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800925e:	4588      	cmp	r8, r1
 8009260:	bfa8      	it	ge
 8009262:	4688      	movge	r8, r1
 8009264:	f1bc 0f00 	cmp.w	ip, #0
 8009268:	d001      	beq.n	800926e <_strtod_l+0x2ee>
 800926a:	f1c8 0800 	rsb	r8, r8, #0
 800926e:	2d00      	cmp	r5, #0
 8009270:	d14e      	bne.n	8009310 <_strtod_l+0x390>
 8009272:	9908      	ldr	r1, [sp, #32]
 8009274:	4308      	orrs	r0, r1
 8009276:	f47f aebc 	bne.w	8008ff2 <_strtod_l+0x72>
 800927a:	2b00      	cmp	r3, #0
 800927c:	f47f aed4 	bne.w	8009028 <_strtod_l+0xa8>
 8009280:	2a69      	cmp	r2, #105	@ 0x69
 8009282:	d028      	beq.n	80092d6 <_strtod_l+0x356>
 8009284:	dc25      	bgt.n	80092d2 <_strtod_l+0x352>
 8009286:	2a49      	cmp	r2, #73	@ 0x49
 8009288:	d025      	beq.n	80092d6 <_strtod_l+0x356>
 800928a:	2a4e      	cmp	r2, #78	@ 0x4e
 800928c:	f47f aecc 	bne.w	8009028 <_strtod_l+0xa8>
 8009290:	499a      	ldr	r1, [pc, #616]	@ (80094fc <_strtod_l+0x57c>)
 8009292:	a819      	add	r0, sp, #100	@ 0x64
 8009294:	f001 fbac 	bl	800a9f0 <__match>
 8009298:	2800      	cmp	r0, #0
 800929a:	f43f aec5 	beq.w	8009028 <_strtod_l+0xa8>
 800929e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	2b28      	cmp	r3, #40	@ 0x28
 80092a4:	d12e      	bne.n	8009304 <_strtod_l+0x384>
 80092a6:	4996      	ldr	r1, [pc, #600]	@ (8009500 <_strtod_l+0x580>)
 80092a8:	aa1c      	add	r2, sp, #112	@ 0x70
 80092aa:	a819      	add	r0, sp, #100	@ 0x64
 80092ac:	f001 fbb4 	bl	800aa18 <__hexnan>
 80092b0:	2805      	cmp	r0, #5
 80092b2:	d127      	bne.n	8009304 <_strtod_l+0x384>
 80092b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80092b6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80092ba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80092be:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80092c2:	e696      	b.n	8008ff2 <_strtod_l+0x72>
 80092c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80092c6:	fb08 2101 	mla	r1, r8, r1, r2
 80092ca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80092ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80092d0:	e7b5      	b.n	800923e <_strtod_l+0x2be>
 80092d2:	2a6e      	cmp	r2, #110	@ 0x6e
 80092d4:	e7da      	b.n	800928c <_strtod_l+0x30c>
 80092d6:	498b      	ldr	r1, [pc, #556]	@ (8009504 <_strtod_l+0x584>)
 80092d8:	a819      	add	r0, sp, #100	@ 0x64
 80092da:	f001 fb89 	bl	800a9f0 <__match>
 80092de:	2800      	cmp	r0, #0
 80092e0:	f43f aea2 	beq.w	8009028 <_strtod_l+0xa8>
 80092e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092e6:	4988      	ldr	r1, [pc, #544]	@ (8009508 <_strtod_l+0x588>)
 80092e8:	3b01      	subs	r3, #1
 80092ea:	a819      	add	r0, sp, #100	@ 0x64
 80092ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80092ee:	f001 fb7f 	bl	800a9f0 <__match>
 80092f2:	b910      	cbnz	r0, 80092fa <_strtod_l+0x37a>
 80092f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092f6:	3301      	adds	r3, #1
 80092f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80092fa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009518 <_strtod_l+0x598>
 80092fe:	f04f 0a00 	mov.w	sl, #0
 8009302:	e676      	b.n	8008ff2 <_strtod_l+0x72>
 8009304:	4881      	ldr	r0, [pc, #516]	@ (800950c <_strtod_l+0x58c>)
 8009306:	f001 f8c7 	bl	800a498 <nan>
 800930a:	ec5b ab10 	vmov	sl, fp, d0
 800930e:	e670      	b.n	8008ff2 <_strtod_l+0x72>
 8009310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009312:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009314:	eba8 0303 	sub.w	r3, r8, r3
 8009318:	f1b9 0f00 	cmp.w	r9, #0
 800931c:	bf08      	it	eq
 800931e:	46a9      	moveq	r9, r5
 8009320:	2d10      	cmp	r5, #16
 8009322:	9309      	str	r3, [sp, #36]	@ 0x24
 8009324:	462c      	mov	r4, r5
 8009326:	bfa8      	it	ge
 8009328:	2410      	movge	r4, #16
 800932a:	f7f7 f903 	bl	8000534 <__aeabi_ui2d>
 800932e:	2d09      	cmp	r5, #9
 8009330:	4682      	mov	sl, r0
 8009332:	468b      	mov	fp, r1
 8009334:	dc13      	bgt.n	800935e <_strtod_l+0x3de>
 8009336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009338:	2b00      	cmp	r3, #0
 800933a:	f43f ae5a 	beq.w	8008ff2 <_strtod_l+0x72>
 800933e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009340:	dd78      	ble.n	8009434 <_strtod_l+0x4b4>
 8009342:	2b16      	cmp	r3, #22
 8009344:	dc5f      	bgt.n	8009406 <_strtod_l+0x486>
 8009346:	4972      	ldr	r1, [pc, #456]	@ (8009510 <_strtod_l+0x590>)
 8009348:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800934c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009350:	4652      	mov	r2, sl
 8009352:	465b      	mov	r3, fp
 8009354:	f7f7 f968 	bl	8000628 <__aeabi_dmul>
 8009358:	4682      	mov	sl, r0
 800935a:	468b      	mov	fp, r1
 800935c:	e649      	b.n	8008ff2 <_strtod_l+0x72>
 800935e:	4b6c      	ldr	r3, [pc, #432]	@ (8009510 <_strtod_l+0x590>)
 8009360:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009364:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009368:	f7f7 f95e 	bl	8000628 <__aeabi_dmul>
 800936c:	4682      	mov	sl, r0
 800936e:	4638      	mov	r0, r7
 8009370:	468b      	mov	fp, r1
 8009372:	f7f7 f8df 	bl	8000534 <__aeabi_ui2d>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4650      	mov	r0, sl
 800937c:	4659      	mov	r1, fp
 800937e:	f7f6 ff9d 	bl	80002bc <__adddf3>
 8009382:	2d0f      	cmp	r5, #15
 8009384:	4682      	mov	sl, r0
 8009386:	468b      	mov	fp, r1
 8009388:	ddd5      	ble.n	8009336 <_strtod_l+0x3b6>
 800938a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800938c:	1b2c      	subs	r4, r5, r4
 800938e:	441c      	add	r4, r3
 8009390:	2c00      	cmp	r4, #0
 8009392:	f340 8093 	ble.w	80094bc <_strtod_l+0x53c>
 8009396:	f014 030f 	ands.w	r3, r4, #15
 800939a:	d00a      	beq.n	80093b2 <_strtod_l+0x432>
 800939c:	495c      	ldr	r1, [pc, #368]	@ (8009510 <_strtod_l+0x590>)
 800939e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093a2:	4652      	mov	r2, sl
 80093a4:	465b      	mov	r3, fp
 80093a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093aa:	f7f7 f93d 	bl	8000628 <__aeabi_dmul>
 80093ae:	4682      	mov	sl, r0
 80093b0:	468b      	mov	fp, r1
 80093b2:	f034 040f 	bics.w	r4, r4, #15
 80093b6:	d073      	beq.n	80094a0 <_strtod_l+0x520>
 80093b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80093bc:	dd49      	ble.n	8009452 <_strtod_l+0x4d2>
 80093be:	2400      	movs	r4, #0
 80093c0:	46a0      	mov	r8, r4
 80093c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80093c4:	46a1      	mov	r9, r4
 80093c6:	9a05      	ldr	r2, [sp, #20]
 80093c8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009518 <_strtod_l+0x598>
 80093cc:	2322      	movs	r3, #34	@ 0x22
 80093ce:	6013      	str	r3, [r2, #0]
 80093d0:	f04f 0a00 	mov.w	sl, #0
 80093d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f43f ae0b 	beq.w	8008ff2 <_strtod_l+0x72>
 80093dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093de:	9805      	ldr	r0, [sp, #20]
 80093e0:	f7ff f944 	bl	800866c <_Bfree>
 80093e4:	9805      	ldr	r0, [sp, #20]
 80093e6:	4649      	mov	r1, r9
 80093e8:	f7ff f940 	bl	800866c <_Bfree>
 80093ec:	9805      	ldr	r0, [sp, #20]
 80093ee:	4641      	mov	r1, r8
 80093f0:	f7ff f93c 	bl	800866c <_Bfree>
 80093f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093f6:	9805      	ldr	r0, [sp, #20]
 80093f8:	f7ff f938 	bl	800866c <_Bfree>
 80093fc:	9805      	ldr	r0, [sp, #20]
 80093fe:	4621      	mov	r1, r4
 8009400:	f7ff f934 	bl	800866c <_Bfree>
 8009404:	e5f5      	b.n	8008ff2 <_strtod_l+0x72>
 8009406:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009408:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800940c:	4293      	cmp	r3, r2
 800940e:	dbbc      	blt.n	800938a <_strtod_l+0x40a>
 8009410:	4c3f      	ldr	r4, [pc, #252]	@ (8009510 <_strtod_l+0x590>)
 8009412:	f1c5 050f 	rsb	r5, r5, #15
 8009416:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800941a:	4652      	mov	r2, sl
 800941c:	465b      	mov	r3, fp
 800941e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009422:	f7f7 f901 	bl	8000628 <__aeabi_dmul>
 8009426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009428:	1b5d      	subs	r5, r3, r5
 800942a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800942e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009432:	e78f      	b.n	8009354 <_strtod_l+0x3d4>
 8009434:	3316      	adds	r3, #22
 8009436:	dba8      	blt.n	800938a <_strtod_l+0x40a>
 8009438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800943a:	eba3 0808 	sub.w	r8, r3, r8
 800943e:	4b34      	ldr	r3, [pc, #208]	@ (8009510 <_strtod_l+0x590>)
 8009440:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009444:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009448:	4650      	mov	r0, sl
 800944a:	4659      	mov	r1, fp
 800944c:	f7f7 fa16 	bl	800087c <__aeabi_ddiv>
 8009450:	e782      	b.n	8009358 <_strtod_l+0x3d8>
 8009452:	2300      	movs	r3, #0
 8009454:	4f2f      	ldr	r7, [pc, #188]	@ (8009514 <_strtod_l+0x594>)
 8009456:	1124      	asrs	r4, r4, #4
 8009458:	4650      	mov	r0, sl
 800945a:	4659      	mov	r1, fp
 800945c:	461e      	mov	r6, r3
 800945e:	2c01      	cmp	r4, #1
 8009460:	dc21      	bgt.n	80094a6 <_strtod_l+0x526>
 8009462:	b10b      	cbz	r3, 8009468 <_strtod_l+0x4e8>
 8009464:	4682      	mov	sl, r0
 8009466:	468b      	mov	fp, r1
 8009468:	492a      	ldr	r1, [pc, #168]	@ (8009514 <_strtod_l+0x594>)
 800946a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800946e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009472:	4652      	mov	r2, sl
 8009474:	465b      	mov	r3, fp
 8009476:	e9d1 0100 	ldrd	r0, r1, [r1]
 800947a:	f7f7 f8d5 	bl	8000628 <__aeabi_dmul>
 800947e:	4b26      	ldr	r3, [pc, #152]	@ (8009518 <_strtod_l+0x598>)
 8009480:	460a      	mov	r2, r1
 8009482:	400b      	ands	r3, r1
 8009484:	4925      	ldr	r1, [pc, #148]	@ (800951c <_strtod_l+0x59c>)
 8009486:	428b      	cmp	r3, r1
 8009488:	4682      	mov	sl, r0
 800948a:	d898      	bhi.n	80093be <_strtod_l+0x43e>
 800948c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009490:	428b      	cmp	r3, r1
 8009492:	bf86      	itte	hi
 8009494:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009520 <_strtod_l+0x5a0>
 8009498:	f04f 3aff 	movhi.w	sl, #4294967295
 800949c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80094a0:	2300      	movs	r3, #0
 80094a2:	9308      	str	r3, [sp, #32]
 80094a4:	e076      	b.n	8009594 <_strtod_l+0x614>
 80094a6:	07e2      	lsls	r2, r4, #31
 80094a8:	d504      	bpl.n	80094b4 <_strtod_l+0x534>
 80094aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ae:	f7f7 f8bb 	bl	8000628 <__aeabi_dmul>
 80094b2:	2301      	movs	r3, #1
 80094b4:	3601      	adds	r6, #1
 80094b6:	1064      	asrs	r4, r4, #1
 80094b8:	3708      	adds	r7, #8
 80094ba:	e7d0      	b.n	800945e <_strtod_l+0x4de>
 80094bc:	d0f0      	beq.n	80094a0 <_strtod_l+0x520>
 80094be:	4264      	negs	r4, r4
 80094c0:	f014 020f 	ands.w	r2, r4, #15
 80094c4:	d00a      	beq.n	80094dc <_strtod_l+0x55c>
 80094c6:	4b12      	ldr	r3, [pc, #72]	@ (8009510 <_strtod_l+0x590>)
 80094c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094cc:	4650      	mov	r0, sl
 80094ce:	4659      	mov	r1, fp
 80094d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d4:	f7f7 f9d2 	bl	800087c <__aeabi_ddiv>
 80094d8:	4682      	mov	sl, r0
 80094da:	468b      	mov	fp, r1
 80094dc:	1124      	asrs	r4, r4, #4
 80094de:	d0df      	beq.n	80094a0 <_strtod_l+0x520>
 80094e0:	2c1f      	cmp	r4, #31
 80094e2:	dd1f      	ble.n	8009524 <_strtod_l+0x5a4>
 80094e4:	2400      	movs	r4, #0
 80094e6:	46a0      	mov	r8, r4
 80094e8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80094ea:	46a1      	mov	r9, r4
 80094ec:	9a05      	ldr	r2, [sp, #20]
 80094ee:	2322      	movs	r3, #34	@ 0x22
 80094f0:	f04f 0a00 	mov.w	sl, #0
 80094f4:	f04f 0b00 	mov.w	fp, #0
 80094f8:	6013      	str	r3, [r2, #0]
 80094fa:	e76b      	b.n	80093d4 <_strtod_l+0x454>
 80094fc:	0800af24 	.word	0x0800af24
 8009500:	0800b1d8 	.word	0x0800b1d8
 8009504:	0800af1c 	.word	0x0800af1c
 8009508:	0800af8f 	.word	0x0800af8f
 800950c:	0800af8b 	.word	0x0800af8b
 8009510:	0800b110 	.word	0x0800b110
 8009514:	0800b0e8 	.word	0x0800b0e8
 8009518:	7ff00000 	.word	0x7ff00000
 800951c:	7ca00000 	.word	0x7ca00000
 8009520:	7fefffff 	.word	0x7fefffff
 8009524:	f014 0310 	ands.w	r3, r4, #16
 8009528:	bf18      	it	ne
 800952a:	236a      	movne	r3, #106	@ 0x6a
 800952c:	4ea9      	ldr	r6, [pc, #676]	@ (80097d4 <_strtod_l+0x854>)
 800952e:	9308      	str	r3, [sp, #32]
 8009530:	4650      	mov	r0, sl
 8009532:	4659      	mov	r1, fp
 8009534:	2300      	movs	r3, #0
 8009536:	07e7      	lsls	r7, r4, #31
 8009538:	d504      	bpl.n	8009544 <_strtod_l+0x5c4>
 800953a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800953e:	f7f7 f873 	bl	8000628 <__aeabi_dmul>
 8009542:	2301      	movs	r3, #1
 8009544:	1064      	asrs	r4, r4, #1
 8009546:	f106 0608 	add.w	r6, r6, #8
 800954a:	d1f4      	bne.n	8009536 <_strtod_l+0x5b6>
 800954c:	b10b      	cbz	r3, 8009552 <_strtod_l+0x5d2>
 800954e:	4682      	mov	sl, r0
 8009550:	468b      	mov	fp, r1
 8009552:	9b08      	ldr	r3, [sp, #32]
 8009554:	b1b3      	cbz	r3, 8009584 <_strtod_l+0x604>
 8009556:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800955a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800955e:	2b00      	cmp	r3, #0
 8009560:	4659      	mov	r1, fp
 8009562:	dd0f      	ble.n	8009584 <_strtod_l+0x604>
 8009564:	2b1f      	cmp	r3, #31
 8009566:	dd56      	ble.n	8009616 <_strtod_l+0x696>
 8009568:	2b34      	cmp	r3, #52	@ 0x34
 800956a:	bfde      	ittt	le
 800956c:	f04f 33ff 	movle.w	r3, #4294967295
 8009570:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009574:	4093      	lslle	r3, r2
 8009576:	f04f 0a00 	mov.w	sl, #0
 800957a:	bfcc      	ite	gt
 800957c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009580:	ea03 0b01 	andle.w	fp, r3, r1
 8009584:	2200      	movs	r2, #0
 8009586:	2300      	movs	r3, #0
 8009588:	4650      	mov	r0, sl
 800958a:	4659      	mov	r1, fp
 800958c:	f7f7 fab4 	bl	8000af8 <__aeabi_dcmpeq>
 8009590:	2800      	cmp	r0, #0
 8009592:	d1a7      	bne.n	80094e4 <_strtod_l+0x564>
 8009594:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800959a:	9805      	ldr	r0, [sp, #20]
 800959c:	462b      	mov	r3, r5
 800959e:	464a      	mov	r2, r9
 80095a0:	f7ff f8cc 	bl	800873c <__s2b>
 80095a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80095a6:	2800      	cmp	r0, #0
 80095a8:	f43f af09 	beq.w	80093be <_strtod_l+0x43e>
 80095ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095b0:	2a00      	cmp	r2, #0
 80095b2:	eba3 0308 	sub.w	r3, r3, r8
 80095b6:	bfa8      	it	ge
 80095b8:	2300      	movge	r3, #0
 80095ba:	9312      	str	r3, [sp, #72]	@ 0x48
 80095bc:	2400      	movs	r4, #0
 80095be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80095c2:	9316      	str	r3, [sp, #88]	@ 0x58
 80095c4:	46a0      	mov	r8, r4
 80095c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095c8:	9805      	ldr	r0, [sp, #20]
 80095ca:	6859      	ldr	r1, [r3, #4]
 80095cc:	f7ff f80e 	bl	80085ec <_Balloc>
 80095d0:	4681      	mov	r9, r0
 80095d2:	2800      	cmp	r0, #0
 80095d4:	f43f aef7 	beq.w	80093c6 <_strtod_l+0x446>
 80095d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095da:	691a      	ldr	r2, [r3, #16]
 80095dc:	3202      	adds	r2, #2
 80095de:	f103 010c 	add.w	r1, r3, #12
 80095e2:	0092      	lsls	r2, r2, #2
 80095e4:	300c      	adds	r0, #12
 80095e6:	f000 ff49 	bl	800a47c <memcpy>
 80095ea:	ec4b ab10 	vmov	d0, sl, fp
 80095ee:	9805      	ldr	r0, [sp, #20]
 80095f0:	aa1c      	add	r2, sp, #112	@ 0x70
 80095f2:	a91b      	add	r1, sp, #108	@ 0x6c
 80095f4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80095f8:	f7ff fbd4 	bl	8008da4 <__d2b>
 80095fc:	901a      	str	r0, [sp, #104]	@ 0x68
 80095fe:	2800      	cmp	r0, #0
 8009600:	f43f aee1 	beq.w	80093c6 <_strtod_l+0x446>
 8009604:	9805      	ldr	r0, [sp, #20]
 8009606:	2101      	movs	r1, #1
 8009608:	f7ff f92e 	bl	8008868 <__i2b>
 800960c:	4680      	mov	r8, r0
 800960e:	b948      	cbnz	r0, 8009624 <_strtod_l+0x6a4>
 8009610:	f04f 0800 	mov.w	r8, #0
 8009614:	e6d7      	b.n	80093c6 <_strtod_l+0x446>
 8009616:	f04f 32ff 	mov.w	r2, #4294967295
 800961a:	fa02 f303 	lsl.w	r3, r2, r3
 800961e:	ea03 0a0a 	and.w	sl, r3, sl
 8009622:	e7af      	b.n	8009584 <_strtod_l+0x604>
 8009624:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009626:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009628:	2d00      	cmp	r5, #0
 800962a:	bfab      	itete	ge
 800962c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800962e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009630:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009632:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009634:	bfac      	ite	ge
 8009636:	18ef      	addge	r7, r5, r3
 8009638:	1b5e      	sublt	r6, r3, r5
 800963a:	9b08      	ldr	r3, [sp, #32]
 800963c:	1aed      	subs	r5, r5, r3
 800963e:	4415      	add	r5, r2
 8009640:	4b65      	ldr	r3, [pc, #404]	@ (80097d8 <_strtod_l+0x858>)
 8009642:	3d01      	subs	r5, #1
 8009644:	429d      	cmp	r5, r3
 8009646:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800964a:	da50      	bge.n	80096ee <_strtod_l+0x76e>
 800964c:	1b5b      	subs	r3, r3, r5
 800964e:	2b1f      	cmp	r3, #31
 8009650:	eba2 0203 	sub.w	r2, r2, r3
 8009654:	f04f 0101 	mov.w	r1, #1
 8009658:	dc3d      	bgt.n	80096d6 <_strtod_l+0x756>
 800965a:	fa01 f303 	lsl.w	r3, r1, r3
 800965e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009660:	2300      	movs	r3, #0
 8009662:	9310      	str	r3, [sp, #64]	@ 0x40
 8009664:	18bd      	adds	r5, r7, r2
 8009666:	9b08      	ldr	r3, [sp, #32]
 8009668:	42af      	cmp	r7, r5
 800966a:	4416      	add	r6, r2
 800966c:	441e      	add	r6, r3
 800966e:	463b      	mov	r3, r7
 8009670:	bfa8      	it	ge
 8009672:	462b      	movge	r3, r5
 8009674:	42b3      	cmp	r3, r6
 8009676:	bfa8      	it	ge
 8009678:	4633      	movge	r3, r6
 800967a:	2b00      	cmp	r3, #0
 800967c:	bfc2      	ittt	gt
 800967e:	1aed      	subgt	r5, r5, r3
 8009680:	1af6      	subgt	r6, r6, r3
 8009682:	1aff      	subgt	r7, r7, r3
 8009684:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009686:	2b00      	cmp	r3, #0
 8009688:	dd16      	ble.n	80096b8 <_strtod_l+0x738>
 800968a:	4641      	mov	r1, r8
 800968c:	9805      	ldr	r0, [sp, #20]
 800968e:	461a      	mov	r2, r3
 8009690:	f7ff f9a2 	bl	80089d8 <__pow5mult>
 8009694:	4680      	mov	r8, r0
 8009696:	2800      	cmp	r0, #0
 8009698:	d0ba      	beq.n	8009610 <_strtod_l+0x690>
 800969a:	4601      	mov	r1, r0
 800969c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800969e:	9805      	ldr	r0, [sp, #20]
 80096a0:	f7ff f8f8 	bl	8008894 <__multiply>
 80096a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80096a6:	2800      	cmp	r0, #0
 80096a8:	f43f ae8d 	beq.w	80093c6 <_strtod_l+0x446>
 80096ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096ae:	9805      	ldr	r0, [sp, #20]
 80096b0:	f7fe ffdc 	bl	800866c <_Bfree>
 80096b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80096b8:	2d00      	cmp	r5, #0
 80096ba:	dc1d      	bgt.n	80096f8 <_strtod_l+0x778>
 80096bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096be:	2b00      	cmp	r3, #0
 80096c0:	dd23      	ble.n	800970a <_strtod_l+0x78a>
 80096c2:	4649      	mov	r1, r9
 80096c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80096c6:	9805      	ldr	r0, [sp, #20]
 80096c8:	f7ff f986 	bl	80089d8 <__pow5mult>
 80096cc:	4681      	mov	r9, r0
 80096ce:	b9e0      	cbnz	r0, 800970a <_strtod_l+0x78a>
 80096d0:	f04f 0900 	mov.w	r9, #0
 80096d4:	e677      	b.n	80093c6 <_strtod_l+0x446>
 80096d6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80096da:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80096de:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80096e2:	35e2      	adds	r5, #226	@ 0xe2
 80096e4:	fa01 f305 	lsl.w	r3, r1, r5
 80096e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80096ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 80096ec:	e7ba      	b.n	8009664 <_strtod_l+0x6e4>
 80096ee:	2300      	movs	r3, #0
 80096f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80096f2:	2301      	movs	r3, #1
 80096f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80096f6:	e7b5      	b.n	8009664 <_strtod_l+0x6e4>
 80096f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096fa:	9805      	ldr	r0, [sp, #20]
 80096fc:	462a      	mov	r2, r5
 80096fe:	f7ff f9c5 	bl	8008a8c <__lshift>
 8009702:	901a      	str	r0, [sp, #104]	@ 0x68
 8009704:	2800      	cmp	r0, #0
 8009706:	d1d9      	bne.n	80096bc <_strtod_l+0x73c>
 8009708:	e65d      	b.n	80093c6 <_strtod_l+0x446>
 800970a:	2e00      	cmp	r6, #0
 800970c:	dd07      	ble.n	800971e <_strtod_l+0x79e>
 800970e:	4649      	mov	r1, r9
 8009710:	9805      	ldr	r0, [sp, #20]
 8009712:	4632      	mov	r2, r6
 8009714:	f7ff f9ba 	bl	8008a8c <__lshift>
 8009718:	4681      	mov	r9, r0
 800971a:	2800      	cmp	r0, #0
 800971c:	d0d8      	beq.n	80096d0 <_strtod_l+0x750>
 800971e:	2f00      	cmp	r7, #0
 8009720:	dd08      	ble.n	8009734 <_strtod_l+0x7b4>
 8009722:	4641      	mov	r1, r8
 8009724:	9805      	ldr	r0, [sp, #20]
 8009726:	463a      	mov	r2, r7
 8009728:	f7ff f9b0 	bl	8008a8c <__lshift>
 800972c:	4680      	mov	r8, r0
 800972e:	2800      	cmp	r0, #0
 8009730:	f43f ae49 	beq.w	80093c6 <_strtod_l+0x446>
 8009734:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009736:	9805      	ldr	r0, [sp, #20]
 8009738:	464a      	mov	r2, r9
 800973a:	f7ff fa2f 	bl	8008b9c <__mdiff>
 800973e:	4604      	mov	r4, r0
 8009740:	2800      	cmp	r0, #0
 8009742:	f43f ae40 	beq.w	80093c6 <_strtod_l+0x446>
 8009746:	68c3      	ldr	r3, [r0, #12]
 8009748:	930f      	str	r3, [sp, #60]	@ 0x3c
 800974a:	2300      	movs	r3, #0
 800974c:	60c3      	str	r3, [r0, #12]
 800974e:	4641      	mov	r1, r8
 8009750:	f7ff fa08 	bl	8008b64 <__mcmp>
 8009754:	2800      	cmp	r0, #0
 8009756:	da45      	bge.n	80097e4 <_strtod_l+0x864>
 8009758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800975a:	ea53 030a 	orrs.w	r3, r3, sl
 800975e:	d16b      	bne.n	8009838 <_strtod_l+0x8b8>
 8009760:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009764:	2b00      	cmp	r3, #0
 8009766:	d167      	bne.n	8009838 <_strtod_l+0x8b8>
 8009768:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800976c:	0d1b      	lsrs	r3, r3, #20
 800976e:	051b      	lsls	r3, r3, #20
 8009770:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009774:	d960      	bls.n	8009838 <_strtod_l+0x8b8>
 8009776:	6963      	ldr	r3, [r4, #20]
 8009778:	b913      	cbnz	r3, 8009780 <_strtod_l+0x800>
 800977a:	6923      	ldr	r3, [r4, #16]
 800977c:	2b01      	cmp	r3, #1
 800977e:	dd5b      	ble.n	8009838 <_strtod_l+0x8b8>
 8009780:	4621      	mov	r1, r4
 8009782:	2201      	movs	r2, #1
 8009784:	9805      	ldr	r0, [sp, #20]
 8009786:	f7ff f981 	bl	8008a8c <__lshift>
 800978a:	4641      	mov	r1, r8
 800978c:	4604      	mov	r4, r0
 800978e:	f7ff f9e9 	bl	8008b64 <__mcmp>
 8009792:	2800      	cmp	r0, #0
 8009794:	dd50      	ble.n	8009838 <_strtod_l+0x8b8>
 8009796:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800979a:	9a08      	ldr	r2, [sp, #32]
 800979c:	0d1b      	lsrs	r3, r3, #20
 800979e:	051b      	lsls	r3, r3, #20
 80097a0:	2a00      	cmp	r2, #0
 80097a2:	d06a      	beq.n	800987a <_strtod_l+0x8fa>
 80097a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80097a8:	d867      	bhi.n	800987a <_strtod_l+0x8fa>
 80097aa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80097ae:	f67f ae9d 	bls.w	80094ec <_strtod_l+0x56c>
 80097b2:	4b0a      	ldr	r3, [pc, #40]	@ (80097dc <_strtod_l+0x85c>)
 80097b4:	4650      	mov	r0, sl
 80097b6:	4659      	mov	r1, fp
 80097b8:	2200      	movs	r2, #0
 80097ba:	f7f6 ff35 	bl	8000628 <__aeabi_dmul>
 80097be:	4b08      	ldr	r3, [pc, #32]	@ (80097e0 <_strtod_l+0x860>)
 80097c0:	400b      	ands	r3, r1
 80097c2:	4682      	mov	sl, r0
 80097c4:	468b      	mov	fp, r1
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f47f ae08 	bne.w	80093dc <_strtod_l+0x45c>
 80097cc:	9a05      	ldr	r2, [sp, #20]
 80097ce:	2322      	movs	r3, #34	@ 0x22
 80097d0:	6013      	str	r3, [r2, #0]
 80097d2:	e603      	b.n	80093dc <_strtod_l+0x45c>
 80097d4:	0800b200 	.word	0x0800b200
 80097d8:	fffffc02 	.word	0xfffffc02
 80097dc:	39500000 	.word	0x39500000
 80097e0:	7ff00000 	.word	0x7ff00000
 80097e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80097e8:	d165      	bne.n	80098b6 <_strtod_l+0x936>
 80097ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80097ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097f0:	b35a      	cbz	r2, 800984a <_strtod_l+0x8ca>
 80097f2:	4a9f      	ldr	r2, [pc, #636]	@ (8009a70 <_strtod_l+0xaf0>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d12b      	bne.n	8009850 <_strtod_l+0x8d0>
 80097f8:	9b08      	ldr	r3, [sp, #32]
 80097fa:	4651      	mov	r1, sl
 80097fc:	b303      	cbz	r3, 8009840 <_strtod_l+0x8c0>
 80097fe:	4b9d      	ldr	r3, [pc, #628]	@ (8009a74 <_strtod_l+0xaf4>)
 8009800:	465a      	mov	r2, fp
 8009802:	4013      	ands	r3, r2
 8009804:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009808:	f04f 32ff 	mov.w	r2, #4294967295
 800980c:	d81b      	bhi.n	8009846 <_strtod_l+0x8c6>
 800980e:	0d1b      	lsrs	r3, r3, #20
 8009810:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009814:	fa02 f303 	lsl.w	r3, r2, r3
 8009818:	4299      	cmp	r1, r3
 800981a:	d119      	bne.n	8009850 <_strtod_l+0x8d0>
 800981c:	4b96      	ldr	r3, [pc, #600]	@ (8009a78 <_strtod_l+0xaf8>)
 800981e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009820:	429a      	cmp	r2, r3
 8009822:	d102      	bne.n	800982a <_strtod_l+0x8aa>
 8009824:	3101      	adds	r1, #1
 8009826:	f43f adce 	beq.w	80093c6 <_strtod_l+0x446>
 800982a:	4b92      	ldr	r3, [pc, #584]	@ (8009a74 <_strtod_l+0xaf4>)
 800982c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800982e:	401a      	ands	r2, r3
 8009830:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009834:	f04f 0a00 	mov.w	sl, #0
 8009838:	9b08      	ldr	r3, [sp, #32]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1b9      	bne.n	80097b2 <_strtod_l+0x832>
 800983e:	e5cd      	b.n	80093dc <_strtod_l+0x45c>
 8009840:	f04f 33ff 	mov.w	r3, #4294967295
 8009844:	e7e8      	b.n	8009818 <_strtod_l+0x898>
 8009846:	4613      	mov	r3, r2
 8009848:	e7e6      	b.n	8009818 <_strtod_l+0x898>
 800984a:	ea53 030a 	orrs.w	r3, r3, sl
 800984e:	d0a2      	beq.n	8009796 <_strtod_l+0x816>
 8009850:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009852:	b1db      	cbz	r3, 800988c <_strtod_l+0x90c>
 8009854:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009856:	4213      	tst	r3, r2
 8009858:	d0ee      	beq.n	8009838 <_strtod_l+0x8b8>
 800985a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800985c:	9a08      	ldr	r2, [sp, #32]
 800985e:	4650      	mov	r0, sl
 8009860:	4659      	mov	r1, fp
 8009862:	b1bb      	cbz	r3, 8009894 <_strtod_l+0x914>
 8009864:	f7ff fb6c 	bl	8008f40 <sulp>
 8009868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800986c:	ec53 2b10 	vmov	r2, r3, d0
 8009870:	f7f6 fd24 	bl	80002bc <__adddf3>
 8009874:	4682      	mov	sl, r0
 8009876:	468b      	mov	fp, r1
 8009878:	e7de      	b.n	8009838 <_strtod_l+0x8b8>
 800987a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800987e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009882:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009886:	f04f 3aff 	mov.w	sl, #4294967295
 800988a:	e7d5      	b.n	8009838 <_strtod_l+0x8b8>
 800988c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800988e:	ea13 0f0a 	tst.w	r3, sl
 8009892:	e7e1      	b.n	8009858 <_strtod_l+0x8d8>
 8009894:	f7ff fb54 	bl	8008f40 <sulp>
 8009898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800989c:	ec53 2b10 	vmov	r2, r3, d0
 80098a0:	f7f6 fd0a 	bl	80002b8 <__aeabi_dsub>
 80098a4:	2200      	movs	r2, #0
 80098a6:	2300      	movs	r3, #0
 80098a8:	4682      	mov	sl, r0
 80098aa:	468b      	mov	fp, r1
 80098ac:	f7f7 f924 	bl	8000af8 <__aeabi_dcmpeq>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d0c1      	beq.n	8009838 <_strtod_l+0x8b8>
 80098b4:	e61a      	b.n	80094ec <_strtod_l+0x56c>
 80098b6:	4641      	mov	r1, r8
 80098b8:	4620      	mov	r0, r4
 80098ba:	f7ff facb 	bl	8008e54 <__ratio>
 80098be:	ec57 6b10 	vmov	r6, r7, d0
 80098c2:	2200      	movs	r2, #0
 80098c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80098c8:	4630      	mov	r0, r6
 80098ca:	4639      	mov	r1, r7
 80098cc:	f7f7 f928 	bl	8000b20 <__aeabi_dcmple>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d06f      	beq.n	80099b4 <_strtod_l+0xa34>
 80098d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d17a      	bne.n	80099d0 <_strtod_l+0xa50>
 80098da:	f1ba 0f00 	cmp.w	sl, #0
 80098de:	d158      	bne.n	8009992 <_strtod_l+0xa12>
 80098e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d15a      	bne.n	80099a0 <_strtod_l+0xa20>
 80098ea:	4b64      	ldr	r3, [pc, #400]	@ (8009a7c <_strtod_l+0xafc>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	4630      	mov	r0, r6
 80098f0:	4639      	mov	r1, r7
 80098f2:	f7f7 f90b 	bl	8000b0c <__aeabi_dcmplt>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d159      	bne.n	80099ae <_strtod_l+0xa2e>
 80098fa:	4630      	mov	r0, r6
 80098fc:	4639      	mov	r1, r7
 80098fe:	4b60      	ldr	r3, [pc, #384]	@ (8009a80 <_strtod_l+0xb00>)
 8009900:	2200      	movs	r2, #0
 8009902:	f7f6 fe91 	bl	8000628 <__aeabi_dmul>
 8009906:	4606      	mov	r6, r0
 8009908:	460f      	mov	r7, r1
 800990a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800990e:	9606      	str	r6, [sp, #24]
 8009910:	9307      	str	r3, [sp, #28]
 8009912:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009916:	4d57      	ldr	r5, [pc, #348]	@ (8009a74 <_strtod_l+0xaf4>)
 8009918:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800991c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800991e:	401d      	ands	r5, r3
 8009920:	4b58      	ldr	r3, [pc, #352]	@ (8009a84 <_strtod_l+0xb04>)
 8009922:	429d      	cmp	r5, r3
 8009924:	f040 80b2 	bne.w	8009a8c <_strtod_l+0xb0c>
 8009928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800992a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800992e:	ec4b ab10 	vmov	d0, sl, fp
 8009932:	f7ff f9c7 	bl	8008cc4 <__ulp>
 8009936:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800993a:	ec51 0b10 	vmov	r0, r1, d0
 800993e:	f7f6 fe73 	bl	8000628 <__aeabi_dmul>
 8009942:	4652      	mov	r2, sl
 8009944:	465b      	mov	r3, fp
 8009946:	f7f6 fcb9 	bl	80002bc <__adddf3>
 800994a:	460b      	mov	r3, r1
 800994c:	4949      	ldr	r1, [pc, #292]	@ (8009a74 <_strtod_l+0xaf4>)
 800994e:	4a4e      	ldr	r2, [pc, #312]	@ (8009a88 <_strtod_l+0xb08>)
 8009950:	4019      	ands	r1, r3
 8009952:	4291      	cmp	r1, r2
 8009954:	4682      	mov	sl, r0
 8009956:	d942      	bls.n	80099de <_strtod_l+0xa5e>
 8009958:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800995a:	4b47      	ldr	r3, [pc, #284]	@ (8009a78 <_strtod_l+0xaf8>)
 800995c:	429a      	cmp	r2, r3
 800995e:	d103      	bne.n	8009968 <_strtod_l+0x9e8>
 8009960:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009962:	3301      	adds	r3, #1
 8009964:	f43f ad2f 	beq.w	80093c6 <_strtod_l+0x446>
 8009968:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009a78 <_strtod_l+0xaf8>
 800996c:	f04f 3aff 	mov.w	sl, #4294967295
 8009970:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009972:	9805      	ldr	r0, [sp, #20]
 8009974:	f7fe fe7a 	bl	800866c <_Bfree>
 8009978:	9805      	ldr	r0, [sp, #20]
 800997a:	4649      	mov	r1, r9
 800997c:	f7fe fe76 	bl	800866c <_Bfree>
 8009980:	9805      	ldr	r0, [sp, #20]
 8009982:	4641      	mov	r1, r8
 8009984:	f7fe fe72 	bl	800866c <_Bfree>
 8009988:	9805      	ldr	r0, [sp, #20]
 800998a:	4621      	mov	r1, r4
 800998c:	f7fe fe6e 	bl	800866c <_Bfree>
 8009990:	e619      	b.n	80095c6 <_strtod_l+0x646>
 8009992:	f1ba 0f01 	cmp.w	sl, #1
 8009996:	d103      	bne.n	80099a0 <_strtod_l+0xa20>
 8009998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800999a:	2b00      	cmp	r3, #0
 800999c:	f43f ada6 	beq.w	80094ec <_strtod_l+0x56c>
 80099a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009a50 <_strtod_l+0xad0>
 80099a4:	4f35      	ldr	r7, [pc, #212]	@ (8009a7c <_strtod_l+0xafc>)
 80099a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80099aa:	2600      	movs	r6, #0
 80099ac:	e7b1      	b.n	8009912 <_strtod_l+0x992>
 80099ae:	4f34      	ldr	r7, [pc, #208]	@ (8009a80 <_strtod_l+0xb00>)
 80099b0:	2600      	movs	r6, #0
 80099b2:	e7aa      	b.n	800990a <_strtod_l+0x98a>
 80099b4:	4b32      	ldr	r3, [pc, #200]	@ (8009a80 <_strtod_l+0xb00>)
 80099b6:	4630      	mov	r0, r6
 80099b8:	4639      	mov	r1, r7
 80099ba:	2200      	movs	r2, #0
 80099bc:	f7f6 fe34 	bl	8000628 <__aeabi_dmul>
 80099c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099c2:	4606      	mov	r6, r0
 80099c4:	460f      	mov	r7, r1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d09f      	beq.n	800990a <_strtod_l+0x98a>
 80099ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80099ce:	e7a0      	b.n	8009912 <_strtod_l+0x992>
 80099d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009a58 <_strtod_l+0xad8>
 80099d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80099d8:	ec57 6b17 	vmov	r6, r7, d7
 80099dc:	e799      	b.n	8009912 <_strtod_l+0x992>
 80099de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80099e2:	9b08      	ldr	r3, [sp, #32]
 80099e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1c1      	bne.n	8009970 <_strtod_l+0x9f0>
 80099ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80099f0:	0d1b      	lsrs	r3, r3, #20
 80099f2:	051b      	lsls	r3, r3, #20
 80099f4:	429d      	cmp	r5, r3
 80099f6:	d1bb      	bne.n	8009970 <_strtod_l+0x9f0>
 80099f8:	4630      	mov	r0, r6
 80099fa:	4639      	mov	r1, r7
 80099fc:	f7f7 f974 	bl	8000ce8 <__aeabi_d2lz>
 8009a00:	f7f6 fde4 	bl	80005cc <__aeabi_l2d>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	4630      	mov	r0, r6
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	f7f6 fc54 	bl	80002b8 <__aeabi_dsub>
 8009a10:	460b      	mov	r3, r1
 8009a12:	4602      	mov	r2, r0
 8009a14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009a18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009a1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a1e:	ea46 060a 	orr.w	r6, r6, sl
 8009a22:	431e      	orrs	r6, r3
 8009a24:	d06f      	beq.n	8009b06 <_strtod_l+0xb86>
 8009a26:	a30e      	add	r3, pc, #56	@ (adr r3, 8009a60 <_strtod_l+0xae0>)
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	f7f7 f86e 	bl	8000b0c <__aeabi_dcmplt>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	f47f acd3 	bne.w	80093dc <_strtod_l+0x45c>
 8009a36:	a30c      	add	r3, pc, #48	@ (adr r3, 8009a68 <_strtod_l+0xae8>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a40:	f7f7 f882 	bl	8000b48 <__aeabi_dcmpgt>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d093      	beq.n	8009970 <_strtod_l+0x9f0>
 8009a48:	e4c8      	b.n	80093dc <_strtod_l+0x45c>
 8009a4a:	bf00      	nop
 8009a4c:	f3af 8000 	nop.w
 8009a50:	00000000 	.word	0x00000000
 8009a54:	bff00000 	.word	0xbff00000
 8009a58:	00000000 	.word	0x00000000
 8009a5c:	3ff00000 	.word	0x3ff00000
 8009a60:	94a03595 	.word	0x94a03595
 8009a64:	3fdfffff 	.word	0x3fdfffff
 8009a68:	35afe535 	.word	0x35afe535
 8009a6c:	3fe00000 	.word	0x3fe00000
 8009a70:	000fffff 	.word	0x000fffff
 8009a74:	7ff00000 	.word	0x7ff00000
 8009a78:	7fefffff 	.word	0x7fefffff
 8009a7c:	3ff00000 	.word	0x3ff00000
 8009a80:	3fe00000 	.word	0x3fe00000
 8009a84:	7fe00000 	.word	0x7fe00000
 8009a88:	7c9fffff 	.word	0x7c9fffff
 8009a8c:	9b08      	ldr	r3, [sp, #32]
 8009a8e:	b323      	cbz	r3, 8009ada <_strtod_l+0xb5a>
 8009a90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009a94:	d821      	bhi.n	8009ada <_strtod_l+0xb5a>
 8009a96:	a328      	add	r3, pc, #160	@ (adr r3, 8009b38 <_strtod_l+0xbb8>)
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	4639      	mov	r1, r7
 8009aa0:	f7f7 f83e 	bl	8000b20 <__aeabi_dcmple>
 8009aa4:	b1a0      	cbz	r0, 8009ad0 <_strtod_l+0xb50>
 8009aa6:	4639      	mov	r1, r7
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f7f7 f895 	bl	8000bd8 <__aeabi_d2uiz>
 8009aae:	2801      	cmp	r0, #1
 8009ab0:	bf38      	it	cc
 8009ab2:	2001      	movcc	r0, #1
 8009ab4:	f7f6 fd3e 	bl	8000534 <__aeabi_ui2d>
 8009ab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	b9fb      	cbnz	r3, 8009b00 <_strtod_l+0xb80>
 8009ac0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ac4:	9014      	str	r0, [sp, #80]	@ 0x50
 8009ac6:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ac8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009acc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ad0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ad2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009ad6:	1b5b      	subs	r3, r3, r5
 8009ad8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009ada:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009ade:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009ae2:	f7ff f8ef 	bl	8008cc4 <__ulp>
 8009ae6:	4650      	mov	r0, sl
 8009ae8:	ec53 2b10 	vmov	r2, r3, d0
 8009aec:	4659      	mov	r1, fp
 8009aee:	f7f6 fd9b 	bl	8000628 <__aeabi_dmul>
 8009af2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009af6:	f7f6 fbe1 	bl	80002bc <__adddf3>
 8009afa:	4682      	mov	sl, r0
 8009afc:	468b      	mov	fp, r1
 8009afe:	e770      	b.n	80099e2 <_strtod_l+0xa62>
 8009b00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009b04:	e7e0      	b.n	8009ac8 <_strtod_l+0xb48>
 8009b06:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b40 <_strtod_l+0xbc0>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f7f6 fffe 	bl	8000b0c <__aeabi_dcmplt>
 8009b10:	e798      	b.n	8009a44 <_strtod_l+0xac4>
 8009b12:	2300      	movs	r3, #0
 8009b14:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009b18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b1a:	6013      	str	r3, [r2, #0]
 8009b1c:	f7ff ba6d 	b.w	8008ffa <_strtod_l+0x7a>
 8009b20:	2a65      	cmp	r2, #101	@ 0x65
 8009b22:	f43f ab68 	beq.w	80091f6 <_strtod_l+0x276>
 8009b26:	2a45      	cmp	r2, #69	@ 0x45
 8009b28:	f43f ab65 	beq.w	80091f6 <_strtod_l+0x276>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	f7ff bba0 	b.w	8009272 <_strtod_l+0x2f2>
 8009b32:	bf00      	nop
 8009b34:	f3af 8000 	nop.w
 8009b38:	ffc00000 	.word	0xffc00000
 8009b3c:	41dfffff 	.word	0x41dfffff
 8009b40:	94a03595 	.word	0x94a03595
 8009b44:	3fcfffff 	.word	0x3fcfffff

08009b48 <_strtod_r>:
 8009b48:	4b01      	ldr	r3, [pc, #4]	@ (8009b50 <_strtod_r+0x8>)
 8009b4a:	f7ff ba19 	b.w	8008f80 <_strtod_l>
 8009b4e:	bf00      	nop
 8009b50:	20040110 	.word	0x20040110

08009b54 <_strtol_l.isra.0>:
 8009b54:	2b24      	cmp	r3, #36	@ 0x24
 8009b56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b5a:	4686      	mov	lr, r0
 8009b5c:	4690      	mov	r8, r2
 8009b5e:	d801      	bhi.n	8009b64 <_strtol_l.isra.0+0x10>
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d106      	bne.n	8009b72 <_strtol_l.isra.0+0x1e>
 8009b64:	f7fd fe4c 	bl	8007800 <__errno>
 8009b68:	2316      	movs	r3, #22
 8009b6a:	6003      	str	r3, [r0, #0]
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b72:	4834      	ldr	r0, [pc, #208]	@ (8009c44 <_strtol_l.isra.0+0xf0>)
 8009b74:	460d      	mov	r5, r1
 8009b76:	462a      	mov	r2, r5
 8009b78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b7c:	5d06      	ldrb	r6, [r0, r4]
 8009b7e:	f016 0608 	ands.w	r6, r6, #8
 8009b82:	d1f8      	bne.n	8009b76 <_strtol_l.isra.0+0x22>
 8009b84:	2c2d      	cmp	r4, #45	@ 0x2d
 8009b86:	d110      	bne.n	8009baa <_strtol_l.isra.0+0x56>
 8009b88:	782c      	ldrb	r4, [r5, #0]
 8009b8a:	2601      	movs	r6, #1
 8009b8c:	1c95      	adds	r5, r2, #2
 8009b8e:	f033 0210 	bics.w	r2, r3, #16
 8009b92:	d115      	bne.n	8009bc0 <_strtol_l.isra.0+0x6c>
 8009b94:	2c30      	cmp	r4, #48	@ 0x30
 8009b96:	d10d      	bne.n	8009bb4 <_strtol_l.isra.0+0x60>
 8009b98:	782a      	ldrb	r2, [r5, #0]
 8009b9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009b9e:	2a58      	cmp	r2, #88	@ 0x58
 8009ba0:	d108      	bne.n	8009bb4 <_strtol_l.isra.0+0x60>
 8009ba2:	786c      	ldrb	r4, [r5, #1]
 8009ba4:	3502      	adds	r5, #2
 8009ba6:	2310      	movs	r3, #16
 8009ba8:	e00a      	b.n	8009bc0 <_strtol_l.isra.0+0x6c>
 8009baa:	2c2b      	cmp	r4, #43	@ 0x2b
 8009bac:	bf04      	itt	eq
 8009bae:	782c      	ldrbeq	r4, [r5, #0]
 8009bb0:	1c95      	addeq	r5, r2, #2
 8009bb2:	e7ec      	b.n	8009b8e <_strtol_l.isra.0+0x3a>
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1f6      	bne.n	8009ba6 <_strtol_l.isra.0+0x52>
 8009bb8:	2c30      	cmp	r4, #48	@ 0x30
 8009bba:	bf14      	ite	ne
 8009bbc:	230a      	movne	r3, #10
 8009bbe:	2308      	moveq	r3, #8
 8009bc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009bc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009bc8:	2200      	movs	r2, #0
 8009bca:	fbbc f9f3 	udiv	r9, ip, r3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009bd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009bd8:	2f09      	cmp	r7, #9
 8009bda:	d80f      	bhi.n	8009bfc <_strtol_l.isra.0+0xa8>
 8009bdc:	463c      	mov	r4, r7
 8009bde:	42a3      	cmp	r3, r4
 8009be0:	dd1b      	ble.n	8009c1a <_strtol_l.isra.0+0xc6>
 8009be2:	1c57      	adds	r7, r2, #1
 8009be4:	d007      	beq.n	8009bf6 <_strtol_l.isra.0+0xa2>
 8009be6:	4581      	cmp	r9, r0
 8009be8:	d314      	bcc.n	8009c14 <_strtol_l.isra.0+0xc0>
 8009bea:	d101      	bne.n	8009bf0 <_strtol_l.isra.0+0x9c>
 8009bec:	45a2      	cmp	sl, r4
 8009bee:	db11      	blt.n	8009c14 <_strtol_l.isra.0+0xc0>
 8009bf0:	fb00 4003 	mla	r0, r0, r3, r4
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bfa:	e7eb      	b.n	8009bd4 <_strtol_l.isra.0+0x80>
 8009bfc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009c00:	2f19      	cmp	r7, #25
 8009c02:	d801      	bhi.n	8009c08 <_strtol_l.isra.0+0xb4>
 8009c04:	3c37      	subs	r4, #55	@ 0x37
 8009c06:	e7ea      	b.n	8009bde <_strtol_l.isra.0+0x8a>
 8009c08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009c0c:	2f19      	cmp	r7, #25
 8009c0e:	d804      	bhi.n	8009c1a <_strtol_l.isra.0+0xc6>
 8009c10:	3c57      	subs	r4, #87	@ 0x57
 8009c12:	e7e4      	b.n	8009bde <_strtol_l.isra.0+0x8a>
 8009c14:	f04f 32ff 	mov.w	r2, #4294967295
 8009c18:	e7ed      	b.n	8009bf6 <_strtol_l.isra.0+0xa2>
 8009c1a:	1c53      	adds	r3, r2, #1
 8009c1c:	d108      	bne.n	8009c30 <_strtol_l.isra.0+0xdc>
 8009c1e:	2322      	movs	r3, #34	@ 0x22
 8009c20:	f8ce 3000 	str.w	r3, [lr]
 8009c24:	4660      	mov	r0, ip
 8009c26:	f1b8 0f00 	cmp.w	r8, #0
 8009c2a:	d0a0      	beq.n	8009b6e <_strtol_l.isra.0+0x1a>
 8009c2c:	1e69      	subs	r1, r5, #1
 8009c2e:	e006      	b.n	8009c3e <_strtol_l.isra.0+0xea>
 8009c30:	b106      	cbz	r6, 8009c34 <_strtol_l.isra.0+0xe0>
 8009c32:	4240      	negs	r0, r0
 8009c34:	f1b8 0f00 	cmp.w	r8, #0
 8009c38:	d099      	beq.n	8009b6e <_strtol_l.isra.0+0x1a>
 8009c3a:	2a00      	cmp	r2, #0
 8009c3c:	d1f6      	bne.n	8009c2c <_strtol_l.isra.0+0xd8>
 8009c3e:	f8c8 1000 	str.w	r1, [r8]
 8009c42:	e794      	b.n	8009b6e <_strtol_l.isra.0+0x1a>
 8009c44:	0800b229 	.word	0x0800b229

08009c48 <_strtol_r>:
 8009c48:	f7ff bf84 	b.w	8009b54 <_strtol_l.isra.0>

08009c4c <__ssputs_r>:
 8009c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c50:	688e      	ldr	r6, [r1, #8]
 8009c52:	461f      	mov	r7, r3
 8009c54:	42be      	cmp	r6, r7
 8009c56:	680b      	ldr	r3, [r1, #0]
 8009c58:	4682      	mov	sl, r0
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	4690      	mov	r8, r2
 8009c5e:	d82d      	bhi.n	8009cbc <__ssputs_r+0x70>
 8009c60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c68:	d026      	beq.n	8009cb8 <__ssputs_r+0x6c>
 8009c6a:	6965      	ldr	r5, [r4, #20]
 8009c6c:	6909      	ldr	r1, [r1, #16]
 8009c6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c72:	eba3 0901 	sub.w	r9, r3, r1
 8009c76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c7a:	1c7b      	adds	r3, r7, #1
 8009c7c:	444b      	add	r3, r9
 8009c7e:	106d      	asrs	r5, r5, #1
 8009c80:	429d      	cmp	r5, r3
 8009c82:	bf38      	it	cc
 8009c84:	461d      	movcc	r5, r3
 8009c86:	0553      	lsls	r3, r2, #21
 8009c88:	d527      	bpl.n	8009cda <__ssputs_r+0x8e>
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	f7fc fcc0 	bl	8006610 <_malloc_r>
 8009c90:	4606      	mov	r6, r0
 8009c92:	b360      	cbz	r0, 8009cee <__ssputs_r+0xa2>
 8009c94:	6921      	ldr	r1, [r4, #16]
 8009c96:	464a      	mov	r2, r9
 8009c98:	f000 fbf0 	bl	800a47c <memcpy>
 8009c9c:	89a3      	ldrh	r3, [r4, #12]
 8009c9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ca6:	81a3      	strh	r3, [r4, #12]
 8009ca8:	6126      	str	r6, [r4, #16]
 8009caa:	6165      	str	r5, [r4, #20]
 8009cac:	444e      	add	r6, r9
 8009cae:	eba5 0509 	sub.w	r5, r5, r9
 8009cb2:	6026      	str	r6, [r4, #0]
 8009cb4:	60a5      	str	r5, [r4, #8]
 8009cb6:	463e      	mov	r6, r7
 8009cb8:	42be      	cmp	r6, r7
 8009cba:	d900      	bls.n	8009cbe <__ssputs_r+0x72>
 8009cbc:	463e      	mov	r6, r7
 8009cbe:	6820      	ldr	r0, [r4, #0]
 8009cc0:	4632      	mov	r2, r6
 8009cc2:	4641      	mov	r1, r8
 8009cc4:	f000 fbae 	bl	800a424 <memmove>
 8009cc8:	68a3      	ldr	r3, [r4, #8]
 8009cca:	1b9b      	subs	r3, r3, r6
 8009ccc:	60a3      	str	r3, [r4, #8]
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	4433      	add	r3, r6
 8009cd2:	6023      	str	r3, [r4, #0]
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cda:	462a      	mov	r2, r5
 8009cdc:	f000 ff49 	bl	800ab72 <_realloc_r>
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d1e0      	bne.n	8009ca8 <__ssputs_r+0x5c>
 8009ce6:	6921      	ldr	r1, [r4, #16]
 8009ce8:	4650      	mov	r0, sl
 8009cea:	f7fe fc35 	bl	8008558 <_free_r>
 8009cee:	230c      	movs	r3, #12
 8009cf0:	f8ca 3000 	str.w	r3, [sl]
 8009cf4:	89a3      	ldrh	r3, [r4, #12]
 8009cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cfa:	81a3      	strh	r3, [r4, #12]
 8009cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009d00:	e7e9      	b.n	8009cd6 <__ssputs_r+0x8a>
	...

08009d04 <_svfiprintf_r>:
 8009d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	4698      	mov	r8, r3
 8009d0a:	898b      	ldrh	r3, [r1, #12]
 8009d0c:	061b      	lsls	r3, r3, #24
 8009d0e:	b09d      	sub	sp, #116	@ 0x74
 8009d10:	4607      	mov	r7, r0
 8009d12:	460d      	mov	r5, r1
 8009d14:	4614      	mov	r4, r2
 8009d16:	d510      	bpl.n	8009d3a <_svfiprintf_r+0x36>
 8009d18:	690b      	ldr	r3, [r1, #16]
 8009d1a:	b973      	cbnz	r3, 8009d3a <_svfiprintf_r+0x36>
 8009d1c:	2140      	movs	r1, #64	@ 0x40
 8009d1e:	f7fc fc77 	bl	8006610 <_malloc_r>
 8009d22:	6028      	str	r0, [r5, #0]
 8009d24:	6128      	str	r0, [r5, #16]
 8009d26:	b930      	cbnz	r0, 8009d36 <_svfiprintf_r+0x32>
 8009d28:	230c      	movs	r3, #12
 8009d2a:	603b      	str	r3, [r7, #0]
 8009d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d30:	b01d      	add	sp, #116	@ 0x74
 8009d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d36:	2340      	movs	r3, #64	@ 0x40
 8009d38:	616b      	str	r3, [r5, #20]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d3e:	2320      	movs	r3, #32
 8009d40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d48:	2330      	movs	r3, #48	@ 0x30
 8009d4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009ee8 <_svfiprintf_r+0x1e4>
 8009d4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d52:	f04f 0901 	mov.w	r9, #1
 8009d56:	4623      	mov	r3, r4
 8009d58:	469a      	mov	sl, r3
 8009d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d5e:	b10a      	cbz	r2, 8009d64 <_svfiprintf_r+0x60>
 8009d60:	2a25      	cmp	r2, #37	@ 0x25
 8009d62:	d1f9      	bne.n	8009d58 <_svfiprintf_r+0x54>
 8009d64:	ebba 0b04 	subs.w	fp, sl, r4
 8009d68:	d00b      	beq.n	8009d82 <_svfiprintf_r+0x7e>
 8009d6a:	465b      	mov	r3, fp
 8009d6c:	4622      	mov	r2, r4
 8009d6e:	4629      	mov	r1, r5
 8009d70:	4638      	mov	r0, r7
 8009d72:	f7ff ff6b 	bl	8009c4c <__ssputs_r>
 8009d76:	3001      	adds	r0, #1
 8009d78:	f000 80a7 	beq.w	8009eca <_svfiprintf_r+0x1c6>
 8009d7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d7e:	445a      	add	r2, fp
 8009d80:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d82:	f89a 3000 	ldrb.w	r3, [sl]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 809f 	beq.w	8009eca <_svfiprintf_r+0x1c6>
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d96:	f10a 0a01 	add.w	sl, sl, #1
 8009d9a:	9304      	str	r3, [sp, #16]
 8009d9c:	9307      	str	r3, [sp, #28]
 8009d9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009da2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009da4:	4654      	mov	r4, sl
 8009da6:	2205      	movs	r2, #5
 8009da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dac:	484e      	ldr	r0, [pc, #312]	@ (8009ee8 <_svfiprintf_r+0x1e4>)
 8009dae:	f7f6 fa27 	bl	8000200 <memchr>
 8009db2:	9a04      	ldr	r2, [sp, #16]
 8009db4:	b9d8      	cbnz	r0, 8009dee <_svfiprintf_r+0xea>
 8009db6:	06d0      	lsls	r0, r2, #27
 8009db8:	bf44      	itt	mi
 8009dba:	2320      	movmi	r3, #32
 8009dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dc0:	0711      	lsls	r1, r2, #28
 8009dc2:	bf44      	itt	mi
 8009dc4:	232b      	movmi	r3, #43	@ 0x2b
 8009dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dca:	f89a 3000 	ldrb.w	r3, [sl]
 8009dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dd0:	d015      	beq.n	8009dfe <_svfiprintf_r+0xfa>
 8009dd2:	9a07      	ldr	r2, [sp, #28]
 8009dd4:	4654      	mov	r4, sl
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	f04f 0c0a 	mov.w	ip, #10
 8009ddc:	4621      	mov	r1, r4
 8009dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009de2:	3b30      	subs	r3, #48	@ 0x30
 8009de4:	2b09      	cmp	r3, #9
 8009de6:	d94b      	bls.n	8009e80 <_svfiprintf_r+0x17c>
 8009de8:	b1b0      	cbz	r0, 8009e18 <_svfiprintf_r+0x114>
 8009dea:	9207      	str	r2, [sp, #28]
 8009dec:	e014      	b.n	8009e18 <_svfiprintf_r+0x114>
 8009dee:	eba0 0308 	sub.w	r3, r0, r8
 8009df2:	fa09 f303 	lsl.w	r3, r9, r3
 8009df6:	4313      	orrs	r3, r2
 8009df8:	9304      	str	r3, [sp, #16]
 8009dfa:	46a2      	mov	sl, r4
 8009dfc:	e7d2      	b.n	8009da4 <_svfiprintf_r+0xa0>
 8009dfe:	9b03      	ldr	r3, [sp, #12]
 8009e00:	1d19      	adds	r1, r3, #4
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	9103      	str	r1, [sp, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	bfbb      	ittet	lt
 8009e0a:	425b      	neglt	r3, r3
 8009e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e10:	9307      	strge	r3, [sp, #28]
 8009e12:	9307      	strlt	r3, [sp, #28]
 8009e14:	bfb8      	it	lt
 8009e16:	9204      	strlt	r2, [sp, #16]
 8009e18:	7823      	ldrb	r3, [r4, #0]
 8009e1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e1c:	d10a      	bne.n	8009e34 <_svfiprintf_r+0x130>
 8009e1e:	7863      	ldrb	r3, [r4, #1]
 8009e20:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e22:	d132      	bne.n	8009e8a <_svfiprintf_r+0x186>
 8009e24:	9b03      	ldr	r3, [sp, #12]
 8009e26:	1d1a      	adds	r2, r3, #4
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	9203      	str	r2, [sp, #12]
 8009e2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e30:	3402      	adds	r4, #2
 8009e32:	9305      	str	r3, [sp, #20]
 8009e34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ef8 <_svfiprintf_r+0x1f4>
 8009e38:	7821      	ldrb	r1, [r4, #0]
 8009e3a:	2203      	movs	r2, #3
 8009e3c:	4650      	mov	r0, sl
 8009e3e:	f7f6 f9df 	bl	8000200 <memchr>
 8009e42:	b138      	cbz	r0, 8009e54 <_svfiprintf_r+0x150>
 8009e44:	9b04      	ldr	r3, [sp, #16]
 8009e46:	eba0 000a 	sub.w	r0, r0, sl
 8009e4a:	2240      	movs	r2, #64	@ 0x40
 8009e4c:	4082      	lsls	r2, r0
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	3401      	adds	r4, #1
 8009e52:	9304      	str	r3, [sp, #16]
 8009e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e58:	4824      	ldr	r0, [pc, #144]	@ (8009eec <_svfiprintf_r+0x1e8>)
 8009e5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e5e:	2206      	movs	r2, #6
 8009e60:	f7f6 f9ce 	bl	8000200 <memchr>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d036      	beq.n	8009ed6 <_svfiprintf_r+0x1d2>
 8009e68:	4b21      	ldr	r3, [pc, #132]	@ (8009ef0 <_svfiprintf_r+0x1ec>)
 8009e6a:	bb1b      	cbnz	r3, 8009eb4 <_svfiprintf_r+0x1b0>
 8009e6c:	9b03      	ldr	r3, [sp, #12]
 8009e6e:	3307      	adds	r3, #7
 8009e70:	f023 0307 	bic.w	r3, r3, #7
 8009e74:	3308      	adds	r3, #8
 8009e76:	9303      	str	r3, [sp, #12]
 8009e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e7a:	4433      	add	r3, r6
 8009e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e7e:	e76a      	b.n	8009d56 <_svfiprintf_r+0x52>
 8009e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e84:	460c      	mov	r4, r1
 8009e86:	2001      	movs	r0, #1
 8009e88:	e7a8      	b.n	8009ddc <_svfiprintf_r+0xd8>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	3401      	adds	r4, #1
 8009e8e:	9305      	str	r3, [sp, #20]
 8009e90:	4619      	mov	r1, r3
 8009e92:	f04f 0c0a 	mov.w	ip, #10
 8009e96:	4620      	mov	r0, r4
 8009e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e9c:	3a30      	subs	r2, #48	@ 0x30
 8009e9e:	2a09      	cmp	r2, #9
 8009ea0:	d903      	bls.n	8009eaa <_svfiprintf_r+0x1a6>
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0c6      	beq.n	8009e34 <_svfiprintf_r+0x130>
 8009ea6:	9105      	str	r1, [sp, #20]
 8009ea8:	e7c4      	b.n	8009e34 <_svfiprintf_r+0x130>
 8009eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009eae:	4604      	mov	r4, r0
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e7f0      	b.n	8009e96 <_svfiprintf_r+0x192>
 8009eb4:	ab03      	add	r3, sp, #12
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	462a      	mov	r2, r5
 8009eba:	4b0e      	ldr	r3, [pc, #56]	@ (8009ef4 <_svfiprintf_r+0x1f0>)
 8009ebc:	a904      	add	r1, sp, #16
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	f7fc fd3e 	bl	8006940 <_printf_float>
 8009ec4:	1c42      	adds	r2, r0, #1
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	d1d6      	bne.n	8009e78 <_svfiprintf_r+0x174>
 8009eca:	89ab      	ldrh	r3, [r5, #12]
 8009ecc:	065b      	lsls	r3, r3, #25
 8009ece:	f53f af2d 	bmi.w	8009d2c <_svfiprintf_r+0x28>
 8009ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ed4:	e72c      	b.n	8009d30 <_svfiprintf_r+0x2c>
 8009ed6:	ab03      	add	r3, sp, #12
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	462a      	mov	r2, r5
 8009edc:	4b05      	ldr	r3, [pc, #20]	@ (8009ef4 <_svfiprintf_r+0x1f0>)
 8009ede:	a904      	add	r1, sp, #16
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	f7fc ffc5 	bl	8006e70 <_printf_i>
 8009ee6:	e7ed      	b.n	8009ec4 <_svfiprintf_r+0x1c0>
 8009ee8:	0800b05d 	.word	0x0800b05d
 8009eec:	0800b067 	.word	0x0800b067
 8009ef0:	08006941 	.word	0x08006941
 8009ef4:	08009c4d 	.word	0x08009c4d
 8009ef8:	0800b063 	.word	0x0800b063

08009efc <__sfputc_r>:
 8009efc:	6893      	ldr	r3, [r2, #8]
 8009efe:	3b01      	subs	r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	b410      	push	{r4}
 8009f04:	6093      	str	r3, [r2, #8]
 8009f06:	da08      	bge.n	8009f1a <__sfputc_r+0x1e>
 8009f08:	6994      	ldr	r4, [r2, #24]
 8009f0a:	42a3      	cmp	r3, r4
 8009f0c:	db01      	blt.n	8009f12 <__sfputc_r+0x16>
 8009f0e:	290a      	cmp	r1, #10
 8009f10:	d103      	bne.n	8009f1a <__sfputc_r+0x1e>
 8009f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f16:	f000 b9f1 	b.w	800a2fc <__swbuf_r>
 8009f1a:	6813      	ldr	r3, [r2, #0]
 8009f1c:	1c58      	adds	r0, r3, #1
 8009f1e:	6010      	str	r0, [r2, #0]
 8009f20:	7019      	strb	r1, [r3, #0]
 8009f22:	4608      	mov	r0, r1
 8009f24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <__sfputs_r>:
 8009f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2c:	4606      	mov	r6, r0
 8009f2e:	460f      	mov	r7, r1
 8009f30:	4614      	mov	r4, r2
 8009f32:	18d5      	adds	r5, r2, r3
 8009f34:	42ac      	cmp	r4, r5
 8009f36:	d101      	bne.n	8009f3c <__sfputs_r+0x12>
 8009f38:	2000      	movs	r0, #0
 8009f3a:	e007      	b.n	8009f4c <__sfputs_r+0x22>
 8009f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f40:	463a      	mov	r2, r7
 8009f42:	4630      	mov	r0, r6
 8009f44:	f7ff ffda 	bl	8009efc <__sfputc_r>
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	d1f3      	bne.n	8009f34 <__sfputs_r+0xa>
 8009f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f50 <_vfiprintf_r>:
 8009f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f54:	460d      	mov	r5, r1
 8009f56:	b09d      	sub	sp, #116	@ 0x74
 8009f58:	4614      	mov	r4, r2
 8009f5a:	4698      	mov	r8, r3
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	b118      	cbz	r0, 8009f68 <_vfiprintf_r+0x18>
 8009f60:	6a03      	ldr	r3, [r0, #32]
 8009f62:	b90b      	cbnz	r3, 8009f68 <_vfiprintf_r+0x18>
 8009f64:	f7fd fb3c 	bl	80075e0 <__sinit>
 8009f68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f6a:	07d9      	lsls	r1, r3, #31
 8009f6c:	d405      	bmi.n	8009f7a <_vfiprintf_r+0x2a>
 8009f6e:	89ab      	ldrh	r3, [r5, #12]
 8009f70:	059a      	lsls	r2, r3, #22
 8009f72:	d402      	bmi.n	8009f7a <_vfiprintf_r+0x2a>
 8009f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f76:	f7fd fc6e 	bl	8007856 <__retarget_lock_acquire_recursive>
 8009f7a:	89ab      	ldrh	r3, [r5, #12]
 8009f7c:	071b      	lsls	r3, r3, #28
 8009f7e:	d501      	bpl.n	8009f84 <_vfiprintf_r+0x34>
 8009f80:	692b      	ldr	r3, [r5, #16]
 8009f82:	b99b      	cbnz	r3, 8009fac <_vfiprintf_r+0x5c>
 8009f84:	4629      	mov	r1, r5
 8009f86:	4630      	mov	r0, r6
 8009f88:	f000 f9f6 	bl	800a378 <__swsetup_r>
 8009f8c:	b170      	cbz	r0, 8009fac <_vfiprintf_r+0x5c>
 8009f8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f90:	07dc      	lsls	r4, r3, #31
 8009f92:	d504      	bpl.n	8009f9e <_vfiprintf_r+0x4e>
 8009f94:	f04f 30ff 	mov.w	r0, #4294967295
 8009f98:	b01d      	add	sp, #116	@ 0x74
 8009f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9e:	89ab      	ldrh	r3, [r5, #12]
 8009fa0:	0598      	lsls	r0, r3, #22
 8009fa2:	d4f7      	bmi.n	8009f94 <_vfiprintf_r+0x44>
 8009fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fa6:	f7fd fc57 	bl	8007858 <__retarget_lock_release_recursive>
 8009faa:	e7f3      	b.n	8009f94 <_vfiprintf_r+0x44>
 8009fac:	2300      	movs	r3, #0
 8009fae:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fb0:	2320      	movs	r3, #32
 8009fb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fba:	2330      	movs	r3, #48	@ 0x30
 8009fbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a16c <_vfiprintf_r+0x21c>
 8009fc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fc4:	f04f 0901 	mov.w	r9, #1
 8009fc8:	4623      	mov	r3, r4
 8009fca:	469a      	mov	sl, r3
 8009fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fd0:	b10a      	cbz	r2, 8009fd6 <_vfiprintf_r+0x86>
 8009fd2:	2a25      	cmp	r2, #37	@ 0x25
 8009fd4:	d1f9      	bne.n	8009fca <_vfiprintf_r+0x7a>
 8009fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8009fda:	d00b      	beq.n	8009ff4 <_vfiprintf_r+0xa4>
 8009fdc:	465b      	mov	r3, fp
 8009fde:	4622      	mov	r2, r4
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7ff ffa1 	bl	8009f2a <__sfputs_r>
 8009fe8:	3001      	adds	r0, #1
 8009fea:	f000 80a7 	beq.w	800a13c <_vfiprintf_r+0x1ec>
 8009fee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ff0:	445a      	add	r2, fp
 8009ff2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 809f 	beq.w	800a13c <_vfiprintf_r+0x1ec>
 8009ffe:	2300      	movs	r3, #0
 800a000:	f04f 32ff 	mov.w	r2, #4294967295
 800a004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a008:	f10a 0a01 	add.w	sl, sl, #1
 800a00c:	9304      	str	r3, [sp, #16]
 800a00e:	9307      	str	r3, [sp, #28]
 800a010:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a014:	931a      	str	r3, [sp, #104]	@ 0x68
 800a016:	4654      	mov	r4, sl
 800a018:	2205      	movs	r2, #5
 800a01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01e:	4853      	ldr	r0, [pc, #332]	@ (800a16c <_vfiprintf_r+0x21c>)
 800a020:	f7f6 f8ee 	bl	8000200 <memchr>
 800a024:	9a04      	ldr	r2, [sp, #16]
 800a026:	b9d8      	cbnz	r0, 800a060 <_vfiprintf_r+0x110>
 800a028:	06d1      	lsls	r1, r2, #27
 800a02a:	bf44      	itt	mi
 800a02c:	2320      	movmi	r3, #32
 800a02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a032:	0713      	lsls	r3, r2, #28
 800a034:	bf44      	itt	mi
 800a036:	232b      	movmi	r3, #43	@ 0x2b
 800a038:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a03c:	f89a 3000 	ldrb.w	r3, [sl]
 800a040:	2b2a      	cmp	r3, #42	@ 0x2a
 800a042:	d015      	beq.n	800a070 <_vfiprintf_r+0x120>
 800a044:	9a07      	ldr	r2, [sp, #28]
 800a046:	4654      	mov	r4, sl
 800a048:	2000      	movs	r0, #0
 800a04a:	f04f 0c0a 	mov.w	ip, #10
 800a04e:	4621      	mov	r1, r4
 800a050:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a054:	3b30      	subs	r3, #48	@ 0x30
 800a056:	2b09      	cmp	r3, #9
 800a058:	d94b      	bls.n	800a0f2 <_vfiprintf_r+0x1a2>
 800a05a:	b1b0      	cbz	r0, 800a08a <_vfiprintf_r+0x13a>
 800a05c:	9207      	str	r2, [sp, #28]
 800a05e:	e014      	b.n	800a08a <_vfiprintf_r+0x13a>
 800a060:	eba0 0308 	sub.w	r3, r0, r8
 800a064:	fa09 f303 	lsl.w	r3, r9, r3
 800a068:	4313      	orrs	r3, r2
 800a06a:	9304      	str	r3, [sp, #16]
 800a06c:	46a2      	mov	sl, r4
 800a06e:	e7d2      	b.n	800a016 <_vfiprintf_r+0xc6>
 800a070:	9b03      	ldr	r3, [sp, #12]
 800a072:	1d19      	adds	r1, r3, #4
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	9103      	str	r1, [sp, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	bfbb      	ittet	lt
 800a07c:	425b      	neglt	r3, r3
 800a07e:	f042 0202 	orrlt.w	r2, r2, #2
 800a082:	9307      	strge	r3, [sp, #28]
 800a084:	9307      	strlt	r3, [sp, #28]
 800a086:	bfb8      	it	lt
 800a088:	9204      	strlt	r2, [sp, #16]
 800a08a:	7823      	ldrb	r3, [r4, #0]
 800a08c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a08e:	d10a      	bne.n	800a0a6 <_vfiprintf_r+0x156>
 800a090:	7863      	ldrb	r3, [r4, #1]
 800a092:	2b2a      	cmp	r3, #42	@ 0x2a
 800a094:	d132      	bne.n	800a0fc <_vfiprintf_r+0x1ac>
 800a096:	9b03      	ldr	r3, [sp, #12]
 800a098:	1d1a      	adds	r2, r3, #4
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	9203      	str	r2, [sp, #12]
 800a09e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0a2:	3402      	adds	r4, #2
 800a0a4:	9305      	str	r3, [sp, #20]
 800a0a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a17c <_vfiprintf_r+0x22c>
 800a0aa:	7821      	ldrb	r1, [r4, #0]
 800a0ac:	2203      	movs	r2, #3
 800a0ae:	4650      	mov	r0, sl
 800a0b0:	f7f6 f8a6 	bl	8000200 <memchr>
 800a0b4:	b138      	cbz	r0, 800a0c6 <_vfiprintf_r+0x176>
 800a0b6:	9b04      	ldr	r3, [sp, #16]
 800a0b8:	eba0 000a 	sub.w	r0, r0, sl
 800a0bc:	2240      	movs	r2, #64	@ 0x40
 800a0be:	4082      	lsls	r2, r0
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	3401      	adds	r4, #1
 800a0c4:	9304      	str	r3, [sp, #16]
 800a0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ca:	4829      	ldr	r0, [pc, #164]	@ (800a170 <_vfiprintf_r+0x220>)
 800a0cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0d0:	2206      	movs	r2, #6
 800a0d2:	f7f6 f895 	bl	8000200 <memchr>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d03f      	beq.n	800a15a <_vfiprintf_r+0x20a>
 800a0da:	4b26      	ldr	r3, [pc, #152]	@ (800a174 <_vfiprintf_r+0x224>)
 800a0dc:	bb1b      	cbnz	r3, 800a126 <_vfiprintf_r+0x1d6>
 800a0de:	9b03      	ldr	r3, [sp, #12]
 800a0e0:	3307      	adds	r3, #7
 800a0e2:	f023 0307 	bic.w	r3, r3, #7
 800a0e6:	3308      	adds	r3, #8
 800a0e8:	9303      	str	r3, [sp, #12]
 800a0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ec:	443b      	add	r3, r7
 800a0ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0f0:	e76a      	b.n	8009fc8 <_vfiprintf_r+0x78>
 800a0f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	2001      	movs	r0, #1
 800a0fa:	e7a8      	b.n	800a04e <_vfiprintf_r+0xfe>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	3401      	adds	r4, #1
 800a100:	9305      	str	r3, [sp, #20]
 800a102:	4619      	mov	r1, r3
 800a104:	f04f 0c0a 	mov.w	ip, #10
 800a108:	4620      	mov	r0, r4
 800a10a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a10e:	3a30      	subs	r2, #48	@ 0x30
 800a110:	2a09      	cmp	r2, #9
 800a112:	d903      	bls.n	800a11c <_vfiprintf_r+0x1cc>
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0c6      	beq.n	800a0a6 <_vfiprintf_r+0x156>
 800a118:	9105      	str	r1, [sp, #20]
 800a11a:	e7c4      	b.n	800a0a6 <_vfiprintf_r+0x156>
 800a11c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a120:	4604      	mov	r4, r0
 800a122:	2301      	movs	r3, #1
 800a124:	e7f0      	b.n	800a108 <_vfiprintf_r+0x1b8>
 800a126:	ab03      	add	r3, sp, #12
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	462a      	mov	r2, r5
 800a12c:	4b12      	ldr	r3, [pc, #72]	@ (800a178 <_vfiprintf_r+0x228>)
 800a12e:	a904      	add	r1, sp, #16
 800a130:	4630      	mov	r0, r6
 800a132:	f7fc fc05 	bl	8006940 <_printf_float>
 800a136:	4607      	mov	r7, r0
 800a138:	1c78      	adds	r0, r7, #1
 800a13a:	d1d6      	bne.n	800a0ea <_vfiprintf_r+0x19a>
 800a13c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a13e:	07d9      	lsls	r1, r3, #31
 800a140:	d405      	bmi.n	800a14e <_vfiprintf_r+0x1fe>
 800a142:	89ab      	ldrh	r3, [r5, #12]
 800a144:	059a      	lsls	r2, r3, #22
 800a146:	d402      	bmi.n	800a14e <_vfiprintf_r+0x1fe>
 800a148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a14a:	f7fd fb85 	bl	8007858 <__retarget_lock_release_recursive>
 800a14e:	89ab      	ldrh	r3, [r5, #12]
 800a150:	065b      	lsls	r3, r3, #25
 800a152:	f53f af1f 	bmi.w	8009f94 <_vfiprintf_r+0x44>
 800a156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a158:	e71e      	b.n	8009f98 <_vfiprintf_r+0x48>
 800a15a:	ab03      	add	r3, sp, #12
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	462a      	mov	r2, r5
 800a160:	4b05      	ldr	r3, [pc, #20]	@ (800a178 <_vfiprintf_r+0x228>)
 800a162:	a904      	add	r1, sp, #16
 800a164:	4630      	mov	r0, r6
 800a166:	f7fc fe83 	bl	8006e70 <_printf_i>
 800a16a:	e7e4      	b.n	800a136 <_vfiprintf_r+0x1e6>
 800a16c:	0800b05d 	.word	0x0800b05d
 800a170:	0800b067 	.word	0x0800b067
 800a174:	08006941 	.word	0x08006941
 800a178:	08009f2b 	.word	0x08009f2b
 800a17c:	0800b063 	.word	0x0800b063

0800a180 <__sflush_r>:
 800a180:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a188:	0716      	lsls	r6, r2, #28
 800a18a:	4605      	mov	r5, r0
 800a18c:	460c      	mov	r4, r1
 800a18e:	d454      	bmi.n	800a23a <__sflush_r+0xba>
 800a190:	684b      	ldr	r3, [r1, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	dc02      	bgt.n	800a19c <__sflush_r+0x1c>
 800a196:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a198:	2b00      	cmp	r3, #0
 800a19a:	dd48      	ble.n	800a22e <__sflush_r+0xae>
 800a19c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a19e:	2e00      	cmp	r6, #0
 800a1a0:	d045      	beq.n	800a22e <__sflush_r+0xae>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a1a8:	682f      	ldr	r7, [r5, #0]
 800a1aa:	6a21      	ldr	r1, [r4, #32]
 800a1ac:	602b      	str	r3, [r5, #0]
 800a1ae:	d030      	beq.n	800a212 <__sflush_r+0x92>
 800a1b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a1b2:	89a3      	ldrh	r3, [r4, #12]
 800a1b4:	0759      	lsls	r1, r3, #29
 800a1b6:	d505      	bpl.n	800a1c4 <__sflush_r+0x44>
 800a1b8:	6863      	ldr	r3, [r4, #4]
 800a1ba:	1ad2      	subs	r2, r2, r3
 800a1bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a1be:	b10b      	cbz	r3, 800a1c4 <__sflush_r+0x44>
 800a1c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a1c2:	1ad2      	subs	r2, r2, r3
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1c8:	6a21      	ldr	r1, [r4, #32]
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b0      	blx	r6
 800a1ce:	1c43      	adds	r3, r0, #1
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	d106      	bne.n	800a1e2 <__sflush_r+0x62>
 800a1d4:	6829      	ldr	r1, [r5, #0]
 800a1d6:	291d      	cmp	r1, #29
 800a1d8:	d82b      	bhi.n	800a232 <__sflush_r+0xb2>
 800a1da:	4a2a      	ldr	r2, [pc, #168]	@ (800a284 <__sflush_r+0x104>)
 800a1dc:	40ca      	lsrs	r2, r1
 800a1de:	07d6      	lsls	r6, r2, #31
 800a1e0:	d527      	bpl.n	800a232 <__sflush_r+0xb2>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	6062      	str	r2, [r4, #4]
 800a1e6:	04d9      	lsls	r1, r3, #19
 800a1e8:	6922      	ldr	r2, [r4, #16]
 800a1ea:	6022      	str	r2, [r4, #0]
 800a1ec:	d504      	bpl.n	800a1f8 <__sflush_r+0x78>
 800a1ee:	1c42      	adds	r2, r0, #1
 800a1f0:	d101      	bne.n	800a1f6 <__sflush_r+0x76>
 800a1f2:	682b      	ldr	r3, [r5, #0]
 800a1f4:	b903      	cbnz	r3, 800a1f8 <__sflush_r+0x78>
 800a1f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a1f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1fa:	602f      	str	r7, [r5, #0]
 800a1fc:	b1b9      	cbz	r1, 800a22e <__sflush_r+0xae>
 800a1fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a202:	4299      	cmp	r1, r3
 800a204:	d002      	beq.n	800a20c <__sflush_r+0x8c>
 800a206:	4628      	mov	r0, r5
 800a208:	f7fe f9a6 	bl	8008558 <_free_r>
 800a20c:	2300      	movs	r3, #0
 800a20e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a210:	e00d      	b.n	800a22e <__sflush_r+0xae>
 800a212:	2301      	movs	r3, #1
 800a214:	4628      	mov	r0, r5
 800a216:	47b0      	blx	r6
 800a218:	4602      	mov	r2, r0
 800a21a:	1c50      	adds	r0, r2, #1
 800a21c:	d1c9      	bne.n	800a1b2 <__sflush_r+0x32>
 800a21e:	682b      	ldr	r3, [r5, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d0c6      	beq.n	800a1b2 <__sflush_r+0x32>
 800a224:	2b1d      	cmp	r3, #29
 800a226:	d001      	beq.n	800a22c <__sflush_r+0xac>
 800a228:	2b16      	cmp	r3, #22
 800a22a:	d11e      	bne.n	800a26a <__sflush_r+0xea>
 800a22c:	602f      	str	r7, [r5, #0]
 800a22e:	2000      	movs	r0, #0
 800a230:	e022      	b.n	800a278 <__sflush_r+0xf8>
 800a232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a236:	b21b      	sxth	r3, r3
 800a238:	e01b      	b.n	800a272 <__sflush_r+0xf2>
 800a23a:	690f      	ldr	r7, [r1, #16]
 800a23c:	2f00      	cmp	r7, #0
 800a23e:	d0f6      	beq.n	800a22e <__sflush_r+0xae>
 800a240:	0793      	lsls	r3, r2, #30
 800a242:	680e      	ldr	r6, [r1, #0]
 800a244:	bf08      	it	eq
 800a246:	694b      	ldreq	r3, [r1, #20]
 800a248:	600f      	str	r7, [r1, #0]
 800a24a:	bf18      	it	ne
 800a24c:	2300      	movne	r3, #0
 800a24e:	eba6 0807 	sub.w	r8, r6, r7
 800a252:	608b      	str	r3, [r1, #8]
 800a254:	f1b8 0f00 	cmp.w	r8, #0
 800a258:	dde9      	ble.n	800a22e <__sflush_r+0xae>
 800a25a:	6a21      	ldr	r1, [r4, #32]
 800a25c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a25e:	4643      	mov	r3, r8
 800a260:	463a      	mov	r2, r7
 800a262:	4628      	mov	r0, r5
 800a264:	47b0      	blx	r6
 800a266:	2800      	cmp	r0, #0
 800a268:	dc08      	bgt.n	800a27c <__sflush_r+0xfc>
 800a26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a26e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a272:	81a3      	strh	r3, [r4, #12]
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a27c:	4407      	add	r7, r0
 800a27e:	eba8 0800 	sub.w	r8, r8, r0
 800a282:	e7e7      	b.n	800a254 <__sflush_r+0xd4>
 800a284:	20400001 	.word	0x20400001

0800a288 <_fflush_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	690b      	ldr	r3, [r1, #16]
 800a28c:	4605      	mov	r5, r0
 800a28e:	460c      	mov	r4, r1
 800a290:	b913      	cbnz	r3, 800a298 <_fflush_r+0x10>
 800a292:	2500      	movs	r5, #0
 800a294:	4628      	mov	r0, r5
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	b118      	cbz	r0, 800a2a2 <_fflush_r+0x1a>
 800a29a:	6a03      	ldr	r3, [r0, #32]
 800a29c:	b90b      	cbnz	r3, 800a2a2 <_fflush_r+0x1a>
 800a29e:	f7fd f99f 	bl	80075e0 <__sinit>
 800a2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d0f3      	beq.n	800a292 <_fflush_r+0xa>
 800a2aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a2ac:	07d0      	lsls	r0, r2, #31
 800a2ae:	d404      	bmi.n	800a2ba <_fflush_r+0x32>
 800a2b0:	0599      	lsls	r1, r3, #22
 800a2b2:	d402      	bmi.n	800a2ba <_fflush_r+0x32>
 800a2b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2b6:	f7fd face 	bl	8007856 <__retarget_lock_acquire_recursive>
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	4621      	mov	r1, r4
 800a2be:	f7ff ff5f 	bl	800a180 <__sflush_r>
 800a2c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2c4:	07da      	lsls	r2, r3, #31
 800a2c6:	4605      	mov	r5, r0
 800a2c8:	d4e4      	bmi.n	800a294 <_fflush_r+0xc>
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	059b      	lsls	r3, r3, #22
 800a2ce:	d4e1      	bmi.n	800a294 <_fflush_r+0xc>
 800a2d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2d2:	f7fd fac1 	bl	8007858 <__retarget_lock_release_recursive>
 800a2d6:	e7dd      	b.n	800a294 <_fflush_r+0xc>

0800a2d8 <fiprintf>:
 800a2d8:	b40e      	push	{r1, r2, r3}
 800a2da:	b503      	push	{r0, r1, lr}
 800a2dc:	4601      	mov	r1, r0
 800a2de:	ab03      	add	r3, sp, #12
 800a2e0:	4805      	ldr	r0, [pc, #20]	@ (800a2f8 <fiprintf+0x20>)
 800a2e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2e6:	6800      	ldr	r0, [r0, #0]
 800a2e8:	9301      	str	r3, [sp, #4]
 800a2ea:	f7ff fe31 	bl	8009f50 <_vfiprintf_r>
 800a2ee:	b002      	add	sp, #8
 800a2f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2f4:	b003      	add	sp, #12
 800a2f6:	4770      	bx	lr
 800a2f8:	200400c0 	.word	0x200400c0

0800a2fc <__swbuf_r>:
 800a2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fe:	460e      	mov	r6, r1
 800a300:	4614      	mov	r4, r2
 800a302:	4605      	mov	r5, r0
 800a304:	b118      	cbz	r0, 800a30e <__swbuf_r+0x12>
 800a306:	6a03      	ldr	r3, [r0, #32]
 800a308:	b90b      	cbnz	r3, 800a30e <__swbuf_r+0x12>
 800a30a:	f7fd f969 	bl	80075e0 <__sinit>
 800a30e:	69a3      	ldr	r3, [r4, #24]
 800a310:	60a3      	str	r3, [r4, #8]
 800a312:	89a3      	ldrh	r3, [r4, #12]
 800a314:	071a      	lsls	r2, r3, #28
 800a316:	d501      	bpl.n	800a31c <__swbuf_r+0x20>
 800a318:	6923      	ldr	r3, [r4, #16]
 800a31a:	b943      	cbnz	r3, 800a32e <__swbuf_r+0x32>
 800a31c:	4621      	mov	r1, r4
 800a31e:	4628      	mov	r0, r5
 800a320:	f000 f82a 	bl	800a378 <__swsetup_r>
 800a324:	b118      	cbz	r0, 800a32e <__swbuf_r+0x32>
 800a326:	f04f 37ff 	mov.w	r7, #4294967295
 800a32a:	4638      	mov	r0, r7
 800a32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	6922      	ldr	r2, [r4, #16]
 800a332:	1a98      	subs	r0, r3, r2
 800a334:	6963      	ldr	r3, [r4, #20]
 800a336:	b2f6      	uxtb	r6, r6
 800a338:	4283      	cmp	r3, r0
 800a33a:	4637      	mov	r7, r6
 800a33c:	dc05      	bgt.n	800a34a <__swbuf_r+0x4e>
 800a33e:	4621      	mov	r1, r4
 800a340:	4628      	mov	r0, r5
 800a342:	f7ff ffa1 	bl	800a288 <_fflush_r>
 800a346:	2800      	cmp	r0, #0
 800a348:	d1ed      	bne.n	800a326 <__swbuf_r+0x2a>
 800a34a:	68a3      	ldr	r3, [r4, #8]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	60a3      	str	r3, [r4, #8]
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	1c5a      	adds	r2, r3, #1
 800a354:	6022      	str	r2, [r4, #0]
 800a356:	701e      	strb	r6, [r3, #0]
 800a358:	6962      	ldr	r2, [r4, #20]
 800a35a:	1c43      	adds	r3, r0, #1
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d004      	beq.n	800a36a <__swbuf_r+0x6e>
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	07db      	lsls	r3, r3, #31
 800a364:	d5e1      	bpl.n	800a32a <__swbuf_r+0x2e>
 800a366:	2e0a      	cmp	r6, #10
 800a368:	d1df      	bne.n	800a32a <__swbuf_r+0x2e>
 800a36a:	4621      	mov	r1, r4
 800a36c:	4628      	mov	r0, r5
 800a36e:	f7ff ff8b 	bl	800a288 <_fflush_r>
 800a372:	2800      	cmp	r0, #0
 800a374:	d0d9      	beq.n	800a32a <__swbuf_r+0x2e>
 800a376:	e7d6      	b.n	800a326 <__swbuf_r+0x2a>

0800a378 <__swsetup_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4b29      	ldr	r3, [pc, #164]	@ (800a420 <__swsetup_r+0xa8>)
 800a37c:	4605      	mov	r5, r0
 800a37e:	6818      	ldr	r0, [r3, #0]
 800a380:	460c      	mov	r4, r1
 800a382:	b118      	cbz	r0, 800a38c <__swsetup_r+0x14>
 800a384:	6a03      	ldr	r3, [r0, #32]
 800a386:	b90b      	cbnz	r3, 800a38c <__swsetup_r+0x14>
 800a388:	f7fd f92a 	bl	80075e0 <__sinit>
 800a38c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a390:	0719      	lsls	r1, r3, #28
 800a392:	d422      	bmi.n	800a3da <__swsetup_r+0x62>
 800a394:	06da      	lsls	r2, r3, #27
 800a396:	d407      	bmi.n	800a3a8 <__swsetup_r+0x30>
 800a398:	2209      	movs	r2, #9
 800a39a:	602a      	str	r2, [r5, #0]
 800a39c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3a0:	81a3      	strh	r3, [r4, #12]
 800a3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a6:	e033      	b.n	800a410 <__swsetup_r+0x98>
 800a3a8:	0758      	lsls	r0, r3, #29
 800a3aa:	d512      	bpl.n	800a3d2 <__swsetup_r+0x5a>
 800a3ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3ae:	b141      	cbz	r1, 800a3c2 <__swsetup_r+0x4a>
 800a3b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3b4:	4299      	cmp	r1, r3
 800a3b6:	d002      	beq.n	800a3be <__swsetup_r+0x46>
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	f7fe f8cd 	bl	8008558 <_free_r>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3c2:	89a3      	ldrh	r3, [r4, #12]
 800a3c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a3c8:	81a3      	strh	r3, [r4, #12]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	6063      	str	r3, [r4, #4]
 800a3ce:	6923      	ldr	r3, [r4, #16]
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	f043 0308 	orr.w	r3, r3, #8
 800a3d8:	81a3      	strh	r3, [r4, #12]
 800a3da:	6923      	ldr	r3, [r4, #16]
 800a3dc:	b94b      	cbnz	r3, 800a3f2 <__swsetup_r+0x7a>
 800a3de:	89a3      	ldrh	r3, [r4, #12]
 800a3e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a3e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3e8:	d003      	beq.n	800a3f2 <__swsetup_r+0x7a>
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	f000 fc21 	bl	800ac34 <__smakebuf_r>
 800a3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3f6:	f013 0201 	ands.w	r2, r3, #1
 800a3fa:	d00a      	beq.n	800a412 <__swsetup_r+0x9a>
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	60a2      	str	r2, [r4, #8]
 800a400:	6962      	ldr	r2, [r4, #20]
 800a402:	4252      	negs	r2, r2
 800a404:	61a2      	str	r2, [r4, #24]
 800a406:	6922      	ldr	r2, [r4, #16]
 800a408:	b942      	cbnz	r2, 800a41c <__swsetup_r+0xa4>
 800a40a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a40e:	d1c5      	bne.n	800a39c <__swsetup_r+0x24>
 800a410:	bd38      	pop	{r3, r4, r5, pc}
 800a412:	0799      	lsls	r1, r3, #30
 800a414:	bf58      	it	pl
 800a416:	6962      	ldrpl	r2, [r4, #20]
 800a418:	60a2      	str	r2, [r4, #8]
 800a41a:	e7f4      	b.n	800a406 <__swsetup_r+0x8e>
 800a41c:	2000      	movs	r0, #0
 800a41e:	e7f7      	b.n	800a410 <__swsetup_r+0x98>
 800a420:	200400c0 	.word	0x200400c0

0800a424 <memmove>:
 800a424:	4288      	cmp	r0, r1
 800a426:	b510      	push	{r4, lr}
 800a428:	eb01 0402 	add.w	r4, r1, r2
 800a42c:	d902      	bls.n	800a434 <memmove+0x10>
 800a42e:	4284      	cmp	r4, r0
 800a430:	4623      	mov	r3, r4
 800a432:	d807      	bhi.n	800a444 <memmove+0x20>
 800a434:	1e43      	subs	r3, r0, #1
 800a436:	42a1      	cmp	r1, r4
 800a438:	d008      	beq.n	800a44c <memmove+0x28>
 800a43a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a43e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a442:	e7f8      	b.n	800a436 <memmove+0x12>
 800a444:	4402      	add	r2, r0
 800a446:	4601      	mov	r1, r0
 800a448:	428a      	cmp	r2, r1
 800a44a:	d100      	bne.n	800a44e <memmove+0x2a>
 800a44c:	bd10      	pop	{r4, pc}
 800a44e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a456:	e7f7      	b.n	800a448 <memmove+0x24>

0800a458 <strncmp>:
 800a458:	b510      	push	{r4, lr}
 800a45a:	b16a      	cbz	r2, 800a478 <strncmp+0x20>
 800a45c:	3901      	subs	r1, #1
 800a45e:	1884      	adds	r4, r0, r2
 800a460:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a464:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a468:	429a      	cmp	r2, r3
 800a46a:	d103      	bne.n	800a474 <strncmp+0x1c>
 800a46c:	42a0      	cmp	r0, r4
 800a46e:	d001      	beq.n	800a474 <strncmp+0x1c>
 800a470:	2a00      	cmp	r2, #0
 800a472:	d1f5      	bne.n	800a460 <strncmp+0x8>
 800a474:	1ad0      	subs	r0, r2, r3
 800a476:	bd10      	pop	{r4, pc}
 800a478:	4610      	mov	r0, r2
 800a47a:	e7fc      	b.n	800a476 <strncmp+0x1e>

0800a47c <memcpy>:
 800a47c:	440a      	add	r2, r1
 800a47e:	4291      	cmp	r1, r2
 800a480:	f100 33ff 	add.w	r3, r0, #4294967295
 800a484:	d100      	bne.n	800a488 <memcpy+0xc>
 800a486:	4770      	bx	lr
 800a488:	b510      	push	{r4, lr}
 800a48a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a48e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a492:	4291      	cmp	r1, r2
 800a494:	d1f9      	bne.n	800a48a <memcpy+0xe>
 800a496:	bd10      	pop	{r4, pc}

0800a498 <nan>:
 800a498:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a4a0 <nan+0x8>
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	00000000 	.word	0x00000000
 800a4a4:	7ff80000 	.word	0x7ff80000

0800a4a8 <abort>:
 800a4a8:	b508      	push	{r3, lr}
 800a4aa:	2006      	movs	r0, #6
 800a4ac:	f000 fc26 	bl	800acfc <raise>
 800a4b0:	2001      	movs	r0, #1
 800a4b2:	f7f8 fb46 	bl	8002b42 <_exit>

0800a4b6 <_calloc_r>:
 800a4b6:	b570      	push	{r4, r5, r6, lr}
 800a4b8:	fba1 5402 	umull	r5, r4, r1, r2
 800a4bc:	b934      	cbnz	r4, 800a4cc <_calloc_r+0x16>
 800a4be:	4629      	mov	r1, r5
 800a4c0:	f7fc f8a6 	bl	8006610 <_malloc_r>
 800a4c4:	4606      	mov	r6, r0
 800a4c6:	b928      	cbnz	r0, 800a4d4 <_calloc_r+0x1e>
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	bd70      	pop	{r4, r5, r6, pc}
 800a4cc:	220c      	movs	r2, #12
 800a4ce:	6002      	str	r2, [r0, #0]
 800a4d0:	2600      	movs	r6, #0
 800a4d2:	e7f9      	b.n	800a4c8 <_calloc_r+0x12>
 800a4d4:	462a      	mov	r2, r5
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	f7fd f92f 	bl	800773a <memset>
 800a4dc:	e7f4      	b.n	800a4c8 <_calloc_r+0x12>

0800a4de <rshift>:
 800a4de:	6903      	ldr	r3, [r0, #16]
 800a4e0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a4e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4e8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a4ec:	f100 0414 	add.w	r4, r0, #20
 800a4f0:	dd45      	ble.n	800a57e <rshift+0xa0>
 800a4f2:	f011 011f 	ands.w	r1, r1, #31
 800a4f6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a4fa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a4fe:	d10c      	bne.n	800a51a <rshift+0x3c>
 800a500:	f100 0710 	add.w	r7, r0, #16
 800a504:	4629      	mov	r1, r5
 800a506:	42b1      	cmp	r1, r6
 800a508:	d334      	bcc.n	800a574 <rshift+0x96>
 800a50a:	1a9b      	subs	r3, r3, r2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	1eea      	subs	r2, r5, #3
 800a510:	4296      	cmp	r6, r2
 800a512:	bf38      	it	cc
 800a514:	2300      	movcc	r3, #0
 800a516:	4423      	add	r3, r4
 800a518:	e015      	b.n	800a546 <rshift+0x68>
 800a51a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a51e:	f1c1 0820 	rsb	r8, r1, #32
 800a522:	40cf      	lsrs	r7, r1
 800a524:	f105 0e04 	add.w	lr, r5, #4
 800a528:	46a1      	mov	r9, r4
 800a52a:	4576      	cmp	r6, lr
 800a52c:	46f4      	mov	ip, lr
 800a52e:	d815      	bhi.n	800a55c <rshift+0x7e>
 800a530:	1a9a      	subs	r2, r3, r2
 800a532:	0092      	lsls	r2, r2, #2
 800a534:	3a04      	subs	r2, #4
 800a536:	3501      	adds	r5, #1
 800a538:	42ae      	cmp	r6, r5
 800a53a:	bf38      	it	cc
 800a53c:	2200      	movcc	r2, #0
 800a53e:	18a3      	adds	r3, r4, r2
 800a540:	50a7      	str	r7, [r4, r2]
 800a542:	b107      	cbz	r7, 800a546 <rshift+0x68>
 800a544:	3304      	adds	r3, #4
 800a546:	1b1a      	subs	r2, r3, r4
 800a548:	42a3      	cmp	r3, r4
 800a54a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a54e:	bf08      	it	eq
 800a550:	2300      	moveq	r3, #0
 800a552:	6102      	str	r2, [r0, #16]
 800a554:	bf08      	it	eq
 800a556:	6143      	streq	r3, [r0, #20]
 800a558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a55c:	f8dc c000 	ldr.w	ip, [ip]
 800a560:	fa0c fc08 	lsl.w	ip, ip, r8
 800a564:	ea4c 0707 	orr.w	r7, ip, r7
 800a568:	f849 7b04 	str.w	r7, [r9], #4
 800a56c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a570:	40cf      	lsrs	r7, r1
 800a572:	e7da      	b.n	800a52a <rshift+0x4c>
 800a574:	f851 cb04 	ldr.w	ip, [r1], #4
 800a578:	f847 cf04 	str.w	ip, [r7, #4]!
 800a57c:	e7c3      	b.n	800a506 <rshift+0x28>
 800a57e:	4623      	mov	r3, r4
 800a580:	e7e1      	b.n	800a546 <rshift+0x68>

0800a582 <__hexdig_fun>:
 800a582:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a586:	2b09      	cmp	r3, #9
 800a588:	d802      	bhi.n	800a590 <__hexdig_fun+0xe>
 800a58a:	3820      	subs	r0, #32
 800a58c:	b2c0      	uxtb	r0, r0
 800a58e:	4770      	bx	lr
 800a590:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a594:	2b05      	cmp	r3, #5
 800a596:	d801      	bhi.n	800a59c <__hexdig_fun+0x1a>
 800a598:	3847      	subs	r0, #71	@ 0x47
 800a59a:	e7f7      	b.n	800a58c <__hexdig_fun+0xa>
 800a59c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a5a0:	2b05      	cmp	r3, #5
 800a5a2:	d801      	bhi.n	800a5a8 <__hexdig_fun+0x26>
 800a5a4:	3827      	subs	r0, #39	@ 0x27
 800a5a6:	e7f1      	b.n	800a58c <__hexdig_fun+0xa>
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	4770      	bx	lr

0800a5ac <__gethex>:
 800a5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b0:	b085      	sub	sp, #20
 800a5b2:	468a      	mov	sl, r1
 800a5b4:	9302      	str	r3, [sp, #8]
 800a5b6:	680b      	ldr	r3, [r1, #0]
 800a5b8:	9001      	str	r0, [sp, #4]
 800a5ba:	4690      	mov	r8, r2
 800a5bc:	1c9c      	adds	r4, r3, #2
 800a5be:	46a1      	mov	r9, r4
 800a5c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a5c4:	2830      	cmp	r0, #48	@ 0x30
 800a5c6:	d0fa      	beq.n	800a5be <__gethex+0x12>
 800a5c8:	eba9 0303 	sub.w	r3, r9, r3
 800a5cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800a5d0:	f7ff ffd7 	bl	800a582 <__hexdig_fun>
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d168      	bne.n	800a6ac <__gethex+0x100>
 800a5da:	49a0      	ldr	r1, [pc, #640]	@ (800a85c <__gethex+0x2b0>)
 800a5dc:	2201      	movs	r2, #1
 800a5de:	4648      	mov	r0, r9
 800a5e0:	f7ff ff3a 	bl	800a458 <strncmp>
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d167      	bne.n	800a6ba <__gethex+0x10e>
 800a5ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a5ee:	4626      	mov	r6, r4
 800a5f0:	f7ff ffc7 	bl	800a582 <__hexdig_fun>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d062      	beq.n	800a6be <__gethex+0x112>
 800a5f8:	4623      	mov	r3, r4
 800a5fa:	7818      	ldrb	r0, [r3, #0]
 800a5fc:	2830      	cmp	r0, #48	@ 0x30
 800a5fe:	4699      	mov	r9, r3
 800a600:	f103 0301 	add.w	r3, r3, #1
 800a604:	d0f9      	beq.n	800a5fa <__gethex+0x4e>
 800a606:	f7ff ffbc 	bl	800a582 <__hexdig_fun>
 800a60a:	fab0 f580 	clz	r5, r0
 800a60e:	096d      	lsrs	r5, r5, #5
 800a610:	f04f 0b01 	mov.w	fp, #1
 800a614:	464a      	mov	r2, r9
 800a616:	4616      	mov	r6, r2
 800a618:	3201      	adds	r2, #1
 800a61a:	7830      	ldrb	r0, [r6, #0]
 800a61c:	f7ff ffb1 	bl	800a582 <__hexdig_fun>
 800a620:	2800      	cmp	r0, #0
 800a622:	d1f8      	bne.n	800a616 <__gethex+0x6a>
 800a624:	498d      	ldr	r1, [pc, #564]	@ (800a85c <__gethex+0x2b0>)
 800a626:	2201      	movs	r2, #1
 800a628:	4630      	mov	r0, r6
 800a62a:	f7ff ff15 	bl	800a458 <strncmp>
 800a62e:	2800      	cmp	r0, #0
 800a630:	d13f      	bne.n	800a6b2 <__gethex+0x106>
 800a632:	b944      	cbnz	r4, 800a646 <__gethex+0x9a>
 800a634:	1c74      	adds	r4, r6, #1
 800a636:	4622      	mov	r2, r4
 800a638:	4616      	mov	r6, r2
 800a63a:	3201      	adds	r2, #1
 800a63c:	7830      	ldrb	r0, [r6, #0]
 800a63e:	f7ff ffa0 	bl	800a582 <__hexdig_fun>
 800a642:	2800      	cmp	r0, #0
 800a644:	d1f8      	bne.n	800a638 <__gethex+0x8c>
 800a646:	1ba4      	subs	r4, r4, r6
 800a648:	00a7      	lsls	r7, r4, #2
 800a64a:	7833      	ldrb	r3, [r6, #0]
 800a64c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a650:	2b50      	cmp	r3, #80	@ 0x50
 800a652:	d13e      	bne.n	800a6d2 <__gethex+0x126>
 800a654:	7873      	ldrb	r3, [r6, #1]
 800a656:	2b2b      	cmp	r3, #43	@ 0x2b
 800a658:	d033      	beq.n	800a6c2 <__gethex+0x116>
 800a65a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a65c:	d034      	beq.n	800a6c8 <__gethex+0x11c>
 800a65e:	1c71      	adds	r1, r6, #1
 800a660:	2400      	movs	r4, #0
 800a662:	7808      	ldrb	r0, [r1, #0]
 800a664:	f7ff ff8d 	bl	800a582 <__hexdig_fun>
 800a668:	1e43      	subs	r3, r0, #1
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	2b18      	cmp	r3, #24
 800a66e:	d830      	bhi.n	800a6d2 <__gethex+0x126>
 800a670:	f1a0 0210 	sub.w	r2, r0, #16
 800a674:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a678:	f7ff ff83 	bl	800a582 <__hexdig_fun>
 800a67c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a680:	fa5f fc8c 	uxtb.w	ip, ip
 800a684:	f1bc 0f18 	cmp.w	ip, #24
 800a688:	f04f 030a 	mov.w	r3, #10
 800a68c:	d91e      	bls.n	800a6cc <__gethex+0x120>
 800a68e:	b104      	cbz	r4, 800a692 <__gethex+0xe6>
 800a690:	4252      	negs	r2, r2
 800a692:	4417      	add	r7, r2
 800a694:	f8ca 1000 	str.w	r1, [sl]
 800a698:	b1ed      	cbz	r5, 800a6d6 <__gethex+0x12a>
 800a69a:	f1bb 0f00 	cmp.w	fp, #0
 800a69e:	bf0c      	ite	eq
 800a6a0:	2506      	moveq	r5, #6
 800a6a2:	2500      	movne	r5, #0
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	b005      	add	sp, #20
 800a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ac:	2500      	movs	r5, #0
 800a6ae:	462c      	mov	r4, r5
 800a6b0:	e7b0      	b.n	800a614 <__gethex+0x68>
 800a6b2:	2c00      	cmp	r4, #0
 800a6b4:	d1c7      	bne.n	800a646 <__gethex+0x9a>
 800a6b6:	4627      	mov	r7, r4
 800a6b8:	e7c7      	b.n	800a64a <__gethex+0x9e>
 800a6ba:	464e      	mov	r6, r9
 800a6bc:	462f      	mov	r7, r5
 800a6be:	2501      	movs	r5, #1
 800a6c0:	e7c3      	b.n	800a64a <__gethex+0x9e>
 800a6c2:	2400      	movs	r4, #0
 800a6c4:	1cb1      	adds	r1, r6, #2
 800a6c6:	e7cc      	b.n	800a662 <__gethex+0xb6>
 800a6c8:	2401      	movs	r4, #1
 800a6ca:	e7fb      	b.n	800a6c4 <__gethex+0x118>
 800a6cc:	fb03 0002 	mla	r0, r3, r2, r0
 800a6d0:	e7ce      	b.n	800a670 <__gethex+0xc4>
 800a6d2:	4631      	mov	r1, r6
 800a6d4:	e7de      	b.n	800a694 <__gethex+0xe8>
 800a6d6:	eba6 0309 	sub.w	r3, r6, r9
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	4629      	mov	r1, r5
 800a6de:	2b07      	cmp	r3, #7
 800a6e0:	dc0a      	bgt.n	800a6f8 <__gethex+0x14c>
 800a6e2:	9801      	ldr	r0, [sp, #4]
 800a6e4:	f7fd ff82 	bl	80085ec <_Balloc>
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	b940      	cbnz	r0, 800a6fe <__gethex+0x152>
 800a6ec:	4b5c      	ldr	r3, [pc, #368]	@ (800a860 <__gethex+0x2b4>)
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	21e4      	movs	r1, #228	@ 0xe4
 800a6f2:	485c      	ldr	r0, [pc, #368]	@ (800a864 <__gethex+0x2b8>)
 800a6f4:	f7fd f8b8 	bl	8007868 <__assert_func>
 800a6f8:	3101      	adds	r1, #1
 800a6fa:	105b      	asrs	r3, r3, #1
 800a6fc:	e7ef      	b.n	800a6de <__gethex+0x132>
 800a6fe:	f100 0a14 	add.w	sl, r0, #20
 800a702:	2300      	movs	r3, #0
 800a704:	4655      	mov	r5, sl
 800a706:	469b      	mov	fp, r3
 800a708:	45b1      	cmp	r9, r6
 800a70a:	d337      	bcc.n	800a77c <__gethex+0x1d0>
 800a70c:	f845 bb04 	str.w	fp, [r5], #4
 800a710:	eba5 050a 	sub.w	r5, r5, sl
 800a714:	10ad      	asrs	r5, r5, #2
 800a716:	6125      	str	r5, [r4, #16]
 800a718:	4658      	mov	r0, fp
 800a71a:	f7fe f859 	bl	80087d0 <__hi0bits>
 800a71e:	016d      	lsls	r5, r5, #5
 800a720:	f8d8 6000 	ldr.w	r6, [r8]
 800a724:	1a2d      	subs	r5, r5, r0
 800a726:	42b5      	cmp	r5, r6
 800a728:	dd54      	ble.n	800a7d4 <__gethex+0x228>
 800a72a:	1bad      	subs	r5, r5, r6
 800a72c:	4629      	mov	r1, r5
 800a72e:	4620      	mov	r0, r4
 800a730:	f7fe fbe5 	bl	8008efe <__any_on>
 800a734:	4681      	mov	r9, r0
 800a736:	b178      	cbz	r0, 800a758 <__gethex+0x1ac>
 800a738:	1e6b      	subs	r3, r5, #1
 800a73a:	1159      	asrs	r1, r3, #5
 800a73c:	f003 021f 	and.w	r2, r3, #31
 800a740:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a744:	f04f 0901 	mov.w	r9, #1
 800a748:	fa09 f202 	lsl.w	r2, r9, r2
 800a74c:	420a      	tst	r2, r1
 800a74e:	d003      	beq.n	800a758 <__gethex+0x1ac>
 800a750:	454b      	cmp	r3, r9
 800a752:	dc36      	bgt.n	800a7c2 <__gethex+0x216>
 800a754:	f04f 0902 	mov.w	r9, #2
 800a758:	4629      	mov	r1, r5
 800a75a:	4620      	mov	r0, r4
 800a75c:	f7ff febf 	bl	800a4de <rshift>
 800a760:	442f      	add	r7, r5
 800a762:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a766:	42bb      	cmp	r3, r7
 800a768:	da42      	bge.n	800a7f0 <__gethex+0x244>
 800a76a:	9801      	ldr	r0, [sp, #4]
 800a76c:	4621      	mov	r1, r4
 800a76e:	f7fd ff7d 	bl	800866c <_Bfree>
 800a772:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a774:	2300      	movs	r3, #0
 800a776:	6013      	str	r3, [r2, #0]
 800a778:	25a3      	movs	r5, #163	@ 0xa3
 800a77a:	e793      	b.n	800a6a4 <__gethex+0xf8>
 800a77c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a780:	2a2e      	cmp	r2, #46	@ 0x2e
 800a782:	d012      	beq.n	800a7aa <__gethex+0x1fe>
 800a784:	2b20      	cmp	r3, #32
 800a786:	d104      	bne.n	800a792 <__gethex+0x1e6>
 800a788:	f845 bb04 	str.w	fp, [r5], #4
 800a78c:	f04f 0b00 	mov.w	fp, #0
 800a790:	465b      	mov	r3, fp
 800a792:	7830      	ldrb	r0, [r6, #0]
 800a794:	9303      	str	r3, [sp, #12]
 800a796:	f7ff fef4 	bl	800a582 <__hexdig_fun>
 800a79a:	9b03      	ldr	r3, [sp, #12]
 800a79c:	f000 000f 	and.w	r0, r0, #15
 800a7a0:	4098      	lsls	r0, r3
 800a7a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	e7ae      	b.n	800a708 <__gethex+0x15c>
 800a7aa:	45b1      	cmp	r9, r6
 800a7ac:	d8ea      	bhi.n	800a784 <__gethex+0x1d8>
 800a7ae:	492b      	ldr	r1, [pc, #172]	@ (800a85c <__gethex+0x2b0>)
 800a7b0:	9303      	str	r3, [sp, #12]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	f7ff fe4f 	bl	800a458 <strncmp>
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d1e1      	bne.n	800a784 <__gethex+0x1d8>
 800a7c0:	e7a2      	b.n	800a708 <__gethex+0x15c>
 800a7c2:	1ea9      	subs	r1, r5, #2
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f7fe fb9a 	bl	8008efe <__any_on>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d0c2      	beq.n	800a754 <__gethex+0x1a8>
 800a7ce:	f04f 0903 	mov.w	r9, #3
 800a7d2:	e7c1      	b.n	800a758 <__gethex+0x1ac>
 800a7d4:	da09      	bge.n	800a7ea <__gethex+0x23e>
 800a7d6:	1b75      	subs	r5, r6, r5
 800a7d8:	4621      	mov	r1, r4
 800a7da:	9801      	ldr	r0, [sp, #4]
 800a7dc:	462a      	mov	r2, r5
 800a7de:	f7fe f955 	bl	8008a8c <__lshift>
 800a7e2:	1b7f      	subs	r7, r7, r5
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	f100 0a14 	add.w	sl, r0, #20
 800a7ea:	f04f 0900 	mov.w	r9, #0
 800a7ee:	e7b8      	b.n	800a762 <__gethex+0x1b6>
 800a7f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a7f4:	42bd      	cmp	r5, r7
 800a7f6:	dd6f      	ble.n	800a8d8 <__gethex+0x32c>
 800a7f8:	1bed      	subs	r5, r5, r7
 800a7fa:	42ae      	cmp	r6, r5
 800a7fc:	dc34      	bgt.n	800a868 <__gethex+0x2bc>
 800a7fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a802:	2b02      	cmp	r3, #2
 800a804:	d022      	beq.n	800a84c <__gethex+0x2a0>
 800a806:	2b03      	cmp	r3, #3
 800a808:	d024      	beq.n	800a854 <__gethex+0x2a8>
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d115      	bne.n	800a83a <__gethex+0x28e>
 800a80e:	42ae      	cmp	r6, r5
 800a810:	d113      	bne.n	800a83a <__gethex+0x28e>
 800a812:	2e01      	cmp	r6, #1
 800a814:	d10b      	bne.n	800a82e <__gethex+0x282>
 800a816:	9a02      	ldr	r2, [sp, #8]
 800a818:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a81c:	6013      	str	r3, [r2, #0]
 800a81e:	2301      	movs	r3, #1
 800a820:	6123      	str	r3, [r4, #16]
 800a822:	f8ca 3000 	str.w	r3, [sl]
 800a826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a828:	2562      	movs	r5, #98	@ 0x62
 800a82a:	601c      	str	r4, [r3, #0]
 800a82c:	e73a      	b.n	800a6a4 <__gethex+0xf8>
 800a82e:	1e71      	subs	r1, r6, #1
 800a830:	4620      	mov	r0, r4
 800a832:	f7fe fb64 	bl	8008efe <__any_on>
 800a836:	2800      	cmp	r0, #0
 800a838:	d1ed      	bne.n	800a816 <__gethex+0x26a>
 800a83a:	9801      	ldr	r0, [sp, #4]
 800a83c:	4621      	mov	r1, r4
 800a83e:	f7fd ff15 	bl	800866c <_Bfree>
 800a842:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a844:	2300      	movs	r3, #0
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	2550      	movs	r5, #80	@ 0x50
 800a84a:	e72b      	b.n	800a6a4 <__gethex+0xf8>
 800a84c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1f3      	bne.n	800a83a <__gethex+0x28e>
 800a852:	e7e0      	b.n	800a816 <__gethex+0x26a>
 800a854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1dd      	bne.n	800a816 <__gethex+0x26a>
 800a85a:	e7ee      	b.n	800a83a <__gethex+0x28e>
 800a85c:	0800b05b 	.word	0x0800b05b
 800a860:	0800aff1 	.word	0x0800aff1
 800a864:	0800b076 	.word	0x0800b076
 800a868:	1e6f      	subs	r7, r5, #1
 800a86a:	f1b9 0f00 	cmp.w	r9, #0
 800a86e:	d130      	bne.n	800a8d2 <__gethex+0x326>
 800a870:	b127      	cbz	r7, 800a87c <__gethex+0x2d0>
 800a872:	4639      	mov	r1, r7
 800a874:	4620      	mov	r0, r4
 800a876:	f7fe fb42 	bl	8008efe <__any_on>
 800a87a:	4681      	mov	r9, r0
 800a87c:	117a      	asrs	r2, r7, #5
 800a87e:	2301      	movs	r3, #1
 800a880:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a884:	f007 071f 	and.w	r7, r7, #31
 800a888:	40bb      	lsls	r3, r7
 800a88a:	4213      	tst	r3, r2
 800a88c:	4629      	mov	r1, r5
 800a88e:	4620      	mov	r0, r4
 800a890:	bf18      	it	ne
 800a892:	f049 0902 	orrne.w	r9, r9, #2
 800a896:	f7ff fe22 	bl	800a4de <rshift>
 800a89a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a89e:	1b76      	subs	r6, r6, r5
 800a8a0:	2502      	movs	r5, #2
 800a8a2:	f1b9 0f00 	cmp.w	r9, #0
 800a8a6:	d047      	beq.n	800a938 <__gethex+0x38c>
 800a8a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d015      	beq.n	800a8dc <__gethex+0x330>
 800a8b0:	2b03      	cmp	r3, #3
 800a8b2:	d017      	beq.n	800a8e4 <__gethex+0x338>
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d109      	bne.n	800a8cc <__gethex+0x320>
 800a8b8:	f019 0f02 	tst.w	r9, #2
 800a8bc:	d006      	beq.n	800a8cc <__gethex+0x320>
 800a8be:	f8da 3000 	ldr.w	r3, [sl]
 800a8c2:	ea49 0903 	orr.w	r9, r9, r3
 800a8c6:	f019 0f01 	tst.w	r9, #1
 800a8ca:	d10e      	bne.n	800a8ea <__gethex+0x33e>
 800a8cc:	f045 0510 	orr.w	r5, r5, #16
 800a8d0:	e032      	b.n	800a938 <__gethex+0x38c>
 800a8d2:	f04f 0901 	mov.w	r9, #1
 800a8d6:	e7d1      	b.n	800a87c <__gethex+0x2d0>
 800a8d8:	2501      	movs	r5, #1
 800a8da:	e7e2      	b.n	800a8a2 <__gethex+0x2f6>
 800a8dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8de:	f1c3 0301 	rsb	r3, r3, #1
 800a8e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d0f0      	beq.n	800a8cc <__gethex+0x320>
 800a8ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a8ee:	f104 0314 	add.w	r3, r4, #20
 800a8f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a8f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a8fa:	f04f 0c00 	mov.w	ip, #0
 800a8fe:	4618      	mov	r0, r3
 800a900:	f853 2b04 	ldr.w	r2, [r3], #4
 800a904:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a908:	d01b      	beq.n	800a942 <__gethex+0x396>
 800a90a:	3201      	adds	r2, #1
 800a90c:	6002      	str	r2, [r0, #0]
 800a90e:	2d02      	cmp	r5, #2
 800a910:	f104 0314 	add.w	r3, r4, #20
 800a914:	d13c      	bne.n	800a990 <__gethex+0x3e4>
 800a916:	f8d8 2000 	ldr.w	r2, [r8]
 800a91a:	3a01      	subs	r2, #1
 800a91c:	42b2      	cmp	r2, r6
 800a91e:	d109      	bne.n	800a934 <__gethex+0x388>
 800a920:	1171      	asrs	r1, r6, #5
 800a922:	2201      	movs	r2, #1
 800a924:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a928:	f006 061f 	and.w	r6, r6, #31
 800a92c:	fa02 f606 	lsl.w	r6, r2, r6
 800a930:	421e      	tst	r6, r3
 800a932:	d13a      	bne.n	800a9aa <__gethex+0x3fe>
 800a934:	f045 0520 	orr.w	r5, r5, #32
 800a938:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a93a:	601c      	str	r4, [r3, #0]
 800a93c:	9b02      	ldr	r3, [sp, #8]
 800a93e:	601f      	str	r7, [r3, #0]
 800a940:	e6b0      	b.n	800a6a4 <__gethex+0xf8>
 800a942:	4299      	cmp	r1, r3
 800a944:	f843 cc04 	str.w	ip, [r3, #-4]
 800a948:	d8d9      	bhi.n	800a8fe <__gethex+0x352>
 800a94a:	68a3      	ldr	r3, [r4, #8]
 800a94c:	459b      	cmp	fp, r3
 800a94e:	db17      	blt.n	800a980 <__gethex+0x3d4>
 800a950:	6861      	ldr	r1, [r4, #4]
 800a952:	9801      	ldr	r0, [sp, #4]
 800a954:	3101      	adds	r1, #1
 800a956:	f7fd fe49 	bl	80085ec <_Balloc>
 800a95a:	4681      	mov	r9, r0
 800a95c:	b918      	cbnz	r0, 800a966 <__gethex+0x3ba>
 800a95e:	4b1a      	ldr	r3, [pc, #104]	@ (800a9c8 <__gethex+0x41c>)
 800a960:	4602      	mov	r2, r0
 800a962:	2184      	movs	r1, #132	@ 0x84
 800a964:	e6c5      	b.n	800a6f2 <__gethex+0x146>
 800a966:	6922      	ldr	r2, [r4, #16]
 800a968:	3202      	adds	r2, #2
 800a96a:	f104 010c 	add.w	r1, r4, #12
 800a96e:	0092      	lsls	r2, r2, #2
 800a970:	300c      	adds	r0, #12
 800a972:	f7ff fd83 	bl	800a47c <memcpy>
 800a976:	4621      	mov	r1, r4
 800a978:	9801      	ldr	r0, [sp, #4]
 800a97a:	f7fd fe77 	bl	800866c <_Bfree>
 800a97e:	464c      	mov	r4, r9
 800a980:	6923      	ldr	r3, [r4, #16]
 800a982:	1c5a      	adds	r2, r3, #1
 800a984:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a988:	6122      	str	r2, [r4, #16]
 800a98a:	2201      	movs	r2, #1
 800a98c:	615a      	str	r2, [r3, #20]
 800a98e:	e7be      	b.n	800a90e <__gethex+0x362>
 800a990:	6922      	ldr	r2, [r4, #16]
 800a992:	455a      	cmp	r2, fp
 800a994:	dd0b      	ble.n	800a9ae <__gethex+0x402>
 800a996:	2101      	movs	r1, #1
 800a998:	4620      	mov	r0, r4
 800a99a:	f7ff fda0 	bl	800a4de <rshift>
 800a99e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a9a2:	3701      	adds	r7, #1
 800a9a4:	42bb      	cmp	r3, r7
 800a9a6:	f6ff aee0 	blt.w	800a76a <__gethex+0x1be>
 800a9aa:	2501      	movs	r5, #1
 800a9ac:	e7c2      	b.n	800a934 <__gethex+0x388>
 800a9ae:	f016 061f 	ands.w	r6, r6, #31
 800a9b2:	d0fa      	beq.n	800a9aa <__gethex+0x3fe>
 800a9b4:	4453      	add	r3, sl
 800a9b6:	f1c6 0620 	rsb	r6, r6, #32
 800a9ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a9be:	f7fd ff07 	bl	80087d0 <__hi0bits>
 800a9c2:	42b0      	cmp	r0, r6
 800a9c4:	dbe7      	blt.n	800a996 <__gethex+0x3ea>
 800a9c6:	e7f0      	b.n	800a9aa <__gethex+0x3fe>
 800a9c8:	0800aff1 	.word	0x0800aff1

0800a9cc <L_shift>:
 800a9cc:	f1c2 0208 	rsb	r2, r2, #8
 800a9d0:	0092      	lsls	r2, r2, #2
 800a9d2:	b570      	push	{r4, r5, r6, lr}
 800a9d4:	f1c2 0620 	rsb	r6, r2, #32
 800a9d8:	6843      	ldr	r3, [r0, #4]
 800a9da:	6804      	ldr	r4, [r0, #0]
 800a9dc:	fa03 f506 	lsl.w	r5, r3, r6
 800a9e0:	432c      	orrs	r4, r5
 800a9e2:	40d3      	lsrs	r3, r2
 800a9e4:	6004      	str	r4, [r0, #0]
 800a9e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a9ea:	4288      	cmp	r0, r1
 800a9ec:	d3f4      	bcc.n	800a9d8 <L_shift+0xc>
 800a9ee:	bd70      	pop	{r4, r5, r6, pc}

0800a9f0 <__match>:
 800a9f0:	b530      	push	{r4, r5, lr}
 800a9f2:	6803      	ldr	r3, [r0, #0]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9fa:	b914      	cbnz	r4, 800aa02 <__match+0x12>
 800a9fc:	6003      	str	r3, [r0, #0]
 800a9fe:	2001      	movs	r0, #1
 800aa00:	bd30      	pop	{r4, r5, pc}
 800aa02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aa0a:	2d19      	cmp	r5, #25
 800aa0c:	bf98      	it	ls
 800aa0e:	3220      	addls	r2, #32
 800aa10:	42a2      	cmp	r2, r4
 800aa12:	d0f0      	beq.n	800a9f6 <__match+0x6>
 800aa14:	2000      	movs	r0, #0
 800aa16:	e7f3      	b.n	800aa00 <__match+0x10>

0800aa18 <__hexnan>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	680b      	ldr	r3, [r1, #0]
 800aa1e:	6801      	ldr	r1, [r0, #0]
 800aa20:	115e      	asrs	r6, r3, #5
 800aa22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa26:	f013 031f 	ands.w	r3, r3, #31
 800aa2a:	b087      	sub	sp, #28
 800aa2c:	bf18      	it	ne
 800aa2e:	3604      	addne	r6, #4
 800aa30:	2500      	movs	r5, #0
 800aa32:	1f37      	subs	r7, r6, #4
 800aa34:	4682      	mov	sl, r0
 800aa36:	4690      	mov	r8, r2
 800aa38:	9301      	str	r3, [sp, #4]
 800aa3a:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa3e:	46b9      	mov	r9, r7
 800aa40:	463c      	mov	r4, r7
 800aa42:	9502      	str	r5, [sp, #8]
 800aa44:	46ab      	mov	fp, r5
 800aa46:	784a      	ldrb	r2, [r1, #1]
 800aa48:	1c4b      	adds	r3, r1, #1
 800aa4a:	9303      	str	r3, [sp, #12]
 800aa4c:	b342      	cbz	r2, 800aaa0 <__hexnan+0x88>
 800aa4e:	4610      	mov	r0, r2
 800aa50:	9105      	str	r1, [sp, #20]
 800aa52:	9204      	str	r2, [sp, #16]
 800aa54:	f7ff fd95 	bl	800a582 <__hexdig_fun>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d151      	bne.n	800ab00 <__hexnan+0xe8>
 800aa5c:	9a04      	ldr	r2, [sp, #16]
 800aa5e:	9905      	ldr	r1, [sp, #20]
 800aa60:	2a20      	cmp	r2, #32
 800aa62:	d818      	bhi.n	800aa96 <__hexnan+0x7e>
 800aa64:	9b02      	ldr	r3, [sp, #8]
 800aa66:	459b      	cmp	fp, r3
 800aa68:	dd13      	ble.n	800aa92 <__hexnan+0x7a>
 800aa6a:	454c      	cmp	r4, r9
 800aa6c:	d206      	bcs.n	800aa7c <__hexnan+0x64>
 800aa6e:	2d07      	cmp	r5, #7
 800aa70:	dc04      	bgt.n	800aa7c <__hexnan+0x64>
 800aa72:	462a      	mov	r2, r5
 800aa74:	4649      	mov	r1, r9
 800aa76:	4620      	mov	r0, r4
 800aa78:	f7ff ffa8 	bl	800a9cc <L_shift>
 800aa7c:	4544      	cmp	r4, r8
 800aa7e:	d952      	bls.n	800ab26 <__hexnan+0x10e>
 800aa80:	2300      	movs	r3, #0
 800aa82:	f1a4 0904 	sub.w	r9, r4, #4
 800aa86:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa8a:	f8cd b008 	str.w	fp, [sp, #8]
 800aa8e:	464c      	mov	r4, r9
 800aa90:	461d      	mov	r5, r3
 800aa92:	9903      	ldr	r1, [sp, #12]
 800aa94:	e7d7      	b.n	800aa46 <__hexnan+0x2e>
 800aa96:	2a29      	cmp	r2, #41	@ 0x29
 800aa98:	d157      	bne.n	800ab4a <__hexnan+0x132>
 800aa9a:	3102      	adds	r1, #2
 800aa9c:	f8ca 1000 	str.w	r1, [sl]
 800aaa0:	f1bb 0f00 	cmp.w	fp, #0
 800aaa4:	d051      	beq.n	800ab4a <__hexnan+0x132>
 800aaa6:	454c      	cmp	r4, r9
 800aaa8:	d206      	bcs.n	800aab8 <__hexnan+0xa0>
 800aaaa:	2d07      	cmp	r5, #7
 800aaac:	dc04      	bgt.n	800aab8 <__hexnan+0xa0>
 800aaae:	462a      	mov	r2, r5
 800aab0:	4649      	mov	r1, r9
 800aab2:	4620      	mov	r0, r4
 800aab4:	f7ff ff8a 	bl	800a9cc <L_shift>
 800aab8:	4544      	cmp	r4, r8
 800aaba:	d936      	bls.n	800ab2a <__hexnan+0x112>
 800aabc:	f1a8 0204 	sub.w	r2, r8, #4
 800aac0:	4623      	mov	r3, r4
 800aac2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aac6:	f842 1f04 	str.w	r1, [r2, #4]!
 800aaca:	429f      	cmp	r7, r3
 800aacc:	d2f9      	bcs.n	800aac2 <__hexnan+0xaa>
 800aace:	1b3b      	subs	r3, r7, r4
 800aad0:	f023 0303 	bic.w	r3, r3, #3
 800aad4:	3304      	adds	r3, #4
 800aad6:	3401      	adds	r4, #1
 800aad8:	3e03      	subs	r6, #3
 800aada:	42b4      	cmp	r4, r6
 800aadc:	bf88      	it	hi
 800aade:	2304      	movhi	r3, #4
 800aae0:	4443      	add	r3, r8
 800aae2:	2200      	movs	r2, #0
 800aae4:	f843 2b04 	str.w	r2, [r3], #4
 800aae8:	429f      	cmp	r7, r3
 800aaea:	d2fb      	bcs.n	800aae4 <__hexnan+0xcc>
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	b91b      	cbnz	r3, 800aaf8 <__hexnan+0xe0>
 800aaf0:	4547      	cmp	r7, r8
 800aaf2:	d128      	bne.n	800ab46 <__hexnan+0x12e>
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	603b      	str	r3, [r7, #0]
 800aaf8:	2005      	movs	r0, #5
 800aafa:	b007      	add	sp, #28
 800aafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab00:	3501      	adds	r5, #1
 800ab02:	2d08      	cmp	r5, #8
 800ab04:	f10b 0b01 	add.w	fp, fp, #1
 800ab08:	dd06      	ble.n	800ab18 <__hexnan+0x100>
 800ab0a:	4544      	cmp	r4, r8
 800ab0c:	d9c1      	bls.n	800aa92 <__hexnan+0x7a>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab14:	2501      	movs	r5, #1
 800ab16:	3c04      	subs	r4, #4
 800ab18:	6822      	ldr	r2, [r4, #0]
 800ab1a:	f000 000f 	and.w	r0, r0, #15
 800ab1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ab22:	6020      	str	r0, [r4, #0]
 800ab24:	e7b5      	b.n	800aa92 <__hexnan+0x7a>
 800ab26:	2508      	movs	r5, #8
 800ab28:	e7b3      	b.n	800aa92 <__hexnan+0x7a>
 800ab2a:	9b01      	ldr	r3, [sp, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0dd      	beq.n	800aaec <__hexnan+0xd4>
 800ab30:	f1c3 0320 	rsb	r3, r3, #32
 800ab34:	f04f 32ff 	mov.w	r2, #4294967295
 800ab38:	40da      	lsrs	r2, r3
 800ab3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab3e:	4013      	ands	r3, r2
 800ab40:	f846 3c04 	str.w	r3, [r6, #-4]
 800ab44:	e7d2      	b.n	800aaec <__hexnan+0xd4>
 800ab46:	3f04      	subs	r7, #4
 800ab48:	e7d0      	b.n	800aaec <__hexnan+0xd4>
 800ab4a:	2004      	movs	r0, #4
 800ab4c:	e7d5      	b.n	800aafa <__hexnan+0xe2>

0800ab4e <__ascii_mbtowc>:
 800ab4e:	b082      	sub	sp, #8
 800ab50:	b901      	cbnz	r1, 800ab54 <__ascii_mbtowc+0x6>
 800ab52:	a901      	add	r1, sp, #4
 800ab54:	b142      	cbz	r2, 800ab68 <__ascii_mbtowc+0x1a>
 800ab56:	b14b      	cbz	r3, 800ab6c <__ascii_mbtowc+0x1e>
 800ab58:	7813      	ldrb	r3, [r2, #0]
 800ab5a:	600b      	str	r3, [r1, #0]
 800ab5c:	7812      	ldrb	r2, [r2, #0]
 800ab5e:	1e10      	subs	r0, r2, #0
 800ab60:	bf18      	it	ne
 800ab62:	2001      	movne	r0, #1
 800ab64:	b002      	add	sp, #8
 800ab66:	4770      	bx	lr
 800ab68:	4610      	mov	r0, r2
 800ab6a:	e7fb      	b.n	800ab64 <__ascii_mbtowc+0x16>
 800ab6c:	f06f 0001 	mvn.w	r0, #1
 800ab70:	e7f8      	b.n	800ab64 <__ascii_mbtowc+0x16>

0800ab72 <_realloc_r>:
 800ab72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab76:	4607      	mov	r7, r0
 800ab78:	4614      	mov	r4, r2
 800ab7a:	460d      	mov	r5, r1
 800ab7c:	b921      	cbnz	r1, 800ab88 <_realloc_r+0x16>
 800ab7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab82:	4611      	mov	r1, r2
 800ab84:	f7fb bd44 	b.w	8006610 <_malloc_r>
 800ab88:	b92a      	cbnz	r2, 800ab96 <_realloc_r+0x24>
 800ab8a:	f7fd fce5 	bl	8008558 <_free_r>
 800ab8e:	4625      	mov	r5, r4
 800ab90:	4628      	mov	r0, r5
 800ab92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab96:	f000 f8ef 	bl	800ad78 <_malloc_usable_size_r>
 800ab9a:	4284      	cmp	r4, r0
 800ab9c:	4606      	mov	r6, r0
 800ab9e:	d802      	bhi.n	800aba6 <_realloc_r+0x34>
 800aba0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aba4:	d8f4      	bhi.n	800ab90 <_realloc_r+0x1e>
 800aba6:	4621      	mov	r1, r4
 800aba8:	4638      	mov	r0, r7
 800abaa:	f7fb fd31 	bl	8006610 <_malloc_r>
 800abae:	4680      	mov	r8, r0
 800abb0:	b908      	cbnz	r0, 800abb6 <_realloc_r+0x44>
 800abb2:	4645      	mov	r5, r8
 800abb4:	e7ec      	b.n	800ab90 <_realloc_r+0x1e>
 800abb6:	42b4      	cmp	r4, r6
 800abb8:	4622      	mov	r2, r4
 800abba:	4629      	mov	r1, r5
 800abbc:	bf28      	it	cs
 800abbe:	4632      	movcs	r2, r6
 800abc0:	f7ff fc5c 	bl	800a47c <memcpy>
 800abc4:	4629      	mov	r1, r5
 800abc6:	4638      	mov	r0, r7
 800abc8:	f7fd fcc6 	bl	8008558 <_free_r>
 800abcc:	e7f1      	b.n	800abb2 <_realloc_r+0x40>

0800abce <__ascii_wctomb>:
 800abce:	4603      	mov	r3, r0
 800abd0:	4608      	mov	r0, r1
 800abd2:	b141      	cbz	r1, 800abe6 <__ascii_wctomb+0x18>
 800abd4:	2aff      	cmp	r2, #255	@ 0xff
 800abd6:	d904      	bls.n	800abe2 <__ascii_wctomb+0x14>
 800abd8:	228a      	movs	r2, #138	@ 0x8a
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	f04f 30ff 	mov.w	r0, #4294967295
 800abe0:	4770      	bx	lr
 800abe2:	700a      	strb	r2, [r1, #0]
 800abe4:	2001      	movs	r0, #1
 800abe6:	4770      	bx	lr

0800abe8 <__swhatbuf_r>:
 800abe8:	b570      	push	{r4, r5, r6, lr}
 800abea:	460c      	mov	r4, r1
 800abec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf0:	2900      	cmp	r1, #0
 800abf2:	b096      	sub	sp, #88	@ 0x58
 800abf4:	4615      	mov	r5, r2
 800abf6:	461e      	mov	r6, r3
 800abf8:	da0d      	bge.n	800ac16 <__swhatbuf_r+0x2e>
 800abfa:	89a3      	ldrh	r3, [r4, #12]
 800abfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac00:	f04f 0100 	mov.w	r1, #0
 800ac04:	bf14      	ite	ne
 800ac06:	2340      	movne	r3, #64	@ 0x40
 800ac08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	6031      	str	r1, [r6, #0]
 800ac10:	602b      	str	r3, [r5, #0]
 800ac12:	b016      	add	sp, #88	@ 0x58
 800ac14:	bd70      	pop	{r4, r5, r6, pc}
 800ac16:	466a      	mov	r2, sp
 800ac18:	f000 f878 	bl	800ad0c <_fstat_r>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	dbec      	blt.n	800abfa <__swhatbuf_r+0x12>
 800ac20:	9901      	ldr	r1, [sp, #4]
 800ac22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac2a:	4259      	negs	r1, r3
 800ac2c:	4159      	adcs	r1, r3
 800ac2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac32:	e7eb      	b.n	800ac0c <__swhatbuf_r+0x24>

0800ac34 <__smakebuf_r>:
 800ac34:	898b      	ldrh	r3, [r1, #12]
 800ac36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac38:	079d      	lsls	r5, r3, #30
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	d507      	bpl.n	800ac50 <__smakebuf_r+0x1c>
 800ac40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	6123      	str	r3, [r4, #16]
 800ac48:	2301      	movs	r3, #1
 800ac4a:	6163      	str	r3, [r4, #20]
 800ac4c:	b003      	add	sp, #12
 800ac4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac50:	ab01      	add	r3, sp, #4
 800ac52:	466a      	mov	r2, sp
 800ac54:	f7ff ffc8 	bl	800abe8 <__swhatbuf_r>
 800ac58:	9f00      	ldr	r7, [sp, #0]
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	4639      	mov	r1, r7
 800ac5e:	4630      	mov	r0, r6
 800ac60:	f7fb fcd6 	bl	8006610 <_malloc_r>
 800ac64:	b948      	cbnz	r0, 800ac7a <__smakebuf_r+0x46>
 800ac66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac6a:	059a      	lsls	r2, r3, #22
 800ac6c:	d4ee      	bmi.n	800ac4c <__smakebuf_r+0x18>
 800ac6e:	f023 0303 	bic.w	r3, r3, #3
 800ac72:	f043 0302 	orr.w	r3, r3, #2
 800ac76:	81a3      	strh	r3, [r4, #12]
 800ac78:	e7e2      	b.n	800ac40 <__smakebuf_r+0xc>
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	6020      	str	r0, [r4, #0]
 800ac7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac82:	81a3      	strh	r3, [r4, #12]
 800ac84:	9b01      	ldr	r3, [sp, #4]
 800ac86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac8a:	b15b      	cbz	r3, 800aca4 <__smakebuf_r+0x70>
 800ac8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac90:	4630      	mov	r0, r6
 800ac92:	f000 f84d 	bl	800ad30 <_isatty_r>
 800ac96:	b128      	cbz	r0, 800aca4 <__smakebuf_r+0x70>
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	f023 0303 	bic.w	r3, r3, #3
 800ac9e:	f043 0301 	orr.w	r3, r3, #1
 800aca2:	81a3      	strh	r3, [r4, #12]
 800aca4:	89a3      	ldrh	r3, [r4, #12]
 800aca6:	431d      	orrs	r5, r3
 800aca8:	81a5      	strh	r5, [r4, #12]
 800acaa:	e7cf      	b.n	800ac4c <__smakebuf_r+0x18>

0800acac <_raise_r>:
 800acac:	291f      	cmp	r1, #31
 800acae:	b538      	push	{r3, r4, r5, lr}
 800acb0:	4605      	mov	r5, r0
 800acb2:	460c      	mov	r4, r1
 800acb4:	d904      	bls.n	800acc0 <_raise_r+0x14>
 800acb6:	2316      	movs	r3, #22
 800acb8:	6003      	str	r3, [r0, #0]
 800acba:	f04f 30ff 	mov.w	r0, #4294967295
 800acbe:	bd38      	pop	{r3, r4, r5, pc}
 800acc0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800acc2:	b112      	cbz	r2, 800acca <_raise_r+0x1e>
 800acc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acc8:	b94b      	cbnz	r3, 800acde <_raise_r+0x32>
 800acca:	4628      	mov	r0, r5
 800accc:	f000 f852 	bl	800ad74 <_getpid_r>
 800acd0:	4622      	mov	r2, r4
 800acd2:	4601      	mov	r1, r0
 800acd4:	4628      	mov	r0, r5
 800acd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acda:	f000 b839 	b.w	800ad50 <_kill_r>
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d00a      	beq.n	800acf8 <_raise_r+0x4c>
 800ace2:	1c59      	adds	r1, r3, #1
 800ace4:	d103      	bne.n	800acee <_raise_r+0x42>
 800ace6:	2316      	movs	r3, #22
 800ace8:	6003      	str	r3, [r0, #0]
 800acea:	2001      	movs	r0, #1
 800acec:	e7e7      	b.n	800acbe <_raise_r+0x12>
 800acee:	2100      	movs	r1, #0
 800acf0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800acf4:	4620      	mov	r0, r4
 800acf6:	4798      	blx	r3
 800acf8:	2000      	movs	r0, #0
 800acfa:	e7e0      	b.n	800acbe <_raise_r+0x12>

0800acfc <raise>:
 800acfc:	4b02      	ldr	r3, [pc, #8]	@ (800ad08 <raise+0xc>)
 800acfe:	4601      	mov	r1, r0
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	f7ff bfd3 	b.w	800acac <_raise_r>
 800ad06:	bf00      	nop
 800ad08:	200400c0 	.word	0x200400c0

0800ad0c <_fstat_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4d07      	ldr	r5, [pc, #28]	@ (800ad2c <_fstat_r+0x20>)
 800ad10:	2300      	movs	r3, #0
 800ad12:	4604      	mov	r4, r0
 800ad14:	4608      	mov	r0, r1
 800ad16:	4611      	mov	r1, r2
 800ad18:	602b      	str	r3, [r5, #0]
 800ad1a:	f7f7 ff62 	bl	8002be2 <_fstat>
 800ad1e:	1c43      	adds	r3, r0, #1
 800ad20:	d102      	bne.n	800ad28 <_fstat_r+0x1c>
 800ad22:	682b      	ldr	r3, [r5, #0]
 800ad24:	b103      	cbz	r3, 800ad28 <_fstat_r+0x1c>
 800ad26:	6023      	str	r3, [r4, #0]
 800ad28:	bd38      	pop	{r3, r4, r5, pc}
 800ad2a:	bf00      	nop
 800ad2c:	20040e34 	.word	0x20040e34

0800ad30 <_isatty_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4d06      	ldr	r5, [pc, #24]	@ (800ad4c <_isatty_r+0x1c>)
 800ad34:	2300      	movs	r3, #0
 800ad36:	4604      	mov	r4, r0
 800ad38:	4608      	mov	r0, r1
 800ad3a:	602b      	str	r3, [r5, #0]
 800ad3c:	f7f7 ff61 	bl	8002c02 <_isatty>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	d102      	bne.n	800ad4a <_isatty_r+0x1a>
 800ad44:	682b      	ldr	r3, [r5, #0]
 800ad46:	b103      	cbz	r3, 800ad4a <_isatty_r+0x1a>
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	20040e34 	.word	0x20040e34

0800ad50 <_kill_r>:
 800ad50:	b538      	push	{r3, r4, r5, lr}
 800ad52:	4d07      	ldr	r5, [pc, #28]	@ (800ad70 <_kill_r+0x20>)
 800ad54:	2300      	movs	r3, #0
 800ad56:	4604      	mov	r4, r0
 800ad58:	4608      	mov	r0, r1
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	602b      	str	r3, [r5, #0]
 800ad5e:	f7f7 fee0 	bl	8002b22 <_kill>
 800ad62:	1c43      	adds	r3, r0, #1
 800ad64:	d102      	bne.n	800ad6c <_kill_r+0x1c>
 800ad66:	682b      	ldr	r3, [r5, #0]
 800ad68:	b103      	cbz	r3, 800ad6c <_kill_r+0x1c>
 800ad6a:	6023      	str	r3, [r4, #0]
 800ad6c:	bd38      	pop	{r3, r4, r5, pc}
 800ad6e:	bf00      	nop
 800ad70:	20040e34 	.word	0x20040e34

0800ad74 <_getpid_r>:
 800ad74:	f7f7 becd 	b.w	8002b12 <_getpid>

0800ad78 <_malloc_usable_size_r>:
 800ad78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad7c:	1f18      	subs	r0, r3, #4
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	bfbc      	itt	lt
 800ad82:	580b      	ldrlt	r3, [r1, r0]
 800ad84:	18c0      	addlt	r0, r0, r3
 800ad86:	4770      	bx	lr

0800ad88 <_init>:
 800ad88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8a:	bf00      	nop
 800ad8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad8e:	bc08      	pop	{r3}
 800ad90:	469e      	mov	lr, r3
 800ad92:	4770      	bx	lr

0800ad94 <_fini>:
 800ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad96:	bf00      	nop
 800ad98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad9a:	bc08      	pop	{r3}
 800ad9c:	469e      	mov	lr, r3
 800ad9e:	4770      	bx	lr
