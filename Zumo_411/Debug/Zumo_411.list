
Zumo_411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b624  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800b7c8  0800b7c8  0000c7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd2c  0800bd2c  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bd2c  0800bd2c  0000cd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd34  0800bd34  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd34  0800bd34  0000cd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd38  0800bd38  0000cd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800bd3c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200001d4  0800bf10  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  0800bf10  0000d558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010752  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225c  00000000  00000000  0001d956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  0001fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfc  00000000  00000000  00020c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ac0  00000000  00000000  0002191c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ad6  00000000  00000000  000393dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000933de  00000000  00000000  0004beb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df290  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c50  00000000  00000000  000df2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000e4f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b7ac 	.word	0x0800b7ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800b7ac 	.word	0x0800b7ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <HAL_UART_RxCpltCallback>:
// Callback function of UART interrupt
// MODIFIES: pitch, roll, state
// BT message format: P<ppp>,R<rrr>,S<s>
// where each p, r, and s is one digit in ASCII
// the first digit of pitch and roll indicates plus or minus, '1' for negative values
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	//HAL_UART_DMAPause(huart);
	if (huart->Instance == USART1) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a58      	ldr	r2, [pc, #352]	@ (80011a0 <HAL_UART_RxCpltCallback+0x170>)
 800103e:	4293      	cmp	r3, r2
 8001040:	f040 80a5 	bne.w	800118e <HAL_UART_RxCpltCallback+0x15e>
		//HAL_UART_Transmit(&huart2, Data, 12, 1000);

		//Find the starting character: 'P'
		int index = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < RX_BUF_SIZE; i++) {
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	e00a      	b.n	8001064 <HAL_UART_RxCpltCallback+0x34>
			if (Data[i] == 'P')
 800104e:	4a55      	ldr	r2, [pc, #340]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4413      	add	r3, r2
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b50      	cmp	r3, #80	@ 0x50
 8001058:	d101      	bne.n	800105e <HAL_UART_RxCpltCallback+0x2e>
				index = i;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < RX_BUF_SIZE; i++) {
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	3301      	adds	r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b0b      	cmp	r3, #11
 8001068:	ddf1      	ble.n	800104e <HAL_UART_RxCpltCallback+0x1e>
		}

		pitch = (Data[(2 + index) % RX_BUF_SIZE] - '0') * 10
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1c99      	adds	r1, r3, #2
 800106e:	4b4e      	ldr	r3, [pc, #312]	@ (80011a8 <HAL_UART_RxCpltCallback+0x178>)
 8001070:	fb83 2301 	smull	r2, r3, r3, r1
 8001074:	105a      	asrs	r2, r3, #1
 8001076:	17cb      	asrs	r3, r1, #31
 8001078:	1ad2      	subs	r2, r2, r3
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	1aca      	subs	r2, r1, r3
 8001084:	4b47      	ldr	r3, [pc, #284]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 8001086:	5c9b      	ldrb	r3, [r3, r2]
 8001088:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4618      	mov	r0, r3
				+ (Data[(3 + index) % RX_BUF_SIZE] - '0');
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	1cd9      	adds	r1, r3, #3
 800109a:	4b43      	ldr	r3, [pc, #268]	@ (80011a8 <HAL_UART_RxCpltCallback+0x178>)
 800109c:	fb83 2301 	smull	r2, r3, r3, r1
 80010a0:	105a      	asrs	r2, r3, #1
 80010a2:	17cb      	asrs	r3, r1, #31
 80010a4:	1ad2      	subs	r2, r2, r3
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	1aca      	subs	r2, r1, r3
 80010b0:	4b3c      	ldr	r3, [pc, #240]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 80010b2:	5c9b      	ldrb	r3, [r3, r2]
 80010b4:	3b30      	subs	r3, #48	@ 0x30
 80010b6:	4403      	add	r3, r0
		pitch = (Data[(2 + index) % RX_BUF_SIZE] - '0') * 10
 80010b8:	4a3c      	ldr	r2, [pc, #240]	@ (80011ac <HAL_UART_RxCpltCallback+0x17c>)
 80010ba:	6013      	str	r3, [r2, #0]
		roll = (Data[(7 + index) % RX_BUF_SIZE] - '0') * 10
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	1dd9      	adds	r1, r3, #7
 80010c0:	4b39      	ldr	r3, [pc, #228]	@ (80011a8 <HAL_UART_RxCpltCallback+0x178>)
 80010c2:	fb83 2301 	smull	r2, r3, r3, r1
 80010c6:	105a      	asrs	r2, r3, #1
 80010c8:	17cb      	asrs	r3, r1, #31
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	1aca      	subs	r2, r1, r3
 80010d6:	4b33      	ldr	r3, [pc, #204]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 80010d8:	5c9b      	ldrb	r3, [r3, r2]
 80010da:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4618      	mov	r0, r3
				+ (Data[(8 + index) % RX_BUF_SIZE] - '0');
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f103 0108 	add.w	r1, r3, #8
 80010ee:	4b2e      	ldr	r3, [pc, #184]	@ (80011a8 <HAL_UART_RxCpltCallback+0x178>)
 80010f0:	fb83 2301 	smull	r2, r3, r3, r1
 80010f4:	105a      	asrs	r2, r3, #1
 80010f6:	17cb      	asrs	r3, r1, #31
 80010f8:	1ad2      	subs	r2, r2, r3
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	1aca      	subs	r2, r1, r3
 8001104:	4b27      	ldr	r3, [pc, #156]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 8001106:	5c9b      	ldrb	r3, [r3, r2]
 8001108:	3b30      	subs	r3, #48	@ 0x30
 800110a:	4403      	add	r3, r0
		roll = (Data[(7 + index) % RX_BUF_SIZE] - '0') * 10
 800110c:	4a28      	ldr	r2, [pc, #160]	@ (80011b0 <HAL_UART_RxCpltCallback+0x180>)
 800110e:	6013      	str	r3, [r2, #0]
		state = (Data[(11 + index) % RX_BUF_SIZE] - '0');
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f103 010b 	add.w	r1, r3, #11
 8001116:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <HAL_UART_RxCpltCallback+0x178>)
 8001118:	fb83 2301 	smull	r2, r3, r3, r1
 800111c:	105a      	asrs	r2, r3, #1
 800111e:	17cb      	asrs	r3, r1, #31
 8001120:	1ad2      	subs	r2, r2, r3
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	1aca      	subs	r2, r1, r3
 800112c:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 800112e:	5c9b      	ldrb	r3, [r3, r2]
 8001130:	3b30      	subs	r3, #48	@ 0x30
 8001132:	4a20      	ldr	r2, [pc, #128]	@ (80011b4 <HAL_UART_RxCpltCallback+0x184>)
 8001134:	6013      	str	r3, [r2, #0]

		if (Data[(1 + index) % RX_BUF_SIZE] == '1')
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1c59      	adds	r1, r3, #1
 800113a:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <HAL_UART_RxCpltCallback+0x178>)
 800113c:	fb83 2301 	smull	r2, r3, r3, r1
 8001140:	105a      	asrs	r2, r3, #1
 8001142:	17cb      	asrs	r3, r1, #31
 8001144:	1ad2      	subs	r2, r2, r3
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	1aca      	subs	r2, r1, r3
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 8001152:	5c9b      	ldrb	r3, [r3, r2]
 8001154:	2b31      	cmp	r3, #49	@ 0x31
 8001156:	d104      	bne.n	8001162 <HAL_UART_RxCpltCallback+0x132>
			pitch *= (-1);
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <HAL_UART_RxCpltCallback+0x17c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	425b      	negs	r3, r3
 800115e:	4a13      	ldr	r2, [pc, #76]	@ (80011ac <HAL_UART_RxCpltCallback+0x17c>)
 8001160:	6013      	str	r3, [r2, #0]
		if (Data[(6 + index) % RX_BUF_SIZE] == '1')
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	1d99      	adds	r1, r3, #6
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <HAL_UART_RxCpltCallback+0x178>)
 8001168:	fb83 2301 	smull	r2, r3, r3, r1
 800116c:	105a      	asrs	r2, r3, #1
 800116e:	17cb      	asrs	r3, r1, #31
 8001170:	1ad2      	subs	r2, r2, r3
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	1aca      	subs	r2, r1, r3
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 800117e:	5c9b      	ldrb	r3, [r3, r2]
 8001180:	2b31      	cmp	r3, #49	@ 0x31
 8001182:	d104      	bne.n	800118e <HAL_UART_RxCpltCallback+0x15e>
			roll *= (-1);
 8001184:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_UART_RxCpltCallback+0x180>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	425b      	negs	r3, r3
 800118a:	4a09      	ldr	r2, [pc, #36]	@ (80011b0 <HAL_UART_RxCpltCallback+0x180>)
 800118c:	6013      	str	r3, [r2, #0]
	}
	//HAL_UART_DMAResume(huart);
	HAL_UART_Receive_DMA(&huart1, Data, RX_BUF_SIZE);
 800118e:	220c      	movs	r2, #12
 8001190:	4904      	ldr	r1, [pc, #16]	@ (80011a4 <HAL_UART_RxCpltCallback+0x174>)
 8001192:	4809      	ldr	r0, [pc, #36]	@ (80011b8 <HAL_UART_RxCpltCallback+0x188>)
 8001194:	f004 fe25 	bl	8005de2 <HAL_UART_Receive_DMA>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40011000 	.word	0x40011000
 80011a4:	200003e0 	.word	0x200003e0
 80011a8:	2aaaaaab 	.word	0x2aaaaaab
 80011ac:	200003c8 	.word	0x200003c8
 80011b0:	200003cc 	.word	0x200003cc
 80011b4:	200003d0 	.word	0x200003d0
 80011b8:	200002d4 	.word	0x200002d4

080011bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011bc:	b5b0      	push	{r4, r5, r7, lr}
 80011be:	b08c      	sub	sp, #48	@ 0x30
 80011c0:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011c2:	f001 f9d9 	bl	8002578 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011c6:	f000 f96b 	bl	80014a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011ca:	f000 fb91 	bl	80018f0 <MX_GPIO_Init>
	MX_DMA_Init();
 80011ce:	f000 fb6f 	bl	80018b0 <MX_DMA_Init>
	MX_I2C1_Init();
 80011d2:	f000 f9cf 	bl	8001574 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80011d6:	f000 fb17 	bl	8001808 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 80011da:	f000 f9f9 	bl	80015d0 <MX_TIM3_Init>
	MX_TIM4_Init();
 80011de:	f000 fa85 	bl	80016ec <MX_TIM4_Init>
	MX_USART2_UART_Init();
 80011e2:	f000 fb3b 	bl	800185c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011e6:	2104      	movs	r1, #4
 80011e8:	4892      	ldr	r0, [pc, #584]	@ (8001434 <main+0x278>)
 80011ea:	f003 ff9f 	bl	800512c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80011ee:	2100      	movs	r1, #0
 80011f0:	4891      	ldr	r0, [pc, #580]	@ (8001438 <main+0x27c>)
 80011f2:	f003 ff9b 	bl	800512c <HAL_TIM_PWM_Start>
	//i2c_scan();
	init_accelerometer();
 80011f6:	f000 fdc9 	bl	8001d8c <init_accelerometer>
	init_gyroscope();
 80011fa:	f000 fdef 	bl	8001ddc <init_gyroscope>
	init_magnetometer();
 80011fe:	f000 fd8f 	bl	8001d20 <init_magnetometer>
	//HAL_UARTEx_ReceiveToIdle_IT(&huart1, Data, MAX_BUFFER_SIZE);
	//	while((*Trash) != 'P')
	//	{
	//		HAL_UART_Receive(&huart1, Trash, 1, HAL_MAX_DELAY);
	//	}
	HAL_UART_Receive_DMA(&huart1, Data, RX_BUF_SIZE);
 8001202:	220c      	movs	r2, #12
 8001204:	498d      	ldr	r1, [pc, #564]	@ (800143c <main+0x280>)
 8001206:	488e      	ldr	r0, [pc, #568]	@ (8001440 <main+0x284>)
 8001208:	f004 fdeb 	bl	8005de2 <HAL_UART_Receive_DMA>

	if (HAL_I2C_IsDeviceReady(&hi2c1, 0x6B << 1, 1, HAL_MAX_DELAY) == HAL_OK) {
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	2201      	movs	r2, #1
 8001212:	21d6      	movs	r1, #214	@ 0xd6
 8001214:	488b      	ldr	r0, [pc, #556]	@ (8001444 <main+0x288>)
 8001216:	f002 fd67 	bl	8003ce8 <HAL_I2C_IsDeviceReady>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d103      	bne.n	8001228 <main+0x6c>
		printf("L3GD20H detected at 0x6B\r\n");
 8001220:	4889      	ldr	r0, [pc, #548]	@ (8001448 <main+0x28c>)
 8001222:	f006 fe79 	bl	8007f18 <puts>
 8001226:	e002      	b.n	800122e <main+0x72>
	} else {
		printf("L3GD20H NOT detected!\r\n");
 8001228:	4888      	ldr	r0, [pc, #544]	@ (800144c <main+0x290>)
 800122a:	f006 fe75 	bl	8007f18 <puts>
	}
	if (HAL_I2C_IsDeviceReady(&hi2c1, 0x1D << 1, 1, HAL_MAX_DELAY) == HAL_OK) {
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	2201      	movs	r2, #1
 8001234:	213a      	movs	r1, #58	@ 0x3a
 8001236:	4883      	ldr	r0, [pc, #524]	@ (8001444 <main+0x288>)
 8001238:	f002 fd56 	bl	8003ce8 <HAL_I2C_IsDeviceReady>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d103      	bne.n	800124a <main+0x8e>
		printf("LSM303D detected at 0x1D\r\n");
 8001242:	4883      	ldr	r0, [pc, #524]	@ (8001450 <main+0x294>)
 8001244:	f006 fe68 	bl	8007f18 <puts>
 8001248:	e002      	b.n	8001250 <main+0x94>
	} else {
		printf("LSM303D NOT detected!\r\n");
 800124a:	4882      	ldr	r0, [pc, #520]	@ (8001454 <main+0x298>)
 800124c:	f006 fe64 	bl	8007f18 <puts>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		int num1 = (pitch < 10 && pitch > -10) ? 0 : pitch;
 8001250:	4b81      	ldr	r3, [pc, #516]	@ (8001458 <main+0x29c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b09      	cmp	r3, #9
 8001256:	dc04      	bgt.n	8001262 <main+0xa6>
 8001258:	4b7f      	ldr	r3, [pc, #508]	@ (8001458 <main+0x29c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f113 0f09 	cmn.w	r3, #9
 8001260:	da02      	bge.n	8001268 <main+0xac>
 8001262:	4b7d      	ldr	r3, [pc, #500]	@ (8001458 <main+0x29c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	e000      	b.n	800126a <main+0xae>
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
		int num2 = (roll < 10 && roll > -10) ? 0 : roll;
 800126c:	4b7b      	ldr	r3, [pc, #492]	@ (800145c <main+0x2a0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b09      	cmp	r3, #9
 8001272:	dc04      	bgt.n	800127e <main+0xc2>
 8001274:	4b79      	ldr	r3, [pc, #484]	@ (800145c <main+0x2a0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f113 0f09 	cmn.w	r3, #9
 800127c:	da02      	bge.n	8001284 <main+0xc8>
 800127e:	4b77      	ldr	r3, [pc, #476]	@ (800145c <main+0x2a0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	e000      	b.n	8001286 <main+0xca>
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
		int num3 = state;
 8001288:	4b75      	ldr	r3, [pc, #468]	@ (8001460 <main+0x2a4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	617b      	str	r3, [r7, #20]
		// Emergency stop logic
		if (num3 == 1) {
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d108      	bne.n	80012a6 <main+0xea>
			vol = 0.0;
 8001294:	4b73      	ldr	r3, [pc, #460]	@ (8001464 <main+0x2a8>)
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
			num1 = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
			num2 = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	e00b      	b.n	80012be <main+0x102>
			//				num1 = 0;
			//			}

			// Adjust the speed according to pitch (acceleration/deceleration)
			//printf("pitch:%d\r\n",num1);
			vol = num1 * 18;
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4613      	mov	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4413      	add	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001464 <main+0x2a8>)
 80012ba:	edc3 7a00 	vstr	s15, [r3]
		}

		// Compute turning difference based on roll
		// Higher roll gives greater difference between wheels for sharper turns
		//printf("Roll:%d\r\n",num2);
		curve_control((int)((float)num2 * 1.80f), vol);
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c8:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8001468 <main+0x2ac>
 80012cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80012d4:	4b63      	ldr	r3, [pc, #396]	@ (8001464 <main+0x2a8>)
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	eeb0 0a67 	vmov.f32	s0, s15
 80012de:	ee17 0a10 	vmov	r0, s14
 80012e2:	f000 fb97 	bl	8001a14 <curve_control>
		//	  		}
		//
		//	  		// Set PWM values to motors using existing motor control function
		//	  		set_pwm(left_pwm, right_pwm);
		//if(count == 10){
		c = 'S';
 80012e6:	4b61      	ldr	r3, [pc, #388]	@ (800146c <main+0x2b0>)
 80012e8:	2253      	movs	r2, #83	@ 0x53
 80012ea:	701a      	strb	r2, [r3, #0]
		if (vol < 0)
 80012ec:	4b5d      	ldr	r3, [pc, #372]	@ (8001464 <main+0x2a8>)
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fa:	d503      	bpl.n	8001304 <main+0x148>
			ca = '1';
 80012fc:	4b5c      	ldr	r3, [pc, #368]	@ (8001470 <main+0x2b4>)
 80012fe:	2231      	movs	r2, #49	@ 0x31
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	e002      	b.n	800130a <main+0x14e>
		else
			ca = '0';
 8001304:	4b5a      	ldr	r3, [pc, #360]	@ (8001470 <main+0x2b4>)
 8001306:	2230      	movs	r2, #48	@ 0x30
 8001308:	701a      	strb	r2, [r3, #0]

		int vol_int = floor(abs(vol));
 800130a:	4b56      	ldr	r3, [pc, #344]	@ (8001464 <main+0x2a8>)
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001314:	ee17 3a90 	vmov	r3, s15
 8001318:	2b00      	cmp	r3, #0
 800131a:	bfb8      	it	lt
 800131c:	425b      	neglt	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f908 	bl	8000534 <__aeabi_i2d>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fc1c 	bl	8000b68 <__aeabi_d2iz>
 8001330:	4603      	mov	r3, r0
 8001332:	613b      	str	r3, [r7, #16]
		int cbb = (vol_int / 1000);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4a4f      	ldr	r2, [pc, #316]	@ (8001474 <main+0x2b8>)
 8001338:	fb82 1203 	smull	r1, r2, r2, r3
 800133c:	1192      	asrs	r2, r2, #6
 800133e:	17db      	asrs	r3, r3, #31
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	60fb      	str	r3, [r7, #12]
		cb = cbb + '0';
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	3330      	adds	r3, #48	@ 0x30
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b4a      	ldr	r3, [pc, #296]	@ (8001478 <main+0x2bc>)
 800134e:	701a      	strb	r2, [r3, #0]
		int ccc = ((vol_int - cbb * 1000) / 100);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4a4a      	ldr	r2, [pc, #296]	@ (800147c <main+0x2c0>)
 8001354:	fb03 f202 	mul.w	r2, r3, r2
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4413      	add	r3, r2
 800135c:	4a48      	ldr	r2, [pc, #288]	@ (8001480 <main+0x2c4>)
 800135e:	fb82 1203 	smull	r1, r2, r2, r3
 8001362:	1152      	asrs	r2, r2, #5
 8001364:	17db      	asrs	r3, r3, #31
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	60bb      	str	r3, [r7, #8]
		cc = ccc + '0';
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	3330      	adds	r3, #48	@ 0x30
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b44      	ldr	r3, [pc, #272]	@ (8001484 <main+0x2c8>)
 8001374:	701a      	strb	r2, [r3, #0]
		int cdd = ((vol_int - cbb * 1000 - ccc * 100) / 10);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4a40      	ldr	r2, [pc, #256]	@ (800147c <main+0x2c0>)
 800137a:	fb03 f202 	mul.w	r2, r3, r2
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	441a      	add	r2, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8001388:	fb01 f303 	mul.w	r3, r1, r3
 800138c:	4413      	add	r3, r2
 800138e:	4a3e      	ldr	r2, [pc, #248]	@ (8001488 <main+0x2cc>)
 8001390:	fb82 1203 	smull	r1, r2, r2, r3
 8001394:	1092      	asrs	r2, r2, #2
 8001396:	17db      	asrs	r3, r3, #31
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	607b      	str	r3, [r7, #4]
		cd = cdd + '0';
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	3330      	adds	r3, #48	@ 0x30
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b39      	ldr	r3, [pc, #228]	@ (800148c <main+0x2d0>)
 80013a6:	701a      	strb	r2, [r3, #0]
		int cee = (vol_int - cbb * 1000 - ccc * 100 - 10 * cdd);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4a34      	ldr	r2, [pc, #208]	@ (800147c <main+0x2c0>)
 80013ac:	fb03 f202 	mul.w	r2, r3, r2
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	441a      	add	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 80013ba:	fb01 f303 	mul.w	r3, r1, r3
 80013be:	441a      	add	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f06f 0109 	mvn.w	r1, #9
 80013c6:	fb01 f303 	mul.w	r3, r1, r3
 80013ca:	4413      	add	r3, r2
 80013cc:	603b      	str	r3, [r7, #0]
		ce = cee + '0';
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	3330      	adds	r3, #48	@ 0x30
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001490 <main+0x2d4>)
 80013d8:	701a      	strb	r2, [r3, #0]

		sprintf(bt_str, "%c%c%c%c%c%c", c, ca, cb, cc, cd, ce);
 80013da:	4b24      	ldr	r3, [pc, #144]	@ (800146c <main+0x2b0>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461c      	mov	r4, r3
 80013e0:	4b23      	ldr	r3, [pc, #140]	@ (8001470 <main+0x2b4>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461d      	mov	r5, r3
 80013e6:	4b24      	ldr	r3, [pc, #144]	@ (8001478 <main+0x2bc>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b25      	ldr	r3, [pc, #148]	@ (8001484 <main+0x2c8>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <main+0x2d0>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	4b25      	ldr	r3, [pc, #148]	@ (8001490 <main+0x2d4>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	9303      	str	r3, [sp, #12]
 80013fe:	9002      	str	r0, [sp, #8]
 8001400:	9101      	str	r1, [sp, #4]
 8001402:	9200      	str	r2, [sp, #0]
 8001404:	462b      	mov	r3, r5
 8001406:	4622      	mov	r2, r4
 8001408:	4922      	ldr	r1, [pc, #136]	@ (8001494 <main+0x2d8>)
 800140a:	4823      	ldr	r0, [pc, #140]	@ (8001498 <main+0x2dc>)
 800140c:	f006 fd8c 	bl	8007f28 <siprintf>
		//printf("%c%c%c%c%c%c\r\n",c,ca,cb,cc,cd,ce);

		count = 0;
 8001410:	4b22      	ldr	r3, [pc, #136]	@ (800149c <main+0x2e0>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
		BT_Transmit(bt_str);
 8001416:	4820      	ldr	r0, [pc, #128]	@ (8001498 <main+0x2dc>)
 8001418:	f000 fd7a 	bl	8001f10 <BT_Transmit>
		//}
		//count++;
		// Delay to maintain loop responsiveness (e.g., 10 ms per loop)
		HAL_Delay(10);  // Keep loop responsive
 800141c:	200a      	movs	r0, #10
 800141e:	f001 f91d 	bl	800265c <HAL_Delay>
		if (num3 == 1)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2b01      	cmp	r3, #1
 8001426:	f47f af13 	bne.w	8001250 <main+0x94>
			HAL_Delay(1000);
 800142a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800142e:	f001 f915 	bl	800265c <HAL_Delay>
	while (1) {
 8001432:	e70d      	b.n	8001250 <main+0x94>
 8001434:	20000244 	.word	0x20000244
 8001438:	2000028c 	.word	0x2000028c
 800143c:	200003e0 	.word	0x200003e0
 8001440:	200002d4 	.word	0x200002d4
 8001444:	200001f0 	.word	0x200001f0
 8001448:	0800b824 	.word	0x0800b824
 800144c:	0800b840 	.word	0x0800b840
 8001450:	0800b858 	.word	0x0800b858
 8001454:	0800b874 	.word	0x0800b874
 8001458:	200003c8 	.word	0x200003c8
 800145c:	200003cc 	.word	0x200003cc
 8001460:	200003d0 	.word	0x200003d0
 8001464:	200003c4 	.word	0x200003c4
 8001468:	3fe66666 	.word	0x3fe66666
 800146c:	200003d9 	.word	0x200003d9
 8001470:	200003d4 	.word	0x200003d4
 8001474:	10624dd3 	.word	0x10624dd3
 8001478:	200003d5 	.word	0x200003d5
 800147c:	fffffc18 	.word	0xfffffc18
 8001480:	51eb851f 	.word	0x51eb851f
 8001484:	200003d6 	.word	0x200003d6
 8001488:	66666667 	.word	0x66666667
 800148c:	200003d7 	.word	0x200003d7
 8001490:	200003d8 	.word	0x200003d8
 8001494:	0800b88c 	.word	0x0800b88c
 8001498:	200003ec 	.word	0x200003ec
 800149c:	200003dc 	.word	0x200003dc

080014a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	@ 0x50
 80014a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	2230      	movs	r2, #48	@ 0x30
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f006 fe34 	bl	800811c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	4b28      	ldr	r3, [pc, #160]	@ (800156c <SystemClock_Config+0xcc>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014cc:	4a27      	ldr	r2, [pc, #156]	@ (800156c <SystemClock_Config+0xcc>)
 80014ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d4:	4b25      	ldr	r3, [pc, #148]	@ (800156c <SystemClock_Config+0xcc>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <SystemClock_Config+0xd0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a21      	ldr	r2, [pc, #132]	@ (8001570 <SystemClock_Config+0xd0>)
 80014ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <SystemClock_Config+0xd0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014fc:	2302      	movs	r3, #2
 80014fe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001500:	2301      	movs	r3, #1
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001504:	2310      	movs	r3, #16
 8001506:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001508:	2302      	movs	r3, #2
 800150a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800150c:	2300      	movs	r3, #0
 800150e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001510:	2310      	movs	r3, #16
 8001512:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001514:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001518:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800151a:	2304      	movs	r3, #4
 800151c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800151e:	2304      	movs	r3, #4
 8001520:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001522:	f107 0320 	add.w	r3, r7, #32
 8001526:	4618      	mov	r0, r3
 8001528:	f003 f8c0 	bl	80046ac <HAL_RCC_OscConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x96>
		Error_Handler();
 8001532:	f000 fd15 	bl	8001f60 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001536:	230f      	movs	r3, #15
 8001538:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153a:	2302      	movs	r3, #2
 800153c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800153e:	2390      	movs	r3, #144	@ 0x90
 8001540:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001542:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001546:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fb22 	bl	8004b9c <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xc2>
		Error_Handler();
 800155e:	f000 fcff 	bl	8001f60 <Error_Handler>
	}
}
 8001562:	bf00      	nop
 8001564:	3750      	adds	r7, #80	@ 0x50
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000

08001574 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001578:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <MX_I2C1_Init+0x50>)
 800157a:	4a13      	ldr	r2, [pc, #76]	@ (80015c8 <MX_I2C1_Init+0x54>)
 800157c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800157e:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <MX_I2C1_Init+0x50>)
 8001580:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <MX_I2C1_Init+0x58>)
 8001582:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001590:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <MX_I2C1_Init+0x50>)
 8001592:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001596:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001598:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800159e:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a4:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <MX_I2C1_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <MX_I2C1_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80015b0:	4804      	ldr	r0, [pc, #16]	@ (80015c4 <MX_I2C1_Init+0x50>)
 80015b2:	f001 ff29 	bl	8003408 <HAL_I2C_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80015bc:	f000 fcd0 	bl	8001f60 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200001f0 	.word	0x200001f0
 80015c8:	40005400 	.word	0x40005400
 80015cc:	00061a80 	.word	0x00061a80

080015d0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08e      	sub	sp, #56	@ 0x38
 80015d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80015d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015e4:	f107 0320 	add.w	r3, r7, #32
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
 80015fc:	615a      	str	r2, [r3, #20]
 80015fe:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001600:	4b38      	ldr	r3, [pc, #224]	@ (80016e4 <MX_TIM3_Init+0x114>)
 8001602:	4a39      	ldr	r2, [pc, #228]	@ (80016e8 <MX_TIM3_Init+0x118>)
 8001604:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84;
 8001606:	4b37      	ldr	r3, [pc, #220]	@ (80016e4 <MX_TIM3_Init+0x114>)
 8001608:	2254      	movs	r2, #84	@ 0x54
 800160a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b35      	ldr	r3, [pc, #212]	@ (80016e4 <MX_TIM3_Init+0x114>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 8001612:	4b34      	ldr	r3, [pc, #208]	@ (80016e4 <MX_TIM3_Init+0x114>)
 8001614:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001618:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	4b32      	ldr	r3, [pc, #200]	@ (80016e4 <MX_TIM3_Init+0x114>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001620:	4b30      	ldr	r3, [pc, #192]	@ (80016e4 <MX_TIM3_Init+0x114>)
 8001622:	2280      	movs	r2, #128	@ 0x80
 8001624:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001626:	482f      	ldr	r0, [pc, #188]	@ (80016e4 <MX_TIM3_Init+0x114>)
 8001628:	f003 fcd8 	bl	8004fdc <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM3_Init+0x66>
		Error_Handler();
 8001632:	f000 fc95 	bl	8001f60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800163a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800163c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001640:	4619      	mov	r1, r3
 8001642:	4828      	ldr	r0, [pc, #160]	@ (80016e4 <MX_TIM3_Init+0x114>)
 8001644:	f003 fee4 	bl	8005410 <HAL_TIM_ConfigClockSource>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM3_Init+0x82>
		Error_Handler();
 800164e:	f000 fc87 	bl	8001f60 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001652:	4824      	ldr	r0, [pc, #144]	@ (80016e4 <MX_TIM3_Init+0x114>)
 8001654:	f003 fd11 	bl	800507a <HAL_TIM_PWM_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0x92>
		Error_Handler();
 800165e:	f000 fc7f 	bl	8001f60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	4619      	mov	r1, r3
 8001670:	481c      	ldr	r0, [pc, #112]	@ (80016e4 <MX_TIM3_Init+0x114>)
 8001672:	f004 fa6d 	bl	8005b50 <HAL_TIMEx_MasterConfigSynchronization>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 800167c:	f000 fc70 	bl	8001f60 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001680:	2360      	movs	r3, #96	@ 0x60
 8001682:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	2204      	movs	r2, #4
 8001694:	4619      	mov	r1, r3
 8001696:	4813      	ldr	r0, [pc, #76]	@ (80016e4 <MX_TIM3_Init+0x114>)
 8001698:	f003 fdf8 	bl	800528c <HAL_TIM_PWM_ConfigChannel>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80016a2:	f000 fc5d 	bl	8001f60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a6:	2360      	movs	r3, #96	@ 0x60
 80016a8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2204      	movs	r2, #4
 80016ba:	4619      	mov	r1, r3
 80016bc:	4809      	ldr	r0, [pc, #36]	@ (80016e4 <MX_TIM3_Init+0x114>)
 80016be:	f003 fde5 	bl	800528c <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM3_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 80016c8:	f000 fc4a 	bl	8001f60 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016cc:	2104      	movs	r1, #4
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <MX_TIM3_Init+0x114>)
 80016d0:	f003 fd2c 	bl	800512c <HAL_TIM_PWM_Start>
	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80016d4:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <MX_TIM3_Init+0x114>)
 80016d6:	f000 fcf1 	bl	80020bc <HAL_TIM_MspPostInit>

}
 80016da:	bf00      	nop
 80016dc:	3738      	adds	r7, #56	@ 0x38
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000244 	.word	0x20000244
 80016e8:	40000400 	.word	0x40000400

080016ec <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08e      	sub	sp, #56	@ 0x38
 80016f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001700:	f107 0320 	add.w	r3, r7, #32
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	615a      	str	r2, [r3, #20]
 800171a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800171c:	4b38      	ldr	r3, [pc, #224]	@ (8001800 <MX_TIM4_Init+0x114>)
 800171e:	4a39      	ldr	r2, [pc, #228]	@ (8001804 <MX_TIM4_Init+0x118>)
 8001720:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 84;
 8001722:	4b37      	ldr	r3, [pc, #220]	@ (8001800 <MX_TIM4_Init+0x114>)
 8001724:	2254      	movs	r2, #84	@ 0x54
 8001726:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001728:	4b35      	ldr	r3, [pc, #212]	@ (8001800 <MX_TIM4_Init+0x114>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1000;
 800172e:	4b34      	ldr	r3, [pc, #208]	@ (8001800 <MX_TIM4_Init+0x114>)
 8001730:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001734:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001736:	4b32      	ldr	r3, [pc, #200]	@ (8001800 <MX_TIM4_Init+0x114>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800173c:	4b30      	ldr	r3, [pc, #192]	@ (8001800 <MX_TIM4_Init+0x114>)
 800173e:	2280      	movs	r2, #128	@ 0x80
 8001740:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001742:	482f      	ldr	r0, [pc, #188]	@ (8001800 <MX_TIM4_Init+0x114>)
 8001744:	f003 fc4a 	bl	8004fdc <HAL_TIM_Base_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM4_Init+0x66>
		Error_Handler();
 800174e:	f000 fc07 	bl	8001f60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001752:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001756:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001758:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800175c:	4619      	mov	r1, r3
 800175e:	4828      	ldr	r0, [pc, #160]	@ (8001800 <MX_TIM4_Init+0x114>)
 8001760:	f003 fe56 	bl	8005410 <HAL_TIM_ConfigClockSource>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM4_Init+0x82>
		Error_Handler();
 800176a:	f000 fbf9 	bl	8001f60 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 800176e:	4824      	ldr	r0, [pc, #144]	@ (8001800 <MX_TIM4_Init+0x114>)
 8001770:	f003 fc83 	bl	800507a <HAL_TIM_PWM_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM4_Init+0x92>
		Error_Handler();
 800177a:	f000 fbf1 	bl	8001f60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001786:	f107 0320 	add.w	r3, r7, #32
 800178a:	4619      	mov	r1, r3
 800178c:	481c      	ldr	r0, [pc, #112]	@ (8001800 <MX_TIM4_Init+0x114>)
 800178e:	f004 f9df 	bl	8005b50 <HAL_TIMEx_MasterConfigSynchronization>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001798:	f000 fbe2 	bl	8001f60 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800179c:	2360      	movs	r3, #96	@ 0x60
 800179e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	4619      	mov	r1, r3
 80017b2:	4813      	ldr	r0, [pc, #76]	@ (8001800 <MX_TIM4_Init+0x114>)
 80017b4:	f003 fd6a 	bl	800528c <HAL_TIM_PWM_ConfigChannel>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80017be:	f000 fbcf 	bl	8001f60 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c2:	2360      	movs	r3, #96	@ 0x60
 80017c4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2200      	movs	r2, #0
 80017d6:	4619      	mov	r1, r3
 80017d8:	4809      	ldr	r0, [pc, #36]	@ (8001800 <MX_TIM4_Init+0x114>)
 80017da:	f003 fd57 	bl	800528c <HAL_TIM_PWM_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM4_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 80017e4:	f000 fbbc 	bl	8001f60 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80017e8:	2100      	movs	r1, #0
 80017ea:	4805      	ldr	r0, [pc, #20]	@ (8001800 <MX_TIM4_Init+0x114>)
 80017ec:	f003 fc9e 	bl	800512c <HAL_TIM_PWM_Start>
	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 80017f0:	4803      	ldr	r0, [pc, #12]	@ (8001800 <MX_TIM4_Init+0x114>)
 80017f2:	f000 fc63 	bl	80020bc <HAL_TIM_MspPostInit>

}
 80017f6:	bf00      	nop
 80017f8:	3738      	adds	r7, #56	@ 0x38
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000028c 	.word	0x2000028c
 8001804:	40000800 	.word	0x40000800

08001808 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800180c:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 800180e:	4a12      	ldr	r2, [pc, #72]	@ (8001858 <MX_USART1_UART_Init+0x50>)
 8001810:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001812:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 8001814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001818:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001820:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001826:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800182c:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 800182e:	220c      	movs	r2, #12
 8001830:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001832:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800183e:	4805      	ldr	r0, [pc, #20]	@ (8001854 <MX_USART1_UART_Init+0x4c>)
 8001840:	f004 f9f4 	bl	8005c2c <HAL_UART_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800184a:	f000 fb89 	bl	8001f60 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200002d4 	.word	0x200002d4
 8001858:	40011000 	.word	0x40011000

0800185c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001862:	4a12      	ldr	r2, [pc, #72]	@ (80018ac <MX_USART2_UART_Init+0x50>)
 8001864:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001866:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800186c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800186e:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001874:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001880:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001882:	220c      	movs	r2, #12
 8001884:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001886:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001892:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <MX_USART2_UART_Init+0x4c>)
 8001894:	f004 f9ca 	bl	8005c2c <HAL_UART_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800189e:	f000 fb5f 	bl	8001f60 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	2000031c 	.word	0x2000031c
 80018ac:	40004400 	.word	0x40004400

080018b0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <MX_DMA_Init+0x3c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a0b      	ldr	r2, [pc, #44]	@ (80018ec <MX_DMA_Init+0x3c>)
 80018c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <MX_DMA_Init+0x3c>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	203a      	movs	r0, #58	@ 0x3a
 80018d8:	f000 ffbf 	bl	800285a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80018dc:	203a      	movs	r0, #58	@ 0x3a
 80018de:	f000 ffd8 	bl	8002892 <HAL_NVIC_EnableIRQ>

}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800

080018f0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	@ 0x28
 80018f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a04 <MX_GPIO_Init+0x114>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a04 <MX_GPIO_Init+0x114>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b3b      	ldr	r3, [pc, #236]	@ (8001a04 <MX_GPIO_Init+0x114>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b37      	ldr	r3, [pc, #220]	@ (8001a04 <MX_GPIO_Init+0x114>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a36      	ldr	r2, [pc, #216]	@ (8001a04 <MX_GPIO_Init+0x114>)
 800192c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b34      	ldr	r3, [pc, #208]	@ (8001a04 <MX_GPIO_Init+0x114>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b30      	ldr	r3, [pc, #192]	@ (8001a04 <MX_GPIO_Init+0x114>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a2f      	ldr	r2, [pc, #188]	@ (8001a04 <MX_GPIO_Init+0x114>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a04 <MX_GPIO_Init+0x114>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b29      	ldr	r3, [pc, #164]	@ (8001a04 <MX_GPIO_Init+0x114>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a28      	ldr	r2, [pc, #160]	@ (8001a04 <MX_GPIO_Init+0x114>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b26      	ldr	r3, [pc, #152]	@ (8001a04 <MX_GPIO_Init+0x114>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800197c:	4822      	ldr	r0, [pc, #136]	@ (8001a08 <MX_GPIO_Init+0x118>)
 800197e:	f001 fd29 	bl	80033d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001982:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001986:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001988:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800198c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	481c      	ldr	r0, [pc, #112]	@ (8001a0c <MX_GPIO_Init+0x11c>)
 800199a:	f001 fb97 	bl	80030cc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA8 PA9 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_8 | GPIO_PIN_9;
 800199e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80019a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a4:	2301      	movs	r3, #1
 80019a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	4814      	ldr	r0, [pc, #80]	@ (8001a08 <MX_GPIO_Init+0x118>)
 80019b8:	f001 fb88 	bl	80030cc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	// TIM3_CH2 -> PC7
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019bc:	2380      	movs	r3, #128	@ 0x80
 80019be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019cc:	2302      	movs	r3, #2
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	480d      	ldr	r0, [pc, #52]	@ (8001a0c <MX_GPIO_Init+0x11c>)
 80019d8:	f001 fb78 	bl	80030cc <HAL_GPIO_Init>

	// TIM4_CH1 -> PB6
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019dc:	2340      	movs	r3, #64	@ 0x40
 80019de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019ec:	2302      	movs	r3, #2
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	4806      	ldr	r0, [pc, #24]	@ (8001a10 <MX_GPIO_Init+0x120>)
 80019f8:	f001 fb68 	bl	80030cc <HAL_GPIO_Init>
	/* USER CODE END MX_GPIO_Init_2 */
}
 80019fc:	bf00      	nop
 80019fe:	3728      	adds	r7, #40	@ 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40020400 	.word	0x40020400

08001a14 <curve_control>:
void motor_stop(void) {
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); //		RIGHT VAL	PC7		D9	Pin 9
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0); // 		LEFT VAL	PB6		D10	Pin10
}

void curve_control(int target_gz, float signed_speed) {
 8001a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a18:	b09e      	sub	sp, #120	@ 0x78
 8001a1a:	af0a      	add	r7, sp, #40	@ 0x28
 8001a1c:	6178      	str	r0, [r7, #20]
 8001a1e:	ed87 0a04 	vstr	s0, [r7, #16]
	static float previous_error = 0.0f;
	static float gz_filtered = 0.0f;
	static uint32_t last_time = 0;

	float gx, gy, gz;
	read_gyroscope(&gx, &gy, &gz);
 8001a22:	f107 0218 	add.w	r2, r7, #24
 8001a26:	f107 011c 	add.w	r1, r7, #28
 8001a2a:	f107 0320 	add.w	r3, r7, #32
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f904 	bl	8001c3c <read_gyroscope>

	gz_filtered = 0.9f * gz_filtered + 0.1f * gz;
 8001a34:	4b72      	ldr	r3, [pc, #456]	@ (8001c00 <curve_control+0x1ec>)
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8001c04 <curve_control+0x1f0>
 8001a3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a42:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a46:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8001c08 <curve_control+0x1f4>
 8001a4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a52:	4b6b      	ldr	r3, [pc, #428]	@ (8001c00 <curve_control+0x1ec>)
 8001a54:	edc3 7a00 	vstr	s15, [r3]

	uint32_t now = HAL_GetTick();
 8001a58:	f000 fdf4 	bl	8002644 <HAL_GetTick>
 8001a5c:	6478      	str	r0, [r7, #68]	@ 0x44
	float dt = (now - last_time) / 1000.0f;
 8001a5e:	4b6b      	ldr	r3, [pc, #428]	@ (8001c0c <curve_control+0x1f8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a6e:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8001c10 <curve_control+0x1fc>
 8001a72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a76:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	if (dt < 0.01f)
 8001a7a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001a7e:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8001c14 <curve_control+0x200>
 8001a82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8a:	d501      	bpl.n	8001a90 <curve_control+0x7c>
		dt = 0.01f;
 8001a8c:	4b62      	ldr	r3, [pc, #392]	@ (8001c18 <curve_control+0x204>)
 8001a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	last_time = now;
 8001a90:	4a5e      	ldr	r2, [pc, #376]	@ (8001c0c <curve_control+0x1f8>)
 8001a92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a94:	6013      	str	r3, [r2, #0]

	float error = target_gz - gz_filtered;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa0:	4b57      	ldr	r3, [pc, #348]	@ (8001c00 <curve_control+0x1ec>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aaa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	integral += error * dt;
 8001aae:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001ab2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aba:	4b58      	ldr	r3, [pc, #352]	@ (8001c1c <curve_control+0x208>)
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac4:	4b55      	ldr	r3, [pc, #340]	@ (8001c1c <curve_control+0x208>)
 8001ac6:	edc3 7a00 	vstr	s15, [r3]
	float derivative = (error - previous_error) / dt;
 8001aca:	4b55      	ldr	r3, [pc, #340]	@ (8001c20 <curve_control+0x20c>)
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001ad4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ad8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ae0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	previous_error = error;
 8001ae4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c20 <curve_control+0x20c>)
 8001ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ae8:	6013      	str	r3, [r2, #0]

	float Kp = 9.0f, Ki = 0.0f, Kd = 0.05f;
 8001aea:	4b4e      	ldr	r3, [pc, #312]	@ (8001c24 <curve_control+0x210>)
 8001aec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001af4:	4b4c      	ldr	r3, [pc, #304]	@ (8001c28 <curve_control+0x214>)
 8001af6:	633b      	str	r3, [r7, #48]	@ 0x30
	float control = Kp * error + Ki * integral + Kd * derivative;
 8001af8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001afc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001b00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b04:	4b45      	ldr	r3, [pc, #276]	@ (8001c1c <curve_control+0x208>)
 8001b06:	edd3 6a00 	vldr	s13, [r3]
 8001b0a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b16:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001b1a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b26:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	float delta_pwm = control;
 8001b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
	//printf("delta_pwm %d \r\n",delta_pwm);
	if (delta_pwm > 1000.0)
 8001b2e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b32:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001c10 <curve_control+0x1fc>
 8001b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3e:	dd01      	ble.n	8001b44 <curve_control+0x130>
		delta_pwm = 1000.0;
 8001b40:	4b3a      	ldr	r3, [pc, #232]	@ (8001c2c <curve_control+0x218>)
 8001b42:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (delta_pwm < -1000.0)
 8001b44:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b48:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001c30 <curve_control+0x21c>
 8001b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	d501      	bpl.n	8001b5a <curve_control+0x146>
		delta_pwm = -1000.0;
 8001b56:	4b37      	ldr	r3, [pc, #220]	@ (8001c34 <curve_control+0x220>)
 8001b58:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (target_gz == 0)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <curve_control+0x152>
		delta_pwm = 0;
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	64bb      	str	r3, [r7, #72]	@ 0x48
	float left_pwm = signed_speed - delta_pwm;
 8001b66:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b6a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b72:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float right_pwm = signed_speed + delta_pwm;
 8001b76:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b7a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b82:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	set_pwm(left_pwm, right_pwm);
 8001b86:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8001b8a:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001b8e:	f000 f94d 	bl	8001e2c <set_pwm>

	printf("[CurveCtrl] gz=%.2f, err=%.2f, dt=%.3f, Δ=%.2f, L=%.2f, R=%.2f\r\n",
 8001b92:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <curve_control+0x1ec>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fcde 	bl	8000558 <__aeabi_f2d>
 8001b9c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ba0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001ba2:	f7fe fcd9 	bl	8000558 <__aeabi_f2d>
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	460d      	mov	r5, r1
 8001baa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001bac:	f7fe fcd4 	bl	8000558 <__aeabi_f2d>
 8001bb0:	4680      	mov	r8, r0
 8001bb2:	4689      	mov	r9, r1
 8001bb4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001bb6:	f7fe fccf 	bl	8000558 <__aeabi_f2d>
 8001bba:	4682      	mov	sl, r0
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001bc0:	f7fe fcca 	bl	8000558 <__aeabi_f2d>
 8001bc4:	e9c7 0100 	strd	r0, r1, [r7]
 8001bc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001bca:	f7fe fcc5 	bl	8000558 <__aeabi_f2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001bd6:	ed97 7b00 	vldr	d7, [r7]
 8001bda:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001bde:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001be2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001be6:	e9cd 4500 	strd	r4, r5, [sp]
 8001bea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bee:	4812      	ldr	r0, [pc, #72]	@ (8001c38 <curve_control+0x224>)
 8001bf0:	f006 f92a 	bl	8007e48 <iprintf>
			gz_filtered, error, dt, delta_pwm, left_pwm, right_pwm);
}
 8001bf4:	bf00      	nop
 8001bf6:	3750      	adds	r7, #80	@ 0x50
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bfe:	bf00      	nop
 8001c00:	200003f4 	.word	0x200003f4
 8001c04:	3f666666 	.word	0x3f666666
 8001c08:	3dcccccd 	.word	0x3dcccccd
 8001c0c:	200003f8 	.word	0x200003f8
 8001c10:	447a0000 	.word	0x447a0000
 8001c14:	3c23d70a 	.word	0x3c23d70a
 8001c18:	3c23d70a 	.word	0x3c23d70a
 8001c1c:	200003fc 	.word	0x200003fc
 8001c20:	20000400 	.word	0x20000400
 8001c24:	41100000 	.word	0x41100000
 8001c28:	3d4ccccd 	.word	0x3d4ccccd
 8001c2c:	447a0000 	.word	0x447a0000
 8001c30:	c47a0000 	.word	0xc47a0000
 8001c34:	c47a0000 	.word	0xc47a0000
 8001c38:	0800b89c 	.word	0x0800b89c

08001c3c <read_gyroscope>:
	*ax = raw_ax / 16384.0f; // assuming ±2g range
	*ay = raw_ay / 16384.0f;
	*az = raw_az / 16384.0f;
}

void read_gyroscope(float *gx, float *gy, float *gz) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08c      	sub	sp, #48	@ 0x30
 8001c40:	af04      	add	r7, sp, #16
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
	uint8_t reg = 0x28 | 0x80;
 8001c48:	23a8      	movs	r3, #168	@ 0xa8
 8001c4a:	77fb      	strb	r3, [r7, #31]
	uint8_t data[6] = { 0 };
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	809a      	strh	r2, [r3, #4]

	if (HAL_I2C_Mem_Read(&hi2c1, 0x6B << 1, reg, I2C_MEMADD_SIZE_8BIT, data, 6,
 8001c56:	7ffb      	ldrb	r3, [r7, #31]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	2306      	movs	r3, #6
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	f107 0310 	add.w	r3, r7, #16
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	21d6      	movs	r1, #214	@ 0xd6
 8001c6e:	482a      	ldr	r0, [pc, #168]	@ (8001d18 <read_gyroscope+0xdc>)
 8001c70:	f001 fe08 	bl	8003884 <HAL_I2C_Mem_Read>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00c      	beq.n	8001c94 <read_gyroscope+0x58>
	HAL_MAX_DELAY) != HAL_OK) {
		//printf("Gyro read failed\r\n");
		*gx = *gy = *gz = 0.0f;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e03e      	b.n	8001d12 <read_gyroscope+0xd6>
		return;
	}

	int16_t raw_gx = (int16_t) (data[1] << 8 | data[0]);
 8001c94:	7c7b      	ldrb	r3, [r7, #17]
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	7c3b      	ldrb	r3, [r7, #16]
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	83bb      	strh	r3, [r7, #28]
	int16_t raw_gy = (int16_t) (data[3] << 8 | data[2]);
 8001ca4:	7cfb      	ldrb	r3, [r7, #19]
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	b21a      	sxth	r2, r3
 8001cac:	7cbb      	ldrb	r3, [r7, #18]
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	837b      	strh	r3, [r7, #26]
	int16_t raw_gz = (int16_t) (data[5] << 8 | data[4]);
 8001cb4:	7d7b      	ldrb	r3, [r7, #21]
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	7d3b      	ldrb	r3, [r7, #20]
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	833b      	strh	r3, [r7, #24]

	*gx = raw_gx / 131.0f; // assuming ±250 dps range
 8001cc4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cc8:	ee07 3a90 	vmov	s15, r3
 8001ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cd0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001d1c <read_gyroscope+0xe0>
 8001cd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	edc3 7a00 	vstr	s15, [r3]
	*gy = raw_gy / 131.0f;
 8001cde:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cea:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001d1c <read_gyroscope+0xe0>
 8001cee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	edc3 7a00 	vstr	s15, [r3]
	*gz = raw_gz / 131.0f;
 8001cf8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001cfc:	ee07 3a90 	vmov	s15, r3
 8001d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d04:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001d1c <read_gyroscope+0xe0>
 8001d08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	edc3 7a00 	vstr	s15, [r3]
}
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200001f0 	.word	0x200001f0
 8001d1c:	43030000 	.word	0x43030000

08001d20 <init_magnetometer>:
	*mx = raw_mx * 0.080f; // assuming ±4 Gauss (80 mG/LSB)
	*my = raw_my * 0.080f;
	*mz = raw_mz * 0.080f;
}

void init_magnetometer(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af04      	add	r7, sp, #16
	// CTRL5 (0x24): Enable temperature, set resolution, 6.25Hz output rate
	uint8_t ctrl5 = 0x94;  // 1001 0100
 8001d26:	2394      	movs	r3, #148	@ 0x94
 8001d28:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x1D << 1, 0x24, 1, &ctrl5, 1, HAL_MAX_DELAY);
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	9302      	str	r3, [sp, #8]
 8001d30:	2301      	movs	r3, #1
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	1dfb      	adds	r3, r7, #7
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	2224      	movs	r2, #36	@ 0x24
 8001d3c:	213a      	movs	r1, #58	@ 0x3a
 8001d3e:	4812      	ldr	r0, [pc, #72]	@ (8001d88 <init_magnetometer+0x68>)
 8001d40:	f001 fca6 	bl	8003690 <HAL_I2C_Mem_Write>

	// CTRL6 (0x25): ±4 gauss range
	uint8_t ctrl6 = 0x00;
 8001d44:	2300      	movs	r3, #0
 8001d46:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, 0x1D << 1, 0x25, 1, &ctrl6, 1, HAL_MAX_DELAY);
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	1dbb      	adds	r3, r7, #6
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2301      	movs	r3, #1
 8001d58:	2225      	movs	r2, #37	@ 0x25
 8001d5a:	213a      	movs	r1, #58	@ 0x3a
 8001d5c:	480a      	ldr	r0, [pc, #40]	@ (8001d88 <init_magnetometer+0x68>)
 8001d5e:	f001 fc97 	bl	8003690 <HAL_I2C_Mem_Write>

	// CTRL7 (0x26): Continuous conversion mode
	uint8_t ctrl7 = 0x00;
 8001d62:	2300      	movs	r3, #0
 8001d64:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0x1D << 1, 0x26, 1, &ctrl7, 1, HAL_MAX_DELAY);
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	1d7b      	adds	r3, r7, #5
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2301      	movs	r3, #1
 8001d76:	2226      	movs	r2, #38	@ 0x26
 8001d78:	213a      	movs	r1, #58	@ 0x3a
 8001d7a:	4803      	ldr	r0, [pc, #12]	@ (8001d88 <init_magnetometer+0x68>)
 8001d7c:	f001 fc88 	bl	8003690 <HAL_I2C_Mem_Write>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200001f0 	.word	0x200001f0

08001d8c <init_accelerometer>:

void init_accelerometer(void) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af04      	add	r7, sp, #16
	// CTRL1 (0x20): 0x57 = 0b01010111 => 50Hz, all axes enabled
	uint8_t ctrl1 = 0x57;
 8001d92:	2357      	movs	r3, #87	@ 0x57
 8001d94:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x1D << 1, 0x20, 1, &ctrl1, 1, HAL_MAX_DELAY);
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	9302      	str	r3, [sp, #8]
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	1dfb      	adds	r3, r7, #7
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	2301      	movs	r3, #1
 8001da6:	2220      	movs	r2, #32
 8001da8:	213a      	movs	r1, #58	@ 0x3a
 8001daa:	480b      	ldr	r0, [pc, #44]	@ (8001dd8 <init_accelerometer+0x4c>)
 8001dac:	f001 fc70 	bl	8003690 <HAL_I2C_Mem_Write>

	// CTRL2 (0x21): 0x00 = ±2g, default anti-alias filter
	uint8_t ctrl2 = 0x00;
 8001db0:	2300      	movs	r3, #0
 8001db2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, 0x1D << 1, 0x21, 1, &ctrl2, 1, HAL_MAX_DELAY);
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	9302      	str	r3, [sp, #8]
 8001dba:	2301      	movs	r3, #1
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	1dbb      	adds	r3, r7, #6
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	2221      	movs	r2, #33	@ 0x21
 8001dc6:	213a      	movs	r1, #58	@ 0x3a
 8001dc8:	4803      	ldr	r0, [pc, #12]	@ (8001dd8 <init_accelerometer+0x4c>)
 8001dca:	f001 fc61 	bl	8003690 <HAL_I2C_Mem_Write>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200001f0 	.word	0x200001f0

08001ddc <init_gyroscope>:

void init_gyroscope(void) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af04      	add	r7, sp, #16
	// CTRL1 (0x20): 0x0F = Normal mode, all axes enabled, 95 Hz ODR
	uint8_t ctrl1 = 0x0F;
 8001de2:	230f      	movs	r3, #15
 8001de4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, 0x6B << 1, 0x20, 1, &ctrl1, 1, HAL_MAX_DELAY);
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dea:	9302      	str	r3, [sp, #8]
 8001dec:	2301      	movs	r3, #1
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	1dfb      	adds	r3, r7, #7
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	2301      	movs	r3, #1
 8001df6:	2220      	movs	r2, #32
 8001df8:	21d6      	movs	r1, #214	@ 0xd6
 8001dfa:	480b      	ldr	r0, [pc, #44]	@ (8001e28 <init_gyroscope+0x4c>)
 8001dfc:	f001 fc48 	bl	8003690 <HAL_I2C_Mem_Write>

	// CTRL4 (0x23): 0x00 = 250 dps (default)
	uint8_t ctrl4 = 0x00;
 8001e00:	2300      	movs	r3, #0
 8001e02:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, 0x6B << 1, 0x23, 1, &ctrl4, 1, HAL_MAX_DELAY);
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295
 8001e08:	9302      	str	r3, [sp, #8]
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	1dbb      	adds	r3, r7, #6
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2301      	movs	r3, #1
 8001e14:	2223      	movs	r2, #35	@ 0x23
 8001e16:	21d6      	movs	r1, #214	@ 0xd6
 8001e18:	4803      	ldr	r0, [pc, #12]	@ (8001e28 <init_gyroscope+0x4c>)
 8001e1a:	f001 fc39 	bl	8003690 <HAL_I2C_Mem_Write>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200001f0 	.word	0x200001f0

08001e2c <set_pwm>:

void set_pwm(float left_pwm, float right_pwm) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e36:	edc7 0a00 	vstr	s1, [r7]
	// LEFT motor
	if (left_pwm >= 0) {
 8001e3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e46:	db06      	blt.n	8001e56 <set_pwm+0x2a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);  // Forward
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e4e:	482b      	ldr	r0, [pc, #172]	@ (8001efc <set_pwm+0xd0>)
 8001e50:	f001 fac0 	bl	80033d4 <HAL_GPIO_WritePin>
 8001e54:	e00b      	b.n	8001e6e <set_pwm+0x42>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);    // Backward
 8001e56:	2201      	movs	r2, #1
 8001e58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e5c:	4827      	ldr	r0, [pc, #156]	@ (8001efc <set_pwm+0xd0>)
 8001e5e:	f001 fab9 	bl	80033d4 <HAL_GPIO_WritePin>
		left_pwm = -left_pwm;
 8001e62:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e66:	eef1 7a67 	vneg.f32	s15, s15
 8001e6a:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	// RIGHT motor
	if (right_pwm >= 0) {
 8001e6e:	edd7 7a00 	vldr	s15, [r7]
 8001e72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7a:	db06      	blt.n	8001e8a <set_pwm+0x5e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);  // Forward
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e82:	481e      	ldr	r0, [pc, #120]	@ (8001efc <set_pwm+0xd0>)
 8001e84:	f001 faa6 	bl	80033d4 <HAL_GPIO_WritePin>
 8001e88:	e00b      	b.n	8001ea2 <set_pwm+0x76>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);    // Backward
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e90:	481a      	ldr	r0, [pc, #104]	@ (8001efc <set_pwm+0xd0>)
 8001e92:	f001 fa9f 	bl	80033d4 <HAL_GPIO_WritePin>
		right_pwm = -right_pwm;
 8001e96:	edd7 7a00 	vldr	s15, [r7]
 8001e9a:	eef1 7a67 	vneg.f32	s15, s15
 8001e9e:	edc7 7a00 	vstr	s15, [r7]
	}

	// Clamp values
	if (left_pwm > 1000)
 8001ea2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea6:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001f00 <set_pwm+0xd4>
 8001eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb2:	dd01      	ble.n	8001eb8 <set_pwm+0x8c>
		left_pwm = 1000;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <set_pwm+0xd8>)
 8001eb6:	607b      	str	r3, [r7, #4]
	if (right_pwm > 1000)
 8001eb8:	edd7 7a00 	vldr	s15, [r7]
 8001ebc:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001f00 <set_pwm+0xd4>
 8001ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec8:	dd01      	ble.n	8001ece <set_pwm+0xa2>
		right_pwm = 1000;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <set_pwm+0xd8>)
 8001ecc:	603b      	str	r3, [r7, #0]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, left_pwm / 1); // LEFT (TIM4_CH1)
 8001ece:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <set_pwm+0xdc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eda:	ee17 2a90 	vmov	r2, s15
 8001ede:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, right_pwm / 1); // RIGHT (TIM3_CH2)
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <set_pwm+0xe0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	edd7 7a00 	vldr	s15, [r7]
 8001ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eec:	ee17 2a90 	vmov	r2, s15
 8001ef0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40020000 	.word	0x40020000
 8001f00:	447a0000 	.word	0x447a0000
 8001f04:	447a0000 	.word	0x447a0000
 8001f08:	2000028c 	.word	0x2000028c
 8001f0c:	20000244 	.word	0x20000244

08001f10 <BT_Transmit>:

void BT_Transmit(char *str) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7fe f9b1 	bl	8000280 <strlen>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4803      	ldr	r0, [pc, #12]	@ (8001f38 <BT_Transmit+0x28>)
 8001f2a:	f003 fecf 	bl	8005ccc <HAL_UART_Transmit>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200002d4 	.word	0x200002d4

08001f3c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001f44:	1d39      	adds	r1, r7, #4
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4803      	ldr	r0, [pc, #12]	@ (8001f5c <__io_putchar+0x20>)
 8001f4e:	f003 febd 	bl	8005ccc <HAL_UART_Transmit>
	return ch;
 8001f52:	687b      	ldr	r3, [r7, #4]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	2000031c 	.word	0x2000031c

08001f60 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f64:	b672      	cpsid	i
}
 8001f66:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <Error_Handler+0x8>

08001f6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <HAL_MspInit+0x4c>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb8 <HAL_MspInit+0x4c>)
 8001f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f82:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb8 <HAL_MspInit+0x4c>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <HAL_MspInit+0x4c>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	4a08      	ldr	r2, [pc, #32]	@ (8001fb8 <HAL_MspInit+0x4c>)
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9e:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_MspInit+0x4c>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001faa:	2007      	movs	r0, #7
 8001fac:	f000 fc4a 	bl	8002844 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40023800 	.word	0x40023800

08001fbc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	@ 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a19      	ldr	r2, [pc, #100]	@ (8002040 <HAL_I2C_MspInit+0x84>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d12c      	bne.n	8002038 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	4b18      	ldr	r3, [pc, #96]	@ (8002044 <HAL_I2C_MspInit+0x88>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	4a17      	ldr	r2, [pc, #92]	@ (8002044 <HAL_I2C_MspInit+0x88>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <HAL_I2C_MspInit+0x88>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ffa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002000:	2312      	movs	r3, #18
 8002002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800200c:	2304      	movs	r3, #4
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	480c      	ldr	r0, [pc, #48]	@ (8002048 <HAL_I2C_MspInit+0x8c>)
 8002018:	f001 f858 	bl	80030cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <HAL_I2C_MspInit+0x88>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	4a07      	ldr	r2, [pc, #28]	@ (8002044 <HAL_I2C_MspInit+0x88>)
 8002026:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800202a:	6413      	str	r3, [r2, #64]	@ 0x40
 800202c:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <HAL_I2C_MspInit+0x88>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002038:	bf00      	nop
 800203a:	3728      	adds	r7, #40	@ 0x28
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40005400 	.word	0x40005400
 8002044:	40023800 	.word	0x40023800
 8002048:	40020400 	.word	0x40020400

0800204c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a15      	ldr	r2, [pc, #84]	@ (80020b0 <HAL_TIM_Base_MspInit+0x64>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10e      	bne.n	800207c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <HAL_TIM_Base_MspInit+0x68>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	4a13      	ldr	r2, [pc, #76]	@ (80020b4 <HAL_TIM_Base_MspInit+0x68>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	6413      	str	r3, [r2, #64]	@ 0x40
 800206e:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <HAL_TIM_Base_MspInit+0x68>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800207a:	e012      	b.n	80020a2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0d      	ldr	r2, [pc, #52]	@ (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d10d      	bne.n	80020a2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	4b0a      	ldr	r3, [pc, #40]	@ (80020b4 <HAL_TIM_Base_MspInit+0x68>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	4a09      	ldr	r2, [pc, #36]	@ (80020b4 <HAL_TIM_Base_MspInit+0x68>)
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	6413      	str	r3, [r2, #64]	@ 0x40
 8002096:	4b07      	ldr	r3, [pc, #28]	@ (80020b4 <HAL_TIM_Base_MspInit+0x68>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40000400 	.word	0x40000400
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40000800 	.word	0x40000800

080020bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	@ 0x28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a24      	ldr	r2, [pc, #144]	@ (800216c <HAL_TIM_MspPostInit+0xb0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d11e      	bne.n	800211c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <HAL_TIM_MspPostInit+0xb4>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	4a22      	ldr	r2, [pc, #136]	@ (8002170 <HAL_TIM_MspPostInit+0xb4>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ee:	4b20      	ldr	r3, [pc, #128]	@ (8002170 <HAL_TIM_MspPostInit+0xb4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020fa:	2380      	movs	r3, #128	@ 0x80
 80020fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800210a:	2302      	movs	r3, #2
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	4619      	mov	r1, r3
 8002114:	4817      	ldr	r0, [pc, #92]	@ (8002174 <HAL_TIM_MspPostInit+0xb8>)
 8002116:	f000 ffd9 	bl	80030cc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800211a:	e022      	b.n	8002162 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a15      	ldr	r2, [pc, #84]	@ (8002178 <HAL_TIM_MspPostInit+0xbc>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d11d      	bne.n	8002162 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <HAL_TIM_MspPostInit+0xb4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a10      	ldr	r2, [pc, #64]	@ (8002170 <HAL_TIM_MspPostInit+0xb4>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <HAL_TIM_MspPostInit+0xb4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002142:	2340      	movs	r3, #64	@ 0x40
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002152:	2302      	movs	r3, #2
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	4807      	ldr	r0, [pc, #28]	@ (800217c <HAL_TIM_MspPostInit+0xc0>)
 800215e:	f000 ffb5 	bl	80030cc <HAL_GPIO_Init>
}
 8002162:	bf00      	nop
 8002164:	3728      	adds	r7, #40	@ 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40000400 	.word	0x40000400
 8002170:	40023800 	.word	0x40023800
 8002174:	40020800 	.word	0x40020800
 8002178:	40000800 	.word	0x40000800
 800217c:	40020400 	.word	0x40020400

08002180 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08c      	sub	sp, #48	@ 0x30
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a4d      	ldr	r2, [pc, #308]	@ (80022d4 <HAL_UART_MspInit+0x154>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d163      	bne.n	800226a <HAL_UART_MspInit+0xea>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	4b4c      	ldr	r3, [pc, #304]	@ (80022d8 <HAL_UART_MspInit+0x158>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	4a4b      	ldr	r2, [pc, #300]	@ (80022d8 <HAL_UART_MspInit+0x158>)
 80021ac:	f043 0310 	orr.w	r3, r3, #16
 80021b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b2:	4b49      	ldr	r3, [pc, #292]	@ (80022d8 <HAL_UART_MspInit+0x158>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	4b45      	ldr	r3, [pc, #276]	@ (80022d8 <HAL_UART_MspInit+0x158>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4a44      	ldr	r2, [pc, #272]	@ (80022d8 <HAL_UART_MspInit+0x158>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ce:	4b42      	ldr	r3, [pc, #264]	@ (80022d8 <HAL_UART_MspInit+0x158>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80021da:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80021de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e8:	2303      	movs	r3, #3
 80021ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021ec:	2307      	movs	r3, #7
 80021ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	4619      	mov	r1, r3
 80021f6:	4839      	ldr	r0, [pc, #228]	@ (80022dc <HAL_UART_MspInit+0x15c>)
 80021f8:	f000 ff68 	bl	80030cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80021fc:	4b38      	ldr	r3, [pc, #224]	@ (80022e0 <HAL_UART_MspInit+0x160>)
 80021fe:	4a39      	ldr	r2, [pc, #228]	@ (80022e4 <HAL_UART_MspInit+0x164>)
 8002200:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002202:	4b37      	ldr	r3, [pc, #220]	@ (80022e0 <HAL_UART_MspInit+0x160>)
 8002204:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002208:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800220a:	4b35      	ldr	r3, [pc, #212]	@ (80022e0 <HAL_UART_MspInit+0x160>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002210:	4b33      	ldr	r3, [pc, #204]	@ (80022e0 <HAL_UART_MspInit+0x160>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002216:	4b32      	ldr	r3, [pc, #200]	@ (80022e0 <HAL_UART_MspInit+0x160>)
 8002218:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800221c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800221e:	4b30      	ldr	r3, [pc, #192]	@ (80022e0 <HAL_UART_MspInit+0x160>)
 8002220:	2200      	movs	r2, #0
 8002222:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002224:	4b2e      	ldr	r3, [pc, #184]	@ (80022e0 <HAL_UART_MspInit+0x160>)
 8002226:	2200      	movs	r2, #0
 8002228:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800222a:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <HAL_UART_MspInit+0x160>)
 800222c:	2200      	movs	r2, #0
 800222e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002230:	4b2b      	ldr	r3, [pc, #172]	@ (80022e0 <HAL_UART_MspInit+0x160>)
 8002232:	2200      	movs	r2, #0
 8002234:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002236:	4b2a      	ldr	r3, [pc, #168]	@ (80022e0 <HAL_UART_MspInit+0x160>)
 8002238:	2200      	movs	r2, #0
 800223a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800223c:	4828      	ldr	r0, [pc, #160]	@ (80022e0 <HAL_UART_MspInit+0x160>)
 800223e:	f000 fb43 	bl	80028c8 <HAL_DMA_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002248:	f7ff fe8a 	bl	8001f60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a24      	ldr	r2, [pc, #144]	@ (80022e0 <HAL_UART_MspInit+0x160>)
 8002250:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002252:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <HAL_UART_MspInit+0x160>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	2025      	movs	r0, #37	@ 0x25
 800225e:	f000 fafc 	bl	800285a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002262:	2025      	movs	r0, #37	@ 0x25
 8002264:	f000 fb15 	bl	8002892 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002268:	e030      	b.n	80022cc <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a1e      	ldr	r2, [pc, #120]	@ (80022e8 <HAL_UART_MspInit+0x168>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d12b      	bne.n	80022cc <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	4b17      	ldr	r3, [pc, #92]	@ (80022d8 <HAL_UART_MspInit+0x158>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	4a16      	ldr	r2, [pc, #88]	@ (80022d8 <HAL_UART_MspInit+0x158>)
 800227e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002282:	6413      	str	r3, [r2, #64]	@ 0x40
 8002284:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <HAL_UART_MspInit+0x158>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <HAL_UART_MspInit+0x158>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	4a0f      	ldr	r2, [pc, #60]	@ (80022d8 <HAL_UART_MspInit+0x158>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a0:	4b0d      	ldr	r3, [pc, #52]	@ (80022d8 <HAL_UART_MspInit+0x158>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022ac:	230c      	movs	r3, #12
 80022ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022bc:	2307      	movs	r3, #7
 80022be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c0:	f107 031c 	add.w	r3, r7, #28
 80022c4:	4619      	mov	r1, r3
 80022c6:	4805      	ldr	r0, [pc, #20]	@ (80022dc <HAL_UART_MspInit+0x15c>)
 80022c8:	f000 ff00 	bl	80030cc <HAL_GPIO_Init>
}
 80022cc:	bf00      	nop
 80022ce:	3730      	adds	r7, #48	@ 0x30
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40011000 	.word	0x40011000
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	20000364 	.word	0x20000364
 80022e4:	40026440 	.word	0x40026440
 80022e8:	40004400 	.word	0x40004400

080022ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <NMI_Handler+0x4>

080022f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f8:	bf00      	nop
 80022fa:	e7fd      	b.n	80022f8 <HardFault_Handler+0x4>

080022fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <MemManage_Handler+0x4>

08002304 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <BusFault_Handler+0x4>

0800230c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <UsageFault_Handler+0x4>

08002314 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002342:	f000 f96b 	bl	800261c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002350:	4802      	ldr	r0, [pc, #8]	@ (800235c <USART1_IRQHandler+0x10>)
 8002352:	f003 fd6b 	bl	8005e2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200002d4 	.word	0x200002d4

08002360 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002364:	4802      	ldr	r0, [pc, #8]	@ (8002370 <DMA2_Stream2_IRQHandler+0x10>)
 8002366:	f000 fc47 	bl	8002bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000364 	.word	0x20000364

08002374 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return 1;
 8002378:	2301      	movs	r3, #1
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_kill>:

int _kill(int pid, int sig)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800238e:	f005 ff17 	bl	80081c0 <__errno>
 8002392:	4603      	mov	r3, r0
 8002394:	2216      	movs	r2, #22
 8002396:	601a      	str	r2, [r3, #0]
  return -1;
 8002398:	f04f 33ff 	mov.w	r3, #4294967295
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_exit>:

void _exit (int status)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023ac:	f04f 31ff 	mov.w	r1, #4294967295
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ffe7 	bl	8002384 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023b6:	bf00      	nop
 80023b8:	e7fd      	b.n	80023b6 <_exit+0x12>

080023ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e00a      	b.n	80023e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023cc:	f3af 8000 	nop.w
 80023d0:	4601      	mov	r1, r0
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	60ba      	str	r2, [r7, #8]
 80023d8:	b2ca      	uxtb	r2, r1
 80023da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3301      	adds	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	dbf0      	blt.n	80023cc <_read+0x12>
  }

  return len;
 80023ea:	687b      	ldr	r3, [r7, #4]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	e009      	b.n	800241a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	60ba      	str	r2, [r7, #8]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fd94 	bl	8001f3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	3301      	adds	r3, #1
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	429a      	cmp	r2, r3
 8002420:	dbf1      	blt.n	8002406 <_write+0x12>
  }
  return len;
 8002422:	687b      	ldr	r3, [r7, #4]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_close>:

int _close(int file)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002454:	605a      	str	r2, [r3, #4]
  return 0;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <_isatty>:

int _isatty(int file)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800246c:	2301      	movs	r3, #1
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800247a:	b480      	push	{r7}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800249c:	4a14      	ldr	r2, [pc, #80]	@ (80024f0 <_sbrk+0x5c>)
 800249e:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <_sbrk+0x60>)
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a8:	4b13      	ldr	r3, [pc, #76]	@ (80024f8 <_sbrk+0x64>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024b0:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <_sbrk+0x64>)
 80024b2:	4a12      	ldr	r2, [pc, #72]	@ (80024fc <_sbrk+0x68>)
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024b6:	4b10      	ldr	r3, [pc, #64]	@ (80024f8 <_sbrk+0x64>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d207      	bcs.n	80024d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c4:	f005 fe7c 	bl	80081c0 <__errno>
 80024c8:	4603      	mov	r3, r0
 80024ca:	220c      	movs	r2, #12
 80024cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
 80024d2:	e009      	b.n	80024e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d4:	4b08      	ldr	r3, [pc, #32]	@ (80024f8 <_sbrk+0x64>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024da:	4b07      	ldr	r3, [pc, #28]	@ (80024f8 <_sbrk+0x64>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	4a05      	ldr	r2, [pc, #20]	@ (80024f8 <_sbrk+0x64>)
 80024e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024e6:	68fb      	ldr	r3, [r7, #12]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20020000 	.word	0x20020000
 80024f4:	00000400 	.word	0x00000400
 80024f8:	20000404 	.word	0x20000404
 80024fc:	20000558 	.word	0x20000558

08002500 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002504:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <SystemInit+0x20>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250a:	4a05      	ldr	r2, [pc, #20]	@ (8002520 <SystemInit+0x20>)
 800250c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002510:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002524:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800255c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002528:	f7ff ffea 	bl	8002500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800252c:	480c      	ldr	r0, [pc, #48]	@ (8002560 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800252e:	490d      	ldr	r1, [pc, #52]	@ (8002564 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002530:	4a0d      	ldr	r2, [pc, #52]	@ (8002568 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002534:	e002      	b.n	800253c <LoopCopyDataInit>

08002536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800253a:	3304      	adds	r3, #4

0800253c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800253c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800253e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002540:	d3f9      	bcc.n	8002536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002542:	4a0a      	ldr	r2, [pc, #40]	@ (800256c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002544:	4c0a      	ldr	r4, [pc, #40]	@ (8002570 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002548:	e001      	b.n	800254e <LoopFillZerobss>

0800254a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800254a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800254c:	3204      	adds	r2, #4

0800254e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800254e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002550:	d3fb      	bcc.n	800254a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002552:	f005 fe3b 	bl	80081cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002556:	f7fe fe31 	bl	80011bc <main>
  bx  lr    
 800255a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800255c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002564:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002568:	0800bd3c 	.word	0x0800bd3c
  ldr r2, =_sbss
 800256c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002570:	20000558 	.word	0x20000558

08002574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002574:	e7fe      	b.n	8002574 <ADC_IRQHandler>
	...

08002578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800257c:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <HAL_Init+0x40>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0d      	ldr	r2, [pc, #52]	@ (80025b8 <HAL_Init+0x40>)
 8002582:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002586:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002588:	4b0b      	ldr	r3, [pc, #44]	@ (80025b8 <HAL_Init+0x40>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0a      	ldr	r2, [pc, #40]	@ (80025b8 <HAL_Init+0x40>)
 800258e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002592:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002594:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <HAL_Init+0x40>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a07      	ldr	r2, [pc, #28]	@ (80025b8 <HAL_Init+0x40>)
 800259a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800259e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a0:	2003      	movs	r0, #3
 80025a2:	f000 f94f 	bl	8002844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f000 f808 	bl	80025bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ac:	f7ff fcde 	bl	8001f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023c00 	.word	0x40023c00

080025bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_InitTick+0x54>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b12      	ldr	r3, [pc, #72]	@ (8002614 <HAL_InitTick+0x58>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f967 	bl	80028ae <HAL_SYSTICK_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00e      	b.n	8002608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b0f      	cmp	r3, #15
 80025ee:	d80a      	bhi.n	8002606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f0:	2200      	movs	r2, #0
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f000 f92f 	bl	800285a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025fc:	4a06      	ldr	r2, [pc, #24]	@ (8002618 <HAL_InitTick+0x5c>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000000 	.word	0x20000000
 8002614:	20000008 	.word	0x20000008
 8002618:	20000004 	.word	0x20000004

0800261c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002620:	4b06      	ldr	r3, [pc, #24]	@ (800263c <HAL_IncTick+0x20>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <HAL_IncTick+0x24>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4413      	add	r3, r2
 800262c:	4a04      	ldr	r2, [pc, #16]	@ (8002640 <HAL_IncTick+0x24>)
 800262e:	6013      	str	r3, [r2, #0]
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000008 	.word	0x20000008
 8002640:	20000408 	.word	0x20000408

08002644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return uwTick;
 8002648:	4b03      	ldr	r3, [pc, #12]	@ (8002658 <HAL_GetTick+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000408 	.word	0x20000408

0800265c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff ffee 	bl	8002644 <HAL_GetTick>
 8002668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d005      	beq.n	8002682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002676:	4b0a      	ldr	r3, [pc, #40]	@ (80026a0 <HAL_Delay+0x44>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4413      	add	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002682:	bf00      	nop
 8002684:	f7ff ffde 	bl	8002644 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	429a      	cmp	r2, r3
 8002692:	d8f7      	bhi.n	8002684 <HAL_Delay+0x28>
  {
  }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000008 	.word	0x20000008

080026a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b4:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026c0:	4013      	ands	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <__NVIC_SetPriorityGrouping+0x44>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f0:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <__NVIC_GetPriorityGrouping+0x18>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	f003 0307 	and.w	r3, r3, #7
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db0b      	blt.n	8002732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	4907      	ldr	r1, [pc, #28]	@ (8002740 <__NVIC_EnableIRQ+0x38>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	2001      	movs	r0, #1
 800272a:	fa00 f202 	lsl.w	r2, r0, r2
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	@ (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	@ (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	@ 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002810:	d301      	bcc.n	8002816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002812:	2301      	movs	r3, #1
 8002814:	e00f      	b.n	8002836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002816:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <SysTick_Config+0x40>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281e:	210f      	movs	r1, #15
 8002820:	f04f 30ff 	mov.w	r0, #4294967295
 8002824:	f7ff ff8e 	bl	8002744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002828:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <SysTick_Config+0x40>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282e:	4b04      	ldr	r3, [pc, #16]	@ (8002840 <SysTick_Config+0x40>)
 8002830:	2207      	movs	r2, #7
 8002832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	e000e010 	.word	0xe000e010

08002844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff29 	bl	80026a4 <__NVIC_SetPriorityGrouping>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800286c:	f7ff ff3e 	bl	80026ec <__NVIC_GetPriorityGrouping>
 8002870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	6978      	ldr	r0, [r7, #20]
 8002878:	f7ff ff8e 	bl	8002798 <NVIC_EncodePriority>
 800287c:	4602      	mov	r2, r0
 800287e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff5d 	bl	8002744 <__NVIC_SetPriority>
}
 800288a:	bf00      	nop
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800289c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff31 	bl	8002708 <__NVIC_EnableIRQ>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ffa2 	bl	8002800 <SysTick_Config>
 80028bc:	4603      	mov	r3, r0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028d4:	f7ff feb6 	bl	8002644 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e099      	b.n	8002a18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002904:	e00f      	b.n	8002926 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002906:	f7ff fe9d 	bl	8002644 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b05      	cmp	r3, #5
 8002912:	d908      	bls.n	8002926 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2203      	movs	r2, #3
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e078      	b.n	8002a18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e8      	bne.n	8002906 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	4b38      	ldr	r3, [pc, #224]	@ (8002a20 <HAL_DMA_Init+0x158>)
 8002940:	4013      	ands	r3, r2
 8002942:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002952:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297c:	2b04      	cmp	r3, #4
 800297e:	d107      	bne.n	8002990 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002988:	4313      	orrs	r3, r2
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f023 0307 	bic.w	r3, r3, #7
 80029a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d117      	bne.n	80029ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00e      	beq.n	80029ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fb01 	bl	8002fd4 <DMA_CheckFifoParam>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2240      	movs	r2, #64	@ 0x40
 80029dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80029e6:	2301      	movs	r3, #1
 80029e8:	e016      	b.n	8002a18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fab8 	bl	8002f68 <DMA_CalcBaseAndBitshift>
 80029f8:	4603      	mov	r3, r0
 80029fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a00:	223f      	movs	r2, #63	@ 0x3f
 8002a02:	409a      	lsls	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	f010803f 	.word	0xf010803f

08002a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_DMA_Start_IT+0x26>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e040      	b.n	8002acc <HAL_DMA_Start_IT+0xa8>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d12f      	bne.n	8002abe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2202      	movs	r2, #2
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 fa4a 	bl	8002f0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7c:	223f      	movs	r2, #63	@ 0x3f
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0216 	orr.w	r2, r2, #22
 8002a92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0208 	orr.w	r2, r2, #8
 8002aaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e005      	b.n	8002aca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ae2:	f7ff fdaf 	bl	8002644 <HAL_GetTick>
 8002ae6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d008      	beq.n	8002b06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2280      	movs	r2, #128	@ 0x80
 8002af8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e052      	b.n	8002bac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0216 	bic.w	r2, r2, #22
 8002b14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d103      	bne.n	8002b36 <HAL_DMA_Abort+0x62>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0208 	bic.w	r2, r2, #8
 8002b44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b56:	e013      	b.n	8002b80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b58:	f7ff fd74 	bl	8002644 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b05      	cmp	r3, #5
 8002b64:	d90c      	bls.n	8002b80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2203      	movs	r2, #3
 8002b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e015      	b.n	8002bac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e4      	bne.n	8002b58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b92:	223f      	movs	r2, #63	@ 0x3f
 8002b94:	409a      	lsls	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d004      	beq.n	8002bd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2280      	movs	r2, #128	@ 0x80
 8002bcc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e00c      	b.n	8002bec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2205      	movs	r2, #5
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0201 	bic.w	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c04:	4b8e      	ldr	r3, [pc, #568]	@ (8002e40 <HAL_DMA_IRQHandler+0x248>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a8e      	ldr	r2, [pc, #568]	@ (8002e44 <HAL_DMA_IRQHandler+0x24c>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	0a9b      	lsrs	r3, r3, #10
 8002c10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c22:	2208      	movs	r2, #8
 8002c24:	409a      	lsls	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d01a      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0204 	bic.w	r2, r2, #4
 8002c4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	2208      	movs	r2, #8
 8002c52:	409a      	lsls	r2, r3
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5c:	f043 0201 	orr.w	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c68:	2201      	movs	r2, #1
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d012      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00b      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c86:	2201      	movs	r2, #1
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c92:	f043 0202 	orr.w	r2, r3, #2
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d012      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00b      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc8:	f043 0204 	orr.w	r2, r3, #4
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d043      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d03c      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf2:	2210      	movs	r2, #16
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d018      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d108      	bne.n	8002d28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d024      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
 8002d26:	e01f      	b.n	8002d68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01b      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	4798      	blx	r3
 8002d38:	e016      	b.n	8002d68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d107      	bne.n	8002d58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0208 	bic.w	r2, r2, #8
 8002d56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 808f 	beq.w	8002e98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 8087 	beq.w	8002e98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8e:	2220      	movs	r2, #32
 8002d90:	409a      	lsls	r2, r3
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d136      	bne.n	8002e10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0216 	bic.w	r2, r2, #22
 8002db0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695a      	ldr	r2, [r3, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d103      	bne.n	8002dd2 <HAL_DMA_IRQHandler+0x1da>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d007      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0208 	bic.w	r2, r2, #8
 8002de0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de6:	223f      	movs	r2, #63	@ 0x3f
 8002de8:	409a      	lsls	r2, r3
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d07e      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
        }
        return;
 8002e0e:	e079      	b.n	8002f04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d01d      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10d      	bne.n	8002e48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d031      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	4798      	blx	r3
 8002e3c:	e02c      	b.n	8002e98 <HAL_DMA_IRQHandler+0x2a0>
 8002e3e:	bf00      	nop
 8002e40:	20000000 	.word	0x20000000
 8002e44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d023      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
 8002e58:	e01e      	b.n	8002e98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10f      	bne.n	8002e88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0210 	bic.w	r2, r2, #16
 8002e76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d032      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d022      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2205      	movs	r2, #5
 8002eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0201 	bic.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d307      	bcc.n	8002ee0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f2      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x2cc>
 8002ede:	e000      	b.n	8002ee2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ee0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
 8002f02:	e000      	b.n	8002f06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f04:	bf00      	nop
    }
  }
}
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b40      	cmp	r3, #64	@ 0x40
 8002f38:	d108      	bne.n	8002f4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f4a:	e007      	b.n	8002f5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	3b10      	subs	r3, #16
 8002f78:	4a14      	ldr	r2, [pc, #80]	@ (8002fcc <DMA_CalcBaseAndBitshift+0x64>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f82:	4a13      	ldr	r2, [pc, #76]	@ (8002fd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d909      	bls.n	8002faa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	1d1a      	adds	r2, r3, #4
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fa8:	e007      	b.n	8002fba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fb2:	f023 0303 	bic.w	r3, r3, #3
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	aaaaaaab 	.word	0xaaaaaaab
 8002fd0:	0800b8f8 	.word	0x0800b8f8

08002fd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11f      	bne.n	800302e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d856      	bhi.n	80030a2 <DMA_CheckFifoParam+0xce>
 8002ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8002ffc <DMA_CheckFifoParam+0x28>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	0800300d 	.word	0x0800300d
 8003000:	0800301f 	.word	0x0800301f
 8003004:	0800300d 	.word	0x0800300d
 8003008:	080030a3 	.word	0x080030a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d046      	beq.n	80030a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800301c:	e043      	b.n	80030a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003022:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003026:	d140      	bne.n	80030aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302c:	e03d      	b.n	80030aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003036:	d121      	bne.n	800307c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d837      	bhi.n	80030ae <DMA_CheckFifoParam+0xda>
 800303e:	a201      	add	r2, pc, #4	@ (adr r2, 8003044 <DMA_CheckFifoParam+0x70>)
 8003040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003044:	08003055 	.word	0x08003055
 8003048:	0800305b 	.word	0x0800305b
 800304c:	08003055 	.word	0x08003055
 8003050:	0800306d 	.word	0x0800306d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
      break;
 8003058:	e030      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d025      	beq.n	80030b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306a:	e022      	b.n	80030b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003074:	d11f      	bne.n	80030b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800307a:	e01c      	b.n	80030b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d903      	bls.n	800308a <DMA_CheckFifoParam+0xb6>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d003      	beq.n	8003090 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003088:	e018      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
      break;
 800308e:	e015      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00e      	beq.n	80030ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
      break;
 80030a0:	e00b      	b.n	80030ba <DMA_CheckFifoParam+0xe6>
      break;
 80030a2:	bf00      	nop
 80030a4:	e00a      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030a6:	bf00      	nop
 80030a8:	e008      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030aa:	bf00      	nop
 80030ac:	e006      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030ae:	bf00      	nop
 80030b0:	e004      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030b2:	bf00      	nop
 80030b4:	e002      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;   
 80030b6:	bf00      	nop
 80030b8:	e000      	b.n	80030bc <DMA_CheckFifoParam+0xe8>
      break;
 80030ba:	bf00      	nop
    }
  } 
  
  return status; 
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop

080030cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	@ 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	e159      	b.n	800339c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030e8:	2201      	movs	r2, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	429a      	cmp	r2, r3
 8003102:	f040 8148 	bne.w	8003396 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d005      	beq.n	800311e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311a:	2b02      	cmp	r3, #2
 800311c:	d130      	bne.n	8003180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	2203      	movs	r2, #3
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003154:	2201      	movs	r2, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 0201 	and.w	r2, r3, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b03      	cmp	r3, #3
 800318a:	d017      	beq.n	80031bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d123      	bne.n	8003210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	08da      	lsrs	r2, r3, #3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3208      	adds	r2, #8
 80031d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	220f      	movs	r2, #15
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	08da      	lsrs	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3208      	adds	r2, #8
 800320a:	69b9      	ldr	r1, [r7, #24]
 800320c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0203 	and.w	r2, r3, #3
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80a2 	beq.w	8003396 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	4b57      	ldr	r3, [pc, #348]	@ (80033b4 <HAL_GPIO_Init+0x2e8>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325a:	4a56      	ldr	r2, [pc, #344]	@ (80033b4 <HAL_GPIO_Init+0x2e8>)
 800325c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003260:	6453      	str	r3, [r2, #68]	@ 0x44
 8003262:	4b54      	ldr	r3, [pc, #336]	@ (80033b4 <HAL_GPIO_Init+0x2e8>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800326e:	4a52      	ldr	r2, [pc, #328]	@ (80033b8 <HAL_GPIO_Init+0x2ec>)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	3302      	adds	r3, #2
 8003276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	220f      	movs	r2, #15
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a49      	ldr	r2, [pc, #292]	@ (80033bc <HAL_GPIO_Init+0x2f0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d019      	beq.n	80032ce <HAL_GPIO_Init+0x202>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a48      	ldr	r2, [pc, #288]	@ (80033c0 <HAL_GPIO_Init+0x2f4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_GPIO_Init+0x1fe>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a47      	ldr	r2, [pc, #284]	@ (80033c4 <HAL_GPIO_Init+0x2f8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00d      	beq.n	80032c6 <HAL_GPIO_Init+0x1fa>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a46      	ldr	r2, [pc, #280]	@ (80033c8 <HAL_GPIO_Init+0x2fc>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d007      	beq.n	80032c2 <HAL_GPIO_Init+0x1f6>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a45      	ldr	r2, [pc, #276]	@ (80033cc <HAL_GPIO_Init+0x300>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d101      	bne.n	80032be <HAL_GPIO_Init+0x1f2>
 80032ba:	2304      	movs	r3, #4
 80032bc:	e008      	b.n	80032d0 <HAL_GPIO_Init+0x204>
 80032be:	2307      	movs	r3, #7
 80032c0:	e006      	b.n	80032d0 <HAL_GPIO_Init+0x204>
 80032c2:	2303      	movs	r3, #3
 80032c4:	e004      	b.n	80032d0 <HAL_GPIO_Init+0x204>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e002      	b.n	80032d0 <HAL_GPIO_Init+0x204>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <HAL_GPIO_Init+0x204>
 80032ce:	2300      	movs	r3, #0
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	f002 0203 	and.w	r2, r2, #3
 80032d6:	0092      	lsls	r2, r2, #2
 80032d8:	4093      	lsls	r3, r2
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e0:	4935      	ldr	r1, [pc, #212]	@ (80033b8 <HAL_GPIO_Init+0x2ec>)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	089b      	lsrs	r3, r3, #2
 80032e6:	3302      	adds	r3, #2
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ee:	4b38      	ldr	r3, [pc, #224]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003312:	4a2f      	ldr	r2, [pc, #188]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003318:	4b2d      	ldr	r3, [pc, #180]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800333c:	4a24      	ldr	r2, [pc, #144]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003342:	4b23      	ldr	r3, [pc, #140]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003366:	4a1a      	ldr	r2, [pc, #104]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800336c:	4b18      	ldr	r3, [pc, #96]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003390:	4a0f      	ldr	r2, [pc, #60]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3301      	adds	r3, #1
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b0f      	cmp	r3, #15
 80033a0:	f67f aea2 	bls.w	80030e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	3724      	adds	r7, #36	@ 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40013800 	.word	0x40013800
 80033bc:	40020000 	.word	0x40020000
 80033c0:	40020400 	.word	0x40020400
 80033c4:	40020800 	.word	0x40020800
 80033c8:	40020c00 	.word	0x40020c00
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40013c00 	.word	0x40013c00

080033d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]
 80033e0:	4613      	mov	r3, r2
 80033e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e4:	787b      	ldrb	r3, [r7, #1]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ea:	887a      	ldrh	r2, [r7, #2]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033f0:	e003      	b.n	80033fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033f2:	887b      	ldrh	r3, [r7, #2]
 80033f4:	041a      	lsls	r2, r3, #16
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	619a      	str	r2, [r3, #24]
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e12b      	b.n	8003672 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fe fdc4 	bl	8001fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	@ 0x24
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800345a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800346a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800346c:	f001 fd8e 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8003470:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4a81      	ldr	r2, [pc, #516]	@ (800367c <HAL_I2C_Init+0x274>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d807      	bhi.n	800348c <HAL_I2C_Init+0x84>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4a80      	ldr	r2, [pc, #512]	@ (8003680 <HAL_I2C_Init+0x278>)
 8003480:	4293      	cmp	r3, r2
 8003482:	bf94      	ite	ls
 8003484:	2301      	movls	r3, #1
 8003486:	2300      	movhi	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e006      	b.n	800349a <HAL_I2C_Init+0x92>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4a7d      	ldr	r2, [pc, #500]	@ (8003684 <HAL_I2C_Init+0x27c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	bf94      	ite	ls
 8003494:	2301      	movls	r3, #1
 8003496:	2300      	movhi	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e0e7      	b.n	8003672 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4a78      	ldr	r2, [pc, #480]	@ (8003688 <HAL_I2C_Init+0x280>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	0c9b      	lsrs	r3, r3, #18
 80034ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a6a      	ldr	r2, [pc, #424]	@ (800367c <HAL_I2C_Init+0x274>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d802      	bhi.n	80034dc <HAL_I2C_Init+0xd4>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3301      	adds	r3, #1
 80034da:	e009      	b.n	80034f0 <HAL_I2C_Init+0xe8>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
 80034e6:	4a69      	ldr	r2, [pc, #420]	@ (800368c <HAL_I2C_Init+0x284>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	099b      	lsrs	r3, r3, #6
 80034ee:	3301      	adds	r3, #1
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003502:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	495c      	ldr	r1, [pc, #368]	@ (800367c <HAL_I2C_Init+0x274>)
 800350c:	428b      	cmp	r3, r1
 800350e:	d819      	bhi.n	8003544 <HAL_I2C_Init+0x13c>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1e59      	subs	r1, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	fbb1 f3f3 	udiv	r3, r1, r3
 800351e:	1c59      	adds	r1, r3, #1
 8003520:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003524:	400b      	ands	r3, r1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_I2C_Init+0x138>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1e59      	subs	r1, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	fbb1 f3f3 	udiv	r3, r1, r3
 8003538:	3301      	adds	r3, #1
 800353a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353e:	e051      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 8003540:	2304      	movs	r3, #4
 8003542:	e04f      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d111      	bne.n	8003570 <HAL_I2C_Init+0x168>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	440b      	add	r3, r1
 800355a:	fbb0 f3f3 	udiv	r3, r0, r3
 800355e:	3301      	adds	r3, #1
 8003560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e012      	b.n	8003596 <HAL_I2C_Init+0x18e>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1e58      	subs	r0, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	0099      	lsls	r1, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	fbb0 f3f3 	udiv	r3, r0, r3
 8003586:	3301      	adds	r3, #1
 8003588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_I2C_Init+0x196>
 800359a:	2301      	movs	r3, #1
 800359c:	e022      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10e      	bne.n	80035c4 <HAL_I2C_Init+0x1bc>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1e58      	subs	r0, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	440b      	add	r3, r1
 80035b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035c2:	e00f      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1e58      	subs	r0, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6859      	ldr	r1, [r3, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	0099      	lsls	r1, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035da:	3301      	adds	r3, #1
 80035dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	6809      	ldr	r1, [r1, #0]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69da      	ldr	r2, [r3, #28]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003612:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6911      	ldr	r1, [r2, #16]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68d2      	ldr	r2, [r2, #12]
 800361e:	4311      	orrs	r1, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	430b      	orrs	r3, r1
 8003626:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	000186a0 	.word	0x000186a0
 8003680:	001e847f 	.word	0x001e847f
 8003684:	003d08ff 	.word	0x003d08ff
 8003688:	431bde83 	.word	0x431bde83
 800368c:	10624dd3 	.word	0x10624dd3

08003690 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	4608      	mov	r0, r1
 800369a:	4611      	mov	r1, r2
 800369c:	461a      	mov	r2, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	817b      	strh	r3, [r7, #10]
 80036a2:	460b      	mov	r3, r1
 80036a4:	813b      	strh	r3, [r7, #8]
 80036a6:	4613      	mov	r3, r2
 80036a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036aa:	f7fe ffcb 	bl	8002644 <HAL_GetTick>
 80036ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	f040 80d9 	bne.w	8003870 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	2319      	movs	r3, #25
 80036c4:	2201      	movs	r2, #1
 80036c6:	496d      	ldr	r1, [pc, #436]	@ (800387c <HAL_I2C_Mem_Write+0x1ec>)
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 fdb9 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
 80036d6:	e0cc      	b.n	8003872 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_I2C_Mem_Write+0x56>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e0c5      	b.n	8003872 <HAL_I2C_Mem_Write+0x1e2>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d007      	beq.n	800370c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800371a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2221      	movs	r2, #33	@ 0x21
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2240      	movs	r2, #64	@ 0x40
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a3a      	ldr	r2, [r7, #32]
 8003736:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800373c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a4d      	ldr	r2, [pc, #308]	@ (8003880 <HAL_I2C_Mem_Write+0x1f0>)
 800374c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800374e:	88f8      	ldrh	r0, [r7, #6]
 8003750:	893a      	ldrh	r2, [r7, #8]
 8003752:	8979      	ldrh	r1, [r7, #10]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	4603      	mov	r3, r0
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 fbf0 	bl	8003f44 <I2C_RequestMemoryWrite>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d052      	beq.n	8003810 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e081      	b.n	8003872 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fe7e 	bl	8004474 <I2C_WaitOnTXEFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00d      	beq.n	800379a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	2b04      	cmp	r3, #4
 8003784:	d107      	bne.n	8003796 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003794:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e06b      	b.n	8003872 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	781a      	ldrb	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d11b      	bne.n	8003810 <HAL_I2C_Mem_Write+0x180>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d017      	beq.n	8003810 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1aa      	bne.n	800376e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fe71 	bl	8004504 <I2C_WaitOnBTFFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00d      	beq.n	8003844 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	2b04      	cmp	r3, #4
 800382e:	d107      	bne.n	8003840 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800383e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e016      	b.n	8003872 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	e000      	b.n	8003872 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003870:	2302      	movs	r3, #2
  }
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	00100002 	.word	0x00100002
 8003880:	ffff0000 	.word	0xffff0000

08003884 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08c      	sub	sp, #48	@ 0x30
 8003888:	af02      	add	r7, sp, #8
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	4608      	mov	r0, r1
 800388e:	4611      	mov	r1, r2
 8003890:	461a      	mov	r2, r3
 8003892:	4603      	mov	r3, r0
 8003894:	817b      	strh	r3, [r7, #10]
 8003896:	460b      	mov	r3, r1
 8003898:	813b      	strh	r3, [r7, #8]
 800389a:	4613      	mov	r3, r2
 800389c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800389e:	f7fe fed1 	bl	8002644 <HAL_GetTick>
 80038a2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	f040 8214 	bne.w	8003cda <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	2319      	movs	r3, #25
 80038b8:	2201      	movs	r2, #1
 80038ba:	497b      	ldr	r1, [pc, #492]	@ (8003aa8 <HAL_I2C_Mem_Read+0x224>)
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fcbf 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038c8:	2302      	movs	r3, #2
 80038ca:	e207      	b.n	8003cdc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_I2C_Mem_Read+0x56>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e200      	b.n	8003cdc <HAL_I2C_Mem_Read+0x458>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d007      	beq.n	8003900 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800390e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2222      	movs	r2, #34	@ 0x22
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2240      	movs	r2, #64	@ 0x40
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800392a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003930:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4a5b      	ldr	r2, [pc, #364]	@ (8003aac <HAL_I2C_Mem_Read+0x228>)
 8003940:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003942:	88f8      	ldrh	r0, [r7, #6]
 8003944:	893a      	ldrh	r2, [r7, #8]
 8003946:	8979      	ldrh	r1, [r7, #10]
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	9301      	str	r3, [sp, #4]
 800394c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	4603      	mov	r3, r0
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fb8c 	bl	8004070 <I2C_RequestMemoryRead>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e1bc      	b.n	8003cdc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003966:	2b00      	cmp	r3, #0
 8003968:	d113      	bne.n	8003992 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396a:	2300      	movs	r3, #0
 800396c:	623b      	str	r3, [r7, #32]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	623b      	str	r3, [r7, #32]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	623b      	str	r3, [r7, #32]
 800397e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	e190      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003996:	2b01      	cmp	r3, #1
 8003998:	d11b      	bne.n	80039d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e170      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d11b      	bne.n	8003a12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	e150      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a28:	e144      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	f200 80f1 	bhi.w	8003c16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d123      	bne.n	8003a84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 fda7 	bl	8004594 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e145      	b.n	8003cdc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a82:	e117      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d14e      	bne.n	8003b2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a92:	2200      	movs	r2, #0
 8003a94:	4906      	ldr	r1, [pc, #24]	@ (8003ab0 <HAL_I2C_Mem_Read+0x22c>)
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fbd2 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d008      	beq.n	8003ab4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e11a      	b.n	8003cdc <HAL_I2C_Mem_Read+0x458>
 8003aa6:	bf00      	nop
 8003aa8:	00100002 	.word	0x00100002
 8003aac:	ffff0000 	.word	0xffff0000
 8003ab0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b28:	e0c4      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b30:	2200      	movs	r2, #0
 8003b32:	496c      	ldr	r1, [pc, #432]	@ (8003ce4 <HAL_I2C_Mem_Read+0x460>)
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fb83 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0cb      	b.n	8003cdc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	4955      	ldr	r1, [pc, #340]	@ (8003ce4 <HAL_I2C_Mem_Read+0x460>)
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fb55 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e09d      	b.n	8003cdc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c14:	e04e      	b.n	8003cb4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c18:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fcba 	bl	8004594 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e058      	b.n	8003cdc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d124      	bne.n	8003cb4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d107      	bne.n	8003c82 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c80:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f47f aeb6 	bne.w	8003a2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e000      	b.n	8003cdc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
  }
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3728      	adds	r7, #40	@ 0x28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	00010004 	.word	0x00010004

08003ce8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	@ 0x28
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	607a      	str	r2, [r7, #4]
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003cf8:	f7fe fca4 	bl	8002644 <HAL_GetTick>
 8003cfc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	f040 8111 	bne.w	8003f32 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2319      	movs	r3, #25
 8003d16:	2201      	movs	r2, #1
 8003d18:	4988      	ldr	r1, [pc, #544]	@ (8003f3c <HAL_I2C_IsDeviceReady+0x254>)
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fa90 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	e104      	b.n	8003f34 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_I2C_IsDeviceReady+0x50>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e0fd      	b.n	8003f34 <HAL_I2C_IsDeviceReady+0x24c>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d007      	beq.n	8003d5e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0201 	orr.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2224      	movs	r2, #36	@ 0x24
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a70      	ldr	r2, [pc, #448]	@ (8003f40 <HAL_I2C_IsDeviceReady+0x258>)
 8003d80:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d90:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 fa4e 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003db8:	d103      	bne.n	8003dc2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dc0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e0b6      	b.n	8003f34 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dc6:	897b      	ldrh	r3, [r7, #10]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dd4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003dd6:	f7fe fc35 	bl	8002644 <HAL_GetTick>
 8003dda:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	bf0c      	ite	eq
 8003dea:	2301      	moveq	r3, #1
 8003dec:	2300      	movne	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e00:	bf0c      	ite	eq
 8003e02:	2301      	moveq	r3, #1
 8003e04:	2300      	movne	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e0a:	e025      	b.n	8003e58 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e0c:	f7fe fc1a 	bl	8002644 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d302      	bcc.n	8003e22 <HAL_I2C_IsDeviceReady+0x13a>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d103      	bne.n	8003e2a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	22a0      	movs	r2, #160	@ 0xa0
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e62:	d005      	beq.n	8003e70 <HAL_I2C_IsDeviceReady+0x188>
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d102      	bne.n	8003e70 <HAL_I2C_IsDeviceReady+0x188>
 8003e6a:	7dbb      	ldrb	r3, [r7, #22]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0cd      	beq.n	8003e0c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d129      	bne.n	8003eda <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e94:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e96:	2300      	movs	r3, #0
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	2319      	movs	r3, #25
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4921      	ldr	r1, [pc, #132]	@ (8003f3c <HAL_I2C_IsDeviceReady+0x254>)
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f9c2 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e036      	b.n	8003f34 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e02c      	b.n	8003f34 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ee8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ef2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	2319      	movs	r3, #25
 8003efa:	2201      	movs	r2, #1
 8003efc:	490f      	ldr	r1, [pc, #60]	@ (8003f3c <HAL_I2C_IsDeviceReady+0x254>)
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f99e 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e012      	b.n	8003f34 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	3301      	adds	r3, #1
 8003f12:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	f4ff af32 	bcc.w	8003d82 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
  }
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	00100002 	.word	0x00100002
 8003f40:	ffff0000 	.word	0xffff0000

08003f44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	4611      	mov	r1, r2
 8003f50:	461a      	mov	r2, r3
 8003f52:	4603      	mov	r3, r0
 8003f54:	817b      	strh	r3, [r7, #10]
 8003f56:	460b      	mov	r3, r1
 8003f58:	813b      	strh	r3, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f960 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00d      	beq.n	8003fa2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f94:	d103      	bne.n	8003f9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e05f      	b.n	8004062 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fa2:	897b      	ldrh	r3, [r7, #10]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	6a3a      	ldr	r2, [r7, #32]
 8003fb6:	492d      	ldr	r1, [pc, #180]	@ (800406c <I2C_RequestMemoryWrite+0x128>)
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f9bb 	bl	8004334 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e04c      	b.n	8004062 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe0:	6a39      	ldr	r1, [r7, #32]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fa46 	bl	8004474 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d107      	bne.n	8004006 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004004:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e02b      	b.n	8004062 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d105      	bne.n	800401c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004010:	893b      	ldrh	r3, [r7, #8]
 8004012:	b2da      	uxtb	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	611a      	str	r2, [r3, #16]
 800401a:	e021      	b.n	8004060 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800401c:	893b      	ldrh	r3, [r7, #8]
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	b29b      	uxth	r3, r3
 8004022:	b2da      	uxtb	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800402a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800402c:	6a39      	ldr	r1, [r7, #32]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fa20 	bl	8004474 <I2C_WaitOnTXEFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00d      	beq.n	8004056 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	2b04      	cmp	r3, #4
 8004040:	d107      	bne.n	8004052 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004050:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e005      	b.n	8004062 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004056:	893b      	ldrh	r3, [r7, #8]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	00010002 	.word	0x00010002

08004070 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	4608      	mov	r0, r1
 800407a:	4611      	mov	r1, r2
 800407c:	461a      	mov	r2, r3
 800407e:	4603      	mov	r3, r0
 8004080:	817b      	strh	r3, [r7, #10]
 8004082:	460b      	mov	r3, r1
 8004084:	813b      	strh	r3, [r7, #8]
 8004086:	4613      	mov	r3, r2
 8004088:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004098:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f8c2 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00d      	beq.n	80040de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040d0:	d103      	bne.n	80040da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e0aa      	b.n	8004234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040de:	897b      	ldrh	r3, [r7, #10]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	6a3a      	ldr	r2, [r7, #32]
 80040f2:	4952      	ldr	r1, [pc, #328]	@ (800423c <I2C_RequestMemoryRead+0x1cc>)
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f91d 	bl	8004334 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e097      	b.n	8004234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800411a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800411c:	6a39      	ldr	r1, [r7, #32]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f9a8 	bl	8004474 <I2C_WaitOnTXEFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	2b04      	cmp	r3, #4
 8004130:	d107      	bne.n	8004142 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004140:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e076      	b.n	8004234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d105      	bne.n	8004158 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800414c:	893b      	ldrh	r3, [r7, #8]
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	611a      	str	r2, [r3, #16]
 8004156:	e021      	b.n	800419c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004158:	893b      	ldrh	r3, [r7, #8]
 800415a:	0a1b      	lsrs	r3, r3, #8
 800415c:	b29b      	uxth	r3, r3
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004168:	6a39      	ldr	r1, [r7, #32]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f982 	bl	8004474 <I2C_WaitOnTXEFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00d      	beq.n	8004192 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	2b04      	cmp	r3, #4
 800417c:	d107      	bne.n	800418e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800418c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e050      	b.n	8004234 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004192:	893b      	ldrh	r3, [r7, #8]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800419e:	6a39      	ldr	r1, [r7, #32]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f967 	bl	8004474 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00d      	beq.n	80041c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d107      	bne.n	80041c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e035      	b.n	8004234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	2200      	movs	r2, #0
 80041e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f82b 	bl	8004240 <I2C_WaitOnFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00d      	beq.n	800420c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041fe:	d103      	bne.n	8004208 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004206:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e013      	b.n	8004234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800420c:	897b      	ldrh	r3, [r7, #10]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	b2da      	uxtb	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800421c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421e:	6a3a      	ldr	r2, [r7, #32]
 8004220:	4906      	ldr	r1, [pc, #24]	@ (800423c <I2C_RequestMemoryRead+0x1cc>)
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f886 	bl	8004334 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	00010002 	.word	0x00010002

08004240 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	4613      	mov	r3, r2
 800424e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004250:	e048      	b.n	80042e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d044      	beq.n	80042e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425a:	f7fe f9f3 	bl	8002644 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d302      	bcc.n	8004270 <I2C_WaitOnFlagUntilTimeout+0x30>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d139      	bne.n	80042e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	0c1b      	lsrs	r3, r3, #16
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b01      	cmp	r3, #1
 8004278:	d10d      	bne.n	8004296 <I2C_WaitOnFlagUntilTimeout+0x56>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	43da      	mvns	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4013      	ands	r3, r2
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	461a      	mov	r2, r3
 8004294:	e00c      	b.n	80042b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	43da      	mvns	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4013      	ands	r3, r2
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf0c      	ite	eq
 80042a8:	2301      	moveq	r3, #1
 80042aa:	2300      	movne	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d116      	bne.n	80042e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	f043 0220 	orr.w	r2, r3, #32
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e023      	b.n	800432c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	0c1b      	lsrs	r3, r3, #16
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d10d      	bne.n	800430a <I2C_WaitOnFlagUntilTimeout+0xca>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	43da      	mvns	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4013      	ands	r3, r2
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf0c      	ite	eq
 8004300:	2301      	moveq	r3, #1
 8004302:	2300      	movne	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	e00c      	b.n	8004324 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	43da      	mvns	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4013      	ands	r3, r2
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	bf0c      	ite	eq
 800431c:	2301      	moveq	r3, #1
 800431e:	2300      	movne	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	429a      	cmp	r2, r3
 8004328:	d093      	beq.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004342:	e071      	b.n	8004428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800434e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004352:	d123      	bne.n	800439c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004362:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800436c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004388:	f043 0204 	orr.w	r2, r3, #4
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e067      	b.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a2:	d041      	beq.n	8004428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a4:	f7fe f94e 	bl	8002644 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d302      	bcc.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d136      	bne.n	8004428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d10c      	bne.n	80043de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	43da      	mvns	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4013      	ands	r3, r2
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf14      	ite	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	2300      	moveq	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	e00b      	b.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	43da      	mvns	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4013      	ands	r3, r2
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bf14      	ite	ne
 80043f0:	2301      	movne	r3, #1
 80043f2:	2300      	moveq	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004414:	f043 0220 	orr.w	r2, r3, #32
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e021      	b.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	0c1b      	lsrs	r3, r3, #16
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b01      	cmp	r3, #1
 8004430:	d10c      	bne.n	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	43da      	mvns	r2, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4013      	ands	r3, r2
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	e00b      	b.n	8004464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	43da      	mvns	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4013      	ands	r3, r2
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	f47f af6d 	bne.w	8004344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004480:	e034      	b.n	80044ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f8e3 	bl	800464e <I2C_IsAcknowledgeFailed>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e034      	b.n	80044fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004498:	d028      	beq.n	80044ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449a:	f7fe f8d3 	bl	8002644 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d302      	bcc.n	80044b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d11d      	bne.n	80044ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ba:	2b80      	cmp	r3, #128	@ 0x80
 80044bc:	d016      	beq.n	80044ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e007      	b.n	80044fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f6:	2b80      	cmp	r3, #128	@ 0x80
 80044f8:	d1c3      	bne.n	8004482 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004510:	e034      	b.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f89b 	bl	800464e <I2C_IsAcknowledgeFailed>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e034      	b.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004528:	d028      	beq.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452a:	f7fe f88b 	bl	8002644 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	429a      	cmp	r2, r3
 8004538:	d302      	bcc.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d11d      	bne.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b04      	cmp	r3, #4
 800454c:	d016      	beq.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004568:	f043 0220 	orr.w	r2, r3, #32
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e007      	b.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b04      	cmp	r3, #4
 8004588:	d1c3      	bne.n	8004512 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045a0:	e049      	b.n	8004636 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d119      	bne.n	80045e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0210 	mvn.w	r2, #16
 80045b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e030      	b.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e4:	f7fe f82e 	bl	8002644 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d302      	bcc.n	80045fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d11d      	bne.n	8004636 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004604:	2b40      	cmp	r3, #64	@ 0x40
 8004606:	d016      	beq.n	8004636 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e007      	b.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004640:	2b40      	cmp	r3, #64	@ 0x40
 8004642:	d1ae      	bne.n	80045a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004664:	d11b      	bne.n	800469e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800466e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	f043 0204 	orr.w	r2, r3, #4
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e267      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d075      	beq.n	80047b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046ca:	4b88      	ldr	r3, [pc, #544]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d00c      	beq.n	80046f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046d6:	4b85      	ldr	r3, [pc, #532]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d112      	bne.n	8004708 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046e2:	4b82      	ldr	r3, [pc, #520]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046ee:	d10b      	bne.n	8004708 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f0:	4b7e      	ldr	r3, [pc, #504]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d05b      	beq.n	80047b4 <HAL_RCC_OscConfig+0x108>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d157      	bne.n	80047b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e242      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004710:	d106      	bne.n	8004720 <HAL_RCC_OscConfig+0x74>
 8004712:	4b76      	ldr	r3, [pc, #472]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a75      	ldr	r2, [pc, #468]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 8004718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	e01d      	b.n	800475c <HAL_RCC_OscConfig+0xb0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004728:	d10c      	bne.n	8004744 <HAL_RCC_OscConfig+0x98>
 800472a:	4b70      	ldr	r3, [pc, #448]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a6f      	ldr	r2, [pc, #444]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 8004730:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	4b6d      	ldr	r3, [pc, #436]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a6c      	ldr	r2, [pc, #432]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 800473c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	e00b      	b.n	800475c <HAL_RCC_OscConfig+0xb0>
 8004744:	4b69      	ldr	r3, [pc, #420]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a68      	ldr	r2, [pc, #416]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 800474a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	4b66      	ldr	r3, [pc, #408]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a65      	ldr	r2, [pc, #404]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 8004756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800475a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d013      	beq.n	800478c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004764:	f7fd ff6e 	bl	8002644 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800476c:	f7fd ff6a 	bl	8002644 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b64      	cmp	r3, #100	@ 0x64
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e207      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477e:	4b5b      	ldr	r3, [pc, #364]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0xc0>
 800478a:	e014      	b.n	80047b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fd ff5a 	bl	8002644 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004794:	f7fd ff56 	bl	8002644 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	@ 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e1f3      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047a6:	4b51      	ldr	r3, [pc, #324]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0xe8>
 80047b2:	e000      	b.n	80047b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d063      	beq.n	800488a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047c2:	4b4a      	ldr	r3, [pc, #296]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 030c 	and.w	r3, r3, #12
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ce:	4b47      	ldr	r3, [pc, #284]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d11c      	bne.n	8004814 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047da:	4b44      	ldr	r3, [pc, #272]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d116      	bne.n	8004814 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e6:	4b41      	ldr	r3, [pc, #260]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <HAL_RCC_OscConfig+0x152>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d001      	beq.n	80047fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e1c7      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fe:	4b3b      	ldr	r3, [pc, #236]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	4937      	ldr	r1, [pc, #220]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 800480e:	4313      	orrs	r3, r2
 8004810:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004812:	e03a      	b.n	800488a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d020      	beq.n	800485e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800481c:	4b34      	ldr	r3, [pc, #208]	@ (80048f0 <HAL_RCC_OscConfig+0x244>)
 800481e:	2201      	movs	r2, #1
 8004820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004822:	f7fd ff0f 	bl	8002644 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800482a:	f7fd ff0b 	bl	8002644 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e1a8      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483c:	4b2b      	ldr	r3, [pc, #172]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004848:	4b28      	ldr	r3, [pc, #160]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4925      	ldr	r1, [pc, #148]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 8004858:	4313      	orrs	r3, r2
 800485a:	600b      	str	r3, [r1, #0]
 800485c:	e015      	b.n	800488a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800485e:	4b24      	ldr	r3, [pc, #144]	@ (80048f0 <HAL_RCC_OscConfig+0x244>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004864:	f7fd feee 	bl	8002644 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800486c:	f7fd feea 	bl	8002644 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e187      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800487e:	4b1b      	ldr	r3, [pc, #108]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d036      	beq.n	8004904 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d016      	beq.n	80048cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800489e:	4b15      	ldr	r3, [pc, #84]	@ (80048f4 <HAL_RCC_OscConfig+0x248>)
 80048a0:	2201      	movs	r2, #1
 80048a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a4:	f7fd fece 	bl	8002644 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ac:	f7fd feca 	bl	8002644 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e167      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048be:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <HAL_RCC_OscConfig+0x240>)
 80048c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0x200>
 80048ca:	e01b      	b.n	8004904 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048cc:	4b09      	ldr	r3, [pc, #36]	@ (80048f4 <HAL_RCC_OscConfig+0x248>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d2:	f7fd feb7 	bl	8002644 <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d8:	e00e      	b.n	80048f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048da:	f7fd feb3 	bl	8002644 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d907      	bls.n	80048f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e150      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
 80048ec:	40023800 	.word	0x40023800
 80048f0:	42470000 	.word	0x42470000
 80048f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f8:	4b88      	ldr	r3, [pc, #544]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 80048fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1ea      	bne.n	80048da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8097 	beq.w	8004a40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004912:	2300      	movs	r3, #0
 8004914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004916:	4b81      	ldr	r3, [pc, #516]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10f      	bne.n	8004942 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	4b7d      	ldr	r3, [pc, #500]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 800492c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004930:	6413      	str	r3, [r2, #64]	@ 0x40
 8004932:	4b7a      	ldr	r3, [pc, #488]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800493e:	2301      	movs	r3, #1
 8004940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004942:	4b77      	ldr	r3, [pc, #476]	@ (8004b20 <HAL_RCC_OscConfig+0x474>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494a:	2b00      	cmp	r3, #0
 800494c:	d118      	bne.n	8004980 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800494e:	4b74      	ldr	r3, [pc, #464]	@ (8004b20 <HAL_RCC_OscConfig+0x474>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a73      	ldr	r2, [pc, #460]	@ (8004b20 <HAL_RCC_OscConfig+0x474>)
 8004954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495a:	f7fd fe73 	bl	8002644 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004962:	f7fd fe6f 	bl	8002644 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e10c      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004974:	4b6a      	ldr	r3, [pc, #424]	@ (8004b20 <HAL_RCC_OscConfig+0x474>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0f0      	beq.n	8004962 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d106      	bne.n	8004996 <HAL_RCC_OscConfig+0x2ea>
 8004988:	4b64      	ldr	r3, [pc, #400]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 800498a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498c:	4a63      	ldr	r2, [pc, #396]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	6713      	str	r3, [r2, #112]	@ 0x70
 8004994:	e01c      	b.n	80049d0 <HAL_RCC_OscConfig+0x324>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b05      	cmp	r3, #5
 800499c:	d10c      	bne.n	80049b8 <HAL_RCC_OscConfig+0x30c>
 800499e:	4b5f      	ldr	r3, [pc, #380]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a2:	4a5e      	ldr	r2, [pc, #376]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 80049a4:	f043 0304 	orr.w	r3, r3, #4
 80049a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049aa:	4b5c      	ldr	r3, [pc, #368]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ae:	4a5b      	ldr	r2, [pc, #364]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b6:	e00b      	b.n	80049d0 <HAL_RCC_OscConfig+0x324>
 80049b8:	4b58      	ldr	r3, [pc, #352]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049bc:	4a57      	ldr	r2, [pc, #348]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 80049be:	f023 0301 	bic.w	r3, r3, #1
 80049c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049c4:	4b55      	ldr	r3, [pc, #340]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c8:	4a54      	ldr	r2, [pc, #336]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 80049ca:	f023 0304 	bic.w	r3, r3, #4
 80049ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d015      	beq.n	8004a04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d8:	f7fd fe34 	bl	8002644 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049de:	e00a      	b.n	80049f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e0:	f7fd fe30 	bl	8002644 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e0cb      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f6:	4b49      	ldr	r3, [pc, #292]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 80049f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0ee      	beq.n	80049e0 <HAL_RCC_OscConfig+0x334>
 8004a02:	e014      	b.n	8004a2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a04:	f7fd fe1e 	bl	8002644 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0c:	f7fd fe1a 	bl	8002644 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e0b5      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a22:	4b3e      	ldr	r3, [pc, #248]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 8004a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1ee      	bne.n	8004a0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d105      	bne.n	8004a40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a34:	4b39      	ldr	r3, [pc, #228]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 8004a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a38:	4a38      	ldr	r2, [pc, #224]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 8004a3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 80a1 	beq.w	8004b8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a4a:	4b34      	ldr	r3, [pc, #208]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d05c      	beq.n	8004b10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d141      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a5e:	4b31      	ldr	r3, [pc, #196]	@ (8004b24 <HAL_RCC_OscConfig+0x478>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a64:	f7fd fdee 	bl	8002644 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a6c:	f7fd fdea 	bl	8002644 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e087      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7e:	4b27      	ldr	r3, [pc, #156]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69da      	ldr	r2, [r3, #28]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	019b      	lsls	r3, r3, #6
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa0:	085b      	lsrs	r3, r3, #1
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	041b      	lsls	r3, r3, #16
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aac:	061b      	lsls	r3, r3, #24
 8004aae:	491b      	ldr	r1, [pc, #108]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b24 <HAL_RCC_OscConfig+0x478>)
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aba:	f7fd fdc3 	bl	8002644 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac2:	f7fd fdbf 	bl	8002644 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e05c      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad4:	4b11      	ldr	r3, [pc, #68]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0f0      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x416>
 8004ae0:	e054      	b.n	8004b8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae2:	4b10      	ldr	r3, [pc, #64]	@ (8004b24 <HAL_RCC_OscConfig+0x478>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae8:	f7fd fdac 	bl	8002644 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fd fda8 	bl	8002644 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e045      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b02:	4b06      	ldr	r3, [pc, #24]	@ (8004b1c <HAL_RCC_OscConfig+0x470>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x444>
 8004b0e:	e03d      	b.n	8004b8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d107      	bne.n	8004b28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e038      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	40007000 	.word	0x40007000
 8004b24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b28:	4b1b      	ldr	r3, [pc, #108]	@ (8004b98 <HAL_RCC_OscConfig+0x4ec>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d028      	beq.n	8004b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d121      	bne.n	8004b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d11a      	bne.n	8004b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b58:	4013      	ands	r3, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d111      	bne.n	8004b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	3b01      	subs	r3, #1
 8004b72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d107      	bne.n	8004b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d001      	beq.n	8004b8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40023800 	.word	0x40023800

08004b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e0cc      	b.n	8004d4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb0:	4b68      	ldr	r3, [pc, #416]	@ (8004d54 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d90c      	bls.n	8004bd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bbe:	4b65      	ldr	r3, [pc, #404]	@ (8004d54 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc6:	4b63      	ldr	r3, [pc, #396]	@ (8004d54 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0b8      	b.n	8004d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d020      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bf0:	4b59      	ldr	r3, [pc, #356]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4a58      	ldr	r2, [pc, #352]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0308 	and.w	r3, r3, #8
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c08:	4b53      	ldr	r3, [pc, #332]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4a52      	ldr	r2, [pc, #328]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c14:	4b50      	ldr	r3, [pc, #320]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	494d      	ldr	r1, [pc, #308]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d044      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d107      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3a:	4b47      	ldr	r3, [pc, #284]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d119      	bne.n	8004c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e07f      	b.n	8004d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d003      	beq.n	8004c5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d107      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d109      	bne.n	8004c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e06f      	b.n	8004d4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e067      	b.n	8004d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c7a:	4b37      	ldr	r3, [pc, #220]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f023 0203 	bic.w	r2, r3, #3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	4934      	ldr	r1, [pc, #208]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c8c:	f7fd fcda 	bl	8002644 <HAL_GetTick>
 8004c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c92:	e00a      	b.n	8004caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c94:	f7fd fcd6 	bl	8002644 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e04f      	b.n	8004d4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004caa:	4b2b      	ldr	r3, [pc, #172]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 020c 	and.w	r2, r3, #12
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d1eb      	bne.n	8004c94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cbc:	4b25      	ldr	r3, [pc, #148]	@ (8004d54 <HAL_RCC_ClockConfig+0x1b8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d20c      	bcs.n	8004ce4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cca:	4b22      	ldr	r3, [pc, #136]	@ (8004d54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd2:	4b20      	ldr	r3, [pc, #128]	@ (8004d54 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d001      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e032      	b.n	8004d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d008      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cf0:	4b19      	ldr	r3, [pc, #100]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4916      	ldr	r1, [pc, #88]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d009      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d0e:	4b12      	ldr	r3, [pc, #72]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	490e      	ldr	r1, [pc, #56]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d22:	f000 f821 	bl	8004d68 <HAL_RCC_GetSysClockFreq>
 8004d26:	4602      	mov	r2, r0
 8004d28:	4b0b      	ldr	r3, [pc, #44]	@ (8004d58 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	091b      	lsrs	r3, r3, #4
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	490a      	ldr	r1, [pc, #40]	@ (8004d5c <HAL_RCC_ClockConfig+0x1c0>)
 8004d34:	5ccb      	ldrb	r3, [r1, r3]
 8004d36:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3a:	4a09      	ldr	r2, [pc, #36]	@ (8004d60 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d3e:	4b09      	ldr	r3, [pc, #36]	@ (8004d64 <HAL_RCC_ClockConfig+0x1c8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fd fc3a 	bl	80025bc <HAL_InitTick>

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40023c00 	.word	0x40023c00
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	0800b8e0 	.word	0x0800b8e0
 8004d60:	20000000 	.word	0x20000000
 8004d64:	20000004 	.word	0x20000004

08004d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d6c:	b094      	sub	sp, #80	@ 0x50
 8004d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d80:	4b79      	ldr	r3, [pc, #484]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f003 030c 	and.w	r3, r3, #12
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d00d      	beq.n	8004da8 <HAL_RCC_GetSysClockFreq+0x40>
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	f200 80e1 	bhi.w	8004f54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <HAL_RCC_GetSysClockFreq+0x34>
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d003      	beq.n	8004da2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d9a:	e0db      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d9c:	4b73      	ldr	r3, [pc, #460]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004da0:	e0db      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004da2:	4b73      	ldr	r3, [pc, #460]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x208>)
 8004da4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004da6:	e0d8      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004da8:	4b6f      	ldr	r3, [pc, #444]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004db0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004db2:	4b6d      	ldr	r3, [pc, #436]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d063      	beq.n	8004e86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	099b      	lsrs	r3, r3, #6
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004dda:	4622      	mov	r2, r4
 8004ddc:	462b      	mov	r3, r5
 8004dde:	f04f 0000 	mov.w	r0, #0
 8004de2:	f04f 0100 	mov.w	r1, #0
 8004de6:	0159      	lsls	r1, r3, #5
 8004de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dec:	0150      	lsls	r0, r2, #5
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4621      	mov	r1, r4
 8004df4:	1a51      	subs	r1, r2, r1
 8004df6:	6139      	str	r1, [r7, #16]
 8004df8:	4629      	mov	r1, r5
 8004dfa:	eb63 0301 	sbc.w	r3, r3, r1
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	f04f 0300 	mov.w	r3, #0
 8004e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e0c:	4659      	mov	r1, fp
 8004e0e:	018b      	lsls	r3, r1, #6
 8004e10:	4651      	mov	r1, sl
 8004e12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e16:	4651      	mov	r1, sl
 8004e18:	018a      	lsls	r2, r1, #6
 8004e1a:	4651      	mov	r1, sl
 8004e1c:	ebb2 0801 	subs.w	r8, r2, r1
 8004e20:	4659      	mov	r1, fp
 8004e22:	eb63 0901 	sbc.w	r9, r3, r1
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e3a:	4690      	mov	r8, r2
 8004e3c:	4699      	mov	r9, r3
 8004e3e:	4623      	mov	r3, r4
 8004e40:	eb18 0303 	adds.w	r3, r8, r3
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	462b      	mov	r3, r5
 8004e48:	eb49 0303 	adc.w	r3, r9, r3
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	024b      	lsls	r3, r1, #9
 8004e5e:	4621      	mov	r1, r4
 8004e60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e64:	4621      	mov	r1, r4
 8004e66:	024a      	lsls	r2, r1, #9
 8004e68:	4610      	mov	r0, r2
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e6e:	2200      	movs	r2, #0
 8004e70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e78:	f7fb ff0e 	bl	8000c98 <__aeabi_uldivmod>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4613      	mov	r3, r2
 8004e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e84:	e058      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e86:	4b38      	ldr	r3, [pc, #224]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	099b      	lsrs	r3, r3, #6
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	4618      	mov	r0, r3
 8004e90:	4611      	mov	r1, r2
 8004e92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e96:	623b      	str	r3, [r7, #32]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	f04f 0000 	mov.w	r0, #0
 8004ea8:	f04f 0100 	mov.w	r1, #0
 8004eac:	0159      	lsls	r1, r3, #5
 8004eae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eb2:	0150      	lsls	r0, r2, #5
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4641      	mov	r1, r8
 8004eba:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ebe:	4649      	mov	r1, r9
 8004ec0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ed0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ed4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ed8:	ebb2 040a 	subs.w	r4, r2, sl
 8004edc:	eb63 050b 	sbc.w	r5, r3, fp
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	00eb      	lsls	r3, r5, #3
 8004eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eee:	00e2      	lsls	r2, r4, #3
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	461d      	mov	r5, r3
 8004ef4:	4643      	mov	r3, r8
 8004ef6:	18e3      	adds	r3, r4, r3
 8004ef8:	603b      	str	r3, [r7, #0]
 8004efa:	464b      	mov	r3, r9
 8004efc:	eb45 0303 	adc.w	r3, r5, r3
 8004f00:	607b      	str	r3, [r7, #4]
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f0e:	4629      	mov	r1, r5
 8004f10:	028b      	lsls	r3, r1, #10
 8004f12:	4621      	mov	r1, r4
 8004f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f18:	4621      	mov	r1, r4
 8004f1a:	028a      	lsls	r2, r1, #10
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f22:	2200      	movs	r2, #0
 8004f24:	61bb      	str	r3, [r7, #24]
 8004f26:	61fa      	str	r2, [r7, #28]
 8004f28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f2c:	f7fb feb4 	bl	8000c98 <__aeabi_uldivmod>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4613      	mov	r3, r2
 8004f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f38:	4b0b      	ldr	r3, [pc, #44]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	0c1b      	lsrs	r3, r3, #16
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	3301      	adds	r3, #1
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f52:	e002      	b.n	8004f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f54:	4b05      	ldr	r3, [pc, #20]	@ (8004f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3750      	adds	r7, #80	@ 0x50
 8004f60:	46bd      	mov	sp, r7
 8004f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f66:	bf00      	nop
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	00f42400 	.word	0x00f42400
 8004f70:	007a1200 	.word	0x007a1200

08004f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f78:	4b03      	ldr	r3, [pc, #12]	@ (8004f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	20000000 	.word	0x20000000

08004f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f90:	f7ff fff0 	bl	8004f74 <HAL_RCC_GetHCLKFreq>
 8004f94:	4602      	mov	r2, r0
 8004f96:	4b05      	ldr	r3, [pc, #20]	@ (8004fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	0a9b      	lsrs	r3, r3, #10
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	4903      	ldr	r1, [pc, #12]	@ (8004fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fa2:	5ccb      	ldrb	r3, [r1, r3]
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	0800b8f0 	.word	0x0800b8f0

08004fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fb8:	f7ff ffdc 	bl	8004f74 <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b05      	ldr	r3, [pc, #20]	@ (8004fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	0b5b      	lsrs	r3, r3, #13
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4903      	ldr	r1, [pc, #12]	@ (8004fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	0800b8f0 	.word	0x0800b8f0

08004fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e041      	b.n	8005072 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fd f822 	bl	800204c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3304      	adds	r3, #4
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f000 fac0 	bl	80055a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e041      	b.n	8005110 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d106      	bne.n	80050a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f839 	bl	8005118 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2202      	movs	r2, #2
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3304      	adds	r3, #4
 80050b6:	4619      	mov	r1, r3
 80050b8:	4610      	mov	r0, r2
 80050ba:	f000 fa71 	bl	80055a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d109      	bne.n	8005150 <HAL_TIM_PWM_Start+0x24>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	bf14      	ite	ne
 8005148:	2301      	movne	r3, #1
 800514a:	2300      	moveq	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	e022      	b.n	8005196 <HAL_TIM_PWM_Start+0x6a>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b04      	cmp	r3, #4
 8005154:	d109      	bne.n	800516a <HAL_TIM_PWM_Start+0x3e>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b01      	cmp	r3, #1
 8005160:	bf14      	ite	ne
 8005162:	2301      	movne	r3, #1
 8005164:	2300      	moveq	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	e015      	b.n	8005196 <HAL_TIM_PWM_Start+0x6a>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b08      	cmp	r3, #8
 800516e:	d109      	bne.n	8005184 <HAL_TIM_PWM_Start+0x58>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	bf14      	ite	ne
 800517c:	2301      	movne	r3, #1
 800517e:	2300      	moveq	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	e008      	b.n	8005196 <HAL_TIM_PWM_Start+0x6a>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b01      	cmp	r3, #1
 800518e:	bf14      	ite	ne
 8005190:	2301      	movne	r3, #1
 8005192:	2300      	moveq	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e068      	b.n	8005270 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_PWM_Start+0x82>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051ac:	e013      	b.n	80051d6 <HAL_TIM_PWM_Start+0xaa>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d104      	bne.n	80051be <HAL_TIM_PWM_Start+0x92>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051bc:	e00b      	b.n	80051d6 <HAL_TIM_PWM_Start+0xaa>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d104      	bne.n	80051ce <HAL_TIM_PWM_Start+0xa2>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051cc:	e003      	b.n	80051d6 <HAL_TIM_PWM_Start+0xaa>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2202      	movs	r2, #2
 80051d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2201      	movs	r2, #1
 80051dc:	6839      	ldr	r1, [r7, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fc90 	bl	8005b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a23      	ldr	r2, [pc, #140]	@ (8005278 <HAL_TIM_PWM_Start+0x14c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d107      	bne.n	80051fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1d      	ldr	r2, [pc, #116]	@ (8005278 <HAL_TIM_PWM_Start+0x14c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d018      	beq.n	800523a <HAL_TIM_PWM_Start+0x10e>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005210:	d013      	beq.n	800523a <HAL_TIM_PWM_Start+0x10e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a19      	ldr	r2, [pc, #100]	@ (800527c <HAL_TIM_PWM_Start+0x150>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00e      	beq.n	800523a <HAL_TIM_PWM_Start+0x10e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a17      	ldr	r2, [pc, #92]	@ (8005280 <HAL_TIM_PWM_Start+0x154>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_TIM_PWM_Start+0x10e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a16      	ldr	r2, [pc, #88]	@ (8005284 <HAL_TIM_PWM_Start+0x158>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_TIM_PWM_Start+0x10e>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a14      	ldr	r2, [pc, #80]	@ (8005288 <HAL_TIM_PWM_Start+0x15c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d111      	bne.n	800525e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b06      	cmp	r3, #6
 800524a:	d010      	beq.n	800526e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525c:	e007      	b.n	800526e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0201 	orr.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40010000 	.word	0x40010000
 800527c:	40000400 	.word	0x40000400
 8005280:	40000800 	.word	0x40000800
 8005284:	40000c00 	.word	0x40000c00
 8005288:	40014000 	.word	0x40014000

0800528c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e0ae      	b.n	8005408 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b0c      	cmp	r3, #12
 80052b6:	f200 809f 	bhi.w	80053f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80052ba:	a201      	add	r2, pc, #4	@ (adr r2, 80052c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c0:	080052f5 	.word	0x080052f5
 80052c4:	080053f9 	.word	0x080053f9
 80052c8:	080053f9 	.word	0x080053f9
 80052cc:	080053f9 	.word	0x080053f9
 80052d0:	08005335 	.word	0x08005335
 80052d4:	080053f9 	.word	0x080053f9
 80052d8:	080053f9 	.word	0x080053f9
 80052dc:	080053f9 	.word	0x080053f9
 80052e0:	08005377 	.word	0x08005377
 80052e4:	080053f9 	.word	0x080053f9
 80052e8:	080053f9 	.word	0x080053f9
 80052ec:	080053f9 	.word	0x080053f9
 80052f0:	080053b7 	.word	0x080053b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f9dc 	bl	80056b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0208 	orr.w	r2, r2, #8
 800530e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0204 	bic.w	r2, r2, #4
 800531e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6999      	ldr	r1, [r3, #24]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	619a      	str	r2, [r3, #24]
      break;
 8005332:	e064      	b.n	80053fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fa22 	bl	8005784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800534e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800535e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6999      	ldr	r1, [r3, #24]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	021a      	lsls	r2, r3, #8
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	619a      	str	r2, [r3, #24]
      break;
 8005374:	e043      	b.n	80053fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	4618      	mov	r0, r3
 800537e:	f000 fa6d 	bl	800585c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69da      	ldr	r2, [r3, #28]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0208 	orr.w	r2, r2, #8
 8005390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69da      	ldr	r2, [r3, #28]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0204 	bic.w	r2, r2, #4
 80053a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69d9      	ldr	r1, [r3, #28]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	61da      	str	r2, [r3, #28]
      break;
 80053b4:	e023      	b.n	80053fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fab7 	bl	8005930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69d9      	ldr	r1, [r3, #28]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	021a      	lsls	r2, r3, #8
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	61da      	str	r2, [r3, #28]
      break;
 80053f6:	e002      	b.n	80053fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	75fb      	strb	r3, [r7, #23]
      break;
 80053fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005406:	7dfb      	ldrb	r3, [r7, #23]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_TIM_ConfigClockSource+0x1c>
 8005428:	2302      	movs	r3, #2
 800542a:	e0b4      	b.n	8005596 <HAL_TIM_ConfigClockSource+0x186>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800544a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005452:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005464:	d03e      	beq.n	80054e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800546a:	f200 8087 	bhi.w	800557c <HAL_TIM_ConfigClockSource+0x16c>
 800546e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005472:	f000 8086 	beq.w	8005582 <HAL_TIM_ConfigClockSource+0x172>
 8005476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800547a:	d87f      	bhi.n	800557c <HAL_TIM_ConfigClockSource+0x16c>
 800547c:	2b70      	cmp	r3, #112	@ 0x70
 800547e:	d01a      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005480:	2b70      	cmp	r3, #112	@ 0x70
 8005482:	d87b      	bhi.n	800557c <HAL_TIM_ConfigClockSource+0x16c>
 8005484:	2b60      	cmp	r3, #96	@ 0x60
 8005486:	d050      	beq.n	800552a <HAL_TIM_ConfigClockSource+0x11a>
 8005488:	2b60      	cmp	r3, #96	@ 0x60
 800548a:	d877      	bhi.n	800557c <HAL_TIM_ConfigClockSource+0x16c>
 800548c:	2b50      	cmp	r3, #80	@ 0x50
 800548e:	d03c      	beq.n	800550a <HAL_TIM_ConfigClockSource+0xfa>
 8005490:	2b50      	cmp	r3, #80	@ 0x50
 8005492:	d873      	bhi.n	800557c <HAL_TIM_ConfigClockSource+0x16c>
 8005494:	2b40      	cmp	r3, #64	@ 0x40
 8005496:	d058      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x13a>
 8005498:	2b40      	cmp	r3, #64	@ 0x40
 800549a:	d86f      	bhi.n	800557c <HAL_TIM_ConfigClockSource+0x16c>
 800549c:	2b30      	cmp	r3, #48	@ 0x30
 800549e:	d064      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x15a>
 80054a0:	2b30      	cmp	r3, #48	@ 0x30
 80054a2:	d86b      	bhi.n	800557c <HAL_TIM_ConfigClockSource+0x16c>
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	d060      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x15a>
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d867      	bhi.n	800557c <HAL_TIM_ConfigClockSource+0x16c>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d05c      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x15a>
 80054b0:	2b10      	cmp	r3, #16
 80054b2:	d05a      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x15a>
 80054b4:	e062      	b.n	800557c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054c6:	f000 fafd 	bl	8005ac4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	609a      	str	r2, [r3, #8]
      break;
 80054e2:	e04f      	b.n	8005584 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054f4:	f000 fae6 	bl	8005ac4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005506:	609a      	str	r2, [r3, #8]
      break;
 8005508:	e03c      	b.n	8005584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005516:	461a      	mov	r2, r3
 8005518:	f000 fa5a 	bl	80059d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2150      	movs	r1, #80	@ 0x50
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fab3 	bl	8005a8e <TIM_ITRx_SetConfig>
      break;
 8005528:	e02c      	b.n	8005584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005536:	461a      	mov	r2, r3
 8005538:	f000 fa79 	bl	8005a2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2160      	movs	r1, #96	@ 0x60
 8005542:	4618      	mov	r0, r3
 8005544:	f000 faa3 	bl	8005a8e <TIM_ITRx_SetConfig>
      break;
 8005548:	e01c      	b.n	8005584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005556:	461a      	mov	r2, r3
 8005558:	f000 fa3a 	bl	80059d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2140      	movs	r1, #64	@ 0x40
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fa93 	bl	8005a8e <TIM_ITRx_SetConfig>
      break;
 8005568:	e00c      	b.n	8005584 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4619      	mov	r1, r3
 8005574:	4610      	mov	r0, r2
 8005576:	f000 fa8a 	bl	8005a8e <TIM_ITRx_SetConfig>
      break;
 800557a:	e003      	b.n	8005584 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
      break;
 8005580:	e000      	b.n	8005584 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005594:	7bfb      	ldrb	r3, [r7, #15]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a3a      	ldr	r2, [pc, #232]	@ (800569c <TIM_Base_SetConfig+0xfc>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00f      	beq.n	80055d8 <TIM_Base_SetConfig+0x38>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055be:	d00b      	beq.n	80055d8 <TIM_Base_SetConfig+0x38>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a37      	ldr	r2, [pc, #220]	@ (80056a0 <TIM_Base_SetConfig+0x100>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d007      	beq.n	80055d8 <TIM_Base_SetConfig+0x38>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a36      	ldr	r2, [pc, #216]	@ (80056a4 <TIM_Base_SetConfig+0x104>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d003      	beq.n	80055d8 <TIM_Base_SetConfig+0x38>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a35      	ldr	r2, [pc, #212]	@ (80056a8 <TIM_Base_SetConfig+0x108>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d108      	bne.n	80055ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a2b      	ldr	r2, [pc, #172]	@ (800569c <TIM_Base_SetConfig+0xfc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d01b      	beq.n	800562a <TIM_Base_SetConfig+0x8a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f8:	d017      	beq.n	800562a <TIM_Base_SetConfig+0x8a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a28      	ldr	r2, [pc, #160]	@ (80056a0 <TIM_Base_SetConfig+0x100>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d013      	beq.n	800562a <TIM_Base_SetConfig+0x8a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a27      	ldr	r2, [pc, #156]	@ (80056a4 <TIM_Base_SetConfig+0x104>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00f      	beq.n	800562a <TIM_Base_SetConfig+0x8a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a26      	ldr	r2, [pc, #152]	@ (80056a8 <TIM_Base_SetConfig+0x108>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00b      	beq.n	800562a <TIM_Base_SetConfig+0x8a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a25      	ldr	r2, [pc, #148]	@ (80056ac <TIM_Base_SetConfig+0x10c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d007      	beq.n	800562a <TIM_Base_SetConfig+0x8a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a24      	ldr	r2, [pc, #144]	@ (80056b0 <TIM_Base_SetConfig+0x110>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d003      	beq.n	800562a <TIM_Base_SetConfig+0x8a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a23      	ldr	r2, [pc, #140]	@ (80056b4 <TIM_Base_SetConfig+0x114>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d108      	bne.n	800563c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4313      	orrs	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a0e      	ldr	r2, [pc, #56]	@ (800569c <TIM_Base_SetConfig+0xfc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d103      	bne.n	8005670 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b01      	cmp	r3, #1
 8005680:	d105      	bne.n	800568e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f023 0201 	bic.w	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	611a      	str	r2, [r3, #16]
  }
}
 800568e:	bf00      	nop
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40010000 	.word	0x40010000
 80056a0:	40000400 	.word	0x40000400
 80056a4:	40000800 	.word	0x40000800
 80056a8:	40000c00 	.word	0x40000c00
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014400 	.word	0x40014400
 80056b4:	40014800 	.word	0x40014800

080056b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f023 0201 	bic.w	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0303 	bic.w	r3, r3, #3
 80056ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f023 0302 	bic.w	r3, r3, #2
 8005700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a1c      	ldr	r2, [pc, #112]	@ (8005780 <TIM_OC1_SetConfig+0xc8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d10c      	bne.n	800572e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f023 0308 	bic.w	r3, r3, #8
 800571a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f023 0304 	bic.w	r3, r3, #4
 800572c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a13      	ldr	r2, [pc, #76]	@ (8005780 <TIM_OC1_SetConfig+0xc8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d111      	bne.n	800575a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800573c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	621a      	str	r2, [r3, #32]
}
 8005774:	bf00      	nop
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	40010000 	.word	0x40010000

08005784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f023 0210 	bic.w	r2, r3, #16
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f023 0320 	bic.w	r3, r3, #32
 80057ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a1e      	ldr	r2, [pc, #120]	@ (8005858 <TIM_OC2_SetConfig+0xd4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d10d      	bne.n	8005800 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a15      	ldr	r2, [pc, #84]	@ (8005858 <TIM_OC2_SetConfig+0xd4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d113      	bne.n	8005830 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800580e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005816:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40010000 	.word	0x40010000

0800585c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0303 	bic.w	r3, r3, #3
 8005892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	021b      	lsls	r3, r3, #8
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a1d      	ldr	r2, [pc, #116]	@ (800592c <TIM_OC3_SetConfig+0xd0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d10d      	bne.n	80058d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a14      	ldr	r2, [pc, #80]	@ (800592c <TIM_OC3_SetConfig+0xd0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d113      	bne.n	8005906 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	621a      	str	r2, [r3, #32]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	40010000 	.word	0x40010000

08005930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800595e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800597a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	031b      	lsls	r3, r3, #12
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a10      	ldr	r2, [pc, #64]	@ (80059cc <TIM_OC4_SetConfig+0x9c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d109      	bne.n	80059a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005996:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	019b      	lsls	r3, r3, #6
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	621a      	str	r2, [r3, #32]
}
 80059be:	bf00      	nop
 80059c0:	371c      	adds	r7, #28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40010000 	.word	0x40010000

080059d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f023 0201 	bic.w	r2, r3, #1
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f023 030a 	bic.w	r3, r3, #10
 8005a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	621a      	str	r2, [r3, #32]
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b087      	sub	sp, #28
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	f023 0210 	bic.w	r2, r3, #16
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	031b      	lsls	r3, r3, #12
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	621a      	str	r2, [r3, #32]
}
 8005a82:	bf00      	nop
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f043 0307 	orr.w	r3, r3, #7
 8005ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	609a      	str	r2, [r3, #8]
}
 8005ab8:	bf00      	nop
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	021a      	lsls	r2, r3, #8
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	609a      	str	r2, [r3, #8]
}
 8005af8:	bf00      	nop
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 031f 	and.w	r3, r3, #31
 8005b16:	2201      	movs	r2, #1
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a1a      	ldr	r2, [r3, #32]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	43db      	mvns	r3, r3
 8005b26:	401a      	ands	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a1a      	ldr	r2, [r3, #32]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f003 031f 	and.w	r3, r3, #31
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
	...

08005b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e050      	b.n	8005c0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d018      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb4:	d013      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a18      	ldr	r2, [pc, #96]	@ (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00e      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a16      	ldr	r2, [pc, #88]	@ (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d009      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a15      	ldr	r2, [pc, #84]	@ (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d004      	beq.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a13      	ldr	r2, [pc, #76]	@ (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	40000800 	.word	0x40000800
 8005c24:	40000c00 	.word	0x40000c00
 8005c28:	40014000 	.word	0x40014000

08005c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e042      	b.n	8005cc4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fc fa94 	bl	8002180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2224      	movs	r2, #36	@ 0x24
 8005c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 ff4f 	bl	8006b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695a      	ldr	r2, [r3, #20]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08a      	sub	sp, #40	@ 0x28
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d175      	bne.n	8005dd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <HAL_UART_Transmit+0x2c>
 8005cf2:	88fb      	ldrh	r3, [r7, #6]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e06e      	b.n	8005dda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2221      	movs	r2, #33	@ 0x21
 8005d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d0a:	f7fc fc9b 	bl	8002644 <HAL_GetTick>
 8005d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	88fa      	ldrh	r2, [r7, #6]
 8005d14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	88fa      	ldrh	r2, [r7, #6]
 8005d1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d24:	d108      	bne.n	8005d38 <HAL_UART_Transmit+0x6c>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d104      	bne.n	8005d38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	e003      	b.n	8005d40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d40:	e02e      	b.n	8005da0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2180      	movs	r1, #128	@ 0x80
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 fc27 	bl	80065a0 <UART_WaitOnFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d005      	beq.n	8005d64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e03a      	b.n	8005dda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10b      	bne.n	8005d82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	3302      	adds	r3, #2
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	e007      	b.n	8005d92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	781a      	ldrb	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1cb      	bne.n	8005d42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2200      	movs	r2, #0
 8005db2:	2140      	movs	r1, #64	@ 0x40
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 fbf3 	bl	80065a0 <UART_WaitOnFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d005      	beq.n	8005dcc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e006      	b.n	8005dda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e000      	b.n	8005dda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005dd8:	2302      	movs	r3, #2
  }
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	4613      	mov	r3, r2
 8005dee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	d112      	bne.n	8005e22 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_UART_Receive_DMA+0x26>
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e00b      	b.n	8005e24 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005e12:	88fb      	ldrh	r3, [r7, #6]
 8005e14:	461a      	mov	r2, r3
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 fc1b 	bl	8006654 <UART_Start_Receive_DMA>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	e000      	b.n	8005e24 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005e22:	2302      	movs	r3, #2
  }
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b0ba      	sub	sp, #232	@ 0xe8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10f      	bne.n	8005e92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <HAL_UART_IRQHandler+0x66>
 8005e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fd83 	bl	8006996 <UART_Receive_IT>
      return;
 8005e90:	e25b      	b.n	800634a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 80de 	beq.w	8006058 <HAL_UART_IRQHandler+0x22c>
 8005e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 80d1 	beq.w	8006058 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <HAL_UART_IRQHandler+0xae>
 8005ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d005      	beq.n	8005eda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed2:	f043 0201 	orr.w	r2, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ede:	f003 0304 	and.w	r3, r3, #4
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00b      	beq.n	8005efe <HAL_UART_IRQHandler+0xd2>
 8005ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef6:	f043 0202 	orr.w	r2, r3, #2
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <HAL_UART_IRQHandler+0xf6>
 8005f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1a:	f043 0204 	orr.w	r2, r3, #4
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d011      	beq.n	8005f52 <HAL_UART_IRQHandler+0x126>
 8005f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d105      	bne.n	8005f46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f4a:	f043 0208 	orr.w	r2, r3, #8
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 81f2 	beq.w	8006340 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d008      	beq.n	8005f7a <HAL_UART_IRQHandler+0x14e>
 8005f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fd0e 	bl	8006996 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f84:	2b40      	cmp	r3, #64	@ 0x40
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d103      	bne.n	8005fa6 <HAL_UART_IRQHandler+0x17a>
 8005f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d04f      	beq.n	8006046 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fc16 	bl	80067d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb6:	2b40      	cmp	r3, #64	@ 0x40
 8005fb8:	d141      	bne.n	800603e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3314      	adds	r3, #20
 8005fc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3314      	adds	r3, #20
 8005fe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005fe6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ff2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1d9      	bne.n	8005fba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d013      	beq.n	8006036 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006012:	4a7e      	ldr	r2, [pc, #504]	@ (800620c <HAL_UART_IRQHandler+0x3e0>)
 8006014:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601a:	4618      	mov	r0, r3
 800601c:	f7fc fdca 	bl	8002bb4 <HAL_DMA_Abort_IT>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d016      	beq.n	8006054 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800602a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006030:	4610      	mov	r0, r2
 8006032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	e00e      	b.n	8006054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f99e 	bl	8006378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800603c:	e00a      	b.n	8006054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f99a 	bl	8006378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006044:	e006      	b.n	8006054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f996 	bl	8006378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006052:	e175      	b.n	8006340 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006054:	bf00      	nop
    return;
 8006056:	e173      	b.n	8006340 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605c:	2b01      	cmp	r3, #1
 800605e:	f040 814f 	bne.w	8006300 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 8148 	beq.w	8006300 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006074:	f003 0310 	and.w	r3, r3, #16
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 8141 	beq.w	8006300 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800607e:	2300      	movs	r3, #0
 8006080:	60bb      	str	r3, [r7, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	60bb      	str	r3, [r7, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	60bb      	str	r3, [r7, #8]
 8006092:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800609e:	2b40      	cmp	r3, #64	@ 0x40
 80060a0:	f040 80b6 	bne.w	8006210 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8145 	beq.w	8006344 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060c2:	429a      	cmp	r2, r3
 80060c4:	f080 813e 	bcs.w	8006344 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80060ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060da:	f000 8088 	beq.w	80061ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	330c      	adds	r3, #12
 80060e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80060f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80060f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	330c      	adds	r3, #12
 8006106:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800610a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800610e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006116:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006122:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1d9      	bne.n	80060de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3314      	adds	r3, #20
 8006130:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800613a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3314      	adds	r3, #20
 800614a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800614e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006152:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006156:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006160:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e1      	bne.n	800612a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3314      	adds	r3, #20
 800616c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800617c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3314      	adds	r3, #20
 8006186:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800618a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800618c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006190:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006198:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e3      	bne.n	8006166 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	330c      	adds	r3, #12
 80061b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061b6:	e853 3f00 	ldrex	r3, [r3]
 80061ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80061bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061be:	f023 0310 	bic.w	r3, r3, #16
 80061c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	330c      	adds	r3, #12
 80061cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80061d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80061d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061d8:	e841 2300 	strex	r3, r2, [r1]
 80061dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e3      	bne.n	80061ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fc fc73 	bl	8002ad4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	b29b      	uxth	r3, r3
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f8c1 	bl	800638c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800620a:	e09b      	b.n	8006344 <HAL_UART_IRQHandler+0x518>
 800620c:	0800689f 	.word	0x0800689f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006218:	b29b      	uxth	r3, r3
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 808e 	beq.w	8006348 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800622c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8089 	beq.w	8006348 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	330c      	adds	r3, #12
 800623c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006240:	e853 3f00 	ldrex	r3, [r3]
 8006244:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006248:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800624c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800625a:	647a      	str	r2, [r7, #68]	@ 0x44
 800625c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006260:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006262:	e841 2300 	strex	r3, r2, [r1]
 8006266:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1e3      	bne.n	8006236 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3314      	adds	r3, #20
 8006274:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	e853 3f00 	ldrex	r3, [r3]
 800627c:	623b      	str	r3, [r7, #32]
   return(result);
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	f023 0301 	bic.w	r3, r3, #1
 8006284:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3314      	adds	r3, #20
 800628e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006292:	633a      	str	r2, [r7, #48]	@ 0x30
 8006294:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800629a:	e841 2300 	strex	r3, r2, [r1]
 800629e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1e3      	bne.n	800626e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	330c      	adds	r3, #12
 80062ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0310 	bic.w	r3, r3, #16
 80062ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	330c      	adds	r3, #12
 80062d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80062d8:	61fa      	str	r2, [r7, #28]
 80062da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	69b9      	ldr	r1, [r7, #24]
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	617b      	str	r3, [r7, #20]
   return(result);
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e3      	bne.n	80062b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f847 	bl	800638c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062fe:	e023      	b.n	8006348 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006308:	2b00      	cmp	r3, #0
 800630a:	d009      	beq.n	8006320 <HAL_UART_IRQHandler+0x4f4>
 800630c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fad4 	bl	80068c6 <UART_Transmit_IT>
    return;
 800631e:	e014      	b.n	800634a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00e      	beq.n	800634a <HAL_UART_IRQHandler+0x51e>
 800632c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fb14 	bl	8006966 <UART_EndTransmit_IT>
    return;
 800633e:	e004      	b.n	800634a <HAL_UART_IRQHandler+0x51e>
    return;
 8006340:	bf00      	nop
 8006342:	e002      	b.n	800634a <HAL_UART_IRQHandler+0x51e>
      return;
 8006344:	bf00      	nop
 8006346:	e000      	b.n	800634a <HAL_UART_IRQHandler+0x51e>
      return;
 8006348:	bf00      	nop
  }
}
 800634a:	37e8      	adds	r7, #232	@ 0xe8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b09c      	sub	sp, #112	@ 0x70
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d172      	bne.n	80064a6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80063c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063c2:	2200      	movs	r2, #0
 80063c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	330c      	adds	r3, #12
 80063cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	330c      	adds	r3, #12
 80063e4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80063e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80063e8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e5      	bne.n	80063c6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3314      	adds	r3, #20
 8006400:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006404:	e853 3f00 	ldrex	r3, [r3]
 8006408:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800640a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640c:	f023 0301 	bic.w	r3, r3, #1
 8006410:	667b      	str	r3, [r7, #100]	@ 0x64
 8006412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3314      	adds	r3, #20
 8006418:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800641a:	647a      	str	r2, [r7, #68]	@ 0x44
 800641c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006420:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1e5      	bne.n	80063fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800642e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3314      	adds	r3, #20
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	623b      	str	r3, [r7, #32]
   return(result);
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006444:	663b      	str	r3, [r7, #96]	@ 0x60
 8006446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3314      	adds	r3, #20
 800644c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800644e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006450:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800645c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e5      	bne.n	800642e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006464:	2220      	movs	r2, #32
 8006466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800646a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800646c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646e:	2b01      	cmp	r3, #1
 8006470:	d119      	bne.n	80064a6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	330c      	adds	r3, #12
 8006478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	60fb      	str	r3, [r7, #12]
   return(result);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f023 0310 	bic.w	r3, r3, #16
 8006488:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800648a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	330c      	adds	r3, #12
 8006490:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006492:	61fa      	str	r2, [r7, #28]
 8006494:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	69b9      	ldr	r1, [r7, #24]
 8006498:	69fa      	ldr	r2, [r7, #28]
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	617b      	str	r3, [r7, #20]
   return(result);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e5      	bne.n	8006472 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064a8:	2200      	movs	r2, #0
 80064aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d106      	bne.n	80064c2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064b8:	4619      	mov	r1, r3
 80064ba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80064bc:	f7ff ff66 	bl	800638c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064c0:	e002      	b.n	80064c8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80064c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80064c4:	f7fa fdb4 	bl	8001030 <HAL_UART_RxCpltCallback>
}
 80064c8:	bf00      	nop
 80064ca:	3770      	adds	r7, #112	@ 0x70
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d108      	bne.n	80064fe <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064f0:	085b      	lsrs	r3, r3, #1
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	4619      	mov	r1, r3
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f7ff ff48 	bl	800638c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064fc:	e002      	b.n	8006504 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f7ff ff30 	bl	8006364 <HAL_UART_RxHalfCpltCallback>
}
 8006504:	bf00      	nop
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006514:	2300      	movs	r3, #0
 8006516:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800651c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006528:	2b80      	cmp	r3, #128	@ 0x80
 800652a:	bf0c      	ite	eq
 800652c:	2301      	moveq	r3, #1
 800652e:	2300      	movne	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b21      	cmp	r3, #33	@ 0x21
 800653e:	d108      	bne.n	8006552 <UART_DMAError+0x46>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2200      	movs	r2, #0
 800654a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800654c:	68b8      	ldr	r0, [r7, #8]
 800654e:	f000 f91b 	bl	8006788 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800655c:	2b40      	cmp	r3, #64	@ 0x40
 800655e:	bf0c      	ite	eq
 8006560:	2301      	moveq	r3, #1
 8006562:	2300      	movne	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b22      	cmp	r3, #34	@ 0x22
 8006572:	d108      	bne.n	8006586 <UART_DMAError+0x7a>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d005      	beq.n	8006586 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2200      	movs	r2, #0
 800657e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006580:	68b8      	ldr	r0, [r7, #8]
 8006582:	f000 f929 	bl	80067d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658a:	f043 0210 	orr.w	r2, r3, #16
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006592:	68b8      	ldr	r0, [r7, #8]
 8006594:	f7ff fef0 	bl	8006378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006598:	bf00      	nop
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	4613      	mov	r3, r2
 80065ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b0:	e03b      	b.n	800662a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b8:	d037      	beq.n	800662a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ba:	f7fc f843 	bl	8002644 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	6a3a      	ldr	r2, [r7, #32]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d302      	bcc.n	80065d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e03a      	b.n	800664a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f003 0304 	and.w	r3, r3, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d023      	beq.n	800662a <UART_WaitOnFlagUntilTimeout+0x8a>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b80      	cmp	r3, #128	@ 0x80
 80065e6:	d020      	beq.n	800662a <UART_WaitOnFlagUntilTimeout+0x8a>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b40      	cmp	r3, #64	@ 0x40
 80065ec:	d01d      	beq.n	800662a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d116      	bne.n	800662a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80065fc:	2300      	movs	r3, #0
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 f8e0 	bl	80067d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2208      	movs	r2, #8
 800661c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e00f      	b.n	800664a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4013      	ands	r3, r2
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	429a      	cmp	r2, r3
 8006638:	bf0c      	ite	eq
 800663a:	2301      	moveq	r3, #1
 800663c:	2300      	movne	r3, #0
 800663e:	b2db      	uxtb	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	429a      	cmp	r2, r3
 8006646:	d0b4      	beq.n	80065b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b098      	sub	sp, #96	@ 0x60
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	4613      	mov	r3, r2
 8006660:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	88fa      	ldrh	r2, [r7, #6]
 800666c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2222      	movs	r2, #34	@ 0x22
 8006678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006680:	4a3e      	ldr	r2, [pc, #248]	@ (800677c <UART_Start_Receive_DMA+0x128>)
 8006682:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006688:	4a3d      	ldr	r2, [pc, #244]	@ (8006780 <UART_Start_Receive_DMA+0x12c>)
 800668a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006690:	4a3c      	ldr	r2, [pc, #240]	@ (8006784 <UART_Start_Receive_DMA+0x130>)
 8006692:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006698:	2200      	movs	r2, #0
 800669a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800669c:	f107 0308 	add.w	r3, r7, #8
 80066a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3304      	adds	r3, #4
 80066ac:	4619      	mov	r1, r3
 80066ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	88fb      	ldrh	r3, [r7, #6]
 80066b4:	f7fc f9b6 	bl	8002a24 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80066b8:	2300      	movs	r3, #0
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	613b      	str	r3, [r7, #16]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d019      	beq.n	800670a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	330c      	adds	r3, #12
 80066dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	330c      	adds	r3, #12
 80066f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066f6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80066f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80066fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e5      	bne.n	80066d6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3314      	adds	r3, #20
 8006710:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800671a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671c:	f043 0301 	orr.w	r3, r3, #1
 8006720:	657b      	str	r3, [r7, #84]	@ 0x54
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3314      	adds	r3, #20
 8006728:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800672a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800672c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006730:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e5      	bne.n	800670a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3314      	adds	r3, #20
 8006744:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	617b      	str	r3, [r7, #20]
   return(result);
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006754:	653b      	str	r3, [r7, #80]	@ 0x50
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3314      	adds	r3, #20
 800675c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800675e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006762:	6a39      	ldr	r1, [r7, #32]
 8006764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	61fb      	str	r3, [r7, #28]
   return(result);
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1e5      	bne.n	800673e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3760      	adds	r7, #96	@ 0x60
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	080063a5 	.word	0x080063a5
 8006780:	080064d1 	.word	0x080064d1
 8006784:	0800650d 	.word	0x0800650d

08006788 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b089      	sub	sp, #36	@ 0x24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	330c      	adds	r3, #12
 8006796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	60bb      	str	r3, [r7, #8]
   return(result);
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80067a6:	61fb      	str	r3, [r7, #28]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	330c      	adds	r3, #12
 80067ae:	69fa      	ldr	r2, [r7, #28]
 80067b0:	61ba      	str	r2, [r7, #24]
 80067b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6979      	ldr	r1, [r7, #20]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	613b      	str	r3, [r7, #16]
   return(result);
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e5      	bne.n	8006790 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80067cc:	bf00      	nop
 80067ce:	3724      	adds	r7, #36	@ 0x24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b095      	sub	sp, #84	@ 0x54
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	330c      	adds	r3, #12
 80067e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006800:	643a      	str	r2, [r7, #64]	@ 0x40
 8006802:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006806:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800680e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e5      	bne.n	80067e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3314      	adds	r3, #20
 800681a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	e853 3f00 	ldrex	r3, [r3]
 8006822:	61fb      	str	r3, [r7, #28]
   return(result);
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f023 0301 	bic.w	r3, r3, #1
 800682a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3314      	adds	r3, #20
 8006832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006834:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006836:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006838:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800683a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800683c:	e841 2300 	strex	r3, r2, [r1]
 8006840:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1e5      	bne.n	8006814 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684c:	2b01      	cmp	r3, #1
 800684e:	d119      	bne.n	8006884 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	330c      	adds	r3, #12
 8006856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f023 0310 	bic.w	r3, r3, #16
 8006866:	647b      	str	r3, [r7, #68]	@ 0x44
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	330c      	adds	r3, #12
 800686e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006870:	61ba      	str	r2, [r7, #24]
 8006872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006874:	6979      	ldr	r1, [r7, #20]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	e841 2300 	strex	r3, r2, [r1]
 800687c:	613b      	str	r3, [r7, #16]
   return(result);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1e5      	bne.n	8006850 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2220      	movs	r2, #32
 8006888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006892:	bf00      	nop
 8006894:	3754      	adds	r7, #84	@ 0x54
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f7ff fd5d 	bl	8006378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068be:	bf00      	nop
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b085      	sub	sp, #20
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b21      	cmp	r3, #33	@ 0x21
 80068d8:	d13e      	bne.n	8006958 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068e2:	d114      	bne.n	800690e <UART_Transmit_IT+0x48>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d110      	bne.n	800690e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006900:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	1c9a      	adds	r2, r3, #2
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	621a      	str	r2, [r3, #32]
 800690c:	e008      	b.n	8006920 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	1c59      	adds	r1, r3, #1
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6211      	str	r1, [r2, #32]
 8006918:	781a      	ldrb	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29b      	uxth	r3, r3
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4619      	mov	r1, r3
 800692e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10f      	bne.n	8006954 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006942:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006952:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	e000      	b.n	800695a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006958:	2302      	movs	r3, #2
  }
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800697c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff fce2 	bl	8006350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b08c      	sub	sp, #48	@ 0x30
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b22      	cmp	r3, #34	@ 0x22
 80069a8:	f040 80ae 	bne.w	8006b08 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069b4:	d117      	bne.n	80069e6 <UART_Receive_IT+0x50>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d113      	bne.n	80069e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069de:	1c9a      	adds	r2, r3, #2
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80069e4:	e026      	b.n	8006a34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80069ec:	2300      	movs	r3, #0
 80069ee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f8:	d007      	beq.n	8006a0a <UART_Receive_IT+0x74>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <UART_Receive_IT+0x82>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d106      	bne.n	8006a18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	e008      	b.n	8006a2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	4619      	mov	r1, r3
 8006a42:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d15d      	bne.n	8006b04 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0220 	bic.w	r2, r2, #32
 8006a56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695a      	ldr	r2, [r3, #20]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0201 	bic.w	r2, r2, #1
 8006a76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d135      	bne.n	8006afa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	330c      	adds	r3, #12
 8006a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f023 0310 	bic.w	r3, r3, #16
 8006aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ab4:	623a      	str	r2, [r7, #32]
 8006ab6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	69f9      	ldr	r1, [r7, #28]
 8006aba:	6a3a      	ldr	r2, [r7, #32]
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e5      	bne.n	8006a94 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0310 	and.w	r3, r3, #16
 8006ad2:	2b10      	cmp	r3, #16
 8006ad4:	d10a      	bne.n	8006aec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff fc4a 	bl	800638c <HAL_UARTEx_RxEventCallback>
 8006af8:	e002      	b.n	8006b00 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fa fa98 	bl	8001030 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	e002      	b.n	8006b0a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	e000      	b.n	8006b0a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006b08:	2302      	movs	r3, #2
  }
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3730      	adds	r7, #48	@ 0x30
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b18:	b0c0      	sub	sp, #256	@ 0x100
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b30:	68d9      	ldr	r1, [r3, #12]
 8006b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	ea40 0301 	orr.w	r3, r0, r1
 8006b3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	431a      	orrs	r2, r3
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b6c:	f021 010c 	bic.w	r1, r1, #12
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8e:	6999      	ldr	r1, [r3, #24]
 8006b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	ea40 0301 	orr.w	r3, r0, r1
 8006b9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b8f      	ldr	r3, [pc, #572]	@ (8006de0 <UART_SetConfig+0x2cc>)
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d005      	beq.n	8006bb4 <UART_SetConfig+0xa0>
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	4b8d      	ldr	r3, [pc, #564]	@ (8006de4 <UART_SetConfig+0x2d0>)
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d104      	bne.n	8006bbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bb4:	f7fe f9fe 	bl	8004fb4 <HAL_RCC_GetPCLK2Freq>
 8006bb8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006bbc:	e003      	b.n	8006bc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bbe:	f7fe f9e5 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8006bc2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bd0:	f040 810c 	bne.w	8006dec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bde:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006be2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006be6:	4622      	mov	r2, r4
 8006be8:	462b      	mov	r3, r5
 8006bea:	1891      	adds	r1, r2, r2
 8006bec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006bee:	415b      	adcs	r3, r3
 8006bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bf2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	eb12 0801 	adds.w	r8, r2, r1
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	eb43 0901 	adc.w	r9, r3, r1
 8006c02:	f04f 0200 	mov.w	r2, #0
 8006c06:	f04f 0300 	mov.w	r3, #0
 8006c0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c16:	4690      	mov	r8, r2
 8006c18:	4699      	mov	r9, r3
 8006c1a:	4623      	mov	r3, r4
 8006c1c:	eb18 0303 	adds.w	r3, r8, r3
 8006c20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c24:	462b      	mov	r3, r5
 8006c26:	eb49 0303 	adc.w	r3, r9, r3
 8006c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c42:	460b      	mov	r3, r1
 8006c44:	18db      	adds	r3, r3, r3
 8006c46:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c48:	4613      	mov	r3, r2
 8006c4a:	eb42 0303 	adc.w	r3, r2, r3
 8006c4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c58:	f7fa f81e 	bl	8000c98 <__aeabi_uldivmod>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4b61      	ldr	r3, [pc, #388]	@ (8006de8 <UART_SetConfig+0x2d4>)
 8006c62:	fba3 2302 	umull	r2, r3, r3, r2
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	011c      	lsls	r4, r3, #4
 8006c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c7c:	4642      	mov	r2, r8
 8006c7e:	464b      	mov	r3, r9
 8006c80:	1891      	adds	r1, r2, r2
 8006c82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c84:	415b      	adcs	r3, r3
 8006c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c8c:	4641      	mov	r1, r8
 8006c8e:	eb12 0a01 	adds.w	sl, r2, r1
 8006c92:	4649      	mov	r1, r9
 8006c94:	eb43 0b01 	adc.w	fp, r3, r1
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ca4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ca8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cac:	4692      	mov	sl, r2
 8006cae:	469b      	mov	fp, r3
 8006cb0:	4643      	mov	r3, r8
 8006cb2:	eb1a 0303 	adds.w	r3, sl, r3
 8006cb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cba:	464b      	mov	r3, r9
 8006cbc:	eb4b 0303 	adc.w	r3, fp, r3
 8006cc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cd0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006cd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	18db      	adds	r3, r3, r3
 8006cdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cde:	4613      	mov	r3, r2
 8006ce0:	eb42 0303 	adc.w	r3, r2, r3
 8006ce4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ce6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006cea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006cee:	f7f9 ffd3 	bl	8000c98 <__aeabi_uldivmod>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	4b3b      	ldr	r3, [pc, #236]	@ (8006de8 <UART_SetConfig+0x2d4>)
 8006cfa:	fba3 2301 	umull	r2, r3, r3, r1
 8006cfe:	095b      	lsrs	r3, r3, #5
 8006d00:	2264      	movs	r2, #100	@ 0x64
 8006d02:	fb02 f303 	mul.w	r3, r2, r3
 8006d06:	1acb      	subs	r3, r1, r3
 8006d08:	00db      	lsls	r3, r3, #3
 8006d0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d0e:	4b36      	ldr	r3, [pc, #216]	@ (8006de8 <UART_SetConfig+0x2d4>)
 8006d10:	fba3 2302 	umull	r2, r3, r3, r2
 8006d14:	095b      	lsrs	r3, r3, #5
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d1c:	441c      	add	r4, r3
 8006d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d30:	4642      	mov	r2, r8
 8006d32:	464b      	mov	r3, r9
 8006d34:	1891      	adds	r1, r2, r2
 8006d36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d38:	415b      	adcs	r3, r3
 8006d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d40:	4641      	mov	r1, r8
 8006d42:	1851      	adds	r1, r2, r1
 8006d44:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d46:	4649      	mov	r1, r9
 8006d48:	414b      	adcs	r3, r1
 8006d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d58:	4659      	mov	r1, fp
 8006d5a:	00cb      	lsls	r3, r1, #3
 8006d5c:	4651      	mov	r1, sl
 8006d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d62:	4651      	mov	r1, sl
 8006d64:	00ca      	lsls	r2, r1, #3
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4642      	mov	r2, r8
 8006d6e:	189b      	adds	r3, r3, r2
 8006d70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d74:	464b      	mov	r3, r9
 8006d76:	460a      	mov	r2, r1
 8006d78:	eb42 0303 	adc.w	r3, r2, r3
 8006d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d94:	460b      	mov	r3, r1
 8006d96:	18db      	adds	r3, r3, r3
 8006d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	eb42 0303 	adc.w	r3, r2, r3
 8006da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006da2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006da6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006daa:	f7f9 ff75 	bl	8000c98 <__aeabi_uldivmod>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4b0d      	ldr	r3, [pc, #52]	@ (8006de8 <UART_SetConfig+0x2d4>)
 8006db4:	fba3 1302 	umull	r1, r3, r3, r2
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	2164      	movs	r1, #100	@ 0x64
 8006dbc:	fb01 f303 	mul.w	r3, r1, r3
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	3332      	adds	r3, #50	@ 0x32
 8006dc6:	4a08      	ldr	r2, [pc, #32]	@ (8006de8 <UART_SetConfig+0x2d4>)
 8006dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	f003 0207 	and.w	r2, r3, #7
 8006dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4422      	add	r2, r4
 8006dda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ddc:	e106      	b.n	8006fec <UART_SetConfig+0x4d8>
 8006dde:	bf00      	nop
 8006de0:	40011000 	.word	0x40011000
 8006de4:	40011400 	.word	0x40011400
 8006de8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006df6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006dfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006dfe:	4642      	mov	r2, r8
 8006e00:	464b      	mov	r3, r9
 8006e02:	1891      	adds	r1, r2, r2
 8006e04:	6239      	str	r1, [r7, #32]
 8006e06:	415b      	adcs	r3, r3
 8006e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e0e:	4641      	mov	r1, r8
 8006e10:	1854      	adds	r4, r2, r1
 8006e12:	4649      	mov	r1, r9
 8006e14:	eb43 0501 	adc.w	r5, r3, r1
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	f04f 0300 	mov.w	r3, #0
 8006e20:	00eb      	lsls	r3, r5, #3
 8006e22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e26:	00e2      	lsls	r2, r4, #3
 8006e28:	4614      	mov	r4, r2
 8006e2a:	461d      	mov	r5, r3
 8006e2c:	4643      	mov	r3, r8
 8006e2e:	18e3      	adds	r3, r4, r3
 8006e30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e34:	464b      	mov	r3, r9
 8006e36:	eb45 0303 	adc.w	r3, r5, r3
 8006e3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e4e:	f04f 0200 	mov.w	r2, #0
 8006e52:	f04f 0300 	mov.w	r3, #0
 8006e56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	008b      	lsls	r3, r1, #2
 8006e5e:	4621      	mov	r1, r4
 8006e60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e64:	4621      	mov	r1, r4
 8006e66:	008a      	lsls	r2, r1, #2
 8006e68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e6c:	f7f9 ff14 	bl	8000c98 <__aeabi_uldivmod>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4b60      	ldr	r3, [pc, #384]	@ (8006ff8 <UART_SetConfig+0x4e4>)
 8006e76:	fba3 2302 	umull	r2, r3, r3, r2
 8006e7a:	095b      	lsrs	r3, r3, #5
 8006e7c:	011c      	lsls	r4, r3, #4
 8006e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e90:	4642      	mov	r2, r8
 8006e92:	464b      	mov	r3, r9
 8006e94:	1891      	adds	r1, r2, r2
 8006e96:	61b9      	str	r1, [r7, #24]
 8006e98:	415b      	adcs	r3, r3
 8006e9a:	61fb      	str	r3, [r7, #28]
 8006e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	1851      	adds	r1, r2, r1
 8006ea4:	6139      	str	r1, [r7, #16]
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	414b      	adcs	r3, r1
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	f04f 0300 	mov.w	r3, #0
 8006eb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eb8:	4659      	mov	r1, fp
 8006eba:	00cb      	lsls	r3, r1, #3
 8006ebc:	4651      	mov	r1, sl
 8006ebe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ec2:	4651      	mov	r1, sl
 8006ec4:	00ca      	lsls	r2, r1, #3
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4603      	mov	r3, r0
 8006ecc:	4642      	mov	r2, r8
 8006ece:	189b      	adds	r3, r3, r2
 8006ed0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ed4:	464b      	mov	r3, r9
 8006ed6:	460a      	mov	r2, r1
 8006ed8:	eb42 0303 	adc.w	r3, r2, r3
 8006edc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006eea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ef8:	4649      	mov	r1, r9
 8006efa:	008b      	lsls	r3, r1, #2
 8006efc:	4641      	mov	r1, r8
 8006efe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f02:	4641      	mov	r1, r8
 8006f04:	008a      	lsls	r2, r1, #2
 8006f06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f0a:	f7f9 fec5 	bl	8000c98 <__aeabi_uldivmod>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4611      	mov	r1, r2
 8006f14:	4b38      	ldr	r3, [pc, #224]	@ (8006ff8 <UART_SetConfig+0x4e4>)
 8006f16:	fba3 2301 	umull	r2, r3, r3, r1
 8006f1a:	095b      	lsrs	r3, r3, #5
 8006f1c:	2264      	movs	r2, #100	@ 0x64
 8006f1e:	fb02 f303 	mul.w	r3, r2, r3
 8006f22:	1acb      	subs	r3, r1, r3
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	3332      	adds	r3, #50	@ 0x32
 8006f28:	4a33      	ldr	r2, [pc, #204]	@ (8006ff8 <UART_SetConfig+0x4e4>)
 8006f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f34:	441c      	add	r4, r3
 8006f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f44:	4642      	mov	r2, r8
 8006f46:	464b      	mov	r3, r9
 8006f48:	1891      	adds	r1, r2, r2
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	415b      	adcs	r3, r3
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f54:	4641      	mov	r1, r8
 8006f56:	1851      	adds	r1, r2, r1
 8006f58:	6039      	str	r1, [r7, #0]
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	414b      	adcs	r3, r1
 8006f5e:	607b      	str	r3, [r7, #4]
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f6c:	4659      	mov	r1, fp
 8006f6e:	00cb      	lsls	r3, r1, #3
 8006f70:	4651      	mov	r1, sl
 8006f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f76:	4651      	mov	r1, sl
 8006f78:	00ca      	lsls	r2, r1, #3
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4603      	mov	r3, r0
 8006f80:	4642      	mov	r2, r8
 8006f82:	189b      	adds	r3, r3, r2
 8006f84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f86:	464b      	mov	r3, r9
 8006f88:	460a      	mov	r2, r1
 8006f8a:	eb42 0303 	adc.w	r3, r2, r3
 8006f8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006fa8:	4649      	mov	r1, r9
 8006faa:	008b      	lsls	r3, r1, #2
 8006fac:	4641      	mov	r1, r8
 8006fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fb2:	4641      	mov	r1, r8
 8006fb4:	008a      	lsls	r2, r1, #2
 8006fb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006fba:	f7f9 fe6d 	bl	8000c98 <__aeabi_uldivmod>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff8 <UART_SetConfig+0x4e4>)
 8006fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	2164      	movs	r1, #100	@ 0x64
 8006fcc:	fb01 f303 	mul.w	r3, r1, r3
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	011b      	lsls	r3, r3, #4
 8006fd4:	3332      	adds	r3, #50	@ 0x32
 8006fd6:	4a08      	ldr	r2, [pc, #32]	@ (8006ff8 <UART_SetConfig+0x4e4>)
 8006fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fdc:	095b      	lsrs	r3, r3, #5
 8006fde:	f003 020f 	and.w	r2, r3, #15
 8006fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4422      	add	r2, r4
 8006fea:	609a      	str	r2, [r3, #8]
}
 8006fec:	bf00      	nop
 8006fee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ff8:	51eb851f 	.word	0x51eb851f

08006ffc <__cvt>:
 8006ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007000:	ec57 6b10 	vmov	r6, r7, d0
 8007004:	2f00      	cmp	r7, #0
 8007006:	460c      	mov	r4, r1
 8007008:	4619      	mov	r1, r3
 800700a:	463b      	mov	r3, r7
 800700c:	bfbb      	ittet	lt
 800700e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007012:	461f      	movlt	r7, r3
 8007014:	2300      	movge	r3, #0
 8007016:	232d      	movlt	r3, #45	@ 0x2d
 8007018:	700b      	strb	r3, [r1, #0]
 800701a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800701c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007020:	4691      	mov	r9, r2
 8007022:	f023 0820 	bic.w	r8, r3, #32
 8007026:	bfbc      	itt	lt
 8007028:	4632      	movlt	r2, r6
 800702a:	4616      	movlt	r6, r2
 800702c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007030:	d005      	beq.n	800703e <__cvt+0x42>
 8007032:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007036:	d100      	bne.n	800703a <__cvt+0x3e>
 8007038:	3401      	adds	r4, #1
 800703a:	2102      	movs	r1, #2
 800703c:	e000      	b.n	8007040 <__cvt+0x44>
 800703e:	2103      	movs	r1, #3
 8007040:	ab03      	add	r3, sp, #12
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	ab02      	add	r3, sp, #8
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	ec47 6b10 	vmov	d0, r6, r7
 800704c:	4653      	mov	r3, sl
 800704e:	4622      	mov	r2, r4
 8007050:	f001 f972 	bl	8008338 <_dtoa_r>
 8007054:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007058:	4605      	mov	r5, r0
 800705a:	d119      	bne.n	8007090 <__cvt+0x94>
 800705c:	f019 0f01 	tst.w	r9, #1
 8007060:	d00e      	beq.n	8007080 <__cvt+0x84>
 8007062:	eb00 0904 	add.w	r9, r0, r4
 8007066:	2200      	movs	r2, #0
 8007068:	2300      	movs	r3, #0
 800706a:	4630      	mov	r0, r6
 800706c:	4639      	mov	r1, r7
 800706e:	f7f9 fd33 	bl	8000ad8 <__aeabi_dcmpeq>
 8007072:	b108      	cbz	r0, 8007078 <__cvt+0x7c>
 8007074:	f8cd 900c 	str.w	r9, [sp, #12]
 8007078:	2230      	movs	r2, #48	@ 0x30
 800707a:	9b03      	ldr	r3, [sp, #12]
 800707c:	454b      	cmp	r3, r9
 800707e:	d31e      	bcc.n	80070be <__cvt+0xc2>
 8007080:	9b03      	ldr	r3, [sp, #12]
 8007082:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007084:	1b5b      	subs	r3, r3, r5
 8007086:	4628      	mov	r0, r5
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	b004      	add	sp, #16
 800708c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007090:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007094:	eb00 0904 	add.w	r9, r0, r4
 8007098:	d1e5      	bne.n	8007066 <__cvt+0x6a>
 800709a:	7803      	ldrb	r3, [r0, #0]
 800709c:	2b30      	cmp	r3, #48	@ 0x30
 800709e:	d10a      	bne.n	80070b6 <__cvt+0xba>
 80070a0:	2200      	movs	r2, #0
 80070a2:	2300      	movs	r3, #0
 80070a4:	4630      	mov	r0, r6
 80070a6:	4639      	mov	r1, r7
 80070a8:	f7f9 fd16 	bl	8000ad8 <__aeabi_dcmpeq>
 80070ac:	b918      	cbnz	r0, 80070b6 <__cvt+0xba>
 80070ae:	f1c4 0401 	rsb	r4, r4, #1
 80070b2:	f8ca 4000 	str.w	r4, [sl]
 80070b6:	f8da 3000 	ldr.w	r3, [sl]
 80070ba:	4499      	add	r9, r3
 80070bc:	e7d3      	b.n	8007066 <__cvt+0x6a>
 80070be:	1c59      	adds	r1, r3, #1
 80070c0:	9103      	str	r1, [sp, #12]
 80070c2:	701a      	strb	r2, [r3, #0]
 80070c4:	e7d9      	b.n	800707a <__cvt+0x7e>

080070c6 <__exponent>:
 80070c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070c8:	2900      	cmp	r1, #0
 80070ca:	bfba      	itte	lt
 80070cc:	4249      	neglt	r1, r1
 80070ce:	232d      	movlt	r3, #45	@ 0x2d
 80070d0:	232b      	movge	r3, #43	@ 0x2b
 80070d2:	2909      	cmp	r1, #9
 80070d4:	7002      	strb	r2, [r0, #0]
 80070d6:	7043      	strb	r3, [r0, #1]
 80070d8:	dd29      	ble.n	800712e <__exponent+0x68>
 80070da:	f10d 0307 	add.w	r3, sp, #7
 80070de:	461d      	mov	r5, r3
 80070e0:	270a      	movs	r7, #10
 80070e2:	461a      	mov	r2, r3
 80070e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80070e8:	fb07 1416 	mls	r4, r7, r6, r1
 80070ec:	3430      	adds	r4, #48	@ 0x30
 80070ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 80070f2:	460c      	mov	r4, r1
 80070f4:	2c63      	cmp	r4, #99	@ 0x63
 80070f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80070fa:	4631      	mov	r1, r6
 80070fc:	dcf1      	bgt.n	80070e2 <__exponent+0x1c>
 80070fe:	3130      	adds	r1, #48	@ 0x30
 8007100:	1e94      	subs	r4, r2, #2
 8007102:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007106:	1c41      	adds	r1, r0, #1
 8007108:	4623      	mov	r3, r4
 800710a:	42ab      	cmp	r3, r5
 800710c:	d30a      	bcc.n	8007124 <__exponent+0x5e>
 800710e:	f10d 0309 	add.w	r3, sp, #9
 8007112:	1a9b      	subs	r3, r3, r2
 8007114:	42ac      	cmp	r4, r5
 8007116:	bf88      	it	hi
 8007118:	2300      	movhi	r3, #0
 800711a:	3302      	adds	r3, #2
 800711c:	4403      	add	r3, r0
 800711e:	1a18      	subs	r0, r3, r0
 8007120:	b003      	add	sp, #12
 8007122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007124:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007128:	f801 6f01 	strb.w	r6, [r1, #1]!
 800712c:	e7ed      	b.n	800710a <__exponent+0x44>
 800712e:	2330      	movs	r3, #48	@ 0x30
 8007130:	3130      	adds	r1, #48	@ 0x30
 8007132:	7083      	strb	r3, [r0, #2]
 8007134:	70c1      	strb	r1, [r0, #3]
 8007136:	1d03      	adds	r3, r0, #4
 8007138:	e7f1      	b.n	800711e <__exponent+0x58>
	...

0800713c <_printf_float>:
 800713c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007140:	b08d      	sub	sp, #52	@ 0x34
 8007142:	460c      	mov	r4, r1
 8007144:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007148:	4616      	mov	r6, r2
 800714a:	461f      	mov	r7, r3
 800714c:	4605      	mov	r5, r0
 800714e:	f000 ffed 	bl	800812c <_localeconv_r>
 8007152:	6803      	ldr	r3, [r0, #0]
 8007154:	9304      	str	r3, [sp, #16]
 8007156:	4618      	mov	r0, r3
 8007158:	f7f9 f892 	bl	8000280 <strlen>
 800715c:	2300      	movs	r3, #0
 800715e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007160:	f8d8 3000 	ldr.w	r3, [r8]
 8007164:	9005      	str	r0, [sp, #20]
 8007166:	3307      	adds	r3, #7
 8007168:	f023 0307 	bic.w	r3, r3, #7
 800716c:	f103 0208 	add.w	r2, r3, #8
 8007170:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007174:	f8d4 b000 	ldr.w	fp, [r4]
 8007178:	f8c8 2000 	str.w	r2, [r8]
 800717c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007180:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007184:	9307      	str	r3, [sp, #28]
 8007186:	f8cd 8018 	str.w	r8, [sp, #24]
 800718a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800718e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007192:	4b9c      	ldr	r3, [pc, #624]	@ (8007404 <_printf_float+0x2c8>)
 8007194:	f04f 32ff 	mov.w	r2, #4294967295
 8007198:	f7f9 fcd0 	bl	8000b3c <__aeabi_dcmpun>
 800719c:	bb70      	cbnz	r0, 80071fc <_printf_float+0xc0>
 800719e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071a2:	4b98      	ldr	r3, [pc, #608]	@ (8007404 <_printf_float+0x2c8>)
 80071a4:	f04f 32ff 	mov.w	r2, #4294967295
 80071a8:	f7f9 fcaa 	bl	8000b00 <__aeabi_dcmple>
 80071ac:	bb30      	cbnz	r0, 80071fc <_printf_float+0xc0>
 80071ae:	2200      	movs	r2, #0
 80071b0:	2300      	movs	r3, #0
 80071b2:	4640      	mov	r0, r8
 80071b4:	4649      	mov	r1, r9
 80071b6:	f7f9 fc99 	bl	8000aec <__aeabi_dcmplt>
 80071ba:	b110      	cbz	r0, 80071c2 <_printf_float+0x86>
 80071bc:	232d      	movs	r3, #45	@ 0x2d
 80071be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071c2:	4a91      	ldr	r2, [pc, #580]	@ (8007408 <_printf_float+0x2cc>)
 80071c4:	4b91      	ldr	r3, [pc, #580]	@ (800740c <_printf_float+0x2d0>)
 80071c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80071ca:	bf8c      	ite	hi
 80071cc:	4690      	movhi	r8, r2
 80071ce:	4698      	movls	r8, r3
 80071d0:	2303      	movs	r3, #3
 80071d2:	6123      	str	r3, [r4, #16]
 80071d4:	f02b 0304 	bic.w	r3, fp, #4
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	f04f 0900 	mov.w	r9, #0
 80071de:	9700      	str	r7, [sp, #0]
 80071e0:	4633      	mov	r3, r6
 80071e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80071e4:	4621      	mov	r1, r4
 80071e6:	4628      	mov	r0, r5
 80071e8:	f000 f9d2 	bl	8007590 <_printf_common>
 80071ec:	3001      	adds	r0, #1
 80071ee:	f040 808d 	bne.w	800730c <_printf_float+0x1d0>
 80071f2:	f04f 30ff 	mov.w	r0, #4294967295
 80071f6:	b00d      	add	sp, #52	@ 0x34
 80071f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fc:	4642      	mov	r2, r8
 80071fe:	464b      	mov	r3, r9
 8007200:	4640      	mov	r0, r8
 8007202:	4649      	mov	r1, r9
 8007204:	f7f9 fc9a 	bl	8000b3c <__aeabi_dcmpun>
 8007208:	b140      	cbz	r0, 800721c <_printf_float+0xe0>
 800720a:	464b      	mov	r3, r9
 800720c:	2b00      	cmp	r3, #0
 800720e:	bfbc      	itt	lt
 8007210:	232d      	movlt	r3, #45	@ 0x2d
 8007212:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007216:	4a7e      	ldr	r2, [pc, #504]	@ (8007410 <_printf_float+0x2d4>)
 8007218:	4b7e      	ldr	r3, [pc, #504]	@ (8007414 <_printf_float+0x2d8>)
 800721a:	e7d4      	b.n	80071c6 <_printf_float+0x8a>
 800721c:	6863      	ldr	r3, [r4, #4]
 800721e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007222:	9206      	str	r2, [sp, #24]
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	d13b      	bne.n	80072a0 <_printf_float+0x164>
 8007228:	2306      	movs	r3, #6
 800722a:	6063      	str	r3, [r4, #4]
 800722c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007230:	2300      	movs	r3, #0
 8007232:	6022      	str	r2, [r4, #0]
 8007234:	9303      	str	r3, [sp, #12]
 8007236:	ab0a      	add	r3, sp, #40	@ 0x28
 8007238:	e9cd a301 	strd	sl, r3, [sp, #4]
 800723c:	ab09      	add	r3, sp, #36	@ 0x24
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	6861      	ldr	r1, [r4, #4]
 8007242:	ec49 8b10 	vmov	d0, r8, r9
 8007246:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800724a:	4628      	mov	r0, r5
 800724c:	f7ff fed6 	bl	8006ffc <__cvt>
 8007250:	9b06      	ldr	r3, [sp, #24]
 8007252:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007254:	2b47      	cmp	r3, #71	@ 0x47
 8007256:	4680      	mov	r8, r0
 8007258:	d129      	bne.n	80072ae <_printf_float+0x172>
 800725a:	1cc8      	adds	r0, r1, #3
 800725c:	db02      	blt.n	8007264 <_printf_float+0x128>
 800725e:	6863      	ldr	r3, [r4, #4]
 8007260:	4299      	cmp	r1, r3
 8007262:	dd41      	ble.n	80072e8 <_printf_float+0x1ac>
 8007264:	f1aa 0a02 	sub.w	sl, sl, #2
 8007268:	fa5f fa8a 	uxtb.w	sl, sl
 800726c:	3901      	subs	r1, #1
 800726e:	4652      	mov	r2, sl
 8007270:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007274:	9109      	str	r1, [sp, #36]	@ 0x24
 8007276:	f7ff ff26 	bl	80070c6 <__exponent>
 800727a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800727c:	1813      	adds	r3, r2, r0
 800727e:	2a01      	cmp	r2, #1
 8007280:	4681      	mov	r9, r0
 8007282:	6123      	str	r3, [r4, #16]
 8007284:	dc02      	bgt.n	800728c <_printf_float+0x150>
 8007286:	6822      	ldr	r2, [r4, #0]
 8007288:	07d2      	lsls	r2, r2, #31
 800728a:	d501      	bpl.n	8007290 <_printf_float+0x154>
 800728c:	3301      	adds	r3, #1
 800728e:	6123      	str	r3, [r4, #16]
 8007290:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0a2      	beq.n	80071de <_printf_float+0xa2>
 8007298:	232d      	movs	r3, #45	@ 0x2d
 800729a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800729e:	e79e      	b.n	80071de <_printf_float+0xa2>
 80072a0:	9a06      	ldr	r2, [sp, #24]
 80072a2:	2a47      	cmp	r2, #71	@ 0x47
 80072a4:	d1c2      	bne.n	800722c <_printf_float+0xf0>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1c0      	bne.n	800722c <_printf_float+0xf0>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e7bd      	b.n	800722a <_printf_float+0xee>
 80072ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80072b2:	d9db      	bls.n	800726c <_printf_float+0x130>
 80072b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80072b8:	d118      	bne.n	80072ec <_printf_float+0x1b0>
 80072ba:	2900      	cmp	r1, #0
 80072bc:	6863      	ldr	r3, [r4, #4]
 80072be:	dd0b      	ble.n	80072d8 <_printf_float+0x19c>
 80072c0:	6121      	str	r1, [r4, #16]
 80072c2:	b913      	cbnz	r3, 80072ca <_printf_float+0x18e>
 80072c4:	6822      	ldr	r2, [r4, #0]
 80072c6:	07d0      	lsls	r0, r2, #31
 80072c8:	d502      	bpl.n	80072d0 <_printf_float+0x194>
 80072ca:	3301      	adds	r3, #1
 80072cc:	440b      	add	r3, r1
 80072ce:	6123      	str	r3, [r4, #16]
 80072d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80072d2:	f04f 0900 	mov.w	r9, #0
 80072d6:	e7db      	b.n	8007290 <_printf_float+0x154>
 80072d8:	b913      	cbnz	r3, 80072e0 <_printf_float+0x1a4>
 80072da:	6822      	ldr	r2, [r4, #0]
 80072dc:	07d2      	lsls	r2, r2, #31
 80072de:	d501      	bpl.n	80072e4 <_printf_float+0x1a8>
 80072e0:	3302      	adds	r3, #2
 80072e2:	e7f4      	b.n	80072ce <_printf_float+0x192>
 80072e4:	2301      	movs	r3, #1
 80072e6:	e7f2      	b.n	80072ce <_printf_float+0x192>
 80072e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80072ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072ee:	4299      	cmp	r1, r3
 80072f0:	db05      	blt.n	80072fe <_printf_float+0x1c2>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	6121      	str	r1, [r4, #16]
 80072f6:	07d8      	lsls	r0, r3, #31
 80072f8:	d5ea      	bpl.n	80072d0 <_printf_float+0x194>
 80072fa:	1c4b      	adds	r3, r1, #1
 80072fc:	e7e7      	b.n	80072ce <_printf_float+0x192>
 80072fe:	2900      	cmp	r1, #0
 8007300:	bfd4      	ite	le
 8007302:	f1c1 0202 	rsble	r2, r1, #2
 8007306:	2201      	movgt	r2, #1
 8007308:	4413      	add	r3, r2
 800730a:	e7e0      	b.n	80072ce <_printf_float+0x192>
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	055a      	lsls	r2, r3, #21
 8007310:	d407      	bmi.n	8007322 <_printf_float+0x1e6>
 8007312:	6923      	ldr	r3, [r4, #16]
 8007314:	4642      	mov	r2, r8
 8007316:	4631      	mov	r1, r6
 8007318:	4628      	mov	r0, r5
 800731a:	47b8      	blx	r7
 800731c:	3001      	adds	r0, #1
 800731e:	d12b      	bne.n	8007378 <_printf_float+0x23c>
 8007320:	e767      	b.n	80071f2 <_printf_float+0xb6>
 8007322:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007326:	f240 80dd 	bls.w	80074e4 <_printf_float+0x3a8>
 800732a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800732e:	2200      	movs	r2, #0
 8007330:	2300      	movs	r3, #0
 8007332:	f7f9 fbd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007336:	2800      	cmp	r0, #0
 8007338:	d033      	beq.n	80073a2 <_printf_float+0x266>
 800733a:	4a37      	ldr	r2, [pc, #220]	@ (8007418 <_printf_float+0x2dc>)
 800733c:	2301      	movs	r3, #1
 800733e:	4631      	mov	r1, r6
 8007340:	4628      	mov	r0, r5
 8007342:	47b8      	blx	r7
 8007344:	3001      	adds	r0, #1
 8007346:	f43f af54 	beq.w	80071f2 <_printf_float+0xb6>
 800734a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800734e:	4543      	cmp	r3, r8
 8007350:	db02      	blt.n	8007358 <_printf_float+0x21c>
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	07d8      	lsls	r0, r3, #31
 8007356:	d50f      	bpl.n	8007378 <_printf_float+0x23c>
 8007358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800735c:	4631      	mov	r1, r6
 800735e:	4628      	mov	r0, r5
 8007360:	47b8      	blx	r7
 8007362:	3001      	adds	r0, #1
 8007364:	f43f af45 	beq.w	80071f2 <_printf_float+0xb6>
 8007368:	f04f 0900 	mov.w	r9, #0
 800736c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007370:	f104 0a1a 	add.w	sl, r4, #26
 8007374:	45c8      	cmp	r8, r9
 8007376:	dc09      	bgt.n	800738c <_printf_float+0x250>
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	079b      	lsls	r3, r3, #30
 800737c:	f100 8103 	bmi.w	8007586 <_printf_float+0x44a>
 8007380:	68e0      	ldr	r0, [r4, #12]
 8007382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007384:	4298      	cmp	r0, r3
 8007386:	bfb8      	it	lt
 8007388:	4618      	movlt	r0, r3
 800738a:	e734      	b.n	80071f6 <_printf_float+0xba>
 800738c:	2301      	movs	r3, #1
 800738e:	4652      	mov	r2, sl
 8007390:	4631      	mov	r1, r6
 8007392:	4628      	mov	r0, r5
 8007394:	47b8      	blx	r7
 8007396:	3001      	adds	r0, #1
 8007398:	f43f af2b 	beq.w	80071f2 <_printf_float+0xb6>
 800739c:	f109 0901 	add.w	r9, r9, #1
 80073a0:	e7e8      	b.n	8007374 <_printf_float+0x238>
 80073a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	dc39      	bgt.n	800741c <_printf_float+0x2e0>
 80073a8:	4a1b      	ldr	r2, [pc, #108]	@ (8007418 <_printf_float+0x2dc>)
 80073aa:	2301      	movs	r3, #1
 80073ac:	4631      	mov	r1, r6
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b8      	blx	r7
 80073b2:	3001      	adds	r0, #1
 80073b4:	f43f af1d 	beq.w	80071f2 <_printf_float+0xb6>
 80073b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80073bc:	ea59 0303 	orrs.w	r3, r9, r3
 80073c0:	d102      	bne.n	80073c8 <_printf_float+0x28c>
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	07d9      	lsls	r1, r3, #31
 80073c6:	d5d7      	bpl.n	8007378 <_printf_float+0x23c>
 80073c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073cc:	4631      	mov	r1, r6
 80073ce:	4628      	mov	r0, r5
 80073d0:	47b8      	blx	r7
 80073d2:	3001      	adds	r0, #1
 80073d4:	f43f af0d 	beq.w	80071f2 <_printf_float+0xb6>
 80073d8:	f04f 0a00 	mov.w	sl, #0
 80073dc:	f104 0b1a 	add.w	fp, r4, #26
 80073e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e2:	425b      	negs	r3, r3
 80073e4:	4553      	cmp	r3, sl
 80073e6:	dc01      	bgt.n	80073ec <_printf_float+0x2b0>
 80073e8:	464b      	mov	r3, r9
 80073ea:	e793      	b.n	8007314 <_printf_float+0x1d8>
 80073ec:	2301      	movs	r3, #1
 80073ee:	465a      	mov	r2, fp
 80073f0:	4631      	mov	r1, r6
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b8      	blx	r7
 80073f6:	3001      	adds	r0, #1
 80073f8:	f43f aefb 	beq.w	80071f2 <_printf_float+0xb6>
 80073fc:	f10a 0a01 	add.w	sl, sl, #1
 8007400:	e7ee      	b.n	80073e0 <_printf_float+0x2a4>
 8007402:	bf00      	nop
 8007404:	7fefffff 	.word	0x7fefffff
 8007408:	0800b904 	.word	0x0800b904
 800740c:	0800b900 	.word	0x0800b900
 8007410:	0800b90c 	.word	0x0800b90c
 8007414:	0800b908 	.word	0x0800b908
 8007418:	0800b910 	.word	0x0800b910
 800741c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800741e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007422:	4553      	cmp	r3, sl
 8007424:	bfa8      	it	ge
 8007426:	4653      	movge	r3, sl
 8007428:	2b00      	cmp	r3, #0
 800742a:	4699      	mov	r9, r3
 800742c:	dc36      	bgt.n	800749c <_printf_float+0x360>
 800742e:	f04f 0b00 	mov.w	fp, #0
 8007432:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007436:	f104 021a 	add.w	r2, r4, #26
 800743a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800743c:	9306      	str	r3, [sp, #24]
 800743e:	eba3 0309 	sub.w	r3, r3, r9
 8007442:	455b      	cmp	r3, fp
 8007444:	dc31      	bgt.n	80074aa <_printf_float+0x36e>
 8007446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007448:	459a      	cmp	sl, r3
 800744a:	dc3a      	bgt.n	80074c2 <_printf_float+0x386>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	07da      	lsls	r2, r3, #31
 8007450:	d437      	bmi.n	80074c2 <_printf_float+0x386>
 8007452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007454:	ebaa 0903 	sub.w	r9, sl, r3
 8007458:	9b06      	ldr	r3, [sp, #24]
 800745a:	ebaa 0303 	sub.w	r3, sl, r3
 800745e:	4599      	cmp	r9, r3
 8007460:	bfa8      	it	ge
 8007462:	4699      	movge	r9, r3
 8007464:	f1b9 0f00 	cmp.w	r9, #0
 8007468:	dc33      	bgt.n	80074d2 <_printf_float+0x396>
 800746a:	f04f 0800 	mov.w	r8, #0
 800746e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007472:	f104 0b1a 	add.w	fp, r4, #26
 8007476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007478:	ebaa 0303 	sub.w	r3, sl, r3
 800747c:	eba3 0309 	sub.w	r3, r3, r9
 8007480:	4543      	cmp	r3, r8
 8007482:	f77f af79 	ble.w	8007378 <_printf_float+0x23c>
 8007486:	2301      	movs	r3, #1
 8007488:	465a      	mov	r2, fp
 800748a:	4631      	mov	r1, r6
 800748c:	4628      	mov	r0, r5
 800748e:	47b8      	blx	r7
 8007490:	3001      	adds	r0, #1
 8007492:	f43f aeae 	beq.w	80071f2 <_printf_float+0xb6>
 8007496:	f108 0801 	add.w	r8, r8, #1
 800749a:	e7ec      	b.n	8007476 <_printf_float+0x33a>
 800749c:	4642      	mov	r2, r8
 800749e:	4631      	mov	r1, r6
 80074a0:	4628      	mov	r0, r5
 80074a2:	47b8      	blx	r7
 80074a4:	3001      	adds	r0, #1
 80074a6:	d1c2      	bne.n	800742e <_printf_float+0x2f2>
 80074a8:	e6a3      	b.n	80071f2 <_printf_float+0xb6>
 80074aa:	2301      	movs	r3, #1
 80074ac:	4631      	mov	r1, r6
 80074ae:	4628      	mov	r0, r5
 80074b0:	9206      	str	r2, [sp, #24]
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	f43f ae9c 	beq.w	80071f2 <_printf_float+0xb6>
 80074ba:	9a06      	ldr	r2, [sp, #24]
 80074bc:	f10b 0b01 	add.w	fp, fp, #1
 80074c0:	e7bb      	b.n	800743a <_printf_float+0x2fe>
 80074c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074c6:	4631      	mov	r1, r6
 80074c8:	4628      	mov	r0, r5
 80074ca:	47b8      	blx	r7
 80074cc:	3001      	adds	r0, #1
 80074ce:	d1c0      	bne.n	8007452 <_printf_float+0x316>
 80074d0:	e68f      	b.n	80071f2 <_printf_float+0xb6>
 80074d2:	9a06      	ldr	r2, [sp, #24]
 80074d4:	464b      	mov	r3, r9
 80074d6:	4442      	add	r2, r8
 80074d8:	4631      	mov	r1, r6
 80074da:	4628      	mov	r0, r5
 80074dc:	47b8      	blx	r7
 80074de:	3001      	adds	r0, #1
 80074e0:	d1c3      	bne.n	800746a <_printf_float+0x32e>
 80074e2:	e686      	b.n	80071f2 <_printf_float+0xb6>
 80074e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80074e8:	f1ba 0f01 	cmp.w	sl, #1
 80074ec:	dc01      	bgt.n	80074f2 <_printf_float+0x3b6>
 80074ee:	07db      	lsls	r3, r3, #31
 80074f0:	d536      	bpl.n	8007560 <_printf_float+0x424>
 80074f2:	2301      	movs	r3, #1
 80074f4:	4642      	mov	r2, r8
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	f43f ae78 	beq.w	80071f2 <_printf_float+0xb6>
 8007502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007506:	4631      	mov	r1, r6
 8007508:	4628      	mov	r0, r5
 800750a:	47b8      	blx	r7
 800750c:	3001      	adds	r0, #1
 800750e:	f43f ae70 	beq.w	80071f2 <_printf_float+0xb6>
 8007512:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007516:	2200      	movs	r2, #0
 8007518:	2300      	movs	r3, #0
 800751a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800751e:	f7f9 fadb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007522:	b9c0      	cbnz	r0, 8007556 <_printf_float+0x41a>
 8007524:	4653      	mov	r3, sl
 8007526:	f108 0201 	add.w	r2, r8, #1
 800752a:	4631      	mov	r1, r6
 800752c:	4628      	mov	r0, r5
 800752e:	47b8      	blx	r7
 8007530:	3001      	adds	r0, #1
 8007532:	d10c      	bne.n	800754e <_printf_float+0x412>
 8007534:	e65d      	b.n	80071f2 <_printf_float+0xb6>
 8007536:	2301      	movs	r3, #1
 8007538:	465a      	mov	r2, fp
 800753a:	4631      	mov	r1, r6
 800753c:	4628      	mov	r0, r5
 800753e:	47b8      	blx	r7
 8007540:	3001      	adds	r0, #1
 8007542:	f43f ae56 	beq.w	80071f2 <_printf_float+0xb6>
 8007546:	f108 0801 	add.w	r8, r8, #1
 800754a:	45d0      	cmp	r8, sl
 800754c:	dbf3      	blt.n	8007536 <_printf_float+0x3fa>
 800754e:	464b      	mov	r3, r9
 8007550:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007554:	e6df      	b.n	8007316 <_printf_float+0x1da>
 8007556:	f04f 0800 	mov.w	r8, #0
 800755a:	f104 0b1a 	add.w	fp, r4, #26
 800755e:	e7f4      	b.n	800754a <_printf_float+0x40e>
 8007560:	2301      	movs	r3, #1
 8007562:	4642      	mov	r2, r8
 8007564:	e7e1      	b.n	800752a <_printf_float+0x3ee>
 8007566:	2301      	movs	r3, #1
 8007568:	464a      	mov	r2, r9
 800756a:	4631      	mov	r1, r6
 800756c:	4628      	mov	r0, r5
 800756e:	47b8      	blx	r7
 8007570:	3001      	adds	r0, #1
 8007572:	f43f ae3e 	beq.w	80071f2 <_printf_float+0xb6>
 8007576:	f108 0801 	add.w	r8, r8, #1
 800757a:	68e3      	ldr	r3, [r4, #12]
 800757c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800757e:	1a5b      	subs	r3, r3, r1
 8007580:	4543      	cmp	r3, r8
 8007582:	dcf0      	bgt.n	8007566 <_printf_float+0x42a>
 8007584:	e6fc      	b.n	8007380 <_printf_float+0x244>
 8007586:	f04f 0800 	mov.w	r8, #0
 800758a:	f104 0919 	add.w	r9, r4, #25
 800758e:	e7f4      	b.n	800757a <_printf_float+0x43e>

08007590 <_printf_common>:
 8007590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007594:	4616      	mov	r6, r2
 8007596:	4698      	mov	r8, r3
 8007598:	688a      	ldr	r2, [r1, #8]
 800759a:	690b      	ldr	r3, [r1, #16]
 800759c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075a0:	4293      	cmp	r3, r2
 80075a2:	bfb8      	it	lt
 80075a4:	4613      	movlt	r3, r2
 80075a6:	6033      	str	r3, [r6, #0]
 80075a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075ac:	4607      	mov	r7, r0
 80075ae:	460c      	mov	r4, r1
 80075b0:	b10a      	cbz	r2, 80075b6 <_printf_common+0x26>
 80075b2:	3301      	adds	r3, #1
 80075b4:	6033      	str	r3, [r6, #0]
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	0699      	lsls	r1, r3, #26
 80075ba:	bf42      	ittt	mi
 80075bc:	6833      	ldrmi	r3, [r6, #0]
 80075be:	3302      	addmi	r3, #2
 80075c0:	6033      	strmi	r3, [r6, #0]
 80075c2:	6825      	ldr	r5, [r4, #0]
 80075c4:	f015 0506 	ands.w	r5, r5, #6
 80075c8:	d106      	bne.n	80075d8 <_printf_common+0x48>
 80075ca:	f104 0a19 	add.w	sl, r4, #25
 80075ce:	68e3      	ldr	r3, [r4, #12]
 80075d0:	6832      	ldr	r2, [r6, #0]
 80075d2:	1a9b      	subs	r3, r3, r2
 80075d4:	42ab      	cmp	r3, r5
 80075d6:	dc26      	bgt.n	8007626 <_printf_common+0x96>
 80075d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075dc:	6822      	ldr	r2, [r4, #0]
 80075de:	3b00      	subs	r3, #0
 80075e0:	bf18      	it	ne
 80075e2:	2301      	movne	r3, #1
 80075e4:	0692      	lsls	r2, r2, #26
 80075e6:	d42b      	bmi.n	8007640 <_printf_common+0xb0>
 80075e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075ec:	4641      	mov	r1, r8
 80075ee:	4638      	mov	r0, r7
 80075f0:	47c8      	blx	r9
 80075f2:	3001      	adds	r0, #1
 80075f4:	d01e      	beq.n	8007634 <_printf_common+0xa4>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	6922      	ldr	r2, [r4, #16]
 80075fa:	f003 0306 	and.w	r3, r3, #6
 80075fe:	2b04      	cmp	r3, #4
 8007600:	bf02      	ittt	eq
 8007602:	68e5      	ldreq	r5, [r4, #12]
 8007604:	6833      	ldreq	r3, [r6, #0]
 8007606:	1aed      	subeq	r5, r5, r3
 8007608:	68a3      	ldr	r3, [r4, #8]
 800760a:	bf0c      	ite	eq
 800760c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007610:	2500      	movne	r5, #0
 8007612:	4293      	cmp	r3, r2
 8007614:	bfc4      	itt	gt
 8007616:	1a9b      	subgt	r3, r3, r2
 8007618:	18ed      	addgt	r5, r5, r3
 800761a:	2600      	movs	r6, #0
 800761c:	341a      	adds	r4, #26
 800761e:	42b5      	cmp	r5, r6
 8007620:	d11a      	bne.n	8007658 <_printf_common+0xc8>
 8007622:	2000      	movs	r0, #0
 8007624:	e008      	b.n	8007638 <_printf_common+0xa8>
 8007626:	2301      	movs	r3, #1
 8007628:	4652      	mov	r2, sl
 800762a:	4641      	mov	r1, r8
 800762c:	4638      	mov	r0, r7
 800762e:	47c8      	blx	r9
 8007630:	3001      	adds	r0, #1
 8007632:	d103      	bne.n	800763c <_printf_common+0xac>
 8007634:	f04f 30ff 	mov.w	r0, #4294967295
 8007638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800763c:	3501      	adds	r5, #1
 800763e:	e7c6      	b.n	80075ce <_printf_common+0x3e>
 8007640:	18e1      	adds	r1, r4, r3
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	2030      	movs	r0, #48	@ 0x30
 8007646:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800764a:	4422      	add	r2, r4
 800764c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007650:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007654:	3302      	adds	r3, #2
 8007656:	e7c7      	b.n	80075e8 <_printf_common+0x58>
 8007658:	2301      	movs	r3, #1
 800765a:	4622      	mov	r2, r4
 800765c:	4641      	mov	r1, r8
 800765e:	4638      	mov	r0, r7
 8007660:	47c8      	blx	r9
 8007662:	3001      	adds	r0, #1
 8007664:	d0e6      	beq.n	8007634 <_printf_common+0xa4>
 8007666:	3601      	adds	r6, #1
 8007668:	e7d9      	b.n	800761e <_printf_common+0x8e>
	...

0800766c <_printf_i>:
 800766c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007670:	7e0f      	ldrb	r7, [r1, #24]
 8007672:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007674:	2f78      	cmp	r7, #120	@ 0x78
 8007676:	4691      	mov	r9, r2
 8007678:	4680      	mov	r8, r0
 800767a:	460c      	mov	r4, r1
 800767c:	469a      	mov	sl, r3
 800767e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007682:	d807      	bhi.n	8007694 <_printf_i+0x28>
 8007684:	2f62      	cmp	r7, #98	@ 0x62
 8007686:	d80a      	bhi.n	800769e <_printf_i+0x32>
 8007688:	2f00      	cmp	r7, #0
 800768a:	f000 80d1 	beq.w	8007830 <_printf_i+0x1c4>
 800768e:	2f58      	cmp	r7, #88	@ 0x58
 8007690:	f000 80b8 	beq.w	8007804 <_printf_i+0x198>
 8007694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007698:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800769c:	e03a      	b.n	8007714 <_printf_i+0xa8>
 800769e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076a2:	2b15      	cmp	r3, #21
 80076a4:	d8f6      	bhi.n	8007694 <_printf_i+0x28>
 80076a6:	a101      	add	r1, pc, #4	@ (adr r1, 80076ac <_printf_i+0x40>)
 80076a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076ac:	08007705 	.word	0x08007705
 80076b0:	08007719 	.word	0x08007719
 80076b4:	08007695 	.word	0x08007695
 80076b8:	08007695 	.word	0x08007695
 80076bc:	08007695 	.word	0x08007695
 80076c0:	08007695 	.word	0x08007695
 80076c4:	08007719 	.word	0x08007719
 80076c8:	08007695 	.word	0x08007695
 80076cc:	08007695 	.word	0x08007695
 80076d0:	08007695 	.word	0x08007695
 80076d4:	08007695 	.word	0x08007695
 80076d8:	08007817 	.word	0x08007817
 80076dc:	08007743 	.word	0x08007743
 80076e0:	080077d1 	.word	0x080077d1
 80076e4:	08007695 	.word	0x08007695
 80076e8:	08007695 	.word	0x08007695
 80076ec:	08007839 	.word	0x08007839
 80076f0:	08007695 	.word	0x08007695
 80076f4:	08007743 	.word	0x08007743
 80076f8:	08007695 	.word	0x08007695
 80076fc:	08007695 	.word	0x08007695
 8007700:	080077d9 	.word	0x080077d9
 8007704:	6833      	ldr	r3, [r6, #0]
 8007706:	1d1a      	adds	r2, r3, #4
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6032      	str	r2, [r6, #0]
 800770c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007710:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007714:	2301      	movs	r3, #1
 8007716:	e09c      	b.n	8007852 <_printf_i+0x1e6>
 8007718:	6833      	ldr	r3, [r6, #0]
 800771a:	6820      	ldr	r0, [r4, #0]
 800771c:	1d19      	adds	r1, r3, #4
 800771e:	6031      	str	r1, [r6, #0]
 8007720:	0606      	lsls	r6, r0, #24
 8007722:	d501      	bpl.n	8007728 <_printf_i+0xbc>
 8007724:	681d      	ldr	r5, [r3, #0]
 8007726:	e003      	b.n	8007730 <_printf_i+0xc4>
 8007728:	0645      	lsls	r5, r0, #25
 800772a:	d5fb      	bpl.n	8007724 <_printf_i+0xb8>
 800772c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007730:	2d00      	cmp	r5, #0
 8007732:	da03      	bge.n	800773c <_printf_i+0xd0>
 8007734:	232d      	movs	r3, #45	@ 0x2d
 8007736:	426d      	negs	r5, r5
 8007738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800773c:	4858      	ldr	r0, [pc, #352]	@ (80078a0 <_printf_i+0x234>)
 800773e:	230a      	movs	r3, #10
 8007740:	e011      	b.n	8007766 <_printf_i+0xfa>
 8007742:	6821      	ldr	r1, [r4, #0]
 8007744:	6833      	ldr	r3, [r6, #0]
 8007746:	0608      	lsls	r0, r1, #24
 8007748:	f853 5b04 	ldr.w	r5, [r3], #4
 800774c:	d402      	bmi.n	8007754 <_printf_i+0xe8>
 800774e:	0649      	lsls	r1, r1, #25
 8007750:	bf48      	it	mi
 8007752:	b2ad      	uxthmi	r5, r5
 8007754:	2f6f      	cmp	r7, #111	@ 0x6f
 8007756:	4852      	ldr	r0, [pc, #328]	@ (80078a0 <_printf_i+0x234>)
 8007758:	6033      	str	r3, [r6, #0]
 800775a:	bf14      	ite	ne
 800775c:	230a      	movne	r3, #10
 800775e:	2308      	moveq	r3, #8
 8007760:	2100      	movs	r1, #0
 8007762:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007766:	6866      	ldr	r6, [r4, #4]
 8007768:	60a6      	str	r6, [r4, #8]
 800776a:	2e00      	cmp	r6, #0
 800776c:	db05      	blt.n	800777a <_printf_i+0x10e>
 800776e:	6821      	ldr	r1, [r4, #0]
 8007770:	432e      	orrs	r6, r5
 8007772:	f021 0104 	bic.w	r1, r1, #4
 8007776:	6021      	str	r1, [r4, #0]
 8007778:	d04b      	beq.n	8007812 <_printf_i+0x1a6>
 800777a:	4616      	mov	r6, r2
 800777c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007780:	fb03 5711 	mls	r7, r3, r1, r5
 8007784:	5dc7      	ldrb	r7, [r0, r7]
 8007786:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800778a:	462f      	mov	r7, r5
 800778c:	42bb      	cmp	r3, r7
 800778e:	460d      	mov	r5, r1
 8007790:	d9f4      	bls.n	800777c <_printf_i+0x110>
 8007792:	2b08      	cmp	r3, #8
 8007794:	d10b      	bne.n	80077ae <_printf_i+0x142>
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	07df      	lsls	r7, r3, #31
 800779a:	d508      	bpl.n	80077ae <_printf_i+0x142>
 800779c:	6923      	ldr	r3, [r4, #16]
 800779e:	6861      	ldr	r1, [r4, #4]
 80077a0:	4299      	cmp	r1, r3
 80077a2:	bfde      	ittt	le
 80077a4:	2330      	movle	r3, #48	@ 0x30
 80077a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077ae:	1b92      	subs	r2, r2, r6
 80077b0:	6122      	str	r2, [r4, #16]
 80077b2:	f8cd a000 	str.w	sl, [sp]
 80077b6:	464b      	mov	r3, r9
 80077b8:	aa03      	add	r2, sp, #12
 80077ba:	4621      	mov	r1, r4
 80077bc:	4640      	mov	r0, r8
 80077be:	f7ff fee7 	bl	8007590 <_printf_common>
 80077c2:	3001      	adds	r0, #1
 80077c4:	d14a      	bne.n	800785c <_printf_i+0x1f0>
 80077c6:	f04f 30ff 	mov.w	r0, #4294967295
 80077ca:	b004      	add	sp, #16
 80077cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d0:	6823      	ldr	r3, [r4, #0]
 80077d2:	f043 0320 	orr.w	r3, r3, #32
 80077d6:	6023      	str	r3, [r4, #0]
 80077d8:	4832      	ldr	r0, [pc, #200]	@ (80078a4 <_printf_i+0x238>)
 80077da:	2778      	movs	r7, #120	@ 0x78
 80077dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	6831      	ldr	r1, [r6, #0]
 80077e4:	061f      	lsls	r7, r3, #24
 80077e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80077ea:	d402      	bmi.n	80077f2 <_printf_i+0x186>
 80077ec:	065f      	lsls	r7, r3, #25
 80077ee:	bf48      	it	mi
 80077f0:	b2ad      	uxthmi	r5, r5
 80077f2:	6031      	str	r1, [r6, #0]
 80077f4:	07d9      	lsls	r1, r3, #31
 80077f6:	bf44      	itt	mi
 80077f8:	f043 0320 	orrmi.w	r3, r3, #32
 80077fc:	6023      	strmi	r3, [r4, #0]
 80077fe:	b11d      	cbz	r5, 8007808 <_printf_i+0x19c>
 8007800:	2310      	movs	r3, #16
 8007802:	e7ad      	b.n	8007760 <_printf_i+0xf4>
 8007804:	4826      	ldr	r0, [pc, #152]	@ (80078a0 <_printf_i+0x234>)
 8007806:	e7e9      	b.n	80077dc <_printf_i+0x170>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	f023 0320 	bic.w	r3, r3, #32
 800780e:	6023      	str	r3, [r4, #0]
 8007810:	e7f6      	b.n	8007800 <_printf_i+0x194>
 8007812:	4616      	mov	r6, r2
 8007814:	e7bd      	b.n	8007792 <_printf_i+0x126>
 8007816:	6833      	ldr	r3, [r6, #0]
 8007818:	6825      	ldr	r5, [r4, #0]
 800781a:	6961      	ldr	r1, [r4, #20]
 800781c:	1d18      	adds	r0, r3, #4
 800781e:	6030      	str	r0, [r6, #0]
 8007820:	062e      	lsls	r6, r5, #24
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	d501      	bpl.n	800782a <_printf_i+0x1be>
 8007826:	6019      	str	r1, [r3, #0]
 8007828:	e002      	b.n	8007830 <_printf_i+0x1c4>
 800782a:	0668      	lsls	r0, r5, #25
 800782c:	d5fb      	bpl.n	8007826 <_printf_i+0x1ba>
 800782e:	8019      	strh	r1, [r3, #0]
 8007830:	2300      	movs	r3, #0
 8007832:	6123      	str	r3, [r4, #16]
 8007834:	4616      	mov	r6, r2
 8007836:	e7bc      	b.n	80077b2 <_printf_i+0x146>
 8007838:	6833      	ldr	r3, [r6, #0]
 800783a:	1d1a      	adds	r2, r3, #4
 800783c:	6032      	str	r2, [r6, #0]
 800783e:	681e      	ldr	r6, [r3, #0]
 8007840:	6862      	ldr	r2, [r4, #4]
 8007842:	2100      	movs	r1, #0
 8007844:	4630      	mov	r0, r6
 8007846:	f7f8 fccb 	bl	80001e0 <memchr>
 800784a:	b108      	cbz	r0, 8007850 <_printf_i+0x1e4>
 800784c:	1b80      	subs	r0, r0, r6
 800784e:	6060      	str	r0, [r4, #4]
 8007850:	6863      	ldr	r3, [r4, #4]
 8007852:	6123      	str	r3, [r4, #16]
 8007854:	2300      	movs	r3, #0
 8007856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800785a:	e7aa      	b.n	80077b2 <_printf_i+0x146>
 800785c:	6923      	ldr	r3, [r4, #16]
 800785e:	4632      	mov	r2, r6
 8007860:	4649      	mov	r1, r9
 8007862:	4640      	mov	r0, r8
 8007864:	47d0      	blx	sl
 8007866:	3001      	adds	r0, #1
 8007868:	d0ad      	beq.n	80077c6 <_printf_i+0x15a>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	079b      	lsls	r3, r3, #30
 800786e:	d413      	bmi.n	8007898 <_printf_i+0x22c>
 8007870:	68e0      	ldr	r0, [r4, #12]
 8007872:	9b03      	ldr	r3, [sp, #12]
 8007874:	4298      	cmp	r0, r3
 8007876:	bfb8      	it	lt
 8007878:	4618      	movlt	r0, r3
 800787a:	e7a6      	b.n	80077ca <_printf_i+0x15e>
 800787c:	2301      	movs	r3, #1
 800787e:	4632      	mov	r2, r6
 8007880:	4649      	mov	r1, r9
 8007882:	4640      	mov	r0, r8
 8007884:	47d0      	blx	sl
 8007886:	3001      	adds	r0, #1
 8007888:	d09d      	beq.n	80077c6 <_printf_i+0x15a>
 800788a:	3501      	adds	r5, #1
 800788c:	68e3      	ldr	r3, [r4, #12]
 800788e:	9903      	ldr	r1, [sp, #12]
 8007890:	1a5b      	subs	r3, r3, r1
 8007892:	42ab      	cmp	r3, r5
 8007894:	dcf2      	bgt.n	800787c <_printf_i+0x210>
 8007896:	e7eb      	b.n	8007870 <_printf_i+0x204>
 8007898:	2500      	movs	r5, #0
 800789a:	f104 0619 	add.w	r6, r4, #25
 800789e:	e7f5      	b.n	800788c <_printf_i+0x220>
 80078a0:	0800b912 	.word	0x0800b912
 80078a4:	0800b923 	.word	0x0800b923

080078a8 <_scanf_float>:
 80078a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ac:	b087      	sub	sp, #28
 80078ae:	4691      	mov	r9, r2
 80078b0:	9303      	str	r3, [sp, #12]
 80078b2:	688b      	ldr	r3, [r1, #8]
 80078b4:	1e5a      	subs	r2, r3, #1
 80078b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80078ba:	bf81      	itttt	hi
 80078bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80078c0:	eb03 0b05 	addhi.w	fp, r3, r5
 80078c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80078c8:	608b      	strhi	r3, [r1, #8]
 80078ca:	680b      	ldr	r3, [r1, #0]
 80078cc:	460a      	mov	r2, r1
 80078ce:	f04f 0500 	mov.w	r5, #0
 80078d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80078d6:	f842 3b1c 	str.w	r3, [r2], #28
 80078da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80078de:	4680      	mov	r8, r0
 80078e0:	460c      	mov	r4, r1
 80078e2:	bf98      	it	ls
 80078e4:	f04f 0b00 	movls.w	fp, #0
 80078e8:	9201      	str	r2, [sp, #4]
 80078ea:	4616      	mov	r6, r2
 80078ec:	46aa      	mov	sl, r5
 80078ee:	462f      	mov	r7, r5
 80078f0:	9502      	str	r5, [sp, #8]
 80078f2:	68a2      	ldr	r2, [r4, #8]
 80078f4:	b15a      	cbz	r2, 800790e <_scanf_float+0x66>
 80078f6:	f8d9 3000 	ldr.w	r3, [r9]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	2b4e      	cmp	r3, #78	@ 0x4e
 80078fe:	d863      	bhi.n	80079c8 <_scanf_float+0x120>
 8007900:	2b40      	cmp	r3, #64	@ 0x40
 8007902:	d83b      	bhi.n	800797c <_scanf_float+0xd4>
 8007904:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007908:	b2c8      	uxtb	r0, r1
 800790a:	280e      	cmp	r0, #14
 800790c:	d939      	bls.n	8007982 <_scanf_float+0xda>
 800790e:	b11f      	cbz	r7, 8007918 <_scanf_float+0x70>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007916:	6023      	str	r3, [r4, #0]
 8007918:	f10a 3aff 	add.w	sl, sl, #4294967295
 800791c:	f1ba 0f01 	cmp.w	sl, #1
 8007920:	f200 8114 	bhi.w	8007b4c <_scanf_float+0x2a4>
 8007924:	9b01      	ldr	r3, [sp, #4]
 8007926:	429e      	cmp	r6, r3
 8007928:	f200 8105 	bhi.w	8007b36 <_scanf_float+0x28e>
 800792c:	2001      	movs	r0, #1
 800792e:	b007      	add	sp, #28
 8007930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007934:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007938:	2a0d      	cmp	r2, #13
 800793a:	d8e8      	bhi.n	800790e <_scanf_float+0x66>
 800793c:	a101      	add	r1, pc, #4	@ (adr r1, 8007944 <_scanf_float+0x9c>)
 800793e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007942:	bf00      	nop
 8007944:	08007a8d 	.word	0x08007a8d
 8007948:	0800790f 	.word	0x0800790f
 800794c:	0800790f 	.word	0x0800790f
 8007950:	0800790f 	.word	0x0800790f
 8007954:	08007ae9 	.word	0x08007ae9
 8007958:	08007ac3 	.word	0x08007ac3
 800795c:	0800790f 	.word	0x0800790f
 8007960:	0800790f 	.word	0x0800790f
 8007964:	08007a9b 	.word	0x08007a9b
 8007968:	0800790f 	.word	0x0800790f
 800796c:	0800790f 	.word	0x0800790f
 8007970:	0800790f 	.word	0x0800790f
 8007974:	0800790f 	.word	0x0800790f
 8007978:	08007a57 	.word	0x08007a57
 800797c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007980:	e7da      	b.n	8007938 <_scanf_float+0x90>
 8007982:	290e      	cmp	r1, #14
 8007984:	d8c3      	bhi.n	800790e <_scanf_float+0x66>
 8007986:	a001      	add	r0, pc, #4	@ (adr r0, 800798c <_scanf_float+0xe4>)
 8007988:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800798c:	08007a47 	.word	0x08007a47
 8007990:	0800790f 	.word	0x0800790f
 8007994:	08007a47 	.word	0x08007a47
 8007998:	08007ad7 	.word	0x08007ad7
 800799c:	0800790f 	.word	0x0800790f
 80079a0:	080079e9 	.word	0x080079e9
 80079a4:	08007a2d 	.word	0x08007a2d
 80079a8:	08007a2d 	.word	0x08007a2d
 80079ac:	08007a2d 	.word	0x08007a2d
 80079b0:	08007a2d 	.word	0x08007a2d
 80079b4:	08007a2d 	.word	0x08007a2d
 80079b8:	08007a2d 	.word	0x08007a2d
 80079bc:	08007a2d 	.word	0x08007a2d
 80079c0:	08007a2d 	.word	0x08007a2d
 80079c4:	08007a2d 	.word	0x08007a2d
 80079c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80079ca:	d809      	bhi.n	80079e0 <_scanf_float+0x138>
 80079cc:	2b60      	cmp	r3, #96	@ 0x60
 80079ce:	d8b1      	bhi.n	8007934 <_scanf_float+0x8c>
 80079d0:	2b54      	cmp	r3, #84	@ 0x54
 80079d2:	d07b      	beq.n	8007acc <_scanf_float+0x224>
 80079d4:	2b59      	cmp	r3, #89	@ 0x59
 80079d6:	d19a      	bne.n	800790e <_scanf_float+0x66>
 80079d8:	2d07      	cmp	r5, #7
 80079da:	d198      	bne.n	800790e <_scanf_float+0x66>
 80079dc:	2508      	movs	r5, #8
 80079de:	e02f      	b.n	8007a40 <_scanf_float+0x198>
 80079e0:	2b74      	cmp	r3, #116	@ 0x74
 80079e2:	d073      	beq.n	8007acc <_scanf_float+0x224>
 80079e4:	2b79      	cmp	r3, #121	@ 0x79
 80079e6:	e7f6      	b.n	80079d6 <_scanf_float+0x12e>
 80079e8:	6821      	ldr	r1, [r4, #0]
 80079ea:	05c8      	lsls	r0, r1, #23
 80079ec:	d51e      	bpl.n	8007a2c <_scanf_float+0x184>
 80079ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80079f2:	6021      	str	r1, [r4, #0]
 80079f4:	3701      	adds	r7, #1
 80079f6:	f1bb 0f00 	cmp.w	fp, #0
 80079fa:	d003      	beq.n	8007a04 <_scanf_float+0x15c>
 80079fc:	3201      	adds	r2, #1
 80079fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a02:	60a2      	str	r2, [r4, #8]
 8007a04:	68a3      	ldr	r3, [r4, #8]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	60a3      	str	r3, [r4, #8]
 8007a0a:	6923      	ldr	r3, [r4, #16]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	6123      	str	r3, [r4, #16]
 8007a10:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f8c9 3004 	str.w	r3, [r9, #4]
 8007a1c:	f340 8082 	ble.w	8007b24 <_scanf_float+0x27c>
 8007a20:	f8d9 3000 	ldr.w	r3, [r9]
 8007a24:	3301      	adds	r3, #1
 8007a26:	f8c9 3000 	str.w	r3, [r9]
 8007a2a:	e762      	b.n	80078f2 <_scanf_float+0x4a>
 8007a2c:	eb1a 0105 	adds.w	r1, sl, r5
 8007a30:	f47f af6d 	bne.w	800790e <_scanf_float+0x66>
 8007a34:	6822      	ldr	r2, [r4, #0]
 8007a36:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007a3a:	6022      	str	r2, [r4, #0]
 8007a3c:	460d      	mov	r5, r1
 8007a3e:	468a      	mov	sl, r1
 8007a40:	f806 3b01 	strb.w	r3, [r6], #1
 8007a44:	e7de      	b.n	8007a04 <_scanf_float+0x15c>
 8007a46:	6822      	ldr	r2, [r4, #0]
 8007a48:	0610      	lsls	r0, r2, #24
 8007a4a:	f57f af60 	bpl.w	800790e <_scanf_float+0x66>
 8007a4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a52:	6022      	str	r2, [r4, #0]
 8007a54:	e7f4      	b.n	8007a40 <_scanf_float+0x198>
 8007a56:	f1ba 0f00 	cmp.w	sl, #0
 8007a5a:	d10c      	bne.n	8007a76 <_scanf_float+0x1ce>
 8007a5c:	b977      	cbnz	r7, 8007a7c <_scanf_float+0x1d4>
 8007a5e:	6822      	ldr	r2, [r4, #0]
 8007a60:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007a64:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007a68:	d108      	bne.n	8007a7c <_scanf_float+0x1d4>
 8007a6a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a6e:	6022      	str	r2, [r4, #0]
 8007a70:	f04f 0a01 	mov.w	sl, #1
 8007a74:	e7e4      	b.n	8007a40 <_scanf_float+0x198>
 8007a76:	f1ba 0f02 	cmp.w	sl, #2
 8007a7a:	d050      	beq.n	8007b1e <_scanf_float+0x276>
 8007a7c:	2d01      	cmp	r5, #1
 8007a7e:	d002      	beq.n	8007a86 <_scanf_float+0x1de>
 8007a80:	2d04      	cmp	r5, #4
 8007a82:	f47f af44 	bne.w	800790e <_scanf_float+0x66>
 8007a86:	3501      	adds	r5, #1
 8007a88:	b2ed      	uxtb	r5, r5
 8007a8a:	e7d9      	b.n	8007a40 <_scanf_float+0x198>
 8007a8c:	f1ba 0f01 	cmp.w	sl, #1
 8007a90:	f47f af3d 	bne.w	800790e <_scanf_float+0x66>
 8007a94:	f04f 0a02 	mov.w	sl, #2
 8007a98:	e7d2      	b.n	8007a40 <_scanf_float+0x198>
 8007a9a:	b975      	cbnz	r5, 8007aba <_scanf_float+0x212>
 8007a9c:	2f00      	cmp	r7, #0
 8007a9e:	f47f af37 	bne.w	8007910 <_scanf_float+0x68>
 8007aa2:	6822      	ldr	r2, [r4, #0]
 8007aa4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007aa8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007aac:	f040 8103 	bne.w	8007cb6 <_scanf_float+0x40e>
 8007ab0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ab4:	6022      	str	r2, [r4, #0]
 8007ab6:	2501      	movs	r5, #1
 8007ab8:	e7c2      	b.n	8007a40 <_scanf_float+0x198>
 8007aba:	2d03      	cmp	r5, #3
 8007abc:	d0e3      	beq.n	8007a86 <_scanf_float+0x1de>
 8007abe:	2d05      	cmp	r5, #5
 8007ac0:	e7df      	b.n	8007a82 <_scanf_float+0x1da>
 8007ac2:	2d02      	cmp	r5, #2
 8007ac4:	f47f af23 	bne.w	800790e <_scanf_float+0x66>
 8007ac8:	2503      	movs	r5, #3
 8007aca:	e7b9      	b.n	8007a40 <_scanf_float+0x198>
 8007acc:	2d06      	cmp	r5, #6
 8007ace:	f47f af1e 	bne.w	800790e <_scanf_float+0x66>
 8007ad2:	2507      	movs	r5, #7
 8007ad4:	e7b4      	b.n	8007a40 <_scanf_float+0x198>
 8007ad6:	6822      	ldr	r2, [r4, #0]
 8007ad8:	0591      	lsls	r1, r2, #22
 8007ada:	f57f af18 	bpl.w	800790e <_scanf_float+0x66>
 8007ade:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007ae2:	6022      	str	r2, [r4, #0]
 8007ae4:	9702      	str	r7, [sp, #8]
 8007ae6:	e7ab      	b.n	8007a40 <_scanf_float+0x198>
 8007ae8:	6822      	ldr	r2, [r4, #0]
 8007aea:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007aee:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007af2:	d005      	beq.n	8007b00 <_scanf_float+0x258>
 8007af4:	0550      	lsls	r0, r2, #21
 8007af6:	f57f af0a 	bpl.w	800790e <_scanf_float+0x66>
 8007afa:	2f00      	cmp	r7, #0
 8007afc:	f000 80db 	beq.w	8007cb6 <_scanf_float+0x40e>
 8007b00:	0591      	lsls	r1, r2, #22
 8007b02:	bf58      	it	pl
 8007b04:	9902      	ldrpl	r1, [sp, #8]
 8007b06:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007b0a:	bf58      	it	pl
 8007b0c:	1a79      	subpl	r1, r7, r1
 8007b0e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007b12:	bf58      	it	pl
 8007b14:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007b18:	6022      	str	r2, [r4, #0]
 8007b1a:	2700      	movs	r7, #0
 8007b1c:	e790      	b.n	8007a40 <_scanf_float+0x198>
 8007b1e:	f04f 0a03 	mov.w	sl, #3
 8007b22:	e78d      	b.n	8007a40 <_scanf_float+0x198>
 8007b24:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007b28:	4649      	mov	r1, r9
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4798      	blx	r3
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	f43f aedf 	beq.w	80078f2 <_scanf_float+0x4a>
 8007b34:	e6eb      	b.n	800790e <_scanf_float+0x66>
 8007b36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b3e:	464a      	mov	r2, r9
 8007b40:	4640      	mov	r0, r8
 8007b42:	4798      	blx	r3
 8007b44:	6923      	ldr	r3, [r4, #16]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	6123      	str	r3, [r4, #16]
 8007b4a:	e6eb      	b.n	8007924 <_scanf_float+0x7c>
 8007b4c:	1e6b      	subs	r3, r5, #1
 8007b4e:	2b06      	cmp	r3, #6
 8007b50:	d824      	bhi.n	8007b9c <_scanf_float+0x2f4>
 8007b52:	2d02      	cmp	r5, #2
 8007b54:	d836      	bhi.n	8007bc4 <_scanf_float+0x31c>
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	429e      	cmp	r6, r3
 8007b5a:	f67f aee7 	bls.w	800792c <_scanf_float+0x84>
 8007b5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b66:	464a      	mov	r2, r9
 8007b68:	4640      	mov	r0, r8
 8007b6a:	4798      	blx	r3
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	6123      	str	r3, [r4, #16]
 8007b72:	e7f0      	b.n	8007b56 <_scanf_float+0x2ae>
 8007b74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b78:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007b7c:	464a      	mov	r2, r9
 8007b7e:	4640      	mov	r0, r8
 8007b80:	4798      	blx	r3
 8007b82:	6923      	ldr	r3, [r4, #16]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	6123      	str	r3, [r4, #16]
 8007b88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b8c:	fa5f fa8a 	uxtb.w	sl, sl
 8007b90:	f1ba 0f02 	cmp.w	sl, #2
 8007b94:	d1ee      	bne.n	8007b74 <_scanf_float+0x2cc>
 8007b96:	3d03      	subs	r5, #3
 8007b98:	b2ed      	uxtb	r5, r5
 8007b9a:	1b76      	subs	r6, r6, r5
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	05da      	lsls	r2, r3, #23
 8007ba0:	d530      	bpl.n	8007c04 <_scanf_float+0x35c>
 8007ba2:	055b      	lsls	r3, r3, #21
 8007ba4:	d511      	bpl.n	8007bca <_scanf_float+0x322>
 8007ba6:	9b01      	ldr	r3, [sp, #4]
 8007ba8:	429e      	cmp	r6, r3
 8007baa:	f67f aebf 	bls.w	800792c <_scanf_float+0x84>
 8007bae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007bb6:	464a      	mov	r2, r9
 8007bb8:	4640      	mov	r0, r8
 8007bba:	4798      	blx	r3
 8007bbc:	6923      	ldr	r3, [r4, #16]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	6123      	str	r3, [r4, #16]
 8007bc2:	e7f0      	b.n	8007ba6 <_scanf_float+0x2fe>
 8007bc4:	46aa      	mov	sl, r5
 8007bc6:	46b3      	mov	fp, r6
 8007bc8:	e7de      	b.n	8007b88 <_scanf_float+0x2e0>
 8007bca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007bce:	6923      	ldr	r3, [r4, #16]
 8007bd0:	2965      	cmp	r1, #101	@ 0x65
 8007bd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007bd6:	f106 35ff 	add.w	r5, r6, #4294967295
 8007bda:	6123      	str	r3, [r4, #16]
 8007bdc:	d00c      	beq.n	8007bf8 <_scanf_float+0x350>
 8007bde:	2945      	cmp	r1, #69	@ 0x45
 8007be0:	d00a      	beq.n	8007bf8 <_scanf_float+0x350>
 8007be2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007be6:	464a      	mov	r2, r9
 8007be8:	4640      	mov	r0, r8
 8007bea:	4798      	blx	r3
 8007bec:	6923      	ldr	r3, [r4, #16]
 8007bee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	1eb5      	subs	r5, r6, #2
 8007bf6:	6123      	str	r3, [r4, #16]
 8007bf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007bfc:	464a      	mov	r2, r9
 8007bfe:	4640      	mov	r0, r8
 8007c00:	4798      	blx	r3
 8007c02:	462e      	mov	r6, r5
 8007c04:	6822      	ldr	r2, [r4, #0]
 8007c06:	f012 0210 	ands.w	r2, r2, #16
 8007c0a:	d001      	beq.n	8007c10 <_scanf_float+0x368>
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	e68e      	b.n	800792e <_scanf_float+0x86>
 8007c10:	7032      	strb	r2, [r6, #0]
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c1c:	d125      	bne.n	8007c6a <_scanf_float+0x3c2>
 8007c1e:	9b02      	ldr	r3, [sp, #8]
 8007c20:	429f      	cmp	r7, r3
 8007c22:	d00a      	beq.n	8007c3a <_scanf_float+0x392>
 8007c24:	1bda      	subs	r2, r3, r7
 8007c26:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007c2a:	429e      	cmp	r6, r3
 8007c2c:	bf28      	it	cs
 8007c2e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007c32:	4922      	ldr	r1, [pc, #136]	@ (8007cbc <_scanf_float+0x414>)
 8007c34:	4630      	mov	r0, r6
 8007c36:	f000 f977 	bl	8007f28 <siprintf>
 8007c3a:	9901      	ldr	r1, [sp, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	4640      	mov	r0, r8
 8007c40:	f002 fcf6 	bl	800a630 <_strtod_r>
 8007c44:	9b03      	ldr	r3, [sp, #12]
 8007c46:	6821      	ldr	r1, [r4, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f011 0f02 	tst.w	r1, #2
 8007c4e:	ec57 6b10 	vmov	r6, r7, d0
 8007c52:	f103 0204 	add.w	r2, r3, #4
 8007c56:	d015      	beq.n	8007c84 <_scanf_float+0x3dc>
 8007c58:	9903      	ldr	r1, [sp, #12]
 8007c5a:	600a      	str	r2, [r1, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	e9c3 6700 	strd	r6, r7, [r3]
 8007c62:	68e3      	ldr	r3, [r4, #12]
 8007c64:	3301      	adds	r3, #1
 8007c66:	60e3      	str	r3, [r4, #12]
 8007c68:	e7d0      	b.n	8007c0c <_scanf_float+0x364>
 8007c6a:	9b04      	ldr	r3, [sp, #16]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d0e4      	beq.n	8007c3a <_scanf_float+0x392>
 8007c70:	9905      	ldr	r1, [sp, #20]
 8007c72:	230a      	movs	r3, #10
 8007c74:	3101      	adds	r1, #1
 8007c76:	4640      	mov	r0, r8
 8007c78:	f002 fd5a 	bl	800a730 <_strtol_r>
 8007c7c:	9b04      	ldr	r3, [sp, #16]
 8007c7e:	9e05      	ldr	r6, [sp, #20]
 8007c80:	1ac2      	subs	r2, r0, r3
 8007c82:	e7d0      	b.n	8007c26 <_scanf_float+0x37e>
 8007c84:	f011 0f04 	tst.w	r1, #4
 8007c88:	9903      	ldr	r1, [sp, #12]
 8007c8a:	600a      	str	r2, [r1, #0]
 8007c8c:	d1e6      	bne.n	8007c5c <_scanf_float+0x3b4>
 8007c8e:	681d      	ldr	r5, [r3, #0]
 8007c90:	4632      	mov	r2, r6
 8007c92:	463b      	mov	r3, r7
 8007c94:	4630      	mov	r0, r6
 8007c96:	4639      	mov	r1, r7
 8007c98:	f7f8 ff50 	bl	8000b3c <__aeabi_dcmpun>
 8007c9c:	b128      	cbz	r0, 8007caa <_scanf_float+0x402>
 8007c9e:	4808      	ldr	r0, [pc, #32]	@ (8007cc0 <_scanf_float+0x418>)
 8007ca0:	f000 fabc 	bl	800821c <nanf>
 8007ca4:	ed85 0a00 	vstr	s0, [r5]
 8007ca8:	e7db      	b.n	8007c62 <_scanf_float+0x3ba>
 8007caa:	4630      	mov	r0, r6
 8007cac:	4639      	mov	r1, r7
 8007cae:	f7f8 ffa3 	bl	8000bf8 <__aeabi_d2f>
 8007cb2:	6028      	str	r0, [r5, #0]
 8007cb4:	e7d5      	b.n	8007c62 <_scanf_float+0x3ba>
 8007cb6:	2700      	movs	r7, #0
 8007cb8:	e62e      	b.n	8007918 <_scanf_float+0x70>
 8007cba:	bf00      	nop
 8007cbc:	0800b934 	.word	0x0800b934
 8007cc0:	0800ba75 	.word	0x0800ba75

08007cc4 <std>:
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	b510      	push	{r4, lr}
 8007cc8:	4604      	mov	r4, r0
 8007cca:	e9c0 3300 	strd	r3, r3, [r0]
 8007cce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cd2:	6083      	str	r3, [r0, #8]
 8007cd4:	8181      	strh	r1, [r0, #12]
 8007cd6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cd8:	81c2      	strh	r2, [r0, #14]
 8007cda:	6183      	str	r3, [r0, #24]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	2208      	movs	r2, #8
 8007ce0:	305c      	adds	r0, #92	@ 0x5c
 8007ce2:	f000 fa1b 	bl	800811c <memset>
 8007ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d1c <std+0x58>)
 8007ce8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cea:	4b0d      	ldr	r3, [pc, #52]	@ (8007d20 <std+0x5c>)
 8007cec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cee:	4b0d      	ldr	r3, [pc, #52]	@ (8007d24 <std+0x60>)
 8007cf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d28 <std+0x64>)
 8007cf4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8007d2c <std+0x68>)
 8007cf8:	6224      	str	r4, [r4, #32]
 8007cfa:	429c      	cmp	r4, r3
 8007cfc:	d006      	beq.n	8007d0c <std+0x48>
 8007cfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d02:	4294      	cmp	r4, r2
 8007d04:	d002      	beq.n	8007d0c <std+0x48>
 8007d06:	33d0      	adds	r3, #208	@ 0xd0
 8007d08:	429c      	cmp	r4, r3
 8007d0a:	d105      	bne.n	8007d18 <std+0x54>
 8007d0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d14:	f000 ba7e 	b.w	8008214 <__retarget_lock_init_recursive>
 8007d18:	bd10      	pop	{r4, pc}
 8007d1a:	bf00      	nop
 8007d1c:	08007f6d 	.word	0x08007f6d
 8007d20:	08007f8f 	.word	0x08007f8f
 8007d24:	08007fc7 	.word	0x08007fc7
 8007d28:	08007feb 	.word	0x08007feb
 8007d2c:	2000040c 	.word	0x2000040c

08007d30 <stdio_exit_handler>:
 8007d30:	4a02      	ldr	r2, [pc, #8]	@ (8007d3c <stdio_exit_handler+0xc>)
 8007d32:	4903      	ldr	r1, [pc, #12]	@ (8007d40 <stdio_exit_handler+0x10>)
 8007d34:	4803      	ldr	r0, [pc, #12]	@ (8007d44 <stdio_exit_handler+0x14>)
 8007d36:	f000 b869 	b.w	8007e0c <_fwalk_sglue>
 8007d3a:	bf00      	nop
 8007d3c:	2000000c 	.word	0x2000000c
 8007d40:	0800ad71 	.word	0x0800ad71
 8007d44:	2000001c 	.word	0x2000001c

08007d48 <cleanup_stdio>:
 8007d48:	6841      	ldr	r1, [r0, #4]
 8007d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d7c <cleanup_stdio+0x34>)
 8007d4c:	4299      	cmp	r1, r3
 8007d4e:	b510      	push	{r4, lr}
 8007d50:	4604      	mov	r4, r0
 8007d52:	d001      	beq.n	8007d58 <cleanup_stdio+0x10>
 8007d54:	f003 f80c 	bl	800ad70 <_fflush_r>
 8007d58:	68a1      	ldr	r1, [r4, #8]
 8007d5a:	4b09      	ldr	r3, [pc, #36]	@ (8007d80 <cleanup_stdio+0x38>)
 8007d5c:	4299      	cmp	r1, r3
 8007d5e:	d002      	beq.n	8007d66 <cleanup_stdio+0x1e>
 8007d60:	4620      	mov	r0, r4
 8007d62:	f003 f805 	bl	800ad70 <_fflush_r>
 8007d66:	68e1      	ldr	r1, [r4, #12]
 8007d68:	4b06      	ldr	r3, [pc, #24]	@ (8007d84 <cleanup_stdio+0x3c>)
 8007d6a:	4299      	cmp	r1, r3
 8007d6c:	d004      	beq.n	8007d78 <cleanup_stdio+0x30>
 8007d6e:	4620      	mov	r0, r4
 8007d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d74:	f002 bffc 	b.w	800ad70 <_fflush_r>
 8007d78:	bd10      	pop	{r4, pc}
 8007d7a:	bf00      	nop
 8007d7c:	2000040c 	.word	0x2000040c
 8007d80:	20000474 	.word	0x20000474
 8007d84:	200004dc 	.word	0x200004dc

08007d88 <global_stdio_init.part.0>:
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007db8 <global_stdio_init.part.0+0x30>)
 8007d8c:	4c0b      	ldr	r4, [pc, #44]	@ (8007dbc <global_stdio_init.part.0+0x34>)
 8007d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8007dc0 <global_stdio_init.part.0+0x38>)
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	4620      	mov	r0, r4
 8007d94:	2200      	movs	r2, #0
 8007d96:	2104      	movs	r1, #4
 8007d98:	f7ff ff94 	bl	8007cc4 <std>
 8007d9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007da0:	2201      	movs	r2, #1
 8007da2:	2109      	movs	r1, #9
 8007da4:	f7ff ff8e 	bl	8007cc4 <std>
 8007da8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007dac:	2202      	movs	r2, #2
 8007dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007db2:	2112      	movs	r1, #18
 8007db4:	f7ff bf86 	b.w	8007cc4 <std>
 8007db8:	20000544 	.word	0x20000544
 8007dbc:	2000040c 	.word	0x2000040c
 8007dc0:	08007d31 	.word	0x08007d31

08007dc4 <__sfp_lock_acquire>:
 8007dc4:	4801      	ldr	r0, [pc, #4]	@ (8007dcc <__sfp_lock_acquire+0x8>)
 8007dc6:	f000 ba26 	b.w	8008216 <__retarget_lock_acquire_recursive>
 8007dca:	bf00      	nop
 8007dcc:	2000054d 	.word	0x2000054d

08007dd0 <__sfp_lock_release>:
 8007dd0:	4801      	ldr	r0, [pc, #4]	@ (8007dd8 <__sfp_lock_release+0x8>)
 8007dd2:	f000 ba21 	b.w	8008218 <__retarget_lock_release_recursive>
 8007dd6:	bf00      	nop
 8007dd8:	2000054d 	.word	0x2000054d

08007ddc <__sinit>:
 8007ddc:	b510      	push	{r4, lr}
 8007dde:	4604      	mov	r4, r0
 8007de0:	f7ff fff0 	bl	8007dc4 <__sfp_lock_acquire>
 8007de4:	6a23      	ldr	r3, [r4, #32]
 8007de6:	b11b      	cbz	r3, 8007df0 <__sinit+0x14>
 8007de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dec:	f7ff bff0 	b.w	8007dd0 <__sfp_lock_release>
 8007df0:	4b04      	ldr	r3, [pc, #16]	@ (8007e04 <__sinit+0x28>)
 8007df2:	6223      	str	r3, [r4, #32]
 8007df4:	4b04      	ldr	r3, [pc, #16]	@ (8007e08 <__sinit+0x2c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1f5      	bne.n	8007de8 <__sinit+0xc>
 8007dfc:	f7ff ffc4 	bl	8007d88 <global_stdio_init.part.0>
 8007e00:	e7f2      	b.n	8007de8 <__sinit+0xc>
 8007e02:	bf00      	nop
 8007e04:	08007d49 	.word	0x08007d49
 8007e08:	20000544 	.word	0x20000544

08007e0c <_fwalk_sglue>:
 8007e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e10:	4607      	mov	r7, r0
 8007e12:	4688      	mov	r8, r1
 8007e14:	4614      	mov	r4, r2
 8007e16:	2600      	movs	r6, #0
 8007e18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e1c:	f1b9 0901 	subs.w	r9, r9, #1
 8007e20:	d505      	bpl.n	8007e2e <_fwalk_sglue+0x22>
 8007e22:	6824      	ldr	r4, [r4, #0]
 8007e24:	2c00      	cmp	r4, #0
 8007e26:	d1f7      	bne.n	8007e18 <_fwalk_sglue+0xc>
 8007e28:	4630      	mov	r0, r6
 8007e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e2e:	89ab      	ldrh	r3, [r5, #12]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d907      	bls.n	8007e44 <_fwalk_sglue+0x38>
 8007e34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	d003      	beq.n	8007e44 <_fwalk_sglue+0x38>
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	4638      	mov	r0, r7
 8007e40:	47c0      	blx	r8
 8007e42:	4306      	orrs	r6, r0
 8007e44:	3568      	adds	r5, #104	@ 0x68
 8007e46:	e7e9      	b.n	8007e1c <_fwalk_sglue+0x10>

08007e48 <iprintf>:
 8007e48:	b40f      	push	{r0, r1, r2, r3}
 8007e4a:	b507      	push	{r0, r1, r2, lr}
 8007e4c:	4906      	ldr	r1, [pc, #24]	@ (8007e68 <iprintf+0x20>)
 8007e4e:	ab04      	add	r3, sp, #16
 8007e50:	6808      	ldr	r0, [r1, #0]
 8007e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e56:	6881      	ldr	r1, [r0, #8]
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	f002 fded 	bl	800aa38 <_vfiprintf_r>
 8007e5e:	b003      	add	sp, #12
 8007e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e64:	b004      	add	sp, #16
 8007e66:	4770      	bx	lr
 8007e68:	20000018 	.word	0x20000018

08007e6c <_puts_r>:
 8007e6c:	6a03      	ldr	r3, [r0, #32]
 8007e6e:	b570      	push	{r4, r5, r6, lr}
 8007e70:	6884      	ldr	r4, [r0, #8]
 8007e72:	4605      	mov	r5, r0
 8007e74:	460e      	mov	r6, r1
 8007e76:	b90b      	cbnz	r3, 8007e7c <_puts_r+0x10>
 8007e78:	f7ff ffb0 	bl	8007ddc <__sinit>
 8007e7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e7e:	07db      	lsls	r3, r3, #31
 8007e80:	d405      	bmi.n	8007e8e <_puts_r+0x22>
 8007e82:	89a3      	ldrh	r3, [r4, #12]
 8007e84:	0598      	lsls	r0, r3, #22
 8007e86:	d402      	bmi.n	8007e8e <_puts_r+0x22>
 8007e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e8a:	f000 f9c4 	bl	8008216 <__retarget_lock_acquire_recursive>
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	0719      	lsls	r1, r3, #28
 8007e92:	d502      	bpl.n	8007e9a <_puts_r+0x2e>
 8007e94:	6923      	ldr	r3, [r4, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d135      	bne.n	8007f06 <_puts_r+0x9a>
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f000 f8e7 	bl	8008070 <__swsetup_r>
 8007ea2:	b380      	cbz	r0, 8007f06 <_puts_r+0x9a>
 8007ea4:	f04f 35ff 	mov.w	r5, #4294967295
 8007ea8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007eaa:	07da      	lsls	r2, r3, #31
 8007eac:	d405      	bmi.n	8007eba <_puts_r+0x4e>
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	059b      	lsls	r3, r3, #22
 8007eb2:	d402      	bmi.n	8007eba <_puts_r+0x4e>
 8007eb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eb6:	f000 f9af 	bl	8008218 <__retarget_lock_release_recursive>
 8007eba:	4628      	mov	r0, r5
 8007ebc:	bd70      	pop	{r4, r5, r6, pc}
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	da04      	bge.n	8007ecc <_puts_r+0x60>
 8007ec2:	69a2      	ldr	r2, [r4, #24]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	dc17      	bgt.n	8007ef8 <_puts_r+0x8c>
 8007ec8:	290a      	cmp	r1, #10
 8007eca:	d015      	beq.n	8007ef8 <_puts_r+0x8c>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	6022      	str	r2, [r4, #0]
 8007ed2:	7019      	strb	r1, [r3, #0]
 8007ed4:	68a3      	ldr	r3, [r4, #8]
 8007ed6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007eda:	3b01      	subs	r3, #1
 8007edc:	60a3      	str	r3, [r4, #8]
 8007ede:	2900      	cmp	r1, #0
 8007ee0:	d1ed      	bne.n	8007ebe <_puts_r+0x52>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	da11      	bge.n	8007f0a <_puts_r+0x9e>
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	210a      	movs	r1, #10
 8007eea:	4628      	mov	r0, r5
 8007eec:	f000 f881 	bl	8007ff2 <__swbuf_r>
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d0d7      	beq.n	8007ea4 <_puts_r+0x38>
 8007ef4:	250a      	movs	r5, #10
 8007ef6:	e7d7      	b.n	8007ea8 <_puts_r+0x3c>
 8007ef8:	4622      	mov	r2, r4
 8007efa:	4628      	mov	r0, r5
 8007efc:	f000 f879 	bl	8007ff2 <__swbuf_r>
 8007f00:	3001      	adds	r0, #1
 8007f02:	d1e7      	bne.n	8007ed4 <_puts_r+0x68>
 8007f04:	e7ce      	b.n	8007ea4 <_puts_r+0x38>
 8007f06:	3e01      	subs	r6, #1
 8007f08:	e7e4      	b.n	8007ed4 <_puts_r+0x68>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	6022      	str	r2, [r4, #0]
 8007f10:	220a      	movs	r2, #10
 8007f12:	701a      	strb	r2, [r3, #0]
 8007f14:	e7ee      	b.n	8007ef4 <_puts_r+0x88>
	...

08007f18 <puts>:
 8007f18:	4b02      	ldr	r3, [pc, #8]	@ (8007f24 <puts+0xc>)
 8007f1a:	4601      	mov	r1, r0
 8007f1c:	6818      	ldr	r0, [r3, #0]
 8007f1e:	f7ff bfa5 	b.w	8007e6c <_puts_r>
 8007f22:	bf00      	nop
 8007f24:	20000018 	.word	0x20000018

08007f28 <siprintf>:
 8007f28:	b40e      	push	{r1, r2, r3}
 8007f2a:	b510      	push	{r4, lr}
 8007f2c:	b09d      	sub	sp, #116	@ 0x74
 8007f2e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007f30:	9002      	str	r0, [sp, #8]
 8007f32:	9006      	str	r0, [sp, #24]
 8007f34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f38:	480a      	ldr	r0, [pc, #40]	@ (8007f64 <siprintf+0x3c>)
 8007f3a:	9107      	str	r1, [sp, #28]
 8007f3c:	9104      	str	r1, [sp, #16]
 8007f3e:	490a      	ldr	r1, [pc, #40]	@ (8007f68 <siprintf+0x40>)
 8007f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f44:	9105      	str	r1, [sp, #20]
 8007f46:	2400      	movs	r4, #0
 8007f48:	a902      	add	r1, sp, #8
 8007f4a:	6800      	ldr	r0, [r0, #0]
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007f50:	f002 fc4c 	bl	800a7ec <_svfiprintf_r>
 8007f54:	9b02      	ldr	r3, [sp, #8]
 8007f56:	701c      	strb	r4, [r3, #0]
 8007f58:	b01d      	add	sp, #116	@ 0x74
 8007f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f5e:	b003      	add	sp, #12
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20000018 	.word	0x20000018
 8007f68:	ffff0208 	.word	0xffff0208

08007f6c <__sread>:
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	460c      	mov	r4, r1
 8007f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f74:	f000 f900 	bl	8008178 <_read_r>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	bfab      	itete	ge
 8007f7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8007f80:	181b      	addge	r3, r3, r0
 8007f82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f86:	bfac      	ite	ge
 8007f88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f8a:	81a3      	strhlt	r3, [r4, #12]
 8007f8c:	bd10      	pop	{r4, pc}

08007f8e <__swrite>:
 8007f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f92:	461f      	mov	r7, r3
 8007f94:	898b      	ldrh	r3, [r1, #12]
 8007f96:	05db      	lsls	r3, r3, #23
 8007f98:	4605      	mov	r5, r0
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	4616      	mov	r6, r2
 8007f9e:	d505      	bpl.n	8007fac <__swrite+0x1e>
 8007fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f000 f8d4 	bl	8008154 <_lseek_r>
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fb6:	81a3      	strh	r3, [r4, #12]
 8007fb8:	4632      	mov	r2, r6
 8007fba:	463b      	mov	r3, r7
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc2:	f000 b8eb 	b.w	800819c <_write_r>

08007fc6 <__sseek>:
 8007fc6:	b510      	push	{r4, lr}
 8007fc8:	460c      	mov	r4, r1
 8007fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fce:	f000 f8c1 	bl	8008154 <_lseek_r>
 8007fd2:	1c43      	adds	r3, r0, #1
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	bf15      	itete	ne
 8007fd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007fde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007fe2:	81a3      	strheq	r3, [r4, #12]
 8007fe4:	bf18      	it	ne
 8007fe6:	81a3      	strhne	r3, [r4, #12]
 8007fe8:	bd10      	pop	{r4, pc}

08007fea <__sclose>:
 8007fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fee:	f000 b8a1 	b.w	8008134 <_close_r>

08007ff2 <__swbuf_r>:
 8007ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff4:	460e      	mov	r6, r1
 8007ff6:	4614      	mov	r4, r2
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	b118      	cbz	r0, 8008004 <__swbuf_r+0x12>
 8007ffc:	6a03      	ldr	r3, [r0, #32]
 8007ffe:	b90b      	cbnz	r3, 8008004 <__swbuf_r+0x12>
 8008000:	f7ff feec 	bl	8007ddc <__sinit>
 8008004:	69a3      	ldr	r3, [r4, #24]
 8008006:	60a3      	str	r3, [r4, #8]
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	071a      	lsls	r2, r3, #28
 800800c:	d501      	bpl.n	8008012 <__swbuf_r+0x20>
 800800e:	6923      	ldr	r3, [r4, #16]
 8008010:	b943      	cbnz	r3, 8008024 <__swbuf_r+0x32>
 8008012:	4621      	mov	r1, r4
 8008014:	4628      	mov	r0, r5
 8008016:	f000 f82b 	bl	8008070 <__swsetup_r>
 800801a:	b118      	cbz	r0, 8008024 <__swbuf_r+0x32>
 800801c:	f04f 37ff 	mov.w	r7, #4294967295
 8008020:	4638      	mov	r0, r7
 8008022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	6922      	ldr	r2, [r4, #16]
 8008028:	1a98      	subs	r0, r3, r2
 800802a:	6963      	ldr	r3, [r4, #20]
 800802c:	b2f6      	uxtb	r6, r6
 800802e:	4283      	cmp	r3, r0
 8008030:	4637      	mov	r7, r6
 8008032:	dc05      	bgt.n	8008040 <__swbuf_r+0x4e>
 8008034:	4621      	mov	r1, r4
 8008036:	4628      	mov	r0, r5
 8008038:	f002 fe9a 	bl	800ad70 <_fflush_r>
 800803c:	2800      	cmp	r0, #0
 800803e:	d1ed      	bne.n	800801c <__swbuf_r+0x2a>
 8008040:	68a3      	ldr	r3, [r4, #8]
 8008042:	3b01      	subs	r3, #1
 8008044:	60a3      	str	r3, [r4, #8]
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	6022      	str	r2, [r4, #0]
 800804c:	701e      	strb	r6, [r3, #0]
 800804e:	6962      	ldr	r2, [r4, #20]
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	429a      	cmp	r2, r3
 8008054:	d004      	beq.n	8008060 <__swbuf_r+0x6e>
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	07db      	lsls	r3, r3, #31
 800805a:	d5e1      	bpl.n	8008020 <__swbuf_r+0x2e>
 800805c:	2e0a      	cmp	r6, #10
 800805e:	d1df      	bne.n	8008020 <__swbuf_r+0x2e>
 8008060:	4621      	mov	r1, r4
 8008062:	4628      	mov	r0, r5
 8008064:	f002 fe84 	bl	800ad70 <_fflush_r>
 8008068:	2800      	cmp	r0, #0
 800806a:	d0d9      	beq.n	8008020 <__swbuf_r+0x2e>
 800806c:	e7d6      	b.n	800801c <__swbuf_r+0x2a>
	...

08008070 <__swsetup_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4b29      	ldr	r3, [pc, #164]	@ (8008118 <__swsetup_r+0xa8>)
 8008074:	4605      	mov	r5, r0
 8008076:	6818      	ldr	r0, [r3, #0]
 8008078:	460c      	mov	r4, r1
 800807a:	b118      	cbz	r0, 8008084 <__swsetup_r+0x14>
 800807c:	6a03      	ldr	r3, [r0, #32]
 800807e:	b90b      	cbnz	r3, 8008084 <__swsetup_r+0x14>
 8008080:	f7ff feac 	bl	8007ddc <__sinit>
 8008084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008088:	0719      	lsls	r1, r3, #28
 800808a:	d422      	bmi.n	80080d2 <__swsetup_r+0x62>
 800808c:	06da      	lsls	r2, r3, #27
 800808e:	d407      	bmi.n	80080a0 <__swsetup_r+0x30>
 8008090:	2209      	movs	r2, #9
 8008092:	602a      	str	r2, [r5, #0]
 8008094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008098:	81a3      	strh	r3, [r4, #12]
 800809a:	f04f 30ff 	mov.w	r0, #4294967295
 800809e:	e033      	b.n	8008108 <__swsetup_r+0x98>
 80080a0:	0758      	lsls	r0, r3, #29
 80080a2:	d512      	bpl.n	80080ca <__swsetup_r+0x5a>
 80080a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080a6:	b141      	cbz	r1, 80080ba <__swsetup_r+0x4a>
 80080a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080ac:	4299      	cmp	r1, r3
 80080ae:	d002      	beq.n	80080b6 <__swsetup_r+0x46>
 80080b0:	4628      	mov	r0, r5
 80080b2:	f000 ff11 	bl	8008ed8 <_free_r>
 80080b6:	2300      	movs	r3, #0
 80080b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080c0:	81a3      	strh	r3, [r4, #12]
 80080c2:	2300      	movs	r3, #0
 80080c4:	6063      	str	r3, [r4, #4]
 80080c6:	6923      	ldr	r3, [r4, #16]
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	89a3      	ldrh	r3, [r4, #12]
 80080cc:	f043 0308 	orr.w	r3, r3, #8
 80080d0:	81a3      	strh	r3, [r4, #12]
 80080d2:	6923      	ldr	r3, [r4, #16]
 80080d4:	b94b      	cbnz	r3, 80080ea <__swsetup_r+0x7a>
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80080dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080e0:	d003      	beq.n	80080ea <__swsetup_r+0x7a>
 80080e2:	4621      	mov	r1, r4
 80080e4:	4628      	mov	r0, r5
 80080e6:	f002 fe91 	bl	800ae0c <__smakebuf_r>
 80080ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ee:	f013 0201 	ands.w	r2, r3, #1
 80080f2:	d00a      	beq.n	800810a <__swsetup_r+0x9a>
 80080f4:	2200      	movs	r2, #0
 80080f6:	60a2      	str	r2, [r4, #8]
 80080f8:	6962      	ldr	r2, [r4, #20]
 80080fa:	4252      	negs	r2, r2
 80080fc:	61a2      	str	r2, [r4, #24]
 80080fe:	6922      	ldr	r2, [r4, #16]
 8008100:	b942      	cbnz	r2, 8008114 <__swsetup_r+0xa4>
 8008102:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008106:	d1c5      	bne.n	8008094 <__swsetup_r+0x24>
 8008108:	bd38      	pop	{r3, r4, r5, pc}
 800810a:	0799      	lsls	r1, r3, #30
 800810c:	bf58      	it	pl
 800810e:	6962      	ldrpl	r2, [r4, #20]
 8008110:	60a2      	str	r2, [r4, #8]
 8008112:	e7f4      	b.n	80080fe <__swsetup_r+0x8e>
 8008114:	2000      	movs	r0, #0
 8008116:	e7f7      	b.n	8008108 <__swsetup_r+0x98>
 8008118:	20000018 	.word	0x20000018

0800811c <memset>:
 800811c:	4402      	add	r2, r0
 800811e:	4603      	mov	r3, r0
 8008120:	4293      	cmp	r3, r2
 8008122:	d100      	bne.n	8008126 <memset+0xa>
 8008124:	4770      	bx	lr
 8008126:	f803 1b01 	strb.w	r1, [r3], #1
 800812a:	e7f9      	b.n	8008120 <memset+0x4>

0800812c <_localeconv_r>:
 800812c:	4800      	ldr	r0, [pc, #0]	@ (8008130 <_localeconv_r+0x4>)
 800812e:	4770      	bx	lr
 8008130:	20000158 	.word	0x20000158

08008134 <_close_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4d06      	ldr	r5, [pc, #24]	@ (8008150 <_close_r+0x1c>)
 8008138:	2300      	movs	r3, #0
 800813a:	4604      	mov	r4, r0
 800813c:	4608      	mov	r0, r1
 800813e:	602b      	str	r3, [r5, #0]
 8008140:	f7fa f974 	bl	800242c <_close>
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	d102      	bne.n	800814e <_close_r+0x1a>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	b103      	cbz	r3, 800814e <_close_r+0x1a>
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	bd38      	pop	{r3, r4, r5, pc}
 8008150:	20000548 	.word	0x20000548

08008154 <_lseek_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4d07      	ldr	r5, [pc, #28]	@ (8008174 <_lseek_r+0x20>)
 8008158:	4604      	mov	r4, r0
 800815a:	4608      	mov	r0, r1
 800815c:	4611      	mov	r1, r2
 800815e:	2200      	movs	r2, #0
 8008160:	602a      	str	r2, [r5, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	f7fa f989 	bl	800247a <_lseek>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_lseek_r+0x1e>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_lseek_r+0x1e>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	20000548 	.word	0x20000548

08008178 <_read_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4d07      	ldr	r5, [pc, #28]	@ (8008198 <_read_r+0x20>)
 800817c:	4604      	mov	r4, r0
 800817e:	4608      	mov	r0, r1
 8008180:	4611      	mov	r1, r2
 8008182:	2200      	movs	r2, #0
 8008184:	602a      	str	r2, [r5, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	f7fa f917 	bl	80023ba <_read>
 800818c:	1c43      	adds	r3, r0, #1
 800818e:	d102      	bne.n	8008196 <_read_r+0x1e>
 8008190:	682b      	ldr	r3, [r5, #0]
 8008192:	b103      	cbz	r3, 8008196 <_read_r+0x1e>
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	20000548 	.word	0x20000548

0800819c <_write_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4d07      	ldr	r5, [pc, #28]	@ (80081bc <_write_r+0x20>)
 80081a0:	4604      	mov	r4, r0
 80081a2:	4608      	mov	r0, r1
 80081a4:	4611      	mov	r1, r2
 80081a6:	2200      	movs	r2, #0
 80081a8:	602a      	str	r2, [r5, #0]
 80081aa:	461a      	mov	r2, r3
 80081ac:	f7fa f922 	bl	80023f4 <_write>
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	d102      	bne.n	80081ba <_write_r+0x1e>
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	b103      	cbz	r3, 80081ba <_write_r+0x1e>
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	bd38      	pop	{r3, r4, r5, pc}
 80081bc:	20000548 	.word	0x20000548

080081c0 <__errno>:
 80081c0:	4b01      	ldr	r3, [pc, #4]	@ (80081c8 <__errno+0x8>)
 80081c2:	6818      	ldr	r0, [r3, #0]
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	20000018 	.word	0x20000018

080081cc <__libc_init_array>:
 80081cc:	b570      	push	{r4, r5, r6, lr}
 80081ce:	4d0d      	ldr	r5, [pc, #52]	@ (8008204 <__libc_init_array+0x38>)
 80081d0:	4c0d      	ldr	r4, [pc, #52]	@ (8008208 <__libc_init_array+0x3c>)
 80081d2:	1b64      	subs	r4, r4, r5
 80081d4:	10a4      	asrs	r4, r4, #2
 80081d6:	2600      	movs	r6, #0
 80081d8:	42a6      	cmp	r6, r4
 80081da:	d109      	bne.n	80081f0 <__libc_init_array+0x24>
 80081dc:	4d0b      	ldr	r5, [pc, #44]	@ (800820c <__libc_init_array+0x40>)
 80081de:	4c0c      	ldr	r4, [pc, #48]	@ (8008210 <__libc_init_array+0x44>)
 80081e0:	f003 fae4 	bl	800b7ac <_init>
 80081e4:	1b64      	subs	r4, r4, r5
 80081e6:	10a4      	asrs	r4, r4, #2
 80081e8:	2600      	movs	r6, #0
 80081ea:	42a6      	cmp	r6, r4
 80081ec:	d105      	bne.n	80081fa <__libc_init_array+0x2e>
 80081ee:	bd70      	pop	{r4, r5, r6, pc}
 80081f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80081f4:	4798      	blx	r3
 80081f6:	3601      	adds	r6, #1
 80081f8:	e7ee      	b.n	80081d8 <__libc_init_array+0xc>
 80081fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80081fe:	4798      	blx	r3
 8008200:	3601      	adds	r6, #1
 8008202:	e7f2      	b.n	80081ea <__libc_init_array+0x1e>
 8008204:	0800bd34 	.word	0x0800bd34
 8008208:	0800bd34 	.word	0x0800bd34
 800820c:	0800bd34 	.word	0x0800bd34
 8008210:	0800bd38 	.word	0x0800bd38

08008214 <__retarget_lock_init_recursive>:
 8008214:	4770      	bx	lr

08008216 <__retarget_lock_acquire_recursive>:
 8008216:	4770      	bx	lr

08008218 <__retarget_lock_release_recursive>:
 8008218:	4770      	bx	lr
	...

0800821c <nanf>:
 800821c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008224 <nanf+0x8>
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	7fc00000 	.word	0x7fc00000

08008228 <quorem>:
 8008228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822c:	6903      	ldr	r3, [r0, #16]
 800822e:	690c      	ldr	r4, [r1, #16]
 8008230:	42a3      	cmp	r3, r4
 8008232:	4607      	mov	r7, r0
 8008234:	db7e      	blt.n	8008334 <quorem+0x10c>
 8008236:	3c01      	subs	r4, #1
 8008238:	f101 0814 	add.w	r8, r1, #20
 800823c:	00a3      	lsls	r3, r4, #2
 800823e:	f100 0514 	add.w	r5, r0, #20
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800824e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008252:	3301      	adds	r3, #1
 8008254:	429a      	cmp	r2, r3
 8008256:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800825a:	fbb2 f6f3 	udiv	r6, r2, r3
 800825e:	d32e      	bcc.n	80082be <quorem+0x96>
 8008260:	f04f 0a00 	mov.w	sl, #0
 8008264:	46c4      	mov	ip, r8
 8008266:	46ae      	mov	lr, r5
 8008268:	46d3      	mov	fp, sl
 800826a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800826e:	b298      	uxth	r0, r3
 8008270:	fb06 a000 	mla	r0, r6, r0, sl
 8008274:	0c02      	lsrs	r2, r0, #16
 8008276:	0c1b      	lsrs	r3, r3, #16
 8008278:	fb06 2303 	mla	r3, r6, r3, r2
 800827c:	f8de 2000 	ldr.w	r2, [lr]
 8008280:	b280      	uxth	r0, r0
 8008282:	b292      	uxth	r2, r2
 8008284:	1a12      	subs	r2, r2, r0
 8008286:	445a      	add	r2, fp
 8008288:	f8de 0000 	ldr.w	r0, [lr]
 800828c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008290:	b29b      	uxth	r3, r3
 8008292:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008296:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800829a:	b292      	uxth	r2, r2
 800829c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80082a0:	45e1      	cmp	r9, ip
 80082a2:	f84e 2b04 	str.w	r2, [lr], #4
 80082a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80082aa:	d2de      	bcs.n	800826a <quorem+0x42>
 80082ac:	9b00      	ldr	r3, [sp, #0]
 80082ae:	58eb      	ldr	r3, [r5, r3]
 80082b0:	b92b      	cbnz	r3, 80082be <quorem+0x96>
 80082b2:	9b01      	ldr	r3, [sp, #4]
 80082b4:	3b04      	subs	r3, #4
 80082b6:	429d      	cmp	r5, r3
 80082b8:	461a      	mov	r2, r3
 80082ba:	d32f      	bcc.n	800831c <quorem+0xf4>
 80082bc:	613c      	str	r4, [r7, #16]
 80082be:	4638      	mov	r0, r7
 80082c0:	f001 f9c6 	bl	8009650 <__mcmp>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	db25      	blt.n	8008314 <quorem+0xec>
 80082c8:	4629      	mov	r1, r5
 80082ca:	2000      	movs	r0, #0
 80082cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80082d0:	f8d1 c000 	ldr.w	ip, [r1]
 80082d4:	fa1f fe82 	uxth.w	lr, r2
 80082d8:	fa1f f38c 	uxth.w	r3, ip
 80082dc:	eba3 030e 	sub.w	r3, r3, lr
 80082e0:	4403      	add	r3, r0
 80082e2:	0c12      	lsrs	r2, r2, #16
 80082e4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80082e8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082f2:	45c1      	cmp	r9, r8
 80082f4:	f841 3b04 	str.w	r3, [r1], #4
 80082f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80082fc:	d2e6      	bcs.n	80082cc <quorem+0xa4>
 80082fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008306:	b922      	cbnz	r2, 8008312 <quorem+0xea>
 8008308:	3b04      	subs	r3, #4
 800830a:	429d      	cmp	r5, r3
 800830c:	461a      	mov	r2, r3
 800830e:	d30b      	bcc.n	8008328 <quorem+0x100>
 8008310:	613c      	str	r4, [r7, #16]
 8008312:	3601      	adds	r6, #1
 8008314:	4630      	mov	r0, r6
 8008316:	b003      	add	sp, #12
 8008318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	3b04      	subs	r3, #4
 8008320:	2a00      	cmp	r2, #0
 8008322:	d1cb      	bne.n	80082bc <quorem+0x94>
 8008324:	3c01      	subs	r4, #1
 8008326:	e7c6      	b.n	80082b6 <quorem+0x8e>
 8008328:	6812      	ldr	r2, [r2, #0]
 800832a:	3b04      	subs	r3, #4
 800832c:	2a00      	cmp	r2, #0
 800832e:	d1ef      	bne.n	8008310 <quorem+0xe8>
 8008330:	3c01      	subs	r4, #1
 8008332:	e7ea      	b.n	800830a <quorem+0xe2>
 8008334:	2000      	movs	r0, #0
 8008336:	e7ee      	b.n	8008316 <quorem+0xee>

08008338 <_dtoa_r>:
 8008338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	69c7      	ldr	r7, [r0, #28]
 800833e:	b097      	sub	sp, #92	@ 0x5c
 8008340:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008344:	ec55 4b10 	vmov	r4, r5, d0
 8008348:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800834a:	9107      	str	r1, [sp, #28]
 800834c:	4681      	mov	r9, r0
 800834e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008350:	9311      	str	r3, [sp, #68]	@ 0x44
 8008352:	b97f      	cbnz	r7, 8008374 <_dtoa_r+0x3c>
 8008354:	2010      	movs	r0, #16
 8008356:	f000 fe09 	bl	8008f6c <malloc>
 800835a:	4602      	mov	r2, r0
 800835c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008360:	b920      	cbnz	r0, 800836c <_dtoa_r+0x34>
 8008362:	4ba9      	ldr	r3, [pc, #676]	@ (8008608 <_dtoa_r+0x2d0>)
 8008364:	21ef      	movs	r1, #239	@ 0xef
 8008366:	48a9      	ldr	r0, [pc, #676]	@ (800860c <_dtoa_r+0x2d4>)
 8008368:	f002 fe02 	bl	800af70 <__assert_func>
 800836c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008370:	6007      	str	r7, [r0, #0]
 8008372:	60c7      	str	r7, [r0, #12]
 8008374:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008378:	6819      	ldr	r1, [r3, #0]
 800837a:	b159      	cbz	r1, 8008394 <_dtoa_r+0x5c>
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	604a      	str	r2, [r1, #4]
 8008380:	2301      	movs	r3, #1
 8008382:	4093      	lsls	r3, r2
 8008384:	608b      	str	r3, [r1, #8]
 8008386:	4648      	mov	r0, r9
 8008388:	f000 fee6 	bl	8009158 <_Bfree>
 800838c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008390:	2200      	movs	r2, #0
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	1e2b      	subs	r3, r5, #0
 8008396:	bfb9      	ittee	lt
 8008398:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800839c:	9305      	strlt	r3, [sp, #20]
 800839e:	2300      	movge	r3, #0
 80083a0:	6033      	strge	r3, [r6, #0]
 80083a2:	9f05      	ldr	r7, [sp, #20]
 80083a4:	4b9a      	ldr	r3, [pc, #616]	@ (8008610 <_dtoa_r+0x2d8>)
 80083a6:	bfbc      	itt	lt
 80083a8:	2201      	movlt	r2, #1
 80083aa:	6032      	strlt	r2, [r6, #0]
 80083ac:	43bb      	bics	r3, r7
 80083ae:	d112      	bne.n	80083d6 <_dtoa_r+0x9e>
 80083b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80083b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083bc:	4323      	orrs	r3, r4
 80083be:	f000 855a 	beq.w	8008e76 <_dtoa_r+0xb3e>
 80083c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80083c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008624 <_dtoa_r+0x2ec>
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 855c 	beq.w	8008e86 <_dtoa_r+0xb4e>
 80083ce:	f10a 0303 	add.w	r3, sl, #3
 80083d2:	f000 bd56 	b.w	8008e82 <_dtoa_r+0xb4a>
 80083d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80083da:	2200      	movs	r2, #0
 80083dc:	ec51 0b17 	vmov	r0, r1, d7
 80083e0:	2300      	movs	r3, #0
 80083e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80083e6:	f7f8 fb77 	bl	8000ad8 <__aeabi_dcmpeq>
 80083ea:	4680      	mov	r8, r0
 80083ec:	b158      	cbz	r0, 8008406 <_dtoa_r+0xce>
 80083ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80083f0:	2301      	movs	r3, #1
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80083f6:	b113      	cbz	r3, 80083fe <_dtoa_r+0xc6>
 80083f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80083fa:	4b86      	ldr	r3, [pc, #536]	@ (8008614 <_dtoa_r+0x2dc>)
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008628 <_dtoa_r+0x2f0>
 8008402:	f000 bd40 	b.w	8008e86 <_dtoa_r+0xb4e>
 8008406:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800840a:	aa14      	add	r2, sp, #80	@ 0x50
 800840c:	a915      	add	r1, sp, #84	@ 0x54
 800840e:	4648      	mov	r0, r9
 8008410:	f001 fa3e 	bl	8009890 <__d2b>
 8008414:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008418:	9002      	str	r0, [sp, #8]
 800841a:	2e00      	cmp	r6, #0
 800841c:	d078      	beq.n	8008510 <_dtoa_r+0x1d8>
 800841e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008420:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008428:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800842c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008430:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008434:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008438:	4619      	mov	r1, r3
 800843a:	2200      	movs	r2, #0
 800843c:	4b76      	ldr	r3, [pc, #472]	@ (8008618 <_dtoa_r+0x2e0>)
 800843e:	f7f7 ff2b 	bl	8000298 <__aeabi_dsub>
 8008442:	a36b      	add	r3, pc, #428	@ (adr r3, 80085f0 <_dtoa_r+0x2b8>)
 8008444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008448:	f7f8 f8de 	bl	8000608 <__aeabi_dmul>
 800844c:	a36a      	add	r3, pc, #424	@ (adr r3, 80085f8 <_dtoa_r+0x2c0>)
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	f7f7 ff23 	bl	800029c <__adddf3>
 8008456:	4604      	mov	r4, r0
 8008458:	4630      	mov	r0, r6
 800845a:	460d      	mov	r5, r1
 800845c:	f7f8 f86a 	bl	8000534 <__aeabi_i2d>
 8008460:	a367      	add	r3, pc, #412	@ (adr r3, 8008600 <_dtoa_r+0x2c8>)
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	f7f8 f8cf 	bl	8000608 <__aeabi_dmul>
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
 800846e:	4620      	mov	r0, r4
 8008470:	4629      	mov	r1, r5
 8008472:	f7f7 ff13 	bl	800029c <__adddf3>
 8008476:	4604      	mov	r4, r0
 8008478:	460d      	mov	r5, r1
 800847a:	f7f8 fb75 	bl	8000b68 <__aeabi_d2iz>
 800847e:	2200      	movs	r2, #0
 8008480:	4607      	mov	r7, r0
 8008482:	2300      	movs	r3, #0
 8008484:	4620      	mov	r0, r4
 8008486:	4629      	mov	r1, r5
 8008488:	f7f8 fb30 	bl	8000aec <__aeabi_dcmplt>
 800848c:	b140      	cbz	r0, 80084a0 <_dtoa_r+0x168>
 800848e:	4638      	mov	r0, r7
 8008490:	f7f8 f850 	bl	8000534 <__aeabi_i2d>
 8008494:	4622      	mov	r2, r4
 8008496:	462b      	mov	r3, r5
 8008498:	f7f8 fb1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800849c:	b900      	cbnz	r0, 80084a0 <_dtoa_r+0x168>
 800849e:	3f01      	subs	r7, #1
 80084a0:	2f16      	cmp	r7, #22
 80084a2:	d852      	bhi.n	800854a <_dtoa_r+0x212>
 80084a4:	4b5d      	ldr	r3, [pc, #372]	@ (800861c <_dtoa_r+0x2e4>)
 80084a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80084b2:	f7f8 fb1b 	bl	8000aec <__aeabi_dcmplt>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d049      	beq.n	800854e <_dtoa_r+0x216>
 80084ba:	3f01      	subs	r7, #1
 80084bc:	2300      	movs	r3, #0
 80084be:	9310      	str	r3, [sp, #64]	@ 0x40
 80084c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80084c2:	1b9b      	subs	r3, r3, r6
 80084c4:	1e5a      	subs	r2, r3, #1
 80084c6:	bf45      	ittet	mi
 80084c8:	f1c3 0301 	rsbmi	r3, r3, #1
 80084cc:	9300      	strmi	r3, [sp, #0]
 80084ce:	2300      	movpl	r3, #0
 80084d0:	2300      	movmi	r3, #0
 80084d2:	9206      	str	r2, [sp, #24]
 80084d4:	bf54      	ite	pl
 80084d6:	9300      	strpl	r3, [sp, #0]
 80084d8:	9306      	strmi	r3, [sp, #24]
 80084da:	2f00      	cmp	r7, #0
 80084dc:	db39      	blt.n	8008552 <_dtoa_r+0x21a>
 80084de:	9b06      	ldr	r3, [sp, #24]
 80084e0:	970d      	str	r7, [sp, #52]	@ 0x34
 80084e2:	443b      	add	r3, r7
 80084e4:	9306      	str	r3, [sp, #24]
 80084e6:	2300      	movs	r3, #0
 80084e8:	9308      	str	r3, [sp, #32]
 80084ea:	9b07      	ldr	r3, [sp, #28]
 80084ec:	2b09      	cmp	r3, #9
 80084ee:	d863      	bhi.n	80085b8 <_dtoa_r+0x280>
 80084f0:	2b05      	cmp	r3, #5
 80084f2:	bfc4      	itt	gt
 80084f4:	3b04      	subgt	r3, #4
 80084f6:	9307      	strgt	r3, [sp, #28]
 80084f8:	9b07      	ldr	r3, [sp, #28]
 80084fa:	f1a3 0302 	sub.w	r3, r3, #2
 80084fe:	bfcc      	ite	gt
 8008500:	2400      	movgt	r4, #0
 8008502:	2401      	movle	r4, #1
 8008504:	2b03      	cmp	r3, #3
 8008506:	d863      	bhi.n	80085d0 <_dtoa_r+0x298>
 8008508:	e8df f003 	tbb	[pc, r3]
 800850c:	2b375452 	.word	0x2b375452
 8008510:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008514:	441e      	add	r6, r3
 8008516:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800851a:	2b20      	cmp	r3, #32
 800851c:	bfc1      	itttt	gt
 800851e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008522:	409f      	lslgt	r7, r3
 8008524:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008528:	fa24 f303 	lsrgt.w	r3, r4, r3
 800852c:	bfd6      	itet	le
 800852e:	f1c3 0320 	rsble	r3, r3, #32
 8008532:	ea47 0003 	orrgt.w	r0, r7, r3
 8008536:	fa04 f003 	lslle.w	r0, r4, r3
 800853a:	f7f7 ffeb 	bl	8000514 <__aeabi_ui2d>
 800853e:	2201      	movs	r2, #1
 8008540:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008544:	3e01      	subs	r6, #1
 8008546:	9212      	str	r2, [sp, #72]	@ 0x48
 8008548:	e776      	b.n	8008438 <_dtoa_r+0x100>
 800854a:	2301      	movs	r3, #1
 800854c:	e7b7      	b.n	80084be <_dtoa_r+0x186>
 800854e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008550:	e7b6      	b.n	80084c0 <_dtoa_r+0x188>
 8008552:	9b00      	ldr	r3, [sp, #0]
 8008554:	1bdb      	subs	r3, r3, r7
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	427b      	negs	r3, r7
 800855a:	9308      	str	r3, [sp, #32]
 800855c:	2300      	movs	r3, #0
 800855e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008560:	e7c3      	b.n	80084ea <_dtoa_r+0x1b2>
 8008562:	2301      	movs	r3, #1
 8008564:	9309      	str	r3, [sp, #36]	@ 0x24
 8008566:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008568:	eb07 0b03 	add.w	fp, r7, r3
 800856c:	f10b 0301 	add.w	r3, fp, #1
 8008570:	2b01      	cmp	r3, #1
 8008572:	9303      	str	r3, [sp, #12]
 8008574:	bfb8      	it	lt
 8008576:	2301      	movlt	r3, #1
 8008578:	e006      	b.n	8008588 <_dtoa_r+0x250>
 800857a:	2301      	movs	r3, #1
 800857c:	9309      	str	r3, [sp, #36]	@ 0x24
 800857e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008580:	2b00      	cmp	r3, #0
 8008582:	dd28      	ble.n	80085d6 <_dtoa_r+0x29e>
 8008584:	469b      	mov	fp, r3
 8008586:	9303      	str	r3, [sp, #12]
 8008588:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800858c:	2100      	movs	r1, #0
 800858e:	2204      	movs	r2, #4
 8008590:	f102 0514 	add.w	r5, r2, #20
 8008594:	429d      	cmp	r5, r3
 8008596:	d926      	bls.n	80085e6 <_dtoa_r+0x2ae>
 8008598:	6041      	str	r1, [r0, #4]
 800859a:	4648      	mov	r0, r9
 800859c:	f000 fd9c 	bl	80090d8 <_Balloc>
 80085a0:	4682      	mov	sl, r0
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d142      	bne.n	800862c <_dtoa_r+0x2f4>
 80085a6:	4b1e      	ldr	r3, [pc, #120]	@ (8008620 <_dtoa_r+0x2e8>)
 80085a8:	4602      	mov	r2, r0
 80085aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80085ae:	e6da      	b.n	8008366 <_dtoa_r+0x2e>
 80085b0:	2300      	movs	r3, #0
 80085b2:	e7e3      	b.n	800857c <_dtoa_r+0x244>
 80085b4:	2300      	movs	r3, #0
 80085b6:	e7d5      	b.n	8008564 <_dtoa_r+0x22c>
 80085b8:	2401      	movs	r4, #1
 80085ba:	2300      	movs	r3, #0
 80085bc:	9307      	str	r3, [sp, #28]
 80085be:	9409      	str	r4, [sp, #36]	@ 0x24
 80085c0:	f04f 3bff 	mov.w	fp, #4294967295
 80085c4:	2200      	movs	r2, #0
 80085c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80085ca:	2312      	movs	r3, #18
 80085cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80085ce:	e7db      	b.n	8008588 <_dtoa_r+0x250>
 80085d0:	2301      	movs	r3, #1
 80085d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80085d4:	e7f4      	b.n	80085c0 <_dtoa_r+0x288>
 80085d6:	f04f 0b01 	mov.w	fp, #1
 80085da:	f8cd b00c 	str.w	fp, [sp, #12]
 80085de:	465b      	mov	r3, fp
 80085e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80085e4:	e7d0      	b.n	8008588 <_dtoa_r+0x250>
 80085e6:	3101      	adds	r1, #1
 80085e8:	0052      	lsls	r2, r2, #1
 80085ea:	e7d1      	b.n	8008590 <_dtoa_r+0x258>
 80085ec:	f3af 8000 	nop.w
 80085f0:	636f4361 	.word	0x636f4361
 80085f4:	3fd287a7 	.word	0x3fd287a7
 80085f8:	8b60c8b3 	.word	0x8b60c8b3
 80085fc:	3fc68a28 	.word	0x3fc68a28
 8008600:	509f79fb 	.word	0x509f79fb
 8008604:	3fd34413 	.word	0x3fd34413
 8008608:	0800b946 	.word	0x0800b946
 800860c:	0800b95d 	.word	0x0800b95d
 8008610:	7ff00000 	.word	0x7ff00000
 8008614:	0800b911 	.word	0x0800b911
 8008618:	3ff80000 	.word	0x3ff80000
 800861c:	0800bb10 	.word	0x0800bb10
 8008620:	0800b9b5 	.word	0x0800b9b5
 8008624:	0800b942 	.word	0x0800b942
 8008628:	0800b910 	.word	0x0800b910
 800862c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008630:	6018      	str	r0, [r3, #0]
 8008632:	9b03      	ldr	r3, [sp, #12]
 8008634:	2b0e      	cmp	r3, #14
 8008636:	f200 80a1 	bhi.w	800877c <_dtoa_r+0x444>
 800863a:	2c00      	cmp	r4, #0
 800863c:	f000 809e 	beq.w	800877c <_dtoa_r+0x444>
 8008640:	2f00      	cmp	r7, #0
 8008642:	dd33      	ble.n	80086ac <_dtoa_r+0x374>
 8008644:	4b9c      	ldr	r3, [pc, #624]	@ (80088b8 <_dtoa_r+0x580>)
 8008646:	f007 020f 	and.w	r2, r7, #15
 800864a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800864e:	ed93 7b00 	vldr	d7, [r3]
 8008652:	05f8      	lsls	r0, r7, #23
 8008654:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008658:	ea4f 1427 	mov.w	r4, r7, asr #4
 800865c:	d516      	bpl.n	800868c <_dtoa_r+0x354>
 800865e:	4b97      	ldr	r3, [pc, #604]	@ (80088bc <_dtoa_r+0x584>)
 8008660:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008664:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008668:	f7f8 f8f8 	bl	800085c <__aeabi_ddiv>
 800866c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008670:	f004 040f 	and.w	r4, r4, #15
 8008674:	2603      	movs	r6, #3
 8008676:	4d91      	ldr	r5, [pc, #580]	@ (80088bc <_dtoa_r+0x584>)
 8008678:	b954      	cbnz	r4, 8008690 <_dtoa_r+0x358>
 800867a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800867e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008682:	f7f8 f8eb 	bl	800085c <__aeabi_ddiv>
 8008686:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800868a:	e028      	b.n	80086de <_dtoa_r+0x3a6>
 800868c:	2602      	movs	r6, #2
 800868e:	e7f2      	b.n	8008676 <_dtoa_r+0x33e>
 8008690:	07e1      	lsls	r1, r4, #31
 8008692:	d508      	bpl.n	80086a6 <_dtoa_r+0x36e>
 8008694:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008698:	e9d5 2300 	ldrd	r2, r3, [r5]
 800869c:	f7f7 ffb4 	bl	8000608 <__aeabi_dmul>
 80086a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80086a4:	3601      	adds	r6, #1
 80086a6:	1064      	asrs	r4, r4, #1
 80086a8:	3508      	adds	r5, #8
 80086aa:	e7e5      	b.n	8008678 <_dtoa_r+0x340>
 80086ac:	f000 80af 	beq.w	800880e <_dtoa_r+0x4d6>
 80086b0:	427c      	negs	r4, r7
 80086b2:	4b81      	ldr	r3, [pc, #516]	@ (80088b8 <_dtoa_r+0x580>)
 80086b4:	4d81      	ldr	r5, [pc, #516]	@ (80088bc <_dtoa_r+0x584>)
 80086b6:	f004 020f 	and.w	r2, r4, #15
 80086ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80086c6:	f7f7 ff9f 	bl	8000608 <__aeabi_dmul>
 80086ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086ce:	1124      	asrs	r4, r4, #4
 80086d0:	2300      	movs	r3, #0
 80086d2:	2602      	movs	r6, #2
 80086d4:	2c00      	cmp	r4, #0
 80086d6:	f040 808f 	bne.w	80087f8 <_dtoa_r+0x4c0>
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1d3      	bne.n	8008686 <_dtoa_r+0x34e>
 80086de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80086e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 8094 	beq.w	8008812 <_dtoa_r+0x4da>
 80086ea:	4b75      	ldr	r3, [pc, #468]	@ (80088c0 <_dtoa_r+0x588>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	4620      	mov	r0, r4
 80086f0:	4629      	mov	r1, r5
 80086f2:	f7f8 f9fb 	bl	8000aec <__aeabi_dcmplt>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	f000 808b 	beq.w	8008812 <_dtoa_r+0x4da>
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 8087 	beq.w	8008812 <_dtoa_r+0x4da>
 8008704:	f1bb 0f00 	cmp.w	fp, #0
 8008708:	dd34      	ble.n	8008774 <_dtoa_r+0x43c>
 800870a:	4620      	mov	r0, r4
 800870c:	4b6d      	ldr	r3, [pc, #436]	@ (80088c4 <_dtoa_r+0x58c>)
 800870e:	2200      	movs	r2, #0
 8008710:	4629      	mov	r1, r5
 8008712:	f7f7 ff79 	bl	8000608 <__aeabi_dmul>
 8008716:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800871a:	f107 38ff 	add.w	r8, r7, #4294967295
 800871e:	3601      	adds	r6, #1
 8008720:	465c      	mov	r4, fp
 8008722:	4630      	mov	r0, r6
 8008724:	f7f7 ff06 	bl	8000534 <__aeabi_i2d>
 8008728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800872c:	f7f7 ff6c 	bl	8000608 <__aeabi_dmul>
 8008730:	4b65      	ldr	r3, [pc, #404]	@ (80088c8 <_dtoa_r+0x590>)
 8008732:	2200      	movs	r2, #0
 8008734:	f7f7 fdb2 	bl	800029c <__adddf3>
 8008738:	4605      	mov	r5, r0
 800873a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800873e:	2c00      	cmp	r4, #0
 8008740:	d16a      	bne.n	8008818 <_dtoa_r+0x4e0>
 8008742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008746:	4b61      	ldr	r3, [pc, #388]	@ (80088cc <_dtoa_r+0x594>)
 8008748:	2200      	movs	r2, #0
 800874a:	f7f7 fda5 	bl	8000298 <__aeabi_dsub>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008756:	462a      	mov	r2, r5
 8008758:	4633      	mov	r3, r6
 800875a:	f7f8 f9e5 	bl	8000b28 <__aeabi_dcmpgt>
 800875e:	2800      	cmp	r0, #0
 8008760:	f040 8298 	bne.w	8008c94 <_dtoa_r+0x95c>
 8008764:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008768:	462a      	mov	r2, r5
 800876a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800876e:	f7f8 f9bd 	bl	8000aec <__aeabi_dcmplt>
 8008772:	bb38      	cbnz	r0, 80087c4 <_dtoa_r+0x48c>
 8008774:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008778:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800877c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800877e:	2b00      	cmp	r3, #0
 8008780:	f2c0 8157 	blt.w	8008a32 <_dtoa_r+0x6fa>
 8008784:	2f0e      	cmp	r7, #14
 8008786:	f300 8154 	bgt.w	8008a32 <_dtoa_r+0x6fa>
 800878a:	4b4b      	ldr	r3, [pc, #300]	@ (80088b8 <_dtoa_r+0x580>)
 800878c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008790:	ed93 7b00 	vldr	d7, [r3]
 8008794:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008796:	2b00      	cmp	r3, #0
 8008798:	ed8d 7b00 	vstr	d7, [sp]
 800879c:	f280 80e5 	bge.w	800896a <_dtoa_r+0x632>
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f300 80e1 	bgt.w	800896a <_dtoa_r+0x632>
 80087a8:	d10c      	bne.n	80087c4 <_dtoa_r+0x48c>
 80087aa:	4b48      	ldr	r3, [pc, #288]	@ (80088cc <_dtoa_r+0x594>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	ec51 0b17 	vmov	r0, r1, d7
 80087b2:	f7f7 ff29 	bl	8000608 <__aeabi_dmul>
 80087b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087ba:	f7f8 f9ab 	bl	8000b14 <__aeabi_dcmpge>
 80087be:	2800      	cmp	r0, #0
 80087c0:	f000 8266 	beq.w	8008c90 <_dtoa_r+0x958>
 80087c4:	2400      	movs	r4, #0
 80087c6:	4625      	mov	r5, r4
 80087c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087ca:	4656      	mov	r6, sl
 80087cc:	ea6f 0803 	mvn.w	r8, r3
 80087d0:	2700      	movs	r7, #0
 80087d2:	4621      	mov	r1, r4
 80087d4:	4648      	mov	r0, r9
 80087d6:	f000 fcbf 	bl	8009158 <_Bfree>
 80087da:	2d00      	cmp	r5, #0
 80087dc:	f000 80bd 	beq.w	800895a <_dtoa_r+0x622>
 80087e0:	b12f      	cbz	r7, 80087ee <_dtoa_r+0x4b6>
 80087e2:	42af      	cmp	r7, r5
 80087e4:	d003      	beq.n	80087ee <_dtoa_r+0x4b6>
 80087e6:	4639      	mov	r1, r7
 80087e8:	4648      	mov	r0, r9
 80087ea:	f000 fcb5 	bl	8009158 <_Bfree>
 80087ee:	4629      	mov	r1, r5
 80087f0:	4648      	mov	r0, r9
 80087f2:	f000 fcb1 	bl	8009158 <_Bfree>
 80087f6:	e0b0      	b.n	800895a <_dtoa_r+0x622>
 80087f8:	07e2      	lsls	r2, r4, #31
 80087fa:	d505      	bpl.n	8008808 <_dtoa_r+0x4d0>
 80087fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008800:	f7f7 ff02 	bl	8000608 <__aeabi_dmul>
 8008804:	3601      	adds	r6, #1
 8008806:	2301      	movs	r3, #1
 8008808:	1064      	asrs	r4, r4, #1
 800880a:	3508      	adds	r5, #8
 800880c:	e762      	b.n	80086d4 <_dtoa_r+0x39c>
 800880e:	2602      	movs	r6, #2
 8008810:	e765      	b.n	80086de <_dtoa_r+0x3a6>
 8008812:	9c03      	ldr	r4, [sp, #12]
 8008814:	46b8      	mov	r8, r7
 8008816:	e784      	b.n	8008722 <_dtoa_r+0x3ea>
 8008818:	4b27      	ldr	r3, [pc, #156]	@ (80088b8 <_dtoa_r+0x580>)
 800881a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800881c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008820:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008824:	4454      	add	r4, sl
 8008826:	2900      	cmp	r1, #0
 8008828:	d054      	beq.n	80088d4 <_dtoa_r+0x59c>
 800882a:	4929      	ldr	r1, [pc, #164]	@ (80088d0 <_dtoa_r+0x598>)
 800882c:	2000      	movs	r0, #0
 800882e:	f7f8 f815 	bl	800085c <__aeabi_ddiv>
 8008832:	4633      	mov	r3, r6
 8008834:	462a      	mov	r2, r5
 8008836:	f7f7 fd2f 	bl	8000298 <__aeabi_dsub>
 800883a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800883e:	4656      	mov	r6, sl
 8008840:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008844:	f7f8 f990 	bl	8000b68 <__aeabi_d2iz>
 8008848:	4605      	mov	r5, r0
 800884a:	f7f7 fe73 	bl	8000534 <__aeabi_i2d>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008856:	f7f7 fd1f 	bl	8000298 <__aeabi_dsub>
 800885a:	3530      	adds	r5, #48	@ 0x30
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008864:	f806 5b01 	strb.w	r5, [r6], #1
 8008868:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800886c:	f7f8 f93e 	bl	8000aec <__aeabi_dcmplt>
 8008870:	2800      	cmp	r0, #0
 8008872:	d172      	bne.n	800895a <_dtoa_r+0x622>
 8008874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008878:	4911      	ldr	r1, [pc, #68]	@ (80088c0 <_dtoa_r+0x588>)
 800887a:	2000      	movs	r0, #0
 800887c:	f7f7 fd0c 	bl	8000298 <__aeabi_dsub>
 8008880:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008884:	f7f8 f932 	bl	8000aec <__aeabi_dcmplt>
 8008888:	2800      	cmp	r0, #0
 800888a:	f040 80b4 	bne.w	80089f6 <_dtoa_r+0x6be>
 800888e:	42a6      	cmp	r6, r4
 8008890:	f43f af70 	beq.w	8008774 <_dtoa_r+0x43c>
 8008894:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008898:	4b0a      	ldr	r3, [pc, #40]	@ (80088c4 <_dtoa_r+0x58c>)
 800889a:	2200      	movs	r2, #0
 800889c:	f7f7 feb4 	bl	8000608 <__aeabi_dmul>
 80088a0:	4b08      	ldr	r3, [pc, #32]	@ (80088c4 <_dtoa_r+0x58c>)
 80088a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80088a6:	2200      	movs	r2, #0
 80088a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088ac:	f7f7 feac 	bl	8000608 <__aeabi_dmul>
 80088b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088b4:	e7c4      	b.n	8008840 <_dtoa_r+0x508>
 80088b6:	bf00      	nop
 80088b8:	0800bb10 	.word	0x0800bb10
 80088bc:	0800bae8 	.word	0x0800bae8
 80088c0:	3ff00000 	.word	0x3ff00000
 80088c4:	40240000 	.word	0x40240000
 80088c8:	401c0000 	.word	0x401c0000
 80088cc:	40140000 	.word	0x40140000
 80088d0:	3fe00000 	.word	0x3fe00000
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	f7f7 fe96 	bl	8000608 <__aeabi_dmul>
 80088dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80088e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80088e2:	4656      	mov	r6, sl
 80088e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088e8:	f7f8 f93e 	bl	8000b68 <__aeabi_d2iz>
 80088ec:	4605      	mov	r5, r0
 80088ee:	f7f7 fe21 	bl	8000534 <__aeabi_i2d>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088fa:	f7f7 fccd 	bl	8000298 <__aeabi_dsub>
 80088fe:	3530      	adds	r5, #48	@ 0x30
 8008900:	f806 5b01 	strb.w	r5, [r6], #1
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	42a6      	cmp	r6, r4
 800890a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800890e:	f04f 0200 	mov.w	r2, #0
 8008912:	d124      	bne.n	800895e <_dtoa_r+0x626>
 8008914:	4baf      	ldr	r3, [pc, #700]	@ (8008bd4 <_dtoa_r+0x89c>)
 8008916:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800891a:	f7f7 fcbf 	bl	800029c <__adddf3>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008926:	f7f8 f8ff 	bl	8000b28 <__aeabi_dcmpgt>
 800892a:	2800      	cmp	r0, #0
 800892c:	d163      	bne.n	80089f6 <_dtoa_r+0x6be>
 800892e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008932:	49a8      	ldr	r1, [pc, #672]	@ (8008bd4 <_dtoa_r+0x89c>)
 8008934:	2000      	movs	r0, #0
 8008936:	f7f7 fcaf 	bl	8000298 <__aeabi_dsub>
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008942:	f7f8 f8d3 	bl	8000aec <__aeabi_dcmplt>
 8008946:	2800      	cmp	r0, #0
 8008948:	f43f af14 	beq.w	8008774 <_dtoa_r+0x43c>
 800894c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800894e:	1e73      	subs	r3, r6, #1
 8008950:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008952:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008956:	2b30      	cmp	r3, #48	@ 0x30
 8008958:	d0f8      	beq.n	800894c <_dtoa_r+0x614>
 800895a:	4647      	mov	r7, r8
 800895c:	e03b      	b.n	80089d6 <_dtoa_r+0x69e>
 800895e:	4b9e      	ldr	r3, [pc, #632]	@ (8008bd8 <_dtoa_r+0x8a0>)
 8008960:	f7f7 fe52 	bl	8000608 <__aeabi_dmul>
 8008964:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008968:	e7bc      	b.n	80088e4 <_dtoa_r+0x5ac>
 800896a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800896e:	4656      	mov	r6, sl
 8008970:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008974:	4620      	mov	r0, r4
 8008976:	4629      	mov	r1, r5
 8008978:	f7f7 ff70 	bl	800085c <__aeabi_ddiv>
 800897c:	f7f8 f8f4 	bl	8000b68 <__aeabi_d2iz>
 8008980:	4680      	mov	r8, r0
 8008982:	f7f7 fdd7 	bl	8000534 <__aeabi_i2d>
 8008986:	e9dd 2300 	ldrd	r2, r3, [sp]
 800898a:	f7f7 fe3d 	bl	8000608 <__aeabi_dmul>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4620      	mov	r0, r4
 8008994:	4629      	mov	r1, r5
 8008996:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800899a:	f7f7 fc7d 	bl	8000298 <__aeabi_dsub>
 800899e:	f806 4b01 	strb.w	r4, [r6], #1
 80089a2:	9d03      	ldr	r5, [sp, #12]
 80089a4:	eba6 040a 	sub.w	r4, r6, sl
 80089a8:	42a5      	cmp	r5, r4
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	d133      	bne.n	8008a18 <_dtoa_r+0x6e0>
 80089b0:	f7f7 fc74 	bl	800029c <__adddf3>
 80089b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089b8:	4604      	mov	r4, r0
 80089ba:	460d      	mov	r5, r1
 80089bc:	f7f8 f8b4 	bl	8000b28 <__aeabi_dcmpgt>
 80089c0:	b9c0      	cbnz	r0, 80089f4 <_dtoa_r+0x6bc>
 80089c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089c6:	4620      	mov	r0, r4
 80089c8:	4629      	mov	r1, r5
 80089ca:	f7f8 f885 	bl	8000ad8 <__aeabi_dcmpeq>
 80089ce:	b110      	cbz	r0, 80089d6 <_dtoa_r+0x69e>
 80089d0:	f018 0f01 	tst.w	r8, #1
 80089d4:	d10e      	bne.n	80089f4 <_dtoa_r+0x6bc>
 80089d6:	9902      	ldr	r1, [sp, #8]
 80089d8:	4648      	mov	r0, r9
 80089da:	f000 fbbd 	bl	8009158 <_Bfree>
 80089de:	2300      	movs	r3, #0
 80089e0:	7033      	strb	r3, [r6, #0]
 80089e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80089e4:	3701      	adds	r7, #1
 80089e6:	601f      	str	r7, [r3, #0]
 80089e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 824b 	beq.w	8008e86 <_dtoa_r+0xb4e>
 80089f0:	601e      	str	r6, [r3, #0]
 80089f2:	e248      	b.n	8008e86 <_dtoa_r+0xb4e>
 80089f4:	46b8      	mov	r8, r7
 80089f6:	4633      	mov	r3, r6
 80089f8:	461e      	mov	r6, r3
 80089fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089fe:	2a39      	cmp	r2, #57	@ 0x39
 8008a00:	d106      	bne.n	8008a10 <_dtoa_r+0x6d8>
 8008a02:	459a      	cmp	sl, r3
 8008a04:	d1f8      	bne.n	80089f8 <_dtoa_r+0x6c0>
 8008a06:	2230      	movs	r2, #48	@ 0x30
 8008a08:	f108 0801 	add.w	r8, r8, #1
 8008a0c:	f88a 2000 	strb.w	r2, [sl]
 8008a10:	781a      	ldrb	r2, [r3, #0]
 8008a12:	3201      	adds	r2, #1
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	e7a0      	b.n	800895a <_dtoa_r+0x622>
 8008a18:	4b6f      	ldr	r3, [pc, #444]	@ (8008bd8 <_dtoa_r+0x8a0>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f7f7 fdf4 	bl	8000608 <__aeabi_dmul>
 8008a20:	2200      	movs	r2, #0
 8008a22:	2300      	movs	r3, #0
 8008a24:	4604      	mov	r4, r0
 8008a26:	460d      	mov	r5, r1
 8008a28:	f7f8 f856 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d09f      	beq.n	8008970 <_dtoa_r+0x638>
 8008a30:	e7d1      	b.n	80089d6 <_dtoa_r+0x69e>
 8008a32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a34:	2a00      	cmp	r2, #0
 8008a36:	f000 80ea 	beq.w	8008c0e <_dtoa_r+0x8d6>
 8008a3a:	9a07      	ldr	r2, [sp, #28]
 8008a3c:	2a01      	cmp	r2, #1
 8008a3e:	f300 80cd 	bgt.w	8008bdc <_dtoa_r+0x8a4>
 8008a42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008a44:	2a00      	cmp	r2, #0
 8008a46:	f000 80c1 	beq.w	8008bcc <_dtoa_r+0x894>
 8008a4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a4e:	9c08      	ldr	r4, [sp, #32]
 8008a50:	9e00      	ldr	r6, [sp, #0]
 8008a52:	9a00      	ldr	r2, [sp, #0]
 8008a54:	441a      	add	r2, r3
 8008a56:	9200      	str	r2, [sp, #0]
 8008a58:	9a06      	ldr	r2, [sp, #24]
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	441a      	add	r2, r3
 8008a5e:	4648      	mov	r0, r9
 8008a60:	9206      	str	r2, [sp, #24]
 8008a62:	f000 fc77 	bl	8009354 <__i2b>
 8008a66:	4605      	mov	r5, r0
 8008a68:	b166      	cbz	r6, 8008a84 <_dtoa_r+0x74c>
 8008a6a:	9b06      	ldr	r3, [sp, #24]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dd09      	ble.n	8008a84 <_dtoa_r+0x74c>
 8008a70:	42b3      	cmp	r3, r6
 8008a72:	9a00      	ldr	r2, [sp, #0]
 8008a74:	bfa8      	it	ge
 8008a76:	4633      	movge	r3, r6
 8008a78:	1ad2      	subs	r2, r2, r3
 8008a7a:	9200      	str	r2, [sp, #0]
 8008a7c:	9a06      	ldr	r2, [sp, #24]
 8008a7e:	1af6      	subs	r6, r6, r3
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	9306      	str	r3, [sp, #24]
 8008a84:	9b08      	ldr	r3, [sp, #32]
 8008a86:	b30b      	cbz	r3, 8008acc <_dtoa_r+0x794>
 8008a88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 80c6 	beq.w	8008c1c <_dtoa_r+0x8e4>
 8008a90:	2c00      	cmp	r4, #0
 8008a92:	f000 80c0 	beq.w	8008c16 <_dtoa_r+0x8de>
 8008a96:	4629      	mov	r1, r5
 8008a98:	4622      	mov	r2, r4
 8008a9a:	4648      	mov	r0, r9
 8008a9c:	f000 fd12 	bl	80094c4 <__pow5mult>
 8008aa0:	9a02      	ldr	r2, [sp, #8]
 8008aa2:	4601      	mov	r1, r0
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	4648      	mov	r0, r9
 8008aa8:	f000 fc6a 	bl	8009380 <__multiply>
 8008aac:	9902      	ldr	r1, [sp, #8]
 8008aae:	4680      	mov	r8, r0
 8008ab0:	4648      	mov	r0, r9
 8008ab2:	f000 fb51 	bl	8009158 <_Bfree>
 8008ab6:	9b08      	ldr	r3, [sp, #32]
 8008ab8:	1b1b      	subs	r3, r3, r4
 8008aba:	9308      	str	r3, [sp, #32]
 8008abc:	f000 80b1 	beq.w	8008c22 <_dtoa_r+0x8ea>
 8008ac0:	9a08      	ldr	r2, [sp, #32]
 8008ac2:	4641      	mov	r1, r8
 8008ac4:	4648      	mov	r0, r9
 8008ac6:	f000 fcfd 	bl	80094c4 <__pow5mult>
 8008aca:	9002      	str	r0, [sp, #8]
 8008acc:	2101      	movs	r1, #1
 8008ace:	4648      	mov	r0, r9
 8008ad0:	f000 fc40 	bl	8009354 <__i2b>
 8008ad4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 81d8 	beq.w	8008e8e <_dtoa_r+0xb56>
 8008ade:	461a      	mov	r2, r3
 8008ae0:	4601      	mov	r1, r0
 8008ae2:	4648      	mov	r0, r9
 8008ae4:	f000 fcee 	bl	80094c4 <__pow5mult>
 8008ae8:	9b07      	ldr	r3, [sp, #28]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	4604      	mov	r4, r0
 8008aee:	f300 809f 	bgt.w	8008c30 <_dtoa_r+0x8f8>
 8008af2:	9b04      	ldr	r3, [sp, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f040 8097 	bne.w	8008c28 <_dtoa_r+0x8f0>
 8008afa:	9b05      	ldr	r3, [sp, #20]
 8008afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f040 8093 	bne.w	8008c2c <_dtoa_r+0x8f4>
 8008b06:	9b05      	ldr	r3, [sp, #20]
 8008b08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b0c:	0d1b      	lsrs	r3, r3, #20
 8008b0e:	051b      	lsls	r3, r3, #20
 8008b10:	b133      	cbz	r3, 8008b20 <_dtoa_r+0x7e8>
 8008b12:	9b00      	ldr	r3, [sp, #0]
 8008b14:	3301      	adds	r3, #1
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	9b06      	ldr	r3, [sp, #24]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	9306      	str	r3, [sp, #24]
 8008b1e:	2301      	movs	r3, #1
 8008b20:	9308      	str	r3, [sp, #32]
 8008b22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 81b8 	beq.w	8008e9a <_dtoa_r+0xb62>
 8008b2a:	6923      	ldr	r3, [r4, #16]
 8008b2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b30:	6918      	ldr	r0, [r3, #16]
 8008b32:	f000 fbc3 	bl	80092bc <__hi0bits>
 8008b36:	f1c0 0020 	rsb	r0, r0, #32
 8008b3a:	9b06      	ldr	r3, [sp, #24]
 8008b3c:	4418      	add	r0, r3
 8008b3e:	f010 001f 	ands.w	r0, r0, #31
 8008b42:	f000 8082 	beq.w	8008c4a <_dtoa_r+0x912>
 8008b46:	f1c0 0320 	rsb	r3, r0, #32
 8008b4a:	2b04      	cmp	r3, #4
 8008b4c:	dd73      	ble.n	8008c36 <_dtoa_r+0x8fe>
 8008b4e:	9b00      	ldr	r3, [sp, #0]
 8008b50:	f1c0 001c 	rsb	r0, r0, #28
 8008b54:	4403      	add	r3, r0
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	9b06      	ldr	r3, [sp, #24]
 8008b5a:	4403      	add	r3, r0
 8008b5c:	4406      	add	r6, r0
 8008b5e:	9306      	str	r3, [sp, #24]
 8008b60:	9b00      	ldr	r3, [sp, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	dd05      	ble.n	8008b72 <_dtoa_r+0x83a>
 8008b66:	9902      	ldr	r1, [sp, #8]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	4648      	mov	r0, r9
 8008b6c:	f000 fd04 	bl	8009578 <__lshift>
 8008b70:	9002      	str	r0, [sp, #8]
 8008b72:	9b06      	ldr	r3, [sp, #24]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	dd05      	ble.n	8008b84 <_dtoa_r+0x84c>
 8008b78:	4621      	mov	r1, r4
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	4648      	mov	r0, r9
 8008b7e:	f000 fcfb 	bl	8009578 <__lshift>
 8008b82:	4604      	mov	r4, r0
 8008b84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d061      	beq.n	8008c4e <_dtoa_r+0x916>
 8008b8a:	9802      	ldr	r0, [sp, #8]
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	f000 fd5f 	bl	8009650 <__mcmp>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	da5b      	bge.n	8008c4e <_dtoa_r+0x916>
 8008b96:	2300      	movs	r3, #0
 8008b98:	9902      	ldr	r1, [sp, #8]
 8008b9a:	220a      	movs	r2, #10
 8008b9c:	4648      	mov	r0, r9
 8008b9e:	f000 fafd 	bl	800919c <__multadd>
 8008ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ba4:	9002      	str	r0, [sp, #8]
 8008ba6:	f107 38ff 	add.w	r8, r7, #4294967295
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 8177 	beq.w	8008e9e <_dtoa_r+0xb66>
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	220a      	movs	r2, #10
 8008bb6:	4648      	mov	r0, r9
 8008bb8:	f000 faf0 	bl	800919c <__multadd>
 8008bbc:	f1bb 0f00 	cmp.w	fp, #0
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	dc6f      	bgt.n	8008ca4 <_dtoa_r+0x96c>
 8008bc4:	9b07      	ldr	r3, [sp, #28]
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	dc49      	bgt.n	8008c5e <_dtoa_r+0x926>
 8008bca:	e06b      	b.n	8008ca4 <_dtoa_r+0x96c>
 8008bcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008bce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008bd2:	e73c      	b.n	8008a4e <_dtoa_r+0x716>
 8008bd4:	3fe00000 	.word	0x3fe00000
 8008bd8:	40240000 	.word	0x40240000
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	1e5c      	subs	r4, r3, #1
 8008be0:	9b08      	ldr	r3, [sp, #32]
 8008be2:	42a3      	cmp	r3, r4
 8008be4:	db09      	blt.n	8008bfa <_dtoa_r+0x8c2>
 8008be6:	1b1c      	subs	r4, r3, r4
 8008be8:	9b03      	ldr	r3, [sp, #12]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f6bf af30 	bge.w	8008a50 <_dtoa_r+0x718>
 8008bf0:	9b00      	ldr	r3, [sp, #0]
 8008bf2:	9a03      	ldr	r2, [sp, #12]
 8008bf4:	1a9e      	subs	r6, r3, r2
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	e72b      	b.n	8008a52 <_dtoa_r+0x71a>
 8008bfa:	9b08      	ldr	r3, [sp, #32]
 8008bfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008bfe:	9408      	str	r4, [sp, #32]
 8008c00:	1ae3      	subs	r3, r4, r3
 8008c02:	441a      	add	r2, r3
 8008c04:	9e00      	ldr	r6, [sp, #0]
 8008c06:	9b03      	ldr	r3, [sp, #12]
 8008c08:	920d      	str	r2, [sp, #52]	@ 0x34
 8008c0a:	2400      	movs	r4, #0
 8008c0c:	e721      	b.n	8008a52 <_dtoa_r+0x71a>
 8008c0e:	9c08      	ldr	r4, [sp, #32]
 8008c10:	9e00      	ldr	r6, [sp, #0]
 8008c12:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008c14:	e728      	b.n	8008a68 <_dtoa_r+0x730>
 8008c16:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008c1a:	e751      	b.n	8008ac0 <_dtoa_r+0x788>
 8008c1c:	9a08      	ldr	r2, [sp, #32]
 8008c1e:	9902      	ldr	r1, [sp, #8]
 8008c20:	e750      	b.n	8008ac4 <_dtoa_r+0x78c>
 8008c22:	f8cd 8008 	str.w	r8, [sp, #8]
 8008c26:	e751      	b.n	8008acc <_dtoa_r+0x794>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	e779      	b.n	8008b20 <_dtoa_r+0x7e8>
 8008c2c:	9b04      	ldr	r3, [sp, #16]
 8008c2e:	e777      	b.n	8008b20 <_dtoa_r+0x7e8>
 8008c30:	2300      	movs	r3, #0
 8008c32:	9308      	str	r3, [sp, #32]
 8008c34:	e779      	b.n	8008b2a <_dtoa_r+0x7f2>
 8008c36:	d093      	beq.n	8008b60 <_dtoa_r+0x828>
 8008c38:	9a00      	ldr	r2, [sp, #0]
 8008c3a:	331c      	adds	r3, #28
 8008c3c:	441a      	add	r2, r3
 8008c3e:	9200      	str	r2, [sp, #0]
 8008c40:	9a06      	ldr	r2, [sp, #24]
 8008c42:	441a      	add	r2, r3
 8008c44:	441e      	add	r6, r3
 8008c46:	9206      	str	r2, [sp, #24]
 8008c48:	e78a      	b.n	8008b60 <_dtoa_r+0x828>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	e7f4      	b.n	8008c38 <_dtoa_r+0x900>
 8008c4e:	9b03      	ldr	r3, [sp, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	46b8      	mov	r8, r7
 8008c54:	dc20      	bgt.n	8008c98 <_dtoa_r+0x960>
 8008c56:	469b      	mov	fp, r3
 8008c58:	9b07      	ldr	r3, [sp, #28]
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	dd1e      	ble.n	8008c9c <_dtoa_r+0x964>
 8008c5e:	f1bb 0f00 	cmp.w	fp, #0
 8008c62:	f47f adb1 	bne.w	80087c8 <_dtoa_r+0x490>
 8008c66:	4621      	mov	r1, r4
 8008c68:	465b      	mov	r3, fp
 8008c6a:	2205      	movs	r2, #5
 8008c6c:	4648      	mov	r0, r9
 8008c6e:	f000 fa95 	bl	800919c <__multadd>
 8008c72:	4601      	mov	r1, r0
 8008c74:	4604      	mov	r4, r0
 8008c76:	9802      	ldr	r0, [sp, #8]
 8008c78:	f000 fcea 	bl	8009650 <__mcmp>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	f77f ada3 	ble.w	80087c8 <_dtoa_r+0x490>
 8008c82:	4656      	mov	r6, sl
 8008c84:	2331      	movs	r3, #49	@ 0x31
 8008c86:	f806 3b01 	strb.w	r3, [r6], #1
 8008c8a:	f108 0801 	add.w	r8, r8, #1
 8008c8e:	e59f      	b.n	80087d0 <_dtoa_r+0x498>
 8008c90:	9c03      	ldr	r4, [sp, #12]
 8008c92:	46b8      	mov	r8, r7
 8008c94:	4625      	mov	r5, r4
 8008c96:	e7f4      	b.n	8008c82 <_dtoa_r+0x94a>
 8008c98:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 8101 	beq.w	8008ea6 <_dtoa_r+0xb6e>
 8008ca4:	2e00      	cmp	r6, #0
 8008ca6:	dd05      	ble.n	8008cb4 <_dtoa_r+0x97c>
 8008ca8:	4629      	mov	r1, r5
 8008caa:	4632      	mov	r2, r6
 8008cac:	4648      	mov	r0, r9
 8008cae:	f000 fc63 	bl	8009578 <__lshift>
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	9b08      	ldr	r3, [sp, #32]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d05c      	beq.n	8008d74 <_dtoa_r+0xa3c>
 8008cba:	6869      	ldr	r1, [r5, #4]
 8008cbc:	4648      	mov	r0, r9
 8008cbe:	f000 fa0b 	bl	80090d8 <_Balloc>
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	b928      	cbnz	r0, 8008cd2 <_dtoa_r+0x99a>
 8008cc6:	4b82      	ldr	r3, [pc, #520]	@ (8008ed0 <_dtoa_r+0xb98>)
 8008cc8:	4602      	mov	r2, r0
 8008cca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008cce:	f7ff bb4a 	b.w	8008366 <_dtoa_r+0x2e>
 8008cd2:	692a      	ldr	r2, [r5, #16]
 8008cd4:	3202      	adds	r2, #2
 8008cd6:	0092      	lsls	r2, r2, #2
 8008cd8:	f105 010c 	add.w	r1, r5, #12
 8008cdc:	300c      	adds	r0, #12
 8008cde:	f002 f92f 	bl	800af40 <memcpy>
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	4631      	mov	r1, r6
 8008ce6:	4648      	mov	r0, r9
 8008ce8:	f000 fc46 	bl	8009578 <__lshift>
 8008cec:	f10a 0301 	add.w	r3, sl, #1
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	eb0a 030b 	add.w	r3, sl, fp
 8008cf6:	9308      	str	r3, [sp, #32]
 8008cf8:	9b04      	ldr	r3, [sp, #16]
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	462f      	mov	r7, r5
 8008d00:	9306      	str	r3, [sp, #24]
 8008d02:	4605      	mov	r5, r0
 8008d04:	9b00      	ldr	r3, [sp, #0]
 8008d06:	9802      	ldr	r0, [sp, #8]
 8008d08:	4621      	mov	r1, r4
 8008d0a:	f103 3bff 	add.w	fp, r3, #4294967295
 8008d0e:	f7ff fa8b 	bl	8008228 <quorem>
 8008d12:	4603      	mov	r3, r0
 8008d14:	3330      	adds	r3, #48	@ 0x30
 8008d16:	9003      	str	r0, [sp, #12]
 8008d18:	4639      	mov	r1, r7
 8008d1a:	9802      	ldr	r0, [sp, #8]
 8008d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d1e:	f000 fc97 	bl	8009650 <__mcmp>
 8008d22:	462a      	mov	r2, r5
 8008d24:	9004      	str	r0, [sp, #16]
 8008d26:	4621      	mov	r1, r4
 8008d28:	4648      	mov	r0, r9
 8008d2a:	f000 fcad 	bl	8009688 <__mdiff>
 8008d2e:	68c2      	ldr	r2, [r0, #12]
 8008d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d32:	4606      	mov	r6, r0
 8008d34:	bb02      	cbnz	r2, 8008d78 <_dtoa_r+0xa40>
 8008d36:	4601      	mov	r1, r0
 8008d38:	9802      	ldr	r0, [sp, #8]
 8008d3a:	f000 fc89 	bl	8009650 <__mcmp>
 8008d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d40:	4602      	mov	r2, r0
 8008d42:	4631      	mov	r1, r6
 8008d44:	4648      	mov	r0, r9
 8008d46:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d4a:	f000 fa05 	bl	8009158 <_Bfree>
 8008d4e:	9b07      	ldr	r3, [sp, #28]
 8008d50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008d52:	9e00      	ldr	r6, [sp, #0]
 8008d54:	ea42 0103 	orr.w	r1, r2, r3
 8008d58:	9b06      	ldr	r3, [sp, #24]
 8008d5a:	4319      	orrs	r1, r3
 8008d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d5e:	d10d      	bne.n	8008d7c <_dtoa_r+0xa44>
 8008d60:	2b39      	cmp	r3, #57	@ 0x39
 8008d62:	d027      	beq.n	8008db4 <_dtoa_r+0xa7c>
 8008d64:	9a04      	ldr	r2, [sp, #16]
 8008d66:	2a00      	cmp	r2, #0
 8008d68:	dd01      	ble.n	8008d6e <_dtoa_r+0xa36>
 8008d6a:	9b03      	ldr	r3, [sp, #12]
 8008d6c:	3331      	adds	r3, #49	@ 0x31
 8008d6e:	f88b 3000 	strb.w	r3, [fp]
 8008d72:	e52e      	b.n	80087d2 <_dtoa_r+0x49a>
 8008d74:	4628      	mov	r0, r5
 8008d76:	e7b9      	b.n	8008cec <_dtoa_r+0x9b4>
 8008d78:	2201      	movs	r2, #1
 8008d7a:	e7e2      	b.n	8008d42 <_dtoa_r+0xa0a>
 8008d7c:	9904      	ldr	r1, [sp, #16]
 8008d7e:	2900      	cmp	r1, #0
 8008d80:	db04      	blt.n	8008d8c <_dtoa_r+0xa54>
 8008d82:	9807      	ldr	r0, [sp, #28]
 8008d84:	4301      	orrs	r1, r0
 8008d86:	9806      	ldr	r0, [sp, #24]
 8008d88:	4301      	orrs	r1, r0
 8008d8a:	d120      	bne.n	8008dce <_dtoa_r+0xa96>
 8008d8c:	2a00      	cmp	r2, #0
 8008d8e:	ddee      	ble.n	8008d6e <_dtoa_r+0xa36>
 8008d90:	9902      	ldr	r1, [sp, #8]
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	2201      	movs	r2, #1
 8008d96:	4648      	mov	r0, r9
 8008d98:	f000 fbee 	bl	8009578 <__lshift>
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	9002      	str	r0, [sp, #8]
 8008da0:	f000 fc56 	bl	8009650 <__mcmp>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	9b00      	ldr	r3, [sp, #0]
 8008da8:	dc02      	bgt.n	8008db0 <_dtoa_r+0xa78>
 8008daa:	d1e0      	bne.n	8008d6e <_dtoa_r+0xa36>
 8008dac:	07da      	lsls	r2, r3, #31
 8008dae:	d5de      	bpl.n	8008d6e <_dtoa_r+0xa36>
 8008db0:	2b39      	cmp	r3, #57	@ 0x39
 8008db2:	d1da      	bne.n	8008d6a <_dtoa_r+0xa32>
 8008db4:	2339      	movs	r3, #57	@ 0x39
 8008db6:	f88b 3000 	strb.w	r3, [fp]
 8008dba:	4633      	mov	r3, r6
 8008dbc:	461e      	mov	r6, r3
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008dc4:	2a39      	cmp	r2, #57	@ 0x39
 8008dc6:	d04e      	beq.n	8008e66 <_dtoa_r+0xb2e>
 8008dc8:	3201      	adds	r2, #1
 8008dca:	701a      	strb	r2, [r3, #0]
 8008dcc:	e501      	b.n	80087d2 <_dtoa_r+0x49a>
 8008dce:	2a00      	cmp	r2, #0
 8008dd0:	dd03      	ble.n	8008dda <_dtoa_r+0xaa2>
 8008dd2:	2b39      	cmp	r3, #57	@ 0x39
 8008dd4:	d0ee      	beq.n	8008db4 <_dtoa_r+0xa7c>
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	e7c9      	b.n	8008d6e <_dtoa_r+0xa36>
 8008dda:	9a00      	ldr	r2, [sp, #0]
 8008ddc:	9908      	ldr	r1, [sp, #32]
 8008dde:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008de2:	428a      	cmp	r2, r1
 8008de4:	d028      	beq.n	8008e38 <_dtoa_r+0xb00>
 8008de6:	9902      	ldr	r1, [sp, #8]
 8008de8:	2300      	movs	r3, #0
 8008dea:	220a      	movs	r2, #10
 8008dec:	4648      	mov	r0, r9
 8008dee:	f000 f9d5 	bl	800919c <__multadd>
 8008df2:	42af      	cmp	r7, r5
 8008df4:	9002      	str	r0, [sp, #8]
 8008df6:	f04f 0300 	mov.w	r3, #0
 8008dfa:	f04f 020a 	mov.w	r2, #10
 8008dfe:	4639      	mov	r1, r7
 8008e00:	4648      	mov	r0, r9
 8008e02:	d107      	bne.n	8008e14 <_dtoa_r+0xadc>
 8008e04:	f000 f9ca 	bl	800919c <__multadd>
 8008e08:	4607      	mov	r7, r0
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	9b00      	ldr	r3, [sp, #0]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	e777      	b.n	8008d04 <_dtoa_r+0x9cc>
 8008e14:	f000 f9c2 	bl	800919c <__multadd>
 8008e18:	4629      	mov	r1, r5
 8008e1a:	4607      	mov	r7, r0
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	220a      	movs	r2, #10
 8008e20:	4648      	mov	r0, r9
 8008e22:	f000 f9bb 	bl	800919c <__multadd>
 8008e26:	4605      	mov	r5, r0
 8008e28:	e7f0      	b.n	8008e0c <_dtoa_r+0xad4>
 8008e2a:	f1bb 0f00 	cmp.w	fp, #0
 8008e2e:	bfcc      	ite	gt
 8008e30:	465e      	movgt	r6, fp
 8008e32:	2601      	movle	r6, #1
 8008e34:	4456      	add	r6, sl
 8008e36:	2700      	movs	r7, #0
 8008e38:	9902      	ldr	r1, [sp, #8]
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	4648      	mov	r0, r9
 8008e40:	f000 fb9a 	bl	8009578 <__lshift>
 8008e44:	4621      	mov	r1, r4
 8008e46:	9002      	str	r0, [sp, #8]
 8008e48:	f000 fc02 	bl	8009650 <__mcmp>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	dcb4      	bgt.n	8008dba <_dtoa_r+0xa82>
 8008e50:	d102      	bne.n	8008e58 <_dtoa_r+0xb20>
 8008e52:	9b00      	ldr	r3, [sp, #0]
 8008e54:	07db      	lsls	r3, r3, #31
 8008e56:	d4b0      	bmi.n	8008dba <_dtoa_r+0xa82>
 8008e58:	4633      	mov	r3, r6
 8008e5a:	461e      	mov	r6, r3
 8008e5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e60:	2a30      	cmp	r2, #48	@ 0x30
 8008e62:	d0fa      	beq.n	8008e5a <_dtoa_r+0xb22>
 8008e64:	e4b5      	b.n	80087d2 <_dtoa_r+0x49a>
 8008e66:	459a      	cmp	sl, r3
 8008e68:	d1a8      	bne.n	8008dbc <_dtoa_r+0xa84>
 8008e6a:	2331      	movs	r3, #49	@ 0x31
 8008e6c:	f108 0801 	add.w	r8, r8, #1
 8008e70:	f88a 3000 	strb.w	r3, [sl]
 8008e74:	e4ad      	b.n	80087d2 <_dtoa_r+0x49a>
 8008e76:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e78:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008ed4 <_dtoa_r+0xb9c>
 8008e7c:	b11b      	cbz	r3, 8008e86 <_dtoa_r+0xb4e>
 8008e7e:	f10a 0308 	add.w	r3, sl, #8
 8008e82:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008e84:	6013      	str	r3, [r2, #0]
 8008e86:	4650      	mov	r0, sl
 8008e88:	b017      	add	sp, #92	@ 0x5c
 8008e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8e:	9b07      	ldr	r3, [sp, #28]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	f77f ae2e 	ble.w	8008af2 <_dtoa_r+0x7ba>
 8008e96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e98:	9308      	str	r3, [sp, #32]
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	e64d      	b.n	8008b3a <_dtoa_r+0x802>
 8008e9e:	f1bb 0f00 	cmp.w	fp, #0
 8008ea2:	f77f aed9 	ble.w	8008c58 <_dtoa_r+0x920>
 8008ea6:	4656      	mov	r6, sl
 8008ea8:	9802      	ldr	r0, [sp, #8]
 8008eaa:	4621      	mov	r1, r4
 8008eac:	f7ff f9bc 	bl	8008228 <quorem>
 8008eb0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008eb4:	f806 3b01 	strb.w	r3, [r6], #1
 8008eb8:	eba6 020a 	sub.w	r2, r6, sl
 8008ebc:	4593      	cmp	fp, r2
 8008ebe:	ddb4      	ble.n	8008e2a <_dtoa_r+0xaf2>
 8008ec0:	9902      	ldr	r1, [sp, #8]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	220a      	movs	r2, #10
 8008ec6:	4648      	mov	r0, r9
 8008ec8:	f000 f968 	bl	800919c <__multadd>
 8008ecc:	9002      	str	r0, [sp, #8]
 8008ece:	e7eb      	b.n	8008ea8 <_dtoa_r+0xb70>
 8008ed0:	0800b9b5 	.word	0x0800b9b5
 8008ed4:	0800b939 	.word	0x0800b939

08008ed8 <_free_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4605      	mov	r5, r0
 8008edc:	2900      	cmp	r1, #0
 8008ede:	d041      	beq.n	8008f64 <_free_r+0x8c>
 8008ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ee4:	1f0c      	subs	r4, r1, #4
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	bfb8      	it	lt
 8008eea:	18e4      	addlt	r4, r4, r3
 8008eec:	f000 f8e8 	bl	80090c0 <__malloc_lock>
 8008ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f68 <_free_r+0x90>)
 8008ef2:	6813      	ldr	r3, [r2, #0]
 8008ef4:	b933      	cbnz	r3, 8008f04 <_free_r+0x2c>
 8008ef6:	6063      	str	r3, [r4, #4]
 8008ef8:	6014      	str	r4, [r2, #0]
 8008efa:	4628      	mov	r0, r5
 8008efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f00:	f000 b8e4 	b.w	80090cc <__malloc_unlock>
 8008f04:	42a3      	cmp	r3, r4
 8008f06:	d908      	bls.n	8008f1a <_free_r+0x42>
 8008f08:	6820      	ldr	r0, [r4, #0]
 8008f0a:	1821      	adds	r1, r4, r0
 8008f0c:	428b      	cmp	r3, r1
 8008f0e:	bf01      	itttt	eq
 8008f10:	6819      	ldreq	r1, [r3, #0]
 8008f12:	685b      	ldreq	r3, [r3, #4]
 8008f14:	1809      	addeq	r1, r1, r0
 8008f16:	6021      	streq	r1, [r4, #0]
 8008f18:	e7ed      	b.n	8008ef6 <_free_r+0x1e>
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	b10b      	cbz	r3, 8008f24 <_free_r+0x4c>
 8008f20:	42a3      	cmp	r3, r4
 8008f22:	d9fa      	bls.n	8008f1a <_free_r+0x42>
 8008f24:	6811      	ldr	r1, [r2, #0]
 8008f26:	1850      	adds	r0, r2, r1
 8008f28:	42a0      	cmp	r0, r4
 8008f2a:	d10b      	bne.n	8008f44 <_free_r+0x6c>
 8008f2c:	6820      	ldr	r0, [r4, #0]
 8008f2e:	4401      	add	r1, r0
 8008f30:	1850      	adds	r0, r2, r1
 8008f32:	4283      	cmp	r3, r0
 8008f34:	6011      	str	r1, [r2, #0]
 8008f36:	d1e0      	bne.n	8008efa <_free_r+0x22>
 8008f38:	6818      	ldr	r0, [r3, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	6053      	str	r3, [r2, #4]
 8008f3e:	4408      	add	r0, r1
 8008f40:	6010      	str	r0, [r2, #0]
 8008f42:	e7da      	b.n	8008efa <_free_r+0x22>
 8008f44:	d902      	bls.n	8008f4c <_free_r+0x74>
 8008f46:	230c      	movs	r3, #12
 8008f48:	602b      	str	r3, [r5, #0]
 8008f4a:	e7d6      	b.n	8008efa <_free_r+0x22>
 8008f4c:	6820      	ldr	r0, [r4, #0]
 8008f4e:	1821      	adds	r1, r4, r0
 8008f50:	428b      	cmp	r3, r1
 8008f52:	bf04      	itt	eq
 8008f54:	6819      	ldreq	r1, [r3, #0]
 8008f56:	685b      	ldreq	r3, [r3, #4]
 8008f58:	6063      	str	r3, [r4, #4]
 8008f5a:	bf04      	itt	eq
 8008f5c:	1809      	addeq	r1, r1, r0
 8008f5e:	6021      	streq	r1, [r4, #0]
 8008f60:	6054      	str	r4, [r2, #4]
 8008f62:	e7ca      	b.n	8008efa <_free_r+0x22>
 8008f64:	bd38      	pop	{r3, r4, r5, pc}
 8008f66:	bf00      	nop
 8008f68:	20000554 	.word	0x20000554

08008f6c <malloc>:
 8008f6c:	4b02      	ldr	r3, [pc, #8]	@ (8008f78 <malloc+0xc>)
 8008f6e:	4601      	mov	r1, r0
 8008f70:	6818      	ldr	r0, [r3, #0]
 8008f72:	f000 b825 	b.w	8008fc0 <_malloc_r>
 8008f76:	bf00      	nop
 8008f78:	20000018 	.word	0x20000018

08008f7c <sbrk_aligned>:
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	4e0f      	ldr	r6, [pc, #60]	@ (8008fbc <sbrk_aligned+0x40>)
 8008f80:	460c      	mov	r4, r1
 8008f82:	6831      	ldr	r1, [r6, #0]
 8008f84:	4605      	mov	r5, r0
 8008f86:	b911      	cbnz	r1, 8008f8e <sbrk_aligned+0x12>
 8008f88:	f001 ffca 	bl	800af20 <_sbrk_r>
 8008f8c:	6030      	str	r0, [r6, #0]
 8008f8e:	4621      	mov	r1, r4
 8008f90:	4628      	mov	r0, r5
 8008f92:	f001 ffc5 	bl	800af20 <_sbrk_r>
 8008f96:	1c43      	adds	r3, r0, #1
 8008f98:	d103      	bne.n	8008fa2 <sbrk_aligned+0x26>
 8008f9a:	f04f 34ff 	mov.w	r4, #4294967295
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	bd70      	pop	{r4, r5, r6, pc}
 8008fa2:	1cc4      	adds	r4, r0, #3
 8008fa4:	f024 0403 	bic.w	r4, r4, #3
 8008fa8:	42a0      	cmp	r0, r4
 8008faa:	d0f8      	beq.n	8008f9e <sbrk_aligned+0x22>
 8008fac:	1a21      	subs	r1, r4, r0
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f001 ffb6 	bl	800af20 <_sbrk_r>
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	d1f2      	bne.n	8008f9e <sbrk_aligned+0x22>
 8008fb8:	e7ef      	b.n	8008f9a <sbrk_aligned+0x1e>
 8008fba:	bf00      	nop
 8008fbc:	20000550 	.word	0x20000550

08008fc0 <_malloc_r>:
 8008fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc4:	1ccd      	adds	r5, r1, #3
 8008fc6:	f025 0503 	bic.w	r5, r5, #3
 8008fca:	3508      	adds	r5, #8
 8008fcc:	2d0c      	cmp	r5, #12
 8008fce:	bf38      	it	cc
 8008fd0:	250c      	movcc	r5, #12
 8008fd2:	2d00      	cmp	r5, #0
 8008fd4:	4606      	mov	r6, r0
 8008fd6:	db01      	blt.n	8008fdc <_malloc_r+0x1c>
 8008fd8:	42a9      	cmp	r1, r5
 8008fda:	d904      	bls.n	8008fe6 <_malloc_r+0x26>
 8008fdc:	230c      	movs	r3, #12
 8008fde:	6033      	str	r3, [r6, #0]
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fe6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090bc <_malloc_r+0xfc>
 8008fea:	f000 f869 	bl	80090c0 <__malloc_lock>
 8008fee:	f8d8 3000 	ldr.w	r3, [r8]
 8008ff2:	461c      	mov	r4, r3
 8008ff4:	bb44      	cbnz	r4, 8009048 <_malloc_r+0x88>
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7ff ffbf 	bl	8008f7c <sbrk_aligned>
 8008ffe:	1c43      	adds	r3, r0, #1
 8009000:	4604      	mov	r4, r0
 8009002:	d158      	bne.n	80090b6 <_malloc_r+0xf6>
 8009004:	f8d8 4000 	ldr.w	r4, [r8]
 8009008:	4627      	mov	r7, r4
 800900a:	2f00      	cmp	r7, #0
 800900c:	d143      	bne.n	8009096 <_malloc_r+0xd6>
 800900e:	2c00      	cmp	r4, #0
 8009010:	d04b      	beq.n	80090aa <_malloc_r+0xea>
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	4639      	mov	r1, r7
 8009016:	4630      	mov	r0, r6
 8009018:	eb04 0903 	add.w	r9, r4, r3
 800901c:	f001 ff80 	bl	800af20 <_sbrk_r>
 8009020:	4581      	cmp	r9, r0
 8009022:	d142      	bne.n	80090aa <_malloc_r+0xea>
 8009024:	6821      	ldr	r1, [r4, #0]
 8009026:	1a6d      	subs	r5, r5, r1
 8009028:	4629      	mov	r1, r5
 800902a:	4630      	mov	r0, r6
 800902c:	f7ff ffa6 	bl	8008f7c <sbrk_aligned>
 8009030:	3001      	adds	r0, #1
 8009032:	d03a      	beq.n	80090aa <_malloc_r+0xea>
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	442b      	add	r3, r5
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	f8d8 3000 	ldr.w	r3, [r8]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	bb62      	cbnz	r2, 800909c <_malloc_r+0xdc>
 8009042:	f8c8 7000 	str.w	r7, [r8]
 8009046:	e00f      	b.n	8009068 <_malloc_r+0xa8>
 8009048:	6822      	ldr	r2, [r4, #0]
 800904a:	1b52      	subs	r2, r2, r5
 800904c:	d420      	bmi.n	8009090 <_malloc_r+0xd0>
 800904e:	2a0b      	cmp	r2, #11
 8009050:	d917      	bls.n	8009082 <_malloc_r+0xc2>
 8009052:	1961      	adds	r1, r4, r5
 8009054:	42a3      	cmp	r3, r4
 8009056:	6025      	str	r5, [r4, #0]
 8009058:	bf18      	it	ne
 800905a:	6059      	strne	r1, [r3, #4]
 800905c:	6863      	ldr	r3, [r4, #4]
 800905e:	bf08      	it	eq
 8009060:	f8c8 1000 	streq.w	r1, [r8]
 8009064:	5162      	str	r2, [r4, r5]
 8009066:	604b      	str	r3, [r1, #4]
 8009068:	4630      	mov	r0, r6
 800906a:	f000 f82f 	bl	80090cc <__malloc_unlock>
 800906e:	f104 000b 	add.w	r0, r4, #11
 8009072:	1d23      	adds	r3, r4, #4
 8009074:	f020 0007 	bic.w	r0, r0, #7
 8009078:	1ac2      	subs	r2, r0, r3
 800907a:	bf1c      	itt	ne
 800907c:	1a1b      	subne	r3, r3, r0
 800907e:	50a3      	strne	r3, [r4, r2]
 8009080:	e7af      	b.n	8008fe2 <_malloc_r+0x22>
 8009082:	6862      	ldr	r2, [r4, #4]
 8009084:	42a3      	cmp	r3, r4
 8009086:	bf0c      	ite	eq
 8009088:	f8c8 2000 	streq.w	r2, [r8]
 800908c:	605a      	strne	r2, [r3, #4]
 800908e:	e7eb      	b.n	8009068 <_malloc_r+0xa8>
 8009090:	4623      	mov	r3, r4
 8009092:	6864      	ldr	r4, [r4, #4]
 8009094:	e7ae      	b.n	8008ff4 <_malloc_r+0x34>
 8009096:	463c      	mov	r4, r7
 8009098:	687f      	ldr	r7, [r7, #4]
 800909a:	e7b6      	b.n	800900a <_malloc_r+0x4a>
 800909c:	461a      	mov	r2, r3
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	42a3      	cmp	r3, r4
 80090a2:	d1fb      	bne.n	800909c <_malloc_r+0xdc>
 80090a4:	2300      	movs	r3, #0
 80090a6:	6053      	str	r3, [r2, #4]
 80090a8:	e7de      	b.n	8009068 <_malloc_r+0xa8>
 80090aa:	230c      	movs	r3, #12
 80090ac:	6033      	str	r3, [r6, #0]
 80090ae:	4630      	mov	r0, r6
 80090b0:	f000 f80c 	bl	80090cc <__malloc_unlock>
 80090b4:	e794      	b.n	8008fe0 <_malloc_r+0x20>
 80090b6:	6005      	str	r5, [r0, #0]
 80090b8:	e7d6      	b.n	8009068 <_malloc_r+0xa8>
 80090ba:	bf00      	nop
 80090bc:	20000554 	.word	0x20000554

080090c0 <__malloc_lock>:
 80090c0:	4801      	ldr	r0, [pc, #4]	@ (80090c8 <__malloc_lock+0x8>)
 80090c2:	f7ff b8a8 	b.w	8008216 <__retarget_lock_acquire_recursive>
 80090c6:	bf00      	nop
 80090c8:	2000054c 	.word	0x2000054c

080090cc <__malloc_unlock>:
 80090cc:	4801      	ldr	r0, [pc, #4]	@ (80090d4 <__malloc_unlock+0x8>)
 80090ce:	f7ff b8a3 	b.w	8008218 <__retarget_lock_release_recursive>
 80090d2:	bf00      	nop
 80090d4:	2000054c 	.word	0x2000054c

080090d8 <_Balloc>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	69c6      	ldr	r6, [r0, #28]
 80090dc:	4604      	mov	r4, r0
 80090de:	460d      	mov	r5, r1
 80090e0:	b976      	cbnz	r6, 8009100 <_Balloc+0x28>
 80090e2:	2010      	movs	r0, #16
 80090e4:	f7ff ff42 	bl	8008f6c <malloc>
 80090e8:	4602      	mov	r2, r0
 80090ea:	61e0      	str	r0, [r4, #28]
 80090ec:	b920      	cbnz	r0, 80090f8 <_Balloc+0x20>
 80090ee:	4b18      	ldr	r3, [pc, #96]	@ (8009150 <_Balloc+0x78>)
 80090f0:	4818      	ldr	r0, [pc, #96]	@ (8009154 <_Balloc+0x7c>)
 80090f2:	216b      	movs	r1, #107	@ 0x6b
 80090f4:	f001 ff3c 	bl	800af70 <__assert_func>
 80090f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090fc:	6006      	str	r6, [r0, #0]
 80090fe:	60c6      	str	r6, [r0, #12]
 8009100:	69e6      	ldr	r6, [r4, #28]
 8009102:	68f3      	ldr	r3, [r6, #12]
 8009104:	b183      	cbz	r3, 8009128 <_Balloc+0x50>
 8009106:	69e3      	ldr	r3, [r4, #28]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800910e:	b9b8      	cbnz	r0, 8009140 <_Balloc+0x68>
 8009110:	2101      	movs	r1, #1
 8009112:	fa01 f605 	lsl.w	r6, r1, r5
 8009116:	1d72      	adds	r2, r6, #5
 8009118:	0092      	lsls	r2, r2, #2
 800911a:	4620      	mov	r0, r4
 800911c:	f001 ff46 	bl	800afac <_calloc_r>
 8009120:	b160      	cbz	r0, 800913c <_Balloc+0x64>
 8009122:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009126:	e00e      	b.n	8009146 <_Balloc+0x6e>
 8009128:	2221      	movs	r2, #33	@ 0x21
 800912a:	2104      	movs	r1, #4
 800912c:	4620      	mov	r0, r4
 800912e:	f001 ff3d 	bl	800afac <_calloc_r>
 8009132:	69e3      	ldr	r3, [r4, #28]
 8009134:	60f0      	str	r0, [r6, #12]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e4      	bne.n	8009106 <_Balloc+0x2e>
 800913c:	2000      	movs	r0, #0
 800913e:	bd70      	pop	{r4, r5, r6, pc}
 8009140:	6802      	ldr	r2, [r0, #0]
 8009142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009146:	2300      	movs	r3, #0
 8009148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800914c:	e7f7      	b.n	800913e <_Balloc+0x66>
 800914e:	bf00      	nop
 8009150:	0800b946 	.word	0x0800b946
 8009154:	0800b9c6 	.word	0x0800b9c6

08009158 <_Bfree>:
 8009158:	b570      	push	{r4, r5, r6, lr}
 800915a:	69c6      	ldr	r6, [r0, #28]
 800915c:	4605      	mov	r5, r0
 800915e:	460c      	mov	r4, r1
 8009160:	b976      	cbnz	r6, 8009180 <_Bfree+0x28>
 8009162:	2010      	movs	r0, #16
 8009164:	f7ff ff02 	bl	8008f6c <malloc>
 8009168:	4602      	mov	r2, r0
 800916a:	61e8      	str	r0, [r5, #28]
 800916c:	b920      	cbnz	r0, 8009178 <_Bfree+0x20>
 800916e:	4b09      	ldr	r3, [pc, #36]	@ (8009194 <_Bfree+0x3c>)
 8009170:	4809      	ldr	r0, [pc, #36]	@ (8009198 <_Bfree+0x40>)
 8009172:	218f      	movs	r1, #143	@ 0x8f
 8009174:	f001 fefc 	bl	800af70 <__assert_func>
 8009178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800917c:	6006      	str	r6, [r0, #0]
 800917e:	60c6      	str	r6, [r0, #12]
 8009180:	b13c      	cbz	r4, 8009192 <_Bfree+0x3a>
 8009182:	69eb      	ldr	r3, [r5, #28]
 8009184:	6862      	ldr	r2, [r4, #4]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800918c:	6021      	str	r1, [r4, #0]
 800918e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009192:	bd70      	pop	{r4, r5, r6, pc}
 8009194:	0800b946 	.word	0x0800b946
 8009198:	0800b9c6 	.word	0x0800b9c6

0800919c <__multadd>:
 800919c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a0:	690d      	ldr	r5, [r1, #16]
 80091a2:	4607      	mov	r7, r0
 80091a4:	460c      	mov	r4, r1
 80091a6:	461e      	mov	r6, r3
 80091a8:	f101 0c14 	add.w	ip, r1, #20
 80091ac:	2000      	movs	r0, #0
 80091ae:	f8dc 3000 	ldr.w	r3, [ip]
 80091b2:	b299      	uxth	r1, r3
 80091b4:	fb02 6101 	mla	r1, r2, r1, r6
 80091b8:	0c1e      	lsrs	r6, r3, #16
 80091ba:	0c0b      	lsrs	r3, r1, #16
 80091bc:	fb02 3306 	mla	r3, r2, r6, r3
 80091c0:	b289      	uxth	r1, r1
 80091c2:	3001      	adds	r0, #1
 80091c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091c8:	4285      	cmp	r5, r0
 80091ca:	f84c 1b04 	str.w	r1, [ip], #4
 80091ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091d2:	dcec      	bgt.n	80091ae <__multadd+0x12>
 80091d4:	b30e      	cbz	r6, 800921a <__multadd+0x7e>
 80091d6:	68a3      	ldr	r3, [r4, #8]
 80091d8:	42ab      	cmp	r3, r5
 80091da:	dc19      	bgt.n	8009210 <__multadd+0x74>
 80091dc:	6861      	ldr	r1, [r4, #4]
 80091de:	4638      	mov	r0, r7
 80091e0:	3101      	adds	r1, #1
 80091e2:	f7ff ff79 	bl	80090d8 <_Balloc>
 80091e6:	4680      	mov	r8, r0
 80091e8:	b928      	cbnz	r0, 80091f6 <__multadd+0x5a>
 80091ea:	4602      	mov	r2, r0
 80091ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009220 <__multadd+0x84>)
 80091ee:	480d      	ldr	r0, [pc, #52]	@ (8009224 <__multadd+0x88>)
 80091f0:	21ba      	movs	r1, #186	@ 0xba
 80091f2:	f001 febd 	bl	800af70 <__assert_func>
 80091f6:	6922      	ldr	r2, [r4, #16]
 80091f8:	3202      	adds	r2, #2
 80091fa:	f104 010c 	add.w	r1, r4, #12
 80091fe:	0092      	lsls	r2, r2, #2
 8009200:	300c      	adds	r0, #12
 8009202:	f001 fe9d 	bl	800af40 <memcpy>
 8009206:	4621      	mov	r1, r4
 8009208:	4638      	mov	r0, r7
 800920a:	f7ff ffa5 	bl	8009158 <_Bfree>
 800920e:	4644      	mov	r4, r8
 8009210:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009214:	3501      	adds	r5, #1
 8009216:	615e      	str	r6, [r3, #20]
 8009218:	6125      	str	r5, [r4, #16]
 800921a:	4620      	mov	r0, r4
 800921c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009220:	0800b9b5 	.word	0x0800b9b5
 8009224:	0800b9c6 	.word	0x0800b9c6

08009228 <__s2b>:
 8009228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800922c:	460c      	mov	r4, r1
 800922e:	4615      	mov	r5, r2
 8009230:	461f      	mov	r7, r3
 8009232:	2209      	movs	r2, #9
 8009234:	3308      	adds	r3, #8
 8009236:	4606      	mov	r6, r0
 8009238:	fb93 f3f2 	sdiv	r3, r3, r2
 800923c:	2100      	movs	r1, #0
 800923e:	2201      	movs	r2, #1
 8009240:	429a      	cmp	r2, r3
 8009242:	db09      	blt.n	8009258 <__s2b+0x30>
 8009244:	4630      	mov	r0, r6
 8009246:	f7ff ff47 	bl	80090d8 <_Balloc>
 800924a:	b940      	cbnz	r0, 800925e <__s2b+0x36>
 800924c:	4602      	mov	r2, r0
 800924e:	4b19      	ldr	r3, [pc, #100]	@ (80092b4 <__s2b+0x8c>)
 8009250:	4819      	ldr	r0, [pc, #100]	@ (80092b8 <__s2b+0x90>)
 8009252:	21d3      	movs	r1, #211	@ 0xd3
 8009254:	f001 fe8c 	bl	800af70 <__assert_func>
 8009258:	0052      	lsls	r2, r2, #1
 800925a:	3101      	adds	r1, #1
 800925c:	e7f0      	b.n	8009240 <__s2b+0x18>
 800925e:	9b08      	ldr	r3, [sp, #32]
 8009260:	6143      	str	r3, [r0, #20]
 8009262:	2d09      	cmp	r5, #9
 8009264:	f04f 0301 	mov.w	r3, #1
 8009268:	6103      	str	r3, [r0, #16]
 800926a:	dd16      	ble.n	800929a <__s2b+0x72>
 800926c:	f104 0909 	add.w	r9, r4, #9
 8009270:	46c8      	mov	r8, r9
 8009272:	442c      	add	r4, r5
 8009274:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009278:	4601      	mov	r1, r0
 800927a:	3b30      	subs	r3, #48	@ 0x30
 800927c:	220a      	movs	r2, #10
 800927e:	4630      	mov	r0, r6
 8009280:	f7ff ff8c 	bl	800919c <__multadd>
 8009284:	45a0      	cmp	r8, r4
 8009286:	d1f5      	bne.n	8009274 <__s2b+0x4c>
 8009288:	f1a5 0408 	sub.w	r4, r5, #8
 800928c:	444c      	add	r4, r9
 800928e:	1b2d      	subs	r5, r5, r4
 8009290:	1963      	adds	r3, r4, r5
 8009292:	42bb      	cmp	r3, r7
 8009294:	db04      	blt.n	80092a0 <__s2b+0x78>
 8009296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800929a:	340a      	adds	r4, #10
 800929c:	2509      	movs	r5, #9
 800929e:	e7f6      	b.n	800928e <__s2b+0x66>
 80092a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80092a4:	4601      	mov	r1, r0
 80092a6:	3b30      	subs	r3, #48	@ 0x30
 80092a8:	220a      	movs	r2, #10
 80092aa:	4630      	mov	r0, r6
 80092ac:	f7ff ff76 	bl	800919c <__multadd>
 80092b0:	e7ee      	b.n	8009290 <__s2b+0x68>
 80092b2:	bf00      	nop
 80092b4:	0800b9b5 	.word	0x0800b9b5
 80092b8:	0800b9c6 	.word	0x0800b9c6

080092bc <__hi0bits>:
 80092bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80092c0:	4603      	mov	r3, r0
 80092c2:	bf36      	itet	cc
 80092c4:	0403      	lslcc	r3, r0, #16
 80092c6:	2000      	movcs	r0, #0
 80092c8:	2010      	movcc	r0, #16
 80092ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092ce:	bf3c      	itt	cc
 80092d0:	021b      	lslcc	r3, r3, #8
 80092d2:	3008      	addcc	r0, #8
 80092d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092d8:	bf3c      	itt	cc
 80092da:	011b      	lslcc	r3, r3, #4
 80092dc:	3004      	addcc	r0, #4
 80092de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092e2:	bf3c      	itt	cc
 80092e4:	009b      	lslcc	r3, r3, #2
 80092e6:	3002      	addcc	r0, #2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	db05      	blt.n	80092f8 <__hi0bits+0x3c>
 80092ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80092f0:	f100 0001 	add.w	r0, r0, #1
 80092f4:	bf08      	it	eq
 80092f6:	2020      	moveq	r0, #32
 80092f8:	4770      	bx	lr

080092fa <__lo0bits>:
 80092fa:	6803      	ldr	r3, [r0, #0]
 80092fc:	4602      	mov	r2, r0
 80092fe:	f013 0007 	ands.w	r0, r3, #7
 8009302:	d00b      	beq.n	800931c <__lo0bits+0x22>
 8009304:	07d9      	lsls	r1, r3, #31
 8009306:	d421      	bmi.n	800934c <__lo0bits+0x52>
 8009308:	0798      	lsls	r0, r3, #30
 800930a:	bf49      	itett	mi
 800930c:	085b      	lsrmi	r3, r3, #1
 800930e:	089b      	lsrpl	r3, r3, #2
 8009310:	2001      	movmi	r0, #1
 8009312:	6013      	strmi	r3, [r2, #0]
 8009314:	bf5c      	itt	pl
 8009316:	6013      	strpl	r3, [r2, #0]
 8009318:	2002      	movpl	r0, #2
 800931a:	4770      	bx	lr
 800931c:	b299      	uxth	r1, r3
 800931e:	b909      	cbnz	r1, 8009324 <__lo0bits+0x2a>
 8009320:	0c1b      	lsrs	r3, r3, #16
 8009322:	2010      	movs	r0, #16
 8009324:	b2d9      	uxtb	r1, r3
 8009326:	b909      	cbnz	r1, 800932c <__lo0bits+0x32>
 8009328:	3008      	adds	r0, #8
 800932a:	0a1b      	lsrs	r3, r3, #8
 800932c:	0719      	lsls	r1, r3, #28
 800932e:	bf04      	itt	eq
 8009330:	091b      	lsreq	r3, r3, #4
 8009332:	3004      	addeq	r0, #4
 8009334:	0799      	lsls	r1, r3, #30
 8009336:	bf04      	itt	eq
 8009338:	089b      	lsreq	r3, r3, #2
 800933a:	3002      	addeq	r0, #2
 800933c:	07d9      	lsls	r1, r3, #31
 800933e:	d403      	bmi.n	8009348 <__lo0bits+0x4e>
 8009340:	085b      	lsrs	r3, r3, #1
 8009342:	f100 0001 	add.w	r0, r0, #1
 8009346:	d003      	beq.n	8009350 <__lo0bits+0x56>
 8009348:	6013      	str	r3, [r2, #0]
 800934a:	4770      	bx	lr
 800934c:	2000      	movs	r0, #0
 800934e:	4770      	bx	lr
 8009350:	2020      	movs	r0, #32
 8009352:	4770      	bx	lr

08009354 <__i2b>:
 8009354:	b510      	push	{r4, lr}
 8009356:	460c      	mov	r4, r1
 8009358:	2101      	movs	r1, #1
 800935a:	f7ff febd 	bl	80090d8 <_Balloc>
 800935e:	4602      	mov	r2, r0
 8009360:	b928      	cbnz	r0, 800936e <__i2b+0x1a>
 8009362:	4b05      	ldr	r3, [pc, #20]	@ (8009378 <__i2b+0x24>)
 8009364:	4805      	ldr	r0, [pc, #20]	@ (800937c <__i2b+0x28>)
 8009366:	f240 1145 	movw	r1, #325	@ 0x145
 800936a:	f001 fe01 	bl	800af70 <__assert_func>
 800936e:	2301      	movs	r3, #1
 8009370:	6144      	str	r4, [r0, #20]
 8009372:	6103      	str	r3, [r0, #16]
 8009374:	bd10      	pop	{r4, pc}
 8009376:	bf00      	nop
 8009378:	0800b9b5 	.word	0x0800b9b5
 800937c:	0800b9c6 	.word	0x0800b9c6

08009380 <__multiply>:
 8009380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009384:	4617      	mov	r7, r2
 8009386:	690a      	ldr	r2, [r1, #16]
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	429a      	cmp	r2, r3
 800938c:	bfa8      	it	ge
 800938e:	463b      	movge	r3, r7
 8009390:	4689      	mov	r9, r1
 8009392:	bfa4      	itt	ge
 8009394:	460f      	movge	r7, r1
 8009396:	4699      	movge	r9, r3
 8009398:	693d      	ldr	r5, [r7, #16]
 800939a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6879      	ldr	r1, [r7, #4]
 80093a2:	eb05 060a 	add.w	r6, r5, sl
 80093a6:	42b3      	cmp	r3, r6
 80093a8:	b085      	sub	sp, #20
 80093aa:	bfb8      	it	lt
 80093ac:	3101      	addlt	r1, #1
 80093ae:	f7ff fe93 	bl	80090d8 <_Balloc>
 80093b2:	b930      	cbnz	r0, 80093c2 <__multiply+0x42>
 80093b4:	4602      	mov	r2, r0
 80093b6:	4b41      	ldr	r3, [pc, #260]	@ (80094bc <__multiply+0x13c>)
 80093b8:	4841      	ldr	r0, [pc, #260]	@ (80094c0 <__multiply+0x140>)
 80093ba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80093be:	f001 fdd7 	bl	800af70 <__assert_func>
 80093c2:	f100 0414 	add.w	r4, r0, #20
 80093c6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80093ca:	4623      	mov	r3, r4
 80093cc:	2200      	movs	r2, #0
 80093ce:	4573      	cmp	r3, lr
 80093d0:	d320      	bcc.n	8009414 <__multiply+0x94>
 80093d2:	f107 0814 	add.w	r8, r7, #20
 80093d6:	f109 0114 	add.w	r1, r9, #20
 80093da:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80093de:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80093e2:	9302      	str	r3, [sp, #8]
 80093e4:	1beb      	subs	r3, r5, r7
 80093e6:	3b15      	subs	r3, #21
 80093e8:	f023 0303 	bic.w	r3, r3, #3
 80093ec:	3304      	adds	r3, #4
 80093ee:	3715      	adds	r7, #21
 80093f0:	42bd      	cmp	r5, r7
 80093f2:	bf38      	it	cc
 80093f4:	2304      	movcc	r3, #4
 80093f6:	9301      	str	r3, [sp, #4]
 80093f8:	9b02      	ldr	r3, [sp, #8]
 80093fa:	9103      	str	r1, [sp, #12]
 80093fc:	428b      	cmp	r3, r1
 80093fe:	d80c      	bhi.n	800941a <__multiply+0x9a>
 8009400:	2e00      	cmp	r6, #0
 8009402:	dd03      	ble.n	800940c <__multiply+0x8c>
 8009404:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009408:	2b00      	cmp	r3, #0
 800940a:	d055      	beq.n	80094b8 <__multiply+0x138>
 800940c:	6106      	str	r6, [r0, #16]
 800940e:	b005      	add	sp, #20
 8009410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009414:	f843 2b04 	str.w	r2, [r3], #4
 8009418:	e7d9      	b.n	80093ce <__multiply+0x4e>
 800941a:	f8b1 a000 	ldrh.w	sl, [r1]
 800941e:	f1ba 0f00 	cmp.w	sl, #0
 8009422:	d01f      	beq.n	8009464 <__multiply+0xe4>
 8009424:	46c4      	mov	ip, r8
 8009426:	46a1      	mov	r9, r4
 8009428:	2700      	movs	r7, #0
 800942a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800942e:	f8d9 3000 	ldr.w	r3, [r9]
 8009432:	fa1f fb82 	uxth.w	fp, r2
 8009436:	b29b      	uxth	r3, r3
 8009438:	fb0a 330b 	mla	r3, sl, fp, r3
 800943c:	443b      	add	r3, r7
 800943e:	f8d9 7000 	ldr.w	r7, [r9]
 8009442:	0c12      	lsrs	r2, r2, #16
 8009444:	0c3f      	lsrs	r7, r7, #16
 8009446:	fb0a 7202 	mla	r2, sl, r2, r7
 800944a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800944e:	b29b      	uxth	r3, r3
 8009450:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009454:	4565      	cmp	r5, ip
 8009456:	f849 3b04 	str.w	r3, [r9], #4
 800945a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800945e:	d8e4      	bhi.n	800942a <__multiply+0xaa>
 8009460:	9b01      	ldr	r3, [sp, #4]
 8009462:	50e7      	str	r7, [r4, r3]
 8009464:	9b03      	ldr	r3, [sp, #12]
 8009466:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800946a:	3104      	adds	r1, #4
 800946c:	f1b9 0f00 	cmp.w	r9, #0
 8009470:	d020      	beq.n	80094b4 <__multiply+0x134>
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	4647      	mov	r7, r8
 8009476:	46a4      	mov	ip, r4
 8009478:	f04f 0a00 	mov.w	sl, #0
 800947c:	f8b7 b000 	ldrh.w	fp, [r7]
 8009480:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009484:	fb09 220b 	mla	r2, r9, fp, r2
 8009488:	4452      	add	r2, sl
 800948a:	b29b      	uxth	r3, r3
 800948c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009490:	f84c 3b04 	str.w	r3, [ip], #4
 8009494:	f857 3b04 	ldr.w	r3, [r7], #4
 8009498:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800949c:	f8bc 3000 	ldrh.w	r3, [ip]
 80094a0:	fb09 330a 	mla	r3, r9, sl, r3
 80094a4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80094a8:	42bd      	cmp	r5, r7
 80094aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094ae:	d8e5      	bhi.n	800947c <__multiply+0xfc>
 80094b0:	9a01      	ldr	r2, [sp, #4]
 80094b2:	50a3      	str	r3, [r4, r2]
 80094b4:	3404      	adds	r4, #4
 80094b6:	e79f      	b.n	80093f8 <__multiply+0x78>
 80094b8:	3e01      	subs	r6, #1
 80094ba:	e7a1      	b.n	8009400 <__multiply+0x80>
 80094bc:	0800b9b5 	.word	0x0800b9b5
 80094c0:	0800b9c6 	.word	0x0800b9c6

080094c4 <__pow5mult>:
 80094c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094c8:	4615      	mov	r5, r2
 80094ca:	f012 0203 	ands.w	r2, r2, #3
 80094ce:	4607      	mov	r7, r0
 80094d0:	460e      	mov	r6, r1
 80094d2:	d007      	beq.n	80094e4 <__pow5mult+0x20>
 80094d4:	4c25      	ldr	r4, [pc, #148]	@ (800956c <__pow5mult+0xa8>)
 80094d6:	3a01      	subs	r2, #1
 80094d8:	2300      	movs	r3, #0
 80094da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094de:	f7ff fe5d 	bl	800919c <__multadd>
 80094e2:	4606      	mov	r6, r0
 80094e4:	10ad      	asrs	r5, r5, #2
 80094e6:	d03d      	beq.n	8009564 <__pow5mult+0xa0>
 80094e8:	69fc      	ldr	r4, [r7, #28]
 80094ea:	b97c      	cbnz	r4, 800950c <__pow5mult+0x48>
 80094ec:	2010      	movs	r0, #16
 80094ee:	f7ff fd3d 	bl	8008f6c <malloc>
 80094f2:	4602      	mov	r2, r0
 80094f4:	61f8      	str	r0, [r7, #28]
 80094f6:	b928      	cbnz	r0, 8009504 <__pow5mult+0x40>
 80094f8:	4b1d      	ldr	r3, [pc, #116]	@ (8009570 <__pow5mult+0xac>)
 80094fa:	481e      	ldr	r0, [pc, #120]	@ (8009574 <__pow5mult+0xb0>)
 80094fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009500:	f001 fd36 	bl	800af70 <__assert_func>
 8009504:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009508:	6004      	str	r4, [r0, #0]
 800950a:	60c4      	str	r4, [r0, #12]
 800950c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009510:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009514:	b94c      	cbnz	r4, 800952a <__pow5mult+0x66>
 8009516:	f240 2171 	movw	r1, #625	@ 0x271
 800951a:	4638      	mov	r0, r7
 800951c:	f7ff ff1a 	bl	8009354 <__i2b>
 8009520:	2300      	movs	r3, #0
 8009522:	f8c8 0008 	str.w	r0, [r8, #8]
 8009526:	4604      	mov	r4, r0
 8009528:	6003      	str	r3, [r0, #0]
 800952a:	f04f 0900 	mov.w	r9, #0
 800952e:	07eb      	lsls	r3, r5, #31
 8009530:	d50a      	bpl.n	8009548 <__pow5mult+0x84>
 8009532:	4631      	mov	r1, r6
 8009534:	4622      	mov	r2, r4
 8009536:	4638      	mov	r0, r7
 8009538:	f7ff ff22 	bl	8009380 <__multiply>
 800953c:	4631      	mov	r1, r6
 800953e:	4680      	mov	r8, r0
 8009540:	4638      	mov	r0, r7
 8009542:	f7ff fe09 	bl	8009158 <_Bfree>
 8009546:	4646      	mov	r6, r8
 8009548:	106d      	asrs	r5, r5, #1
 800954a:	d00b      	beq.n	8009564 <__pow5mult+0xa0>
 800954c:	6820      	ldr	r0, [r4, #0]
 800954e:	b938      	cbnz	r0, 8009560 <__pow5mult+0x9c>
 8009550:	4622      	mov	r2, r4
 8009552:	4621      	mov	r1, r4
 8009554:	4638      	mov	r0, r7
 8009556:	f7ff ff13 	bl	8009380 <__multiply>
 800955a:	6020      	str	r0, [r4, #0]
 800955c:	f8c0 9000 	str.w	r9, [r0]
 8009560:	4604      	mov	r4, r0
 8009562:	e7e4      	b.n	800952e <__pow5mult+0x6a>
 8009564:	4630      	mov	r0, r6
 8009566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800956a:	bf00      	nop
 800956c:	0800bad8 	.word	0x0800bad8
 8009570:	0800b946 	.word	0x0800b946
 8009574:	0800b9c6 	.word	0x0800b9c6

08009578 <__lshift>:
 8009578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800957c:	460c      	mov	r4, r1
 800957e:	6849      	ldr	r1, [r1, #4]
 8009580:	6923      	ldr	r3, [r4, #16]
 8009582:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009586:	68a3      	ldr	r3, [r4, #8]
 8009588:	4607      	mov	r7, r0
 800958a:	4691      	mov	r9, r2
 800958c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009590:	f108 0601 	add.w	r6, r8, #1
 8009594:	42b3      	cmp	r3, r6
 8009596:	db0b      	blt.n	80095b0 <__lshift+0x38>
 8009598:	4638      	mov	r0, r7
 800959a:	f7ff fd9d 	bl	80090d8 <_Balloc>
 800959e:	4605      	mov	r5, r0
 80095a0:	b948      	cbnz	r0, 80095b6 <__lshift+0x3e>
 80095a2:	4602      	mov	r2, r0
 80095a4:	4b28      	ldr	r3, [pc, #160]	@ (8009648 <__lshift+0xd0>)
 80095a6:	4829      	ldr	r0, [pc, #164]	@ (800964c <__lshift+0xd4>)
 80095a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80095ac:	f001 fce0 	bl	800af70 <__assert_func>
 80095b0:	3101      	adds	r1, #1
 80095b2:	005b      	lsls	r3, r3, #1
 80095b4:	e7ee      	b.n	8009594 <__lshift+0x1c>
 80095b6:	2300      	movs	r3, #0
 80095b8:	f100 0114 	add.w	r1, r0, #20
 80095bc:	f100 0210 	add.w	r2, r0, #16
 80095c0:	4618      	mov	r0, r3
 80095c2:	4553      	cmp	r3, sl
 80095c4:	db33      	blt.n	800962e <__lshift+0xb6>
 80095c6:	6920      	ldr	r0, [r4, #16]
 80095c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095cc:	f104 0314 	add.w	r3, r4, #20
 80095d0:	f019 091f 	ands.w	r9, r9, #31
 80095d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095dc:	d02b      	beq.n	8009636 <__lshift+0xbe>
 80095de:	f1c9 0e20 	rsb	lr, r9, #32
 80095e2:	468a      	mov	sl, r1
 80095e4:	2200      	movs	r2, #0
 80095e6:	6818      	ldr	r0, [r3, #0]
 80095e8:	fa00 f009 	lsl.w	r0, r0, r9
 80095ec:	4310      	orrs	r0, r2
 80095ee:	f84a 0b04 	str.w	r0, [sl], #4
 80095f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80095f6:	459c      	cmp	ip, r3
 80095f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80095fc:	d8f3      	bhi.n	80095e6 <__lshift+0x6e>
 80095fe:	ebac 0304 	sub.w	r3, ip, r4
 8009602:	3b15      	subs	r3, #21
 8009604:	f023 0303 	bic.w	r3, r3, #3
 8009608:	3304      	adds	r3, #4
 800960a:	f104 0015 	add.w	r0, r4, #21
 800960e:	4560      	cmp	r0, ip
 8009610:	bf88      	it	hi
 8009612:	2304      	movhi	r3, #4
 8009614:	50ca      	str	r2, [r1, r3]
 8009616:	b10a      	cbz	r2, 800961c <__lshift+0xa4>
 8009618:	f108 0602 	add.w	r6, r8, #2
 800961c:	3e01      	subs	r6, #1
 800961e:	4638      	mov	r0, r7
 8009620:	612e      	str	r6, [r5, #16]
 8009622:	4621      	mov	r1, r4
 8009624:	f7ff fd98 	bl	8009158 <_Bfree>
 8009628:	4628      	mov	r0, r5
 800962a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800962e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009632:	3301      	adds	r3, #1
 8009634:	e7c5      	b.n	80095c2 <__lshift+0x4a>
 8009636:	3904      	subs	r1, #4
 8009638:	f853 2b04 	ldr.w	r2, [r3], #4
 800963c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009640:	459c      	cmp	ip, r3
 8009642:	d8f9      	bhi.n	8009638 <__lshift+0xc0>
 8009644:	e7ea      	b.n	800961c <__lshift+0xa4>
 8009646:	bf00      	nop
 8009648:	0800b9b5 	.word	0x0800b9b5
 800964c:	0800b9c6 	.word	0x0800b9c6

08009650 <__mcmp>:
 8009650:	690a      	ldr	r2, [r1, #16]
 8009652:	4603      	mov	r3, r0
 8009654:	6900      	ldr	r0, [r0, #16]
 8009656:	1a80      	subs	r0, r0, r2
 8009658:	b530      	push	{r4, r5, lr}
 800965a:	d10e      	bne.n	800967a <__mcmp+0x2a>
 800965c:	3314      	adds	r3, #20
 800965e:	3114      	adds	r1, #20
 8009660:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009664:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009668:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800966c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009670:	4295      	cmp	r5, r2
 8009672:	d003      	beq.n	800967c <__mcmp+0x2c>
 8009674:	d205      	bcs.n	8009682 <__mcmp+0x32>
 8009676:	f04f 30ff 	mov.w	r0, #4294967295
 800967a:	bd30      	pop	{r4, r5, pc}
 800967c:	42a3      	cmp	r3, r4
 800967e:	d3f3      	bcc.n	8009668 <__mcmp+0x18>
 8009680:	e7fb      	b.n	800967a <__mcmp+0x2a>
 8009682:	2001      	movs	r0, #1
 8009684:	e7f9      	b.n	800967a <__mcmp+0x2a>
	...

08009688 <__mdiff>:
 8009688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	4689      	mov	r9, r1
 800968e:	4606      	mov	r6, r0
 8009690:	4611      	mov	r1, r2
 8009692:	4648      	mov	r0, r9
 8009694:	4614      	mov	r4, r2
 8009696:	f7ff ffdb 	bl	8009650 <__mcmp>
 800969a:	1e05      	subs	r5, r0, #0
 800969c:	d112      	bne.n	80096c4 <__mdiff+0x3c>
 800969e:	4629      	mov	r1, r5
 80096a0:	4630      	mov	r0, r6
 80096a2:	f7ff fd19 	bl	80090d8 <_Balloc>
 80096a6:	4602      	mov	r2, r0
 80096a8:	b928      	cbnz	r0, 80096b6 <__mdiff+0x2e>
 80096aa:	4b3f      	ldr	r3, [pc, #252]	@ (80097a8 <__mdiff+0x120>)
 80096ac:	f240 2137 	movw	r1, #567	@ 0x237
 80096b0:	483e      	ldr	r0, [pc, #248]	@ (80097ac <__mdiff+0x124>)
 80096b2:	f001 fc5d 	bl	800af70 <__assert_func>
 80096b6:	2301      	movs	r3, #1
 80096b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096bc:	4610      	mov	r0, r2
 80096be:	b003      	add	sp, #12
 80096c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c4:	bfbc      	itt	lt
 80096c6:	464b      	movlt	r3, r9
 80096c8:	46a1      	movlt	r9, r4
 80096ca:	4630      	mov	r0, r6
 80096cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80096d0:	bfba      	itte	lt
 80096d2:	461c      	movlt	r4, r3
 80096d4:	2501      	movlt	r5, #1
 80096d6:	2500      	movge	r5, #0
 80096d8:	f7ff fcfe 	bl	80090d8 <_Balloc>
 80096dc:	4602      	mov	r2, r0
 80096de:	b918      	cbnz	r0, 80096e8 <__mdiff+0x60>
 80096e0:	4b31      	ldr	r3, [pc, #196]	@ (80097a8 <__mdiff+0x120>)
 80096e2:	f240 2145 	movw	r1, #581	@ 0x245
 80096e6:	e7e3      	b.n	80096b0 <__mdiff+0x28>
 80096e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80096ec:	6926      	ldr	r6, [r4, #16]
 80096ee:	60c5      	str	r5, [r0, #12]
 80096f0:	f109 0310 	add.w	r3, r9, #16
 80096f4:	f109 0514 	add.w	r5, r9, #20
 80096f8:	f104 0e14 	add.w	lr, r4, #20
 80096fc:	f100 0b14 	add.w	fp, r0, #20
 8009700:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009704:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	46d9      	mov	r9, fp
 800970c:	f04f 0c00 	mov.w	ip, #0
 8009710:	9b01      	ldr	r3, [sp, #4]
 8009712:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009716:	f853 af04 	ldr.w	sl, [r3, #4]!
 800971a:	9301      	str	r3, [sp, #4]
 800971c:	fa1f f38a 	uxth.w	r3, sl
 8009720:	4619      	mov	r1, r3
 8009722:	b283      	uxth	r3, r0
 8009724:	1acb      	subs	r3, r1, r3
 8009726:	0c00      	lsrs	r0, r0, #16
 8009728:	4463      	add	r3, ip
 800972a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800972e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009732:	b29b      	uxth	r3, r3
 8009734:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009738:	4576      	cmp	r6, lr
 800973a:	f849 3b04 	str.w	r3, [r9], #4
 800973e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009742:	d8e5      	bhi.n	8009710 <__mdiff+0x88>
 8009744:	1b33      	subs	r3, r6, r4
 8009746:	3b15      	subs	r3, #21
 8009748:	f023 0303 	bic.w	r3, r3, #3
 800974c:	3415      	adds	r4, #21
 800974e:	3304      	adds	r3, #4
 8009750:	42a6      	cmp	r6, r4
 8009752:	bf38      	it	cc
 8009754:	2304      	movcc	r3, #4
 8009756:	441d      	add	r5, r3
 8009758:	445b      	add	r3, fp
 800975a:	461e      	mov	r6, r3
 800975c:	462c      	mov	r4, r5
 800975e:	4544      	cmp	r4, r8
 8009760:	d30e      	bcc.n	8009780 <__mdiff+0xf8>
 8009762:	f108 0103 	add.w	r1, r8, #3
 8009766:	1b49      	subs	r1, r1, r5
 8009768:	f021 0103 	bic.w	r1, r1, #3
 800976c:	3d03      	subs	r5, #3
 800976e:	45a8      	cmp	r8, r5
 8009770:	bf38      	it	cc
 8009772:	2100      	movcc	r1, #0
 8009774:	440b      	add	r3, r1
 8009776:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800977a:	b191      	cbz	r1, 80097a2 <__mdiff+0x11a>
 800977c:	6117      	str	r7, [r2, #16]
 800977e:	e79d      	b.n	80096bc <__mdiff+0x34>
 8009780:	f854 1b04 	ldr.w	r1, [r4], #4
 8009784:	46e6      	mov	lr, ip
 8009786:	0c08      	lsrs	r0, r1, #16
 8009788:	fa1c fc81 	uxtah	ip, ip, r1
 800978c:	4471      	add	r1, lr
 800978e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009792:	b289      	uxth	r1, r1
 8009794:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009798:	f846 1b04 	str.w	r1, [r6], #4
 800979c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80097a0:	e7dd      	b.n	800975e <__mdiff+0xd6>
 80097a2:	3f01      	subs	r7, #1
 80097a4:	e7e7      	b.n	8009776 <__mdiff+0xee>
 80097a6:	bf00      	nop
 80097a8:	0800b9b5 	.word	0x0800b9b5
 80097ac:	0800b9c6 	.word	0x0800b9c6

080097b0 <__ulp>:
 80097b0:	b082      	sub	sp, #8
 80097b2:	ed8d 0b00 	vstr	d0, [sp]
 80097b6:	9a01      	ldr	r2, [sp, #4]
 80097b8:	4b0f      	ldr	r3, [pc, #60]	@ (80097f8 <__ulp+0x48>)
 80097ba:	4013      	ands	r3, r2
 80097bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	dc08      	bgt.n	80097d6 <__ulp+0x26>
 80097c4:	425b      	negs	r3, r3
 80097c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80097ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80097ce:	da04      	bge.n	80097da <__ulp+0x2a>
 80097d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80097d4:	4113      	asrs	r3, r2
 80097d6:	2200      	movs	r2, #0
 80097d8:	e008      	b.n	80097ec <__ulp+0x3c>
 80097da:	f1a2 0314 	sub.w	r3, r2, #20
 80097de:	2b1e      	cmp	r3, #30
 80097e0:	bfda      	itte	le
 80097e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80097e6:	40da      	lsrle	r2, r3
 80097e8:	2201      	movgt	r2, #1
 80097ea:	2300      	movs	r3, #0
 80097ec:	4619      	mov	r1, r3
 80097ee:	4610      	mov	r0, r2
 80097f0:	ec41 0b10 	vmov	d0, r0, r1
 80097f4:	b002      	add	sp, #8
 80097f6:	4770      	bx	lr
 80097f8:	7ff00000 	.word	0x7ff00000

080097fc <__b2d>:
 80097fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009800:	6906      	ldr	r6, [r0, #16]
 8009802:	f100 0814 	add.w	r8, r0, #20
 8009806:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800980a:	1f37      	subs	r7, r6, #4
 800980c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009810:	4610      	mov	r0, r2
 8009812:	f7ff fd53 	bl	80092bc <__hi0bits>
 8009816:	f1c0 0320 	rsb	r3, r0, #32
 800981a:	280a      	cmp	r0, #10
 800981c:	600b      	str	r3, [r1, #0]
 800981e:	491b      	ldr	r1, [pc, #108]	@ (800988c <__b2d+0x90>)
 8009820:	dc15      	bgt.n	800984e <__b2d+0x52>
 8009822:	f1c0 0c0b 	rsb	ip, r0, #11
 8009826:	fa22 f30c 	lsr.w	r3, r2, ip
 800982a:	45b8      	cmp	r8, r7
 800982c:	ea43 0501 	orr.w	r5, r3, r1
 8009830:	bf34      	ite	cc
 8009832:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009836:	2300      	movcs	r3, #0
 8009838:	3015      	adds	r0, #21
 800983a:	fa02 f000 	lsl.w	r0, r2, r0
 800983e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009842:	4303      	orrs	r3, r0
 8009844:	461c      	mov	r4, r3
 8009846:	ec45 4b10 	vmov	d0, r4, r5
 800984a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800984e:	45b8      	cmp	r8, r7
 8009850:	bf3a      	itte	cc
 8009852:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009856:	f1a6 0708 	subcc.w	r7, r6, #8
 800985a:	2300      	movcs	r3, #0
 800985c:	380b      	subs	r0, #11
 800985e:	d012      	beq.n	8009886 <__b2d+0x8a>
 8009860:	f1c0 0120 	rsb	r1, r0, #32
 8009864:	fa23 f401 	lsr.w	r4, r3, r1
 8009868:	4082      	lsls	r2, r0
 800986a:	4322      	orrs	r2, r4
 800986c:	4547      	cmp	r7, r8
 800986e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009872:	bf8c      	ite	hi
 8009874:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009878:	2200      	movls	r2, #0
 800987a:	4083      	lsls	r3, r0
 800987c:	40ca      	lsrs	r2, r1
 800987e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009882:	4313      	orrs	r3, r2
 8009884:	e7de      	b.n	8009844 <__b2d+0x48>
 8009886:	ea42 0501 	orr.w	r5, r2, r1
 800988a:	e7db      	b.n	8009844 <__b2d+0x48>
 800988c:	3ff00000 	.word	0x3ff00000

08009890 <__d2b>:
 8009890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009894:	460f      	mov	r7, r1
 8009896:	2101      	movs	r1, #1
 8009898:	ec59 8b10 	vmov	r8, r9, d0
 800989c:	4616      	mov	r6, r2
 800989e:	f7ff fc1b 	bl	80090d8 <_Balloc>
 80098a2:	4604      	mov	r4, r0
 80098a4:	b930      	cbnz	r0, 80098b4 <__d2b+0x24>
 80098a6:	4602      	mov	r2, r0
 80098a8:	4b23      	ldr	r3, [pc, #140]	@ (8009938 <__d2b+0xa8>)
 80098aa:	4824      	ldr	r0, [pc, #144]	@ (800993c <__d2b+0xac>)
 80098ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80098b0:	f001 fb5e 	bl	800af70 <__assert_func>
 80098b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098bc:	b10d      	cbz	r5, 80098c2 <__d2b+0x32>
 80098be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098c2:	9301      	str	r3, [sp, #4]
 80098c4:	f1b8 0300 	subs.w	r3, r8, #0
 80098c8:	d023      	beq.n	8009912 <__d2b+0x82>
 80098ca:	4668      	mov	r0, sp
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	f7ff fd14 	bl	80092fa <__lo0bits>
 80098d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80098d6:	b1d0      	cbz	r0, 800990e <__d2b+0x7e>
 80098d8:	f1c0 0320 	rsb	r3, r0, #32
 80098dc:	fa02 f303 	lsl.w	r3, r2, r3
 80098e0:	430b      	orrs	r3, r1
 80098e2:	40c2      	lsrs	r2, r0
 80098e4:	6163      	str	r3, [r4, #20]
 80098e6:	9201      	str	r2, [sp, #4]
 80098e8:	9b01      	ldr	r3, [sp, #4]
 80098ea:	61a3      	str	r3, [r4, #24]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	bf0c      	ite	eq
 80098f0:	2201      	moveq	r2, #1
 80098f2:	2202      	movne	r2, #2
 80098f4:	6122      	str	r2, [r4, #16]
 80098f6:	b1a5      	cbz	r5, 8009922 <__d2b+0x92>
 80098f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80098fc:	4405      	add	r5, r0
 80098fe:	603d      	str	r5, [r7, #0]
 8009900:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009904:	6030      	str	r0, [r6, #0]
 8009906:	4620      	mov	r0, r4
 8009908:	b003      	add	sp, #12
 800990a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800990e:	6161      	str	r1, [r4, #20]
 8009910:	e7ea      	b.n	80098e8 <__d2b+0x58>
 8009912:	a801      	add	r0, sp, #4
 8009914:	f7ff fcf1 	bl	80092fa <__lo0bits>
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	6163      	str	r3, [r4, #20]
 800991c:	3020      	adds	r0, #32
 800991e:	2201      	movs	r2, #1
 8009920:	e7e8      	b.n	80098f4 <__d2b+0x64>
 8009922:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009926:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800992a:	6038      	str	r0, [r7, #0]
 800992c:	6918      	ldr	r0, [r3, #16]
 800992e:	f7ff fcc5 	bl	80092bc <__hi0bits>
 8009932:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009936:	e7e5      	b.n	8009904 <__d2b+0x74>
 8009938:	0800b9b5 	.word	0x0800b9b5
 800993c:	0800b9c6 	.word	0x0800b9c6

08009940 <__ratio>:
 8009940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	b085      	sub	sp, #20
 8009946:	e9cd 1000 	strd	r1, r0, [sp]
 800994a:	a902      	add	r1, sp, #8
 800994c:	f7ff ff56 	bl	80097fc <__b2d>
 8009950:	9800      	ldr	r0, [sp, #0]
 8009952:	a903      	add	r1, sp, #12
 8009954:	ec55 4b10 	vmov	r4, r5, d0
 8009958:	f7ff ff50 	bl	80097fc <__b2d>
 800995c:	9b01      	ldr	r3, [sp, #4]
 800995e:	6919      	ldr	r1, [r3, #16]
 8009960:	9b00      	ldr	r3, [sp, #0]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	1ac9      	subs	r1, r1, r3
 8009966:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800996a:	1a9b      	subs	r3, r3, r2
 800996c:	ec5b ab10 	vmov	sl, fp, d0
 8009970:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009974:	2b00      	cmp	r3, #0
 8009976:	bfce      	itee	gt
 8009978:	462a      	movgt	r2, r5
 800997a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800997e:	465a      	movle	r2, fp
 8009980:	462f      	mov	r7, r5
 8009982:	46d9      	mov	r9, fp
 8009984:	bfcc      	ite	gt
 8009986:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800998a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800998e:	464b      	mov	r3, r9
 8009990:	4652      	mov	r2, sl
 8009992:	4620      	mov	r0, r4
 8009994:	4639      	mov	r1, r7
 8009996:	f7f6 ff61 	bl	800085c <__aeabi_ddiv>
 800999a:	ec41 0b10 	vmov	d0, r0, r1
 800999e:	b005      	add	sp, #20
 80099a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099a4 <__copybits>:
 80099a4:	3901      	subs	r1, #1
 80099a6:	b570      	push	{r4, r5, r6, lr}
 80099a8:	1149      	asrs	r1, r1, #5
 80099aa:	6914      	ldr	r4, [r2, #16]
 80099ac:	3101      	adds	r1, #1
 80099ae:	f102 0314 	add.w	r3, r2, #20
 80099b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80099b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80099ba:	1f05      	subs	r5, r0, #4
 80099bc:	42a3      	cmp	r3, r4
 80099be:	d30c      	bcc.n	80099da <__copybits+0x36>
 80099c0:	1aa3      	subs	r3, r4, r2
 80099c2:	3b11      	subs	r3, #17
 80099c4:	f023 0303 	bic.w	r3, r3, #3
 80099c8:	3211      	adds	r2, #17
 80099ca:	42a2      	cmp	r2, r4
 80099cc:	bf88      	it	hi
 80099ce:	2300      	movhi	r3, #0
 80099d0:	4418      	add	r0, r3
 80099d2:	2300      	movs	r3, #0
 80099d4:	4288      	cmp	r0, r1
 80099d6:	d305      	bcc.n	80099e4 <__copybits+0x40>
 80099d8:	bd70      	pop	{r4, r5, r6, pc}
 80099da:	f853 6b04 	ldr.w	r6, [r3], #4
 80099de:	f845 6f04 	str.w	r6, [r5, #4]!
 80099e2:	e7eb      	b.n	80099bc <__copybits+0x18>
 80099e4:	f840 3b04 	str.w	r3, [r0], #4
 80099e8:	e7f4      	b.n	80099d4 <__copybits+0x30>

080099ea <__any_on>:
 80099ea:	f100 0214 	add.w	r2, r0, #20
 80099ee:	6900      	ldr	r0, [r0, #16]
 80099f0:	114b      	asrs	r3, r1, #5
 80099f2:	4298      	cmp	r0, r3
 80099f4:	b510      	push	{r4, lr}
 80099f6:	db11      	blt.n	8009a1c <__any_on+0x32>
 80099f8:	dd0a      	ble.n	8009a10 <__any_on+0x26>
 80099fa:	f011 011f 	ands.w	r1, r1, #31
 80099fe:	d007      	beq.n	8009a10 <__any_on+0x26>
 8009a00:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009a04:	fa24 f001 	lsr.w	r0, r4, r1
 8009a08:	fa00 f101 	lsl.w	r1, r0, r1
 8009a0c:	428c      	cmp	r4, r1
 8009a0e:	d10b      	bne.n	8009a28 <__any_on+0x3e>
 8009a10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d803      	bhi.n	8009a20 <__any_on+0x36>
 8009a18:	2000      	movs	r0, #0
 8009a1a:	bd10      	pop	{r4, pc}
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	e7f7      	b.n	8009a10 <__any_on+0x26>
 8009a20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a24:	2900      	cmp	r1, #0
 8009a26:	d0f5      	beq.n	8009a14 <__any_on+0x2a>
 8009a28:	2001      	movs	r0, #1
 8009a2a:	e7f6      	b.n	8009a1a <__any_on+0x30>

08009a2c <sulp>:
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	4604      	mov	r4, r0
 8009a30:	460d      	mov	r5, r1
 8009a32:	ec45 4b10 	vmov	d0, r4, r5
 8009a36:	4616      	mov	r6, r2
 8009a38:	f7ff feba 	bl	80097b0 <__ulp>
 8009a3c:	ec51 0b10 	vmov	r0, r1, d0
 8009a40:	b17e      	cbz	r6, 8009a62 <sulp+0x36>
 8009a42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a46:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	dd09      	ble.n	8009a62 <sulp+0x36>
 8009a4e:	051b      	lsls	r3, r3, #20
 8009a50:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009a54:	2400      	movs	r4, #0
 8009a56:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009a5a:	4622      	mov	r2, r4
 8009a5c:	462b      	mov	r3, r5
 8009a5e:	f7f6 fdd3 	bl	8000608 <__aeabi_dmul>
 8009a62:	ec41 0b10 	vmov	d0, r0, r1
 8009a66:	bd70      	pop	{r4, r5, r6, pc}

08009a68 <_strtod_l>:
 8009a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6c:	b09f      	sub	sp, #124	@ 0x7c
 8009a6e:	460c      	mov	r4, r1
 8009a70:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009a72:	2200      	movs	r2, #0
 8009a74:	921a      	str	r2, [sp, #104]	@ 0x68
 8009a76:	9005      	str	r0, [sp, #20]
 8009a78:	f04f 0a00 	mov.w	sl, #0
 8009a7c:	f04f 0b00 	mov.w	fp, #0
 8009a80:	460a      	mov	r2, r1
 8009a82:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a84:	7811      	ldrb	r1, [r2, #0]
 8009a86:	292b      	cmp	r1, #43	@ 0x2b
 8009a88:	d04a      	beq.n	8009b20 <_strtod_l+0xb8>
 8009a8a:	d838      	bhi.n	8009afe <_strtod_l+0x96>
 8009a8c:	290d      	cmp	r1, #13
 8009a8e:	d832      	bhi.n	8009af6 <_strtod_l+0x8e>
 8009a90:	2908      	cmp	r1, #8
 8009a92:	d832      	bhi.n	8009afa <_strtod_l+0x92>
 8009a94:	2900      	cmp	r1, #0
 8009a96:	d03b      	beq.n	8009b10 <_strtod_l+0xa8>
 8009a98:	2200      	movs	r2, #0
 8009a9a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a9c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009a9e:	782a      	ldrb	r2, [r5, #0]
 8009aa0:	2a30      	cmp	r2, #48	@ 0x30
 8009aa2:	f040 80b2 	bne.w	8009c0a <_strtod_l+0x1a2>
 8009aa6:	786a      	ldrb	r2, [r5, #1]
 8009aa8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009aac:	2a58      	cmp	r2, #88	@ 0x58
 8009aae:	d16e      	bne.n	8009b8e <_strtod_l+0x126>
 8009ab0:	9302      	str	r3, [sp, #8]
 8009ab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ab4:	9301      	str	r3, [sp, #4]
 8009ab6:	ab1a      	add	r3, sp, #104	@ 0x68
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	4a8f      	ldr	r2, [pc, #572]	@ (8009cf8 <_strtod_l+0x290>)
 8009abc:	9805      	ldr	r0, [sp, #20]
 8009abe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009ac0:	a919      	add	r1, sp, #100	@ 0x64
 8009ac2:	f001 faef 	bl	800b0a4 <__gethex>
 8009ac6:	f010 060f 	ands.w	r6, r0, #15
 8009aca:	4604      	mov	r4, r0
 8009acc:	d005      	beq.n	8009ada <_strtod_l+0x72>
 8009ace:	2e06      	cmp	r6, #6
 8009ad0:	d128      	bne.n	8009b24 <_strtod_l+0xbc>
 8009ad2:	3501      	adds	r5, #1
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	9519      	str	r5, [sp, #100]	@ 0x64
 8009ad8:	930e      	str	r3, [sp, #56]	@ 0x38
 8009ada:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f040 858e 	bne.w	800a5fe <_strtod_l+0xb96>
 8009ae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ae4:	b1cb      	cbz	r3, 8009b1a <_strtod_l+0xb2>
 8009ae6:	4652      	mov	r2, sl
 8009ae8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009aec:	ec43 2b10 	vmov	d0, r2, r3
 8009af0:	b01f      	add	sp, #124	@ 0x7c
 8009af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af6:	2920      	cmp	r1, #32
 8009af8:	d1ce      	bne.n	8009a98 <_strtod_l+0x30>
 8009afa:	3201      	adds	r2, #1
 8009afc:	e7c1      	b.n	8009a82 <_strtod_l+0x1a>
 8009afe:	292d      	cmp	r1, #45	@ 0x2d
 8009b00:	d1ca      	bne.n	8009a98 <_strtod_l+0x30>
 8009b02:	2101      	movs	r1, #1
 8009b04:	910e      	str	r1, [sp, #56]	@ 0x38
 8009b06:	1c51      	adds	r1, r2, #1
 8009b08:	9119      	str	r1, [sp, #100]	@ 0x64
 8009b0a:	7852      	ldrb	r2, [r2, #1]
 8009b0c:	2a00      	cmp	r2, #0
 8009b0e:	d1c5      	bne.n	8009a9c <_strtod_l+0x34>
 8009b10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b12:	9419      	str	r4, [sp, #100]	@ 0x64
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f040 8570 	bne.w	800a5fa <_strtod_l+0xb92>
 8009b1a:	4652      	mov	r2, sl
 8009b1c:	465b      	mov	r3, fp
 8009b1e:	e7e5      	b.n	8009aec <_strtod_l+0x84>
 8009b20:	2100      	movs	r1, #0
 8009b22:	e7ef      	b.n	8009b04 <_strtod_l+0x9c>
 8009b24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b26:	b13a      	cbz	r2, 8009b38 <_strtod_l+0xd0>
 8009b28:	2135      	movs	r1, #53	@ 0x35
 8009b2a:	a81c      	add	r0, sp, #112	@ 0x70
 8009b2c:	f7ff ff3a 	bl	80099a4 <__copybits>
 8009b30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b32:	9805      	ldr	r0, [sp, #20]
 8009b34:	f7ff fb10 	bl	8009158 <_Bfree>
 8009b38:	3e01      	subs	r6, #1
 8009b3a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009b3c:	2e04      	cmp	r6, #4
 8009b3e:	d806      	bhi.n	8009b4e <_strtod_l+0xe6>
 8009b40:	e8df f006 	tbb	[pc, r6]
 8009b44:	201d0314 	.word	0x201d0314
 8009b48:	14          	.byte	0x14
 8009b49:	00          	.byte	0x00
 8009b4a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009b4e:	05e1      	lsls	r1, r4, #23
 8009b50:	bf48      	it	mi
 8009b52:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009b56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b5a:	0d1b      	lsrs	r3, r3, #20
 8009b5c:	051b      	lsls	r3, r3, #20
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1bb      	bne.n	8009ada <_strtod_l+0x72>
 8009b62:	f7fe fb2d 	bl	80081c0 <__errno>
 8009b66:	2322      	movs	r3, #34	@ 0x22
 8009b68:	6003      	str	r3, [r0, #0]
 8009b6a:	e7b6      	b.n	8009ada <_strtod_l+0x72>
 8009b6c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009b70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009b74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009b78:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009b7c:	e7e7      	b.n	8009b4e <_strtod_l+0xe6>
 8009b7e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009d00 <_strtod_l+0x298>
 8009b82:	e7e4      	b.n	8009b4e <_strtod_l+0xe6>
 8009b84:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009b88:	f04f 3aff 	mov.w	sl, #4294967295
 8009b8c:	e7df      	b.n	8009b4e <_strtod_l+0xe6>
 8009b8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b90:	1c5a      	adds	r2, r3, #1
 8009b92:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b94:	785b      	ldrb	r3, [r3, #1]
 8009b96:	2b30      	cmp	r3, #48	@ 0x30
 8009b98:	d0f9      	beq.n	8009b8e <_strtod_l+0x126>
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d09d      	beq.n	8009ada <_strtod_l+0x72>
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	2700      	movs	r7, #0
 8009ba2:	9308      	str	r3, [sp, #32]
 8009ba4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ba6:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ba8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009baa:	46b9      	mov	r9, r7
 8009bac:	220a      	movs	r2, #10
 8009bae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009bb0:	7805      	ldrb	r5, [r0, #0]
 8009bb2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009bb6:	b2d9      	uxtb	r1, r3
 8009bb8:	2909      	cmp	r1, #9
 8009bba:	d928      	bls.n	8009c0e <_strtod_l+0x1a6>
 8009bbc:	494f      	ldr	r1, [pc, #316]	@ (8009cfc <_strtod_l+0x294>)
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f001 f97a 	bl	800aeb8 <strncmp>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d032      	beq.n	8009c2e <_strtod_l+0x1c6>
 8009bc8:	2000      	movs	r0, #0
 8009bca:	462a      	mov	r2, r5
 8009bcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8009bce:	464d      	mov	r5, r9
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2a65      	cmp	r2, #101	@ 0x65
 8009bd4:	d001      	beq.n	8009bda <_strtod_l+0x172>
 8009bd6:	2a45      	cmp	r2, #69	@ 0x45
 8009bd8:	d114      	bne.n	8009c04 <_strtod_l+0x19c>
 8009bda:	b91d      	cbnz	r5, 8009be4 <_strtod_l+0x17c>
 8009bdc:	9a08      	ldr	r2, [sp, #32]
 8009bde:	4302      	orrs	r2, r0
 8009be0:	d096      	beq.n	8009b10 <_strtod_l+0xa8>
 8009be2:	2500      	movs	r5, #0
 8009be4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009be6:	1c62      	adds	r2, r4, #1
 8009be8:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bea:	7862      	ldrb	r2, [r4, #1]
 8009bec:	2a2b      	cmp	r2, #43	@ 0x2b
 8009bee:	d07a      	beq.n	8009ce6 <_strtod_l+0x27e>
 8009bf0:	2a2d      	cmp	r2, #45	@ 0x2d
 8009bf2:	d07e      	beq.n	8009cf2 <_strtod_l+0x28a>
 8009bf4:	f04f 0c00 	mov.w	ip, #0
 8009bf8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009bfc:	2909      	cmp	r1, #9
 8009bfe:	f240 8085 	bls.w	8009d0c <_strtod_l+0x2a4>
 8009c02:	9419      	str	r4, [sp, #100]	@ 0x64
 8009c04:	f04f 0800 	mov.w	r8, #0
 8009c08:	e0a5      	b.n	8009d56 <_strtod_l+0x2ee>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e7c8      	b.n	8009ba0 <_strtod_l+0x138>
 8009c0e:	f1b9 0f08 	cmp.w	r9, #8
 8009c12:	bfd8      	it	le
 8009c14:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009c16:	f100 0001 	add.w	r0, r0, #1
 8009c1a:	bfda      	itte	le
 8009c1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c20:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009c22:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009c26:	f109 0901 	add.w	r9, r9, #1
 8009c2a:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c2c:	e7bf      	b.n	8009bae <_strtod_l+0x146>
 8009c2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c30:	1c5a      	adds	r2, r3, #1
 8009c32:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c34:	785a      	ldrb	r2, [r3, #1]
 8009c36:	f1b9 0f00 	cmp.w	r9, #0
 8009c3a:	d03b      	beq.n	8009cb4 <_strtod_l+0x24c>
 8009c3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c3e:	464d      	mov	r5, r9
 8009c40:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009c44:	2b09      	cmp	r3, #9
 8009c46:	d912      	bls.n	8009c6e <_strtod_l+0x206>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e7c2      	b.n	8009bd2 <_strtod_l+0x16a>
 8009c4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c4e:	1c5a      	adds	r2, r3, #1
 8009c50:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c52:	785a      	ldrb	r2, [r3, #1]
 8009c54:	3001      	adds	r0, #1
 8009c56:	2a30      	cmp	r2, #48	@ 0x30
 8009c58:	d0f8      	beq.n	8009c4c <_strtod_l+0x1e4>
 8009c5a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009c5e:	2b08      	cmp	r3, #8
 8009c60:	f200 84d2 	bhi.w	800a608 <_strtod_l+0xba0>
 8009c64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c66:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c68:	2000      	movs	r0, #0
 8009c6a:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c6c:	4605      	mov	r5, r0
 8009c6e:	3a30      	subs	r2, #48	@ 0x30
 8009c70:	f100 0301 	add.w	r3, r0, #1
 8009c74:	d018      	beq.n	8009ca8 <_strtod_l+0x240>
 8009c76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c78:	4419      	add	r1, r3
 8009c7a:	910a      	str	r1, [sp, #40]	@ 0x28
 8009c7c:	462e      	mov	r6, r5
 8009c7e:	f04f 0e0a 	mov.w	lr, #10
 8009c82:	1c71      	adds	r1, r6, #1
 8009c84:	eba1 0c05 	sub.w	ip, r1, r5
 8009c88:	4563      	cmp	r3, ip
 8009c8a:	dc15      	bgt.n	8009cb8 <_strtod_l+0x250>
 8009c8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009c90:	182b      	adds	r3, r5, r0
 8009c92:	2b08      	cmp	r3, #8
 8009c94:	f105 0501 	add.w	r5, r5, #1
 8009c98:	4405      	add	r5, r0
 8009c9a:	dc1a      	bgt.n	8009cd2 <_strtod_l+0x26a>
 8009c9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c9e:	230a      	movs	r3, #10
 8009ca0:	fb03 2301 	mla	r3, r3, r1, r2
 8009ca4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009caa:	1c51      	adds	r1, r2, #1
 8009cac:	9119      	str	r1, [sp, #100]	@ 0x64
 8009cae:	7852      	ldrb	r2, [r2, #1]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	e7c5      	b.n	8009c40 <_strtod_l+0x1d8>
 8009cb4:	4648      	mov	r0, r9
 8009cb6:	e7ce      	b.n	8009c56 <_strtod_l+0x1ee>
 8009cb8:	2e08      	cmp	r6, #8
 8009cba:	dc05      	bgt.n	8009cc8 <_strtod_l+0x260>
 8009cbc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009cbe:	fb0e f606 	mul.w	r6, lr, r6
 8009cc2:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009cc4:	460e      	mov	r6, r1
 8009cc6:	e7dc      	b.n	8009c82 <_strtod_l+0x21a>
 8009cc8:	2910      	cmp	r1, #16
 8009cca:	bfd8      	it	le
 8009ccc:	fb0e f707 	mulle.w	r7, lr, r7
 8009cd0:	e7f8      	b.n	8009cc4 <_strtod_l+0x25c>
 8009cd2:	2b0f      	cmp	r3, #15
 8009cd4:	bfdc      	itt	le
 8009cd6:	230a      	movle	r3, #10
 8009cd8:	fb03 2707 	mlale	r7, r3, r7, r2
 8009cdc:	e7e3      	b.n	8009ca6 <_strtod_l+0x23e>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e77a      	b.n	8009bdc <_strtod_l+0x174>
 8009ce6:	f04f 0c00 	mov.w	ip, #0
 8009cea:	1ca2      	adds	r2, r4, #2
 8009cec:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cee:	78a2      	ldrb	r2, [r4, #2]
 8009cf0:	e782      	b.n	8009bf8 <_strtod_l+0x190>
 8009cf2:	f04f 0c01 	mov.w	ip, #1
 8009cf6:	e7f8      	b.n	8009cea <_strtod_l+0x282>
 8009cf8:	0800bbec 	.word	0x0800bbec
 8009cfc:	0800ba1f 	.word	0x0800ba1f
 8009d00:	7ff00000 	.word	0x7ff00000
 8009d04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d06:	1c51      	adds	r1, r2, #1
 8009d08:	9119      	str	r1, [sp, #100]	@ 0x64
 8009d0a:	7852      	ldrb	r2, [r2, #1]
 8009d0c:	2a30      	cmp	r2, #48	@ 0x30
 8009d0e:	d0f9      	beq.n	8009d04 <_strtod_l+0x29c>
 8009d10:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009d14:	2908      	cmp	r1, #8
 8009d16:	f63f af75 	bhi.w	8009c04 <_strtod_l+0x19c>
 8009d1a:	3a30      	subs	r2, #48	@ 0x30
 8009d1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d1e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d20:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009d22:	f04f 080a 	mov.w	r8, #10
 8009d26:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d28:	1c56      	adds	r6, r2, #1
 8009d2a:	9619      	str	r6, [sp, #100]	@ 0x64
 8009d2c:	7852      	ldrb	r2, [r2, #1]
 8009d2e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009d32:	f1be 0f09 	cmp.w	lr, #9
 8009d36:	d939      	bls.n	8009dac <_strtod_l+0x344>
 8009d38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009d3a:	1a76      	subs	r6, r6, r1
 8009d3c:	2e08      	cmp	r6, #8
 8009d3e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009d42:	dc03      	bgt.n	8009d4c <_strtod_l+0x2e4>
 8009d44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d46:	4588      	cmp	r8, r1
 8009d48:	bfa8      	it	ge
 8009d4a:	4688      	movge	r8, r1
 8009d4c:	f1bc 0f00 	cmp.w	ip, #0
 8009d50:	d001      	beq.n	8009d56 <_strtod_l+0x2ee>
 8009d52:	f1c8 0800 	rsb	r8, r8, #0
 8009d56:	2d00      	cmp	r5, #0
 8009d58:	d14e      	bne.n	8009df8 <_strtod_l+0x390>
 8009d5a:	9908      	ldr	r1, [sp, #32]
 8009d5c:	4308      	orrs	r0, r1
 8009d5e:	f47f aebc 	bne.w	8009ada <_strtod_l+0x72>
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f47f aed4 	bne.w	8009b10 <_strtod_l+0xa8>
 8009d68:	2a69      	cmp	r2, #105	@ 0x69
 8009d6a:	d028      	beq.n	8009dbe <_strtod_l+0x356>
 8009d6c:	dc25      	bgt.n	8009dba <_strtod_l+0x352>
 8009d6e:	2a49      	cmp	r2, #73	@ 0x49
 8009d70:	d025      	beq.n	8009dbe <_strtod_l+0x356>
 8009d72:	2a4e      	cmp	r2, #78	@ 0x4e
 8009d74:	f47f aecc 	bne.w	8009b10 <_strtod_l+0xa8>
 8009d78:	499a      	ldr	r1, [pc, #616]	@ (8009fe4 <_strtod_l+0x57c>)
 8009d7a:	a819      	add	r0, sp, #100	@ 0x64
 8009d7c:	f001 fbb4 	bl	800b4e8 <__match>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	f43f aec5 	beq.w	8009b10 <_strtod_l+0xa8>
 8009d86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	2b28      	cmp	r3, #40	@ 0x28
 8009d8c:	d12e      	bne.n	8009dec <_strtod_l+0x384>
 8009d8e:	4996      	ldr	r1, [pc, #600]	@ (8009fe8 <_strtod_l+0x580>)
 8009d90:	aa1c      	add	r2, sp, #112	@ 0x70
 8009d92:	a819      	add	r0, sp, #100	@ 0x64
 8009d94:	f001 fbbc 	bl	800b510 <__hexnan>
 8009d98:	2805      	cmp	r0, #5
 8009d9a:	d127      	bne.n	8009dec <_strtod_l+0x384>
 8009d9c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d9e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009da2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009da6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009daa:	e696      	b.n	8009ada <_strtod_l+0x72>
 8009dac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009dae:	fb08 2101 	mla	r1, r8, r1, r2
 8009db2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009db6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009db8:	e7b5      	b.n	8009d26 <_strtod_l+0x2be>
 8009dba:	2a6e      	cmp	r2, #110	@ 0x6e
 8009dbc:	e7da      	b.n	8009d74 <_strtod_l+0x30c>
 8009dbe:	498b      	ldr	r1, [pc, #556]	@ (8009fec <_strtod_l+0x584>)
 8009dc0:	a819      	add	r0, sp, #100	@ 0x64
 8009dc2:	f001 fb91 	bl	800b4e8 <__match>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	f43f aea2 	beq.w	8009b10 <_strtod_l+0xa8>
 8009dcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dce:	4988      	ldr	r1, [pc, #544]	@ (8009ff0 <_strtod_l+0x588>)
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	a819      	add	r0, sp, #100	@ 0x64
 8009dd4:	9319      	str	r3, [sp, #100]	@ 0x64
 8009dd6:	f001 fb87 	bl	800b4e8 <__match>
 8009dda:	b910      	cbnz	r0, 8009de2 <_strtod_l+0x37a>
 8009ddc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dde:	3301      	adds	r3, #1
 8009de0:	9319      	str	r3, [sp, #100]	@ 0x64
 8009de2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a000 <_strtod_l+0x598>
 8009de6:	f04f 0a00 	mov.w	sl, #0
 8009dea:	e676      	b.n	8009ada <_strtod_l+0x72>
 8009dec:	4881      	ldr	r0, [pc, #516]	@ (8009ff4 <_strtod_l+0x58c>)
 8009dee:	f001 f8b7 	bl	800af60 <nan>
 8009df2:	ec5b ab10 	vmov	sl, fp, d0
 8009df6:	e670      	b.n	8009ada <_strtod_l+0x72>
 8009df8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dfa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009dfc:	eba8 0303 	sub.w	r3, r8, r3
 8009e00:	f1b9 0f00 	cmp.w	r9, #0
 8009e04:	bf08      	it	eq
 8009e06:	46a9      	moveq	r9, r5
 8009e08:	2d10      	cmp	r5, #16
 8009e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e0c:	462c      	mov	r4, r5
 8009e0e:	bfa8      	it	ge
 8009e10:	2410      	movge	r4, #16
 8009e12:	f7f6 fb7f 	bl	8000514 <__aeabi_ui2d>
 8009e16:	2d09      	cmp	r5, #9
 8009e18:	4682      	mov	sl, r0
 8009e1a:	468b      	mov	fp, r1
 8009e1c:	dc13      	bgt.n	8009e46 <_strtod_l+0x3de>
 8009e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f43f ae5a 	beq.w	8009ada <_strtod_l+0x72>
 8009e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e28:	dd78      	ble.n	8009f1c <_strtod_l+0x4b4>
 8009e2a:	2b16      	cmp	r3, #22
 8009e2c:	dc5f      	bgt.n	8009eee <_strtod_l+0x486>
 8009e2e:	4972      	ldr	r1, [pc, #456]	@ (8009ff8 <_strtod_l+0x590>)
 8009e30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e38:	4652      	mov	r2, sl
 8009e3a:	465b      	mov	r3, fp
 8009e3c:	f7f6 fbe4 	bl	8000608 <__aeabi_dmul>
 8009e40:	4682      	mov	sl, r0
 8009e42:	468b      	mov	fp, r1
 8009e44:	e649      	b.n	8009ada <_strtod_l+0x72>
 8009e46:	4b6c      	ldr	r3, [pc, #432]	@ (8009ff8 <_strtod_l+0x590>)
 8009e48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e4c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009e50:	f7f6 fbda 	bl	8000608 <__aeabi_dmul>
 8009e54:	4682      	mov	sl, r0
 8009e56:	4638      	mov	r0, r7
 8009e58:	468b      	mov	fp, r1
 8009e5a:	f7f6 fb5b 	bl	8000514 <__aeabi_ui2d>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	4650      	mov	r0, sl
 8009e64:	4659      	mov	r1, fp
 8009e66:	f7f6 fa19 	bl	800029c <__adddf3>
 8009e6a:	2d0f      	cmp	r5, #15
 8009e6c:	4682      	mov	sl, r0
 8009e6e:	468b      	mov	fp, r1
 8009e70:	ddd5      	ble.n	8009e1e <_strtod_l+0x3b6>
 8009e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e74:	1b2c      	subs	r4, r5, r4
 8009e76:	441c      	add	r4, r3
 8009e78:	2c00      	cmp	r4, #0
 8009e7a:	f340 8093 	ble.w	8009fa4 <_strtod_l+0x53c>
 8009e7e:	f014 030f 	ands.w	r3, r4, #15
 8009e82:	d00a      	beq.n	8009e9a <_strtod_l+0x432>
 8009e84:	495c      	ldr	r1, [pc, #368]	@ (8009ff8 <_strtod_l+0x590>)
 8009e86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e8a:	4652      	mov	r2, sl
 8009e8c:	465b      	mov	r3, fp
 8009e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e92:	f7f6 fbb9 	bl	8000608 <__aeabi_dmul>
 8009e96:	4682      	mov	sl, r0
 8009e98:	468b      	mov	fp, r1
 8009e9a:	f034 040f 	bics.w	r4, r4, #15
 8009e9e:	d073      	beq.n	8009f88 <_strtod_l+0x520>
 8009ea0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009ea4:	dd49      	ble.n	8009f3a <_strtod_l+0x4d2>
 8009ea6:	2400      	movs	r4, #0
 8009ea8:	46a0      	mov	r8, r4
 8009eaa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009eac:	46a1      	mov	r9, r4
 8009eae:	9a05      	ldr	r2, [sp, #20]
 8009eb0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a000 <_strtod_l+0x598>
 8009eb4:	2322      	movs	r3, #34	@ 0x22
 8009eb6:	6013      	str	r3, [r2, #0]
 8009eb8:	f04f 0a00 	mov.w	sl, #0
 8009ebc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f43f ae0b 	beq.w	8009ada <_strtod_l+0x72>
 8009ec4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ec6:	9805      	ldr	r0, [sp, #20]
 8009ec8:	f7ff f946 	bl	8009158 <_Bfree>
 8009ecc:	9805      	ldr	r0, [sp, #20]
 8009ece:	4649      	mov	r1, r9
 8009ed0:	f7ff f942 	bl	8009158 <_Bfree>
 8009ed4:	9805      	ldr	r0, [sp, #20]
 8009ed6:	4641      	mov	r1, r8
 8009ed8:	f7ff f93e 	bl	8009158 <_Bfree>
 8009edc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ede:	9805      	ldr	r0, [sp, #20]
 8009ee0:	f7ff f93a 	bl	8009158 <_Bfree>
 8009ee4:	9805      	ldr	r0, [sp, #20]
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	f7ff f936 	bl	8009158 <_Bfree>
 8009eec:	e5f5      	b.n	8009ada <_strtod_l+0x72>
 8009eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ef0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	dbbc      	blt.n	8009e72 <_strtod_l+0x40a>
 8009ef8:	4c3f      	ldr	r4, [pc, #252]	@ (8009ff8 <_strtod_l+0x590>)
 8009efa:	f1c5 050f 	rsb	r5, r5, #15
 8009efe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009f02:	4652      	mov	r2, sl
 8009f04:	465b      	mov	r3, fp
 8009f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f0a:	f7f6 fb7d 	bl	8000608 <__aeabi_dmul>
 8009f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f10:	1b5d      	subs	r5, r3, r5
 8009f12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009f16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009f1a:	e78f      	b.n	8009e3c <_strtod_l+0x3d4>
 8009f1c:	3316      	adds	r3, #22
 8009f1e:	dba8      	blt.n	8009e72 <_strtod_l+0x40a>
 8009f20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f22:	eba3 0808 	sub.w	r8, r3, r8
 8009f26:	4b34      	ldr	r3, [pc, #208]	@ (8009ff8 <_strtod_l+0x590>)
 8009f28:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009f2c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009f30:	4650      	mov	r0, sl
 8009f32:	4659      	mov	r1, fp
 8009f34:	f7f6 fc92 	bl	800085c <__aeabi_ddiv>
 8009f38:	e782      	b.n	8009e40 <_strtod_l+0x3d8>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	4f2f      	ldr	r7, [pc, #188]	@ (8009ffc <_strtod_l+0x594>)
 8009f3e:	1124      	asrs	r4, r4, #4
 8009f40:	4650      	mov	r0, sl
 8009f42:	4659      	mov	r1, fp
 8009f44:	461e      	mov	r6, r3
 8009f46:	2c01      	cmp	r4, #1
 8009f48:	dc21      	bgt.n	8009f8e <_strtod_l+0x526>
 8009f4a:	b10b      	cbz	r3, 8009f50 <_strtod_l+0x4e8>
 8009f4c:	4682      	mov	sl, r0
 8009f4e:	468b      	mov	fp, r1
 8009f50:	492a      	ldr	r1, [pc, #168]	@ (8009ffc <_strtod_l+0x594>)
 8009f52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009f56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009f5a:	4652      	mov	r2, sl
 8009f5c:	465b      	mov	r3, fp
 8009f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f62:	f7f6 fb51 	bl	8000608 <__aeabi_dmul>
 8009f66:	4b26      	ldr	r3, [pc, #152]	@ (800a000 <_strtod_l+0x598>)
 8009f68:	460a      	mov	r2, r1
 8009f6a:	400b      	ands	r3, r1
 8009f6c:	4925      	ldr	r1, [pc, #148]	@ (800a004 <_strtod_l+0x59c>)
 8009f6e:	428b      	cmp	r3, r1
 8009f70:	4682      	mov	sl, r0
 8009f72:	d898      	bhi.n	8009ea6 <_strtod_l+0x43e>
 8009f74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009f78:	428b      	cmp	r3, r1
 8009f7a:	bf86      	itte	hi
 8009f7c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a008 <_strtod_l+0x5a0>
 8009f80:	f04f 3aff 	movhi.w	sl, #4294967295
 8009f84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009f88:	2300      	movs	r3, #0
 8009f8a:	9308      	str	r3, [sp, #32]
 8009f8c:	e076      	b.n	800a07c <_strtod_l+0x614>
 8009f8e:	07e2      	lsls	r2, r4, #31
 8009f90:	d504      	bpl.n	8009f9c <_strtod_l+0x534>
 8009f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f96:	f7f6 fb37 	bl	8000608 <__aeabi_dmul>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	3601      	adds	r6, #1
 8009f9e:	1064      	asrs	r4, r4, #1
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	e7d0      	b.n	8009f46 <_strtod_l+0x4de>
 8009fa4:	d0f0      	beq.n	8009f88 <_strtod_l+0x520>
 8009fa6:	4264      	negs	r4, r4
 8009fa8:	f014 020f 	ands.w	r2, r4, #15
 8009fac:	d00a      	beq.n	8009fc4 <_strtod_l+0x55c>
 8009fae:	4b12      	ldr	r3, [pc, #72]	@ (8009ff8 <_strtod_l+0x590>)
 8009fb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fb4:	4650      	mov	r0, sl
 8009fb6:	4659      	mov	r1, fp
 8009fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbc:	f7f6 fc4e 	bl	800085c <__aeabi_ddiv>
 8009fc0:	4682      	mov	sl, r0
 8009fc2:	468b      	mov	fp, r1
 8009fc4:	1124      	asrs	r4, r4, #4
 8009fc6:	d0df      	beq.n	8009f88 <_strtod_l+0x520>
 8009fc8:	2c1f      	cmp	r4, #31
 8009fca:	dd1f      	ble.n	800a00c <_strtod_l+0x5a4>
 8009fcc:	2400      	movs	r4, #0
 8009fce:	46a0      	mov	r8, r4
 8009fd0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009fd2:	46a1      	mov	r9, r4
 8009fd4:	9a05      	ldr	r2, [sp, #20]
 8009fd6:	2322      	movs	r3, #34	@ 0x22
 8009fd8:	f04f 0a00 	mov.w	sl, #0
 8009fdc:	f04f 0b00 	mov.w	fp, #0
 8009fe0:	6013      	str	r3, [r2, #0]
 8009fe2:	e76b      	b.n	8009ebc <_strtod_l+0x454>
 8009fe4:	0800b90d 	.word	0x0800b90d
 8009fe8:	0800bbd8 	.word	0x0800bbd8
 8009fec:	0800b905 	.word	0x0800b905
 8009ff0:	0800b93c 	.word	0x0800b93c
 8009ff4:	0800ba75 	.word	0x0800ba75
 8009ff8:	0800bb10 	.word	0x0800bb10
 8009ffc:	0800bae8 	.word	0x0800bae8
 800a000:	7ff00000 	.word	0x7ff00000
 800a004:	7ca00000 	.word	0x7ca00000
 800a008:	7fefffff 	.word	0x7fefffff
 800a00c:	f014 0310 	ands.w	r3, r4, #16
 800a010:	bf18      	it	ne
 800a012:	236a      	movne	r3, #106	@ 0x6a
 800a014:	4ea9      	ldr	r6, [pc, #676]	@ (800a2bc <_strtod_l+0x854>)
 800a016:	9308      	str	r3, [sp, #32]
 800a018:	4650      	mov	r0, sl
 800a01a:	4659      	mov	r1, fp
 800a01c:	2300      	movs	r3, #0
 800a01e:	07e7      	lsls	r7, r4, #31
 800a020:	d504      	bpl.n	800a02c <_strtod_l+0x5c4>
 800a022:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a026:	f7f6 faef 	bl	8000608 <__aeabi_dmul>
 800a02a:	2301      	movs	r3, #1
 800a02c:	1064      	asrs	r4, r4, #1
 800a02e:	f106 0608 	add.w	r6, r6, #8
 800a032:	d1f4      	bne.n	800a01e <_strtod_l+0x5b6>
 800a034:	b10b      	cbz	r3, 800a03a <_strtod_l+0x5d2>
 800a036:	4682      	mov	sl, r0
 800a038:	468b      	mov	fp, r1
 800a03a:	9b08      	ldr	r3, [sp, #32]
 800a03c:	b1b3      	cbz	r3, 800a06c <_strtod_l+0x604>
 800a03e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a042:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a046:	2b00      	cmp	r3, #0
 800a048:	4659      	mov	r1, fp
 800a04a:	dd0f      	ble.n	800a06c <_strtod_l+0x604>
 800a04c:	2b1f      	cmp	r3, #31
 800a04e:	dd56      	ble.n	800a0fe <_strtod_l+0x696>
 800a050:	2b34      	cmp	r3, #52	@ 0x34
 800a052:	bfde      	ittt	le
 800a054:	f04f 33ff 	movle.w	r3, #4294967295
 800a058:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a05c:	4093      	lslle	r3, r2
 800a05e:	f04f 0a00 	mov.w	sl, #0
 800a062:	bfcc      	ite	gt
 800a064:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a068:	ea03 0b01 	andle.w	fp, r3, r1
 800a06c:	2200      	movs	r2, #0
 800a06e:	2300      	movs	r3, #0
 800a070:	4650      	mov	r0, sl
 800a072:	4659      	mov	r1, fp
 800a074:	f7f6 fd30 	bl	8000ad8 <__aeabi_dcmpeq>
 800a078:	2800      	cmp	r0, #0
 800a07a:	d1a7      	bne.n	8009fcc <_strtod_l+0x564>
 800a07c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a082:	9805      	ldr	r0, [sp, #20]
 800a084:	462b      	mov	r3, r5
 800a086:	464a      	mov	r2, r9
 800a088:	f7ff f8ce 	bl	8009228 <__s2b>
 800a08c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a08e:	2800      	cmp	r0, #0
 800a090:	f43f af09 	beq.w	8009ea6 <_strtod_l+0x43e>
 800a094:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a096:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a098:	2a00      	cmp	r2, #0
 800a09a:	eba3 0308 	sub.w	r3, r3, r8
 800a09e:	bfa8      	it	ge
 800a0a0:	2300      	movge	r3, #0
 800a0a2:	9312      	str	r3, [sp, #72]	@ 0x48
 800a0a4:	2400      	movs	r4, #0
 800a0a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a0aa:	9316      	str	r3, [sp, #88]	@ 0x58
 800a0ac:	46a0      	mov	r8, r4
 800a0ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0b0:	9805      	ldr	r0, [sp, #20]
 800a0b2:	6859      	ldr	r1, [r3, #4]
 800a0b4:	f7ff f810 	bl	80090d8 <_Balloc>
 800a0b8:	4681      	mov	r9, r0
 800a0ba:	2800      	cmp	r0, #0
 800a0bc:	f43f aef7 	beq.w	8009eae <_strtod_l+0x446>
 800a0c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0c2:	691a      	ldr	r2, [r3, #16]
 800a0c4:	3202      	adds	r2, #2
 800a0c6:	f103 010c 	add.w	r1, r3, #12
 800a0ca:	0092      	lsls	r2, r2, #2
 800a0cc:	300c      	adds	r0, #12
 800a0ce:	f000 ff37 	bl	800af40 <memcpy>
 800a0d2:	ec4b ab10 	vmov	d0, sl, fp
 800a0d6:	9805      	ldr	r0, [sp, #20]
 800a0d8:	aa1c      	add	r2, sp, #112	@ 0x70
 800a0da:	a91b      	add	r1, sp, #108	@ 0x6c
 800a0dc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a0e0:	f7ff fbd6 	bl	8009890 <__d2b>
 800a0e4:	901a      	str	r0, [sp, #104]	@ 0x68
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	f43f aee1 	beq.w	8009eae <_strtod_l+0x446>
 800a0ec:	9805      	ldr	r0, [sp, #20]
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	f7ff f930 	bl	8009354 <__i2b>
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	b948      	cbnz	r0, 800a10c <_strtod_l+0x6a4>
 800a0f8:	f04f 0800 	mov.w	r8, #0
 800a0fc:	e6d7      	b.n	8009eae <_strtod_l+0x446>
 800a0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a102:	fa02 f303 	lsl.w	r3, r2, r3
 800a106:	ea03 0a0a 	and.w	sl, r3, sl
 800a10a:	e7af      	b.n	800a06c <_strtod_l+0x604>
 800a10c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a10e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a110:	2d00      	cmp	r5, #0
 800a112:	bfab      	itete	ge
 800a114:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a116:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a118:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a11a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a11c:	bfac      	ite	ge
 800a11e:	18ef      	addge	r7, r5, r3
 800a120:	1b5e      	sublt	r6, r3, r5
 800a122:	9b08      	ldr	r3, [sp, #32]
 800a124:	1aed      	subs	r5, r5, r3
 800a126:	4415      	add	r5, r2
 800a128:	4b65      	ldr	r3, [pc, #404]	@ (800a2c0 <_strtod_l+0x858>)
 800a12a:	3d01      	subs	r5, #1
 800a12c:	429d      	cmp	r5, r3
 800a12e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a132:	da50      	bge.n	800a1d6 <_strtod_l+0x76e>
 800a134:	1b5b      	subs	r3, r3, r5
 800a136:	2b1f      	cmp	r3, #31
 800a138:	eba2 0203 	sub.w	r2, r2, r3
 800a13c:	f04f 0101 	mov.w	r1, #1
 800a140:	dc3d      	bgt.n	800a1be <_strtod_l+0x756>
 800a142:	fa01 f303 	lsl.w	r3, r1, r3
 800a146:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a148:	2300      	movs	r3, #0
 800a14a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a14c:	18bd      	adds	r5, r7, r2
 800a14e:	9b08      	ldr	r3, [sp, #32]
 800a150:	42af      	cmp	r7, r5
 800a152:	4416      	add	r6, r2
 800a154:	441e      	add	r6, r3
 800a156:	463b      	mov	r3, r7
 800a158:	bfa8      	it	ge
 800a15a:	462b      	movge	r3, r5
 800a15c:	42b3      	cmp	r3, r6
 800a15e:	bfa8      	it	ge
 800a160:	4633      	movge	r3, r6
 800a162:	2b00      	cmp	r3, #0
 800a164:	bfc2      	ittt	gt
 800a166:	1aed      	subgt	r5, r5, r3
 800a168:	1af6      	subgt	r6, r6, r3
 800a16a:	1aff      	subgt	r7, r7, r3
 800a16c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a16e:	2b00      	cmp	r3, #0
 800a170:	dd16      	ble.n	800a1a0 <_strtod_l+0x738>
 800a172:	4641      	mov	r1, r8
 800a174:	9805      	ldr	r0, [sp, #20]
 800a176:	461a      	mov	r2, r3
 800a178:	f7ff f9a4 	bl	80094c4 <__pow5mult>
 800a17c:	4680      	mov	r8, r0
 800a17e:	2800      	cmp	r0, #0
 800a180:	d0ba      	beq.n	800a0f8 <_strtod_l+0x690>
 800a182:	4601      	mov	r1, r0
 800a184:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a186:	9805      	ldr	r0, [sp, #20]
 800a188:	f7ff f8fa 	bl	8009380 <__multiply>
 800a18c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a18e:	2800      	cmp	r0, #0
 800a190:	f43f ae8d 	beq.w	8009eae <_strtod_l+0x446>
 800a194:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a196:	9805      	ldr	r0, [sp, #20]
 800a198:	f7fe ffde 	bl	8009158 <_Bfree>
 800a19c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a19e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1a0:	2d00      	cmp	r5, #0
 800a1a2:	dc1d      	bgt.n	800a1e0 <_strtod_l+0x778>
 800a1a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	dd23      	ble.n	800a1f2 <_strtod_l+0x78a>
 800a1aa:	4649      	mov	r1, r9
 800a1ac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a1ae:	9805      	ldr	r0, [sp, #20]
 800a1b0:	f7ff f988 	bl	80094c4 <__pow5mult>
 800a1b4:	4681      	mov	r9, r0
 800a1b6:	b9e0      	cbnz	r0, 800a1f2 <_strtod_l+0x78a>
 800a1b8:	f04f 0900 	mov.w	r9, #0
 800a1bc:	e677      	b.n	8009eae <_strtod_l+0x446>
 800a1be:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a1c2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a1c6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a1ca:	35e2      	adds	r5, #226	@ 0xe2
 800a1cc:	fa01 f305 	lsl.w	r3, r1, r5
 800a1d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1d2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a1d4:	e7ba      	b.n	800a14c <_strtod_l+0x6e4>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1da:	2301      	movs	r3, #1
 800a1dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1de:	e7b5      	b.n	800a14c <_strtod_l+0x6e4>
 800a1e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1e2:	9805      	ldr	r0, [sp, #20]
 800a1e4:	462a      	mov	r2, r5
 800a1e6:	f7ff f9c7 	bl	8009578 <__lshift>
 800a1ea:	901a      	str	r0, [sp, #104]	@ 0x68
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d1d9      	bne.n	800a1a4 <_strtod_l+0x73c>
 800a1f0:	e65d      	b.n	8009eae <_strtod_l+0x446>
 800a1f2:	2e00      	cmp	r6, #0
 800a1f4:	dd07      	ble.n	800a206 <_strtod_l+0x79e>
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	9805      	ldr	r0, [sp, #20]
 800a1fa:	4632      	mov	r2, r6
 800a1fc:	f7ff f9bc 	bl	8009578 <__lshift>
 800a200:	4681      	mov	r9, r0
 800a202:	2800      	cmp	r0, #0
 800a204:	d0d8      	beq.n	800a1b8 <_strtod_l+0x750>
 800a206:	2f00      	cmp	r7, #0
 800a208:	dd08      	ble.n	800a21c <_strtod_l+0x7b4>
 800a20a:	4641      	mov	r1, r8
 800a20c:	9805      	ldr	r0, [sp, #20]
 800a20e:	463a      	mov	r2, r7
 800a210:	f7ff f9b2 	bl	8009578 <__lshift>
 800a214:	4680      	mov	r8, r0
 800a216:	2800      	cmp	r0, #0
 800a218:	f43f ae49 	beq.w	8009eae <_strtod_l+0x446>
 800a21c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a21e:	9805      	ldr	r0, [sp, #20]
 800a220:	464a      	mov	r2, r9
 800a222:	f7ff fa31 	bl	8009688 <__mdiff>
 800a226:	4604      	mov	r4, r0
 800a228:	2800      	cmp	r0, #0
 800a22a:	f43f ae40 	beq.w	8009eae <_strtod_l+0x446>
 800a22e:	68c3      	ldr	r3, [r0, #12]
 800a230:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a232:	2300      	movs	r3, #0
 800a234:	60c3      	str	r3, [r0, #12]
 800a236:	4641      	mov	r1, r8
 800a238:	f7ff fa0a 	bl	8009650 <__mcmp>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	da45      	bge.n	800a2cc <_strtod_l+0x864>
 800a240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a242:	ea53 030a 	orrs.w	r3, r3, sl
 800a246:	d16b      	bne.n	800a320 <_strtod_l+0x8b8>
 800a248:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d167      	bne.n	800a320 <_strtod_l+0x8b8>
 800a250:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a254:	0d1b      	lsrs	r3, r3, #20
 800a256:	051b      	lsls	r3, r3, #20
 800a258:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a25c:	d960      	bls.n	800a320 <_strtod_l+0x8b8>
 800a25e:	6963      	ldr	r3, [r4, #20]
 800a260:	b913      	cbnz	r3, 800a268 <_strtod_l+0x800>
 800a262:	6923      	ldr	r3, [r4, #16]
 800a264:	2b01      	cmp	r3, #1
 800a266:	dd5b      	ble.n	800a320 <_strtod_l+0x8b8>
 800a268:	4621      	mov	r1, r4
 800a26a:	2201      	movs	r2, #1
 800a26c:	9805      	ldr	r0, [sp, #20]
 800a26e:	f7ff f983 	bl	8009578 <__lshift>
 800a272:	4641      	mov	r1, r8
 800a274:	4604      	mov	r4, r0
 800a276:	f7ff f9eb 	bl	8009650 <__mcmp>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	dd50      	ble.n	800a320 <_strtod_l+0x8b8>
 800a27e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a282:	9a08      	ldr	r2, [sp, #32]
 800a284:	0d1b      	lsrs	r3, r3, #20
 800a286:	051b      	lsls	r3, r3, #20
 800a288:	2a00      	cmp	r2, #0
 800a28a:	d06a      	beq.n	800a362 <_strtod_l+0x8fa>
 800a28c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a290:	d867      	bhi.n	800a362 <_strtod_l+0x8fa>
 800a292:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a296:	f67f ae9d 	bls.w	8009fd4 <_strtod_l+0x56c>
 800a29a:	4b0a      	ldr	r3, [pc, #40]	@ (800a2c4 <_strtod_l+0x85c>)
 800a29c:	4650      	mov	r0, sl
 800a29e:	4659      	mov	r1, fp
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f7f6 f9b1 	bl	8000608 <__aeabi_dmul>
 800a2a6:	4b08      	ldr	r3, [pc, #32]	@ (800a2c8 <_strtod_l+0x860>)
 800a2a8:	400b      	ands	r3, r1
 800a2aa:	4682      	mov	sl, r0
 800a2ac:	468b      	mov	fp, r1
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f47f ae08 	bne.w	8009ec4 <_strtod_l+0x45c>
 800a2b4:	9a05      	ldr	r2, [sp, #20]
 800a2b6:	2322      	movs	r3, #34	@ 0x22
 800a2b8:	6013      	str	r3, [r2, #0]
 800a2ba:	e603      	b.n	8009ec4 <_strtod_l+0x45c>
 800a2bc:	0800bc00 	.word	0x0800bc00
 800a2c0:	fffffc02 	.word	0xfffffc02
 800a2c4:	39500000 	.word	0x39500000
 800a2c8:	7ff00000 	.word	0x7ff00000
 800a2cc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a2d0:	d165      	bne.n	800a39e <_strtod_l+0x936>
 800a2d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a2d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2d8:	b35a      	cbz	r2, 800a332 <_strtod_l+0x8ca>
 800a2da:	4a9f      	ldr	r2, [pc, #636]	@ (800a558 <_strtod_l+0xaf0>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d12b      	bne.n	800a338 <_strtod_l+0x8d0>
 800a2e0:	9b08      	ldr	r3, [sp, #32]
 800a2e2:	4651      	mov	r1, sl
 800a2e4:	b303      	cbz	r3, 800a328 <_strtod_l+0x8c0>
 800a2e6:	4b9d      	ldr	r3, [pc, #628]	@ (800a55c <_strtod_l+0xaf4>)
 800a2e8:	465a      	mov	r2, fp
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f4:	d81b      	bhi.n	800a32e <_strtod_l+0x8c6>
 800a2f6:	0d1b      	lsrs	r3, r3, #20
 800a2f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a300:	4299      	cmp	r1, r3
 800a302:	d119      	bne.n	800a338 <_strtod_l+0x8d0>
 800a304:	4b96      	ldr	r3, [pc, #600]	@ (800a560 <_strtod_l+0xaf8>)
 800a306:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a308:	429a      	cmp	r2, r3
 800a30a:	d102      	bne.n	800a312 <_strtod_l+0x8aa>
 800a30c:	3101      	adds	r1, #1
 800a30e:	f43f adce 	beq.w	8009eae <_strtod_l+0x446>
 800a312:	4b92      	ldr	r3, [pc, #584]	@ (800a55c <_strtod_l+0xaf4>)
 800a314:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a316:	401a      	ands	r2, r3
 800a318:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a31c:	f04f 0a00 	mov.w	sl, #0
 800a320:	9b08      	ldr	r3, [sp, #32]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1b9      	bne.n	800a29a <_strtod_l+0x832>
 800a326:	e5cd      	b.n	8009ec4 <_strtod_l+0x45c>
 800a328:	f04f 33ff 	mov.w	r3, #4294967295
 800a32c:	e7e8      	b.n	800a300 <_strtod_l+0x898>
 800a32e:	4613      	mov	r3, r2
 800a330:	e7e6      	b.n	800a300 <_strtod_l+0x898>
 800a332:	ea53 030a 	orrs.w	r3, r3, sl
 800a336:	d0a2      	beq.n	800a27e <_strtod_l+0x816>
 800a338:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a33a:	b1db      	cbz	r3, 800a374 <_strtod_l+0x90c>
 800a33c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a33e:	4213      	tst	r3, r2
 800a340:	d0ee      	beq.n	800a320 <_strtod_l+0x8b8>
 800a342:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a344:	9a08      	ldr	r2, [sp, #32]
 800a346:	4650      	mov	r0, sl
 800a348:	4659      	mov	r1, fp
 800a34a:	b1bb      	cbz	r3, 800a37c <_strtod_l+0x914>
 800a34c:	f7ff fb6e 	bl	8009a2c <sulp>
 800a350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a354:	ec53 2b10 	vmov	r2, r3, d0
 800a358:	f7f5 ffa0 	bl	800029c <__adddf3>
 800a35c:	4682      	mov	sl, r0
 800a35e:	468b      	mov	fp, r1
 800a360:	e7de      	b.n	800a320 <_strtod_l+0x8b8>
 800a362:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a366:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a36a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a36e:	f04f 3aff 	mov.w	sl, #4294967295
 800a372:	e7d5      	b.n	800a320 <_strtod_l+0x8b8>
 800a374:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a376:	ea13 0f0a 	tst.w	r3, sl
 800a37a:	e7e1      	b.n	800a340 <_strtod_l+0x8d8>
 800a37c:	f7ff fb56 	bl	8009a2c <sulp>
 800a380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a384:	ec53 2b10 	vmov	r2, r3, d0
 800a388:	f7f5 ff86 	bl	8000298 <__aeabi_dsub>
 800a38c:	2200      	movs	r2, #0
 800a38e:	2300      	movs	r3, #0
 800a390:	4682      	mov	sl, r0
 800a392:	468b      	mov	fp, r1
 800a394:	f7f6 fba0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a398:	2800      	cmp	r0, #0
 800a39a:	d0c1      	beq.n	800a320 <_strtod_l+0x8b8>
 800a39c:	e61a      	b.n	8009fd4 <_strtod_l+0x56c>
 800a39e:	4641      	mov	r1, r8
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f7ff facd 	bl	8009940 <__ratio>
 800a3a6:	ec57 6b10 	vmov	r6, r7, d0
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	4639      	mov	r1, r7
 800a3b4:	f7f6 fba4 	bl	8000b00 <__aeabi_dcmple>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d06f      	beq.n	800a49c <_strtod_l+0xa34>
 800a3bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d17a      	bne.n	800a4b8 <_strtod_l+0xa50>
 800a3c2:	f1ba 0f00 	cmp.w	sl, #0
 800a3c6:	d158      	bne.n	800a47a <_strtod_l+0xa12>
 800a3c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d15a      	bne.n	800a488 <_strtod_l+0xa20>
 800a3d2:	4b64      	ldr	r3, [pc, #400]	@ (800a564 <_strtod_l+0xafc>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	4639      	mov	r1, r7
 800a3da:	f7f6 fb87 	bl	8000aec <__aeabi_dcmplt>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	d159      	bne.n	800a496 <_strtod_l+0xa2e>
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	4639      	mov	r1, r7
 800a3e6:	4b60      	ldr	r3, [pc, #384]	@ (800a568 <_strtod_l+0xb00>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f7f6 f90d 	bl	8000608 <__aeabi_dmul>
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	460f      	mov	r7, r1
 800a3f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a3f6:	9606      	str	r6, [sp, #24]
 800a3f8:	9307      	str	r3, [sp, #28]
 800a3fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3fe:	4d57      	ldr	r5, [pc, #348]	@ (800a55c <_strtod_l+0xaf4>)
 800a400:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a406:	401d      	ands	r5, r3
 800a408:	4b58      	ldr	r3, [pc, #352]	@ (800a56c <_strtod_l+0xb04>)
 800a40a:	429d      	cmp	r5, r3
 800a40c:	f040 80b2 	bne.w	800a574 <_strtod_l+0xb0c>
 800a410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a412:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a416:	ec4b ab10 	vmov	d0, sl, fp
 800a41a:	f7ff f9c9 	bl	80097b0 <__ulp>
 800a41e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a422:	ec51 0b10 	vmov	r0, r1, d0
 800a426:	f7f6 f8ef 	bl	8000608 <__aeabi_dmul>
 800a42a:	4652      	mov	r2, sl
 800a42c:	465b      	mov	r3, fp
 800a42e:	f7f5 ff35 	bl	800029c <__adddf3>
 800a432:	460b      	mov	r3, r1
 800a434:	4949      	ldr	r1, [pc, #292]	@ (800a55c <_strtod_l+0xaf4>)
 800a436:	4a4e      	ldr	r2, [pc, #312]	@ (800a570 <_strtod_l+0xb08>)
 800a438:	4019      	ands	r1, r3
 800a43a:	4291      	cmp	r1, r2
 800a43c:	4682      	mov	sl, r0
 800a43e:	d942      	bls.n	800a4c6 <_strtod_l+0xa5e>
 800a440:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a442:	4b47      	ldr	r3, [pc, #284]	@ (800a560 <_strtod_l+0xaf8>)
 800a444:	429a      	cmp	r2, r3
 800a446:	d103      	bne.n	800a450 <_strtod_l+0x9e8>
 800a448:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a44a:	3301      	adds	r3, #1
 800a44c:	f43f ad2f 	beq.w	8009eae <_strtod_l+0x446>
 800a450:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a560 <_strtod_l+0xaf8>
 800a454:	f04f 3aff 	mov.w	sl, #4294967295
 800a458:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a45a:	9805      	ldr	r0, [sp, #20]
 800a45c:	f7fe fe7c 	bl	8009158 <_Bfree>
 800a460:	9805      	ldr	r0, [sp, #20]
 800a462:	4649      	mov	r1, r9
 800a464:	f7fe fe78 	bl	8009158 <_Bfree>
 800a468:	9805      	ldr	r0, [sp, #20]
 800a46a:	4641      	mov	r1, r8
 800a46c:	f7fe fe74 	bl	8009158 <_Bfree>
 800a470:	9805      	ldr	r0, [sp, #20]
 800a472:	4621      	mov	r1, r4
 800a474:	f7fe fe70 	bl	8009158 <_Bfree>
 800a478:	e619      	b.n	800a0ae <_strtod_l+0x646>
 800a47a:	f1ba 0f01 	cmp.w	sl, #1
 800a47e:	d103      	bne.n	800a488 <_strtod_l+0xa20>
 800a480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a482:	2b00      	cmp	r3, #0
 800a484:	f43f ada6 	beq.w	8009fd4 <_strtod_l+0x56c>
 800a488:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a538 <_strtod_l+0xad0>
 800a48c:	4f35      	ldr	r7, [pc, #212]	@ (800a564 <_strtod_l+0xafc>)
 800a48e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a492:	2600      	movs	r6, #0
 800a494:	e7b1      	b.n	800a3fa <_strtod_l+0x992>
 800a496:	4f34      	ldr	r7, [pc, #208]	@ (800a568 <_strtod_l+0xb00>)
 800a498:	2600      	movs	r6, #0
 800a49a:	e7aa      	b.n	800a3f2 <_strtod_l+0x98a>
 800a49c:	4b32      	ldr	r3, [pc, #200]	@ (800a568 <_strtod_l+0xb00>)
 800a49e:	4630      	mov	r0, r6
 800a4a0:	4639      	mov	r1, r7
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f7f6 f8b0 	bl	8000608 <__aeabi_dmul>
 800a4a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4aa:	4606      	mov	r6, r0
 800a4ac:	460f      	mov	r7, r1
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d09f      	beq.n	800a3f2 <_strtod_l+0x98a>
 800a4b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a4b6:	e7a0      	b.n	800a3fa <_strtod_l+0x992>
 800a4b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a540 <_strtod_l+0xad8>
 800a4bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a4c0:	ec57 6b17 	vmov	r6, r7, d7
 800a4c4:	e799      	b.n	800a3fa <_strtod_l+0x992>
 800a4c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a4ca:	9b08      	ldr	r3, [sp, #32]
 800a4cc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1c1      	bne.n	800a458 <_strtod_l+0x9f0>
 800a4d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4d8:	0d1b      	lsrs	r3, r3, #20
 800a4da:	051b      	lsls	r3, r3, #20
 800a4dc:	429d      	cmp	r5, r3
 800a4de:	d1bb      	bne.n	800a458 <_strtod_l+0x9f0>
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	4639      	mov	r1, r7
 800a4e4:	f7f6 fbf0 	bl	8000cc8 <__aeabi_d2lz>
 800a4e8:	f7f6 f860 	bl	80005ac <__aeabi_l2d>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	f7f5 fed0 	bl	8000298 <__aeabi_dsub>
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a500:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a506:	ea46 060a 	orr.w	r6, r6, sl
 800a50a:	431e      	orrs	r6, r3
 800a50c:	d06f      	beq.n	800a5ee <_strtod_l+0xb86>
 800a50e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a548 <_strtod_l+0xae0>)
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	f7f6 faea 	bl	8000aec <__aeabi_dcmplt>
 800a518:	2800      	cmp	r0, #0
 800a51a:	f47f acd3 	bne.w	8009ec4 <_strtod_l+0x45c>
 800a51e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a550 <_strtod_l+0xae8>)
 800a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a528:	f7f6 fafe 	bl	8000b28 <__aeabi_dcmpgt>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d093      	beq.n	800a458 <_strtod_l+0x9f0>
 800a530:	e4c8      	b.n	8009ec4 <_strtod_l+0x45c>
 800a532:	bf00      	nop
 800a534:	f3af 8000 	nop.w
 800a538:	00000000 	.word	0x00000000
 800a53c:	bff00000 	.word	0xbff00000
 800a540:	00000000 	.word	0x00000000
 800a544:	3ff00000 	.word	0x3ff00000
 800a548:	94a03595 	.word	0x94a03595
 800a54c:	3fdfffff 	.word	0x3fdfffff
 800a550:	35afe535 	.word	0x35afe535
 800a554:	3fe00000 	.word	0x3fe00000
 800a558:	000fffff 	.word	0x000fffff
 800a55c:	7ff00000 	.word	0x7ff00000
 800a560:	7fefffff 	.word	0x7fefffff
 800a564:	3ff00000 	.word	0x3ff00000
 800a568:	3fe00000 	.word	0x3fe00000
 800a56c:	7fe00000 	.word	0x7fe00000
 800a570:	7c9fffff 	.word	0x7c9fffff
 800a574:	9b08      	ldr	r3, [sp, #32]
 800a576:	b323      	cbz	r3, 800a5c2 <_strtod_l+0xb5a>
 800a578:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a57c:	d821      	bhi.n	800a5c2 <_strtod_l+0xb5a>
 800a57e:	a328      	add	r3, pc, #160	@ (adr r3, 800a620 <_strtod_l+0xbb8>)
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	4630      	mov	r0, r6
 800a586:	4639      	mov	r1, r7
 800a588:	f7f6 faba 	bl	8000b00 <__aeabi_dcmple>
 800a58c:	b1a0      	cbz	r0, 800a5b8 <_strtod_l+0xb50>
 800a58e:	4639      	mov	r1, r7
 800a590:	4630      	mov	r0, r6
 800a592:	f7f6 fb11 	bl	8000bb8 <__aeabi_d2uiz>
 800a596:	2801      	cmp	r0, #1
 800a598:	bf38      	it	cc
 800a59a:	2001      	movcc	r0, #1
 800a59c:	f7f5 ffba 	bl	8000514 <__aeabi_ui2d>
 800a5a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5a2:	4606      	mov	r6, r0
 800a5a4:	460f      	mov	r7, r1
 800a5a6:	b9fb      	cbnz	r3, 800a5e8 <_strtod_l+0xb80>
 800a5a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a5ac:	9014      	str	r0, [sp, #80]	@ 0x50
 800a5ae:	9315      	str	r3, [sp, #84]	@ 0x54
 800a5b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a5b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a5b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a5ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a5be:	1b5b      	subs	r3, r3, r5
 800a5c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a5c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a5c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a5ca:	f7ff f8f1 	bl	80097b0 <__ulp>
 800a5ce:	4650      	mov	r0, sl
 800a5d0:	ec53 2b10 	vmov	r2, r3, d0
 800a5d4:	4659      	mov	r1, fp
 800a5d6:	f7f6 f817 	bl	8000608 <__aeabi_dmul>
 800a5da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a5de:	f7f5 fe5d 	bl	800029c <__adddf3>
 800a5e2:	4682      	mov	sl, r0
 800a5e4:	468b      	mov	fp, r1
 800a5e6:	e770      	b.n	800a4ca <_strtod_l+0xa62>
 800a5e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a5ec:	e7e0      	b.n	800a5b0 <_strtod_l+0xb48>
 800a5ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800a628 <_strtod_l+0xbc0>)
 800a5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f4:	f7f6 fa7a 	bl	8000aec <__aeabi_dcmplt>
 800a5f8:	e798      	b.n	800a52c <_strtod_l+0xac4>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800a5fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a600:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a602:	6013      	str	r3, [r2, #0]
 800a604:	f7ff ba6d 	b.w	8009ae2 <_strtod_l+0x7a>
 800a608:	2a65      	cmp	r2, #101	@ 0x65
 800a60a:	f43f ab68 	beq.w	8009cde <_strtod_l+0x276>
 800a60e:	2a45      	cmp	r2, #69	@ 0x45
 800a610:	f43f ab65 	beq.w	8009cde <_strtod_l+0x276>
 800a614:	2301      	movs	r3, #1
 800a616:	f7ff bba0 	b.w	8009d5a <_strtod_l+0x2f2>
 800a61a:	bf00      	nop
 800a61c:	f3af 8000 	nop.w
 800a620:	ffc00000 	.word	0xffc00000
 800a624:	41dfffff 	.word	0x41dfffff
 800a628:	94a03595 	.word	0x94a03595
 800a62c:	3fcfffff 	.word	0x3fcfffff

0800a630 <_strtod_r>:
 800a630:	4b01      	ldr	r3, [pc, #4]	@ (800a638 <_strtod_r+0x8>)
 800a632:	f7ff ba19 	b.w	8009a68 <_strtod_l>
 800a636:	bf00      	nop
 800a638:	20000068 	.word	0x20000068

0800a63c <_strtol_l.isra.0>:
 800a63c:	2b24      	cmp	r3, #36	@ 0x24
 800a63e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a642:	4686      	mov	lr, r0
 800a644:	4690      	mov	r8, r2
 800a646:	d801      	bhi.n	800a64c <_strtol_l.isra.0+0x10>
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d106      	bne.n	800a65a <_strtol_l.isra.0+0x1e>
 800a64c:	f7fd fdb8 	bl	80081c0 <__errno>
 800a650:	2316      	movs	r3, #22
 800a652:	6003      	str	r3, [r0, #0]
 800a654:	2000      	movs	r0, #0
 800a656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65a:	4834      	ldr	r0, [pc, #208]	@ (800a72c <_strtol_l.isra.0+0xf0>)
 800a65c:	460d      	mov	r5, r1
 800a65e:	462a      	mov	r2, r5
 800a660:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a664:	5d06      	ldrb	r6, [r0, r4]
 800a666:	f016 0608 	ands.w	r6, r6, #8
 800a66a:	d1f8      	bne.n	800a65e <_strtol_l.isra.0+0x22>
 800a66c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a66e:	d110      	bne.n	800a692 <_strtol_l.isra.0+0x56>
 800a670:	782c      	ldrb	r4, [r5, #0]
 800a672:	2601      	movs	r6, #1
 800a674:	1c95      	adds	r5, r2, #2
 800a676:	f033 0210 	bics.w	r2, r3, #16
 800a67a:	d115      	bne.n	800a6a8 <_strtol_l.isra.0+0x6c>
 800a67c:	2c30      	cmp	r4, #48	@ 0x30
 800a67e:	d10d      	bne.n	800a69c <_strtol_l.isra.0+0x60>
 800a680:	782a      	ldrb	r2, [r5, #0]
 800a682:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a686:	2a58      	cmp	r2, #88	@ 0x58
 800a688:	d108      	bne.n	800a69c <_strtol_l.isra.0+0x60>
 800a68a:	786c      	ldrb	r4, [r5, #1]
 800a68c:	3502      	adds	r5, #2
 800a68e:	2310      	movs	r3, #16
 800a690:	e00a      	b.n	800a6a8 <_strtol_l.isra.0+0x6c>
 800a692:	2c2b      	cmp	r4, #43	@ 0x2b
 800a694:	bf04      	itt	eq
 800a696:	782c      	ldrbeq	r4, [r5, #0]
 800a698:	1c95      	addeq	r5, r2, #2
 800a69a:	e7ec      	b.n	800a676 <_strtol_l.isra.0+0x3a>
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1f6      	bne.n	800a68e <_strtol_l.isra.0+0x52>
 800a6a0:	2c30      	cmp	r4, #48	@ 0x30
 800a6a2:	bf14      	ite	ne
 800a6a4:	230a      	movne	r3, #10
 800a6a6:	2308      	moveq	r3, #8
 800a6a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a6ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	fbbc f9f3 	udiv	r9, ip, r3
 800a6b6:	4610      	mov	r0, r2
 800a6b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a6bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a6c0:	2f09      	cmp	r7, #9
 800a6c2:	d80f      	bhi.n	800a6e4 <_strtol_l.isra.0+0xa8>
 800a6c4:	463c      	mov	r4, r7
 800a6c6:	42a3      	cmp	r3, r4
 800a6c8:	dd1b      	ble.n	800a702 <_strtol_l.isra.0+0xc6>
 800a6ca:	1c57      	adds	r7, r2, #1
 800a6cc:	d007      	beq.n	800a6de <_strtol_l.isra.0+0xa2>
 800a6ce:	4581      	cmp	r9, r0
 800a6d0:	d314      	bcc.n	800a6fc <_strtol_l.isra.0+0xc0>
 800a6d2:	d101      	bne.n	800a6d8 <_strtol_l.isra.0+0x9c>
 800a6d4:	45a2      	cmp	sl, r4
 800a6d6:	db11      	blt.n	800a6fc <_strtol_l.isra.0+0xc0>
 800a6d8:	fb00 4003 	mla	r0, r0, r3, r4
 800a6dc:	2201      	movs	r2, #1
 800a6de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6e2:	e7eb      	b.n	800a6bc <_strtol_l.isra.0+0x80>
 800a6e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a6e8:	2f19      	cmp	r7, #25
 800a6ea:	d801      	bhi.n	800a6f0 <_strtol_l.isra.0+0xb4>
 800a6ec:	3c37      	subs	r4, #55	@ 0x37
 800a6ee:	e7ea      	b.n	800a6c6 <_strtol_l.isra.0+0x8a>
 800a6f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a6f4:	2f19      	cmp	r7, #25
 800a6f6:	d804      	bhi.n	800a702 <_strtol_l.isra.0+0xc6>
 800a6f8:	3c57      	subs	r4, #87	@ 0x57
 800a6fa:	e7e4      	b.n	800a6c6 <_strtol_l.isra.0+0x8a>
 800a6fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a700:	e7ed      	b.n	800a6de <_strtol_l.isra.0+0xa2>
 800a702:	1c53      	adds	r3, r2, #1
 800a704:	d108      	bne.n	800a718 <_strtol_l.isra.0+0xdc>
 800a706:	2322      	movs	r3, #34	@ 0x22
 800a708:	f8ce 3000 	str.w	r3, [lr]
 800a70c:	4660      	mov	r0, ip
 800a70e:	f1b8 0f00 	cmp.w	r8, #0
 800a712:	d0a0      	beq.n	800a656 <_strtol_l.isra.0+0x1a>
 800a714:	1e69      	subs	r1, r5, #1
 800a716:	e006      	b.n	800a726 <_strtol_l.isra.0+0xea>
 800a718:	b106      	cbz	r6, 800a71c <_strtol_l.isra.0+0xe0>
 800a71a:	4240      	negs	r0, r0
 800a71c:	f1b8 0f00 	cmp.w	r8, #0
 800a720:	d099      	beq.n	800a656 <_strtol_l.isra.0+0x1a>
 800a722:	2a00      	cmp	r2, #0
 800a724:	d1f6      	bne.n	800a714 <_strtol_l.isra.0+0xd8>
 800a726:	f8c8 1000 	str.w	r1, [r8]
 800a72a:	e794      	b.n	800a656 <_strtol_l.isra.0+0x1a>
 800a72c:	0800bc29 	.word	0x0800bc29

0800a730 <_strtol_r>:
 800a730:	f7ff bf84 	b.w	800a63c <_strtol_l.isra.0>

0800a734 <__ssputs_r>:
 800a734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a738:	688e      	ldr	r6, [r1, #8]
 800a73a:	461f      	mov	r7, r3
 800a73c:	42be      	cmp	r6, r7
 800a73e:	680b      	ldr	r3, [r1, #0]
 800a740:	4682      	mov	sl, r0
 800a742:	460c      	mov	r4, r1
 800a744:	4690      	mov	r8, r2
 800a746:	d82d      	bhi.n	800a7a4 <__ssputs_r+0x70>
 800a748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a74c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a750:	d026      	beq.n	800a7a0 <__ssputs_r+0x6c>
 800a752:	6965      	ldr	r5, [r4, #20]
 800a754:	6909      	ldr	r1, [r1, #16]
 800a756:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a75a:	eba3 0901 	sub.w	r9, r3, r1
 800a75e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a762:	1c7b      	adds	r3, r7, #1
 800a764:	444b      	add	r3, r9
 800a766:	106d      	asrs	r5, r5, #1
 800a768:	429d      	cmp	r5, r3
 800a76a:	bf38      	it	cc
 800a76c:	461d      	movcc	r5, r3
 800a76e:	0553      	lsls	r3, r2, #21
 800a770:	d527      	bpl.n	800a7c2 <__ssputs_r+0x8e>
 800a772:	4629      	mov	r1, r5
 800a774:	f7fe fc24 	bl	8008fc0 <_malloc_r>
 800a778:	4606      	mov	r6, r0
 800a77a:	b360      	cbz	r0, 800a7d6 <__ssputs_r+0xa2>
 800a77c:	6921      	ldr	r1, [r4, #16]
 800a77e:	464a      	mov	r2, r9
 800a780:	f000 fbde 	bl	800af40 <memcpy>
 800a784:	89a3      	ldrh	r3, [r4, #12]
 800a786:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a78a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a78e:	81a3      	strh	r3, [r4, #12]
 800a790:	6126      	str	r6, [r4, #16]
 800a792:	6165      	str	r5, [r4, #20]
 800a794:	444e      	add	r6, r9
 800a796:	eba5 0509 	sub.w	r5, r5, r9
 800a79a:	6026      	str	r6, [r4, #0]
 800a79c:	60a5      	str	r5, [r4, #8]
 800a79e:	463e      	mov	r6, r7
 800a7a0:	42be      	cmp	r6, r7
 800a7a2:	d900      	bls.n	800a7a6 <__ssputs_r+0x72>
 800a7a4:	463e      	mov	r6, r7
 800a7a6:	6820      	ldr	r0, [r4, #0]
 800a7a8:	4632      	mov	r2, r6
 800a7aa:	4641      	mov	r1, r8
 800a7ac:	f000 fb6a 	bl	800ae84 <memmove>
 800a7b0:	68a3      	ldr	r3, [r4, #8]
 800a7b2:	1b9b      	subs	r3, r3, r6
 800a7b4:	60a3      	str	r3, [r4, #8]
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	4433      	add	r3, r6
 800a7ba:	6023      	str	r3, [r4, #0]
 800a7bc:	2000      	movs	r0, #0
 800a7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c2:	462a      	mov	r2, r5
 800a7c4:	f000 ff51 	bl	800b66a <_realloc_r>
 800a7c8:	4606      	mov	r6, r0
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d1e0      	bne.n	800a790 <__ssputs_r+0x5c>
 800a7ce:	6921      	ldr	r1, [r4, #16]
 800a7d0:	4650      	mov	r0, sl
 800a7d2:	f7fe fb81 	bl	8008ed8 <_free_r>
 800a7d6:	230c      	movs	r3, #12
 800a7d8:	f8ca 3000 	str.w	r3, [sl]
 800a7dc:	89a3      	ldrh	r3, [r4, #12]
 800a7de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7e2:	81a3      	strh	r3, [r4, #12]
 800a7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e8:	e7e9      	b.n	800a7be <__ssputs_r+0x8a>
	...

0800a7ec <_svfiprintf_r>:
 800a7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f0:	4698      	mov	r8, r3
 800a7f2:	898b      	ldrh	r3, [r1, #12]
 800a7f4:	061b      	lsls	r3, r3, #24
 800a7f6:	b09d      	sub	sp, #116	@ 0x74
 800a7f8:	4607      	mov	r7, r0
 800a7fa:	460d      	mov	r5, r1
 800a7fc:	4614      	mov	r4, r2
 800a7fe:	d510      	bpl.n	800a822 <_svfiprintf_r+0x36>
 800a800:	690b      	ldr	r3, [r1, #16]
 800a802:	b973      	cbnz	r3, 800a822 <_svfiprintf_r+0x36>
 800a804:	2140      	movs	r1, #64	@ 0x40
 800a806:	f7fe fbdb 	bl	8008fc0 <_malloc_r>
 800a80a:	6028      	str	r0, [r5, #0]
 800a80c:	6128      	str	r0, [r5, #16]
 800a80e:	b930      	cbnz	r0, 800a81e <_svfiprintf_r+0x32>
 800a810:	230c      	movs	r3, #12
 800a812:	603b      	str	r3, [r7, #0]
 800a814:	f04f 30ff 	mov.w	r0, #4294967295
 800a818:	b01d      	add	sp, #116	@ 0x74
 800a81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81e:	2340      	movs	r3, #64	@ 0x40
 800a820:	616b      	str	r3, [r5, #20]
 800a822:	2300      	movs	r3, #0
 800a824:	9309      	str	r3, [sp, #36]	@ 0x24
 800a826:	2320      	movs	r3, #32
 800a828:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a82c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a830:	2330      	movs	r3, #48	@ 0x30
 800a832:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a9d0 <_svfiprintf_r+0x1e4>
 800a836:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a83a:	f04f 0901 	mov.w	r9, #1
 800a83e:	4623      	mov	r3, r4
 800a840:	469a      	mov	sl, r3
 800a842:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a846:	b10a      	cbz	r2, 800a84c <_svfiprintf_r+0x60>
 800a848:	2a25      	cmp	r2, #37	@ 0x25
 800a84a:	d1f9      	bne.n	800a840 <_svfiprintf_r+0x54>
 800a84c:	ebba 0b04 	subs.w	fp, sl, r4
 800a850:	d00b      	beq.n	800a86a <_svfiprintf_r+0x7e>
 800a852:	465b      	mov	r3, fp
 800a854:	4622      	mov	r2, r4
 800a856:	4629      	mov	r1, r5
 800a858:	4638      	mov	r0, r7
 800a85a:	f7ff ff6b 	bl	800a734 <__ssputs_r>
 800a85e:	3001      	adds	r0, #1
 800a860:	f000 80a7 	beq.w	800a9b2 <_svfiprintf_r+0x1c6>
 800a864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a866:	445a      	add	r2, fp
 800a868:	9209      	str	r2, [sp, #36]	@ 0x24
 800a86a:	f89a 3000 	ldrb.w	r3, [sl]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f000 809f 	beq.w	800a9b2 <_svfiprintf_r+0x1c6>
 800a874:	2300      	movs	r3, #0
 800a876:	f04f 32ff 	mov.w	r2, #4294967295
 800a87a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a87e:	f10a 0a01 	add.w	sl, sl, #1
 800a882:	9304      	str	r3, [sp, #16]
 800a884:	9307      	str	r3, [sp, #28]
 800a886:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a88a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a88c:	4654      	mov	r4, sl
 800a88e:	2205      	movs	r2, #5
 800a890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a894:	484e      	ldr	r0, [pc, #312]	@ (800a9d0 <_svfiprintf_r+0x1e4>)
 800a896:	f7f5 fca3 	bl	80001e0 <memchr>
 800a89a:	9a04      	ldr	r2, [sp, #16]
 800a89c:	b9d8      	cbnz	r0, 800a8d6 <_svfiprintf_r+0xea>
 800a89e:	06d0      	lsls	r0, r2, #27
 800a8a0:	bf44      	itt	mi
 800a8a2:	2320      	movmi	r3, #32
 800a8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8a8:	0711      	lsls	r1, r2, #28
 800a8aa:	bf44      	itt	mi
 800a8ac:	232b      	movmi	r3, #43	@ 0x2b
 800a8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8b8:	d015      	beq.n	800a8e6 <_svfiprintf_r+0xfa>
 800a8ba:	9a07      	ldr	r2, [sp, #28]
 800a8bc:	4654      	mov	r4, sl
 800a8be:	2000      	movs	r0, #0
 800a8c0:	f04f 0c0a 	mov.w	ip, #10
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8ca:	3b30      	subs	r3, #48	@ 0x30
 800a8cc:	2b09      	cmp	r3, #9
 800a8ce:	d94b      	bls.n	800a968 <_svfiprintf_r+0x17c>
 800a8d0:	b1b0      	cbz	r0, 800a900 <_svfiprintf_r+0x114>
 800a8d2:	9207      	str	r2, [sp, #28]
 800a8d4:	e014      	b.n	800a900 <_svfiprintf_r+0x114>
 800a8d6:	eba0 0308 	sub.w	r3, r0, r8
 800a8da:	fa09 f303 	lsl.w	r3, r9, r3
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	9304      	str	r3, [sp, #16]
 800a8e2:	46a2      	mov	sl, r4
 800a8e4:	e7d2      	b.n	800a88c <_svfiprintf_r+0xa0>
 800a8e6:	9b03      	ldr	r3, [sp, #12]
 800a8e8:	1d19      	adds	r1, r3, #4
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	9103      	str	r1, [sp, #12]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	bfbb      	ittet	lt
 800a8f2:	425b      	neglt	r3, r3
 800a8f4:	f042 0202 	orrlt.w	r2, r2, #2
 800a8f8:	9307      	strge	r3, [sp, #28]
 800a8fa:	9307      	strlt	r3, [sp, #28]
 800a8fc:	bfb8      	it	lt
 800a8fe:	9204      	strlt	r2, [sp, #16]
 800a900:	7823      	ldrb	r3, [r4, #0]
 800a902:	2b2e      	cmp	r3, #46	@ 0x2e
 800a904:	d10a      	bne.n	800a91c <_svfiprintf_r+0x130>
 800a906:	7863      	ldrb	r3, [r4, #1]
 800a908:	2b2a      	cmp	r3, #42	@ 0x2a
 800a90a:	d132      	bne.n	800a972 <_svfiprintf_r+0x186>
 800a90c:	9b03      	ldr	r3, [sp, #12]
 800a90e:	1d1a      	adds	r2, r3, #4
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	9203      	str	r2, [sp, #12]
 800a914:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a918:	3402      	adds	r4, #2
 800a91a:	9305      	str	r3, [sp, #20]
 800a91c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a9e0 <_svfiprintf_r+0x1f4>
 800a920:	7821      	ldrb	r1, [r4, #0]
 800a922:	2203      	movs	r2, #3
 800a924:	4650      	mov	r0, sl
 800a926:	f7f5 fc5b 	bl	80001e0 <memchr>
 800a92a:	b138      	cbz	r0, 800a93c <_svfiprintf_r+0x150>
 800a92c:	9b04      	ldr	r3, [sp, #16]
 800a92e:	eba0 000a 	sub.w	r0, r0, sl
 800a932:	2240      	movs	r2, #64	@ 0x40
 800a934:	4082      	lsls	r2, r0
 800a936:	4313      	orrs	r3, r2
 800a938:	3401      	adds	r4, #1
 800a93a:	9304      	str	r3, [sp, #16]
 800a93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a940:	4824      	ldr	r0, [pc, #144]	@ (800a9d4 <_svfiprintf_r+0x1e8>)
 800a942:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a946:	2206      	movs	r2, #6
 800a948:	f7f5 fc4a 	bl	80001e0 <memchr>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	d036      	beq.n	800a9be <_svfiprintf_r+0x1d2>
 800a950:	4b21      	ldr	r3, [pc, #132]	@ (800a9d8 <_svfiprintf_r+0x1ec>)
 800a952:	bb1b      	cbnz	r3, 800a99c <_svfiprintf_r+0x1b0>
 800a954:	9b03      	ldr	r3, [sp, #12]
 800a956:	3307      	adds	r3, #7
 800a958:	f023 0307 	bic.w	r3, r3, #7
 800a95c:	3308      	adds	r3, #8
 800a95e:	9303      	str	r3, [sp, #12]
 800a960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a962:	4433      	add	r3, r6
 800a964:	9309      	str	r3, [sp, #36]	@ 0x24
 800a966:	e76a      	b.n	800a83e <_svfiprintf_r+0x52>
 800a968:	fb0c 3202 	mla	r2, ip, r2, r3
 800a96c:	460c      	mov	r4, r1
 800a96e:	2001      	movs	r0, #1
 800a970:	e7a8      	b.n	800a8c4 <_svfiprintf_r+0xd8>
 800a972:	2300      	movs	r3, #0
 800a974:	3401      	adds	r4, #1
 800a976:	9305      	str	r3, [sp, #20]
 800a978:	4619      	mov	r1, r3
 800a97a:	f04f 0c0a 	mov.w	ip, #10
 800a97e:	4620      	mov	r0, r4
 800a980:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a984:	3a30      	subs	r2, #48	@ 0x30
 800a986:	2a09      	cmp	r2, #9
 800a988:	d903      	bls.n	800a992 <_svfiprintf_r+0x1a6>
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d0c6      	beq.n	800a91c <_svfiprintf_r+0x130>
 800a98e:	9105      	str	r1, [sp, #20]
 800a990:	e7c4      	b.n	800a91c <_svfiprintf_r+0x130>
 800a992:	fb0c 2101 	mla	r1, ip, r1, r2
 800a996:	4604      	mov	r4, r0
 800a998:	2301      	movs	r3, #1
 800a99a:	e7f0      	b.n	800a97e <_svfiprintf_r+0x192>
 800a99c:	ab03      	add	r3, sp, #12
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	462a      	mov	r2, r5
 800a9a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a9dc <_svfiprintf_r+0x1f0>)
 800a9a4:	a904      	add	r1, sp, #16
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	f7fc fbc8 	bl	800713c <_printf_float>
 800a9ac:	1c42      	adds	r2, r0, #1
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	d1d6      	bne.n	800a960 <_svfiprintf_r+0x174>
 800a9b2:	89ab      	ldrh	r3, [r5, #12]
 800a9b4:	065b      	lsls	r3, r3, #25
 800a9b6:	f53f af2d 	bmi.w	800a814 <_svfiprintf_r+0x28>
 800a9ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9bc:	e72c      	b.n	800a818 <_svfiprintf_r+0x2c>
 800a9be:	ab03      	add	r3, sp, #12
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	462a      	mov	r2, r5
 800a9c4:	4b05      	ldr	r3, [pc, #20]	@ (800a9dc <_svfiprintf_r+0x1f0>)
 800a9c6:	a904      	add	r1, sp, #16
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	f7fc fe4f 	bl	800766c <_printf_i>
 800a9ce:	e7ed      	b.n	800a9ac <_svfiprintf_r+0x1c0>
 800a9d0:	0800ba21 	.word	0x0800ba21
 800a9d4:	0800ba2b 	.word	0x0800ba2b
 800a9d8:	0800713d 	.word	0x0800713d
 800a9dc:	0800a735 	.word	0x0800a735
 800a9e0:	0800ba27 	.word	0x0800ba27

0800a9e4 <__sfputc_r>:
 800a9e4:	6893      	ldr	r3, [r2, #8]
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	b410      	push	{r4}
 800a9ec:	6093      	str	r3, [r2, #8]
 800a9ee:	da08      	bge.n	800aa02 <__sfputc_r+0x1e>
 800a9f0:	6994      	ldr	r4, [r2, #24]
 800a9f2:	42a3      	cmp	r3, r4
 800a9f4:	db01      	blt.n	800a9fa <__sfputc_r+0x16>
 800a9f6:	290a      	cmp	r1, #10
 800a9f8:	d103      	bne.n	800aa02 <__sfputc_r+0x1e>
 800a9fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9fe:	f7fd baf8 	b.w	8007ff2 <__swbuf_r>
 800aa02:	6813      	ldr	r3, [r2, #0]
 800aa04:	1c58      	adds	r0, r3, #1
 800aa06:	6010      	str	r0, [r2, #0]
 800aa08:	7019      	strb	r1, [r3, #0]
 800aa0a:	4608      	mov	r0, r1
 800aa0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa10:	4770      	bx	lr

0800aa12 <__sfputs_r>:
 800aa12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa14:	4606      	mov	r6, r0
 800aa16:	460f      	mov	r7, r1
 800aa18:	4614      	mov	r4, r2
 800aa1a:	18d5      	adds	r5, r2, r3
 800aa1c:	42ac      	cmp	r4, r5
 800aa1e:	d101      	bne.n	800aa24 <__sfputs_r+0x12>
 800aa20:	2000      	movs	r0, #0
 800aa22:	e007      	b.n	800aa34 <__sfputs_r+0x22>
 800aa24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa28:	463a      	mov	r2, r7
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	f7ff ffda 	bl	800a9e4 <__sfputc_r>
 800aa30:	1c43      	adds	r3, r0, #1
 800aa32:	d1f3      	bne.n	800aa1c <__sfputs_r+0xa>
 800aa34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa38 <_vfiprintf_r>:
 800aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	460d      	mov	r5, r1
 800aa3e:	b09d      	sub	sp, #116	@ 0x74
 800aa40:	4614      	mov	r4, r2
 800aa42:	4698      	mov	r8, r3
 800aa44:	4606      	mov	r6, r0
 800aa46:	b118      	cbz	r0, 800aa50 <_vfiprintf_r+0x18>
 800aa48:	6a03      	ldr	r3, [r0, #32]
 800aa4a:	b90b      	cbnz	r3, 800aa50 <_vfiprintf_r+0x18>
 800aa4c:	f7fd f9c6 	bl	8007ddc <__sinit>
 800aa50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa52:	07d9      	lsls	r1, r3, #31
 800aa54:	d405      	bmi.n	800aa62 <_vfiprintf_r+0x2a>
 800aa56:	89ab      	ldrh	r3, [r5, #12]
 800aa58:	059a      	lsls	r2, r3, #22
 800aa5a:	d402      	bmi.n	800aa62 <_vfiprintf_r+0x2a>
 800aa5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa5e:	f7fd fbda 	bl	8008216 <__retarget_lock_acquire_recursive>
 800aa62:	89ab      	ldrh	r3, [r5, #12]
 800aa64:	071b      	lsls	r3, r3, #28
 800aa66:	d501      	bpl.n	800aa6c <_vfiprintf_r+0x34>
 800aa68:	692b      	ldr	r3, [r5, #16]
 800aa6a:	b99b      	cbnz	r3, 800aa94 <_vfiprintf_r+0x5c>
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	4630      	mov	r0, r6
 800aa70:	f7fd fafe 	bl	8008070 <__swsetup_r>
 800aa74:	b170      	cbz	r0, 800aa94 <_vfiprintf_r+0x5c>
 800aa76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa78:	07dc      	lsls	r4, r3, #31
 800aa7a:	d504      	bpl.n	800aa86 <_vfiprintf_r+0x4e>
 800aa7c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa80:	b01d      	add	sp, #116	@ 0x74
 800aa82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa86:	89ab      	ldrh	r3, [r5, #12]
 800aa88:	0598      	lsls	r0, r3, #22
 800aa8a:	d4f7      	bmi.n	800aa7c <_vfiprintf_r+0x44>
 800aa8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa8e:	f7fd fbc3 	bl	8008218 <__retarget_lock_release_recursive>
 800aa92:	e7f3      	b.n	800aa7c <_vfiprintf_r+0x44>
 800aa94:	2300      	movs	r3, #0
 800aa96:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa98:	2320      	movs	r3, #32
 800aa9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaa2:	2330      	movs	r3, #48	@ 0x30
 800aaa4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ac54 <_vfiprintf_r+0x21c>
 800aaa8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aaac:	f04f 0901 	mov.w	r9, #1
 800aab0:	4623      	mov	r3, r4
 800aab2:	469a      	mov	sl, r3
 800aab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aab8:	b10a      	cbz	r2, 800aabe <_vfiprintf_r+0x86>
 800aaba:	2a25      	cmp	r2, #37	@ 0x25
 800aabc:	d1f9      	bne.n	800aab2 <_vfiprintf_r+0x7a>
 800aabe:	ebba 0b04 	subs.w	fp, sl, r4
 800aac2:	d00b      	beq.n	800aadc <_vfiprintf_r+0xa4>
 800aac4:	465b      	mov	r3, fp
 800aac6:	4622      	mov	r2, r4
 800aac8:	4629      	mov	r1, r5
 800aaca:	4630      	mov	r0, r6
 800aacc:	f7ff ffa1 	bl	800aa12 <__sfputs_r>
 800aad0:	3001      	adds	r0, #1
 800aad2:	f000 80a7 	beq.w	800ac24 <_vfiprintf_r+0x1ec>
 800aad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aad8:	445a      	add	r2, fp
 800aada:	9209      	str	r2, [sp, #36]	@ 0x24
 800aadc:	f89a 3000 	ldrb.w	r3, [sl]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 809f 	beq.w	800ac24 <_vfiprintf_r+0x1ec>
 800aae6:	2300      	movs	r3, #0
 800aae8:	f04f 32ff 	mov.w	r2, #4294967295
 800aaec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaf0:	f10a 0a01 	add.w	sl, sl, #1
 800aaf4:	9304      	str	r3, [sp, #16]
 800aaf6:	9307      	str	r3, [sp, #28]
 800aaf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aafc:	931a      	str	r3, [sp, #104]	@ 0x68
 800aafe:	4654      	mov	r4, sl
 800ab00:	2205      	movs	r2, #5
 800ab02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab06:	4853      	ldr	r0, [pc, #332]	@ (800ac54 <_vfiprintf_r+0x21c>)
 800ab08:	f7f5 fb6a 	bl	80001e0 <memchr>
 800ab0c:	9a04      	ldr	r2, [sp, #16]
 800ab0e:	b9d8      	cbnz	r0, 800ab48 <_vfiprintf_r+0x110>
 800ab10:	06d1      	lsls	r1, r2, #27
 800ab12:	bf44      	itt	mi
 800ab14:	2320      	movmi	r3, #32
 800ab16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab1a:	0713      	lsls	r3, r2, #28
 800ab1c:	bf44      	itt	mi
 800ab1e:	232b      	movmi	r3, #43	@ 0x2b
 800ab20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab24:	f89a 3000 	ldrb.w	r3, [sl]
 800ab28:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab2a:	d015      	beq.n	800ab58 <_vfiprintf_r+0x120>
 800ab2c:	9a07      	ldr	r2, [sp, #28]
 800ab2e:	4654      	mov	r4, sl
 800ab30:	2000      	movs	r0, #0
 800ab32:	f04f 0c0a 	mov.w	ip, #10
 800ab36:	4621      	mov	r1, r4
 800ab38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab3c:	3b30      	subs	r3, #48	@ 0x30
 800ab3e:	2b09      	cmp	r3, #9
 800ab40:	d94b      	bls.n	800abda <_vfiprintf_r+0x1a2>
 800ab42:	b1b0      	cbz	r0, 800ab72 <_vfiprintf_r+0x13a>
 800ab44:	9207      	str	r2, [sp, #28]
 800ab46:	e014      	b.n	800ab72 <_vfiprintf_r+0x13a>
 800ab48:	eba0 0308 	sub.w	r3, r0, r8
 800ab4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ab50:	4313      	orrs	r3, r2
 800ab52:	9304      	str	r3, [sp, #16]
 800ab54:	46a2      	mov	sl, r4
 800ab56:	e7d2      	b.n	800aafe <_vfiprintf_r+0xc6>
 800ab58:	9b03      	ldr	r3, [sp, #12]
 800ab5a:	1d19      	adds	r1, r3, #4
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	9103      	str	r1, [sp, #12]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	bfbb      	ittet	lt
 800ab64:	425b      	neglt	r3, r3
 800ab66:	f042 0202 	orrlt.w	r2, r2, #2
 800ab6a:	9307      	strge	r3, [sp, #28]
 800ab6c:	9307      	strlt	r3, [sp, #28]
 800ab6e:	bfb8      	it	lt
 800ab70:	9204      	strlt	r2, [sp, #16]
 800ab72:	7823      	ldrb	r3, [r4, #0]
 800ab74:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab76:	d10a      	bne.n	800ab8e <_vfiprintf_r+0x156>
 800ab78:	7863      	ldrb	r3, [r4, #1]
 800ab7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab7c:	d132      	bne.n	800abe4 <_vfiprintf_r+0x1ac>
 800ab7e:	9b03      	ldr	r3, [sp, #12]
 800ab80:	1d1a      	adds	r2, r3, #4
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	9203      	str	r2, [sp, #12]
 800ab86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab8a:	3402      	adds	r4, #2
 800ab8c:	9305      	str	r3, [sp, #20]
 800ab8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ac64 <_vfiprintf_r+0x22c>
 800ab92:	7821      	ldrb	r1, [r4, #0]
 800ab94:	2203      	movs	r2, #3
 800ab96:	4650      	mov	r0, sl
 800ab98:	f7f5 fb22 	bl	80001e0 <memchr>
 800ab9c:	b138      	cbz	r0, 800abae <_vfiprintf_r+0x176>
 800ab9e:	9b04      	ldr	r3, [sp, #16]
 800aba0:	eba0 000a 	sub.w	r0, r0, sl
 800aba4:	2240      	movs	r2, #64	@ 0x40
 800aba6:	4082      	lsls	r2, r0
 800aba8:	4313      	orrs	r3, r2
 800abaa:	3401      	adds	r4, #1
 800abac:	9304      	str	r3, [sp, #16]
 800abae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb2:	4829      	ldr	r0, [pc, #164]	@ (800ac58 <_vfiprintf_r+0x220>)
 800abb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abb8:	2206      	movs	r2, #6
 800abba:	f7f5 fb11 	bl	80001e0 <memchr>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d03f      	beq.n	800ac42 <_vfiprintf_r+0x20a>
 800abc2:	4b26      	ldr	r3, [pc, #152]	@ (800ac5c <_vfiprintf_r+0x224>)
 800abc4:	bb1b      	cbnz	r3, 800ac0e <_vfiprintf_r+0x1d6>
 800abc6:	9b03      	ldr	r3, [sp, #12]
 800abc8:	3307      	adds	r3, #7
 800abca:	f023 0307 	bic.w	r3, r3, #7
 800abce:	3308      	adds	r3, #8
 800abd0:	9303      	str	r3, [sp, #12]
 800abd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abd4:	443b      	add	r3, r7
 800abd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800abd8:	e76a      	b.n	800aab0 <_vfiprintf_r+0x78>
 800abda:	fb0c 3202 	mla	r2, ip, r2, r3
 800abde:	460c      	mov	r4, r1
 800abe0:	2001      	movs	r0, #1
 800abe2:	e7a8      	b.n	800ab36 <_vfiprintf_r+0xfe>
 800abe4:	2300      	movs	r3, #0
 800abe6:	3401      	adds	r4, #1
 800abe8:	9305      	str	r3, [sp, #20]
 800abea:	4619      	mov	r1, r3
 800abec:	f04f 0c0a 	mov.w	ip, #10
 800abf0:	4620      	mov	r0, r4
 800abf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abf6:	3a30      	subs	r2, #48	@ 0x30
 800abf8:	2a09      	cmp	r2, #9
 800abfa:	d903      	bls.n	800ac04 <_vfiprintf_r+0x1cc>
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d0c6      	beq.n	800ab8e <_vfiprintf_r+0x156>
 800ac00:	9105      	str	r1, [sp, #20]
 800ac02:	e7c4      	b.n	800ab8e <_vfiprintf_r+0x156>
 800ac04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac08:	4604      	mov	r4, r0
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e7f0      	b.n	800abf0 <_vfiprintf_r+0x1b8>
 800ac0e:	ab03      	add	r3, sp, #12
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	462a      	mov	r2, r5
 800ac14:	4b12      	ldr	r3, [pc, #72]	@ (800ac60 <_vfiprintf_r+0x228>)
 800ac16:	a904      	add	r1, sp, #16
 800ac18:	4630      	mov	r0, r6
 800ac1a:	f7fc fa8f 	bl	800713c <_printf_float>
 800ac1e:	4607      	mov	r7, r0
 800ac20:	1c78      	adds	r0, r7, #1
 800ac22:	d1d6      	bne.n	800abd2 <_vfiprintf_r+0x19a>
 800ac24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac26:	07d9      	lsls	r1, r3, #31
 800ac28:	d405      	bmi.n	800ac36 <_vfiprintf_r+0x1fe>
 800ac2a:	89ab      	ldrh	r3, [r5, #12]
 800ac2c:	059a      	lsls	r2, r3, #22
 800ac2e:	d402      	bmi.n	800ac36 <_vfiprintf_r+0x1fe>
 800ac30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac32:	f7fd faf1 	bl	8008218 <__retarget_lock_release_recursive>
 800ac36:	89ab      	ldrh	r3, [r5, #12]
 800ac38:	065b      	lsls	r3, r3, #25
 800ac3a:	f53f af1f 	bmi.w	800aa7c <_vfiprintf_r+0x44>
 800ac3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac40:	e71e      	b.n	800aa80 <_vfiprintf_r+0x48>
 800ac42:	ab03      	add	r3, sp, #12
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	462a      	mov	r2, r5
 800ac48:	4b05      	ldr	r3, [pc, #20]	@ (800ac60 <_vfiprintf_r+0x228>)
 800ac4a:	a904      	add	r1, sp, #16
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	f7fc fd0d 	bl	800766c <_printf_i>
 800ac52:	e7e4      	b.n	800ac1e <_vfiprintf_r+0x1e6>
 800ac54:	0800ba21 	.word	0x0800ba21
 800ac58:	0800ba2b 	.word	0x0800ba2b
 800ac5c:	0800713d 	.word	0x0800713d
 800ac60:	0800aa13 	.word	0x0800aa13
 800ac64:	0800ba27 	.word	0x0800ba27

0800ac68 <__sflush_r>:
 800ac68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac70:	0716      	lsls	r6, r2, #28
 800ac72:	4605      	mov	r5, r0
 800ac74:	460c      	mov	r4, r1
 800ac76:	d454      	bmi.n	800ad22 <__sflush_r+0xba>
 800ac78:	684b      	ldr	r3, [r1, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	dc02      	bgt.n	800ac84 <__sflush_r+0x1c>
 800ac7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	dd48      	ble.n	800ad16 <__sflush_r+0xae>
 800ac84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac86:	2e00      	cmp	r6, #0
 800ac88:	d045      	beq.n	800ad16 <__sflush_r+0xae>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac90:	682f      	ldr	r7, [r5, #0]
 800ac92:	6a21      	ldr	r1, [r4, #32]
 800ac94:	602b      	str	r3, [r5, #0]
 800ac96:	d030      	beq.n	800acfa <__sflush_r+0x92>
 800ac98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	0759      	lsls	r1, r3, #29
 800ac9e:	d505      	bpl.n	800acac <__sflush_r+0x44>
 800aca0:	6863      	ldr	r3, [r4, #4]
 800aca2:	1ad2      	subs	r2, r2, r3
 800aca4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aca6:	b10b      	cbz	r3, 800acac <__sflush_r+0x44>
 800aca8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800acaa:	1ad2      	subs	r2, r2, r3
 800acac:	2300      	movs	r3, #0
 800acae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800acb0:	6a21      	ldr	r1, [r4, #32]
 800acb2:	4628      	mov	r0, r5
 800acb4:	47b0      	blx	r6
 800acb6:	1c43      	adds	r3, r0, #1
 800acb8:	89a3      	ldrh	r3, [r4, #12]
 800acba:	d106      	bne.n	800acca <__sflush_r+0x62>
 800acbc:	6829      	ldr	r1, [r5, #0]
 800acbe:	291d      	cmp	r1, #29
 800acc0:	d82b      	bhi.n	800ad1a <__sflush_r+0xb2>
 800acc2:	4a2a      	ldr	r2, [pc, #168]	@ (800ad6c <__sflush_r+0x104>)
 800acc4:	40ca      	lsrs	r2, r1
 800acc6:	07d6      	lsls	r6, r2, #31
 800acc8:	d527      	bpl.n	800ad1a <__sflush_r+0xb2>
 800acca:	2200      	movs	r2, #0
 800accc:	6062      	str	r2, [r4, #4]
 800acce:	04d9      	lsls	r1, r3, #19
 800acd0:	6922      	ldr	r2, [r4, #16]
 800acd2:	6022      	str	r2, [r4, #0]
 800acd4:	d504      	bpl.n	800ace0 <__sflush_r+0x78>
 800acd6:	1c42      	adds	r2, r0, #1
 800acd8:	d101      	bne.n	800acde <__sflush_r+0x76>
 800acda:	682b      	ldr	r3, [r5, #0]
 800acdc:	b903      	cbnz	r3, 800ace0 <__sflush_r+0x78>
 800acde:	6560      	str	r0, [r4, #84]	@ 0x54
 800ace0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ace2:	602f      	str	r7, [r5, #0]
 800ace4:	b1b9      	cbz	r1, 800ad16 <__sflush_r+0xae>
 800ace6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acea:	4299      	cmp	r1, r3
 800acec:	d002      	beq.n	800acf4 <__sflush_r+0x8c>
 800acee:	4628      	mov	r0, r5
 800acf0:	f7fe f8f2 	bl	8008ed8 <_free_r>
 800acf4:	2300      	movs	r3, #0
 800acf6:	6363      	str	r3, [r4, #52]	@ 0x34
 800acf8:	e00d      	b.n	800ad16 <__sflush_r+0xae>
 800acfa:	2301      	movs	r3, #1
 800acfc:	4628      	mov	r0, r5
 800acfe:	47b0      	blx	r6
 800ad00:	4602      	mov	r2, r0
 800ad02:	1c50      	adds	r0, r2, #1
 800ad04:	d1c9      	bne.n	800ac9a <__sflush_r+0x32>
 800ad06:	682b      	ldr	r3, [r5, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d0c6      	beq.n	800ac9a <__sflush_r+0x32>
 800ad0c:	2b1d      	cmp	r3, #29
 800ad0e:	d001      	beq.n	800ad14 <__sflush_r+0xac>
 800ad10:	2b16      	cmp	r3, #22
 800ad12:	d11e      	bne.n	800ad52 <__sflush_r+0xea>
 800ad14:	602f      	str	r7, [r5, #0]
 800ad16:	2000      	movs	r0, #0
 800ad18:	e022      	b.n	800ad60 <__sflush_r+0xf8>
 800ad1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad1e:	b21b      	sxth	r3, r3
 800ad20:	e01b      	b.n	800ad5a <__sflush_r+0xf2>
 800ad22:	690f      	ldr	r7, [r1, #16]
 800ad24:	2f00      	cmp	r7, #0
 800ad26:	d0f6      	beq.n	800ad16 <__sflush_r+0xae>
 800ad28:	0793      	lsls	r3, r2, #30
 800ad2a:	680e      	ldr	r6, [r1, #0]
 800ad2c:	bf08      	it	eq
 800ad2e:	694b      	ldreq	r3, [r1, #20]
 800ad30:	600f      	str	r7, [r1, #0]
 800ad32:	bf18      	it	ne
 800ad34:	2300      	movne	r3, #0
 800ad36:	eba6 0807 	sub.w	r8, r6, r7
 800ad3a:	608b      	str	r3, [r1, #8]
 800ad3c:	f1b8 0f00 	cmp.w	r8, #0
 800ad40:	dde9      	ble.n	800ad16 <__sflush_r+0xae>
 800ad42:	6a21      	ldr	r1, [r4, #32]
 800ad44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ad46:	4643      	mov	r3, r8
 800ad48:	463a      	mov	r2, r7
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	47b0      	blx	r6
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	dc08      	bgt.n	800ad64 <__sflush_r+0xfc>
 800ad52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad5a:	81a3      	strh	r3, [r4, #12]
 800ad5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad64:	4407      	add	r7, r0
 800ad66:	eba8 0800 	sub.w	r8, r8, r0
 800ad6a:	e7e7      	b.n	800ad3c <__sflush_r+0xd4>
 800ad6c:	20400001 	.word	0x20400001

0800ad70 <_fflush_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	690b      	ldr	r3, [r1, #16]
 800ad74:	4605      	mov	r5, r0
 800ad76:	460c      	mov	r4, r1
 800ad78:	b913      	cbnz	r3, 800ad80 <_fflush_r+0x10>
 800ad7a:	2500      	movs	r5, #0
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	b118      	cbz	r0, 800ad8a <_fflush_r+0x1a>
 800ad82:	6a03      	ldr	r3, [r0, #32]
 800ad84:	b90b      	cbnz	r3, 800ad8a <_fflush_r+0x1a>
 800ad86:	f7fd f829 	bl	8007ddc <__sinit>
 800ad8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d0f3      	beq.n	800ad7a <_fflush_r+0xa>
 800ad92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad94:	07d0      	lsls	r0, r2, #31
 800ad96:	d404      	bmi.n	800ada2 <_fflush_r+0x32>
 800ad98:	0599      	lsls	r1, r3, #22
 800ad9a:	d402      	bmi.n	800ada2 <_fflush_r+0x32>
 800ad9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad9e:	f7fd fa3a 	bl	8008216 <__retarget_lock_acquire_recursive>
 800ada2:	4628      	mov	r0, r5
 800ada4:	4621      	mov	r1, r4
 800ada6:	f7ff ff5f 	bl	800ac68 <__sflush_r>
 800adaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800adac:	07da      	lsls	r2, r3, #31
 800adae:	4605      	mov	r5, r0
 800adb0:	d4e4      	bmi.n	800ad7c <_fflush_r+0xc>
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	059b      	lsls	r3, r3, #22
 800adb6:	d4e1      	bmi.n	800ad7c <_fflush_r+0xc>
 800adb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800adba:	f7fd fa2d 	bl	8008218 <__retarget_lock_release_recursive>
 800adbe:	e7dd      	b.n	800ad7c <_fflush_r+0xc>

0800adc0 <__swhatbuf_r>:
 800adc0:	b570      	push	{r4, r5, r6, lr}
 800adc2:	460c      	mov	r4, r1
 800adc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc8:	2900      	cmp	r1, #0
 800adca:	b096      	sub	sp, #88	@ 0x58
 800adcc:	4615      	mov	r5, r2
 800adce:	461e      	mov	r6, r3
 800add0:	da0d      	bge.n	800adee <__swhatbuf_r+0x2e>
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800add8:	f04f 0100 	mov.w	r1, #0
 800addc:	bf14      	ite	ne
 800adde:	2340      	movne	r3, #64	@ 0x40
 800ade0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ade4:	2000      	movs	r0, #0
 800ade6:	6031      	str	r1, [r6, #0]
 800ade8:	602b      	str	r3, [r5, #0]
 800adea:	b016      	add	sp, #88	@ 0x58
 800adec:	bd70      	pop	{r4, r5, r6, pc}
 800adee:	466a      	mov	r2, sp
 800adf0:	f000 f874 	bl	800aedc <_fstat_r>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	dbec      	blt.n	800add2 <__swhatbuf_r+0x12>
 800adf8:	9901      	ldr	r1, [sp, #4]
 800adfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800adfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae02:	4259      	negs	r1, r3
 800ae04:	4159      	adcs	r1, r3
 800ae06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae0a:	e7eb      	b.n	800ade4 <__swhatbuf_r+0x24>

0800ae0c <__smakebuf_r>:
 800ae0c:	898b      	ldrh	r3, [r1, #12]
 800ae0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae10:	079d      	lsls	r5, r3, #30
 800ae12:	4606      	mov	r6, r0
 800ae14:	460c      	mov	r4, r1
 800ae16:	d507      	bpl.n	800ae28 <__smakebuf_r+0x1c>
 800ae18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	6123      	str	r3, [r4, #16]
 800ae20:	2301      	movs	r3, #1
 800ae22:	6163      	str	r3, [r4, #20]
 800ae24:	b003      	add	sp, #12
 800ae26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae28:	ab01      	add	r3, sp, #4
 800ae2a:	466a      	mov	r2, sp
 800ae2c:	f7ff ffc8 	bl	800adc0 <__swhatbuf_r>
 800ae30:	9f00      	ldr	r7, [sp, #0]
 800ae32:	4605      	mov	r5, r0
 800ae34:	4639      	mov	r1, r7
 800ae36:	4630      	mov	r0, r6
 800ae38:	f7fe f8c2 	bl	8008fc0 <_malloc_r>
 800ae3c:	b948      	cbnz	r0, 800ae52 <__smakebuf_r+0x46>
 800ae3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae42:	059a      	lsls	r2, r3, #22
 800ae44:	d4ee      	bmi.n	800ae24 <__smakebuf_r+0x18>
 800ae46:	f023 0303 	bic.w	r3, r3, #3
 800ae4a:	f043 0302 	orr.w	r3, r3, #2
 800ae4e:	81a3      	strh	r3, [r4, #12]
 800ae50:	e7e2      	b.n	800ae18 <__smakebuf_r+0xc>
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	6020      	str	r0, [r4, #0]
 800ae56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae5a:	81a3      	strh	r3, [r4, #12]
 800ae5c:	9b01      	ldr	r3, [sp, #4]
 800ae5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae62:	b15b      	cbz	r3, 800ae7c <__smakebuf_r+0x70>
 800ae64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae68:	4630      	mov	r0, r6
 800ae6a:	f000 f849 	bl	800af00 <_isatty_r>
 800ae6e:	b128      	cbz	r0, 800ae7c <__smakebuf_r+0x70>
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	f023 0303 	bic.w	r3, r3, #3
 800ae76:	f043 0301 	orr.w	r3, r3, #1
 800ae7a:	81a3      	strh	r3, [r4, #12]
 800ae7c:	89a3      	ldrh	r3, [r4, #12]
 800ae7e:	431d      	orrs	r5, r3
 800ae80:	81a5      	strh	r5, [r4, #12]
 800ae82:	e7cf      	b.n	800ae24 <__smakebuf_r+0x18>

0800ae84 <memmove>:
 800ae84:	4288      	cmp	r0, r1
 800ae86:	b510      	push	{r4, lr}
 800ae88:	eb01 0402 	add.w	r4, r1, r2
 800ae8c:	d902      	bls.n	800ae94 <memmove+0x10>
 800ae8e:	4284      	cmp	r4, r0
 800ae90:	4623      	mov	r3, r4
 800ae92:	d807      	bhi.n	800aea4 <memmove+0x20>
 800ae94:	1e43      	subs	r3, r0, #1
 800ae96:	42a1      	cmp	r1, r4
 800ae98:	d008      	beq.n	800aeac <memmove+0x28>
 800ae9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aea2:	e7f8      	b.n	800ae96 <memmove+0x12>
 800aea4:	4402      	add	r2, r0
 800aea6:	4601      	mov	r1, r0
 800aea8:	428a      	cmp	r2, r1
 800aeaa:	d100      	bne.n	800aeae <memmove+0x2a>
 800aeac:	bd10      	pop	{r4, pc}
 800aeae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aeb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aeb6:	e7f7      	b.n	800aea8 <memmove+0x24>

0800aeb8 <strncmp>:
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	b16a      	cbz	r2, 800aed8 <strncmp+0x20>
 800aebc:	3901      	subs	r1, #1
 800aebe:	1884      	adds	r4, r0, r2
 800aec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aec4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d103      	bne.n	800aed4 <strncmp+0x1c>
 800aecc:	42a0      	cmp	r0, r4
 800aece:	d001      	beq.n	800aed4 <strncmp+0x1c>
 800aed0:	2a00      	cmp	r2, #0
 800aed2:	d1f5      	bne.n	800aec0 <strncmp+0x8>
 800aed4:	1ad0      	subs	r0, r2, r3
 800aed6:	bd10      	pop	{r4, pc}
 800aed8:	4610      	mov	r0, r2
 800aeda:	e7fc      	b.n	800aed6 <strncmp+0x1e>

0800aedc <_fstat_r>:
 800aedc:	b538      	push	{r3, r4, r5, lr}
 800aede:	4d07      	ldr	r5, [pc, #28]	@ (800aefc <_fstat_r+0x20>)
 800aee0:	2300      	movs	r3, #0
 800aee2:	4604      	mov	r4, r0
 800aee4:	4608      	mov	r0, r1
 800aee6:	4611      	mov	r1, r2
 800aee8:	602b      	str	r3, [r5, #0]
 800aeea:	f7f7 faab 	bl	8002444 <_fstat>
 800aeee:	1c43      	adds	r3, r0, #1
 800aef0:	d102      	bne.n	800aef8 <_fstat_r+0x1c>
 800aef2:	682b      	ldr	r3, [r5, #0]
 800aef4:	b103      	cbz	r3, 800aef8 <_fstat_r+0x1c>
 800aef6:	6023      	str	r3, [r4, #0]
 800aef8:	bd38      	pop	{r3, r4, r5, pc}
 800aefa:	bf00      	nop
 800aefc:	20000548 	.word	0x20000548

0800af00 <_isatty_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	4d06      	ldr	r5, [pc, #24]	@ (800af1c <_isatty_r+0x1c>)
 800af04:	2300      	movs	r3, #0
 800af06:	4604      	mov	r4, r0
 800af08:	4608      	mov	r0, r1
 800af0a:	602b      	str	r3, [r5, #0]
 800af0c:	f7f7 faaa 	bl	8002464 <_isatty>
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	d102      	bne.n	800af1a <_isatty_r+0x1a>
 800af14:	682b      	ldr	r3, [r5, #0]
 800af16:	b103      	cbz	r3, 800af1a <_isatty_r+0x1a>
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	bd38      	pop	{r3, r4, r5, pc}
 800af1c:	20000548 	.word	0x20000548

0800af20 <_sbrk_r>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	4d06      	ldr	r5, [pc, #24]	@ (800af3c <_sbrk_r+0x1c>)
 800af24:	2300      	movs	r3, #0
 800af26:	4604      	mov	r4, r0
 800af28:	4608      	mov	r0, r1
 800af2a:	602b      	str	r3, [r5, #0]
 800af2c:	f7f7 fab2 	bl	8002494 <_sbrk>
 800af30:	1c43      	adds	r3, r0, #1
 800af32:	d102      	bne.n	800af3a <_sbrk_r+0x1a>
 800af34:	682b      	ldr	r3, [r5, #0]
 800af36:	b103      	cbz	r3, 800af3a <_sbrk_r+0x1a>
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	bd38      	pop	{r3, r4, r5, pc}
 800af3c:	20000548 	.word	0x20000548

0800af40 <memcpy>:
 800af40:	440a      	add	r2, r1
 800af42:	4291      	cmp	r1, r2
 800af44:	f100 33ff 	add.w	r3, r0, #4294967295
 800af48:	d100      	bne.n	800af4c <memcpy+0xc>
 800af4a:	4770      	bx	lr
 800af4c:	b510      	push	{r4, lr}
 800af4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af56:	4291      	cmp	r1, r2
 800af58:	d1f9      	bne.n	800af4e <memcpy+0xe>
 800af5a:	bd10      	pop	{r4, pc}
 800af5c:	0000      	movs	r0, r0
	...

0800af60 <nan>:
 800af60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800af68 <nan+0x8>
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	00000000 	.word	0x00000000
 800af6c:	7ff80000 	.word	0x7ff80000

0800af70 <__assert_func>:
 800af70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af72:	4614      	mov	r4, r2
 800af74:	461a      	mov	r2, r3
 800af76:	4b09      	ldr	r3, [pc, #36]	@ (800af9c <__assert_func+0x2c>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4605      	mov	r5, r0
 800af7c:	68d8      	ldr	r0, [r3, #12]
 800af7e:	b14c      	cbz	r4, 800af94 <__assert_func+0x24>
 800af80:	4b07      	ldr	r3, [pc, #28]	@ (800afa0 <__assert_func+0x30>)
 800af82:	9100      	str	r1, [sp, #0]
 800af84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af88:	4906      	ldr	r1, [pc, #24]	@ (800afa4 <__assert_func+0x34>)
 800af8a:	462b      	mov	r3, r5
 800af8c:	f000 fba8 	bl	800b6e0 <fiprintf>
 800af90:	f000 fbb8 	bl	800b704 <abort>
 800af94:	4b04      	ldr	r3, [pc, #16]	@ (800afa8 <__assert_func+0x38>)
 800af96:	461c      	mov	r4, r3
 800af98:	e7f3      	b.n	800af82 <__assert_func+0x12>
 800af9a:	bf00      	nop
 800af9c:	20000018 	.word	0x20000018
 800afa0:	0800ba3a 	.word	0x0800ba3a
 800afa4:	0800ba47 	.word	0x0800ba47
 800afa8:	0800ba75 	.word	0x0800ba75

0800afac <_calloc_r>:
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	fba1 5402 	umull	r5, r4, r1, r2
 800afb2:	b934      	cbnz	r4, 800afc2 <_calloc_r+0x16>
 800afb4:	4629      	mov	r1, r5
 800afb6:	f7fe f803 	bl	8008fc0 <_malloc_r>
 800afba:	4606      	mov	r6, r0
 800afbc:	b928      	cbnz	r0, 800afca <_calloc_r+0x1e>
 800afbe:	4630      	mov	r0, r6
 800afc0:	bd70      	pop	{r4, r5, r6, pc}
 800afc2:	220c      	movs	r2, #12
 800afc4:	6002      	str	r2, [r0, #0]
 800afc6:	2600      	movs	r6, #0
 800afc8:	e7f9      	b.n	800afbe <_calloc_r+0x12>
 800afca:	462a      	mov	r2, r5
 800afcc:	4621      	mov	r1, r4
 800afce:	f7fd f8a5 	bl	800811c <memset>
 800afd2:	e7f4      	b.n	800afbe <_calloc_r+0x12>

0800afd4 <rshift>:
 800afd4:	6903      	ldr	r3, [r0, #16]
 800afd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800afda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afde:	ea4f 1261 	mov.w	r2, r1, asr #5
 800afe2:	f100 0414 	add.w	r4, r0, #20
 800afe6:	dd45      	ble.n	800b074 <rshift+0xa0>
 800afe8:	f011 011f 	ands.w	r1, r1, #31
 800afec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aff0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aff4:	d10c      	bne.n	800b010 <rshift+0x3c>
 800aff6:	f100 0710 	add.w	r7, r0, #16
 800affa:	4629      	mov	r1, r5
 800affc:	42b1      	cmp	r1, r6
 800affe:	d334      	bcc.n	800b06a <rshift+0x96>
 800b000:	1a9b      	subs	r3, r3, r2
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	1eea      	subs	r2, r5, #3
 800b006:	4296      	cmp	r6, r2
 800b008:	bf38      	it	cc
 800b00a:	2300      	movcc	r3, #0
 800b00c:	4423      	add	r3, r4
 800b00e:	e015      	b.n	800b03c <rshift+0x68>
 800b010:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b014:	f1c1 0820 	rsb	r8, r1, #32
 800b018:	40cf      	lsrs	r7, r1
 800b01a:	f105 0e04 	add.w	lr, r5, #4
 800b01e:	46a1      	mov	r9, r4
 800b020:	4576      	cmp	r6, lr
 800b022:	46f4      	mov	ip, lr
 800b024:	d815      	bhi.n	800b052 <rshift+0x7e>
 800b026:	1a9a      	subs	r2, r3, r2
 800b028:	0092      	lsls	r2, r2, #2
 800b02a:	3a04      	subs	r2, #4
 800b02c:	3501      	adds	r5, #1
 800b02e:	42ae      	cmp	r6, r5
 800b030:	bf38      	it	cc
 800b032:	2200      	movcc	r2, #0
 800b034:	18a3      	adds	r3, r4, r2
 800b036:	50a7      	str	r7, [r4, r2]
 800b038:	b107      	cbz	r7, 800b03c <rshift+0x68>
 800b03a:	3304      	adds	r3, #4
 800b03c:	1b1a      	subs	r2, r3, r4
 800b03e:	42a3      	cmp	r3, r4
 800b040:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b044:	bf08      	it	eq
 800b046:	2300      	moveq	r3, #0
 800b048:	6102      	str	r2, [r0, #16]
 800b04a:	bf08      	it	eq
 800b04c:	6143      	streq	r3, [r0, #20]
 800b04e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b052:	f8dc c000 	ldr.w	ip, [ip]
 800b056:	fa0c fc08 	lsl.w	ip, ip, r8
 800b05a:	ea4c 0707 	orr.w	r7, ip, r7
 800b05e:	f849 7b04 	str.w	r7, [r9], #4
 800b062:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b066:	40cf      	lsrs	r7, r1
 800b068:	e7da      	b.n	800b020 <rshift+0x4c>
 800b06a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b06e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b072:	e7c3      	b.n	800affc <rshift+0x28>
 800b074:	4623      	mov	r3, r4
 800b076:	e7e1      	b.n	800b03c <rshift+0x68>

0800b078 <__hexdig_fun>:
 800b078:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b07c:	2b09      	cmp	r3, #9
 800b07e:	d802      	bhi.n	800b086 <__hexdig_fun+0xe>
 800b080:	3820      	subs	r0, #32
 800b082:	b2c0      	uxtb	r0, r0
 800b084:	4770      	bx	lr
 800b086:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b08a:	2b05      	cmp	r3, #5
 800b08c:	d801      	bhi.n	800b092 <__hexdig_fun+0x1a>
 800b08e:	3847      	subs	r0, #71	@ 0x47
 800b090:	e7f7      	b.n	800b082 <__hexdig_fun+0xa>
 800b092:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b096:	2b05      	cmp	r3, #5
 800b098:	d801      	bhi.n	800b09e <__hexdig_fun+0x26>
 800b09a:	3827      	subs	r0, #39	@ 0x27
 800b09c:	e7f1      	b.n	800b082 <__hexdig_fun+0xa>
 800b09e:	2000      	movs	r0, #0
 800b0a0:	4770      	bx	lr
	...

0800b0a4 <__gethex>:
 800b0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	b085      	sub	sp, #20
 800b0aa:	468a      	mov	sl, r1
 800b0ac:	9302      	str	r3, [sp, #8]
 800b0ae:	680b      	ldr	r3, [r1, #0]
 800b0b0:	9001      	str	r0, [sp, #4]
 800b0b2:	4690      	mov	r8, r2
 800b0b4:	1c9c      	adds	r4, r3, #2
 800b0b6:	46a1      	mov	r9, r4
 800b0b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b0bc:	2830      	cmp	r0, #48	@ 0x30
 800b0be:	d0fa      	beq.n	800b0b6 <__gethex+0x12>
 800b0c0:	eba9 0303 	sub.w	r3, r9, r3
 800b0c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800b0c8:	f7ff ffd6 	bl	800b078 <__hexdig_fun>
 800b0cc:	4605      	mov	r5, r0
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	d168      	bne.n	800b1a4 <__gethex+0x100>
 800b0d2:	49a0      	ldr	r1, [pc, #640]	@ (800b354 <__gethex+0x2b0>)
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	4648      	mov	r0, r9
 800b0d8:	f7ff feee 	bl	800aeb8 <strncmp>
 800b0dc:	4607      	mov	r7, r0
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	d167      	bne.n	800b1b2 <__gethex+0x10e>
 800b0e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b0e6:	4626      	mov	r6, r4
 800b0e8:	f7ff ffc6 	bl	800b078 <__hexdig_fun>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d062      	beq.n	800b1b6 <__gethex+0x112>
 800b0f0:	4623      	mov	r3, r4
 800b0f2:	7818      	ldrb	r0, [r3, #0]
 800b0f4:	2830      	cmp	r0, #48	@ 0x30
 800b0f6:	4699      	mov	r9, r3
 800b0f8:	f103 0301 	add.w	r3, r3, #1
 800b0fc:	d0f9      	beq.n	800b0f2 <__gethex+0x4e>
 800b0fe:	f7ff ffbb 	bl	800b078 <__hexdig_fun>
 800b102:	fab0 f580 	clz	r5, r0
 800b106:	096d      	lsrs	r5, r5, #5
 800b108:	f04f 0b01 	mov.w	fp, #1
 800b10c:	464a      	mov	r2, r9
 800b10e:	4616      	mov	r6, r2
 800b110:	3201      	adds	r2, #1
 800b112:	7830      	ldrb	r0, [r6, #0]
 800b114:	f7ff ffb0 	bl	800b078 <__hexdig_fun>
 800b118:	2800      	cmp	r0, #0
 800b11a:	d1f8      	bne.n	800b10e <__gethex+0x6a>
 800b11c:	498d      	ldr	r1, [pc, #564]	@ (800b354 <__gethex+0x2b0>)
 800b11e:	2201      	movs	r2, #1
 800b120:	4630      	mov	r0, r6
 800b122:	f7ff fec9 	bl	800aeb8 <strncmp>
 800b126:	2800      	cmp	r0, #0
 800b128:	d13f      	bne.n	800b1aa <__gethex+0x106>
 800b12a:	b944      	cbnz	r4, 800b13e <__gethex+0x9a>
 800b12c:	1c74      	adds	r4, r6, #1
 800b12e:	4622      	mov	r2, r4
 800b130:	4616      	mov	r6, r2
 800b132:	3201      	adds	r2, #1
 800b134:	7830      	ldrb	r0, [r6, #0]
 800b136:	f7ff ff9f 	bl	800b078 <__hexdig_fun>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d1f8      	bne.n	800b130 <__gethex+0x8c>
 800b13e:	1ba4      	subs	r4, r4, r6
 800b140:	00a7      	lsls	r7, r4, #2
 800b142:	7833      	ldrb	r3, [r6, #0]
 800b144:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b148:	2b50      	cmp	r3, #80	@ 0x50
 800b14a:	d13e      	bne.n	800b1ca <__gethex+0x126>
 800b14c:	7873      	ldrb	r3, [r6, #1]
 800b14e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b150:	d033      	beq.n	800b1ba <__gethex+0x116>
 800b152:	2b2d      	cmp	r3, #45	@ 0x2d
 800b154:	d034      	beq.n	800b1c0 <__gethex+0x11c>
 800b156:	1c71      	adds	r1, r6, #1
 800b158:	2400      	movs	r4, #0
 800b15a:	7808      	ldrb	r0, [r1, #0]
 800b15c:	f7ff ff8c 	bl	800b078 <__hexdig_fun>
 800b160:	1e43      	subs	r3, r0, #1
 800b162:	b2db      	uxtb	r3, r3
 800b164:	2b18      	cmp	r3, #24
 800b166:	d830      	bhi.n	800b1ca <__gethex+0x126>
 800b168:	f1a0 0210 	sub.w	r2, r0, #16
 800b16c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b170:	f7ff ff82 	bl	800b078 <__hexdig_fun>
 800b174:	f100 3cff 	add.w	ip, r0, #4294967295
 800b178:	fa5f fc8c 	uxtb.w	ip, ip
 800b17c:	f1bc 0f18 	cmp.w	ip, #24
 800b180:	f04f 030a 	mov.w	r3, #10
 800b184:	d91e      	bls.n	800b1c4 <__gethex+0x120>
 800b186:	b104      	cbz	r4, 800b18a <__gethex+0xe6>
 800b188:	4252      	negs	r2, r2
 800b18a:	4417      	add	r7, r2
 800b18c:	f8ca 1000 	str.w	r1, [sl]
 800b190:	b1ed      	cbz	r5, 800b1ce <__gethex+0x12a>
 800b192:	f1bb 0f00 	cmp.w	fp, #0
 800b196:	bf0c      	ite	eq
 800b198:	2506      	moveq	r5, #6
 800b19a:	2500      	movne	r5, #0
 800b19c:	4628      	mov	r0, r5
 800b19e:	b005      	add	sp, #20
 800b1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a4:	2500      	movs	r5, #0
 800b1a6:	462c      	mov	r4, r5
 800b1a8:	e7b0      	b.n	800b10c <__gethex+0x68>
 800b1aa:	2c00      	cmp	r4, #0
 800b1ac:	d1c7      	bne.n	800b13e <__gethex+0x9a>
 800b1ae:	4627      	mov	r7, r4
 800b1b0:	e7c7      	b.n	800b142 <__gethex+0x9e>
 800b1b2:	464e      	mov	r6, r9
 800b1b4:	462f      	mov	r7, r5
 800b1b6:	2501      	movs	r5, #1
 800b1b8:	e7c3      	b.n	800b142 <__gethex+0x9e>
 800b1ba:	2400      	movs	r4, #0
 800b1bc:	1cb1      	adds	r1, r6, #2
 800b1be:	e7cc      	b.n	800b15a <__gethex+0xb6>
 800b1c0:	2401      	movs	r4, #1
 800b1c2:	e7fb      	b.n	800b1bc <__gethex+0x118>
 800b1c4:	fb03 0002 	mla	r0, r3, r2, r0
 800b1c8:	e7ce      	b.n	800b168 <__gethex+0xc4>
 800b1ca:	4631      	mov	r1, r6
 800b1cc:	e7de      	b.n	800b18c <__gethex+0xe8>
 800b1ce:	eba6 0309 	sub.w	r3, r6, r9
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	2b07      	cmp	r3, #7
 800b1d8:	dc0a      	bgt.n	800b1f0 <__gethex+0x14c>
 800b1da:	9801      	ldr	r0, [sp, #4]
 800b1dc:	f7fd ff7c 	bl	80090d8 <_Balloc>
 800b1e0:	4604      	mov	r4, r0
 800b1e2:	b940      	cbnz	r0, 800b1f6 <__gethex+0x152>
 800b1e4:	4b5c      	ldr	r3, [pc, #368]	@ (800b358 <__gethex+0x2b4>)
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	21e4      	movs	r1, #228	@ 0xe4
 800b1ea:	485c      	ldr	r0, [pc, #368]	@ (800b35c <__gethex+0x2b8>)
 800b1ec:	f7ff fec0 	bl	800af70 <__assert_func>
 800b1f0:	3101      	adds	r1, #1
 800b1f2:	105b      	asrs	r3, r3, #1
 800b1f4:	e7ef      	b.n	800b1d6 <__gethex+0x132>
 800b1f6:	f100 0a14 	add.w	sl, r0, #20
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	4655      	mov	r5, sl
 800b1fe:	469b      	mov	fp, r3
 800b200:	45b1      	cmp	r9, r6
 800b202:	d337      	bcc.n	800b274 <__gethex+0x1d0>
 800b204:	f845 bb04 	str.w	fp, [r5], #4
 800b208:	eba5 050a 	sub.w	r5, r5, sl
 800b20c:	10ad      	asrs	r5, r5, #2
 800b20e:	6125      	str	r5, [r4, #16]
 800b210:	4658      	mov	r0, fp
 800b212:	f7fe f853 	bl	80092bc <__hi0bits>
 800b216:	016d      	lsls	r5, r5, #5
 800b218:	f8d8 6000 	ldr.w	r6, [r8]
 800b21c:	1a2d      	subs	r5, r5, r0
 800b21e:	42b5      	cmp	r5, r6
 800b220:	dd54      	ble.n	800b2cc <__gethex+0x228>
 800b222:	1bad      	subs	r5, r5, r6
 800b224:	4629      	mov	r1, r5
 800b226:	4620      	mov	r0, r4
 800b228:	f7fe fbdf 	bl	80099ea <__any_on>
 800b22c:	4681      	mov	r9, r0
 800b22e:	b178      	cbz	r0, 800b250 <__gethex+0x1ac>
 800b230:	1e6b      	subs	r3, r5, #1
 800b232:	1159      	asrs	r1, r3, #5
 800b234:	f003 021f 	and.w	r2, r3, #31
 800b238:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b23c:	f04f 0901 	mov.w	r9, #1
 800b240:	fa09 f202 	lsl.w	r2, r9, r2
 800b244:	420a      	tst	r2, r1
 800b246:	d003      	beq.n	800b250 <__gethex+0x1ac>
 800b248:	454b      	cmp	r3, r9
 800b24a:	dc36      	bgt.n	800b2ba <__gethex+0x216>
 800b24c:	f04f 0902 	mov.w	r9, #2
 800b250:	4629      	mov	r1, r5
 800b252:	4620      	mov	r0, r4
 800b254:	f7ff febe 	bl	800afd4 <rshift>
 800b258:	442f      	add	r7, r5
 800b25a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b25e:	42bb      	cmp	r3, r7
 800b260:	da42      	bge.n	800b2e8 <__gethex+0x244>
 800b262:	9801      	ldr	r0, [sp, #4]
 800b264:	4621      	mov	r1, r4
 800b266:	f7fd ff77 	bl	8009158 <_Bfree>
 800b26a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b26c:	2300      	movs	r3, #0
 800b26e:	6013      	str	r3, [r2, #0]
 800b270:	25a3      	movs	r5, #163	@ 0xa3
 800b272:	e793      	b.n	800b19c <__gethex+0xf8>
 800b274:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b278:	2a2e      	cmp	r2, #46	@ 0x2e
 800b27a:	d012      	beq.n	800b2a2 <__gethex+0x1fe>
 800b27c:	2b20      	cmp	r3, #32
 800b27e:	d104      	bne.n	800b28a <__gethex+0x1e6>
 800b280:	f845 bb04 	str.w	fp, [r5], #4
 800b284:	f04f 0b00 	mov.w	fp, #0
 800b288:	465b      	mov	r3, fp
 800b28a:	7830      	ldrb	r0, [r6, #0]
 800b28c:	9303      	str	r3, [sp, #12]
 800b28e:	f7ff fef3 	bl	800b078 <__hexdig_fun>
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	f000 000f 	and.w	r0, r0, #15
 800b298:	4098      	lsls	r0, r3
 800b29a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b29e:	3304      	adds	r3, #4
 800b2a0:	e7ae      	b.n	800b200 <__gethex+0x15c>
 800b2a2:	45b1      	cmp	r9, r6
 800b2a4:	d8ea      	bhi.n	800b27c <__gethex+0x1d8>
 800b2a6:	492b      	ldr	r1, [pc, #172]	@ (800b354 <__gethex+0x2b0>)
 800b2a8:	9303      	str	r3, [sp, #12]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f7ff fe03 	bl	800aeb8 <strncmp>
 800b2b2:	9b03      	ldr	r3, [sp, #12]
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d1e1      	bne.n	800b27c <__gethex+0x1d8>
 800b2b8:	e7a2      	b.n	800b200 <__gethex+0x15c>
 800b2ba:	1ea9      	subs	r1, r5, #2
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f7fe fb94 	bl	80099ea <__any_on>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	d0c2      	beq.n	800b24c <__gethex+0x1a8>
 800b2c6:	f04f 0903 	mov.w	r9, #3
 800b2ca:	e7c1      	b.n	800b250 <__gethex+0x1ac>
 800b2cc:	da09      	bge.n	800b2e2 <__gethex+0x23e>
 800b2ce:	1b75      	subs	r5, r6, r5
 800b2d0:	4621      	mov	r1, r4
 800b2d2:	9801      	ldr	r0, [sp, #4]
 800b2d4:	462a      	mov	r2, r5
 800b2d6:	f7fe f94f 	bl	8009578 <__lshift>
 800b2da:	1b7f      	subs	r7, r7, r5
 800b2dc:	4604      	mov	r4, r0
 800b2de:	f100 0a14 	add.w	sl, r0, #20
 800b2e2:	f04f 0900 	mov.w	r9, #0
 800b2e6:	e7b8      	b.n	800b25a <__gethex+0x1b6>
 800b2e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b2ec:	42bd      	cmp	r5, r7
 800b2ee:	dd6f      	ble.n	800b3d0 <__gethex+0x32c>
 800b2f0:	1bed      	subs	r5, r5, r7
 800b2f2:	42ae      	cmp	r6, r5
 800b2f4:	dc34      	bgt.n	800b360 <__gethex+0x2bc>
 800b2f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d022      	beq.n	800b344 <__gethex+0x2a0>
 800b2fe:	2b03      	cmp	r3, #3
 800b300:	d024      	beq.n	800b34c <__gethex+0x2a8>
 800b302:	2b01      	cmp	r3, #1
 800b304:	d115      	bne.n	800b332 <__gethex+0x28e>
 800b306:	42ae      	cmp	r6, r5
 800b308:	d113      	bne.n	800b332 <__gethex+0x28e>
 800b30a:	2e01      	cmp	r6, #1
 800b30c:	d10b      	bne.n	800b326 <__gethex+0x282>
 800b30e:	9a02      	ldr	r2, [sp, #8]
 800b310:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b314:	6013      	str	r3, [r2, #0]
 800b316:	2301      	movs	r3, #1
 800b318:	6123      	str	r3, [r4, #16]
 800b31a:	f8ca 3000 	str.w	r3, [sl]
 800b31e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b320:	2562      	movs	r5, #98	@ 0x62
 800b322:	601c      	str	r4, [r3, #0]
 800b324:	e73a      	b.n	800b19c <__gethex+0xf8>
 800b326:	1e71      	subs	r1, r6, #1
 800b328:	4620      	mov	r0, r4
 800b32a:	f7fe fb5e 	bl	80099ea <__any_on>
 800b32e:	2800      	cmp	r0, #0
 800b330:	d1ed      	bne.n	800b30e <__gethex+0x26a>
 800b332:	9801      	ldr	r0, [sp, #4]
 800b334:	4621      	mov	r1, r4
 800b336:	f7fd ff0f 	bl	8009158 <_Bfree>
 800b33a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b33c:	2300      	movs	r3, #0
 800b33e:	6013      	str	r3, [r2, #0]
 800b340:	2550      	movs	r5, #80	@ 0x50
 800b342:	e72b      	b.n	800b19c <__gethex+0xf8>
 800b344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1f3      	bne.n	800b332 <__gethex+0x28e>
 800b34a:	e7e0      	b.n	800b30e <__gethex+0x26a>
 800b34c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1dd      	bne.n	800b30e <__gethex+0x26a>
 800b352:	e7ee      	b.n	800b332 <__gethex+0x28e>
 800b354:	0800ba1f 	.word	0x0800ba1f
 800b358:	0800b9b5 	.word	0x0800b9b5
 800b35c:	0800ba76 	.word	0x0800ba76
 800b360:	1e6f      	subs	r7, r5, #1
 800b362:	f1b9 0f00 	cmp.w	r9, #0
 800b366:	d130      	bne.n	800b3ca <__gethex+0x326>
 800b368:	b127      	cbz	r7, 800b374 <__gethex+0x2d0>
 800b36a:	4639      	mov	r1, r7
 800b36c:	4620      	mov	r0, r4
 800b36e:	f7fe fb3c 	bl	80099ea <__any_on>
 800b372:	4681      	mov	r9, r0
 800b374:	117a      	asrs	r2, r7, #5
 800b376:	2301      	movs	r3, #1
 800b378:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b37c:	f007 071f 	and.w	r7, r7, #31
 800b380:	40bb      	lsls	r3, r7
 800b382:	4213      	tst	r3, r2
 800b384:	4629      	mov	r1, r5
 800b386:	4620      	mov	r0, r4
 800b388:	bf18      	it	ne
 800b38a:	f049 0902 	orrne.w	r9, r9, #2
 800b38e:	f7ff fe21 	bl	800afd4 <rshift>
 800b392:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b396:	1b76      	subs	r6, r6, r5
 800b398:	2502      	movs	r5, #2
 800b39a:	f1b9 0f00 	cmp.w	r9, #0
 800b39e:	d047      	beq.n	800b430 <__gethex+0x38c>
 800b3a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d015      	beq.n	800b3d4 <__gethex+0x330>
 800b3a8:	2b03      	cmp	r3, #3
 800b3aa:	d017      	beq.n	800b3dc <__gethex+0x338>
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d109      	bne.n	800b3c4 <__gethex+0x320>
 800b3b0:	f019 0f02 	tst.w	r9, #2
 800b3b4:	d006      	beq.n	800b3c4 <__gethex+0x320>
 800b3b6:	f8da 3000 	ldr.w	r3, [sl]
 800b3ba:	ea49 0903 	orr.w	r9, r9, r3
 800b3be:	f019 0f01 	tst.w	r9, #1
 800b3c2:	d10e      	bne.n	800b3e2 <__gethex+0x33e>
 800b3c4:	f045 0510 	orr.w	r5, r5, #16
 800b3c8:	e032      	b.n	800b430 <__gethex+0x38c>
 800b3ca:	f04f 0901 	mov.w	r9, #1
 800b3ce:	e7d1      	b.n	800b374 <__gethex+0x2d0>
 800b3d0:	2501      	movs	r5, #1
 800b3d2:	e7e2      	b.n	800b39a <__gethex+0x2f6>
 800b3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3d6:	f1c3 0301 	rsb	r3, r3, #1
 800b3da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d0f0      	beq.n	800b3c4 <__gethex+0x320>
 800b3e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b3e6:	f104 0314 	add.w	r3, r4, #20
 800b3ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b3ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b3f2:	f04f 0c00 	mov.w	ip, #0
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b400:	d01b      	beq.n	800b43a <__gethex+0x396>
 800b402:	3201      	adds	r2, #1
 800b404:	6002      	str	r2, [r0, #0]
 800b406:	2d02      	cmp	r5, #2
 800b408:	f104 0314 	add.w	r3, r4, #20
 800b40c:	d13c      	bne.n	800b488 <__gethex+0x3e4>
 800b40e:	f8d8 2000 	ldr.w	r2, [r8]
 800b412:	3a01      	subs	r2, #1
 800b414:	42b2      	cmp	r2, r6
 800b416:	d109      	bne.n	800b42c <__gethex+0x388>
 800b418:	1171      	asrs	r1, r6, #5
 800b41a:	2201      	movs	r2, #1
 800b41c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b420:	f006 061f 	and.w	r6, r6, #31
 800b424:	fa02 f606 	lsl.w	r6, r2, r6
 800b428:	421e      	tst	r6, r3
 800b42a:	d13a      	bne.n	800b4a2 <__gethex+0x3fe>
 800b42c:	f045 0520 	orr.w	r5, r5, #32
 800b430:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b432:	601c      	str	r4, [r3, #0]
 800b434:	9b02      	ldr	r3, [sp, #8]
 800b436:	601f      	str	r7, [r3, #0]
 800b438:	e6b0      	b.n	800b19c <__gethex+0xf8>
 800b43a:	4299      	cmp	r1, r3
 800b43c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b440:	d8d9      	bhi.n	800b3f6 <__gethex+0x352>
 800b442:	68a3      	ldr	r3, [r4, #8]
 800b444:	459b      	cmp	fp, r3
 800b446:	db17      	blt.n	800b478 <__gethex+0x3d4>
 800b448:	6861      	ldr	r1, [r4, #4]
 800b44a:	9801      	ldr	r0, [sp, #4]
 800b44c:	3101      	adds	r1, #1
 800b44e:	f7fd fe43 	bl	80090d8 <_Balloc>
 800b452:	4681      	mov	r9, r0
 800b454:	b918      	cbnz	r0, 800b45e <__gethex+0x3ba>
 800b456:	4b1a      	ldr	r3, [pc, #104]	@ (800b4c0 <__gethex+0x41c>)
 800b458:	4602      	mov	r2, r0
 800b45a:	2184      	movs	r1, #132	@ 0x84
 800b45c:	e6c5      	b.n	800b1ea <__gethex+0x146>
 800b45e:	6922      	ldr	r2, [r4, #16]
 800b460:	3202      	adds	r2, #2
 800b462:	f104 010c 	add.w	r1, r4, #12
 800b466:	0092      	lsls	r2, r2, #2
 800b468:	300c      	adds	r0, #12
 800b46a:	f7ff fd69 	bl	800af40 <memcpy>
 800b46e:	4621      	mov	r1, r4
 800b470:	9801      	ldr	r0, [sp, #4]
 800b472:	f7fd fe71 	bl	8009158 <_Bfree>
 800b476:	464c      	mov	r4, r9
 800b478:	6923      	ldr	r3, [r4, #16]
 800b47a:	1c5a      	adds	r2, r3, #1
 800b47c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b480:	6122      	str	r2, [r4, #16]
 800b482:	2201      	movs	r2, #1
 800b484:	615a      	str	r2, [r3, #20]
 800b486:	e7be      	b.n	800b406 <__gethex+0x362>
 800b488:	6922      	ldr	r2, [r4, #16]
 800b48a:	455a      	cmp	r2, fp
 800b48c:	dd0b      	ble.n	800b4a6 <__gethex+0x402>
 800b48e:	2101      	movs	r1, #1
 800b490:	4620      	mov	r0, r4
 800b492:	f7ff fd9f 	bl	800afd4 <rshift>
 800b496:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b49a:	3701      	adds	r7, #1
 800b49c:	42bb      	cmp	r3, r7
 800b49e:	f6ff aee0 	blt.w	800b262 <__gethex+0x1be>
 800b4a2:	2501      	movs	r5, #1
 800b4a4:	e7c2      	b.n	800b42c <__gethex+0x388>
 800b4a6:	f016 061f 	ands.w	r6, r6, #31
 800b4aa:	d0fa      	beq.n	800b4a2 <__gethex+0x3fe>
 800b4ac:	4453      	add	r3, sl
 800b4ae:	f1c6 0620 	rsb	r6, r6, #32
 800b4b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b4b6:	f7fd ff01 	bl	80092bc <__hi0bits>
 800b4ba:	42b0      	cmp	r0, r6
 800b4bc:	dbe7      	blt.n	800b48e <__gethex+0x3ea>
 800b4be:	e7f0      	b.n	800b4a2 <__gethex+0x3fe>
 800b4c0:	0800b9b5 	.word	0x0800b9b5

0800b4c4 <L_shift>:
 800b4c4:	f1c2 0208 	rsb	r2, r2, #8
 800b4c8:	0092      	lsls	r2, r2, #2
 800b4ca:	b570      	push	{r4, r5, r6, lr}
 800b4cc:	f1c2 0620 	rsb	r6, r2, #32
 800b4d0:	6843      	ldr	r3, [r0, #4]
 800b4d2:	6804      	ldr	r4, [r0, #0]
 800b4d4:	fa03 f506 	lsl.w	r5, r3, r6
 800b4d8:	432c      	orrs	r4, r5
 800b4da:	40d3      	lsrs	r3, r2
 800b4dc:	6004      	str	r4, [r0, #0]
 800b4de:	f840 3f04 	str.w	r3, [r0, #4]!
 800b4e2:	4288      	cmp	r0, r1
 800b4e4:	d3f4      	bcc.n	800b4d0 <L_shift+0xc>
 800b4e6:	bd70      	pop	{r4, r5, r6, pc}

0800b4e8 <__match>:
 800b4e8:	b530      	push	{r4, r5, lr}
 800b4ea:	6803      	ldr	r3, [r0, #0]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4f2:	b914      	cbnz	r4, 800b4fa <__match+0x12>
 800b4f4:	6003      	str	r3, [r0, #0]
 800b4f6:	2001      	movs	r0, #1
 800b4f8:	bd30      	pop	{r4, r5, pc}
 800b4fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b502:	2d19      	cmp	r5, #25
 800b504:	bf98      	it	ls
 800b506:	3220      	addls	r2, #32
 800b508:	42a2      	cmp	r2, r4
 800b50a:	d0f0      	beq.n	800b4ee <__match+0x6>
 800b50c:	2000      	movs	r0, #0
 800b50e:	e7f3      	b.n	800b4f8 <__match+0x10>

0800b510 <__hexnan>:
 800b510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	680b      	ldr	r3, [r1, #0]
 800b516:	6801      	ldr	r1, [r0, #0]
 800b518:	115e      	asrs	r6, r3, #5
 800b51a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b51e:	f013 031f 	ands.w	r3, r3, #31
 800b522:	b087      	sub	sp, #28
 800b524:	bf18      	it	ne
 800b526:	3604      	addne	r6, #4
 800b528:	2500      	movs	r5, #0
 800b52a:	1f37      	subs	r7, r6, #4
 800b52c:	4682      	mov	sl, r0
 800b52e:	4690      	mov	r8, r2
 800b530:	9301      	str	r3, [sp, #4]
 800b532:	f846 5c04 	str.w	r5, [r6, #-4]
 800b536:	46b9      	mov	r9, r7
 800b538:	463c      	mov	r4, r7
 800b53a:	9502      	str	r5, [sp, #8]
 800b53c:	46ab      	mov	fp, r5
 800b53e:	784a      	ldrb	r2, [r1, #1]
 800b540:	1c4b      	adds	r3, r1, #1
 800b542:	9303      	str	r3, [sp, #12]
 800b544:	b342      	cbz	r2, 800b598 <__hexnan+0x88>
 800b546:	4610      	mov	r0, r2
 800b548:	9105      	str	r1, [sp, #20]
 800b54a:	9204      	str	r2, [sp, #16]
 800b54c:	f7ff fd94 	bl	800b078 <__hexdig_fun>
 800b550:	2800      	cmp	r0, #0
 800b552:	d151      	bne.n	800b5f8 <__hexnan+0xe8>
 800b554:	9a04      	ldr	r2, [sp, #16]
 800b556:	9905      	ldr	r1, [sp, #20]
 800b558:	2a20      	cmp	r2, #32
 800b55a:	d818      	bhi.n	800b58e <__hexnan+0x7e>
 800b55c:	9b02      	ldr	r3, [sp, #8]
 800b55e:	459b      	cmp	fp, r3
 800b560:	dd13      	ble.n	800b58a <__hexnan+0x7a>
 800b562:	454c      	cmp	r4, r9
 800b564:	d206      	bcs.n	800b574 <__hexnan+0x64>
 800b566:	2d07      	cmp	r5, #7
 800b568:	dc04      	bgt.n	800b574 <__hexnan+0x64>
 800b56a:	462a      	mov	r2, r5
 800b56c:	4649      	mov	r1, r9
 800b56e:	4620      	mov	r0, r4
 800b570:	f7ff ffa8 	bl	800b4c4 <L_shift>
 800b574:	4544      	cmp	r4, r8
 800b576:	d952      	bls.n	800b61e <__hexnan+0x10e>
 800b578:	2300      	movs	r3, #0
 800b57a:	f1a4 0904 	sub.w	r9, r4, #4
 800b57e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b582:	f8cd b008 	str.w	fp, [sp, #8]
 800b586:	464c      	mov	r4, r9
 800b588:	461d      	mov	r5, r3
 800b58a:	9903      	ldr	r1, [sp, #12]
 800b58c:	e7d7      	b.n	800b53e <__hexnan+0x2e>
 800b58e:	2a29      	cmp	r2, #41	@ 0x29
 800b590:	d157      	bne.n	800b642 <__hexnan+0x132>
 800b592:	3102      	adds	r1, #2
 800b594:	f8ca 1000 	str.w	r1, [sl]
 800b598:	f1bb 0f00 	cmp.w	fp, #0
 800b59c:	d051      	beq.n	800b642 <__hexnan+0x132>
 800b59e:	454c      	cmp	r4, r9
 800b5a0:	d206      	bcs.n	800b5b0 <__hexnan+0xa0>
 800b5a2:	2d07      	cmp	r5, #7
 800b5a4:	dc04      	bgt.n	800b5b0 <__hexnan+0xa0>
 800b5a6:	462a      	mov	r2, r5
 800b5a8:	4649      	mov	r1, r9
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f7ff ff8a 	bl	800b4c4 <L_shift>
 800b5b0:	4544      	cmp	r4, r8
 800b5b2:	d936      	bls.n	800b622 <__hexnan+0x112>
 800b5b4:	f1a8 0204 	sub.w	r2, r8, #4
 800b5b8:	4623      	mov	r3, r4
 800b5ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800b5be:	f842 1f04 	str.w	r1, [r2, #4]!
 800b5c2:	429f      	cmp	r7, r3
 800b5c4:	d2f9      	bcs.n	800b5ba <__hexnan+0xaa>
 800b5c6:	1b3b      	subs	r3, r7, r4
 800b5c8:	f023 0303 	bic.w	r3, r3, #3
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	3401      	adds	r4, #1
 800b5d0:	3e03      	subs	r6, #3
 800b5d2:	42b4      	cmp	r4, r6
 800b5d4:	bf88      	it	hi
 800b5d6:	2304      	movhi	r3, #4
 800b5d8:	4443      	add	r3, r8
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f843 2b04 	str.w	r2, [r3], #4
 800b5e0:	429f      	cmp	r7, r3
 800b5e2:	d2fb      	bcs.n	800b5dc <__hexnan+0xcc>
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	b91b      	cbnz	r3, 800b5f0 <__hexnan+0xe0>
 800b5e8:	4547      	cmp	r7, r8
 800b5ea:	d128      	bne.n	800b63e <__hexnan+0x12e>
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	603b      	str	r3, [r7, #0]
 800b5f0:	2005      	movs	r0, #5
 800b5f2:	b007      	add	sp, #28
 800b5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f8:	3501      	adds	r5, #1
 800b5fa:	2d08      	cmp	r5, #8
 800b5fc:	f10b 0b01 	add.w	fp, fp, #1
 800b600:	dd06      	ble.n	800b610 <__hexnan+0x100>
 800b602:	4544      	cmp	r4, r8
 800b604:	d9c1      	bls.n	800b58a <__hexnan+0x7a>
 800b606:	2300      	movs	r3, #0
 800b608:	f844 3c04 	str.w	r3, [r4, #-4]
 800b60c:	2501      	movs	r5, #1
 800b60e:	3c04      	subs	r4, #4
 800b610:	6822      	ldr	r2, [r4, #0]
 800b612:	f000 000f 	and.w	r0, r0, #15
 800b616:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b61a:	6020      	str	r0, [r4, #0]
 800b61c:	e7b5      	b.n	800b58a <__hexnan+0x7a>
 800b61e:	2508      	movs	r5, #8
 800b620:	e7b3      	b.n	800b58a <__hexnan+0x7a>
 800b622:	9b01      	ldr	r3, [sp, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d0dd      	beq.n	800b5e4 <__hexnan+0xd4>
 800b628:	f1c3 0320 	rsb	r3, r3, #32
 800b62c:	f04f 32ff 	mov.w	r2, #4294967295
 800b630:	40da      	lsrs	r2, r3
 800b632:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b636:	4013      	ands	r3, r2
 800b638:	f846 3c04 	str.w	r3, [r6, #-4]
 800b63c:	e7d2      	b.n	800b5e4 <__hexnan+0xd4>
 800b63e:	3f04      	subs	r7, #4
 800b640:	e7d0      	b.n	800b5e4 <__hexnan+0xd4>
 800b642:	2004      	movs	r0, #4
 800b644:	e7d5      	b.n	800b5f2 <__hexnan+0xe2>

0800b646 <__ascii_mbtowc>:
 800b646:	b082      	sub	sp, #8
 800b648:	b901      	cbnz	r1, 800b64c <__ascii_mbtowc+0x6>
 800b64a:	a901      	add	r1, sp, #4
 800b64c:	b142      	cbz	r2, 800b660 <__ascii_mbtowc+0x1a>
 800b64e:	b14b      	cbz	r3, 800b664 <__ascii_mbtowc+0x1e>
 800b650:	7813      	ldrb	r3, [r2, #0]
 800b652:	600b      	str	r3, [r1, #0]
 800b654:	7812      	ldrb	r2, [r2, #0]
 800b656:	1e10      	subs	r0, r2, #0
 800b658:	bf18      	it	ne
 800b65a:	2001      	movne	r0, #1
 800b65c:	b002      	add	sp, #8
 800b65e:	4770      	bx	lr
 800b660:	4610      	mov	r0, r2
 800b662:	e7fb      	b.n	800b65c <__ascii_mbtowc+0x16>
 800b664:	f06f 0001 	mvn.w	r0, #1
 800b668:	e7f8      	b.n	800b65c <__ascii_mbtowc+0x16>

0800b66a <_realloc_r>:
 800b66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b66e:	4607      	mov	r7, r0
 800b670:	4614      	mov	r4, r2
 800b672:	460d      	mov	r5, r1
 800b674:	b921      	cbnz	r1, 800b680 <_realloc_r+0x16>
 800b676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b67a:	4611      	mov	r1, r2
 800b67c:	f7fd bca0 	b.w	8008fc0 <_malloc_r>
 800b680:	b92a      	cbnz	r2, 800b68e <_realloc_r+0x24>
 800b682:	f7fd fc29 	bl	8008ed8 <_free_r>
 800b686:	4625      	mov	r5, r4
 800b688:	4628      	mov	r0, r5
 800b68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b68e:	f000 f840 	bl	800b712 <_malloc_usable_size_r>
 800b692:	4284      	cmp	r4, r0
 800b694:	4606      	mov	r6, r0
 800b696:	d802      	bhi.n	800b69e <_realloc_r+0x34>
 800b698:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b69c:	d8f4      	bhi.n	800b688 <_realloc_r+0x1e>
 800b69e:	4621      	mov	r1, r4
 800b6a0:	4638      	mov	r0, r7
 800b6a2:	f7fd fc8d 	bl	8008fc0 <_malloc_r>
 800b6a6:	4680      	mov	r8, r0
 800b6a8:	b908      	cbnz	r0, 800b6ae <_realloc_r+0x44>
 800b6aa:	4645      	mov	r5, r8
 800b6ac:	e7ec      	b.n	800b688 <_realloc_r+0x1e>
 800b6ae:	42b4      	cmp	r4, r6
 800b6b0:	4622      	mov	r2, r4
 800b6b2:	4629      	mov	r1, r5
 800b6b4:	bf28      	it	cs
 800b6b6:	4632      	movcs	r2, r6
 800b6b8:	f7ff fc42 	bl	800af40 <memcpy>
 800b6bc:	4629      	mov	r1, r5
 800b6be:	4638      	mov	r0, r7
 800b6c0:	f7fd fc0a 	bl	8008ed8 <_free_r>
 800b6c4:	e7f1      	b.n	800b6aa <_realloc_r+0x40>

0800b6c6 <__ascii_wctomb>:
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	4608      	mov	r0, r1
 800b6ca:	b141      	cbz	r1, 800b6de <__ascii_wctomb+0x18>
 800b6cc:	2aff      	cmp	r2, #255	@ 0xff
 800b6ce:	d904      	bls.n	800b6da <__ascii_wctomb+0x14>
 800b6d0:	228a      	movs	r2, #138	@ 0x8a
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d8:	4770      	bx	lr
 800b6da:	700a      	strb	r2, [r1, #0]
 800b6dc:	2001      	movs	r0, #1
 800b6de:	4770      	bx	lr

0800b6e0 <fiprintf>:
 800b6e0:	b40e      	push	{r1, r2, r3}
 800b6e2:	b503      	push	{r0, r1, lr}
 800b6e4:	4601      	mov	r1, r0
 800b6e6:	ab03      	add	r3, sp, #12
 800b6e8:	4805      	ldr	r0, [pc, #20]	@ (800b700 <fiprintf+0x20>)
 800b6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ee:	6800      	ldr	r0, [r0, #0]
 800b6f0:	9301      	str	r3, [sp, #4]
 800b6f2:	f7ff f9a1 	bl	800aa38 <_vfiprintf_r>
 800b6f6:	b002      	add	sp, #8
 800b6f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6fc:	b003      	add	sp, #12
 800b6fe:	4770      	bx	lr
 800b700:	20000018 	.word	0x20000018

0800b704 <abort>:
 800b704:	b508      	push	{r3, lr}
 800b706:	2006      	movs	r0, #6
 800b708:	f000 f834 	bl	800b774 <raise>
 800b70c:	2001      	movs	r0, #1
 800b70e:	f7f6 fe49 	bl	80023a4 <_exit>

0800b712 <_malloc_usable_size_r>:
 800b712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b716:	1f18      	subs	r0, r3, #4
 800b718:	2b00      	cmp	r3, #0
 800b71a:	bfbc      	itt	lt
 800b71c:	580b      	ldrlt	r3, [r1, r0]
 800b71e:	18c0      	addlt	r0, r0, r3
 800b720:	4770      	bx	lr

0800b722 <_raise_r>:
 800b722:	291f      	cmp	r1, #31
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	4605      	mov	r5, r0
 800b728:	460c      	mov	r4, r1
 800b72a:	d904      	bls.n	800b736 <_raise_r+0x14>
 800b72c:	2316      	movs	r3, #22
 800b72e:	6003      	str	r3, [r0, #0]
 800b730:	f04f 30ff 	mov.w	r0, #4294967295
 800b734:	bd38      	pop	{r3, r4, r5, pc}
 800b736:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b738:	b112      	cbz	r2, 800b740 <_raise_r+0x1e>
 800b73a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b73e:	b94b      	cbnz	r3, 800b754 <_raise_r+0x32>
 800b740:	4628      	mov	r0, r5
 800b742:	f000 f831 	bl	800b7a8 <_getpid_r>
 800b746:	4622      	mov	r2, r4
 800b748:	4601      	mov	r1, r0
 800b74a:	4628      	mov	r0, r5
 800b74c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b750:	f000 b818 	b.w	800b784 <_kill_r>
 800b754:	2b01      	cmp	r3, #1
 800b756:	d00a      	beq.n	800b76e <_raise_r+0x4c>
 800b758:	1c59      	adds	r1, r3, #1
 800b75a:	d103      	bne.n	800b764 <_raise_r+0x42>
 800b75c:	2316      	movs	r3, #22
 800b75e:	6003      	str	r3, [r0, #0]
 800b760:	2001      	movs	r0, #1
 800b762:	e7e7      	b.n	800b734 <_raise_r+0x12>
 800b764:	2100      	movs	r1, #0
 800b766:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b76a:	4620      	mov	r0, r4
 800b76c:	4798      	blx	r3
 800b76e:	2000      	movs	r0, #0
 800b770:	e7e0      	b.n	800b734 <_raise_r+0x12>
	...

0800b774 <raise>:
 800b774:	4b02      	ldr	r3, [pc, #8]	@ (800b780 <raise+0xc>)
 800b776:	4601      	mov	r1, r0
 800b778:	6818      	ldr	r0, [r3, #0]
 800b77a:	f7ff bfd2 	b.w	800b722 <_raise_r>
 800b77e:	bf00      	nop
 800b780:	20000018 	.word	0x20000018

0800b784 <_kill_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4d07      	ldr	r5, [pc, #28]	@ (800b7a4 <_kill_r+0x20>)
 800b788:	2300      	movs	r3, #0
 800b78a:	4604      	mov	r4, r0
 800b78c:	4608      	mov	r0, r1
 800b78e:	4611      	mov	r1, r2
 800b790:	602b      	str	r3, [r5, #0]
 800b792:	f7f6 fdf7 	bl	8002384 <_kill>
 800b796:	1c43      	adds	r3, r0, #1
 800b798:	d102      	bne.n	800b7a0 <_kill_r+0x1c>
 800b79a:	682b      	ldr	r3, [r5, #0]
 800b79c:	b103      	cbz	r3, 800b7a0 <_kill_r+0x1c>
 800b79e:	6023      	str	r3, [r4, #0]
 800b7a0:	bd38      	pop	{r3, r4, r5, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20000548 	.word	0x20000548

0800b7a8 <_getpid_r>:
 800b7a8:	f7f6 bde4 	b.w	8002374 <_getpid>

0800b7ac <_init>:
 800b7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ae:	bf00      	nop
 800b7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7b2:	bc08      	pop	{r3}
 800b7b4:	469e      	mov	lr, r3
 800b7b6:	4770      	bx	lr

0800b7b8 <_fini>:
 800b7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ba:	bf00      	nop
 800b7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7be:	bc08      	pop	{r3}
 800b7c0:	469e      	mov	lr, r3
 800b7c2:	4770      	bx	lr
