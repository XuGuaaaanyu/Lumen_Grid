
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d47c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c0  0800d610  0800d610  0000e610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8d0  0800e8d0  000101d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e8d0  0800e8d0  0000f8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8d8  0800e8d8  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8d8  0800e8d8  0000f8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e8dc  0800e8dc  0000f8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800e8e0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e4  200001d4  0800eab4  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b8  0800eab4  000109b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e80  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003366  00000000  00000000  00029084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  0002c3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011e5  00000000  00000000  0002dae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024794  00000000  00000000  0002eccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0f2  00000000  00000000  00053461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e002c  00000000  00000000  0006e553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e57f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007854  00000000  00000000  0014e5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  00155e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d5f4 	.word	0x0800d5f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800d5f4 	.word	0x0800d5f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <HAL_UART_RxCpltCallback>:
// Callback function of UART interrupt
// MODIFIES: pitch, roll, state
// BT message format: P<ppp>,R<rrr>,S<s>
// where each p, r, and s is one digit in ASCII
// the first digit of pitch and roll indicates plus or minus, '1' for negative values
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	//HAL_UART_DMAPause(huart);
	if (huart->Instance == USART1) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a35      	ldr	r2, [pc, #212]	@ (8001104 <HAL_UART_RxCpltCallback+0xe4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d15f      	bne.n	80010f2 <HAL_UART_RxCpltCallback+0xd2>
		//Find the starting character: 'S'
		int index = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < RX_BUFFER_SIZE; i++)
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	e00a      	b.n	8001052 <HAL_UART_RxCpltCallback+0x32>
		{
			if (Rx_Buffer[i] == 'S')
 800103c:	4a32      	ldr	r2, [pc, #200]	@ (8001108 <HAL_UART_RxCpltCallback+0xe8>)
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b53      	cmp	r3, #83	@ 0x53
 8001046:	d101      	bne.n	800104c <HAL_UART_RxCpltCallback+0x2c>
				index = i;
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < RX_BUFFER_SIZE; i++)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	3301      	adds	r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	2b05      	cmp	r3, #5
 8001056:	ddf1      	ble.n	800103c <HAL_UART_RxCpltCallback+0x1c>
		}
		vol = (Rx_Buffer[(2 + index) % RX_BUFFER_SIZE] - '0') * 1000
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1c99      	adds	r1, r3, #2
 800105c:	4b2b      	ldr	r3, [pc, #172]	@ (800110c <HAL_UART_RxCpltCallback+0xec>)
 800105e:	fb83 3201 	smull	r3, r2, r3, r1
 8001062:	17cb      	asrs	r3, r1, #31
 8001064:	1ad2      	subs	r2, r2, r3
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	1aca      	subs	r2, r1, r3
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <HAL_UART_RxCpltCallback+0xe8>)
 8001072:	5c9b      	ldrb	r3, [r3, r2]
 8001074:	3b30      	subs	r3, #48	@ 0x30
 8001076:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800107a:	fb02 f003 	mul.w	r0, r2, r3
			+ (Rx_Buffer[(3 + index) % RX_BUFFER_SIZE] - '0') * 100
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	1cd9      	adds	r1, r3, #3
 8001082:	4b22      	ldr	r3, [pc, #136]	@ (800110c <HAL_UART_RxCpltCallback+0xec>)
 8001084:	fb83 3201 	smull	r3, r2, r3, r1
 8001088:	17cb      	asrs	r3, r1, #31
 800108a:	1ad2      	subs	r2, r2, r3
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	1aca      	subs	r2, r1, r3
 8001096:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <HAL_UART_RxCpltCallback+0xe8>)
 8001098:	5c9b      	ldrb	r3, [r3, r2]
 800109a:	3b30      	subs	r3, #48	@ 0x30
 800109c:	2264      	movs	r2, #100	@ 0x64
 800109e:	fb02 f303 	mul.w	r3, r2, r3
 80010a2:	4418      	add	r0, r3
			+ (Rx_Buffer[(4 + index) % RX_BUFFER_SIZE] - '0') * 10
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	1d19      	adds	r1, r3, #4
 80010a8:	4b18      	ldr	r3, [pc, #96]	@ (800110c <HAL_UART_RxCpltCallback+0xec>)
 80010aa:	fb83 3201 	smull	r3, r2, r3, r1
 80010ae:	17cb      	asrs	r3, r1, #31
 80010b0:	1ad2      	subs	r2, r2, r3
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	1aca      	subs	r2, r1, r3
 80010bc:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <HAL_UART_RxCpltCallback+0xe8>)
 80010be:	5c9b      	ldrb	r3, [r3, r2]
 80010c0:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4418      	add	r0, r3
			+ (Rx_Buffer[(5 + index) % RX_BUFFER_SIZE] - '0');
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1d59      	adds	r1, r3, #5
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <HAL_UART_RxCpltCallback+0xec>)
 80010d4:	fb83 3201 	smull	r3, r2, r3, r1
 80010d8:	17cb      	asrs	r3, r1, #31
 80010da:	1ad2      	subs	r2, r2, r3
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	1aca      	subs	r2, r1, r3
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <HAL_UART_RxCpltCallback+0xe8>)
 80010e8:	5c9b      	ldrb	r3, [r3, r2]
 80010ea:	3b30      	subs	r3, #48	@ 0x30
 80010ec:	4403      	add	r3, r0
		vol = (Rx_Buffer[(2 + index) % RX_BUFFER_SIZE] - '0') * 1000
 80010ee:	4a08      	ldr	r2, [pc, #32]	@ (8001110 <HAL_UART_RxCpltCallback+0xf0>)
 80010f0:	6013      	str	r3, [r2, #0]
	}
	//HAL_UART_DMAResume(huart);
	//memset(Rx_Buffer, 0, RX_BUFFER_SIZE);
	HAL_UART_Receive_DMA(&huart1, Rx_Buffer, RX_BUFFER_SIZE);
 80010f2:	2206      	movs	r2, #6
 80010f4:	4904      	ldr	r1, [pc, #16]	@ (8001108 <HAL_UART_RxCpltCallback+0xe8>)
 80010f6:	4807      	ldr	r0, [pc, #28]	@ (8001114 <HAL_UART_RxCpltCallback+0xf4>)
 80010f8:	f006 fa4e 	bl	8007598 <HAL_UART_Receive_DMA>
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40013800 	.word	0x40013800
 8001108:	20000450 	.word	0x20000450
 800110c:	2aaaaaab 	.word	0x2aaaaaab
 8001110:	20000458 	.word	0x20000458
 8001114:	200002f4 	.word	0x200002f4

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111a:	b0a7      	sub	sp, #156	@ 0x9c
 800111c:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
	IMU_data imu_data;
	uint32_t FSR_data;
  	char bt_str[20] = { 0 }; /*Bluetooth transmission buffer*/
 800111e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
	Orientation current_ore; /*Current pitch and roll*/
	uint8_t stop = 0; /*Immediate stop*/
 800112e:	2300      	movs	r3, #0
 8001130:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
	//uint16_t duty_cycle = 0; /*Duty cycle of vibration motor PWM*/
	MovingAverage pitch_filter;
	MovingAverage roll_filter;
	char Pa = '\0', Pb = '\0', Pc = '\0';
 8001134:	2300      	movs	r3, #0
 8001136:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800113a:	2300      	movs	r3, #0
 800113c:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8001140:	2300      	movs	r3, #0
 8001142:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	char Ra = '\0', Rb = '\0', Rc = '\0';
 8001146:	2300      	movs	r3, #0
 8001148:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800114c:	2300      	movs	r3, #0
 800114e:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8001152:	2300      	movs	r3, #0
 8001154:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001158:	f001 fc15 	bl	8002986 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115c:	f000 f8f0 	bl	8001340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001160:	f000 fb06 	bl	8001770 <MX_GPIO_Init>
  MX_DMA_Init();
 8001164:	f000 fae6 	bl	8001734 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001168:	f000 fab4 	bl	80016d4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800116c:	f000 f94a 	bl	8001404 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001170:	f000 f9ac 	bl	80014cc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001174:	f000 fa7e 	bl	8001674 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001178:	f000 f9e8 	bl	800154c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	ssd1306_Init();
 800117c:	f000 fea6 	bl	8001ecc <ssd1306_Init>
	ssd1306_Fill(Black);
 8001180:	2000      	movs	r0, #0
 8001182:	f000 ff0d 	bl	8001fa0 <ssd1306_Fill>
	IMU_Init();
 8001186:	f000 fb4f 	bl	8001828 <IMU_Init>
	MovingAverage_Init(&pitch_filter);
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fdee 	bl	8001d70 <MovingAverage_Init>
	MovingAverage_Init(&roll_filter);
 8001194:	463b      	mov	r3, r7
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fdea 	bl	8001d70 <MovingAverage_Init>
	HAL_UART_Receive_DMA(&huart1, Rx_Buffer, RX_BUFFER_SIZE);
 800119c:	2206      	movs	r2, #6
 800119e:	4962      	ldr	r1, [pc, #392]	@ (8001328 <main+0x210>)
 80011a0:	4862      	ldr	r0, [pc, #392]	@ (800132c <main+0x214>)
 80011a2:	f006 f9f9 	bl	8007598 <HAL_UART_Receive_DMA>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//loop_count = (loop_count + 1) % 3;
		read_IMU(&imu_data);
 80011a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fb6c 	bl	8001888 <read_IMU>
		current_ore = get_Orientation(imu_data);
 80011b0:	466a      	mov	r2, sp
 80011b2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80011b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011ba:	e882 0003 	stmia.w	r2, {r0, r1}
 80011be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80011c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c4:	f000 fbfc 	bl	80019c0 <get_Orientation>
 80011c8:	eeb0 7a40 	vmov.f32	s14, s0
 80011cc:	eef0 7a60 	vmov.f32	s15, s1
 80011d0:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 80011d4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		int Fpitch = MovingAverage_Update(&pitch_filter, current_ore.pitch);
 80011d8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	eeb0 0a67 	vmov.f32	s0, s15
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 fde5 	bl	8001db4 <MovingAverage_Update>
 80011ea:	6778      	str	r0, [r7, #116]	@ 0x74
		int Froll = MovingAverage_Update(&roll_filter, current_ore.roll);
 80011ec:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80011f0:	463b      	mov	r3, r7
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fddc 	bl	8001db4 <MovingAverage_Update>
 80011fc:	6738      	str	r0, [r7, #112]	@ 0x70
		read_FSR(&FSR_data);
 80011fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fcd0 	bl	8001ba8 <read_FSR>
		stop = get_Stop(FSR_data);
 8001208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fcba 	bl	8001b84 <get_Stop>
 8001210:	4603      	mov	r3, r0
 8001212:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

		Pb = (abs(Fpitch) / 10) + '0';
 8001216:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001218:	2b00      	cmp	r3, #0
 800121a:	bfb8      	it	lt
 800121c:	425b      	neglt	r3, r3
 800121e:	4a44      	ldr	r2, [pc, #272]	@ (8001330 <main+0x218>)
 8001220:	fb82 1203 	smull	r1, r2, r2, r3
 8001224:	1092      	asrs	r2, r2, #2
 8001226:	17db      	asrs	r3, r3, #31
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	3330      	adds	r3, #48	@ 0x30
 800122e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
		Pc = (abs(Fpitch) % 10) + '0';
 8001232:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001234:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001238:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800123c:	4b3c      	ldr	r3, [pc, #240]	@ (8001330 <main+0x218>)
 800123e:	fb83 1302 	smull	r1, r3, r3, r2
 8001242:	1099      	asrs	r1, r3, #2
 8001244:	17d3      	asrs	r3, r2, #31
 8001246:	1ac9      	subs	r1, r1, r3
 8001248:	460b      	mov	r3, r1
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	1ad1      	subs	r1, r2, r3
 8001252:	b2cb      	uxtb	r3, r1
 8001254:	3330      	adds	r3, #48	@ 0x30
 8001256:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
		if (Fpitch >= 0)
 800125a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800125c:	2b00      	cmp	r3, #0
 800125e:	db03      	blt.n	8001268 <main+0x150>
			Pa = '0';
 8001260:	2330      	movs	r3, #48	@ 0x30
 8001262:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001266:	e002      	b.n	800126e <main+0x156>
		else
			Pa = '1';
 8001268:	2331      	movs	r3, #49	@ 0x31
 800126a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

		Rb = (abs(Froll) / 10) + '0';
 800126e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001270:	2b00      	cmp	r3, #0
 8001272:	bfb8      	it	lt
 8001274:	425b      	neglt	r3, r3
 8001276:	4a2e      	ldr	r2, [pc, #184]	@ (8001330 <main+0x218>)
 8001278:	fb82 1203 	smull	r1, r2, r2, r3
 800127c:	1092      	asrs	r2, r2, #2
 800127e:	17db      	asrs	r3, r3, #31
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	3330      	adds	r3, #48	@ 0x30
 8001286:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
		Rc = (abs(Froll) % 10) + '0';
 800128a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800128c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001290:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001294:	4b26      	ldr	r3, [pc, #152]	@ (8001330 <main+0x218>)
 8001296:	fb83 1302 	smull	r1, r3, r3, r2
 800129a:	1099      	asrs	r1, r3, #2
 800129c:	17d3      	asrs	r3, r2, #31
 800129e:	1ac9      	subs	r1, r1, r3
 80012a0:	460b      	mov	r3, r1
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	440b      	add	r3, r1
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	1ad1      	subs	r1, r2, r3
 80012aa:	b2cb      	uxtb	r3, r1
 80012ac:	3330      	adds	r3, #48	@ 0x30
 80012ae:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
		if (Froll >= 0)
 80012b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db03      	blt.n	80012c0 <main+0x1a8>
			Ra = '0';
 80012b8:	2330      	movs	r3, #48	@ 0x30
 80012ba:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80012be:	e002      	b.n	80012c6 <main+0x1ae>
		else
			Ra = '1';
 80012c0:	2331      	movs	r3, #49	@ 0x31
 80012c2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
		//printf("%d,%d,%d\r\n", Fpitch, Froll, stop);
		//if (loop_count == 0)
		//{
		//printf("P%c%c%c,R%c%c%c,S%d\n\r", Pa, Pb, Pc, Ra, Rb, Rc, stop);

		sprintf(bt_str, "P%c%c%c,R%c%c%c,S%d", Pa, Pb, Pc, Ra, Rb, Rc, stop);
 80012c6:	f897 607f 	ldrb.w	r6, [r7, #127]	@ 0x7f
 80012ca:	f897 c07c 	ldrb.w	ip, [r7, #124]	@ 0x7c
 80012ce:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80012d2:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80012d6:	f897 107a 	ldrb.w	r1, [r7, #122]	@ 0x7a
 80012da:	f897 0079 	ldrb.w	r0, [r7, #121]	@ 0x79
 80012de:	f897 407d 	ldrb.w	r4, [r7, #125]	@ 0x7d
 80012e2:	f107 0540 	add.w	r5, r7, #64	@ 0x40
 80012e6:	9404      	str	r4, [sp, #16]
 80012e8:	9003      	str	r0, [sp, #12]
 80012ea:	9102      	str	r1, [sp, #8]
 80012ec:	9201      	str	r2, [sp, #4]
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4663      	mov	r3, ip
 80012f2:	4632      	mov	r2, r6
 80012f4:	490f      	ldr	r1, [pc, #60]	@ (8001334 <main+0x21c>)
 80012f6:	4628      	mov	r0, r5
 80012f8:	f008 fa9a 	bl	8009830 <siprintf>
		BT_Transmit(bt_str);
 80012fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fc69 	bl	8001bd8 <BT_Transmit>
		//}

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, vol);
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <main+0x220>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <main+0x224>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	635a      	str	r2, [r3, #52]	@ 0x34
		//duty_cycle += 100;
		//if (duty_cycle == 8000)
		//	duty_cycle = 0;

		Display_screen(Fpitch, Froll, stop);
 8001310:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001314:	461a      	mov	r2, r3
 8001316:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001318:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800131a:	f000 fc73 	bl	8001c04 <Display_screen>
		HAL_Delay(10);
 800131e:	200a      	movs	r0, #10
 8001320:	f001 fba6 	bl	8002a70 <HAL_Delay>
	while (1) {
 8001324:	e73f      	b.n	80011a6 <main+0x8e>
 8001326:	bf00      	nop
 8001328:	20000450 	.word	0x20000450
 800132c:	200002f4 	.word	0x200002f4
 8001330:	66666667 	.word	0x66666667
 8001334:	0800d610 	.word	0x0800d610
 8001338:	20000458 	.word	0x20000458
 800133c:	200002a8 	.word	0x200002a8

08001340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b096      	sub	sp, #88	@ 0x58
 8001344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	2244      	movs	r2, #68	@ 0x44
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f008 fb82 	bl	8009a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001362:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001366:	f004 f87d 	bl	8005464 <HAL_PWREx_ControlVoltageScaling>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001370:	f000 fd6c 	bl	8001e4c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001374:	f004 f858 	bl	8005428 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001378:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <SystemClock_Config+0xc0>)
 800137a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800137e:	4a20      	ldr	r2, [pc, #128]	@ (8001400 <SystemClock_Config+0xc0>)
 8001380:	f023 0318 	bic.w	r3, r3, #24
 8001384:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001388:	2314      	movs	r3, #20
 800138a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800138c:	2301      	movs	r3, #1
 800138e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001390:	2301      	movs	r3, #1
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001398:	2360      	movs	r3, #96	@ 0x60
 800139a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139c:	2302      	movs	r3, #2
 800139e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013a0:	2301      	movs	r3, #1
 80013a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80013a8:	2310      	movs	r3, #16
 80013aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013ac:	2307      	movs	r3, #7
 80013ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 f8a7 	bl	8005510 <HAL_RCC_OscConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80013c8:	f000 fd40 	bl	8001e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013cc:	230f      	movs	r3, #15
 80013ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d0:	2303      	movs	r3, #3
 80013d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	2101      	movs	r1, #1
 80013e4:	4618      	mov	r0, r3
 80013e6:	f004 fca7 	bl	8005d38 <HAL_RCC_ClockConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80013f0:	f000 fd2c 	bl	8001e4c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013f4:	f005 f8ba 	bl	800656c <HAL_RCCEx_EnableMSIPLLMode>
}
 80013f8:	bf00      	nop
 80013fa:	3758      	adds	r7, #88	@ 0x58
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000

08001404 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800140a:	463b      	mov	r3, r7
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800141a:	4b29      	ldr	r3, [pc, #164]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 800141c:	4a29      	ldr	r2, [pc, #164]	@ (80014c4 <MX_ADC1_Init+0xc0>)
 800141e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001420:	4b27      	ldr	r3, [pc, #156]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 8001422:	2200      	movs	r2, #0
 8001424:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001426:	4b26      	ldr	r3, [pc, #152]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800142c:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001432:	4b23      	ldr	r3, [pc, #140]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001438:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 800143a:	2204      	movs	r2, #4
 800143c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800143e:	4b20      	ldr	r3, [pc, #128]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 8001440:	2200      	movs	r2, #0
 8001442:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001444:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 8001446:	2200      	movs	r2, #0
 8001448:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800144a:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 800144c:	2201      	movs	r2, #1
 800144e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001458:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 800145a:	2200      	movs	r2, #0
 800145c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 8001460:	2200      	movs	r2, #0
 8001462:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 800146e:	2200      	movs	r2, #0
 8001470:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800147a:	4811      	ldr	r0, [pc, #68]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 800147c:	f001 fce4 	bl	8002e48 <HAL_ADC_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001486:	f000 fce1 	bl	8001e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800148a:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <MX_ADC1_Init+0xc4>)
 800148c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800148e:	2306      	movs	r3, #6
 8001490:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001496:	237f      	movs	r3, #127	@ 0x7f
 8001498:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800149a:	2304      	movs	r3, #4
 800149c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a2:	463b      	mov	r3, r7
 80014a4:	4619      	mov	r1, r3
 80014a6:	4806      	ldr	r0, [pc, #24]	@ (80014c0 <MX_ADC1_Init+0xbc>)
 80014a8:	f001 ff10 	bl	80032cc <HAL_ADC_ConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80014b2:	f000 fccb 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200001f0 	.word	0x200001f0
 80014c4:	50040000 	.word	0x50040000
 80014c8:	19200040 	.word	0x19200040

080014cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001544 <MX_I2C1_Init+0x78>)
 80014d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001548 <MX_I2C1_Init+0x7c>)
 80014da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014dc:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_I2C1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001506:	480e      	ldr	r0, [pc, #56]	@ (8001540 <MX_I2C1_Init+0x74>)
 8001508:	f003 f852 	bl	80045b0 <HAL_I2C_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001512:	f000 fc9b 	bl	8001e4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001516:	2100      	movs	r1, #0
 8001518:	4809      	ldr	r0, [pc, #36]	@ (8001540 <MX_I2C1_Init+0x74>)
 800151a:	f003 feed 	bl	80052f8 <HAL_I2CEx_ConfigAnalogFilter>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001524:	f000 fc92 	bl	8001e4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001528:	2100      	movs	r1, #0
 800152a:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_I2C1_Init+0x74>)
 800152c:	f003 ff2f 	bl	800538e <HAL_I2CEx_ConfigDigitalFilter>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001536:	f000 fc89 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000254 	.word	0x20000254
 8001544:	40005400 	.word	0x40005400
 8001548:	00b07cb4 	.word	0x00b07cb4

0800154c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b096      	sub	sp, #88	@ 0x58
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001552:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800155e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]
 800156e:	615a      	str	r2, [r3, #20]
 8001570:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	222c      	movs	r2, #44	@ 0x2c
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f008 fa6d 	bl	8009a58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800157e:	4b3b      	ldr	r3, [pc, #236]	@ (800166c <MX_TIM1_Init+0x120>)
 8001580:	4a3b      	ldr	r2, [pc, #236]	@ (8001670 <MX_TIM1_Init+0x124>)
 8001582:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8001584:	4b39      	ldr	r3, [pc, #228]	@ (800166c <MX_TIM1_Init+0x120>)
 8001586:	2254      	movs	r2, #84	@ 0x54
 8001588:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b38      	ldr	r3, [pc, #224]	@ (800166c <MX_TIM1_Init+0x120>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001590:	4b36      	ldr	r3, [pc, #216]	@ (800166c <MX_TIM1_Init+0x120>)
 8001592:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001596:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b34      	ldr	r3, [pc, #208]	@ (800166c <MX_TIM1_Init+0x120>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800159e:	4b33      	ldr	r3, [pc, #204]	@ (800166c <MX_TIM1_Init+0x120>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a4:	4b31      	ldr	r3, [pc, #196]	@ (800166c <MX_TIM1_Init+0x120>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015aa:	4830      	ldr	r0, [pc, #192]	@ (800166c <MX_TIM1_Init+0x120>)
 80015ac:	f005 f8e0 	bl	8006770 <HAL_TIM_PWM_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80015b6:	f000 fc49 	bl	8001e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015ca:	4619      	mov	r1, r3
 80015cc:	4827      	ldr	r0, [pc, #156]	@ (800166c <MX_TIM1_Init+0x120>)
 80015ce:	f005 fe2d 	bl	800722c <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015d8:	f000 fc38 	bl	8001e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015dc:	2360      	movs	r3, #96	@ 0x60
 80015de:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e4:	2300      	movs	r3, #0
 80015e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015e8:	2300      	movs	r3, #0
 80015ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015fc:	2200      	movs	r2, #0
 80015fe:	4619      	mov	r1, r3
 8001600:	481a      	ldr	r0, [pc, #104]	@ (800166c <MX_TIM1_Init+0x120>)
 8001602:	f005 f9eb 	bl	80069dc <HAL_TIM_PWM_ConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800160c:	f000 fc1e 	bl	8001e4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001624:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001628:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001632:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4809      	ldr	r0, [pc, #36]	@ (800166c <MX_TIM1_Init+0x120>)
 8001646:	f005 fe57 	bl	80072f8 <HAL_TIMEx_ConfigBreakDeadTime>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001650:	f000 fbfc 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001654:	2100      	movs	r1, #0
 8001656:	4805      	ldr	r0, [pc, #20]	@ (800166c <MX_TIM1_Init+0x120>)
 8001658:	f005 f8e2 	bl	8006820 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800165c:	4803      	ldr	r0, [pc, #12]	@ (800166c <MX_TIM1_Init+0x120>)
 800165e:	f000 ff35 	bl	80024cc <HAL_TIM_MspPostInit>

}
 8001662:	bf00      	nop
 8001664:	3758      	adds	r7, #88	@ 0x58
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200002a8 	.word	0x200002a8
 8001670:	40012c00 	.word	0x40012c00

08001674 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001678:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <MX_USART1_UART_Init+0x58>)
 800167a:	4a15      	ldr	r2, [pc, #84]	@ (80016d0 <MX_USART1_UART_Init+0x5c>)
 800167c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800167e:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <MX_USART1_UART_Init+0x58>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <MX_USART1_UART_Init+0x58>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <MX_USART1_UART_Init+0x58>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_USART1_UART_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <MX_USART1_UART_Init+0x58>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <MX_USART1_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <MX_USART1_UART_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <MX_USART1_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <MX_USART1_UART_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <MX_USART1_UART_Init+0x58>)
 80016b8:	f005 fe96 	bl	80073e8 <HAL_UART_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016c2:	f000 fbc3 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200002f4 	.word	0x200002f4
 80016d0:	40013800 	.word	0x40013800

080016d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d8:	4b14      	ldr	r3, [pc, #80]	@ (800172c <MX_USART2_UART_Init+0x58>)
 80016da:	4a15      	ldr	r2, [pc, #84]	@ (8001730 <MX_USART2_UART_Init+0x5c>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016de:	4b13      	ldr	r3, [pc, #76]	@ (800172c <MX_USART2_UART_Init+0x58>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b11      	ldr	r3, [pc, #68]	@ (800172c <MX_USART2_UART_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <MX_USART2_UART_Init+0x58>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <MX_USART2_UART_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <MX_USART2_UART_Init+0x58>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <MX_USART2_UART_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <MX_USART2_UART_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170a:	4b08      	ldr	r3, [pc, #32]	@ (800172c <MX_USART2_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <MX_USART2_UART_Init+0x58>)
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	@ (800172c <MX_USART2_UART_Init+0x58>)
 8001718:	f005 fe66 	bl	80073e8 <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001722:	f000 fb93 	bl	8001e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000037c 	.word	0x2000037c
 8001730:	40004400 	.word	0x40004400

08001734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <MX_DMA_Init+0x38>)
 800173c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800173e:	4a0b      	ldr	r2, [pc, #44]	@ (800176c <MX_DMA_Init+0x38>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6493      	str	r3, [r2, #72]	@ 0x48
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_DMA_Init+0x38>)
 8001748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	200f      	movs	r0, #15
 8001758:	f002 fafb 	bl	8003d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800175c:	200f      	movs	r0, #15
 800175e:	f002 fb14 	bl	8003d8a <HAL_NVIC_EnableIRQ>

}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000

08001770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <MX_GPIO_Init+0x8c>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178a:	4a1c      	ldr	r2, [pc, #112]	@ (80017fc <MX_GPIO_Init+0x8c>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <MX_GPIO_Init+0x8c>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <MX_GPIO_Init+0x8c>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a2:	4a16      	ldr	r2, [pc, #88]	@ (80017fc <MX_GPIO_Init+0x8c>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017aa:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <MX_GPIO_Init+0x8c>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <MX_GPIO_Init+0x8c>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	4a10      	ldr	r2, [pc, #64]	@ (80017fc <MX_GPIO_Init+0x8c>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <MX_GPIO_Init+0x8c>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2108      	movs	r1, #8
 80017d2:	480b      	ldr	r0, [pc, #44]	@ (8001800 <MX_GPIO_Init+0x90>)
 80017d4:	f002 fed4 	bl	8004580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80017d8:	2308      	movs	r3, #8
 80017da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	4619      	mov	r1, r3
 80017ee:	4804      	ldr	r0, [pc, #16]	@ (8001800 <MX_GPIO_Init+0x90>)
 80017f0:	f002 fd5c 	bl	80042ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000
 8001800:	48000400 	.word	0x48000400

08001804 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800180c:	1d39      	adds	r1, r7, #4
 800180e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001812:	2201      	movs	r2, #1
 8001814:	4803      	ldr	r0, [pc, #12]	@ (8001824 <__io_putchar+0x20>)
 8001816:	f005 fe35 	bl	8007484 <HAL_UART_Transmit>
	return ch;
 800181a:	687b      	ldr	r3, [r7, #4]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	2000037c 	.word	0x2000037c

08001828 <IMU_Init>:

void IMU_Init() {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af02      	add	r7, sp, #8
	printf("Connecting to IMU ...\r \n");
 800182e:	4811      	ldr	r0, [pc, #68]	@ (8001874 <IMU_Init+0x4c>)
 8001830:	f007 fff6 	bl	8009820 <puts>

	uint8_t config[2];
	config[0] = IMU_CTRL_REG1_A;
 8001834:	2320      	movs	r3, #32
 8001836:	713b      	strb	r3, [r7, #4]
	config[1] = 0x97;
 8001838:	2397      	movs	r3, #151	@ 0x97
 800183a:	717b      	strb	r3, [r7, #5]

	ret = HAL_I2C_Master_Transmit(&hi2c1,
 800183c:	1d3a      	adds	r2, r7, #4
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	2302      	movs	r3, #2
 8001846:	2132      	movs	r1, #50	@ 0x32
 8001848:	480b      	ldr	r0, [pc, #44]	@ (8001878 <IMU_Init+0x50>)
 800184a:	f002 ff4d 	bl	80046e8 <HAL_I2C_Master_Transmit>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <IMU_Init+0x54>)
 8001854:	701a      	strb	r2, [r3, #0]
	IMU_I2C_ADDR_W, config, 2,
	HAL_MAX_DELAY);

	if (ret != HAL_OK) {
 8001856:	4b09      	ldr	r3, [pc, #36]	@ (800187c <IMU_Init+0x54>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <IMU_Init+0x3c>
		printf("Failure to connect to IMU! Please check wiring. \r \n");
 800185e:	4808      	ldr	r0, [pc, #32]	@ (8001880 <IMU_Init+0x58>)
 8001860:	f007 ffde 	bl	8009820 <puts>
	}
	printf("IMU connected!\r \n");
 8001864:	4807      	ldr	r0, [pc, #28]	@ (8001884 <IMU_Init+0x5c>)
 8001866:	f007 ffdb 	bl	8009820 <puts>

}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	0800d624 	.word	0x0800d624
 8001878:	20000254 	.word	0x20000254
 800187c:	2000044c 	.word	0x2000044c
 8001880:	0800d63c 	.word	0x0800d63c
 8001884:	0800d670 	.word	0x0800d670

08001888 <read_IMU>:

//REQUIRES: None
//MODIFIES: data
//EFFECTS: Read the accelerometer data from the GY-511 module, and stores the results in data.
void read_IMU(IMU_data *data) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af04      	add	r7, sp, #16
 800188e:	6078      	str	r0, [r7, #4]
	//Read from IMU register OUT_X_L_A with auto increment for 6 bytes of data, stored in acc_raw buffer
	ret = HAL_I2C_Mem_Read(&hi2c1,
						IMU_I2C_ADDR << 1,
						IMU_OUT_X_L_A | 0x80,
						I2C_MEMADD_SIZE_8BIT, data->acc_raw, 6,
 8001890:	687b      	ldr	r3, [r7, #4]
	ret = HAL_I2C_Mem_Read(&hi2c1,
 8001892:	f04f 32ff 	mov.w	r2, #4294967295
 8001896:	9202      	str	r2, [sp, #8]
 8001898:	2206      	movs	r2, #6
 800189a:	9201      	str	r2, [sp, #4]
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2301      	movs	r3, #1
 80018a0:	22a8      	movs	r2, #168	@ 0xa8
 80018a2:	2132      	movs	r1, #50	@ 0x32
 80018a4:	4844      	ldr	r0, [pc, #272]	@ (80019b8 <read_IMU+0x130>)
 80018a6:	f003 f94b 	bl	8004b40 <HAL_I2C_Mem_Read>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b43      	ldr	r3, [pc, #268]	@ (80019bc <read_IMU+0x134>)
 80018b0:	701a      	strb	r2, [r3, #0]
	{
		while(1);
	}*/

	//Update the ax_raw, ay_raw, and az_raw
	data->ax_raw = (int16_t) (data->acc_raw[0] | data->acc_raw[1] << 8);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b21a      	sxth	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	785b      	ldrb	r3, [r3, #1]
 80018bc:	b21b      	sxth	r3, r3
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	4313      	orrs	r3, r2
 80018c4:	b21a      	sxth	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	80da      	strh	r2, [r3, #6]
	data->ay_raw = (int16_t) (data->acc_raw[2] | data->acc_raw[3] << 8);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	789b      	ldrb	r3, [r3, #2]
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	78db      	ldrb	r3, [r3, #3]
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	b21a      	sxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	811a      	strh	r2, [r3, #8]
	data->az_raw = (int16_t) (data->acc_raw[4] | data->acc_raw[5] << 8);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	791b      	ldrb	r3, [r3, #4]
 80018e6:	b21a      	sxth	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	795b      	ldrb	r3, [r3, #5]
 80018ec:	b21b      	sxth	r3, r3
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b21a      	sxth	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	815a      	strh	r2, [r3, #10]

	//Convert it to be in unit g
	data->ax = data->ax_raw * 2.0 / 32767.0;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fe0f 	bl	8000524 <__aeabi_i2d>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	f7fe fcbf 	bl	800028c <__adddf3>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	a326      	add	r3, pc, #152	@ (adr r3, 80019b0 <read_IMU+0x128>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7fe ff96 	bl	800084c <__aeabi_ddiv>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f95e 	bl	8000be8 <__aeabi_d2f>
 800192c:	4602      	mov	r2, r0
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60da      	str	r2, [r3, #12]
	data->ay = data->ay_raw * 2.0 / 32767.0;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fdf3 	bl	8000524 <__aeabi_i2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	f7fe fca3 	bl	800028c <__adddf3>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	a318      	add	r3, pc, #96	@ (adr r3, 80019b0 <read_IMU+0x128>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f7fe ff7a 	bl	800084c <__aeabi_ddiv>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f7ff f942 	bl	8000be8 <__aeabi_d2f>
 8001964:	4602      	mov	r2, r0
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	611a      	str	r2, [r3, #16]
	data->az = data->az_raw * 2.0 / 32767.0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fdd7 	bl	8000524 <__aeabi_i2d>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	f7fe fc87 	bl	800028c <__adddf3>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	a30a      	add	r3, pc, #40	@ (adr r3, 80019b0 <read_IMU+0x128>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe ff5e 	bl	800084c <__aeabi_ddiv>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f7ff f926 	bl	8000be8 <__aeabi_d2f>
 800199c:	4602      	mov	r2, r0
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	615a      	str	r2, [r3, #20]
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	f3af 8000 	nop.w
 80019b0:	00000000 	.word	0x00000000
 80019b4:	40dfffc0 	.word	0x40dfffc0
 80019b8:	20000254 	.word	0x20000254
 80019bc:	2000044c 	.word	0x2000044c

080019c0 <get_Orientation>:

//REQUIRES: None
//MODIFIES: None
//EFFECTS: 	From the given IMU_data, compute the roll and pitch of the sensor.
Orientation get_Orientation(IMU_data data) {
 80019c0:	b084      	sub	sp, #16
 80019c2:	b5b0      	push	{r4, r5, r7, lr}
 80019c4:	b08a      	sub	sp, #40	@ 0x28
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80019cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Orientation ore;
	float AccX = data.ax * 9.81;
 80019d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fdb8 	bl	8000548 <__aeabi_f2d>
 80019d8:	a368      	add	r3, pc, #416	@ (adr r3, 8001b7c <get_Orientation+0x1bc>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7fe fe0b 	bl	80005f8 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff f8fd 	bl	8000be8 <__aeabi_d2f>
 80019ee:	4603      	mov	r3, r0
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
	float AccY = data.ay * 9.81;
 80019f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fda7 	bl	8000548 <__aeabi_f2d>
 80019fa:	a360      	add	r3, pc, #384	@ (adr r3, 8001b7c <get_Orientation+0x1bc>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7fe fdfa 	bl	80005f8 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f8ec 	bl	8000be8 <__aeabi_d2f>
 8001a10:	4603      	mov	r3, r0
 8001a12:	623b      	str	r3, [r7, #32]
	float AccZ = data.az * 9.81;
 8001a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd96 	bl	8000548 <__aeabi_f2d>
 8001a1c:	a357      	add	r3, pc, #348	@ (adr r3, 8001b7c <get_Orientation+0x1bc>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fde9 	bl	80005f8 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f8db 	bl	8000be8 <__aeabi_d2f>
 8001a32:	4603      	mov	r3, r0
 8001a34:	61fb      	str	r3, [r7, #28]
	ore.pitch = (180 * atan(AccX / sqrt(AccY * AccY + AccZ * AccZ)) / PI);
 8001a36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a38:	f7fe fd86 	bl	8000548 <__aeabi_f2d>
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	460d      	mov	r5, r1
 8001a40:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a44:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a48:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a54:	ee17 0a90 	vmov	r0, s15
 8001a58:	f7fe fd76 	bl	8000548 <__aeabi_f2d>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	ec43 2b10 	vmov	d0, r2, r3
 8001a64:	f00b fb22 	bl	800d0ac <sqrt>
 8001a68:	ec53 2b10 	vmov	r2, r3, d0
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	4629      	mov	r1, r5
 8001a70:	f7fe feec 	bl	800084c <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	ec43 2b17 	vmov	d7, r2, r3
 8001a7c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a80:	eef0 0a67 	vmov.f32	s1, s15
 8001a84:	f00b fb40 	bl	800d108 <atan>
 8001a88:	ec51 0b10 	vmov	r0, r1, d0
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b39      	ldr	r3, [pc, #228]	@ (8001b78 <get_Orientation+0x1b8>)
 8001a92:	f7fe fdb1 	bl	80005f8 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	a334      	add	r3, pc, #208	@ (adr r3, 8001b70 <get_Orientation+0x1b0>)
 8001aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa4:	f7fe fed2 	bl	800084c <__aeabi_ddiv>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7ff f89a 	bl	8000be8 <__aeabi_d2f>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	613b      	str	r3, [r7, #16]
	ore.roll = (180 * atan(AccY / sqrt(AccX * AccX + AccZ * AccZ)) / PI);
 8001ab8:	6a38      	ldr	r0, [r7, #32]
 8001aba:	f7fe fd45 	bl	8000548 <__aeabi_f2d>
 8001abe:	4604      	mov	r4, r0
 8001ac0:	460d      	mov	r5, r1
 8001ac2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ac6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001aca:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ace:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad6:	ee17 0a90 	vmov	r0, s15
 8001ada:	f7fe fd35 	bl	8000548 <__aeabi_f2d>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	ec43 2b10 	vmov	d0, r2, r3
 8001ae6:	f00b fae1 	bl	800d0ac <sqrt>
 8001aea:	ec53 2b10 	vmov	r2, r3, d0
 8001aee:	4620      	mov	r0, r4
 8001af0:	4629      	mov	r1, r5
 8001af2:	f7fe feab 	bl	800084c <__aeabi_ddiv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	ec43 2b17 	vmov	d7, r2, r3
 8001afe:	eeb0 0a47 	vmov.f32	s0, s14
 8001b02:	eef0 0a67 	vmov.f32	s1, s15
 8001b06:	f00b faff 	bl	800d108 <atan>
 8001b0a:	ec51 0b10 	vmov	r0, r1, d0
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <get_Orientation+0x1b8>)
 8001b14:	f7fe fd70 	bl	80005f8 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	a313      	add	r3, pc, #76	@ (adr r3, 8001b70 <get_Orientation+0x1b0>)
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	f7fe fe91 	bl	800084c <__aeabi_ddiv>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7ff f859 	bl	8000be8 <__aeabi_d2f>
 8001b36:	4603      	mov	r3, r0
 8001b38:	60fb      	str	r3, [r7, #12]
	return ore;
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	f107 020c 	add.w	r2, r7, #12
 8001b42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b46:	e883 0003 	stmia.w	r3, {r0, r1}
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	ee07 2a10 	vmov	s14, r2
 8001b52:	ee07 3a90 	vmov	s15, r3
}
 8001b56:	eeb0 0a47 	vmov.f32	s0, s14
 8001b5a:	eef0 0a67 	vmov.f32	s1, s15
 8001b5e:	3728      	adds	r7, #40	@ 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001b66:	b004      	add	sp, #16
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	f3af 8000 	nop.w
 8001b70:	51eb851f 	.word	0x51eb851f
 8001b74:	40091eb8 	.word	0x40091eb8
 8001b78:	40668000 	.word	0x40668000
 8001b7c:	51eb851f 	.word	0x51eb851f
 8001b80:	40239eb8 	.word	0x40239eb8

08001b84 <get_Stop>:

uint8_t get_Stop(uint32_t data) {
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	if (data > 3000)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <get_Stop+0x16>
		return 1;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <get_Stop+0x18>
	else
		return 0;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <read_FSR>:

void read_FSR(uint32_t *data) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8001bb0:	4808      	ldr	r0, [pc, #32]	@ (8001bd4 <read_FSR+0x2c>)
 8001bb2:	f001 fa8b 	bl	80030cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF);
 8001bb6:	f04f 31ff 	mov.w	r1, #4294967295
 8001bba:	4806      	ldr	r0, [pc, #24]	@ (8001bd4 <read_FSR+0x2c>)
 8001bbc:	f001 fae9 	bl	8003192 <HAL_ADC_PollForConversion>
	*data = HAL_ADC_GetValue(&hadc1);
 8001bc0:	4804      	ldr	r0, [pc, #16]	@ (8001bd4 <read_FSR+0x2c>)
 8001bc2:	f001 fb75 	bl	80032b0 <HAL_ADC_GetValue>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	601a      	str	r2, [r3, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200001f0 	.word	0x200001f0

08001bd8 <BT_Transmit>:

void BT_Transmit(char *str) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7fe fb45 	bl	8000270 <strlen>
 8001be6:	4603      	mov	r3, r0
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4803      	ldr	r0, [pc, #12]	@ (8001c00 <BT_Transmit+0x28>)
 8001bf2:	f005 fc47 	bl	8007484 <HAL_UART_Transmit>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200002f4 	.word	0x200002f4

08001c04 <Display_screen>:

void Display_screen(int fpitch, int froll, uint8_t stop) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b090      	sub	sp, #64	@ 0x40
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t x = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	char pitch[10] = { '\0' };
 8001c1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	811a      	strh	r2, [r3, #8]
	char roll[10] = { '\0' };
 8001c2a:	f107 0320 	add.w	r3, r7, #32
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	811a      	strh	r2, [r3, #8]
	char state[10] = { '\0' };
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	811a      	strh	r2, [r3, #8]
	sprintf(pitch, "P=%d", fpitch);
 8001c42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4944      	ldr	r1, [pc, #272]	@ (8001d5c <Display_screen+0x158>)
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f007 fdf0 	bl	8009830 <siprintf>
	sprintf(roll, "R=%d", froll);
 8001c50:	f107 0320 	add.w	r3, r7, #32
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	4942      	ldr	r1, [pc, #264]	@ (8001d60 <Display_screen+0x15c>)
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f007 fde9 	bl	8009830 <siprintf>
	sprintf(state, "S=%d", stop);
 8001c5e:	79fa      	ldrb	r2, [r7, #7]
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	493f      	ldr	r1, [pc, #252]	@ (8001d64 <Display_screen+0x160>)
 8001c66:	4618      	mov	r0, r3
 8001c68:	f007 fde2 	bl	8009830 <siprintf>

	//display pitch on the first line
	ssd1306_SetCursor(2, y);
 8001c6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c70:	4619      	mov	r1, r3
 8001c72:	2002      	movs	r0, #2
 8001c74:	f000 fae0 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString((char*) pitch, Font_11x18, White);
 8001c78:	4b3b      	ldr	r3, [pc, #236]	@ (8001d68 <Display_screen+0x164>)
 8001c7a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001c7e:	2201      	movs	r2, #1
 8001c80:	9200      	str	r2, [sp, #0]
 8001c82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c84:	f000 fab2 	bl	80021ec <ssd1306_WriteString>
	//clear the remaining line
	x = strlen(pitch) * 11 + 2;
 8001c88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe faef 	bl	8000270 <strlen>
 8001c92:	4603      	mov	r3, r0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	441a      	add	r2, r3
 8001c9c:	0052      	lsls	r2, r2, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	ssd1306_SetCursor(x, y);
 8001ca8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001cac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fac0 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(" ", Font_11x18, White);
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d68 <Display_screen+0x164>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	9200      	str	r2, [sp, #0]
 8001cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc0:	482a      	ldr	r0, [pc, #168]	@ (8001d6c <Display_screen+0x168>)
 8001cc2:	f000 fa93 	bl	80021ec <ssd1306_WriteString>

	//display roll on the second line
	y += 18;
 8001cc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001cca:	3312      	adds	r3, #18
 8001ccc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	ssd1306_SetCursor(2, y);
 8001cd0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	2002      	movs	r0, #2
 8001cd8:	f000 faae 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString((char*) roll, Font_11x18, White);
 8001cdc:	4b22      	ldr	r3, [pc, #136]	@ (8001d68 <Display_screen+0x164>)
 8001cde:	f107 0020 	add.w	r0, r7, #32
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	9200      	str	r2, [sp, #0]
 8001ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ce8:	f000 fa80 	bl	80021ec <ssd1306_WriteString>
	//clear the remaining line
	x = strlen(roll) * 11 + 2;
 8001cec:	f107 0320 	add.w	r3, r7, #32
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fabd 	bl	8000270 <strlen>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	441a      	add	r2, r3
 8001d00:	0052      	lsls	r2, r2, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	3302      	adds	r3, #2
 8001d08:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	ssd1306_SetCursor(x, y);
 8001d0c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001d10:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fa8e 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString(" ", Font_11x18, White);
 8001d1c:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <Display_screen+0x164>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	9200      	str	r2, [sp, #0]
 8001d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d24:	4811      	ldr	r0, [pc, #68]	@ (8001d6c <Display_screen+0x168>)
 8001d26:	f000 fa61 	bl	80021ec <ssd1306_WriteString>

	//display state on the third line
	y += 18;
 8001d2a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d2e:	3312      	adds	r3, #18
 8001d30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	ssd1306_SetCursor(2, y);
 8001d34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d38:	4619      	mov	r1, r3
 8001d3a:	2002      	movs	r0, #2
 8001d3c:	f000 fa7c 	bl	8002238 <ssd1306_SetCursor>
	ssd1306_WriteString((char*) state, Font_11x18, White);
 8001d40:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <Display_screen+0x164>)
 8001d42:	f107 0014 	add.w	r0, r7, #20
 8001d46:	2201      	movs	r2, #1
 8001d48:	9200      	str	r2, [sp, #0]
 8001d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d4c:	f000 fa4e 	bl	80021ec <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001d50:	f000 f93e 	bl	8001fd0 <ssd1306_UpdateScreen>
}
 8001d54:	bf00      	nop
 8001d56:	3738      	adds	r7, #56	@ 0x38
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	0800d684 	.word	0x0800d684
 8001d60:	0800d68c 	.word	0x0800d68c
 8001d64:	0800d694 	.word	0x0800d694
 8001d68:	0800e3fc 	.word	0x0800e3fc
 8001d6c:	0800d69c 	.word	0x0800d69c

08001d70 <MovingAverage_Init>:

void MovingAverage_Init(MovingAverage *filter) {
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < FILTER_SIZE; i++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	e009      	b.n	8001d92 <MovingAverage_Init+0x22>
		filter->buffer[i] = 0.0;
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FILTER_SIZE; i++)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	ddf2      	ble.n	8001d7e <MovingAverage_Init+0xe>
	filter->index = 0;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	751a      	strb	r2, [r3, #20]
	filter->sum = 0.0;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	619a      	str	r2, [r3, #24]
}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <MovingAverage_Update>:

int MovingAverage_Update(MovingAverage *filter, float new_value) {
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	ed87 0a00 	vstr	s0, [r7]
	filter->sum = 0;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
	filter->buffer[filter->index] = new_value;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	7d1b      	ldrb	r3, [r3, #20]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	601a      	str	r2, [r3, #0]
	filter->index = (filter->index + 1) % FILTER_SIZE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7d1b      	ldrb	r3, [r3, #20]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e48 <MovingAverage_Update+0x94>)
 8001dde:	fb83 1302 	smull	r1, r3, r3, r2
 8001de2:	1059      	asrs	r1, r3, #1
 8001de4:	17d3      	asrs	r3, r2, #31
 8001de6:	1ac9      	subs	r1, r1, r3
 8001de8:	460b      	mov	r3, r1
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	1ad1      	subs	r1, r2, r3
 8001df0:	b2ca      	uxtb	r2, r1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	751a      	strb	r2, [r3, #20]
	for (int i = 0; i < FILTER_SIZE; i++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	e010      	b.n	8001e1e <MovingAverage_Update+0x6a>
		filter->sum += filter->buffer[i];
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	edc3 7a06 	vstr	s15, [r3, #24]
	for (int i = 0; i < FILTER_SIZE; i++)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	ddeb      	ble.n	8001dfc <MovingAverage_Update+0x48>
	return (int) (filter->sum / FILTER_SIZE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e2a:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001e2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e36:	ee17 3a90 	vmov	r3, s15
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	66666667 	.word	0x66666667

08001e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <Error_Handler+0x8>

08001e58 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af04      	add	r7, sp, #16
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	2301      	movs	r3, #1
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	1dfb      	adds	r3, r7, #7
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2301      	movs	r3, #1
 8001e82:	2200      	movs	r2, #0
 8001e84:	2178      	movs	r1, #120	@ 0x78
 8001e86:	4803      	ldr	r0, [pc, #12]	@ (8001e94 <ssd1306_WriteCommand+0x2c>)
 8001e88:	f002 fd46 	bl	8004918 <HAL_I2C_Mem_Write>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000254 	.word	0x20000254

08001e98 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af04      	add	r7, sp, #16
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eaa:	9202      	str	r2, [sp, #8]
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	2240      	movs	r2, #64	@ 0x40
 8001eb6:	2178      	movs	r1, #120	@ 0x78
 8001eb8:	4803      	ldr	r0, [pc, #12]	@ (8001ec8 <ssd1306_WriteData+0x30>)
 8001eba:	f002 fd2d 	bl	8004918 <HAL_I2C_Mem_Write>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000254 	.word	0x20000254

08001ecc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001ed0:	f7ff ffc2 	bl	8001e58 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001ed4:	2064      	movs	r0, #100	@ 0x64
 8001ed6:	f000 fdcb 	bl	8002a70 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001eda:	2000      	movs	r0, #0
 8001edc:	f000 f9d8 	bl	8002290 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001ee0:	2020      	movs	r0, #32
 8001ee2:	f7ff ffc1 	bl	8001e68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff ffbe 	bl	8001e68 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001eec:	20b0      	movs	r0, #176	@ 0xb0
 8001eee:	f7ff ffbb 	bl	8001e68 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001ef2:	20c8      	movs	r0, #200	@ 0xc8
 8001ef4:	f7ff ffb8 	bl	8001e68 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff ffb5 	bl	8001e68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001efe:	2010      	movs	r0, #16
 8001f00:	f7ff ffb2 	bl	8001e68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001f04:	2040      	movs	r0, #64	@ 0x40
 8001f06:	f7ff ffaf 	bl	8001e68 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001f0a:	20ff      	movs	r0, #255	@ 0xff
 8001f0c:	f000 f9ac 	bl	8002268 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001f10:	20a1      	movs	r0, #161	@ 0xa1
 8001f12:	f7ff ffa9 	bl	8001e68 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001f16:	20a6      	movs	r0, #166	@ 0xa6
 8001f18:	f7ff ffa6 	bl	8001e68 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001f1c:	20a8      	movs	r0, #168	@ 0xa8
 8001f1e:	f7ff ffa3 	bl	8001e68 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001f22:	203f      	movs	r0, #63	@ 0x3f
 8001f24:	f7ff ffa0 	bl	8001e68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001f28:	20a4      	movs	r0, #164	@ 0xa4
 8001f2a:	f7ff ff9d 	bl	8001e68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001f2e:	20d3      	movs	r0, #211	@ 0xd3
 8001f30:	f7ff ff9a 	bl	8001e68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7ff ff97 	bl	8001e68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f3a:	20d5      	movs	r0, #213	@ 0xd5
 8001f3c:	f7ff ff94 	bl	8001e68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001f40:	20f0      	movs	r0, #240	@ 0xf0
 8001f42:	f7ff ff91 	bl	8001e68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001f46:	20d9      	movs	r0, #217	@ 0xd9
 8001f48:	f7ff ff8e 	bl	8001e68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001f4c:	2022      	movs	r0, #34	@ 0x22
 8001f4e:	f7ff ff8b 	bl	8001e68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001f52:	20da      	movs	r0, #218	@ 0xda
 8001f54:	f7ff ff88 	bl	8001e68 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001f58:	2012      	movs	r0, #18
 8001f5a:	f7ff ff85 	bl	8001e68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001f5e:	20db      	movs	r0, #219	@ 0xdb
 8001f60:	f7ff ff82 	bl	8001e68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001f64:	2020      	movs	r0, #32
 8001f66:	f7ff ff7f 	bl	8001e68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001f6a:	208d      	movs	r0, #141	@ 0x8d
 8001f6c:	f7ff ff7c 	bl	8001e68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001f70:	2014      	movs	r0, #20
 8001f72:	f7ff ff79 	bl	8001e68 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001f76:	2001      	movs	r0, #1
 8001f78:	f000 f98a 	bl	8002290 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f000 f80f 	bl	8001fa0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001f82:	f000 f825 	bl	8001fd0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f86:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <ssd1306_Init+0xd0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <ssd1306_Init+0xd0>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001f92:	4b02      	ldr	r3, [pc, #8]	@ (8001f9c <ssd1306_Init+0xd0>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	711a      	strb	r2, [r3, #4]
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	2000085c 	.word	0x2000085c

08001fa0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <ssd1306_Fill+0x14>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e000      	b.n	8001fb6 <ssd1306_Fill+0x16>
 8001fb4:	23ff      	movs	r3, #255	@ 0xff
 8001fb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4803      	ldr	r0, [pc, #12]	@ (8001fcc <ssd1306_Fill+0x2c>)
 8001fbe:	f007 fd4b 	bl	8009a58 <memset>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000045c 	.word	0x2000045c

08001fd0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	e016      	b.n	800200a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	3b50      	subs	r3, #80	@ 0x50
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff40 	bl	8001e68 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff ff3d 	bl	8001e68 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001fee:	2010      	movs	r0, #16
 8001ff0:	f7ff ff3a 	bl	8001e68 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	01db      	lsls	r3, r3, #7
 8001ff8:	4a08      	ldr	r2, [pc, #32]	@ (800201c <ssd1306_UpdateScreen+0x4c>)
 8001ffa:	4413      	add	r3, r2
 8001ffc:	2180      	movs	r1, #128	@ 0x80
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff4a 	bl	8001e98 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	3301      	adds	r3, #1
 8002008:	71fb      	strb	r3, [r7, #7]
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	2b07      	cmp	r3, #7
 800200e:	d9e5      	bls.n	8001fdc <ssd1306_UpdateScreen+0xc>
    }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000045c 	.word	0x2000045c

08002020 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
 800202a:	460b      	mov	r3, r1
 800202c:	71bb      	strb	r3, [r7, #6]
 800202e:	4613      	mov	r3, r2
 8002030:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db3d      	blt.n	80020b6 <ssd1306_DrawPixel+0x96>
 800203a:	79bb      	ldrb	r3, [r7, #6]
 800203c:	2b3f      	cmp	r3, #63	@ 0x3f
 800203e:	d83a      	bhi.n	80020b6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002040:	797b      	ldrb	r3, [r7, #5]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d11a      	bne.n	800207c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002046:	79fa      	ldrb	r2, [r7, #7]
 8002048:	79bb      	ldrb	r3, [r7, #6]
 800204a:	08db      	lsrs	r3, r3, #3
 800204c:	b2d8      	uxtb	r0, r3
 800204e:	4603      	mov	r3, r0
 8002050:	01db      	lsls	r3, r3, #7
 8002052:	4413      	add	r3, r2
 8002054:	4a1b      	ldr	r2, [pc, #108]	@ (80020c4 <ssd1306_DrawPixel+0xa4>)
 8002056:	5cd3      	ldrb	r3, [r2, r3]
 8002058:	b25a      	sxtb	r2, r3
 800205a:	79bb      	ldrb	r3, [r7, #6]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	2101      	movs	r1, #1
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	b25b      	sxtb	r3, r3
 8002068:	4313      	orrs	r3, r2
 800206a:	b259      	sxtb	r1, r3
 800206c:	79fa      	ldrb	r2, [r7, #7]
 800206e:	4603      	mov	r3, r0
 8002070:	01db      	lsls	r3, r3, #7
 8002072:	4413      	add	r3, r2
 8002074:	b2c9      	uxtb	r1, r1
 8002076:	4a13      	ldr	r2, [pc, #76]	@ (80020c4 <ssd1306_DrawPixel+0xa4>)
 8002078:	54d1      	strb	r1, [r2, r3]
 800207a:	e01d      	b.n	80020b8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800207c:	79fa      	ldrb	r2, [r7, #7]
 800207e:	79bb      	ldrb	r3, [r7, #6]
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	b2d8      	uxtb	r0, r3
 8002084:	4603      	mov	r3, r0
 8002086:	01db      	lsls	r3, r3, #7
 8002088:	4413      	add	r3, r2
 800208a:	4a0e      	ldr	r2, [pc, #56]	@ (80020c4 <ssd1306_DrawPixel+0xa4>)
 800208c:	5cd3      	ldrb	r3, [r2, r3]
 800208e:	b25a      	sxtb	r2, r3
 8002090:	79bb      	ldrb	r3, [r7, #6]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	b25b      	sxtb	r3, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	4013      	ands	r3, r2
 80020a4:	b259      	sxtb	r1, r3
 80020a6:	79fa      	ldrb	r2, [r7, #7]
 80020a8:	4603      	mov	r3, r0
 80020aa:	01db      	lsls	r3, r3, #7
 80020ac:	4413      	add	r3, r2
 80020ae:	b2c9      	uxtb	r1, r1
 80020b0:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <ssd1306_DrawPixel+0xa4>)
 80020b2:	54d1      	strb	r1, [r2, r3]
 80020b4:	e000      	b.n	80020b8 <ssd1306_DrawPixel+0x98>
        return;
 80020b6:	bf00      	nop
    }
}
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	2000045c 	.word	0x2000045c

080020c8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b089      	sub	sp, #36	@ 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4604      	mov	r4, r0
 80020d0:	4638      	mov	r0, r7
 80020d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80020d6:	4623      	mov	r3, r4
 80020d8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	2b1f      	cmp	r3, #31
 80020de:	d902      	bls.n	80020e6 <ssd1306_WriteChar+0x1e>
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	2b7e      	cmp	r3, #126	@ 0x7e
 80020e4:	d901      	bls.n	80020ea <ssd1306_WriteChar+0x22>
        return 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e079      	b.n	80021de <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <ssd1306_WriteChar+0x34>
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	3b20      	subs	r3, #32
 80020f6:	4413      	add	r3, r2
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	e000      	b.n	80020fe <ssd1306_WriteChar+0x36>
 80020fc:	783b      	ldrb	r3, [r7, #0]
 80020fe:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002100:	4b39      	ldr	r3, [pc, #228]	@ (80021e8 <ssd1306_WriteChar+0x120>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	4413      	add	r3, r2
 800210a:	2b80      	cmp	r3, #128	@ 0x80
 800210c:	dc06      	bgt.n	800211c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800210e:	4b36      	ldr	r3, [pc, #216]	@ (80021e8 <ssd1306_WriteChar+0x120>)
 8002110:	885b      	ldrh	r3, [r3, #2]
 8002112:	461a      	mov	r2, r3
 8002114:	787b      	ldrb	r3, [r7, #1]
 8002116:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002118:	2b40      	cmp	r3, #64	@ 0x40
 800211a:	dd01      	ble.n	8002120 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 800211c:	2300      	movs	r3, #0
 800211e:	e05e      	b.n	80021de <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	e04d      	b.n	80021c2 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	3b20      	subs	r3, #32
 800212c:	7879      	ldrb	r1, [r7, #1]
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4619      	mov	r1, r3
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	440b      	add	r3, r1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	e036      	b.n	80021b4 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d013      	beq.n	800217e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002156:	4b24      	ldr	r3, [pc, #144]	@ (80021e8 <ssd1306_WriteChar+0x120>)
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	4413      	add	r3, r2
 8002162:	b2d8      	uxtb	r0, r3
 8002164:	4b20      	ldr	r3, [pc, #128]	@ (80021e8 <ssd1306_WriteChar+0x120>)
 8002166:	885b      	ldrh	r3, [r3, #2]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	4413      	add	r3, r2
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002176:	4619      	mov	r1, r3
 8002178:	f7ff ff52 	bl	8002020 <ssd1306_DrawPixel>
 800217c:	e017      	b.n	80021ae <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800217e:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <ssd1306_WriteChar+0x120>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b2da      	uxtb	r2, r3
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	4413      	add	r3, r2
 800218a:	b2d8      	uxtb	r0, r3
 800218c:	4b16      	ldr	r3, [pc, #88]	@ (80021e8 <ssd1306_WriteChar+0x120>)
 800218e:	885b      	ldrh	r3, [r3, #2]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	4413      	add	r3, r2
 8002198:	b2d9      	uxtb	r1, r3
 800219a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf0c      	ite	eq
 80021a2:	2301      	moveq	r3, #1
 80021a4:	2300      	movne	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	f7ff ff39 	bl	8002020 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	3301      	adds	r3, #1
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d3c4      	bcc.n	8002146 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	3301      	adds	r3, #1
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	787b      	ldrb	r3, [r7, #1]
 80021c4:	461a      	mov	r2, r3
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d3ac      	bcc.n	8002126 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <ssd1306_WriteChar+0x120>)
 80021ce:	881a      	ldrh	r2, [r3, #0]
 80021d0:	7dfb      	ldrb	r3, [r7, #23]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b03      	ldr	r3, [pc, #12]	@ (80021e8 <ssd1306_WriteChar+0x120>)
 80021da:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	@ 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd90      	pop	{r4, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	2000085c 	.word	0x2000085c

080021ec <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	4638      	mov	r0, r7
 80021f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80021fa:	e013      	b.n	8002224 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	7818      	ldrb	r0, [r3, #0]
 8002200:	7e3b      	ldrb	r3, [r7, #24]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	463b      	mov	r3, r7
 8002206:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002208:	f7ff ff5e 	bl	80020c8 <ssd1306_WriteChar>
 800220c:	4603      	mov	r3, r0
 800220e:	461a      	mov	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d002      	beq.n	800221e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	e008      	b.n	8002230 <ssd1306_WriteString+0x44>
        }
        str++;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3301      	adds	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1e7      	bne.n	80021fc <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	781b      	ldrb	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	460a      	mov	r2, r1
 8002242:	71fb      	strb	r3, [r7, #7]
 8002244:	4613      	mov	r3, r2
 8002246:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	b29a      	uxth	r2, r3
 800224c:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <ssd1306_SetCursor+0x2c>)
 800224e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002250:	79bb      	ldrb	r3, [r7, #6]
 8002252:	b29a      	uxth	r2, r3
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <ssd1306_SetCursor+0x2c>)
 8002256:	805a      	strh	r2, [r3, #2]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	2000085c 	.word	0x2000085c

08002268 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002272:	2381      	movs	r3, #129	@ 0x81
 8002274:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fdf5 	bl	8001e68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fdf1 	bl	8001e68 <ssd1306_WriteCommand>
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80022a0:	23af      	movs	r3, #175	@ 0xaf
 80022a2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80022a4:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <ssd1306_SetDisplayOn+0x38>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	715a      	strb	r2, [r3, #5]
 80022aa:	e004      	b.n	80022b6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80022ac:	23ae      	movs	r3, #174	@ 0xae
 80022ae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80022b0:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <ssd1306_SetDisplayOn+0x38>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fdd5 	bl	8001e68 <ssd1306_WriteCommand>
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000085c 	.word	0x2000085c

080022cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002310 <HAL_MspInit+0x44>)
 80022d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002310 <HAL_MspInit+0x44>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80022de:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <HAL_MspInit+0x44>)
 80022e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ea:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <HAL_MspInit+0x44>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ee:	4a08      	ldr	r2, [pc, #32]	@ (8002310 <HAL_MspInit+0x44>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80022f6:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <HAL_MspInit+0x44>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000

08002314 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b09e      	sub	sp, #120	@ 0x78
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	2254      	movs	r2, #84	@ 0x54
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f007 fb8f 	bl	8009a58 <memset>
  if(hadc->Instance==ADC1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a25      	ldr	r2, [pc, #148]	@ (80023d4 <HAL_ADC_MspInit+0xc0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d143      	bne.n	80023cc <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002344:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002348:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800234a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800234e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002350:	2301      	movs	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002354:	2301      	movs	r3, #1
 8002356:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 32;
 8002358:	2320      	movs	r3, #32
 800235a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800235c:	2307      	movs	r3, #7
 800235e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002360:	2302      	movs	r3, #2
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002364:	2302      	movs	r3, #2
 8002366:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002368:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800236e:	f107 0310 	add.w	r3, r7, #16
 8002372:	4618      	mov	r0, r3
 8002374:	f003 ff04 	bl	8006180 <HAL_RCCEx_PeriphCLKConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800237e:	f7ff fd65 	bl	8001e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002382:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <HAL_ADC_MspInit+0xc4>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002386:	4a14      	ldr	r2, [pc, #80]	@ (80023d8 <HAL_ADC_MspInit+0xc4>)
 8002388:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800238c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800238e:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <HAL_ADC_MspInit+0xc4>)
 8002390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002392:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <HAL_ADC_MspInit+0xc4>)
 800239c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239e:	4a0e      	ldr	r2, [pc, #56]	@ (80023d8 <HAL_ADC_MspInit+0xc4>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023a6:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <HAL_ADC_MspInit+0xc4>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023b2:	2302      	movs	r3, #2
 80023b4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80023b6:	230b      	movs	r3, #11
 80023b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023be:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023c2:	4619      	mov	r1, r3
 80023c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023c8:	f001 ff70 	bl	80042ac <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80023cc:	bf00      	nop
 80023ce:	3778      	adds	r7, #120	@ 0x78
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	50040000 	.word	0x50040000
 80023d8:	40021000 	.word	0x40021000

080023dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b09e      	sub	sp, #120	@ 0x78
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023f4:	f107 0310 	add.w	r3, r7, #16
 80023f8:	2254      	movs	r2, #84	@ 0x54
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f007 fb2b 	bl	8009a58 <memset>
  if(hi2c->Instance==I2C1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a1f      	ldr	r2, [pc, #124]	@ (8002484 <HAL_I2C_MspInit+0xa8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d137      	bne.n	800247c <HAL_I2C_MspInit+0xa0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800240c:	2340      	movs	r3, #64	@ 0x40
 800240e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002410:	2300      	movs	r3, #0
 8002412:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	4618      	mov	r0, r3
 800241a:	f003 feb1 	bl	8006180 <HAL_RCCEx_PeriphCLKConfig>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002424:	f7ff fd12 	bl	8001e4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002428:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <HAL_I2C_MspInit+0xac>)
 800242a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242c:	4a16      	ldr	r2, [pc, #88]	@ (8002488 <HAL_I2C_MspInit+0xac>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002434:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <HAL_I2C_MspInit+0xac>)
 8002436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002440:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002444:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002446:	2312      	movs	r3, #18
 8002448:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244e:	2303      	movs	r3, #3
 8002450:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002452:	2304      	movs	r3, #4
 8002454:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002456:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800245a:	4619      	mov	r1, r3
 800245c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002460:	f001 ff24 	bl	80042ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002464:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <HAL_I2C_MspInit+0xac>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002468:	4a07      	ldr	r2, [pc, #28]	@ (8002488 <HAL_I2C_MspInit+0xac>)
 800246a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800246e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002470:	4b05      	ldr	r3, [pc, #20]	@ (8002488 <HAL_I2C_MspInit+0xac>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800247c:	bf00      	nop
 800247e:	3778      	adds	r7, #120	@ 0x78
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40005400 	.word	0x40005400
 8002488:	40021000 	.word	0x40021000

0800248c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0a      	ldr	r2, [pc, #40]	@ (80024c4 <HAL_TIM_PWM_MspInit+0x38>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d10b      	bne.n	80024b6 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800249e:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80024a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a2:	4a09      	ldr	r2, [pc, #36]	@ (80024c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80024a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80024aa:	4b07      	ldr	r3, [pc, #28]	@ (80024c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80024ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40021000 	.word	0x40021000

080024cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 030c 	add.w	r3, r7, #12
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a12      	ldr	r2, [pc, #72]	@ (8002534 <HAL_TIM_MspPostInit+0x68>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d11d      	bne.n	800252a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <HAL_TIM_MspPostInit+0x6c>)
 80024f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f2:	4a11      	ldr	r2, [pc, #68]	@ (8002538 <HAL_TIM_MspPostInit+0x6c>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002538 <HAL_TIM_MspPostInit+0x6c>)
 80024fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002506:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800250a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002518:	2301      	movs	r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251c:	f107 030c 	add.w	r3, r7, #12
 8002520:	4619      	mov	r1, r3
 8002522:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002526:	f001 fec1 	bl	80042ac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800252a:	bf00      	nop
 800252c:	3720      	adds	r7, #32
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40012c00 	.word	0x40012c00
 8002538:	40021000 	.word	0x40021000

0800253c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b0a0      	sub	sp, #128	@ 0x80
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002554:	f107 0318 	add.w	r3, r7, #24
 8002558:	2254      	movs	r2, #84	@ 0x54
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f007 fa7b 	bl	8009a58 <memset>
  if(huart->Instance==USART1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a5f      	ldr	r2, [pc, #380]	@ (80026e4 <HAL_UART_MspInit+0x1a8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d168      	bne.n	800263e <HAL_UART_MspInit+0x102>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800256c:	2301      	movs	r3, #1
 800256e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002570:	2300      	movs	r3, #0
 8002572:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002574:	f107 0318 	add.w	r3, r7, #24
 8002578:	4618      	mov	r0, r3
 800257a:	f003 fe01 	bl	8006180 <HAL_RCCEx_PeriphCLKConfig>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002584:	f7ff fc62 	bl	8001e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002588:	4b57      	ldr	r3, [pc, #348]	@ (80026e8 <HAL_UART_MspInit+0x1ac>)
 800258a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258c:	4a56      	ldr	r2, [pc, #344]	@ (80026e8 <HAL_UART_MspInit+0x1ac>)
 800258e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002592:	6613      	str	r3, [r2, #96]	@ 0x60
 8002594:	4b54      	ldr	r3, [pc, #336]	@ (80026e8 <HAL_UART_MspInit+0x1ac>)
 8002596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a0:	4b51      	ldr	r3, [pc, #324]	@ (80026e8 <HAL_UART_MspInit+0x1ac>)
 80025a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a4:	4a50      	ldr	r2, [pc, #320]	@ (80026e8 <HAL_UART_MspInit+0x1ac>)
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ac:	4b4e      	ldr	r3, [pc, #312]	@ (80026e8 <HAL_UART_MspInit+0x1ac>)
 80025ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025b8:	23c0      	movs	r3, #192	@ 0xc0
 80025ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025bc:	2302      	movs	r3, #2
 80025be:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c4:	2303      	movs	r3, #3
 80025c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025c8:	2307      	movs	r3, #7
 80025ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80025d0:	4619      	mov	r1, r3
 80025d2:	4846      	ldr	r0, [pc, #280]	@ (80026ec <HAL_UART_MspInit+0x1b0>)
 80025d4:	f001 fe6a 	bl	80042ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80025d8:	4b45      	ldr	r3, [pc, #276]	@ (80026f0 <HAL_UART_MspInit+0x1b4>)
 80025da:	4a46      	ldr	r2, [pc, #280]	@ (80026f4 <HAL_UART_MspInit+0x1b8>)
 80025dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80025de:	4b44      	ldr	r3, [pc, #272]	@ (80026f0 <HAL_UART_MspInit+0x1b4>)
 80025e0:	2202      	movs	r2, #2
 80025e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025e4:	4b42      	ldr	r3, [pc, #264]	@ (80026f0 <HAL_UART_MspInit+0x1b4>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ea:	4b41      	ldr	r3, [pc, #260]	@ (80026f0 <HAL_UART_MspInit+0x1b4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025f0:	4b3f      	ldr	r3, [pc, #252]	@ (80026f0 <HAL_UART_MspInit+0x1b4>)
 80025f2:	2280      	movs	r2, #128	@ 0x80
 80025f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025f6:	4b3e      	ldr	r3, [pc, #248]	@ (80026f0 <HAL_UART_MspInit+0x1b4>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025fc:	4b3c      	ldr	r3, [pc, #240]	@ (80026f0 <HAL_UART_MspInit+0x1b4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002602:	4b3b      	ldr	r3, [pc, #236]	@ (80026f0 <HAL_UART_MspInit+0x1b4>)
 8002604:	2200      	movs	r2, #0
 8002606:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002608:	4b39      	ldr	r3, [pc, #228]	@ (80026f0 <HAL_UART_MspInit+0x1b4>)
 800260a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800260e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002610:	4837      	ldr	r0, [pc, #220]	@ (80026f0 <HAL_UART_MspInit+0x1b4>)
 8002612:	f001 fbd5 	bl	8003dc0 <HAL_DMA_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800261c:	f7ff fc16 	bl	8001e4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a33      	ldr	r2, [pc, #204]	@ (80026f0 <HAL_UART_MspInit+0x1b4>)
 8002624:	675a      	str	r2, [r3, #116]	@ 0x74
 8002626:	4a32      	ldr	r2, [pc, #200]	@ (80026f0 <HAL_UART_MspInit+0x1b4>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	2025      	movs	r0, #37	@ 0x25
 8002632:	f001 fb8e 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002636:	2025      	movs	r0, #37	@ 0x25
 8002638:	f001 fba7 	bl	8003d8a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800263c:	e04d      	b.n	80026da <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART2)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a2d      	ldr	r2, [pc, #180]	@ (80026f8 <HAL_UART_MspInit+0x1bc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d148      	bne.n	80026da <HAL_UART_MspInit+0x19e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002648:	2302      	movs	r3, #2
 800264a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800264c:	2300      	movs	r3, #0
 800264e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002650:	f107 0318 	add.w	r3, r7, #24
 8002654:	4618      	mov	r0, r3
 8002656:	f003 fd93 	bl	8006180 <HAL_RCCEx_PeriphCLKConfig>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8002660:	f7ff fbf4 	bl	8001e4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002664:	4b20      	ldr	r3, [pc, #128]	@ (80026e8 <HAL_UART_MspInit+0x1ac>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002668:	4a1f      	ldr	r2, [pc, #124]	@ (80026e8 <HAL_UART_MspInit+0x1ac>)
 800266a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800266e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002670:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <HAL_UART_MspInit+0x1ac>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267c:	4b1a      	ldr	r3, [pc, #104]	@ (80026e8 <HAL_UART_MspInit+0x1ac>)
 800267e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002680:	4a19      	ldr	r2, [pc, #100]	@ (80026e8 <HAL_UART_MspInit+0x1ac>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002688:	4b17      	ldr	r3, [pc, #92]	@ (80026e8 <HAL_UART_MspInit+0x1ac>)
 800268a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002694:	2304      	movs	r3, #4
 8002696:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a0:	2303      	movs	r3, #3
 80026a2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026a4:	2307      	movs	r3, #7
 80026a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80026a8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80026ac:	4619      	mov	r1, r3
 80026ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026b2:	f001 fdfb 	bl	80042ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80026b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80026c8:	2303      	movs	r3, #3
 80026ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80026cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80026d0:	4619      	mov	r1, r3
 80026d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026d6:	f001 fde9 	bl	80042ac <HAL_GPIO_Init>
}
 80026da:	bf00      	nop
 80026dc:	3780      	adds	r7, #128	@ 0x80
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40021000 	.word	0x40021000
 80026ec:	48000400 	.word	0x48000400
 80026f0:	20000404 	.word	0x20000404
 80026f4:	40020058 	.word	0x40020058
 80026f8:	40004400 	.word	0x40004400

080026fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <NMI_Handler+0x4>

08002704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <HardFault_Handler+0x4>

0800270c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <MemManage_Handler+0x4>

08002714 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <BusFault_Handler+0x4>

0800271c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <UsageFault_Handler+0x4>

08002724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002752:	f000 f96d 	bl	8002a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002760:	4802      	ldr	r0, [pc, #8]	@ (800276c <DMA1_Channel5_IRQHandler+0x10>)
 8002762:	f001 fcc4 	bl	80040ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000404 	.word	0x20000404

08002770 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002774:	4802      	ldr	r0, [pc, #8]	@ (8002780 <USART1_IRQHandler+0x10>)
 8002776:	f004 ff5b 	bl	8007630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	200002f4 	.word	0x200002f4

08002784 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return 1;
 8002788:	2301      	movs	r3, #1
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_kill>:

int _kill(int pid, int sig)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800279e:	f007 f9ad 	bl	8009afc <__errno>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2216      	movs	r2, #22
 80027a6:	601a      	str	r2, [r3, #0]
  return -1;
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_exit>:

void _exit (int status)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ffe7 	bl	8002794 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027c6:	bf00      	nop
 80027c8:	e7fd      	b.n	80027c6 <_exit+0x12>

080027ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	e00a      	b.n	80027f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027dc:	f3af 8000 	nop.w
 80027e0:	4601      	mov	r1, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	60ba      	str	r2, [r7, #8]
 80027e8:	b2ca      	uxtb	r2, r1
 80027ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	3301      	adds	r3, #1
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	dbf0      	blt.n	80027dc <_read+0x12>
  }

  return len;
 80027fa:	687b      	ldr	r3, [r7, #4]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	e009      	b.n	800282a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	60ba      	str	r2, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fff0 	bl	8001804 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	429a      	cmp	r2, r3
 8002830:	dbf1      	blt.n	8002816 <_write+0x12>
  }
  return len;
 8002832:	687b      	ldr	r3, [r7, #4]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <_close>:

int _close(int file)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002864:	605a      	str	r2, [r3, #4]
  return 0;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <_isatty>:

int _isatty(int file)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800287c:	2301      	movs	r3, #1
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028ac:	4a14      	ldr	r2, [pc, #80]	@ (8002900 <_sbrk+0x5c>)
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <_sbrk+0x60>)
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b8:	4b13      	ldr	r3, [pc, #76]	@ (8002908 <_sbrk+0x64>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c0:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <_sbrk+0x64>)
 80028c2:	4a12      	ldr	r2, [pc, #72]	@ (800290c <_sbrk+0x68>)
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028c6:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <_sbrk+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d207      	bcs.n	80028e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d4:	f007 f912 	bl	8009afc <__errno>
 80028d8:	4603      	mov	r3, r0
 80028da:	220c      	movs	r2, #12
 80028dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
 80028e2:	e009      	b.n	80028f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e4:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <_sbrk+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ea:	4b07      	ldr	r3, [pc, #28]	@ (8002908 <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	4a05      	ldr	r2, [pc, #20]	@ (8002908 <_sbrk+0x64>)
 80028f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	2000c000 	.word	0x2000c000
 8002904:	00000400 	.word	0x00000400
 8002908:	20000864 	.word	0x20000864
 800290c:	200009b8 	.word	0x200009b8

08002910 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002914:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <SystemInit+0x20>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291a:	4a05      	ldr	r2, [pc, #20]	@ (8002930 <SystemInit+0x20>)
 800291c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002920:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002934:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800296c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002938:	f7ff ffea 	bl	8002910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800293c:	480c      	ldr	r0, [pc, #48]	@ (8002970 <LoopForever+0x6>)
  ldr r1, =_edata
 800293e:	490d      	ldr	r1, [pc, #52]	@ (8002974 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002940:	4a0d      	ldr	r2, [pc, #52]	@ (8002978 <LoopForever+0xe>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002944:	e002      	b.n	800294c <LoopCopyDataInit>

08002946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294a:	3304      	adds	r3, #4

0800294c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800294c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002950:	d3f9      	bcc.n	8002946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002952:	4a0a      	ldr	r2, [pc, #40]	@ (800297c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002954:	4c0a      	ldr	r4, [pc, #40]	@ (8002980 <LoopForever+0x16>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002958:	e001      	b.n	800295e <LoopFillZerobss>

0800295a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800295c:	3204      	adds	r2, #4

0800295e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002960:	d3fb      	bcc.n	800295a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002962:	f007 f8d1 	bl	8009b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002966:	f7fe fbd7 	bl	8001118 <main>

0800296a <LoopForever>:

LoopForever:
    b LoopForever
 800296a:	e7fe      	b.n	800296a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800296c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002974:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002978:	0800e8e0 	.word	0x0800e8e0
  ldr r2, =_sbss
 800297c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002980:	200009b8 	.word	0x200009b8

08002984 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002984:	e7fe      	b.n	8002984 <ADC1_IRQHandler>

08002986 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002990:	2003      	movs	r0, #3
 8002992:	f001 f9d3 	bl	8003d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002996:	2000      	movs	r0, #0
 8002998:	f000 f80e 	bl	80029b8 <HAL_InitTick>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	71fb      	strb	r3, [r7, #7]
 80029a6:	e001      	b.n	80029ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029a8:	f7ff fc90 	bl	80022cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029ac:	79fb      	ldrb	r3, [r7, #7]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029c4:	4b17      	ldr	r3, [pc, #92]	@ (8002a24 <HAL_InitTick+0x6c>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d023      	beq.n	8002a14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029cc:	4b16      	ldr	r3, [pc, #88]	@ (8002a28 <HAL_InitTick+0x70>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b14      	ldr	r3, [pc, #80]	@ (8002a24 <HAL_InitTick+0x6c>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4619      	mov	r1, r3
 80029d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029da:	fbb3 f3f1 	udiv	r3, r3, r1
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 f9df 	bl	8003da6 <HAL_SYSTICK_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10f      	bne.n	8002a0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b0f      	cmp	r3, #15
 80029f2:	d809      	bhi.n	8002a08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f4:	2200      	movs	r2, #0
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295
 80029fc:	f001 f9a9 	bl	8003d52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a00:	4a0a      	ldr	r2, [pc, #40]	@ (8002a2c <HAL_InitTick+0x74>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e007      	b.n	8002a18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
 8002a0c:	e004      	b.n	8002a18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
 8002a12:	e001      	b.n	8002a18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000008 	.word	0x20000008
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	20000004 	.word	0x20000004

08002a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a34:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_IncTick+0x20>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <HAL_IncTick+0x24>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	4a04      	ldr	r2, [pc, #16]	@ (8002a54 <HAL_IncTick+0x24>)
 8002a42:	6013      	str	r3, [r2, #0]
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000008 	.word	0x20000008
 8002a54:	20000868 	.word	0x20000868

08002a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	@ (8002a6c <HAL_GetTick+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000868 	.word	0x20000868

08002a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7ff ffee 	bl	8002a58 <HAL_GetTick>
 8002a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d005      	beq.n	8002a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab4 <HAL_Delay+0x44>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a96:	bf00      	nop
 8002a98:	f7ff ffde 	bl	8002a58 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d8f7      	bhi.n	8002a98 <HAL_Delay+0x28>
  {
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000008 	.word	0x20000008

08002ab8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	609a      	str	r2, [r3, #8]
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	609a      	str	r2, [r3, #8]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3360      	adds	r3, #96	@ 0x60
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <LL_ADC_SetOffset+0x44>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b58:	bf00      	nop
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	03fff000 	.word	0x03fff000

08002b68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3360      	adds	r3, #96	@ 0x60
 8002b76:	461a      	mov	r2, r3
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3360      	adds	r3, #96	@ 0x60
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3330      	adds	r3, #48	@ 0x30
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	4413      	add	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	211f      	movs	r1, #31
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	401a      	ands	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	0e9b      	lsrs	r3, r3, #26
 8002c28:	f003 011f 	and.w	r1, r3, #31
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f003 031f 	and.w	r3, r3, #31
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	431a      	orrs	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c3c:	bf00      	nop
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3314      	adds	r3, #20
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	0e5b      	lsrs	r3, r3, #25
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	4413      	add	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	0d1b      	lsrs	r3, r3, #20
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	2107      	movs	r1, #7
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	401a      	ands	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	0d1b      	lsrs	r3, r3, #20
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c92:	bf00      	nop
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	401a      	ands	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0318 	and.w	r3, r3, #24
 8002cc2:	4908      	ldr	r1, [pc, #32]	@ (8002ce4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cc4:	40d9      	lsrs	r1, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	400b      	ands	r3, r1
 8002cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	0007ffff 	.word	0x0007ffff

08002ce8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002cf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6093      	str	r3, [r2, #8]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d20:	d101      	bne.n	8002d26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d70:	d101      	bne.n	8002d76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d98:	f043 0201 	orr.w	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <LL_ADC_IsEnabled+0x18>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <LL_ADC_IsEnabled+0x1a>
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002de2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002de6:	f043 0204 	orr.w	r2, r3, #4
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d101      	bne.n	8002e12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d101      	bne.n	8002e38 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e126      	b.n	80030b0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d109      	bne.n	8002e84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff fa4f 	bl	8002314 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff3f 	bl	8002d0c <LL_ADC_IsDeepPowerDownEnabled>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d004      	beq.n	8002e9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff25 	bl	8002ce8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ff5a 	bl	8002d5c <LL_ADC_IsInternalRegulatorEnabled>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d115      	bne.n	8002eda <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ff3e 	bl	8002d34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eb8:	4b7f      	ldr	r3, [pc, #508]	@ (80030b8 <HAL_ADC_Init+0x270>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	099b      	lsrs	r3, r3, #6
 8002ebe:	4a7f      	ldr	r2, [pc, #508]	@ (80030bc <HAL_ADC_Init+0x274>)
 8002ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ecc:	e002      	b.n	8002ed4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f9      	bne.n	8002ece <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ff3c 	bl	8002d5c <LL_ADC_IsInternalRegulatorEnabled>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10d      	bne.n	8002f06 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eee:	f043 0210 	orr.w	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ff75 	bl	8002dfa <LL_ADC_REG_IsConversionOngoing>
 8002f10:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 80bf 	bne.w	800309e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 80bb 	bne.w	800309e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f30:	f043 0202 	orr.w	r2, r3, #2
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff35 	bl	8002dac <LL_ADC_IsEnabled>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f48:	485d      	ldr	r0, [pc, #372]	@ (80030c0 <HAL_ADC_Init+0x278>)
 8002f4a:	f7ff ff2f 	bl	8002dac <LL_ADC_IsEnabled>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	485a      	ldr	r0, [pc, #360]	@ (80030c4 <HAL_ADC_Init+0x27c>)
 8002f5c:	f7ff fdac 	bl	8002ab8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7e5b      	ldrb	r3, [r3, #25]
 8002f64:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f6a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002f70:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002f76:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f7e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d106      	bne.n	8002f9c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	3b01      	subs	r3, #1
 8002f94:	045b      	lsls	r3, r3, #17
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d009      	beq.n	8002fb8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	4b42      	ldr	r3, [pc, #264]	@ (80030c8 <HAL_ADC_Init+0x280>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	69b9      	ldr	r1, [r7, #24]
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff25 	bl	8002e20 <LL_ADC_INJ_IsConversionOngoing>
 8002fd6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d13d      	bne.n	800305a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d13a      	bne.n	800305a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fe8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ff0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003000:	f023 0302 	bic.w	r3, r3, #2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	69b9      	ldr	r1, [r7, #24]
 800300a:	430b      	orrs	r3, r1
 800300c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003014:	2b01      	cmp	r3, #1
 8003016:	d118      	bne.n	800304a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003022:	f023 0304 	bic.w	r3, r3, #4
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800302e:	4311      	orrs	r1, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003034:	4311      	orrs	r1, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800303a:	430a      	orrs	r2, r1
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	611a      	str	r2, [r3, #16]
 8003048:	e007      	b.n	800305a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0201 	bic.w	r2, r2, #1
 8003058:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d10c      	bne.n	800307c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003068:	f023 010f 	bic.w	r1, r3, #15
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	1e5a      	subs	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	631a      	str	r2, [r3, #48]	@ 0x30
 800307a:	e007      	b.n	800308c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 020f 	bic.w	r2, r2, #15
 800308a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003090:	f023 0303 	bic.w	r3, r3, #3
 8003094:	f043 0201 	orr.w	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	655a      	str	r2, [r3, #84]	@ 0x54
 800309c:	e007      	b.n	80030ae <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a2:	f043 0210 	orr.w	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3720      	adds	r7, #32
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000000 	.word	0x20000000
 80030bc:	053e2d63 	.word	0x053e2d63
 80030c0:	50040000 	.word	0x50040000
 80030c4:	50040300 	.word	0x50040300
 80030c8:	fff0c007 	.word	0xfff0c007

080030cc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fe8e 	bl	8002dfa <LL_ADC_REG_IsConversionOngoing>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d14f      	bne.n	8003184 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_Start+0x26>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e04b      	b.n	800318a <HAL_ADC_Start+0xbe>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fcc8 	bl	8003a90 <ADC_Enable>
 8003100:	4603      	mov	r3, r0
 8003102:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d137      	bne.n	800317a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003122:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800312a:	d106      	bne.n	800313a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003130:	f023 0206 	bic.w	r2, r3, #6
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	659a      	str	r2, [r3, #88]	@ 0x58
 8003138:	e002      	b.n	8003140 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	221c      	movs	r2, #28
 8003146:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003162:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003166:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fe2d 	bl	8002dd2 <LL_ADC_REG_StartConversion>
 8003178:	e006      	b.n	8003188 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003182:	e001      	b.n	8003188 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003184:	2302      	movs	r3, #2
 8003186:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b086      	sub	sp, #24
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d102      	bne.n	80031aa <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80031a4:	2308      	movs	r3, #8
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	e010      	b.n	80031cc <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031bc:	f043 0220 	orr.w	r2, r3, #32
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e06f      	b.n	80032a8 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80031c8:	2304      	movs	r3, #4
 80031ca:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80031cc:	f7ff fc44 	bl	8002a58 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031d2:	e021      	b.n	8003218 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031da:	d01d      	beq.n	8003218 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80031dc:	f7ff fc3c 	bl	8002a58 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d302      	bcc.n	80031f2 <HAL_ADC_PollForConversion+0x60>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d112      	bne.n	8003218 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10b      	bne.n	8003218 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003204:	f043 0204 	orr.w	r2, r3, #4
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e047      	b.n	80032a8 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0d6      	beq.n	80031d4 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fcc7 	bl	8002bca <LL_ADC_REG_IsTriggerSourceSWStart>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01c      	beq.n	800327c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7e5b      	ldrb	r3, [r3, #25]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d118      	bne.n	800327c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b08      	cmp	r3, #8
 8003256:	d111      	bne.n	800327c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003268:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003274:	f043 0201 	orr.w	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b08      	cmp	r3, #8
 8003288:	d104      	bne.n	8003294 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2208      	movs	r2, #8
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	e008      	b.n	80032a6 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d103      	bne.n	80032a6 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	220c      	movs	r2, #12
 80032a4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3718      	adds	r7, #24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b0b6      	sub	sp, #216	@ 0xd8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x22>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e3bb      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x79a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fd7d 	bl	8002dfa <LL_ADC_REG_IsConversionOngoing>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	f040 83a0 	bne.w	8003a48 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b05      	cmp	r3, #5
 8003316:	d824      	bhi.n	8003362 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	3b02      	subs	r3, #2
 800331e:	2b03      	cmp	r3, #3
 8003320:	d81b      	bhi.n	800335a <HAL_ADC_ConfigChannel+0x8e>
 8003322:	a201      	add	r2, pc, #4	@ (adr r2, 8003328 <HAL_ADC_ConfigChannel+0x5c>)
 8003324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003328:	08003339 	.word	0x08003339
 800332c:	08003341 	.word	0x08003341
 8003330:	08003349 	.word	0x08003349
 8003334:	08003351 	.word	0x08003351
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003338:	230c      	movs	r3, #12
 800333a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800333e:	e010      	b.n	8003362 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003340:	2312      	movs	r3, #18
 8003342:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003346:	e00c      	b.n	8003362 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003348:	2318      	movs	r3, #24
 800334a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800334e:	e008      	b.n	8003362 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003350:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003358:	e003      	b.n	8003362 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800335a:	2306      	movs	r3, #6
 800335c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003360:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003370:	f7ff fc3e 	bl	8002bf0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fd3e 	bl	8002dfa <LL_ADC_REG_IsConversionOngoing>
 800337e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fd4a 	bl	8002e20 <LL_ADC_INJ_IsConversionOngoing>
 800338c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003390:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003394:	2b00      	cmp	r3, #0
 8003396:	f040 81a4 	bne.w	80036e2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800339a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f040 819f 	bne.w	80036e2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6819      	ldr	r1, [r3, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f7ff fc49 	bl	8002c48 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	08db      	lsrs	r3, r3, #3
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d00a      	beq.n	80033ee <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6919      	ldr	r1, [r3, #16]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033e8:	f7ff fb9a 	bl	8002b20 <LL_ADC_SetOffset>
 80033ec:	e179      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fbb7 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <HAL_ADC_ConfigChannel+0x14e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2100      	movs	r1, #0
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fbac 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003410:	4603      	mov	r3, r0
 8003412:	0e9b      	lsrs	r3, r3, #26
 8003414:	f003 021f 	and.w	r2, r3, #31
 8003418:	e01e      	b.n	8003458 <HAL_ADC_ConfigChannel+0x18c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fba1 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003426:	4603      	mov	r3, r0
 8003428:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003430:	fa93 f3a3 	rbit	r3, r3
 8003434:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003438:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800343c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003440:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003448:	2320      	movs	r3, #32
 800344a:	e004      	b.n	8003456 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800344c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	b2db      	uxtb	r3, r3
 8003456:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x1a4>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	0e9b      	lsrs	r3, r3, #26
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	e018      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x1d6>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800347c:	fa93 f3a3 	rbit	r3, r3
 8003480:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003484:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800348c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003494:	2320      	movs	r3, #32
 8003496:	e004      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003498:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d106      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fb70 	bl	8002b94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2101      	movs	r1, #1
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fb54 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x214>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2101      	movs	r1, #1
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fb49 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 80034d6:	4603      	mov	r3, r0
 80034d8:	0e9b      	lsrs	r3, r3, #26
 80034da:	f003 021f 	and.w	r2, r3, #31
 80034de:	e01e      	b.n	800351e <HAL_ADC_ConfigChannel+0x252>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2101      	movs	r1, #1
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fb3e 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80034fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003502:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003506:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800350e:	2320      	movs	r3, #32
 8003510:	e004      	b.n	800351c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x26a>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	0e9b      	lsrs	r3, r3, #26
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	e018      	b.n	8003568 <HAL_ADC_ConfigChannel+0x29c>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800354a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800354e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003552:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800355a:	2320      	movs	r3, #32
 800355c:	e004      	b.n	8003568 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800355e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003568:	429a      	cmp	r2, r3
 800356a:	d106      	bne.n	800357a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2200      	movs	r2, #0
 8003572:	2101      	movs	r1, #1
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fb0d 	bl	8002b94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2102      	movs	r1, #2
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff faf1 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003586:	4603      	mov	r3, r0
 8003588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x2da>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2102      	movs	r1, #2
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fae6 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 800359c:	4603      	mov	r3, r0
 800359e:	0e9b      	lsrs	r3, r3, #26
 80035a0:	f003 021f 	and.w	r2, r3, #31
 80035a4:	e01e      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x318>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2102      	movs	r1, #2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fadb 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035bc:	fa93 f3a3 	rbit	r3, r3
 80035c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80035c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80035cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80035d4:	2320      	movs	r3, #32
 80035d6:	e004      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80035d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035dc:	fab3 f383 	clz	r3, r3
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d105      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x330>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	0e9b      	lsrs	r3, r3, #26
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	e014      	b.n	8003626 <HAL_ADC_ConfigChannel+0x35a>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800360a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800360c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003610:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003618:	2320      	movs	r3, #32
 800361a:	e004      	b.n	8003626 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800361c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003620:	fab3 f383 	clz	r3, r3
 8003624:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003626:	429a      	cmp	r2, r3
 8003628:	d106      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2200      	movs	r2, #0
 8003630:	2102      	movs	r1, #2
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff faae 	bl	8002b94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2103      	movs	r1, #3
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fa92 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003644:	4603      	mov	r3, r0
 8003646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x398>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2103      	movs	r1, #3
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fa87 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 800365a:	4603      	mov	r3, r0
 800365c:	0e9b      	lsrs	r3, r3, #26
 800365e:	f003 021f 	and.w	r2, r3, #31
 8003662:	e017      	b.n	8003694 <HAL_ADC_ConfigChannel+0x3c8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2103      	movs	r1, #3
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fa7c 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003670:	4603      	mov	r3, r0
 8003672:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800367c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800367e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003680:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003686:	2320      	movs	r3, #32
 8003688:	e003      	b.n	8003692 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800368a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800368c:	fab3 f383 	clz	r3, r3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369c:	2b00      	cmp	r3, #0
 800369e:	d105      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x3e0>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	0e9b      	lsrs	r3, r3, #26
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	e011      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x404>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80036ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80036be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80036c4:	2320      	movs	r3, #32
 80036c6:	e003      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80036c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d106      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2200      	movs	r2, #0
 80036da:	2103      	movs	r1, #3
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fa59 	bl	8002b94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fb60 	bl	8002dac <LL_ADC_IsEnabled>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f040 8140 	bne.w	8003974 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	461a      	mov	r2, r3
 8003702:	f7ff facd 	bl	8002ca0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	4a8f      	ldr	r2, [pc, #572]	@ (8003948 <HAL_ADC_ConfigChannel+0x67c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	f040 8131 	bne.w	8003974 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <HAL_ADC_ConfigChannel+0x46e>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	0e9b      	lsrs	r3, r3, #26
 8003728:	3301      	adds	r3, #1
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2b09      	cmp	r3, #9
 8003730:	bf94      	ite	ls
 8003732:	2301      	movls	r3, #1
 8003734:	2300      	movhi	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	e019      	b.n	800376e <HAL_ADC_ConfigChannel+0x4a2>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003740:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800374c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003752:	2320      	movs	r3, #32
 8003754:	e003      	b.n	800375e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	3301      	adds	r3, #1
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	2b09      	cmp	r3, #9
 8003766:	bf94      	ite	ls
 8003768:	2301      	movls	r3, #1
 800376a:	2300      	movhi	r3, #0
 800376c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800376e:	2b00      	cmp	r3, #0
 8003770:	d079      	beq.n	8003866 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377a:	2b00      	cmp	r3, #0
 800377c:	d107      	bne.n	800378e <HAL_ADC_ConfigChannel+0x4c2>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	0e9b      	lsrs	r3, r3, #26
 8003784:	3301      	adds	r3, #1
 8003786:	069b      	lsls	r3, r3, #26
 8003788:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800378c:	e015      	b.n	80037ba <HAL_ADC_ConfigChannel+0x4ee>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800379c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800379e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80037a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80037a6:	2320      	movs	r3, #32
 80037a8:	e003      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80037aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	069b      	lsls	r3, r3, #26
 80037b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <HAL_ADC_ConfigChannel+0x50e>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	0e9b      	lsrs	r3, r3, #26
 80037cc:	3301      	adds	r3, #1
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2101      	movs	r1, #1
 80037d4:	fa01 f303 	lsl.w	r3, r1, r3
 80037d8:	e017      	b.n	800380a <HAL_ADC_ConfigChannel+0x53e>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e2:	fa93 f3a3 	rbit	r3, r3
 80037e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80037e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80037ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80037f2:	2320      	movs	r3, #32
 80037f4:	e003      	b.n	80037fe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80037f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037f8:	fab3 f383 	clz	r3, r3
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	3301      	adds	r3, #1
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	2101      	movs	r1, #1
 8003806:	fa01 f303 	lsl.w	r3, r1, r3
 800380a:	ea42 0103 	orr.w	r1, r2, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x564>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	0e9b      	lsrs	r3, r3, #26
 8003820:	3301      	adds	r3, #1
 8003822:	f003 021f 	and.w	r2, r3, #31
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	e018      	b.n	8003862 <HAL_ADC_ConfigChannel+0x596>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003840:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003848:	2320      	movs	r3, #32
 800384a:	e003      	b.n	8003854 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800384c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	3301      	adds	r3, #1
 8003856:	f003 021f 	and.w	r2, r3, #31
 800385a:	4613      	mov	r3, r2
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	4413      	add	r3, r2
 8003860:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003862:	430b      	orrs	r3, r1
 8003864:	e081      	b.n	800396a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386e:	2b00      	cmp	r3, #0
 8003870:	d107      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x5b6>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	0e9b      	lsrs	r3, r3, #26
 8003878:	3301      	adds	r3, #1
 800387a:	069b      	lsls	r3, r3, #26
 800387c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003880:	e015      	b.n	80038ae <HAL_ADC_ConfigChannel+0x5e2>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388a:	fa93 f3a3 	rbit	r3, r3
 800388e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800389a:	2320      	movs	r3, #32
 800389c:	e003      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800389e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a0:	fab3 f383 	clz	r3, r3
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	3301      	adds	r3, #1
 80038a8:	069b      	lsls	r3, r3, #26
 80038aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x602>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	0e9b      	lsrs	r3, r3, #26
 80038c0:	3301      	adds	r3, #1
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	2101      	movs	r1, #1
 80038c8:	fa01 f303 	lsl.w	r3, r1, r3
 80038cc:	e017      	b.n	80038fe <HAL_ADC_ConfigChannel+0x632>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	61bb      	str	r3, [r7, #24]
  return result;
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80038e6:	2320      	movs	r3, #32
 80038e8:	e003      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	fab3 f383 	clz	r3, r3
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	2101      	movs	r1, #1
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	ea42 0103 	orr.w	r1, r2, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10d      	bne.n	800392a <HAL_ADC_ConfigChannel+0x65e>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	0e9b      	lsrs	r3, r3, #26
 8003914:	3301      	adds	r3, #1
 8003916:	f003 021f 	and.w	r2, r3, #31
 800391a:	4613      	mov	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	3b1e      	subs	r3, #30
 8003922:	051b      	lsls	r3, r3, #20
 8003924:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003928:	e01e      	b.n	8003968 <HAL_ADC_ConfigChannel+0x69c>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	fa93 f3a3 	rbit	r3, r3
 8003936:	60fb      	str	r3, [r7, #12]
  return result;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d104      	bne.n	800394c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003942:	2320      	movs	r3, #32
 8003944:	e006      	b.n	8003954 <HAL_ADC_ConfigChannel+0x688>
 8003946:	bf00      	nop
 8003948:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	3301      	adds	r3, #1
 8003956:	f003 021f 	and.w	r2, r3, #31
 800395a:	4613      	mov	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	3b1e      	subs	r3, #30
 8003962:	051b      	lsls	r3, r3, #20
 8003964:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003968:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800396e:	4619      	mov	r1, r3
 8003970:	f7ff f96a 	bl	8002c48 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4b3d      	ldr	r3, [pc, #244]	@ (8003a70 <HAL_ADC_ConfigChannel+0x7a4>)
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d06c      	beq.n	8003a5a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003980:	483c      	ldr	r0, [pc, #240]	@ (8003a74 <HAL_ADC_ConfigChannel+0x7a8>)
 8003982:	f7ff f8bf 	bl	8002b04 <LL_ADC_GetCommonPathInternalCh>
 8003986:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a3a      	ldr	r2, [pc, #232]	@ (8003a78 <HAL_ADC_ConfigChannel+0x7ac>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d127      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003994:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003998:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d121      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a35      	ldr	r2, [pc, #212]	@ (8003a7c <HAL_ADC_ConfigChannel+0x7b0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d157      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039b2:	4619      	mov	r1, r3
 80039b4:	482f      	ldr	r0, [pc, #188]	@ (8003a74 <HAL_ADC_ConfigChannel+0x7a8>)
 80039b6:	f7ff f892 	bl	8002ade <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039ba:	4b31      	ldr	r3, [pc, #196]	@ (8003a80 <HAL_ADC_ConfigChannel+0x7b4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	099b      	lsrs	r3, r3, #6
 80039c0:	4a30      	ldr	r2, [pc, #192]	@ (8003a84 <HAL_ADC_ConfigChannel+0x7b8>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	4613      	mov	r3, r2
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80039d4:	e002      	b.n	80039dc <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	3b01      	subs	r3, #1
 80039da:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f9      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039e2:	e03a      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a27      	ldr	r2, [pc, #156]	@ (8003a88 <HAL_ADC_ConfigChannel+0x7bc>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d113      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10d      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1f      	ldr	r2, [pc, #124]	@ (8003a7c <HAL_ADC_ConfigChannel+0x7b0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d12a      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4819      	ldr	r0, [pc, #100]	@ (8003a74 <HAL_ADC_ConfigChannel+0x7a8>)
 8003a10:	f7ff f865 	bl	8002ade <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a14:	e021      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a8c <HAL_ADC_ConfigChannel+0x7c0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d11c      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d116      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a12      	ldr	r2, [pc, #72]	@ (8003a7c <HAL_ADC_ConfigChannel+0x7b0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d111      	bne.n	8003a5a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a3e:	4619      	mov	r1, r3
 8003a40:	480c      	ldr	r0, [pc, #48]	@ (8003a74 <HAL_ADC_ConfigChannel+0x7a8>)
 8003a42:	f7ff f84c 	bl	8002ade <LL_ADC_SetCommonPathInternalCh>
 8003a46:	e008      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4c:	f043 0220 	orr.w	r2, r3, #32
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a62:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	37d8      	adds	r7, #216	@ 0xd8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	80080000 	.word	0x80080000
 8003a74:	50040300 	.word	0x50040300
 8003a78:	c7520000 	.word	0xc7520000
 8003a7c:	50040000 	.word	0x50040000
 8003a80:	20000000 	.word	0x20000000
 8003a84:	053e2d63 	.word	0x053e2d63
 8003a88:	cb840000 	.word	0xcb840000
 8003a8c:	80000001 	.word	0x80000001

08003a90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff f983 	bl	8002dac <LL_ADC_IsEnabled>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d169      	bne.n	8003b80 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	4b36      	ldr	r3, [pc, #216]	@ (8003b8c <ADC_Enable+0xfc>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abe:	f043 0210 	orr.w	r2, r3, #16
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aca:	f043 0201 	orr.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e055      	b.n	8003b82 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff f952 	bl	8002d84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003ae0:	482b      	ldr	r0, [pc, #172]	@ (8003b90 <ADC_Enable+0x100>)
 8003ae2:	f7ff f80f 	bl	8002b04 <LL_ADC_GetCommonPathInternalCh>
 8003ae6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003ae8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d013      	beq.n	8003b18 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af0:	4b28      	ldr	r3, [pc, #160]	@ (8003b94 <ADC_Enable+0x104>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	4a28      	ldr	r2, [pc, #160]	@ (8003b98 <ADC_Enable+0x108>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	099b      	lsrs	r3, r3, #6
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	4613      	mov	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b0a:	e002      	b.n	8003b12 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f9      	bne.n	8003b0c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b18:	f7fe ff9e 	bl	8002a58 <HAL_GetTick>
 8003b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b1e:	e028      	b.n	8003b72 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff f941 	bl	8002dac <LL_ADC_IsEnabled>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff f925 	bl	8002d84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b3a:	f7fe ff8d 	bl	8002a58 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d914      	bls.n	8003b72 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d00d      	beq.n	8003b72 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5a:	f043 0210 	orr.w	r2, r3, #16
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b66:	f043 0201 	orr.w	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e007      	b.n	8003b82 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d1cf      	bne.n	8003b20 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	8000003f 	.word	0x8000003f
 8003b90:	50040300 	.word	0x50040300
 8003b94:	20000000 	.word	0x20000000
 8003b98:	053e2d63 	.word	0x053e2d63

08003b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bac:	4b0c      	ldr	r3, [pc, #48]	@ (8003be0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bce:	4a04      	ldr	r2, [pc, #16]	@ (8003be0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	60d3      	str	r3, [r2, #12]
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	e000ed00 	.word	0xe000ed00

08003be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be8:	4b04      	ldr	r3, [pc, #16]	@ (8003bfc <__NVIC_GetPriorityGrouping+0x18>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	f003 0307 	and.w	r3, r3, #7
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	db0b      	blt.n	8003c2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	f003 021f 	and.w	r2, r3, #31
 8003c18:	4907      	ldr	r1, [pc, #28]	@ (8003c38 <__NVIC_EnableIRQ+0x38>)
 8003c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	2001      	movs	r0, #1
 8003c22:	fa00 f202 	lsl.w	r2, r0, r2
 8003c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	e000e100 	.word	0xe000e100

08003c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	6039      	str	r1, [r7, #0]
 8003c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	db0a      	blt.n	8003c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	490c      	ldr	r1, [pc, #48]	@ (8003c88 <__NVIC_SetPriority+0x4c>)
 8003c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5a:	0112      	lsls	r2, r2, #4
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	440b      	add	r3, r1
 8003c60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c64:	e00a      	b.n	8003c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	4908      	ldr	r1, [pc, #32]	@ (8003c8c <__NVIC_SetPriority+0x50>)
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	3b04      	subs	r3, #4
 8003c74:	0112      	lsls	r2, r2, #4
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	440b      	add	r3, r1
 8003c7a:	761a      	strb	r2, [r3, #24]
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000e100 	.word	0xe000e100
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b089      	sub	sp, #36	@ 0x24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f1c3 0307 	rsb	r3, r3, #7
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	bf28      	it	cs
 8003cae:	2304      	movcs	r3, #4
 8003cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d902      	bls.n	8003cc0 <NVIC_EncodePriority+0x30>
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3b03      	subs	r3, #3
 8003cbe:	e000      	b.n	8003cc2 <NVIC_EncodePriority+0x32>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	401a      	ands	r2, r3
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce2:	43d9      	mvns	r1, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce8:	4313      	orrs	r3, r2
         );
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3724      	adds	r7, #36	@ 0x24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d08:	d301      	bcc.n	8003d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e00f      	b.n	8003d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d38 <SysTick_Config+0x40>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d16:	210f      	movs	r1, #15
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1c:	f7ff ff8e 	bl	8003c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d20:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <SysTick_Config+0x40>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d26:	4b04      	ldr	r3, [pc, #16]	@ (8003d38 <SysTick_Config+0x40>)
 8003d28:	2207      	movs	r2, #7
 8003d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	e000e010 	.word	0xe000e010

08003d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ff29 	bl	8003b9c <__NVIC_SetPriorityGrouping>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b086      	sub	sp, #24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	4603      	mov	r3, r0
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d64:	f7ff ff3e 	bl	8003be4 <__NVIC_GetPriorityGrouping>
 8003d68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	6978      	ldr	r0, [r7, #20]
 8003d70:	f7ff ff8e 	bl	8003c90 <NVIC_EncodePriority>
 8003d74:	4602      	mov	r2, r0
 8003d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff ff5d 	bl	8003c3c <__NVIC_SetPriority>
}
 8003d82:	bf00      	nop
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	4603      	mov	r3, r0
 8003d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff31 	bl	8003c00 <__NVIC_EnableIRQ>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff ffa2 	bl	8003cf8 <SysTick_Config>
 8003db4:	4603      	mov	r3, r0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e098      	b.n	8003f04 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8003f10 <HAL_DMA_Init+0x150>)
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d80f      	bhi.n	8003dfe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	4b4b      	ldr	r3, [pc, #300]	@ (8003f14 <HAL_DMA_Init+0x154>)
 8003de6:	4413      	add	r3, r2
 8003de8:	4a4b      	ldr	r2, [pc, #300]	@ (8003f18 <HAL_DMA_Init+0x158>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	091b      	lsrs	r3, r3, #4
 8003df0:	009a      	lsls	r2, r3, #2
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a48      	ldr	r2, [pc, #288]	@ (8003f1c <HAL_DMA_Init+0x15c>)
 8003dfa:	641a      	str	r2, [r3, #64]	@ 0x40
 8003dfc:	e00e      	b.n	8003e1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	4b46      	ldr	r3, [pc, #280]	@ (8003f20 <HAL_DMA_Init+0x160>)
 8003e06:	4413      	add	r3, r2
 8003e08:	4a43      	ldr	r2, [pc, #268]	@ (8003f18 <HAL_DMA_Init+0x158>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	091b      	lsrs	r3, r3, #4
 8003e10:	009a      	lsls	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a42      	ldr	r2, [pc, #264]	@ (8003f24 <HAL_DMA_Init+0x164>)
 8003e1a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e76:	d039      	beq.n	8003eec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	4a27      	ldr	r2, [pc, #156]	@ (8003f1c <HAL_DMA_Init+0x15c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d11a      	bne.n	8003eb8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e82:	4b29      	ldr	r3, [pc, #164]	@ (8003f28 <HAL_DMA_Init+0x168>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8a:	f003 031c 	and.w	r3, r3, #28
 8003e8e:	210f      	movs	r1, #15
 8003e90:	fa01 f303 	lsl.w	r3, r1, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	4924      	ldr	r1, [pc, #144]	@ (8003f28 <HAL_DMA_Init+0x168>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e9c:	4b22      	ldr	r3, [pc, #136]	@ (8003f28 <HAL_DMA_Init+0x168>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6859      	ldr	r1, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea8:	f003 031c 	and.w	r3, r3, #28
 8003eac:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb0:	491d      	ldr	r1, [pc, #116]	@ (8003f28 <HAL_DMA_Init+0x168>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]
 8003eb6:	e019      	b.n	8003eec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f2c <HAL_DMA_Init+0x16c>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec0:	f003 031c 	and.w	r3, r3, #28
 8003ec4:	210f      	movs	r1, #15
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	4917      	ldr	r1, [pc, #92]	@ (8003f2c <HAL_DMA_Init+0x16c>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ed2:	4b16      	ldr	r3, [pc, #88]	@ (8003f2c <HAL_DMA_Init+0x16c>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6859      	ldr	r1, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ede:	f003 031c 	and.w	r3, r3, #28
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	4911      	ldr	r1, [pc, #68]	@ (8003f2c <HAL_DMA_Init+0x16c>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40020407 	.word	0x40020407
 8003f14:	bffdfff8 	.word	0xbffdfff8
 8003f18:	cccccccd 	.word	0xcccccccd
 8003f1c:	40020000 	.word	0x40020000
 8003f20:	bffdfbf8 	.word	0xbffdfbf8
 8003f24:	40020400 	.word	0x40020400
 8003f28:	400200a8 	.word	0x400200a8
 8003f2c:	400204a8 	.word	0x400204a8

08003f30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_DMA_Start_IT+0x20>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e04b      	b.n	8003fe8 <HAL_DMA_Start_IT+0xb8>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d13a      	bne.n	8003fda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0201 	bic.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f95f 	bl	800424c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 020e 	orr.w	r2, r2, #14
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e00f      	b.n	8003fc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0204 	bic.w	r2, r2, #4
 8003fb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 020a 	orr.w	r2, r2, #10
 8003fc6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	e005      	b.n	8003fe6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d008      	beq.n	800401a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2204      	movs	r2, #4
 800400c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e022      	b.n	8004060 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 020e 	bic.w	r2, r2, #14
 8004028:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	f003 021c 	and.w	r2, r3, #28
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	2101      	movs	r1, #1
 8004048:	fa01 f202 	lsl.w	r2, r1, r2
 800404c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800405e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d005      	beq.n	8004090 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2204      	movs	r2, #4
 8004088:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	73fb      	strb	r3, [r7, #15]
 800408e:	e029      	b.n	80040e4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 020e 	bic.w	r2, r2, #14
 800409e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b4:	f003 021c 	and.w	r2, r3, #28
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040bc:	2101      	movs	r1, #1
 80040be:	fa01 f202 	lsl.w	r2, r1, r2
 80040c2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	4798      	blx	r3
    }
  }
  return status;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b084      	sub	sp, #16
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800410a:	f003 031c 	and.w	r3, r3, #28
 800410e:	2204      	movs	r2, #4
 8004110:	409a      	lsls	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4013      	ands	r3, r2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d026      	beq.n	8004168 <HAL_DMA_IRQHandler+0x7a>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d021      	beq.n	8004168 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d107      	bne.n	8004142 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0204 	bic.w	r2, r2, #4
 8004140:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004146:	f003 021c 	and.w	r2, r3, #28
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	2104      	movs	r1, #4
 8004150:	fa01 f202 	lsl.w	r2, r1, r2
 8004154:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	2b00      	cmp	r3, #0
 800415c:	d071      	beq.n	8004242 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004166:	e06c      	b.n	8004242 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416c:	f003 031c 	and.w	r3, r3, #28
 8004170:	2202      	movs	r2, #2
 8004172:	409a      	lsls	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4013      	ands	r3, r2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d02e      	beq.n	80041da <HAL_DMA_IRQHandler+0xec>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d029      	beq.n	80041da <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10b      	bne.n	80041ac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 020a 	bic.w	r2, r2, #10
 80041a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b0:	f003 021c 	and.w	r2, r3, #28
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b8:	2102      	movs	r1, #2
 80041ba:	fa01 f202 	lsl.w	r2, r1, r2
 80041be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d038      	beq.n	8004242 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041d8:	e033      	b.n	8004242 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041de:	f003 031c 	and.w	r3, r3, #28
 80041e2:	2208      	movs	r2, #8
 80041e4:	409a      	lsls	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d02a      	beq.n	8004244 <HAL_DMA_IRQHandler+0x156>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d025      	beq.n	8004244 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 020e 	bic.w	r2, r2, #14
 8004206:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420c:	f003 021c 	and.w	r2, r3, #28
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004214:	2101      	movs	r1, #1
 8004216:	fa01 f202 	lsl.w	r2, r1, r2
 800421a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004236:	2b00      	cmp	r3, #0
 8004238:	d004      	beq.n	8004244 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004242:	bf00      	nop
 8004244:	bf00      	nop
}
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425e:	f003 021c 	and.w	r2, r3, #28
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004266:	2101      	movs	r1, #1
 8004268:	fa01 f202 	lsl.w	r2, r1, r2
 800426c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2b10      	cmp	r3, #16
 800427c:	d108      	bne.n	8004290 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800428e:	e007      	b.n	80042a0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	60da      	str	r2, [r3, #12]
}
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ba:	e148      	b.n	800454e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	2101      	movs	r1, #1
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	4013      	ands	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 813a 	beq.w	8004548 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d005      	beq.n	80042ec <HAL_GPIO_Init+0x40>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d130      	bne.n	800434e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	2203      	movs	r2, #3
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	43db      	mvns	r3, r3
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4013      	ands	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004322:	2201      	movs	r2, #1
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	43db      	mvns	r3, r3
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4013      	ands	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	091b      	lsrs	r3, r3, #4
 8004338:	f003 0201 	and.w	r2, r3, #1
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b03      	cmp	r3, #3
 8004358:	d017      	beq.n	800438a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	2203      	movs	r2, #3
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4013      	ands	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d123      	bne.n	80043de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	08da      	lsrs	r2, r3, #3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3208      	adds	r2, #8
 800439e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	220f      	movs	r2, #15
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43db      	mvns	r3, r3
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	4013      	ands	r3, r2
 80043b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	08da      	lsrs	r2, r3, #3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3208      	adds	r2, #8
 80043d8:	6939      	ldr	r1, [r7, #16]
 80043da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	2203      	movs	r2, #3
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4013      	ands	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 0203 	and.w	r2, r3, #3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8094 	beq.w	8004548 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004420:	4b52      	ldr	r3, [pc, #328]	@ (800456c <HAL_GPIO_Init+0x2c0>)
 8004422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004424:	4a51      	ldr	r2, [pc, #324]	@ (800456c <HAL_GPIO_Init+0x2c0>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	6613      	str	r3, [r2, #96]	@ 0x60
 800442c:	4b4f      	ldr	r3, [pc, #316]	@ (800456c <HAL_GPIO_Init+0x2c0>)
 800442e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004438:	4a4d      	ldr	r2, [pc, #308]	@ (8004570 <HAL_GPIO_Init+0x2c4>)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	3302      	adds	r3, #2
 8004440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004444:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	220f      	movs	r2, #15
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4013      	ands	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004462:	d00d      	beq.n	8004480 <HAL_GPIO_Init+0x1d4>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a43      	ldr	r2, [pc, #268]	@ (8004574 <HAL_GPIO_Init+0x2c8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d007      	beq.n	800447c <HAL_GPIO_Init+0x1d0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a42      	ldr	r2, [pc, #264]	@ (8004578 <HAL_GPIO_Init+0x2cc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d101      	bne.n	8004478 <HAL_GPIO_Init+0x1cc>
 8004474:	2302      	movs	r3, #2
 8004476:	e004      	b.n	8004482 <HAL_GPIO_Init+0x1d6>
 8004478:	2307      	movs	r3, #7
 800447a:	e002      	b.n	8004482 <HAL_GPIO_Init+0x1d6>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <HAL_GPIO_Init+0x1d6>
 8004480:	2300      	movs	r3, #0
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	f002 0203 	and.w	r2, r2, #3
 8004488:	0092      	lsls	r2, r2, #2
 800448a:	4093      	lsls	r3, r2
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004492:	4937      	ldr	r1, [pc, #220]	@ (8004570 <HAL_GPIO_Init+0x2c4>)
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	089b      	lsrs	r3, r3, #2
 8004498:	3302      	adds	r3, #2
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044a0:	4b36      	ldr	r3, [pc, #216]	@ (800457c <HAL_GPIO_Init+0x2d0>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4013      	ands	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044c4:	4a2d      	ldr	r2, [pc, #180]	@ (800457c <HAL_GPIO_Init+0x2d0>)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044ca:	4b2c      	ldr	r3, [pc, #176]	@ (800457c <HAL_GPIO_Init+0x2d0>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4013      	ands	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044ee:	4a23      	ldr	r2, [pc, #140]	@ (800457c <HAL_GPIO_Init+0x2d0>)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80044f4:	4b21      	ldr	r3, [pc, #132]	@ (800457c <HAL_GPIO_Init+0x2d0>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	43db      	mvns	r3, r3
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4013      	ands	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004518:	4a18      	ldr	r2, [pc, #96]	@ (800457c <HAL_GPIO_Init+0x2d0>)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800451e:	4b17      	ldr	r3, [pc, #92]	@ (800457c <HAL_GPIO_Init+0x2d0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	43db      	mvns	r3, r3
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4013      	ands	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004542:	4a0e      	ldr	r2, [pc, #56]	@ (800457c <HAL_GPIO_Init+0x2d0>)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	3301      	adds	r3, #1
 800454c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	f47f aeaf 	bne.w	80042bc <HAL_GPIO_Init+0x10>
  }
}
 800455e:	bf00      	nop
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	40021000 	.word	0x40021000
 8004570:	40010000 	.word	0x40010000
 8004574:	48000400 	.word	0x48000400
 8004578:	48000800 	.word	0x48000800
 800457c:	40010400 	.word	0x40010400

08004580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	807b      	strh	r3, [r7, #2]
 800458c:	4613      	mov	r3, r2
 800458e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004590:	787b      	ldrb	r3, [r7, #1]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004596:	887a      	ldrh	r2, [r7, #2]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800459c:	e002      	b.n	80045a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800459e:	887a      	ldrh	r2, [r7, #2]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e08d      	b.n	80046de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fd ff00 	bl	80023dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	@ 0x24
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004600:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004610:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d107      	bne.n	800462a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004626:	609a      	str	r2, [r3, #8]
 8004628:	e006      	b.n	8004638 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004636:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d108      	bne.n	8004652 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800464e:	605a      	str	r2, [r3, #4]
 8004650:	e007      	b.n	8004662 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004660:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004674:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004684:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69d9      	ldr	r1, [r3, #28]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1a      	ldr	r2, [r3, #32]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	461a      	mov	r2, r3
 80046f4:	460b      	mov	r3, r1
 80046f6:	817b      	strh	r3, [r7, #10]
 80046f8:	4613      	mov	r3, r2
 80046fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b20      	cmp	r3, #32
 8004706:	f040 80fd 	bne.w	8004904 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_I2C_Master_Transmit+0x30>
 8004714:	2302      	movs	r3, #2
 8004716:	e0f6      	b.n	8004906 <HAL_I2C_Master_Transmit+0x21e>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004720:	f7fe f99a 	bl	8002a58 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	2319      	movs	r3, #25
 800472c:	2201      	movs	r2, #1
 800472e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fbea 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e0e1      	b.n	8004906 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2221      	movs	r2, #33	@ 0x21
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2210      	movs	r2, #16
 800474e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	893a      	ldrh	r2, [r7, #8]
 8004762:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800476e:	b29b      	uxth	r3, r3
 8004770:	2bff      	cmp	r3, #255	@ 0xff
 8004772:	d906      	bls.n	8004782 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	22ff      	movs	r2, #255	@ 0xff
 8004778:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800477a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e007      	b.n	8004792 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800478c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004790:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004796:	2b00      	cmp	r3, #0
 8004798:	d024      	beq.n	80047e4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479e:	781a      	ldrb	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	3301      	adds	r3, #1
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	8979      	ldrh	r1, [r7, #10]
 80047d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004910 <HAL_I2C_Master_Transmit+0x228>)
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 fd59 	bl	8005294 <I2C_TransferConfig>
 80047e2:	e066      	b.n	80048b2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	8979      	ldrh	r1, [r7, #10]
 80047ec:	4b48      	ldr	r3, [pc, #288]	@ (8004910 <HAL_I2C_Master_Transmit+0x228>)
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f000 fd4e 	bl	8005294 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80047f8:	e05b      	b.n	80048b2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	6a39      	ldr	r1, [r7, #32]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fbdd 	bl	8004fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e07b      	b.n	8004906 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004812:	781a      	ldrb	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d034      	beq.n	80048b2 <HAL_I2C_Master_Transmit+0x1ca>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800484c:	2b00      	cmp	r3, #0
 800484e:	d130      	bne.n	80048b2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	2200      	movs	r2, #0
 8004858:	2180      	movs	r1, #128	@ 0x80
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fb56 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e04d      	b.n	8004906 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	2bff      	cmp	r3, #255	@ 0xff
 8004872:	d90e      	bls.n	8004892 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	22ff      	movs	r2, #255	@ 0xff
 8004878:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800487e:	b2da      	uxtb	r2, r3
 8004880:	8979      	ldrh	r1, [r7, #10]
 8004882:	2300      	movs	r3, #0
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 fd02 	bl	8005294 <I2C_TransferConfig>
 8004890:	e00f      	b.n	80048b2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	8979      	ldrh	r1, [r7, #10]
 80048a4:	2300      	movs	r3, #0
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 fcf1 	bl	8005294 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d19e      	bne.n	80047fa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	6a39      	ldr	r1, [r7, #32]
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fbc3 	bl	800504c <I2C_WaitOnSTOPFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e01a      	b.n	8004906 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2220      	movs	r2, #32
 80048d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6859      	ldr	r1, [r3, #4]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004914 <HAL_I2C_Master_Transmit+0x22c>)
 80048e4:	400b      	ands	r3, r1
 80048e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	e000      	b.n	8004906 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
  }
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	80002000 	.word	0x80002000
 8004914:	fe00e800 	.word	0xfe00e800

08004918 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af02      	add	r7, sp, #8
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	4608      	mov	r0, r1
 8004922:	4611      	mov	r1, r2
 8004924:	461a      	mov	r2, r3
 8004926:	4603      	mov	r3, r0
 8004928:	817b      	strh	r3, [r7, #10]
 800492a:	460b      	mov	r3, r1
 800492c:	813b      	strh	r3, [r7, #8]
 800492e:	4613      	mov	r3, r2
 8004930:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b20      	cmp	r3, #32
 800493c:	f040 80f9 	bne.w	8004b32 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_I2C_Mem_Write+0x34>
 8004946:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004948:	2b00      	cmp	r3, #0
 800494a:	d105      	bne.n	8004958 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004952:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0ed      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_I2C_Mem_Write+0x4e>
 8004962:	2302      	movs	r3, #2
 8004964:	e0e6      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800496e:	f7fe f873 	bl	8002a58 <HAL_GetTick>
 8004972:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	2319      	movs	r3, #25
 800497a:	2201      	movs	r2, #1
 800497c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 fac3 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0d1      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2221      	movs	r2, #33	@ 0x21
 8004994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2240      	movs	r2, #64	@ 0x40
 800499c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a3a      	ldr	r2, [r7, #32]
 80049aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80049b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049b8:	88f8      	ldrh	r0, [r7, #6]
 80049ba:	893a      	ldrh	r2, [r7, #8]
 80049bc:	8979      	ldrh	r1, [r7, #10]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	4603      	mov	r3, r0
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f9d3 	bl	8004d74 <I2C_RequestMemoryWrite>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0a9      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2bff      	cmp	r3, #255	@ 0xff
 80049e8:	d90e      	bls.n	8004a08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	22ff      	movs	r2, #255	@ 0xff
 80049ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	8979      	ldrh	r1, [r7, #10]
 80049f8:	2300      	movs	r3, #0
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fc47 	bl	8005294 <I2C_TransferConfig>
 8004a06:	e00f      	b.n	8004a28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	8979      	ldrh	r1, [r7, #10]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 fc36 	bl	8005294 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 fac6 	bl	8004fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e07b      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	781a      	ldrb	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d034      	beq.n	8004ae0 <HAL_I2C_Mem_Write+0x1c8>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d130      	bne.n	8004ae0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a84:	2200      	movs	r2, #0
 8004a86:	2180      	movs	r1, #128	@ 0x80
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 fa3f 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e04d      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2bff      	cmp	r3, #255	@ 0xff
 8004aa0:	d90e      	bls.n	8004ac0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	22ff      	movs	r2, #255	@ 0xff
 8004aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	8979      	ldrh	r1, [r7, #10]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fbeb 	bl	8005294 <I2C_TransferConfig>
 8004abe:	e00f      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	8979      	ldrh	r1, [r7, #10]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 fbda 	bl	8005294 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d19e      	bne.n	8004a28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 faac 	bl	800504c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e01a      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2220      	movs	r2, #32
 8004b04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6859      	ldr	r1, [r3, #4]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b0a      	ldr	r3, [pc, #40]	@ (8004b3c <HAL_I2C_Mem_Write+0x224>)
 8004b12:	400b      	ands	r3, r1
 8004b14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e000      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004b32:	2302      	movs	r3, #2
  }
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	fe00e800 	.word	0xfe00e800

08004b40 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	4608      	mov	r0, r1
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	817b      	strh	r3, [r7, #10]
 8004b52:	460b      	mov	r3, r1
 8004b54:	813b      	strh	r3, [r7, #8]
 8004b56:	4613      	mov	r3, r2
 8004b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	f040 80fd 	bne.w	8004d62 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_I2C_Mem_Read+0x34>
 8004b6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b7a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e0f1      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_I2C_Mem_Read+0x4e>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e0ea      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b96:	f7fd ff5f 	bl	8002a58 <HAL_GetTick>
 8004b9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2319      	movs	r3, #25
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f9af 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0d5      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2222      	movs	r2, #34	@ 0x22
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2240      	movs	r2, #64	@ 0x40
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a3a      	ldr	r2, [r7, #32]
 8004bd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004be0:	88f8      	ldrh	r0, [r7, #6]
 8004be2:	893a      	ldrh	r2, [r7, #8]
 8004be4:	8979      	ldrh	r1, [r7, #10]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	4603      	mov	r3, r0
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f913 	bl	8004e1c <I2C_RequestMemoryRead>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0ad      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2bff      	cmp	r3, #255	@ 0xff
 8004c10:	d90e      	bls.n	8004c30 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	8979      	ldrh	r1, [r7, #10]
 8004c20:	4b52      	ldr	r3, [pc, #328]	@ (8004d6c <HAL_I2C_Mem_Read+0x22c>)
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fb33 	bl	8005294 <I2C_TransferConfig>
 8004c2e:	e00f      	b.n	8004c50 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	8979      	ldrh	r1, [r7, #10]
 8004c42:	4b4a      	ldr	r3, [pc, #296]	@ (8004d6c <HAL_I2C_Mem_Read+0x22c>)
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fb22 	bl	8005294 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c56:	2200      	movs	r2, #0
 8004c58:	2104      	movs	r1, #4
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f956 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e07c      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d034      	beq.n	8004d10 <HAL_I2C_Mem_Read+0x1d0>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d130      	bne.n	8004d10 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2180      	movs	r1, #128	@ 0x80
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f927 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e04d      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2bff      	cmp	r3, #255	@ 0xff
 8004cd0:	d90e      	bls.n	8004cf0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	8979      	ldrh	r1, [r7, #10]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fad3 	bl	8005294 <I2C_TransferConfig>
 8004cee:	e00f      	b.n	8004d10 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	8979      	ldrh	r1, [r7, #10]
 8004d02:	2300      	movs	r3, #0
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 fac2 	bl	8005294 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d19a      	bne.n	8004c50 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f994 	bl	800504c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e01a      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2220      	movs	r2, #32
 8004d34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6859      	ldr	r1, [r3, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4b0b      	ldr	r3, [pc, #44]	@ (8004d70 <HAL_I2C_Mem_Read+0x230>)
 8004d42:	400b      	ands	r3, r1
 8004d44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e000      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004d62:	2302      	movs	r3, #2
  }
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	80002400 	.word	0x80002400
 8004d70:	fe00e800 	.word	0xfe00e800

08004d74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	4608      	mov	r0, r1
 8004d7e:	4611      	mov	r1, r2
 8004d80:	461a      	mov	r2, r3
 8004d82:	4603      	mov	r3, r0
 8004d84:	817b      	strh	r3, [r7, #10]
 8004d86:	460b      	mov	r3, r1
 8004d88:	813b      	strh	r3, [r7, #8]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	8979      	ldrh	r1, [r7, #10]
 8004d94:	4b20      	ldr	r3, [pc, #128]	@ (8004e18 <I2C_RequestMemoryWrite+0xa4>)
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 fa79 	bl	8005294 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	69b9      	ldr	r1, [r7, #24]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f909 	bl	8004fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e02c      	b.n	8004e10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d105      	bne.n	8004dc8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dbc:	893b      	ldrh	r3, [r7, #8]
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004dc6:	e015      	b.n	8004df4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004dc8:	893b      	ldrh	r3, [r7, #8]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	69b9      	ldr	r1, [r7, #24]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f8ef 	bl	8004fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e012      	b.n	8004e10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dea:	893b      	ldrh	r3, [r7, #8]
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2180      	movs	r1, #128	@ 0x80
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f884 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	80002000 	.word	0x80002000

08004e1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	4608      	mov	r0, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	817b      	strh	r3, [r7, #10]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	813b      	strh	r3, [r7, #8]
 8004e32:	4613      	mov	r3, r2
 8004e34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	8979      	ldrh	r1, [r7, #10]
 8004e3c:	4b20      	ldr	r3, [pc, #128]	@ (8004ec0 <I2C_RequestMemoryRead+0xa4>)
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	2300      	movs	r3, #0
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 fa26 	bl	8005294 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	69b9      	ldr	r1, [r7, #24]
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f8b6 	bl	8004fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e02c      	b.n	8004eb6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e5c:	88fb      	ldrh	r3, [r7, #6]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d105      	bne.n	8004e6e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e62:	893b      	ldrh	r3, [r7, #8]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e6c:	e015      	b.n	8004e9a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e6e:	893b      	ldrh	r3, [r7, #8]
 8004e70:	0a1b      	lsrs	r3, r3, #8
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e7c:	69fa      	ldr	r2, [r7, #28]
 8004e7e:	69b9      	ldr	r1, [r7, #24]
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f89c 	bl	8004fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e012      	b.n	8004eb6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e90:	893b      	ldrh	r3, [r7, #8]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2140      	movs	r1, #64	@ 0x40
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f831 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	80002000 	.word	0x80002000

08004ec4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d103      	bne.n	8004ee2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d007      	beq.n	8004f00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	619a      	str	r2, [r3, #24]
  }
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f1c:	e03b      	b.n	8004f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	6839      	ldr	r1, [r7, #0]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f8d6 	bl	80050d4 <I2C_IsErrorOccurred>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e041      	b.n	8004fb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d02d      	beq.n	8004f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3a:	f7fd fd8d 	bl	8002a58 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d302      	bcc.n	8004f50 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d122      	bne.n	8004f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	bf0c      	ite	eq
 8004f60:	2301      	moveq	r3, #1
 8004f62:	2300      	movne	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d113      	bne.n	8004f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f72:	f043 0220 	orr.w	r2, r3, #32
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e00f      	b.n	8004fb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699a      	ldr	r2, [r3, #24]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d0b4      	beq.n	8004f1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fca:	e033      	b.n	8005034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f87f 	bl	80050d4 <I2C_IsErrorOccurred>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e031      	b.n	8005044 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe6:	d025      	beq.n	8005034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe8:	f7fd fd36 	bl	8002a58 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d11a      	bne.n	8005034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b02      	cmp	r3, #2
 800500a:	d013      	beq.n	8005034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005010:	f043 0220 	orr.w	r2, r3, #32
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e007      	b.n	8005044 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b02      	cmp	r3, #2
 8005040:	d1c4      	bne.n	8004fcc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005058:	e02f      	b.n	80050ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f838 	bl	80050d4 <I2C_IsErrorOccurred>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e02d      	b.n	80050ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800506e:	f7fd fcf3 	bl	8002a58 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	429a      	cmp	r2, r3
 800507c:	d302      	bcc.n	8005084 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d11a      	bne.n	80050ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b20      	cmp	r3, #32
 8005090:	d013      	beq.n	80050ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005096:	f043 0220 	orr.w	r2, r3, #32
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e007      	b.n	80050ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d1c8      	bne.n	800505a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	@ 0x28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80050ee:	2300      	movs	r3, #0
 80050f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d068      	beq.n	80051d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2210      	movs	r2, #16
 8005106:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005108:	e049      	b.n	800519e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005110:	d045      	beq.n	800519e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005112:	f7fd fca1 	bl	8002a58 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	429a      	cmp	r2, r3
 8005120:	d302      	bcc.n	8005128 <I2C_IsErrorOccurred+0x54>
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d13a      	bne.n	800519e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005132:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800513a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800514a:	d121      	bne.n	8005190 <I2C_IsErrorOccurred+0xbc>
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005152:	d01d      	beq.n	8005190 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005154:	7cfb      	ldrb	r3, [r7, #19]
 8005156:	2b20      	cmp	r3, #32
 8005158:	d01a      	beq.n	8005190 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005168:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800516a:	f7fd fc75 	bl	8002a58 <HAL_GetTick>
 800516e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005170:	e00e      	b.n	8005190 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005172:	f7fd fc71 	bl	8002a58 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b19      	cmp	r3, #25
 800517e:	d907      	bls.n	8005190 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	f043 0320 	orr.w	r3, r3, #32
 8005186:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800518e:	e006      	b.n	800519e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b20      	cmp	r3, #32
 800519c:	d1e9      	bne.n	8005172 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	2b20      	cmp	r3, #32
 80051aa:	d003      	beq.n	80051b4 <I2C_IsErrorOccurred+0xe0>
 80051ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0aa      	beq.n	800510a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80051b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d103      	bne.n	80051c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2220      	movs	r2, #32
 80051c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	f043 0304 	orr.w	r3, r3, #4
 80051ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00b      	beq.n	80051fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	f043 0301 	orr.w	r3, r3, #1
 80051ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80051f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	f043 0308 	orr.w	r3, r3, #8
 800520c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005216:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	f043 0302 	orr.w	r3, r3, #2
 800522e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005238:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01c      	beq.n	8005282 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f7ff fe3b 	bl	8004ec4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6859      	ldr	r1, [r3, #4]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4b0d      	ldr	r3, [pc, #52]	@ (8005290 <I2C_IsErrorOccurred+0x1bc>)
 800525a:	400b      	ands	r3, r1
 800525c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	431a      	orrs	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005282:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005286:	4618      	mov	r0, r3
 8005288:	3728      	adds	r7, #40	@ 0x28
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	fe00e800 	.word	0xfe00e800

08005294 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	460b      	mov	r3, r1
 80052a0:	817b      	strh	r3, [r7, #10]
 80052a2:	4613      	mov	r3, r2
 80052a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052a6:	897b      	ldrh	r3, [r7, #10]
 80052a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052ac:	7a7b      	ldrb	r3, [r7, #9]
 80052ae:	041b      	lsls	r3, r3, #16
 80052b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	4313      	orrs	r3, r2
 80052be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	0d5b      	lsrs	r3, r3, #21
 80052ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80052d2:	4b08      	ldr	r3, [pc, #32]	@ (80052f4 <I2C_TransferConfig+0x60>)
 80052d4:	430b      	orrs	r3, r1
 80052d6:	43db      	mvns	r3, r3
 80052d8:	ea02 0103 	and.w	r1, r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	03ff63ff 	.word	0x03ff63ff

080052f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b20      	cmp	r3, #32
 800530c:	d138      	bne.n	8005380 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005318:	2302      	movs	r3, #2
 800531a:	e032      	b.n	8005382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2224      	movs	r2, #36	@ 0x24
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0201 	bic.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800534a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6819      	ldr	r1, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	e000      	b.n	8005382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005380:	2302      	movs	r3, #2
  }
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d139      	bne.n	8005418 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e033      	b.n	800541a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2224      	movs	r2, #36	@ 0x24
 80053be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0201 	bic.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80053e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	e000      	b.n	800541a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005418:	2302      	movs	r3, #2
  }
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800542c:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a04      	ldr	r2, [pc, #16]	@ (8005444 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005436:	6013      	str	r3, [r2, #0]
}
 8005438:	bf00      	nop
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40007000 	.word	0x40007000

08005448 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800544c:	4b04      	ldr	r3, [pc, #16]	@ (8005460 <HAL_PWREx_GetVoltageRange+0x18>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005454:	4618      	mov	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40007000 	.word	0x40007000

08005464 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005472:	d130      	bne.n	80054d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005474:	4b23      	ldr	r3, [pc, #140]	@ (8005504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800547c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005480:	d038      	beq.n	80054f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005482:	4b20      	ldr	r3, [pc, #128]	@ (8005504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800548a:	4a1e      	ldr	r2, [pc, #120]	@ (8005504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800548c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005490:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005492:	4b1d      	ldr	r3, [pc, #116]	@ (8005508 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2232      	movs	r2, #50	@ 0x32
 8005498:	fb02 f303 	mul.w	r3, r2, r3
 800549c:	4a1b      	ldr	r2, [pc, #108]	@ (800550c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	0c9b      	lsrs	r3, r3, #18
 80054a4:	3301      	adds	r3, #1
 80054a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054a8:	e002      	b.n	80054b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054b0:	4b14      	ldr	r3, [pc, #80]	@ (8005504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054bc:	d102      	bne.n	80054c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f2      	bne.n	80054aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054d0:	d110      	bne.n	80054f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e00f      	b.n	80054f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80054d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054e2:	d007      	beq.n	80054f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054e4:	4b07      	ldr	r3, [pc, #28]	@ (8005504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054ec:	4a05      	ldr	r2, [pc, #20]	@ (8005504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40007000 	.word	0x40007000
 8005508:	20000000 	.word	0x20000000
 800550c:	431bde83 	.word	0x431bde83

08005510 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d102      	bne.n	8005524 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f000 bc02 	b.w	8005d28 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005524:	4b96      	ldr	r3, [pc, #600]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f003 030c 	and.w	r3, r3, #12
 800552c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800552e:	4b94      	ldr	r3, [pc, #592]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 80e4 	beq.w	800570e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <HAL_RCC_OscConfig+0x4c>
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b0c      	cmp	r3, #12
 8005550:	f040 808b 	bne.w	800566a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2b01      	cmp	r3, #1
 8005558:	f040 8087 	bne.w	800566a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800555c:	4b88      	ldr	r3, [pc, #544]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_RCC_OscConfig+0x64>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e3d9      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1a      	ldr	r2, [r3, #32]
 8005578:	4b81      	ldr	r3, [pc, #516]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d004      	beq.n	800558e <HAL_RCC_OscConfig+0x7e>
 8005584:	4b7e      	ldr	r3, [pc, #504]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800558c:	e005      	b.n	800559a <HAL_RCC_OscConfig+0x8a>
 800558e:	4b7c      	ldr	r3, [pc, #496]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 8005590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005594:	091b      	lsrs	r3, r3, #4
 8005596:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800559a:	4293      	cmp	r3, r2
 800559c:	d223      	bcs.n	80055e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fd8c 	bl	80060c0 <RCC_SetFlashLatencyFromMSIRange>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e3ba      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055b2:	4b73      	ldr	r3, [pc, #460]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a72      	ldr	r2, [pc, #456]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80055b8:	f043 0308 	orr.w	r3, r3, #8
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	4b70      	ldr	r3, [pc, #448]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	496d      	ldr	r1, [pc, #436]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055d0:	4b6b      	ldr	r3, [pc, #428]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	4968      	ldr	r1, [pc, #416]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	604b      	str	r3, [r1, #4]
 80055e4:	e025      	b.n	8005632 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055e6:	4b66      	ldr	r3, [pc, #408]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a65      	ldr	r2, [pc, #404]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80055ec:	f043 0308 	orr.w	r3, r3, #8
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	4b63      	ldr	r3, [pc, #396]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	4960      	ldr	r1, [pc, #384]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 8005600:	4313      	orrs	r3, r2
 8005602:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005604:	4b5e      	ldr	r3, [pc, #376]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	495b      	ldr	r1, [pc, #364]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 8005614:	4313      	orrs	r3, r2
 8005616:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d109      	bne.n	8005632 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fd4c 	bl	80060c0 <RCC_SetFlashLatencyFromMSIRange>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e37a      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005632:	f000 fc81 	bl	8005f38 <HAL_RCC_GetSysClockFreq>
 8005636:	4602      	mov	r2, r0
 8005638:	4b51      	ldr	r3, [pc, #324]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	091b      	lsrs	r3, r3, #4
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	4950      	ldr	r1, [pc, #320]	@ (8005784 <HAL_RCC_OscConfig+0x274>)
 8005644:	5ccb      	ldrb	r3, [r1, r3]
 8005646:	f003 031f 	and.w	r3, r3, #31
 800564a:	fa22 f303 	lsr.w	r3, r2, r3
 800564e:	4a4e      	ldr	r2, [pc, #312]	@ (8005788 <HAL_RCC_OscConfig+0x278>)
 8005650:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005652:	4b4e      	ldr	r3, [pc, #312]	@ (800578c <HAL_RCC_OscConfig+0x27c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f7fd f9ae 	bl	80029b8 <HAL_InitTick>
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d052      	beq.n	800570c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	e35e      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d032      	beq.n	80056d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005672:	4b43      	ldr	r3, [pc, #268]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a42      	ldr	r2, [pc, #264]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 8005678:	f043 0301 	orr.w	r3, r3, #1
 800567c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800567e:	f7fd f9eb 	bl	8002a58 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005686:	f7fd f9e7 	bl	8002a58 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e347      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005698:	4b39      	ldr	r3, [pc, #228]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056a4:	4b36      	ldr	r3, [pc, #216]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a35      	ldr	r2, [pc, #212]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80056aa:	f043 0308 	orr.w	r3, r3, #8
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	4b33      	ldr	r3, [pc, #204]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	4930      	ldr	r1, [pc, #192]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	492b      	ldr	r1, [pc, #172]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	604b      	str	r3, [r1, #4]
 80056d6:	e01a      	b.n	800570e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056d8:	4b29      	ldr	r3, [pc, #164]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a28      	ldr	r2, [pc, #160]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 80056de:	f023 0301 	bic.w	r3, r3, #1
 80056e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056e4:	f7fd f9b8 	bl	8002a58 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056ec:	f7fd f9b4 	bl	8002a58 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e314      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056fe:	4b20      	ldr	r3, [pc, #128]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1f0      	bne.n	80056ec <HAL_RCC_OscConfig+0x1dc>
 800570a:	e000      	b.n	800570e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800570c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d073      	beq.n	8005802 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b08      	cmp	r3, #8
 800571e:	d005      	beq.n	800572c <HAL_RCC_OscConfig+0x21c>
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	2b0c      	cmp	r3, #12
 8005724:	d10e      	bne.n	8005744 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b03      	cmp	r3, #3
 800572a:	d10b      	bne.n	8005744 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800572c:	4b14      	ldr	r3, [pc, #80]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d063      	beq.n	8005800 <HAL_RCC_OscConfig+0x2f0>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d15f      	bne.n	8005800 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e2f1      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800574c:	d106      	bne.n	800575c <HAL_RCC_OscConfig+0x24c>
 800574e:	4b0c      	ldr	r3, [pc, #48]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a0b      	ldr	r2, [pc, #44]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 8005754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	e025      	b.n	80057a8 <HAL_RCC_OscConfig+0x298>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005764:	d114      	bne.n	8005790 <HAL_RCC_OscConfig+0x280>
 8005766:	4b06      	ldr	r3, [pc, #24]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a05      	ldr	r2, [pc, #20]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 800576c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	4b03      	ldr	r3, [pc, #12]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a02      	ldr	r2, [pc, #8]	@ (8005780 <HAL_RCC_OscConfig+0x270>)
 8005778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e013      	b.n	80057a8 <HAL_RCC_OscConfig+0x298>
 8005780:	40021000 	.word	0x40021000
 8005784:	0800e408 	.word	0x0800e408
 8005788:	20000000 	.word	0x20000000
 800578c:	20000004 	.word	0x20000004
 8005790:	4ba0      	ldr	r3, [pc, #640]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a9f      	ldr	r2, [pc, #636]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 8005796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	4b9d      	ldr	r3, [pc, #628]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a9c      	ldr	r2, [pc, #624]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 80057a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d013      	beq.n	80057d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b0:	f7fd f952 	bl	8002a58 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057b8:	f7fd f94e 	bl	8002a58 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b64      	cmp	r3, #100	@ 0x64
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e2ae      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ca:	4b92      	ldr	r3, [pc, #584]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0f0      	beq.n	80057b8 <HAL_RCC_OscConfig+0x2a8>
 80057d6:	e014      	b.n	8005802 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fd f93e 	bl	8002a58 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057e0:	f7fd f93a 	bl	8002a58 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b64      	cmp	r3, #100	@ 0x64
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e29a      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057f2:	4b88      	ldr	r3, [pc, #544]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x2d0>
 80057fe:	e000      	b.n	8005802 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d060      	beq.n	80058d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2b04      	cmp	r3, #4
 8005812:	d005      	beq.n	8005820 <HAL_RCC_OscConfig+0x310>
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	2b0c      	cmp	r3, #12
 8005818:	d119      	bne.n	800584e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b02      	cmp	r3, #2
 800581e:	d116      	bne.n	800584e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005820:	4b7c      	ldr	r3, [pc, #496]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <HAL_RCC_OscConfig+0x328>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e277      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005838:	4b76      	ldr	r3, [pc, #472]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	061b      	lsls	r3, r3, #24
 8005846:	4973      	ldr	r1, [pc, #460]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 8005848:	4313      	orrs	r3, r2
 800584a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800584c:	e040      	b.n	80058d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d023      	beq.n	800589e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005856:	4b6f      	ldr	r3, [pc, #444]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a6e      	ldr	r2, [pc, #440]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 800585c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005862:	f7fd f8f9 	bl	8002a58 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800586a:	f7fd f8f5 	bl	8002a58 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e255      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800587c:	4b65      	ldr	r3, [pc, #404]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005888:	4b62      	ldr	r3, [pc, #392]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	061b      	lsls	r3, r3, #24
 8005896:	495f      	ldr	r1, [pc, #380]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 8005898:	4313      	orrs	r3, r2
 800589a:	604b      	str	r3, [r1, #4]
 800589c:	e018      	b.n	80058d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800589e:	4b5d      	ldr	r3, [pc, #372]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a5c      	ldr	r2, [pc, #368]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 80058a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058aa:	f7fd f8d5 	bl	8002a58 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058b2:	f7fd f8d1 	bl	8002a58 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e231      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058c4:	4b53      	ldr	r3, [pc, #332]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f0      	bne.n	80058b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d03c      	beq.n	8005956 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01c      	beq.n	800591e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058e4:	4b4b      	ldr	r3, [pc, #300]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 80058e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058ea:	4a4a      	ldr	r2, [pc, #296]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f4:	f7fd f8b0 	bl	8002a58 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058fc:	f7fd f8ac 	bl	8002a58 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e20c      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800590e:	4b41      	ldr	r3, [pc, #260]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 8005910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0ef      	beq.n	80058fc <HAL_RCC_OscConfig+0x3ec>
 800591c:	e01b      	b.n	8005956 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800591e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 8005920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005924:	4a3b      	ldr	r2, [pc, #236]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 8005926:	f023 0301 	bic.w	r3, r3, #1
 800592a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592e:	f7fd f893 	bl	8002a58 <HAL_GetTick>
 8005932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005934:	e008      	b.n	8005948 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005936:	f7fd f88f 	bl	8002a58 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e1ef      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005948:	4b32      	ldr	r3, [pc, #200]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 800594a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1ef      	bne.n	8005936 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 80a6 	beq.w	8005ab0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005964:	2300      	movs	r3, #0
 8005966:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005968:	4b2a      	ldr	r3, [pc, #168]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 800596a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800596c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10d      	bne.n	8005990 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005974:	4b27      	ldr	r3, [pc, #156]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 8005976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005978:	4a26      	ldr	r2, [pc, #152]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 800597a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800597e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005980:	4b24      	ldr	r3, [pc, #144]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 8005982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005988:	60bb      	str	r3, [r7, #8]
 800598a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800598c:	2301      	movs	r3, #1
 800598e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005990:	4b21      	ldr	r3, [pc, #132]	@ (8005a18 <HAL_RCC_OscConfig+0x508>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005998:	2b00      	cmp	r3, #0
 800599a:	d118      	bne.n	80059ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800599c:	4b1e      	ldr	r3, [pc, #120]	@ (8005a18 <HAL_RCC_OscConfig+0x508>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005a18 <HAL_RCC_OscConfig+0x508>)
 80059a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059a8:	f7fd f856 	bl	8002a58 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059b0:	f7fd f852 	bl	8002a58 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e1b2      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059c2:	4b15      	ldr	r3, [pc, #84]	@ (8005a18 <HAL_RCC_OscConfig+0x508>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0f0      	beq.n	80059b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d108      	bne.n	80059e8 <HAL_RCC_OscConfig+0x4d8>
 80059d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 80059d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 80059de:	f043 0301 	orr.w	r3, r3, #1
 80059e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059e6:	e029      	b.n	8005a3c <HAL_RCC_OscConfig+0x52c>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2b05      	cmp	r3, #5
 80059ee:	d115      	bne.n	8005a1c <HAL_RCC_OscConfig+0x50c>
 80059f0:	4b08      	ldr	r3, [pc, #32]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 80059f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f6:	4a07      	ldr	r2, [pc, #28]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 80059f8:	f043 0304 	orr.w	r3, r3, #4
 80059fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a00:	4b04      	ldr	r3, [pc, #16]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 8005a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a06:	4a03      	ldr	r2, [pc, #12]	@ (8005a14 <HAL_RCC_OscConfig+0x504>)
 8005a08:	f043 0301 	orr.w	r3, r3, #1
 8005a0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a10:	e014      	b.n	8005a3c <HAL_RCC_OscConfig+0x52c>
 8005a12:	bf00      	nop
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40007000 	.word	0x40007000
 8005a1c:	4b9a      	ldr	r3, [pc, #616]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a22:	4a99      	ldr	r2, [pc, #612]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005a24:	f023 0301 	bic.w	r3, r3, #1
 8005a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a2c:	4b96      	ldr	r3, [pc, #600]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a32:	4a95      	ldr	r2, [pc, #596]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005a34:	f023 0304 	bic.w	r3, r3, #4
 8005a38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d016      	beq.n	8005a72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a44:	f7fd f808 	bl	8002a58 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a4a:	e00a      	b.n	8005a62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a4c:	f7fd f804 	bl	8002a58 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e162      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a62:	4b89      	ldr	r3, [pc, #548]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0ed      	beq.n	8005a4c <HAL_RCC_OscConfig+0x53c>
 8005a70:	e015      	b.n	8005a9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a72:	f7fc fff1 	bl	8002a58 <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a78:	e00a      	b.n	8005a90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a7a:	f7fc ffed 	bl	8002a58 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e14b      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a90:	4b7d      	ldr	r3, [pc, #500]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1ed      	bne.n	8005a7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a9e:	7ffb      	ldrb	r3, [r7, #31]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d105      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aa4:	4b78      	ldr	r3, [pc, #480]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa8:	4a77      	ldr	r2, [pc, #476]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d03c      	beq.n	8005b36 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01c      	beq.n	8005afe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ac4:	4b70      	ldr	r3, [pc, #448]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005aca:	4a6f      	ldr	r2, [pc, #444]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005acc:	f043 0301 	orr.w	r3, r3, #1
 8005ad0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad4:	f7fc ffc0 	bl	8002a58 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005adc:	f7fc ffbc 	bl	8002a58 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e11c      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aee:	4b66      	ldr	r3, [pc, #408]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0ef      	beq.n	8005adc <HAL_RCC_OscConfig+0x5cc>
 8005afc:	e01b      	b.n	8005b36 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005afe:	4b62      	ldr	r3, [pc, #392]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b04:	4a60      	ldr	r2, [pc, #384]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005b06:	f023 0301 	bic.w	r3, r3, #1
 8005b0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0e:	f7fc ffa3 	bl	8002a58 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b14:	e008      	b.n	8005b28 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b16:	f7fc ff9f 	bl	8002a58 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e0ff      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b28:	4b57      	ldr	r3, [pc, #348]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1ef      	bne.n	8005b16 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 80f3 	beq.w	8005d26 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	f040 80c9 	bne.w	8005cdc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b4a:	4b4f      	ldr	r3, [pc, #316]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f003 0203 	and.w	r2, r3, #3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d12c      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d123      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d11b      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d113      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d109      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bae:	085b      	lsrs	r3, r3, #1
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d06b      	beq.n	8005c90 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	2b0c      	cmp	r3, #12
 8005bbc:	d062      	beq.n	8005c84 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005bbe:	4b32      	ldr	r3, [pc, #200]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e0ac      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005bce:	4b2e      	ldr	r3, [pc, #184]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a2d      	ldr	r2, [pc, #180]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005bd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bd8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bda:	f7fc ff3d 	bl	8002a58 <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be2:	f7fc ff39 	bl	8002a58 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e099      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf4:	4b24      	ldr	r3, [pc, #144]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1f0      	bne.n	8005be2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c00:	4b21      	ldr	r3, [pc, #132]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	4b21      	ldr	r3, [pc, #132]	@ (8005c8c <HAL_RCC_OscConfig+0x77c>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c10:	3a01      	subs	r2, #1
 8005c12:	0112      	lsls	r2, r2, #4
 8005c14:	4311      	orrs	r1, r2
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c1a:	0212      	lsls	r2, r2, #8
 8005c1c:	4311      	orrs	r1, r2
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c22:	0852      	lsrs	r2, r2, #1
 8005c24:	3a01      	subs	r2, #1
 8005c26:	0552      	lsls	r2, r2, #21
 8005c28:	4311      	orrs	r1, r2
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c2e:	0852      	lsrs	r2, r2, #1
 8005c30:	3a01      	subs	r2, #1
 8005c32:	0652      	lsls	r2, r2, #25
 8005c34:	4311      	orrs	r1, r2
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c3a:	06d2      	lsls	r2, r2, #27
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	4912      	ldr	r1, [pc, #72]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c44:	4b10      	ldr	r3, [pc, #64]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a0f      	ldr	r2, [pc, #60]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005c4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c50:	4b0d      	ldr	r3, [pc, #52]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	4a0c      	ldr	r2, [pc, #48]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005c56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c5c:	f7fc fefc 	bl	8002a58 <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c64:	f7fc fef8 	bl	8002a58 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e058      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c76:	4b04      	ldr	r3, [pc, #16]	@ (8005c88 <HAL_RCC_OscConfig+0x778>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0f0      	beq.n	8005c64 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c82:	e050      	b.n	8005d26 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e04f      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c90:	4b27      	ldr	r3, [pc, #156]	@ (8005d30 <HAL_RCC_OscConfig+0x820>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d144      	bne.n	8005d26 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c9c:	4b24      	ldr	r3, [pc, #144]	@ (8005d30 <HAL_RCC_OscConfig+0x820>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a23      	ldr	r2, [pc, #140]	@ (8005d30 <HAL_RCC_OscConfig+0x820>)
 8005ca2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ca6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ca8:	4b21      	ldr	r3, [pc, #132]	@ (8005d30 <HAL_RCC_OscConfig+0x820>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4a20      	ldr	r2, [pc, #128]	@ (8005d30 <HAL_RCC_OscConfig+0x820>)
 8005cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cb4:	f7fc fed0 	bl	8002a58 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cbc:	f7fc fecc 	bl	8002a58 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e02c      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cce:	4b18      	ldr	r3, [pc, #96]	@ (8005d30 <HAL_RCC_OscConfig+0x820>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0f0      	beq.n	8005cbc <HAL_RCC_OscConfig+0x7ac>
 8005cda:	e024      	b.n	8005d26 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	2b0c      	cmp	r3, #12
 8005ce0:	d01f      	beq.n	8005d22 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce2:	4b13      	ldr	r3, [pc, #76]	@ (8005d30 <HAL_RCC_OscConfig+0x820>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a12      	ldr	r2, [pc, #72]	@ (8005d30 <HAL_RCC_OscConfig+0x820>)
 8005ce8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cee:	f7fc feb3 	bl	8002a58 <HAL_GetTick>
 8005cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cf4:	e008      	b.n	8005d08 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf6:	f7fc feaf 	bl	8002a58 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e00f      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d08:	4b09      	ldr	r3, [pc, #36]	@ (8005d30 <HAL_RCC_OscConfig+0x820>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1f0      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005d14:	4b06      	ldr	r3, [pc, #24]	@ (8005d30 <HAL_RCC_OscConfig+0x820>)
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	4905      	ldr	r1, [pc, #20]	@ (8005d30 <HAL_RCC_OscConfig+0x820>)
 8005d1a:	4b06      	ldr	r3, [pc, #24]	@ (8005d34 <HAL_RCC_OscConfig+0x824>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	60cb      	str	r3, [r1, #12]
 8005d20:	e001      	b.n	8005d26 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3720      	adds	r7, #32
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40021000 	.word	0x40021000
 8005d34:	feeefffc 	.word	0xfeeefffc

08005d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e0e7      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d4c:	4b75      	ldr	r3, [pc, #468]	@ (8005f24 <HAL_RCC_ClockConfig+0x1ec>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d910      	bls.n	8005d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5a:	4b72      	ldr	r3, [pc, #456]	@ (8005f24 <HAL_RCC_ClockConfig+0x1ec>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f023 0207 	bic.w	r2, r3, #7
 8005d62:	4970      	ldr	r1, [pc, #448]	@ (8005f24 <HAL_RCC_ClockConfig+0x1ec>)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d6a:	4b6e      	ldr	r3, [pc, #440]	@ (8005f24 <HAL_RCC_ClockConfig+0x1ec>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d001      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0cf      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d010      	beq.n	8005daa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	4b66      	ldr	r3, [pc, #408]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d908      	bls.n	8005daa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d98:	4b63      	ldr	r3, [pc, #396]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	4960      	ldr	r1, [pc, #384]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d04c      	beq.n	8005e50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d107      	bne.n	8005dce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dbe:	4b5a      	ldr	r3, [pc, #360]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d121      	bne.n	8005e0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e0a6      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d107      	bne.n	8005de6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dd6:	4b54      	ldr	r3, [pc, #336]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d115      	bne.n	8005e0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e09a      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d107      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005dee:	4b4e      	ldr	r3, [pc, #312]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e08e      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e086      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e0e:	4b46      	ldr	r3, [pc, #280]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f023 0203 	bic.w	r2, r3, #3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	4943      	ldr	r1, [pc, #268]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e20:	f7fc fe1a 	bl	8002a58 <HAL_GetTick>
 8005e24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e26:	e00a      	b.n	8005e3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e28:	f7fc fe16 	bl	8002a58 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e06e      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e3e:	4b3a      	ldr	r3, [pc, #232]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 020c 	and.w	r2, r3, #12
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d1eb      	bne.n	8005e28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d010      	beq.n	8005e7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	4b31      	ldr	r3, [pc, #196]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d208      	bcs.n	8005e7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	492b      	ldr	r1, [pc, #172]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e7e:	4b29      	ldr	r3, [pc, #164]	@ (8005f24 <HAL_RCC_ClockConfig+0x1ec>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d210      	bcs.n	8005eae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e8c:	4b25      	ldr	r3, [pc, #148]	@ (8005f24 <HAL_RCC_ClockConfig+0x1ec>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f023 0207 	bic.w	r2, r3, #7
 8005e94:	4923      	ldr	r1, [pc, #140]	@ (8005f24 <HAL_RCC_ClockConfig+0x1ec>)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9c:	4b21      	ldr	r3, [pc, #132]	@ (8005f24 <HAL_RCC_ClockConfig+0x1ec>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d001      	beq.n	8005eae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e036      	b.n	8005f1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d008      	beq.n	8005ecc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eba:	4b1b      	ldr	r3, [pc, #108]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	4918      	ldr	r1, [pc, #96]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d009      	beq.n	8005eec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ed8:	4b13      	ldr	r3, [pc, #76]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	4910      	ldr	r1, [pc, #64]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005eec:	f000 f824 	bl	8005f38 <HAL_RCC_GetSysClockFreq>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <HAL_RCC_ClockConfig+0x1f0>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	091b      	lsrs	r3, r3, #4
 8005ef8:	f003 030f 	and.w	r3, r3, #15
 8005efc:	490b      	ldr	r1, [pc, #44]	@ (8005f2c <HAL_RCC_ClockConfig+0x1f4>)
 8005efe:	5ccb      	ldrb	r3, [r1, r3]
 8005f00:	f003 031f 	and.w	r3, r3, #31
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
 8005f08:	4a09      	ldr	r2, [pc, #36]	@ (8005f30 <HAL_RCC_ClockConfig+0x1f8>)
 8005f0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f0c:	4b09      	ldr	r3, [pc, #36]	@ (8005f34 <HAL_RCC_ClockConfig+0x1fc>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fc fd51 	bl	80029b8 <HAL_InitTick>
 8005f16:	4603      	mov	r3, r0
 8005f18:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f1a:	7afb      	ldrb	r3, [r7, #11]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40022000 	.word	0x40022000
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	0800e408 	.word	0x0800e408
 8005f30:	20000000 	.word	0x20000000
 8005f34:	20000004 	.word	0x20000004

08005f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b089      	sub	sp, #36	@ 0x24
 8005f3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	2300      	movs	r3, #0
 8005f44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f46:	4b3e      	ldr	r3, [pc, #248]	@ (8006040 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 030c 	and.w	r3, r3, #12
 8005f4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f50:	4b3b      	ldr	r3, [pc, #236]	@ (8006040 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f003 0303 	and.w	r3, r3, #3
 8005f58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <HAL_RCC_GetSysClockFreq+0x34>
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	2b0c      	cmp	r3, #12
 8005f64:	d121      	bne.n	8005faa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d11e      	bne.n	8005faa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f6c:	4b34      	ldr	r3, [pc, #208]	@ (8006040 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d107      	bne.n	8005f88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f78:	4b31      	ldr	r3, [pc, #196]	@ (8006040 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f7e:	0a1b      	lsrs	r3, r3, #8
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	61fb      	str	r3, [r7, #28]
 8005f86:	e005      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f88:	4b2d      	ldr	r3, [pc, #180]	@ (8006040 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	091b      	lsrs	r3, r3, #4
 8005f8e:	f003 030f 	and.w	r3, r3, #15
 8005f92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f94:	4a2b      	ldr	r2, [pc, #172]	@ (8006044 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10d      	bne.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fa8:	e00a      	b.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d102      	bne.n	8005fb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005fb0:	4b25      	ldr	r3, [pc, #148]	@ (8006048 <HAL_RCC_GetSysClockFreq+0x110>)
 8005fb2:	61bb      	str	r3, [r7, #24]
 8005fb4:	e004      	b.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d101      	bne.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fbc:	4b23      	ldr	r3, [pc, #140]	@ (800604c <HAL_RCC_GetSysClockFreq+0x114>)
 8005fbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b0c      	cmp	r3, #12
 8005fc4:	d134      	bne.n	8006030 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8006040 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d003      	beq.n	8005fde <HAL_RCC_GetSysClockFreq+0xa6>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d003      	beq.n	8005fe4 <HAL_RCC_GetSysClockFreq+0xac>
 8005fdc:	e005      	b.n	8005fea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005fde:	4b1a      	ldr	r3, [pc, #104]	@ (8006048 <HAL_RCC_GetSysClockFreq+0x110>)
 8005fe0:	617b      	str	r3, [r7, #20]
      break;
 8005fe2:	e005      	b.n	8005ff0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005fe4:	4b19      	ldr	r3, [pc, #100]	@ (800604c <HAL_RCC_GetSysClockFreq+0x114>)
 8005fe6:	617b      	str	r3, [r7, #20]
      break;
 8005fe8:	e002      	b.n	8005ff0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	617b      	str	r3, [r7, #20]
      break;
 8005fee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ff0:	4b13      	ldr	r3, [pc, #76]	@ (8006040 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	091b      	lsrs	r3, r3, #4
 8005ff6:	f003 0307 	and.w	r3, r3, #7
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ffe:	4b10      	ldr	r3, [pc, #64]	@ (8006040 <HAL_RCC_GetSysClockFreq+0x108>)
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	0a1b      	lsrs	r3, r3, #8
 8006004:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	fb03 f202 	mul.w	r2, r3, r2
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	fbb2 f3f3 	udiv	r3, r2, r3
 8006014:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006016:	4b0a      	ldr	r3, [pc, #40]	@ (8006040 <HAL_RCC_GetSysClockFreq+0x108>)
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	0e5b      	lsrs	r3, r3, #25
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	3301      	adds	r3, #1
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	fbb2 f3f3 	udiv	r3, r2, r3
 800602e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006030:	69bb      	ldr	r3, [r7, #24]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3724      	adds	r7, #36	@ 0x24
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40021000 	.word	0x40021000
 8006044:	0800e420 	.word	0x0800e420
 8006048:	00f42400 	.word	0x00f42400
 800604c:	007a1200 	.word	0x007a1200

08006050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006050:	b480      	push	{r7}
 8006052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006054:	4b03      	ldr	r3, [pc, #12]	@ (8006064 <HAL_RCC_GetHCLKFreq+0x14>)
 8006056:	681b      	ldr	r3, [r3, #0]
}
 8006058:	4618      	mov	r0, r3
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20000000 	.word	0x20000000

08006068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800606c:	f7ff fff0 	bl	8006050 <HAL_RCC_GetHCLKFreq>
 8006070:	4602      	mov	r2, r0
 8006072:	4b06      	ldr	r3, [pc, #24]	@ (800608c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	0a1b      	lsrs	r3, r3, #8
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	4904      	ldr	r1, [pc, #16]	@ (8006090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800607e:	5ccb      	ldrb	r3, [r1, r3]
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006088:	4618      	mov	r0, r3
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40021000 	.word	0x40021000
 8006090:	0800e418 	.word	0x0800e418

08006094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006098:	f7ff ffda 	bl	8006050 <HAL_RCC_GetHCLKFreq>
 800609c:	4602      	mov	r2, r0
 800609e:	4b06      	ldr	r3, [pc, #24]	@ (80060b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	0adb      	lsrs	r3, r3, #11
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	4904      	ldr	r1, [pc, #16]	@ (80060bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80060aa:	5ccb      	ldrb	r3, [r1, r3]
 80060ac:	f003 031f 	and.w	r3, r3, #31
 80060b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40021000 	.word	0x40021000
 80060bc:	0800e418 	.word	0x0800e418

080060c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80060c8:	2300      	movs	r3, #0
 80060ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80060cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060d8:	f7ff f9b6 	bl	8005448 <HAL_PWREx_GetVoltageRange>
 80060dc:	6178      	str	r0, [r7, #20]
 80060de:	e014      	b.n	800610a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060e0:	4b25      	ldr	r3, [pc, #148]	@ (8006178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e4:	4a24      	ldr	r2, [pc, #144]	@ (8006178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80060ec:	4b22      	ldr	r3, [pc, #136]	@ (8006178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060f8:	f7ff f9a6 	bl	8005448 <HAL_PWREx_GetVoltageRange>
 80060fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006102:	4a1d      	ldr	r2, [pc, #116]	@ (8006178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006104:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006108:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006110:	d10b      	bne.n	800612a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b80      	cmp	r3, #128	@ 0x80
 8006116:	d919      	bls.n	800614c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2ba0      	cmp	r3, #160	@ 0xa0
 800611c:	d902      	bls.n	8006124 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800611e:	2302      	movs	r3, #2
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	e013      	b.n	800614c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006124:	2301      	movs	r3, #1
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	e010      	b.n	800614c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b80      	cmp	r3, #128	@ 0x80
 800612e:	d902      	bls.n	8006136 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006130:	2303      	movs	r3, #3
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	e00a      	b.n	800614c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b80      	cmp	r3, #128	@ 0x80
 800613a:	d102      	bne.n	8006142 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800613c:	2302      	movs	r3, #2
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	e004      	b.n	800614c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b70      	cmp	r3, #112	@ 0x70
 8006146:	d101      	bne.n	800614c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006148:	2301      	movs	r3, #1
 800614a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800614c:	4b0b      	ldr	r3, [pc, #44]	@ (800617c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f023 0207 	bic.w	r2, r3, #7
 8006154:	4909      	ldr	r1, [pc, #36]	@ (800617c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800615c:	4b07      	ldr	r3, [pc, #28]	@ (800617c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	429a      	cmp	r2, r3
 8006168:	d001      	beq.n	800616e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40021000 	.word	0x40021000
 800617c:	40022000 	.word	0x40022000

08006180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006188:	2300      	movs	r3, #0
 800618a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800618c:	2300      	movs	r3, #0
 800618e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006198:	2b00      	cmp	r3, #0
 800619a:	d031      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061a4:	d01a      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80061a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061aa:	d814      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d009      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061b4:	d10f      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80061b6:	4b5d      	ldr	r3, [pc, #372]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	4a5c      	ldr	r2, [pc, #368]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061c2:	e00c      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3304      	adds	r3, #4
 80061c8:	2100      	movs	r1, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 f9de 	bl	800658c <RCCEx_PLLSAI1_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061d4:	e003      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	74fb      	strb	r3, [r7, #19]
      break;
 80061da:	e000      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80061dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061de:	7cfb      	ldrb	r3, [r7, #19]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10b      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061e4:	4b51      	ldr	r3, [pc, #324]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f2:	494e      	ldr	r1, [pc, #312]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80061fa:	e001      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fc:	7cfb      	ldrb	r3, [r7, #19]
 80061fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 809e 	beq.w	800634a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800620e:	2300      	movs	r3, #0
 8006210:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006212:	4b46      	ldr	r3, [pc, #280]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006222:	2300      	movs	r3, #0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00d      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006228:	4b40      	ldr	r3, [pc, #256]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800622a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622c:	4a3f      	ldr	r2, [pc, #252]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800622e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006232:	6593      	str	r3, [r2, #88]	@ 0x58
 8006234:	4b3d      	ldr	r3, [pc, #244]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800623c:	60bb      	str	r3, [r7, #8]
 800623e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006240:	2301      	movs	r3, #1
 8006242:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006244:	4b3a      	ldr	r3, [pc, #232]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a39      	ldr	r2, [pc, #228]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800624a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800624e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006250:	f7fc fc02 	bl	8002a58 <HAL_GetTick>
 8006254:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006256:	e009      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006258:	f7fc fbfe 	bl	8002a58 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d902      	bls.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	74fb      	strb	r3, [r7, #19]
        break;
 800626a:	e005      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800626c:	4b30      	ldr	r3, [pc, #192]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0ef      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006278:	7cfb      	ldrb	r3, [r7, #19]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d15a      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800627e:	4b2b      	ldr	r3, [pc, #172]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006284:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006288:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01e      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	429a      	cmp	r2, r3
 8006298:	d019      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800629a:	4b24      	ldr	r3, [pc, #144]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800629c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062a6:	4b21      	ldr	r3, [pc, #132]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ac:	4a1f      	ldr	r2, [pc, #124]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062b6:	4b1d      	ldr	r3, [pc, #116]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062bc:	4a1b      	ldr	r2, [pc, #108]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062c6:	4a19      	ldr	r2, [pc, #100]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d016      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d8:	f7fc fbbe 	bl	8002a58 <HAL_GetTick>
 80062dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062de:	e00b      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e0:	f7fc fbba 	bl	8002a58 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d902      	bls.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	74fb      	strb	r3, [r7, #19]
            break;
 80062f6:	e006      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f8:	4b0c      	ldr	r3, [pc, #48]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0ec      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006306:	7cfb      	ldrb	r3, [r7, #19]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10b      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800630c:	4b07      	ldr	r3, [pc, #28]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800630e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006312:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800631a:	4904      	ldr	r1, [pc, #16]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800631c:	4313      	orrs	r3, r2
 800631e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006322:	e009      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006324:	7cfb      	ldrb	r3, [r7, #19]
 8006326:	74bb      	strb	r3, [r7, #18]
 8006328:	e006      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800632a:	bf00      	nop
 800632c:	40021000 	.word	0x40021000
 8006330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006334:	7cfb      	ldrb	r3, [r7, #19]
 8006336:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006338:	7c7b      	ldrb	r3, [r7, #17]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d105      	bne.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800633e:	4b8a      	ldr	r3, [pc, #552]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006342:	4a89      	ldr	r2, [pc, #548]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006344:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006348:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006356:	4b84      	ldr	r3, [pc, #528]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800635c:	f023 0203 	bic.w	r2, r3, #3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	4980      	ldr	r1, [pc, #512]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00a      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006378:	4b7b      	ldr	r3, [pc, #492]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637e:	f023 020c 	bic.w	r2, r3, #12
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006386:	4978      	ldr	r1, [pc, #480]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800639a:	4b73      	ldr	r3, [pc, #460]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a8:	496f      	ldr	r1, [pc, #444]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ca:	4967      	ldr	r1, [pc, #412]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063de:	4b62      	ldr	r3, [pc, #392]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	495e      	ldr	r1, [pc, #376]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006400:	4b59      	ldr	r3, [pc, #356]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006406:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640e:	4956      	ldr	r1, [pc, #344]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006422:	4b51      	ldr	r3, [pc, #324]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006428:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006430:	494d      	ldr	r1, [pc, #308]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d028      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006444:	4b48      	ldr	r3, [pc, #288]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800644a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006452:	4945      	ldr	r1, [pc, #276]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006462:	d106      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006464:	4b40      	ldr	r3, [pc, #256]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	4a3f      	ldr	r2, [pc, #252]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800646a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800646e:	60d3      	str	r3, [r2, #12]
 8006470:	e011      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006476:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800647a:	d10c      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3304      	adds	r3, #4
 8006480:	2101      	movs	r1, #1
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f882 	bl	800658c <RCCEx_PLLSAI1_Config>
 8006488:	4603      	mov	r3, r0
 800648a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800648c:	7cfb      	ldrb	r3, [r7, #19]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006492:	7cfb      	ldrb	r3, [r7, #19]
 8006494:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d028      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064a2:	4b31      	ldr	r3, [pc, #196]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b0:	492d      	ldr	r1, [pc, #180]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064c0:	d106      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064c2:	4b29      	ldr	r3, [pc, #164]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	4a28      	ldr	r2, [pc, #160]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064cc:	60d3      	str	r3, [r2, #12]
 80064ce:	e011      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064d8:	d10c      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3304      	adds	r3, #4
 80064de:	2101      	movs	r1, #1
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 f853 	bl	800658c <RCCEx_PLLSAI1_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064ea:	7cfb      	ldrb	r3, [r7, #19]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80064f0:	7cfb      	ldrb	r3, [r7, #19]
 80064f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01c      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006500:	4b19      	ldr	r3, [pc, #100]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006506:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800650e:	4916      	ldr	r1, [pc, #88]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006510:	4313      	orrs	r3, r2
 8006512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800651a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800651e:	d10c      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3304      	adds	r3, #4
 8006524:	2102      	movs	r1, #2
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f830 	bl	800658c <RCCEx_PLLSAI1_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006530:	7cfb      	ldrb	r3, [r7, #19]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006536:	7cfb      	ldrb	r3, [r7, #19]
 8006538:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006546:	4b08      	ldr	r3, [pc, #32]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006554:	4904      	ldr	r1, [pc, #16]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800655c:	7cbb      	ldrb	r3, [r7, #18]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	40021000 	.word	0x40021000

0800656c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006570:	4b05      	ldr	r3, [pc, #20]	@ (8006588 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a04      	ldr	r2, [pc, #16]	@ (8006588 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006576:	f043 0304 	orr.w	r3, r3, #4
 800657a:	6013      	str	r3, [r2, #0]
}
 800657c:	bf00      	nop
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40021000 	.word	0x40021000

0800658c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800659a:	4b74      	ldr	r3, [pc, #464]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d018      	beq.n	80065d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80065a6:	4b71      	ldr	r3, [pc, #452]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f003 0203 	and.w	r2, r3, #3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d10d      	bne.n	80065d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
       ||
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80065be:	4b6b      	ldr	r3, [pc, #428]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	091b      	lsrs	r3, r3, #4
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
       ||
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d047      	beq.n	8006662 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	73fb      	strb	r3, [r7, #15]
 80065d6:	e044      	b.n	8006662 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d018      	beq.n	8006612 <RCCEx_PLLSAI1_Config+0x86>
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d825      	bhi.n	8006630 <RCCEx_PLLSAI1_Config+0xa4>
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d002      	beq.n	80065ee <RCCEx_PLLSAI1_Config+0x62>
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d009      	beq.n	8006600 <RCCEx_PLLSAI1_Config+0x74>
 80065ec:	e020      	b.n	8006630 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065ee:	4b5f      	ldr	r3, [pc, #380]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d11d      	bne.n	8006636 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065fe:	e01a      	b.n	8006636 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006600:	4b5a      	ldr	r3, [pc, #360]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006608:	2b00      	cmp	r3, #0
 800660a:	d116      	bne.n	800663a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006610:	e013      	b.n	800663a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006612:	4b56      	ldr	r3, [pc, #344]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10f      	bne.n	800663e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800661e:	4b53      	ldr	r3, [pc, #332]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800662e:	e006      	b.n	800663e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	73fb      	strb	r3, [r7, #15]
      break;
 8006634:	e004      	b.n	8006640 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006636:	bf00      	nop
 8006638:	e002      	b.n	8006640 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800663a:	bf00      	nop
 800663c:	e000      	b.n	8006640 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800663e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10d      	bne.n	8006662 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006646:	4b49      	ldr	r3, [pc, #292]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6819      	ldr	r1, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	3b01      	subs	r3, #1
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	430b      	orrs	r3, r1
 800665c:	4943      	ldr	r1, [pc, #268]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 800665e:	4313      	orrs	r3, r2
 8006660:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d17c      	bne.n	8006762 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006668:	4b40      	ldr	r3, [pc, #256]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a3f      	ldr	r2, [pc, #252]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 800666e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006674:	f7fc f9f0 	bl	8002a58 <HAL_GetTick>
 8006678:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800667a:	e009      	b.n	8006690 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800667c:	f7fc f9ec 	bl	8002a58 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d902      	bls.n	8006690 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	73fb      	strb	r3, [r7, #15]
        break;
 800668e:	e005      	b.n	800669c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006690:	4b36      	ldr	r3, [pc, #216]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1ef      	bne.n	800667c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d15f      	bne.n	8006762 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d110      	bne.n	80066ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066a8:	4b30      	ldr	r3, [pc, #192]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80066b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6892      	ldr	r2, [r2, #8]
 80066b8:	0211      	lsls	r1, r2, #8
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	68d2      	ldr	r2, [r2, #12]
 80066be:	06d2      	lsls	r2, r2, #27
 80066c0:	430a      	orrs	r2, r1
 80066c2:	492a      	ldr	r1, [pc, #168]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	610b      	str	r3, [r1, #16]
 80066c8:	e027      	b.n	800671a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d112      	bne.n	80066f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066d0:	4b26      	ldr	r3, [pc, #152]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80066d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6892      	ldr	r2, [r2, #8]
 80066e0:	0211      	lsls	r1, r2, #8
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6912      	ldr	r2, [r2, #16]
 80066e6:	0852      	lsrs	r2, r2, #1
 80066e8:	3a01      	subs	r2, #1
 80066ea:	0552      	lsls	r2, r2, #21
 80066ec:	430a      	orrs	r2, r1
 80066ee:	491f      	ldr	r1, [pc, #124]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	610b      	str	r3, [r1, #16]
 80066f4:	e011      	b.n	800671a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066f6:	4b1d      	ldr	r3, [pc, #116]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80066fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6892      	ldr	r2, [r2, #8]
 8006706:	0211      	lsls	r1, r2, #8
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6952      	ldr	r2, [r2, #20]
 800670c:	0852      	lsrs	r2, r2, #1
 800670e:	3a01      	subs	r2, #1
 8006710:	0652      	lsls	r2, r2, #25
 8006712:	430a      	orrs	r2, r1
 8006714:	4915      	ldr	r1, [pc, #84]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006716:	4313      	orrs	r3, r2
 8006718:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800671a:	4b14      	ldr	r3, [pc, #80]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a13      	ldr	r2, [pc, #76]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006720:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006724:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006726:	f7fc f997 	bl	8002a58 <HAL_GetTick>
 800672a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800672c:	e009      	b.n	8006742 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800672e:	f7fc f993 	bl	8002a58 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d902      	bls.n	8006742 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	73fb      	strb	r3, [r7, #15]
          break;
 8006740:	e005      	b.n	800674e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006742:	4b0a      	ldr	r3, [pc, #40]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0ef      	beq.n	800672e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d106      	bne.n	8006762 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006754:	4b05      	ldr	r3, [pc, #20]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006756:	691a      	ldr	r2, [r3, #16]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	4903      	ldr	r1, [pc, #12]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 800675e:	4313      	orrs	r3, r2
 8006760:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006762:	7bfb      	ldrb	r3, [r7, #15]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40021000 	.word	0x40021000

08006770 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e049      	b.n	8006816 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d106      	bne.n	800679c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7fb fe78 	bl	800248c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2202      	movs	r2, #2
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3304      	adds	r3, #4
 80067ac:	4619      	mov	r1, r3
 80067ae:	4610      	mov	r0, r2
 80067b0:	f000 fa28 	bl	8006c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
	...

08006820 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d109      	bne.n	8006844 <HAL_TIM_PWM_Start+0x24>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b01      	cmp	r3, #1
 800683a:	bf14      	ite	ne
 800683c:	2301      	movne	r3, #1
 800683e:	2300      	moveq	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	e03c      	b.n	80068be <HAL_TIM_PWM_Start+0x9e>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b04      	cmp	r3, #4
 8006848:	d109      	bne.n	800685e <HAL_TIM_PWM_Start+0x3e>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b01      	cmp	r3, #1
 8006854:	bf14      	ite	ne
 8006856:	2301      	movne	r3, #1
 8006858:	2300      	moveq	r3, #0
 800685a:	b2db      	uxtb	r3, r3
 800685c:	e02f      	b.n	80068be <HAL_TIM_PWM_Start+0x9e>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b08      	cmp	r3, #8
 8006862:	d109      	bne.n	8006878 <HAL_TIM_PWM_Start+0x58>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b01      	cmp	r3, #1
 800686e:	bf14      	ite	ne
 8006870:	2301      	movne	r3, #1
 8006872:	2300      	moveq	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	e022      	b.n	80068be <HAL_TIM_PWM_Start+0x9e>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b0c      	cmp	r3, #12
 800687c:	d109      	bne.n	8006892 <HAL_TIM_PWM_Start+0x72>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b01      	cmp	r3, #1
 8006888:	bf14      	ite	ne
 800688a:	2301      	movne	r3, #1
 800688c:	2300      	moveq	r3, #0
 800688e:	b2db      	uxtb	r3, r3
 8006890:	e015      	b.n	80068be <HAL_TIM_PWM_Start+0x9e>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b10      	cmp	r3, #16
 8006896:	d109      	bne.n	80068ac <HAL_TIM_PWM_Start+0x8c>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	bf14      	ite	ne
 80068a4:	2301      	movne	r3, #1
 80068a6:	2300      	moveq	r3, #0
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	e008      	b.n	80068be <HAL_TIM_PWM_Start+0x9e>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	bf14      	ite	ne
 80068b8:	2301      	movne	r3, #1
 80068ba:	2300      	moveq	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e07e      	b.n	80069c4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d104      	bne.n	80068d6 <HAL_TIM_PWM_Start+0xb6>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068d4:	e023      	b.n	800691e <HAL_TIM_PWM_Start+0xfe>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d104      	bne.n	80068e6 <HAL_TIM_PWM_Start+0xc6>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068e4:	e01b      	b.n	800691e <HAL_TIM_PWM_Start+0xfe>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d104      	bne.n	80068f6 <HAL_TIM_PWM_Start+0xd6>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068f4:	e013      	b.n	800691e <HAL_TIM_PWM_Start+0xfe>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b0c      	cmp	r3, #12
 80068fa:	d104      	bne.n	8006906 <HAL_TIM_PWM_Start+0xe6>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006904:	e00b      	b.n	800691e <HAL_TIM_PWM_Start+0xfe>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b10      	cmp	r3, #16
 800690a:	d104      	bne.n	8006916 <HAL_TIM_PWM_Start+0xf6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006914:	e003      	b.n	800691e <HAL_TIM_PWM_Start+0xfe>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2201      	movs	r2, #1
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fc5a 	bl	80071e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a26      	ldr	r2, [pc, #152]	@ (80069cc <HAL_TIM_PWM_Start+0x1ac>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d009      	beq.n	800694a <HAL_TIM_PWM_Start+0x12a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a25      	ldr	r2, [pc, #148]	@ (80069d0 <HAL_TIM_PWM_Start+0x1b0>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d004      	beq.n	800694a <HAL_TIM_PWM_Start+0x12a>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a23      	ldr	r2, [pc, #140]	@ (80069d4 <HAL_TIM_PWM_Start+0x1b4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d101      	bne.n	800694e <HAL_TIM_PWM_Start+0x12e>
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <HAL_TIM_PWM_Start+0x130>
 800694e:	2300      	movs	r3, #0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d007      	beq.n	8006964 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006962:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a18      	ldr	r2, [pc, #96]	@ (80069cc <HAL_TIM_PWM_Start+0x1ac>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d009      	beq.n	8006982 <HAL_TIM_PWM_Start+0x162>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006976:	d004      	beq.n	8006982 <HAL_TIM_PWM_Start+0x162>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a14      	ldr	r2, [pc, #80]	@ (80069d0 <HAL_TIM_PWM_Start+0x1b0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d115      	bne.n	80069ae <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	4b13      	ldr	r3, [pc, #76]	@ (80069d8 <HAL_TIM_PWM_Start+0x1b8>)
 800698a:	4013      	ands	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b06      	cmp	r3, #6
 8006992:	d015      	beq.n	80069c0 <HAL_TIM_PWM_Start+0x1a0>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800699a:	d011      	beq.n	80069c0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ac:	e008      	b.n	80069c0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f042 0201 	orr.w	r2, r2, #1
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	e000      	b.n	80069c2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	40012c00 	.word	0x40012c00
 80069d0:	40014000 	.word	0x40014000
 80069d4:	40014400 	.word	0x40014400
 80069d8:	00010007 	.word	0x00010007

080069dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d101      	bne.n	80069fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069f6:	2302      	movs	r3, #2
 80069f8:	e0ff      	b.n	8006bfa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b14      	cmp	r3, #20
 8006a06:	f200 80f0 	bhi.w	8006bea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a10:	08006a65 	.word	0x08006a65
 8006a14:	08006beb 	.word	0x08006beb
 8006a18:	08006beb 	.word	0x08006beb
 8006a1c:	08006beb 	.word	0x08006beb
 8006a20:	08006aa5 	.word	0x08006aa5
 8006a24:	08006beb 	.word	0x08006beb
 8006a28:	08006beb 	.word	0x08006beb
 8006a2c:	08006beb 	.word	0x08006beb
 8006a30:	08006ae7 	.word	0x08006ae7
 8006a34:	08006beb 	.word	0x08006beb
 8006a38:	08006beb 	.word	0x08006beb
 8006a3c:	08006beb 	.word	0x08006beb
 8006a40:	08006b27 	.word	0x08006b27
 8006a44:	08006beb 	.word	0x08006beb
 8006a48:	08006beb 	.word	0x08006beb
 8006a4c:	08006beb 	.word	0x08006beb
 8006a50:	08006b69 	.word	0x08006b69
 8006a54:	08006beb 	.word	0x08006beb
 8006a58:	08006beb 	.word	0x08006beb
 8006a5c:	08006beb 	.word	0x08006beb
 8006a60:	08006ba9 	.word	0x08006ba9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68b9      	ldr	r1, [r7, #8]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 f93a 	bl	8006ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699a      	ldr	r2, [r3, #24]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0208 	orr.w	r2, r2, #8
 8006a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0204 	bic.w	r2, r2, #4
 8006a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6999      	ldr	r1, [r3, #24]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	691a      	ldr	r2, [r3, #16]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	619a      	str	r2, [r3, #24]
      break;
 8006aa2:	e0a5      	b.n	8006bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68b9      	ldr	r1, [r7, #8]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 f996 	bl	8006ddc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699a      	ldr	r2, [r3, #24]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699a      	ldr	r2, [r3, #24]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6999      	ldr	r1, [r3, #24]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	021a      	lsls	r2, r3, #8
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	619a      	str	r2, [r3, #24]
      break;
 8006ae4:	e084      	b.n	8006bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68b9      	ldr	r1, [r7, #8]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 f9ef 	bl	8006ed0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69da      	ldr	r2, [r3, #28]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f042 0208 	orr.w	r2, r2, #8
 8006b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69da      	ldr	r2, [r3, #28]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 0204 	bic.w	r2, r2, #4
 8006b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69d9      	ldr	r1, [r3, #28]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	691a      	ldr	r2, [r3, #16]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	61da      	str	r2, [r3, #28]
      break;
 8006b24:	e064      	b.n	8006bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 fa47 	bl	8006fc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69da      	ldr	r2, [r3, #28]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69da      	ldr	r2, [r3, #28]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69d9      	ldr	r1, [r3, #28]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	021a      	lsls	r2, r3, #8
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	61da      	str	r2, [r3, #28]
      break;
 8006b66:	e043      	b.n	8006bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68b9      	ldr	r1, [r7, #8]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fa84 	bl	800707c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0208 	orr.w	r2, r2, #8
 8006b82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0204 	bic.w	r2, r2, #4
 8006b92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006ba6:	e023      	b.n	8006bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68b9      	ldr	r1, [r7, #8]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fabc 	bl	800712c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bc2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bd2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	021a      	lsls	r2, r3, #8
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006be8:	e002      	b.n	8006bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	75fb      	strb	r3, [r7, #23]
      break;
 8006bee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop

08006c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a30      	ldr	r2, [pc, #192]	@ (8006cd8 <TIM_Base_SetConfig+0xd4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d003      	beq.n	8006c24 <TIM_Base_SetConfig+0x20>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c22:	d108      	bne.n	8006c36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a27      	ldr	r2, [pc, #156]	@ (8006cd8 <TIM_Base_SetConfig+0xd4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00b      	beq.n	8006c56 <TIM_Base_SetConfig+0x52>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c44:	d007      	beq.n	8006c56 <TIM_Base_SetConfig+0x52>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a24      	ldr	r2, [pc, #144]	@ (8006cdc <TIM_Base_SetConfig+0xd8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d003      	beq.n	8006c56 <TIM_Base_SetConfig+0x52>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a23      	ldr	r2, [pc, #140]	@ (8006ce0 <TIM_Base_SetConfig+0xdc>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d108      	bne.n	8006c68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a12      	ldr	r2, [pc, #72]	@ (8006cd8 <TIM_Base_SetConfig+0xd4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d007      	beq.n	8006ca4 <TIM_Base_SetConfig+0xa0>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a11      	ldr	r2, [pc, #68]	@ (8006cdc <TIM_Base_SetConfig+0xd8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_Base_SetConfig+0xa0>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a10      	ldr	r2, [pc, #64]	@ (8006ce0 <TIM_Base_SetConfig+0xdc>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d103      	bne.n	8006cac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d105      	bne.n	8006cca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f023 0201 	bic.w	r2, r3, #1
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	611a      	str	r2, [r3, #16]
  }
}
 8006cca:	bf00      	nop
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	40012c00 	.word	0x40012c00
 8006cdc:	40014000 	.word	0x40014000
 8006ce0:	40014400 	.word	0x40014400

08006ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	f023 0201 	bic.w	r2, r3, #1
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0303 	bic.w	r3, r3, #3
 8006d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f023 0302 	bic.w	r3, r3, #2
 8006d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a24      	ldr	r2, [pc, #144]	@ (8006dd0 <TIM_OC1_SetConfig+0xec>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d007      	beq.n	8006d54 <TIM_OC1_SetConfig+0x70>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a23      	ldr	r2, [pc, #140]	@ (8006dd4 <TIM_OC1_SetConfig+0xf0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d003      	beq.n	8006d54 <TIM_OC1_SetConfig+0x70>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a22      	ldr	r2, [pc, #136]	@ (8006dd8 <TIM_OC1_SetConfig+0xf4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d10c      	bne.n	8006d6e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f023 0308 	bic.w	r3, r3, #8
 8006d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f023 0304 	bic.w	r3, r3, #4
 8006d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a17      	ldr	r2, [pc, #92]	@ (8006dd0 <TIM_OC1_SetConfig+0xec>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d007      	beq.n	8006d86 <TIM_OC1_SetConfig+0xa2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a16      	ldr	r2, [pc, #88]	@ (8006dd4 <TIM_OC1_SetConfig+0xf0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <TIM_OC1_SetConfig+0xa2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a15      	ldr	r2, [pc, #84]	@ (8006dd8 <TIM_OC1_SetConfig+0xf4>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d111      	bne.n	8006daa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	621a      	str	r2, [r3, #32]
}
 8006dc4:	bf00      	nop
 8006dc6:	371c      	adds	r7, #28
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	40012c00 	.word	0x40012c00
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	40014400 	.word	0x40014400

08006ddc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	f023 0210 	bic.w	r2, r3, #16
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	021b      	lsls	r3, r3, #8
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f023 0320 	bic.w	r3, r3, #32
 8006e2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	011b      	lsls	r3, r3, #4
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a22      	ldr	r2, [pc, #136]	@ (8006ec4 <TIM_OC2_SetConfig+0xe8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d10d      	bne.n	8006e5c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	011b      	lsls	r3, r3, #4
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a19      	ldr	r2, [pc, #100]	@ (8006ec4 <TIM_OC2_SetConfig+0xe8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d007      	beq.n	8006e74 <TIM_OC2_SetConfig+0x98>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a18      	ldr	r2, [pc, #96]	@ (8006ec8 <TIM_OC2_SetConfig+0xec>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d003      	beq.n	8006e74 <TIM_OC2_SetConfig+0x98>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a17      	ldr	r2, [pc, #92]	@ (8006ecc <TIM_OC2_SetConfig+0xf0>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d113      	bne.n	8006e9c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	621a      	str	r2, [r3, #32]
}
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40014000 	.word	0x40014000
 8006ecc:	40014400 	.word	0x40014400

08006ed0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0303 	bic.w	r3, r3, #3
 8006f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	021b      	lsls	r3, r3, #8
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a21      	ldr	r2, [pc, #132]	@ (8006fb4 <TIM_OC3_SetConfig+0xe4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d10d      	bne.n	8006f4e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	021b      	lsls	r3, r3, #8
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a18      	ldr	r2, [pc, #96]	@ (8006fb4 <TIM_OC3_SetConfig+0xe4>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d007      	beq.n	8006f66 <TIM_OC3_SetConfig+0x96>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a17      	ldr	r2, [pc, #92]	@ (8006fb8 <TIM_OC3_SetConfig+0xe8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d003      	beq.n	8006f66 <TIM_OC3_SetConfig+0x96>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a16      	ldr	r2, [pc, #88]	@ (8006fbc <TIM_OC3_SetConfig+0xec>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d113      	bne.n	8006f8e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	011b      	lsls	r3, r3, #4
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	011b      	lsls	r3, r3, #4
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	621a      	str	r2, [r3, #32]
}
 8006fa8:	bf00      	nop
 8006faa:	371c      	adds	r7, #28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	40012c00 	.word	0x40012c00
 8006fb8:	40014000 	.word	0x40014000
 8006fbc:	40014400 	.word	0x40014400

08006fc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	021b      	lsls	r3, r3, #8
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800700e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	031b      	lsls	r3, r3, #12
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	4313      	orrs	r3, r2
 800701a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a14      	ldr	r2, [pc, #80]	@ (8007070 <TIM_OC4_SetConfig+0xb0>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d007      	beq.n	8007034 <TIM_OC4_SetConfig+0x74>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a13      	ldr	r2, [pc, #76]	@ (8007074 <TIM_OC4_SetConfig+0xb4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d003      	beq.n	8007034 <TIM_OC4_SetConfig+0x74>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a12      	ldr	r2, [pc, #72]	@ (8007078 <TIM_OC4_SetConfig+0xb8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d109      	bne.n	8007048 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800703a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	019b      	lsls	r3, r3, #6
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	4313      	orrs	r3, r2
 8007046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	621a      	str	r2, [r3, #32]
}
 8007062:	bf00      	nop
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40012c00 	.word	0x40012c00
 8007074:	40014000 	.word	0x40014000
 8007078:	40014400 	.word	0x40014400

0800707c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80070c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	041b      	lsls	r3, r3, #16
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a13      	ldr	r2, [pc, #76]	@ (8007120 <TIM_OC5_SetConfig+0xa4>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d007      	beq.n	80070e6 <TIM_OC5_SetConfig+0x6a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a12      	ldr	r2, [pc, #72]	@ (8007124 <TIM_OC5_SetConfig+0xa8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d003      	beq.n	80070e6 <TIM_OC5_SetConfig+0x6a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a11      	ldr	r2, [pc, #68]	@ (8007128 <TIM_OC5_SetConfig+0xac>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d109      	bne.n	80070fa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	021b      	lsls	r3, r3, #8
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	621a      	str	r2, [r3, #32]
}
 8007114:	bf00      	nop
 8007116:	371c      	adds	r7, #28
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	40012c00 	.word	0x40012c00
 8007124:	40014000 	.word	0x40014000
 8007128:	40014400 	.word	0x40014400

0800712c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800715a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800715e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	021b      	lsls	r3, r3, #8
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	4313      	orrs	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007172:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	051b      	lsls	r3, r3, #20
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	4313      	orrs	r3, r2
 800717e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a14      	ldr	r2, [pc, #80]	@ (80071d4 <TIM_OC6_SetConfig+0xa8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d007      	beq.n	8007198 <TIM_OC6_SetConfig+0x6c>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a13      	ldr	r2, [pc, #76]	@ (80071d8 <TIM_OC6_SetConfig+0xac>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d003      	beq.n	8007198 <TIM_OC6_SetConfig+0x6c>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a12      	ldr	r2, [pc, #72]	@ (80071dc <TIM_OC6_SetConfig+0xb0>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d109      	bne.n	80071ac <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800719e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	029b      	lsls	r3, r3, #10
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	621a      	str	r2, [r3, #32]
}
 80071c6:	bf00      	nop
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40012c00 	.word	0x40012c00
 80071d8:	40014000 	.word	0x40014000
 80071dc:	40014400 	.word	0x40014400

080071e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f003 031f 	and.w	r3, r3, #31
 80071f2:	2201      	movs	r2, #1
 80071f4:	fa02 f303 	lsl.w	r3, r2, r3
 80071f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6a1a      	ldr	r2, [r3, #32]
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	43db      	mvns	r3, r3
 8007202:	401a      	ands	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a1a      	ldr	r2, [r3, #32]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f003 031f 	and.w	r3, r3, #31
 8007212:	6879      	ldr	r1, [r7, #4]
 8007214:	fa01 f303 	lsl.w	r3, r1, r3
 8007218:	431a      	orrs	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	621a      	str	r2, [r3, #32]
}
 800721e:	bf00      	nop
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
	...

0800722c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007240:	2302      	movs	r3, #2
 8007242:	e04f      	b.n	80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a21      	ldr	r2, [pc, #132]	@ (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d108      	bne.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007274:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	4313      	orrs	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	4313      	orrs	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a14      	ldr	r2, [pc, #80]	@ (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d009      	beq.n	80072b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ac:	d004      	beq.n	80072b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a10      	ldr	r2, [pc, #64]	@ (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d10c      	bne.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	40012c00 	.word	0x40012c00
 80072f4:	40014000 	.word	0x40014000

080072f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007310:	2302      	movs	r3, #2
 8007312:	e060      	b.n	80073d6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	4313      	orrs	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	4313      	orrs	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4313      	orrs	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737a:	4313      	orrs	r3, r2
 800737c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	041b      	lsls	r3, r3, #16
 800738a:	4313      	orrs	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a14      	ldr	r2, [pc, #80]	@ (80073e4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d115      	bne.n	80073c4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a2:	051b      	lsls	r3, r3, #20
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40012c00 	.word	0x40012c00

080073e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e040      	b.n	800747c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d106      	bne.n	8007410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7fb f896 	bl	800253c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2224      	movs	r2, #36	@ 0x24
 8007414:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0201 	bic.w	r2, r2, #1
 8007424:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fe5a 	bl	80080e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fc2b 	bl	8007c90 <UART_SetConfig>
 800743a:	4603      	mov	r3, r0
 800743c:	2b01      	cmp	r3, #1
 800743e:	d101      	bne.n	8007444 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e01b      	b.n	800747c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689a      	ldr	r2, [r3, #8]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0201 	orr.w	r2, r2, #1
 8007472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fed9 	bl	800822c <UART_CheckIdleState>
 800747a:	4603      	mov	r3, r0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08a      	sub	sp, #40	@ 0x28
 8007488:	af02      	add	r7, sp, #8
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	603b      	str	r3, [r7, #0]
 8007490:	4613      	mov	r3, r2
 8007492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007498:	2b20      	cmp	r3, #32
 800749a:	d177      	bne.n	800758c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_UART_Transmit+0x24>
 80074a2:	88fb      	ldrh	r3, [r7, #6]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e070      	b.n	800758e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2221      	movs	r2, #33	@ 0x21
 80074b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074ba:	f7fb facd 	bl	8002a58 <HAL_GetTick>
 80074be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	88fa      	ldrh	r2, [r7, #6]
 80074c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	88fa      	ldrh	r2, [r7, #6]
 80074cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074d8:	d108      	bne.n	80074ec <HAL_UART_Transmit+0x68>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d104      	bne.n	80074ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	61bb      	str	r3, [r7, #24]
 80074ea:	e003      	b.n	80074f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074f0:	2300      	movs	r3, #0
 80074f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074f4:	e02f      	b.n	8007556 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2200      	movs	r2, #0
 80074fe:	2180      	movs	r1, #128	@ 0x80
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 ff3b 	bl	800837c <UART_WaitOnFlagUntilTimeout>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2220      	movs	r2, #32
 8007510:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e03b      	b.n	800758e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10b      	bne.n	8007534 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	881a      	ldrh	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007528:	b292      	uxth	r2, r2
 800752a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	3302      	adds	r3, #2
 8007530:	61bb      	str	r3, [r7, #24]
 8007532:	e007      	b.n	8007544 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	781a      	ldrb	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	3301      	adds	r3, #1
 8007542:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800754a:	b29b      	uxth	r3, r3
 800754c:	3b01      	subs	r3, #1
 800754e:	b29a      	uxth	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800755c:	b29b      	uxth	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1c9      	bne.n	80074f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2200      	movs	r2, #0
 800756a:	2140      	movs	r1, #64	@ 0x40
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 ff05 	bl	800837c <UART_WaitOnFlagUntilTimeout>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d004      	beq.n	8007582 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2220      	movs	r2, #32
 800757c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e005      	b.n	800758e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007588:	2300      	movs	r3, #0
 800758a:	e000      	b.n	800758e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800758c:	2302      	movs	r3, #2
  }
}
 800758e:	4618      	mov	r0, r3
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08a      	sub	sp, #40	@ 0x28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	4613      	mov	r3, r2
 80075a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ac:	2b20      	cmp	r3, #32
 80075ae:	d137      	bne.n	8007620 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <HAL_UART_Receive_DMA+0x24>
 80075b6:	88fb      	ldrh	r3, [r7, #6]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e030      	b.n	8007622 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a18      	ldr	r2, [pc, #96]	@ (800762c <HAL_UART_Receive_DMA+0x94>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d01f      	beq.n	8007610 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d018      	beq.n	8007610 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	613b      	str	r3, [r7, #16]
   return(result);
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	623b      	str	r3, [r7, #32]
 80075fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	69f9      	ldr	r1, [r7, #28]
 8007602:	6a3a      	ldr	r2, [r7, #32]
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	61bb      	str	r3, [r7, #24]
   return(result);
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e6      	bne.n	80075de <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007610:	88fb      	ldrh	r3, [r7, #6]
 8007612:	461a      	mov	r2, r3
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 ff1e 	bl	8008458 <UART_Start_Receive_DMA>
 800761c:	4603      	mov	r3, r0
 800761e:	e000      	b.n	8007622 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007620:	2302      	movs	r3, #2
  }
}
 8007622:	4618      	mov	r0, r3
 8007624:	3728      	adds	r7, #40	@ 0x28
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	40008000 	.word	0x40008000

08007630 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b0ba      	sub	sp, #232	@ 0xe8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007656:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800765a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800765e:	4013      	ands	r3, r2
 8007660:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007668:	2b00      	cmp	r3, #0
 800766a:	d115      	bne.n	8007698 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800766c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007670:	f003 0320 	and.w	r3, r3, #32
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00f      	beq.n	8007698 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d009      	beq.n	8007698 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 82ca 	beq.w	8007c22 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	4798      	blx	r3
      }
      return;
 8007696:	e2c4      	b.n	8007c22 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 8117 	beq.w	80078d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80076a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d106      	bne.n	80076bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80076ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80076b2:	4b85      	ldr	r3, [pc, #532]	@ (80078c8 <HAL_UART_IRQHandler+0x298>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 810a 	beq.w	80078d0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d011      	beq.n	80076ec <HAL_UART_IRQHandler+0xbc>
 80076c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2201      	movs	r2, #1
 80076da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076e2:	f043 0201 	orr.w	r2, r3, #1
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d011      	beq.n	800771c <HAL_UART_IRQHandler+0xec>
 80076f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00b      	beq.n	800771c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2202      	movs	r2, #2
 800770a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007712:	f043 0204 	orr.w	r2, r3, #4
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800771c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	2b00      	cmp	r3, #0
 8007726:	d011      	beq.n	800774c <HAL_UART_IRQHandler+0x11c>
 8007728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00b      	beq.n	800774c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2204      	movs	r2, #4
 800773a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007742:	f043 0202 	orr.w	r2, r3, #2
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800774c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007750:	f003 0308 	and.w	r3, r3, #8
 8007754:	2b00      	cmp	r3, #0
 8007756:	d017      	beq.n	8007788 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800775c:	f003 0320 	and.w	r3, r3, #32
 8007760:	2b00      	cmp	r3, #0
 8007762:	d105      	bne.n	8007770 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007768:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2208      	movs	r2, #8
 8007776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800777e:	f043 0208 	orr.w	r2, r3, #8
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800778c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007790:	2b00      	cmp	r3, #0
 8007792:	d012      	beq.n	80077ba <HAL_UART_IRQHandler+0x18a>
 8007794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007798:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00c      	beq.n	80077ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077b0:	f043 0220 	orr.w	r2, r3, #32
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 8230 	beq.w	8007c26 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80077c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00d      	beq.n	80077ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d007      	beq.n	80077ee <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007802:	2b40      	cmp	r3, #64	@ 0x40
 8007804:	d005      	beq.n	8007812 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800780a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800780e:	2b00      	cmp	r3, #0
 8007810:	d04f      	beq.n	80078b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fee6 	bl	80085e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007822:	2b40      	cmp	r3, #64	@ 0x40
 8007824:	d141      	bne.n	80078aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3308      	adds	r3, #8
 800782c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800783c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3308      	adds	r3, #8
 800784e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007852:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007856:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800785e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800786a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1d9      	bne.n	8007826 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007876:	2b00      	cmp	r3, #0
 8007878:	d013      	beq.n	80078a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800787e:	4a13      	ldr	r2, [pc, #76]	@ (80078cc <HAL_UART_IRQHandler+0x29c>)
 8007880:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007886:	4618      	mov	r0, r3
 8007888:	f7fc fbf0 	bl	800406c <HAL_DMA_Abort_IT>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d017      	beq.n	80078c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800789c:	4610      	mov	r0, r2
 800789e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a0:	e00f      	b.n	80078c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f9de 	bl	8007c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a8:	e00b      	b.n	80078c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f9da 	bl	8007c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b0:	e007      	b.n	80078c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f9d6 	bl	8007c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80078c0:	e1b1      	b.n	8007c26 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c2:	bf00      	nop
    return;
 80078c4:	e1af      	b.n	8007c26 <HAL_UART_IRQHandler+0x5f6>
 80078c6:	bf00      	nop
 80078c8:	04000120 	.word	0x04000120
 80078cc:	08008895 	.word	0x08008895

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	f040 816a 	bne.w	8007bae <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078de:	f003 0310 	and.w	r3, r3, #16
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 8163 	beq.w	8007bae <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 815c 	beq.w	8007bae <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2210      	movs	r2, #16
 80078fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007908:	2b40      	cmp	r3, #64	@ 0x40
 800790a:	f040 80d4 	bne.w	8007ab6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800791a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 80ad 	beq.w	8007a7e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800792a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800792e:	429a      	cmp	r2, r3
 8007930:	f080 80a5 	bcs.w	8007a7e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800793a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0320 	and.w	r3, r3, #32
 800794a:	2b00      	cmp	r3, #0
 800794c:	f040 8086 	bne.w	8007a5c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007958:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007964:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007968:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800796c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800797a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800797e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007982:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007986:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007992:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1da      	bne.n	8007950 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3308      	adds	r3, #8
 80079a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079ac:	f023 0301 	bic.w	r3, r3, #1
 80079b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80079be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80079c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80079c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80079d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e1      	bne.n	800799a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3308      	adds	r3, #8
 80079dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80079e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3308      	adds	r3, #8
 80079f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80079fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80079fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1e3      	bne.n	80079d6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a2c:	f023 0310 	bic.w	r3, r3, #16
 8007a30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e4      	bne.n	8007a1c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fc faca 	bl	8003ff0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f8fe 	bl	8007c78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007a7c:	e0d5      	b.n	8007c2a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	f040 80ce 	bne.w	8007c2a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0320 	and.w	r3, r3, #32
 8007a9a:	2b20      	cmp	r3, #32
 8007a9c:	f040 80c5 	bne.w	8007c2a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f8e2 	bl	8007c78 <HAL_UARTEx_RxEventCallback>
      return;
 8007ab4:	e0b9      	b.n	8007c2a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 80ab 	beq.w	8007c2e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8007ad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 80a6 	beq.w	8007c2e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007af6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e4      	bne.n	8007ae2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b22:	e853 3f00 	ldrex	r3, [r3]
 8007b26:	623b      	str	r3, [r7, #32]
   return(result);
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	f023 0301 	bic.w	r3, r3, #1
 8007b2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3308      	adds	r3, #8
 8007b38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b44:	e841 2300 	strex	r3, r2, [r1]
 8007b48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e3      	bne.n	8007b18 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f023 0310 	bic.w	r3, r3, #16
 8007b78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b86:	61fb      	str	r3, [r7, #28]
 8007b88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	69b9      	ldr	r1, [r7, #24]
 8007b8c:	69fa      	ldr	r2, [r7, #28]
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	617b      	str	r3, [r7, #20]
   return(result);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e4      	bne.n	8007b64 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f866 	bl	8007c78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bac:	e03f      	b.n	8007c2e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00e      	beq.n	8007bd8 <HAL_UART_IRQHandler+0x5a8>
 8007bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d008      	beq.n	8007bd8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007bce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fe9f 	bl	8008914 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bd6:	e02d      	b.n	8007c34 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00e      	beq.n	8007c02 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d008      	beq.n	8007c02 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01c      	beq.n	8007c32 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	4798      	blx	r3
    }
    return;
 8007c00:	e017      	b.n	8007c32 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d012      	beq.n	8007c34 <HAL_UART_IRQHandler+0x604>
 8007c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00c      	beq.n	8007c34 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fe50 	bl	80088c0 <UART_EndTransmit_IT>
    return;
 8007c20:	e008      	b.n	8007c34 <HAL_UART_IRQHandler+0x604>
      return;
 8007c22:	bf00      	nop
 8007c24:	e006      	b.n	8007c34 <HAL_UART_IRQHandler+0x604>
    return;
 8007c26:	bf00      	nop
 8007c28:	e004      	b.n	8007c34 <HAL_UART_IRQHandler+0x604>
      return;
 8007c2a:	bf00      	nop
 8007c2c:	e002      	b.n	8007c34 <HAL_UART_IRQHandler+0x604>
      return;
 8007c2e:	bf00      	nop
 8007c30:	e000      	b.n	8007c34 <HAL_UART_IRQHandler+0x604>
    return;
 8007c32:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007c34:	37e8      	adds	r7, #232	@ 0xe8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop

08007c3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c94:	b08a      	sub	sp, #40	@ 0x28
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	431a      	orrs	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	4bb4      	ldr	r3, [pc, #720]	@ (8007f90 <UART_SetConfig+0x300>)
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	6812      	ldr	r2, [r2, #0]
 8007cc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cc8:	430b      	orrs	r3, r1
 8007cca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4aa9      	ldr	r2, [pc, #676]	@ (8007f94 <UART_SetConfig+0x304>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d004      	beq.n	8007cfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4aa0      	ldr	r2, [pc, #640]	@ (8007f98 <UART_SetConfig+0x308>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d126      	bne.n	8007d68 <UART_SetConfig+0xd8>
 8007d1a:	4ba0      	ldr	r3, [pc, #640]	@ (8007f9c <UART_SetConfig+0x30c>)
 8007d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d20:	f003 0303 	and.w	r3, r3, #3
 8007d24:	2b03      	cmp	r3, #3
 8007d26:	d81b      	bhi.n	8007d60 <UART_SetConfig+0xd0>
 8007d28:	a201      	add	r2, pc, #4	@ (adr r2, 8007d30 <UART_SetConfig+0xa0>)
 8007d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2e:	bf00      	nop
 8007d30:	08007d41 	.word	0x08007d41
 8007d34:	08007d51 	.word	0x08007d51
 8007d38:	08007d49 	.word	0x08007d49
 8007d3c:	08007d59 	.word	0x08007d59
 8007d40:	2301      	movs	r3, #1
 8007d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d46:	e080      	b.n	8007e4a <UART_SetConfig+0x1ba>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d4e:	e07c      	b.n	8007e4a <UART_SetConfig+0x1ba>
 8007d50:	2304      	movs	r3, #4
 8007d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d56:	e078      	b.n	8007e4a <UART_SetConfig+0x1ba>
 8007d58:	2308      	movs	r3, #8
 8007d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d5e:	e074      	b.n	8007e4a <UART_SetConfig+0x1ba>
 8007d60:	2310      	movs	r3, #16
 8007d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d66:	e070      	b.n	8007e4a <UART_SetConfig+0x1ba>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a8c      	ldr	r2, [pc, #560]	@ (8007fa0 <UART_SetConfig+0x310>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d138      	bne.n	8007de4 <UART_SetConfig+0x154>
 8007d72:	4b8a      	ldr	r3, [pc, #552]	@ (8007f9c <UART_SetConfig+0x30c>)
 8007d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d78:	f003 030c 	and.w	r3, r3, #12
 8007d7c:	2b0c      	cmp	r3, #12
 8007d7e:	d82d      	bhi.n	8007ddc <UART_SetConfig+0x14c>
 8007d80:	a201      	add	r2, pc, #4	@ (adr r2, 8007d88 <UART_SetConfig+0xf8>)
 8007d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d86:	bf00      	nop
 8007d88:	08007dbd 	.word	0x08007dbd
 8007d8c:	08007ddd 	.word	0x08007ddd
 8007d90:	08007ddd 	.word	0x08007ddd
 8007d94:	08007ddd 	.word	0x08007ddd
 8007d98:	08007dcd 	.word	0x08007dcd
 8007d9c:	08007ddd 	.word	0x08007ddd
 8007da0:	08007ddd 	.word	0x08007ddd
 8007da4:	08007ddd 	.word	0x08007ddd
 8007da8:	08007dc5 	.word	0x08007dc5
 8007dac:	08007ddd 	.word	0x08007ddd
 8007db0:	08007ddd 	.word	0x08007ddd
 8007db4:	08007ddd 	.word	0x08007ddd
 8007db8:	08007dd5 	.word	0x08007dd5
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dc2:	e042      	b.n	8007e4a <UART_SetConfig+0x1ba>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dca:	e03e      	b.n	8007e4a <UART_SetConfig+0x1ba>
 8007dcc:	2304      	movs	r3, #4
 8007dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dd2:	e03a      	b.n	8007e4a <UART_SetConfig+0x1ba>
 8007dd4:	2308      	movs	r3, #8
 8007dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dda:	e036      	b.n	8007e4a <UART_SetConfig+0x1ba>
 8007ddc:	2310      	movs	r3, #16
 8007dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007de2:	e032      	b.n	8007e4a <UART_SetConfig+0x1ba>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a6a      	ldr	r2, [pc, #424]	@ (8007f94 <UART_SetConfig+0x304>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d12a      	bne.n	8007e44 <UART_SetConfig+0x1b4>
 8007dee:	4b6b      	ldr	r3, [pc, #428]	@ (8007f9c <UART_SetConfig+0x30c>)
 8007df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007df4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007df8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dfc:	d01a      	beq.n	8007e34 <UART_SetConfig+0x1a4>
 8007dfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e02:	d81b      	bhi.n	8007e3c <UART_SetConfig+0x1ac>
 8007e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e08:	d00c      	beq.n	8007e24 <UART_SetConfig+0x194>
 8007e0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e0e:	d815      	bhi.n	8007e3c <UART_SetConfig+0x1ac>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <UART_SetConfig+0x18c>
 8007e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e18:	d008      	beq.n	8007e2c <UART_SetConfig+0x19c>
 8007e1a:	e00f      	b.n	8007e3c <UART_SetConfig+0x1ac>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e22:	e012      	b.n	8007e4a <UART_SetConfig+0x1ba>
 8007e24:	2302      	movs	r3, #2
 8007e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e2a:	e00e      	b.n	8007e4a <UART_SetConfig+0x1ba>
 8007e2c:	2304      	movs	r3, #4
 8007e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e32:	e00a      	b.n	8007e4a <UART_SetConfig+0x1ba>
 8007e34:	2308      	movs	r3, #8
 8007e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e3a:	e006      	b.n	8007e4a <UART_SetConfig+0x1ba>
 8007e3c:	2310      	movs	r3, #16
 8007e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e42:	e002      	b.n	8007e4a <UART_SetConfig+0x1ba>
 8007e44:	2310      	movs	r3, #16
 8007e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a51      	ldr	r2, [pc, #324]	@ (8007f94 <UART_SetConfig+0x304>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d17a      	bne.n	8007f4a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d824      	bhi.n	8007ea6 <UART_SetConfig+0x216>
 8007e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e64 <UART_SetConfig+0x1d4>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007e89 	.word	0x08007e89
 8007e68:	08007ea7 	.word	0x08007ea7
 8007e6c:	08007e91 	.word	0x08007e91
 8007e70:	08007ea7 	.word	0x08007ea7
 8007e74:	08007e97 	.word	0x08007e97
 8007e78:	08007ea7 	.word	0x08007ea7
 8007e7c:	08007ea7 	.word	0x08007ea7
 8007e80:	08007ea7 	.word	0x08007ea7
 8007e84:	08007e9f 	.word	0x08007e9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e88:	f7fe f8ee 	bl	8006068 <HAL_RCC_GetPCLK1Freq>
 8007e8c:	61f8      	str	r0, [r7, #28]
        break;
 8007e8e:	e010      	b.n	8007eb2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e90:	4b44      	ldr	r3, [pc, #272]	@ (8007fa4 <UART_SetConfig+0x314>)
 8007e92:	61fb      	str	r3, [r7, #28]
        break;
 8007e94:	e00d      	b.n	8007eb2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e96:	f7fe f84f 	bl	8005f38 <HAL_RCC_GetSysClockFreq>
 8007e9a:	61f8      	str	r0, [r7, #28]
        break;
 8007e9c:	e009      	b.n	8007eb2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ea2:	61fb      	str	r3, [r7, #28]
        break;
 8007ea4:	e005      	b.n	8007eb2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007eb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 8107 	beq.w	80080c8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	4413      	add	r3, r2
 8007ec4:	69fa      	ldr	r2, [r7, #28]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d305      	bcc.n	8007ed6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d903      	bls.n	8007ede <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007edc:	e0f4      	b.n	80080c8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	461c      	mov	r4, r3
 8007ee4:	4615      	mov	r5, r2
 8007ee6:	f04f 0200 	mov.w	r2, #0
 8007eea:	f04f 0300 	mov.w	r3, #0
 8007eee:	022b      	lsls	r3, r5, #8
 8007ef0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ef4:	0222      	lsls	r2, r4, #8
 8007ef6:	68f9      	ldr	r1, [r7, #12]
 8007ef8:	6849      	ldr	r1, [r1, #4]
 8007efa:	0849      	lsrs	r1, r1, #1
 8007efc:	2000      	movs	r0, #0
 8007efe:	4688      	mov	r8, r1
 8007f00:	4681      	mov	r9, r0
 8007f02:	eb12 0a08 	adds.w	sl, r2, r8
 8007f06:	eb43 0b09 	adc.w	fp, r3, r9
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	603b      	str	r3, [r7, #0]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f18:	4650      	mov	r0, sl
 8007f1a:	4659      	mov	r1, fp
 8007f1c:	f7f8 feb4 	bl	8000c88 <__aeabi_uldivmod>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	4613      	mov	r3, r2
 8007f26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f2e:	d308      	bcc.n	8007f42 <UART_SetConfig+0x2b2>
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f36:	d204      	bcs.n	8007f42 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	60da      	str	r2, [r3, #12]
 8007f40:	e0c2      	b.n	80080c8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007f48:	e0be      	b.n	80080c8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f52:	d16a      	bne.n	800802a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007f54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d834      	bhi.n	8007fc6 <UART_SetConfig+0x336>
 8007f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f64 <UART_SetConfig+0x2d4>)
 8007f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f62:	bf00      	nop
 8007f64:	08007f89 	.word	0x08007f89
 8007f68:	08007fa9 	.word	0x08007fa9
 8007f6c:	08007fb1 	.word	0x08007fb1
 8007f70:	08007fc7 	.word	0x08007fc7
 8007f74:	08007fb7 	.word	0x08007fb7
 8007f78:	08007fc7 	.word	0x08007fc7
 8007f7c:	08007fc7 	.word	0x08007fc7
 8007f80:	08007fc7 	.word	0x08007fc7
 8007f84:	08007fbf 	.word	0x08007fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f88:	f7fe f86e 	bl	8006068 <HAL_RCC_GetPCLK1Freq>
 8007f8c:	61f8      	str	r0, [r7, #28]
        break;
 8007f8e:	e020      	b.n	8007fd2 <UART_SetConfig+0x342>
 8007f90:	efff69f3 	.word	0xefff69f3
 8007f94:	40008000 	.word	0x40008000
 8007f98:	40013800 	.word	0x40013800
 8007f9c:	40021000 	.word	0x40021000
 8007fa0:	40004400 	.word	0x40004400
 8007fa4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fa8:	f7fe f874 	bl	8006094 <HAL_RCC_GetPCLK2Freq>
 8007fac:	61f8      	str	r0, [r7, #28]
        break;
 8007fae:	e010      	b.n	8007fd2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fb0:	4b4c      	ldr	r3, [pc, #304]	@ (80080e4 <UART_SetConfig+0x454>)
 8007fb2:	61fb      	str	r3, [r7, #28]
        break;
 8007fb4:	e00d      	b.n	8007fd2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fb6:	f7fd ffbf 	bl	8005f38 <HAL_RCC_GetSysClockFreq>
 8007fba:	61f8      	str	r0, [r7, #28]
        break;
 8007fbc:	e009      	b.n	8007fd2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fc2:	61fb      	str	r3, [r7, #28]
        break;
 8007fc4:	e005      	b.n	8007fd2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007fd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d077      	beq.n	80080c8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	005a      	lsls	r2, r3, #1
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	085b      	lsrs	r3, r3, #1
 8007fe2:	441a      	add	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	2b0f      	cmp	r3, #15
 8007ff2:	d916      	bls.n	8008022 <UART_SetConfig+0x392>
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ffa:	d212      	bcs.n	8008022 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	f023 030f 	bic.w	r3, r3, #15
 8008004:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	085b      	lsrs	r3, r3, #1
 800800a:	b29b      	uxth	r3, r3
 800800c:	f003 0307 	and.w	r3, r3, #7
 8008010:	b29a      	uxth	r2, r3
 8008012:	8afb      	ldrh	r3, [r7, #22]
 8008014:	4313      	orrs	r3, r2
 8008016:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	8afa      	ldrh	r2, [r7, #22]
 800801e:	60da      	str	r2, [r3, #12]
 8008020:	e052      	b.n	80080c8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008028:	e04e      	b.n	80080c8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800802a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800802e:	2b08      	cmp	r3, #8
 8008030:	d827      	bhi.n	8008082 <UART_SetConfig+0x3f2>
 8008032:	a201      	add	r2, pc, #4	@ (adr r2, 8008038 <UART_SetConfig+0x3a8>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	0800805d 	.word	0x0800805d
 800803c:	08008065 	.word	0x08008065
 8008040:	0800806d 	.word	0x0800806d
 8008044:	08008083 	.word	0x08008083
 8008048:	08008073 	.word	0x08008073
 800804c:	08008083 	.word	0x08008083
 8008050:	08008083 	.word	0x08008083
 8008054:	08008083 	.word	0x08008083
 8008058:	0800807b 	.word	0x0800807b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800805c:	f7fe f804 	bl	8006068 <HAL_RCC_GetPCLK1Freq>
 8008060:	61f8      	str	r0, [r7, #28]
        break;
 8008062:	e014      	b.n	800808e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008064:	f7fe f816 	bl	8006094 <HAL_RCC_GetPCLK2Freq>
 8008068:	61f8      	str	r0, [r7, #28]
        break;
 800806a:	e010      	b.n	800808e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800806c:	4b1d      	ldr	r3, [pc, #116]	@ (80080e4 <UART_SetConfig+0x454>)
 800806e:	61fb      	str	r3, [r7, #28]
        break;
 8008070:	e00d      	b.n	800808e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008072:	f7fd ff61 	bl	8005f38 <HAL_RCC_GetSysClockFreq>
 8008076:	61f8      	str	r0, [r7, #28]
        break;
 8008078:	e009      	b.n	800808e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800807a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800807e:	61fb      	str	r3, [r7, #28]
        break;
 8008080:	e005      	b.n	800808e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800808c:	bf00      	nop
    }

    if (pclk != 0U)
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d019      	beq.n	80080c8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	085a      	lsrs	r2, r3, #1
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	441a      	add	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2b0f      	cmp	r3, #15
 80080ac:	d909      	bls.n	80080c2 <UART_SetConfig+0x432>
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b4:	d205      	bcs.n	80080c2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	60da      	str	r2, [r3, #12]
 80080c0:	e002      	b.n	80080c8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80080d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3728      	adds	r7, #40	@ 0x28
 80080dc:	46bd      	mov	sp, r7
 80080de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080e2:	bf00      	nop
 80080e4:	00f42400 	.word	0x00f42400

080080e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00a      	beq.n	8008112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	430a      	orrs	r2, r1
 8008110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00a      	beq.n	8008134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	430a      	orrs	r2, r1
 8008132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00a      	beq.n	8008156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	430a      	orrs	r2, r1
 8008154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815a:	f003 0304 	and.w	r3, r3, #4
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00a      	beq.n	8008178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800817c:	f003 0310 	and.w	r3, r3, #16
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00a      	beq.n	800819a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800819e:	f003 0320 	and.w	r3, r3, #32
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00a      	beq.n	80081bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d01a      	beq.n	80081fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081e6:	d10a      	bne.n	80081fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	430a      	orrs	r2, r1
 800821e:	605a      	str	r2, [r3, #4]
  }
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b098      	sub	sp, #96	@ 0x60
 8008230:	af02      	add	r7, sp, #8
 8008232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800823c:	f7fa fc0c 	bl	8002a58 <HAL_GetTick>
 8008240:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	2b08      	cmp	r3, #8
 800824e:	d12e      	bne.n	80082ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008250:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008258:	2200      	movs	r2, #0
 800825a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f88c 	bl	800837c <UART_WaitOnFlagUntilTimeout>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d021      	beq.n	80082ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008272:	e853 3f00 	ldrex	r3, [r3]
 8008276:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800827a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800827e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	461a      	mov	r2, r3
 8008286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008288:	647b      	str	r3, [r7, #68]	@ 0x44
 800828a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800828e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008290:	e841 2300 	strex	r3, r2, [r1]
 8008294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e6      	bne.n	800826a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2220      	movs	r2, #32
 80082a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e062      	b.n	8008374 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d149      	bne.n	8008350 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082c4:	2200      	movs	r2, #0
 80082c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f856 	bl	800837c <UART_WaitOnFlagUntilTimeout>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d03c      	beq.n	8008350 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	623b      	str	r3, [r7, #32]
   return(result);
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80082f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e6      	bne.n	80082d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3308      	adds	r3, #8
 800830e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	60fb      	str	r3, [r7, #12]
   return(result);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0301 	bic.w	r3, r3, #1
 800831e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3308      	adds	r3, #8
 8008326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008328:	61fa      	str	r2, [r7, #28]
 800832a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	69b9      	ldr	r1, [r7, #24]
 800832e:	69fa      	ldr	r2, [r7, #28]
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	617b      	str	r3, [r7, #20]
   return(result);
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e5      	bne.n	8008308 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e011      	b.n	8008374 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2220      	movs	r2, #32
 8008354:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2220      	movs	r2, #32
 800835a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3758      	adds	r7, #88	@ 0x58
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	4613      	mov	r3, r2
 800838a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800838c:	e04f      	b.n	800842e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008394:	d04b      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008396:	f7fa fb5f 	bl	8002a58 <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d302      	bcc.n	80083ac <UART_WaitOnFlagUntilTimeout+0x30>
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e04e      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d037      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0xb2>
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b80      	cmp	r3, #128	@ 0x80
 80083c2:	d034      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0xb2>
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2b40      	cmp	r3, #64	@ 0x40
 80083c8:	d031      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	f003 0308 	and.w	r3, r3, #8
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d110      	bne.n	80083fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2208      	movs	r2, #8
 80083de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f000 f8ff 	bl	80085e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2208      	movs	r2, #8
 80083ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e029      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008408:	d111      	bne.n	800842e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f8e5 	bl	80085e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2220      	movs	r2, #32
 800841e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e00f      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69da      	ldr	r2, [r3, #28]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	4013      	ands	r3, r2
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	429a      	cmp	r2, r3
 800843c:	bf0c      	ite	eq
 800843e:	2301      	moveq	r3, #1
 8008440:	2300      	movne	r3, #0
 8008442:	b2db      	uxtb	r3, r3
 8008444:	461a      	mov	r2, r3
 8008446:	79fb      	ldrb	r3, [r7, #7]
 8008448:	429a      	cmp	r2, r3
 800844a:	d0a0      	beq.n	800838e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b096      	sub	sp, #88	@ 0x58
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	4613      	mov	r3, r2
 8008464:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	88fa      	ldrh	r2, [r7, #6]
 8008470:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2222      	movs	r2, #34	@ 0x22
 8008480:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008488:	2b00      	cmp	r3, #0
 800848a:	d028      	beq.n	80084de <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008490:	4a3e      	ldr	r2, [pc, #248]	@ (800858c <UART_Start_Receive_DMA+0x134>)
 8008492:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008498:	4a3d      	ldr	r2, [pc, #244]	@ (8008590 <UART_Start_Receive_DMA+0x138>)
 800849a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084a0:	4a3c      	ldr	r2, [pc, #240]	@ (8008594 <UART_Start_Receive_DMA+0x13c>)
 80084a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084a8:	2200      	movs	r2, #0
 80084aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3324      	adds	r3, #36	@ 0x24
 80084b6:	4619      	mov	r1, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084bc:	461a      	mov	r2, r3
 80084be:	88fb      	ldrh	r3, [r7, #6]
 80084c0:	f7fb fd36 	bl	8003f30 <HAL_DMA_Start_IT>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d009      	beq.n	80084de <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2210      	movs	r2, #16
 80084ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e051      	b.n	8008582 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d018      	beq.n	8008518 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084ee:	e853 3f00 	ldrex	r3, [r3]
 80084f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008504:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008506:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008508:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800850a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800850c:	e841 2300 	strex	r3, r2, [r1]
 8008510:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e6      	bne.n	80084e6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3308      	adds	r3, #8
 800851e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008522:	e853 3f00 	ldrex	r3, [r3]
 8008526:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852a:	f043 0301 	orr.w	r3, r3, #1
 800852e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3308      	adds	r3, #8
 8008536:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008538:	637a      	str	r2, [r7, #52]	@ 0x34
 800853a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800853e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008540:	e841 2300 	strex	r3, r2, [r1]
 8008544:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e5      	bne.n	8008518 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3308      	adds	r3, #8
 8008552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	e853 3f00 	ldrex	r3, [r3]
 800855a:	613b      	str	r3, [r7, #16]
   return(result);
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3308      	adds	r3, #8
 800856a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800856c:	623a      	str	r2, [r7, #32]
 800856e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008570:	69f9      	ldr	r1, [r7, #28]
 8008572:	6a3a      	ldr	r2, [r7, #32]
 8008574:	e841 2300 	strex	r3, r2, [r1]
 8008578:	61bb      	str	r3, [r7, #24]
   return(result);
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e5      	bne.n	800854c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3758      	adds	r7, #88	@ 0x58
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	080086ad 	.word	0x080086ad
 8008590:	080087d9 	.word	0x080087d9
 8008594:	08008817 	.word	0x08008817

08008598 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008598:	b480      	push	{r7}
 800859a:	b089      	sub	sp, #36	@ 0x24
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80085b4:	61fb      	str	r3, [r7, #28]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	461a      	mov	r2, r3
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	61bb      	str	r3, [r7, #24]
 80085c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c2:	6979      	ldr	r1, [r7, #20]
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	613b      	str	r3, [r7, #16]
   return(result);
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e6      	bne.n	80085a0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2220      	movs	r2, #32
 80085d6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80085d8:	bf00      	nop
 80085da:	3724      	adds	r7, #36	@ 0x24
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b095      	sub	sp, #84	@ 0x54
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f4:	e853 3f00 	ldrex	r3, [r3]
 80085f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008600:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	461a      	mov	r2, r3
 8008608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800860a:	643b      	str	r3, [r7, #64]	@ 0x40
 800860c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008610:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008612:	e841 2300 	strex	r3, r2, [r1]
 8008616:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1e6      	bne.n	80085ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3308      	adds	r3, #8
 8008624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	e853 3f00 	ldrex	r3, [r3]
 800862c:	61fb      	str	r3, [r7, #28]
   return(result);
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	f023 0301 	bic.w	r3, r3, #1
 8008634:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3308      	adds	r3, #8
 800863c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800863e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008640:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008646:	e841 2300 	strex	r3, r2, [r1]
 800864a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800864c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1e5      	bne.n	800861e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008656:	2b01      	cmp	r3, #1
 8008658:	d118      	bne.n	800868c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	60bb      	str	r3, [r7, #8]
   return(result);
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	f023 0310 	bic.w	r3, r3, #16
 800866e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008678:	61bb      	str	r3, [r7, #24]
 800867a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	6979      	ldr	r1, [r7, #20]
 800867e:	69ba      	ldr	r2, [r7, #24]
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	613b      	str	r3, [r7, #16]
   return(result);
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e6      	bne.n	800865a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2220      	movs	r2, #32
 8008690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80086a0:	bf00      	nop
 80086a2:	3754      	adds	r7, #84	@ 0x54
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b09c      	sub	sp, #112	@ 0x70
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0320 	and.w	r3, r3, #32
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d171      	bne.n	80087ac <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80086c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80086f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086f6:	e841 2300 	strex	r3, r2, [r1]
 80086fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80086fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1e6      	bne.n	80086d0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3308      	adds	r3, #8
 8008708:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870c:	e853 3f00 	ldrex	r3, [r3]
 8008710:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008714:	f023 0301 	bic.w	r3, r3, #1
 8008718:	667b      	str	r3, [r7, #100]	@ 0x64
 800871a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3308      	adds	r3, #8
 8008720:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008722:	647a      	str	r2, [r7, #68]	@ 0x44
 8008724:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008726:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008728:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800872a:	e841 2300 	strex	r3, r2, [r1]
 800872e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1e5      	bne.n	8008702 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3308      	adds	r3, #8
 800873c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	623b      	str	r3, [r7, #32]
   return(result);
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800874c:	663b      	str	r3, [r7, #96]	@ 0x60
 800874e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3308      	adds	r3, #8
 8008754:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008756:	633a      	str	r2, [r7, #48]	@ 0x30
 8008758:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800875c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800875e:	e841 2300 	strex	r3, r2, [r1]
 8008762:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1e5      	bne.n	8008736 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800876a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800876c:	2220      	movs	r2, #32
 800876e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008776:	2b01      	cmp	r3, #1
 8008778:	d118      	bne.n	80087ac <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800877a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	60fb      	str	r3, [r7, #12]
   return(result);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0310 	bic.w	r3, r3, #16
 800878e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008790:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	461a      	mov	r2, r3
 8008796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008798:	61fb      	str	r3, [r7, #28]
 800879a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	69b9      	ldr	r1, [r7, #24]
 800879e:	69fa      	ldr	r2, [r7, #28]
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	617b      	str	r3, [r7, #20]
   return(result);
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e6      	bne.n	800877a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087ae:	2200      	movs	r2, #0
 80087b0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d107      	bne.n	80087ca <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80087c0:	4619      	mov	r1, r3
 80087c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80087c4:	f7ff fa58 	bl	8007c78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087c8:	e002      	b.n	80087d0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80087ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80087cc:	f7f8 fc28 	bl	8001020 <HAL_UART_RxCpltCallback>
}
 80087d0:	bf00      	nop
 80087d2:	3770      	adds	r7, #112	@ 0x70
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2201      	movs	r2, #1
 80087ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d109      	bne.n	8008808 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80087fa:	085b      	lsrs	r3, r3, #1
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	4619      	mov	r1, r3
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f7ff fa39 	bl	8007c78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008806:	e002      	b.n	800880e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f7ff fa21 	bl	8007c50 <HAL_UART_RxHalfCpltCallback>
}
 800880e:	bf00      	nop
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b086      	sub	sp, #24
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008822:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008828:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008830:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800883c:	2b80      	cmp	r3, #128	@ 0x80
 800883e:	d109      	bne.n	8008854 <UART_DMAError+0x3e>
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	2b21      	cmp	r3, #33	@ 0x21
 8008844:	d106      	bne.n	8008854 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2200      	movs	r2, #0
 800884a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800884e:	6978      	ldr	r0, [r7, #20]
 8008850:	f7ff fea2 	bl	8008598 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800885e:	2b40      	cmp	r3, #64	@ 0x40
 8008860:	d109      	bne.n	8008876 <UART_DMAError+0x60>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b22      	cmp	r3, #34	@ 0x22
 8008866:	d106      	bne.n	8008876 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	2200      	movs	r2, #0
 800886c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008870:	6978      	ldr	r0, [r7, #20]
 8008872:	f7ff feb7 	bl	80085e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800887c:	f043 0210 	orr.w	r2, r3, #16
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008886:	6978      	ldr	r0, [r7, #20]
 8008888:	f7ff f9ec 	bl	8007c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800888c:	bf00      	nop
 800888e:	3718      	adds	r7, #24
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff f9d6 	bl	8007c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088b8:	bf00      	nop
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088dc:	61fb      	str	r3, [r7, #28]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	61bb      	str	r3, [r7, #24]
 80088e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	6979      	ldr	r1, [r7, #20]
 80088ec:	69ba      	ldr	r2, [r7, #24]
 80088ee:	e841 2300 	strex	r3, r2, [r1]
 80088f2:	613b      	str	r3, [r7, #16]
   return(result);
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1e6      	bne.n	80088c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2220      	movs	r2, #32
 80088fe:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff f998 	bl	8007c3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800890c:	bf00      	nop
 800890e:	3720      	adds	r7, #32
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <__cvt>:
 8008928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800892c:	ec57 6b10 	vmov	r6, r7, d0
 8008930:	2f00      	cmp	r7, #0
 8008932:	460c      	mov	r4, r1
 8008934:	4619      	mov	r1, r3
 8008936:	463b      	mov	r3, r7
 8008938:	bfbb      	ittet	lt
 800893a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800893e:	461f      	movlt	r7, r3
 8008940:	2300      	movge	r3, #0
 8008942:	232d      	movlt	r3, #45	@ 0x2d
 8008944:	700b      	strb	r3, [r1, #0]
 8008946:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008948:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800894c:	4691      	mov	r9, r2
 800894e:	f023 0820 	bic.w	r8, r3, #32
 8008952:	bfbc      	itt	lt
 8008954:	4632      	movlt	r2, r6
 8008956:	4616      	movlt	r6, r2
 8008958:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800895c:	d005      	beq.n	800896a <__cvt+0x42>
 800895e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008962:	d100      	bne.n	8008966 <__cvt+0x3e>
 8008964:	3401      	adds	r4, #1
 8008966:	2102      	movs	r1, #2
 8008968:	e000      	b.n	800896c <__cvt+0x44>
 800896a:	2103      	movs	r1, #3
 800896c:	ab03      	add	r3, sp, #12
 800896e:	9301      	str	r3, [sp, #4]
 8008970:	ab02      	add	r3, sp, #8
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	ec47 6b10 	vmov	d0, r6, r7
 8008978:	4653      	mov	r3, sl
 800897a:	4622      	mov	r2, r4
 800897c:	f001 f988 	bl	8009c90 <_dtoa_r>
 8008980:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008984:	4605      	mov	r5, r0
 8008986:	d119      	bne.n	80089bc <__cvt+0x94>
 8008988:	f019 0f01 	tst.w	r9, #1
 800898c:	d00e      	beq.n	80089ac <__cvt+0x84>
 800898e:	eb00 0904 	add.w	r9, r0, r4
 8008992:	2200      	movs	r2, #0
 8008994:	2300      	movs	r3, #0
 8008996:	4630      	mov	r0, r6
 8008998:	4639      	mov	r1, r7
 800899a:	f7f8 f895 	bl	8000ac8 <__aeabi_dcmpeq>
 800899e:	b108      	cbz	r0, 80089a4 <__cvt+0x7c>
 80089a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80089a4:	2230      	movs	r2, #48	@ 0x30
 80089a6:	9b03      	ldr	r3, [sp, #12]
 80089a8:	454b      	cmp	r3, r9
 80089aa:	d31e      	bcc.n	80089ea <__cvt+0xc2>
 80089ac:	9b03      	ldr	r3, [sp, #12]
 80089ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089b0:	1b5b      	subs	r3, r3, r5
 80089b2:	4628      	mov	r0, r5
 80089b4:	6013      	str	r3, [r2, #0]
 80089b6:	b004      	add	sp, #16
 80089b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80089c0:	eb00 0904 	add.w	r9, r0, r4
 80089c4:	d1e5      	bne.n	8008992 <__cvt+0x6a>
 80089c6:	7803      	ldrb	r3, [r0, #0]
 80089c8:	2b30      	cmp	r3, #48	@ 0x30
 80089ca:	d10a      	bne.n	80089e2 <__cvt+0xba>
 80089cc:	2200      	movs	r2, #0
 80089ce:	2300      	movs	r3, #0
 80089d0:	4630      	mov	r0, r6
 80089d2:	4639      	mov	r1, r7
 80089d4:	f7f8 f878 	bl	8000ac8 <__aeabi_dcmpeq>
 80089d8:	b918      	cbnz	r0, 80089e2 <__cvt+0xba>
 80089da:	f1c4 0401 	rsb	r4, r4, #1
 80089de:	f8ca 4000 	str.w	r4, [sl]
 80089e2:	f8da 3000 	ldr.w	r3, [sl]
 80089e6:	4499      	add	r9, r3
 80089e8:	e7d3      	b.n	8008992 <__cvt+0x6a>
 80089ea:	1c59      	adds	r1, r3, #1
 80089ec:	9103      	str	r1, [sp, #12]
 80089ee:	701a      	strb	r2, [r3, #0]
 80089f0:	e7d9      	b.n	80089a6 <__cvt+0x7e>

080089f2 <__exponent>:
 80089f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089f4:	2900      	cmp	r1, #0
 80089f6:	bfba      	itte	lt
 80089f8:	4249      	neglt	r1, r1
 80089fa:	232d      	movlt	r3, #45	@ 0x2d
 80089fc:	232b      	movge	r3, #43	@ 0x2b
 80089fe:	2909      	cmp	r1, #9
 8008a00:	7002      	strb	r2, [r0, #0]
 8008a02:	7043      	strb	r3, [r0, #1]
 8008a04:	dd29      	ble.n	8008a5a <__exponent+0x68>
 8008a06:	f10d 0307 	add.w	r3, sp, #7
 8008a0a:	461d      	mov	r5, r3
 8008a0c:	270a      	movs	r7, #10
 8008a0e:	461a      	mov	r2, r3
 8008a10:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a14:	fb07 1416 	mls	r4, r7, r6, r1
 8008a18:	3430      	adds	r4, #48	@ 0x30
 8008a1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a1e:	460c      	mov	r4, r1
 8008a20:	2c63      	cmp	r4, #99	@ 0x63
 8008a22:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a26:	4631      	mov	r1, r6
 8008a28:	dcf1      	bgt.n	8008a0e <__exponent+0x1c>
 8008a2a:	3130      	adds	r1, #48	@ 0x30
 8008a2c:	1e94      	subs	r4, r2, #2
 8008a2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a32:	1c41      	adds	r1, r0, #1
 8008a34:	4623      	mov	r3, r4
 8008a36:	42ab      	cmp	r3, r5
 8008a38:	d30a      	bcc.n	8008a50 <__exponent+0x5e>
 8008a3a:	f10d 0309 	add.w	r3, sp, #9
 8008a3e:	1a9b      	subs	r3, r3, r2
 8008a40:	42ac      	cmp	r4, r5
 8008a42:	bf88      	it	hi
 8008a44:	2300      	movhi	r3, #0
 8008a46:	3302      	adds	r3, #2
 8008a48:	4403      	add	r3, r0
 8008a4a:	1a18      	subs	r0, r3, r0
 8008a4c:	b003      	add	sp, #12
 8008a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008a54:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008a58:	e7ed      	b.n	8008a36 <__exponent+0x44>
 8008a5a:	2330      	movs	r3, #48	@ 0x30
 8008a5c:	3130      	adds	r1, #48	@ 0x30
 8008a5e:	7083      	strb	r3, [r0, #2]
 8008a60:	70c1      	strb	r1, [r0, #3]
 8008a62:	1d03      	adds	r3, r0, #4
 8008a64:	e7f1      	b.n	8008a4a <__exponent+0x58>
	...

08008a68 <_printf_float>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	b08d      	sub	sp, #52	@ 0x34
 8008a6e:	460c      	mov	r4, r1
 8008a70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008a74:	4616      	mov	r6, r2
 8008a76:	461f      	mov	r7, r3
 8008a78:	4605      	mov	r5, r0
 8008a7a:	f000 fff5 	bl	8009a68 <_localeconv_r>
 8008a7e:	6803      	ldr	r3, [r0, #0]
 8008a80:	9304      	str	r3, [sp, #16]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7f7 fbf4 	bl	8000270 <strlen>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8008a90:	9005      	str	r0, [sp, #20]
 8008a92:	3307      	adds	r3, #7
 8008a94:	f023 0307 	bic.w	r3, r3, #7
 8008a98:	f103 0208 	add.w	r2, r3, #8
 8008a9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008aa0:	f8d4 b000 	ldr.w	fp, [r4]
 8008aa4:	f8c8 2000 	str.w	r2, [r8]
 8008aa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008aac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008ab0:	9307      	str	r3, [sp, #28]
 8008ab2:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ab6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008abe:	4b9c      	ldr	r3, [pc, #624]	@ (8008d30 <_printf_float+0x2c8>)
 8008ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac4:	f7f8 f832 	bl	8000b2c <__aeabi_dcmpun>
 8008ac8:	bb70      	cbnz	r0, 8008b28 <_printf_float+0xc0>
 8008aca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ace:	4b98      	ldr	r3, [pc, #608]	@ (8008d30 <_printf_float+0x2c8>)
 8008ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad4:	f7f8 f80c 	bl	8000af0 <__aeabi_dcmple>
 8008ad8:	bb30      	cbnz	r0, 8008b28 <_printf_float+0xc0>
 8008ada:	2200      	movs	r2, #0
 8008adc:	2300      	movs	r3, #0
 8008ade:	4640      	mov	r0, r8
 8008ae0:	4649      	mov	r1, r9
 8008ae2:	f7f7 fffb 	bl	8000adc <__aeabi_dcmplt>
 8008ae6:	b110      	cbz	r0, 8008aee <_printf_float+0x86>
 8008ae8:	232d      	movs	r3, #45	@ 0x2d
 8008aea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008aee:	4a91      	ldr	r2, [pc, #580]	@ (8008d34 <_printf_float+0x2cc>)
 8008af0:	4b91      	ldr	r3, [pc, #580]	@ (8008d38 <_printf_float+0x2d0>)
 8008af2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008af6:	bf8c      	ite	hi
 8008af8:	4690      	movhi	r8, r2
 8008afa:	4698      	movls	r8, r3
 8008afc:	2303      	movs	r3, #3
 8008afe:	6123      	str	r3, [r4, #16]
 8008b00:	f02b 0304 	bic.w	r3, fp, #4
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	f04f 0900 	mov.w	r9, #0
 8008b0a:	9700      	str	r7, [sp, #0]
 8008b0c:	4633      	mov	r3, r6
 8008b0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b10:	4621      	mov	r1, r4
 8008b12:	4628      	mov	r0, r5
 8008b14:	f000 f9d2 	bl	8008ebc <_printf_common>
 8008b18:	3001      	adds	r0, #1
 8008b1a:	f040 808d 	bne.w	8008c38 <_printf_float+0x1d0>
 8008b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b22:	b00d      	add	sp, #52	@ 0x34
 8008b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b28:	4642      	mov	r2, r8
 8008b2a:	464b      	mov	r3, r9
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	4649      	mov	r1, r9
 8008b30:	f7f7 fffc 	bl	8000b2c <__aeabi_dcmpun>
 8008b34:	b140      	cbz	r0, 8008b48 <_printf_float+0xe0>
 8008b36:	464b      	mov	r3, r9
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bfbc      	itt	lt
 8008b3c:	232d      	movlt	r3, #45	@ 0x2d
 8008b3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008b42:	4a7e      	ldr	r2, [pc, #504]	@ (8008d3c <_printf_float+0x2d4>)
 8008b44:	4b7e      	ldr	r3, [pc, #504]	@ (8008d40 <_printf_float+0x2d8>)
 8008b46:	e7d4      	b.n	8008af2 <_printf_float+0x8a>
 8008b48:	6863      	ldr	r3, [r4, #4]
 8008b4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008b4e:	9206      	str	r2, [sp, #24]
 8008b50:	1c5a      	adds	r2, r3, #1
 8008b52:	d13b      	bne.n	8008bcc <_printf_float+0x164>
 8008b54:	2306      	movs	r3, #6
 8008b56:	6063      	str	r3, [r4, #4]
 8008b58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	6022      	str	r2, [r4, #0]
 8008b60:	9303      	str	r3, [sp, #12]
 8008b62:	ab0a      	add	r3, sp, #40	@ 0x28
 8008b64:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008b68:	ab09      	add	r3, sp, #36	@ 0x24
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	6861      	ldr	r1, [r4, #4]
 8008b6e:	ec49 8b10 	vmov	d0, r8, r9
 8008b72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008b76:	4628      	mov	r0, r5
 8008b78:	f7ff fed6 	bl	8008928 <__cvt>
 8008b7c:	9b06      	ldr	r3, [sp, #24]
 8008b7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b80:	2b47      	cmp	r3, #71	@ 0x47
 8008b82:	4680      	mov	r8, r0
 8008b84:	d129      	bne.n	8008bda <_printf_float+0x172>
 8008b86:	1cc8      	adds	r0, r1, #3
 8008b88:	db02      	blt.n	8008b90 <_printf_float+0x128>
 8008b8a:	6863      	ldr	r3, [r4, #4]
 8008b8c:	4299      	cmp	r1, r3
 8008b8e:	dd41      	ble.n	8008c14 <_printf_float+0x1ac>
 8008b90:	f1aa 0a02 	sub.w	sl, sl, #2
 8008b94:	fa5f fa8a 	uxtb.w	sl, sl
 8008b98:	3901      	subs	r1, #1
 8008b9a:	4652      	mov	r2, sl
 8008b9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ba0:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ba2:	f7ff ff26 	bl	80089f2 <__exponent>
 8008ba6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ba8:	1813      	adds	r3, r2, r0
 8008baa:	2a01      	cmp	r2, #1
 8008bac:	4681      	mov	r9, r0
 8008bae:	6123      	str	r3, [r4, #16]
 8008bb0:	dc02      	bgt.n	8008bb8 <_printf_float+0x150>
 8008bb2:	6822      	ldr	r2, [r4, #0]
 8008bb4:	07d2      	lsls	r2, r2, #31
 8008bb6:	d501      	bpl.n	8008bbc <_printf_float+0x154>
 8008bb8:	3301      	adds	r3, #1
 8008bba:	6123      	str	r3, [r4, #16]
 8008bbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d0a2      	beq.n	8008b0a <_printf_float+0xa2>
 8008bc4:	232d      	movs	r3, #45	@ 0x2d
 8008bc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bca:	e79e      	b.n	8008b0a <_printf_float+0xa2>
 8008bcc:	9a06      	ldr	r2, [sp, #24]
 8008bce:	2a47      	cmp	r2, #71	@ 0x47
 8008bd0:	d1c2      	bne.n	8008b58 <_printf_float+0xf0>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1c0      	bne.n	8008b58 <_printf_float+0xf0>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e7bd      	b.n	8008b56 <_printf_float+0xee>
 8008bda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008bde:	d9db      	bls.n	8008b98 <_printf_float+0x130>
 8008be0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008be4:	d118      	bne.n	8008c18 <_printf_float+0x1b0>
 8008be6:	2900      	cmp	r1, #0
 8008be8:	6863      	ldr	r3, [r4, #4]
 8008bea:	dd0b      	ble.n	8008c04 <_printf_float+0x19c>
 8008bec:	6121      	str	r1, [r4, #16]
 8008bee:	b913      	cbnz	r3, 8008bf6 <_printf_float+0x18e>
 8008bf0:	6822      	ldr	r2, [r4, #0]
 8008bf2:	07d0      	lsls	r0, r2, #31
 8008bf4:	d502      	bpl.n	8008bfc <_printf_float+0x194>
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	440b      	add	r3, r1
 8008bfa:	6123      	str	r3, [r4, #16]
 8008bfc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008bfe:	f04f 0900 	mov.w	r9, #0
 8008c02:	e7db      	b.n	8008bbc <_printf_float+0x154>
 8008c04:	b913      	cbnz	r3, 8008c0c <_printf_float+0x1a4>
 8008c06:	6822      	ldr	r2, [r4, #0]
 8008c08:	07d2      	lsls	r2, r2, #31
 8008c0a:	d501      	bpl.n	8008c10 <_printf_float+0x1a8>
 8008c0c:	3302      	adds	r3, #2
 8008c0e:	e7f4      	b.n	8008bfa <_printf_float+0x192>
 8008c10:	2301      	movs	r3, #1
 8008c12:	e7f2      	b.n	8008bfa <_printf_float+0x192>
 8008c14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008c18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c1a:	4299      	cmp	r1, r3
 8008c1c:	db05      	blt.n	8008c2a <_printf_float+0x1c2>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	6121      	str	r1, [r4, #16]
 8008c22:	07d8      	lsls	r0, r3, #31
 8008c24:	d5ea      	bpl.n	8008bfc <_printf_float+0x194>
 8008c26:	1c4b      	adds	r3, r1, #1
 8008c28:	e7e7      	b.n	8008bfa <_printf_float+0x192>
 8008c2a:	2900      	cmp	r1, #0
 8008c2c:	bfd4      	ite	le
 8008c2e:	f1c1 0202 	rsble	r2, r1, #2
 8008c32:	2201      	movgt	r2, #1
 8008c34:	4413      	add	r3, r2
 8008c36:	e7e0      	b.n	8008bfa <_printf_float+0x192>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	055a      	lsls	r2, r3, #21
 8008c3c:	d407      	bmi.n	8008c4e <_printf_float+0x1e6>
 8008c3e:	6923      	ldr	r3, [r4, #16]
 8008c40:	4642      	mov	r2, r8
 8008c42:	4631      	mov	r1, r6
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b8      	blx	r7
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d12b      	bne.n	8008ca4 <_printf_float+0x23c>
 8008c4c:	e767      	b.n	8008b1e <_printf_float+0xb6>
 8008c4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c52:	f240 80dd 	bls.w	8008e10 <_printf_float+0x3a8>
 8008c56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f7f7 ff33 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d033      	beq.n	8008cce <_printf_float+0x266>
 8008c66:	4a37      	ldr	r2, [pc, #220]	@ (8008d44 <_printf_float+0x2dc>)
 8008c68:	2301      	movs	r3, #1
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	47b8      	blx	r7
 8008c70:	3001      	adds	r0, #1
 8008c72:	f43f af54 	beq.w	8008b1e <_printf_float+0xb6>
 8008c76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008c7a:	4543      	cmp	r3, r8
 8008c7c:	db02      	blt.n	8008c84 <_printf_float+0x21c>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	07d8      	lsls	r0, r3, #31
 8008c82:	d50f      	bpl.n	8008ca4 <_printf_float+0x23c>
 8008c84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c88:	4631      	mov	r1, r6
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	47b8      	blx	r7
 8008c8e:	3001      	adds	r0, #1
 8008c90:	f43f af45 	beq.w	8008b1e <_printf_float+0xb6>
 8008c94:	f04f 0900 	mov.w	r9, #0
 8008c98:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c9c:	f104 0a1a 	add.w	sl, r4, #26
 8008ca0:	45c8      	cmp	r8, r9
 8008ca2:	dc09      	bgt.n	8008cb8 <_printf_float+0x250>
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	079b      	lsls	r3, r3, #30
 8008ca8:	f100 8103 	bmi.w	8008eb2 <_printf_float+0x44a>
 8008cac:	68e0      	ldr	r0, [r4, #12]
 8008cae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cb0:	4298      	cmp	r0, r3
 8008cb2:	bfb8      	it	lt
 8008cb4:	4618      	movlt	r0, r3
 8008cb6:	e734      	b.n	8008b22 <_printf_float+0xba>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	4652      	mov	r2, sl
 8008cbc:	4631      	mov	r1, r6
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	47b8      	blx	r7
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	f43f af2b 	beq.w	8008b1e <_printf_float+0xb6>
 8008cc8:	f109 0901 	add.w	r9, r9, #1
 8008ccc:	e7e8      	b.n	8008ca0 <_printf_float+0x238>
 8008cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	dc39      	bgt.n	8008d48 <_printf_float+0x2e0>
 8008cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8008d44 <_printf_float+0x2dc>)
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4628      	mov	r0, r5
 8008cdc:	47b8      	blx	r7
 8008cde:	3001      	adds	r0, #1
 8008ce0:	f43f af1d 	beq.w	8008b1e <_printf_float+0xb6>
 8008ce4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008ce8:	ea59 0303 	orrs.w	r3, r9, r3
 8008cec:	d102      	bne.n	8008cf4 <_printf_float+0x28c>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	07d9      	lsls	r1, r3, #31
 8008cf2:	d5d7      	bpl.n	8008ca4 <_printf_float+0x23c>
 8008cf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cf8:	4631      	mov	r1, r6
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	47b8      	blx	r7
 8008cfe:	3001      	adds	r0, #1
 8008d00:	f43f af0d 	beq.w	8008b1e <_printf_float+0xb6>
 8008d04:	f04f 0a00 	mov.w	sl, #0
 8008d08:	f104 0b1a 	add.w	fp, r4, #26
 8008d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d0e:	425b      	negs	r3, r3
 8008d10:	4553      	cmp	r3, sl
 8008d12:	dc01      	bgt.n	8008d18 <_printf_float+0x2b0>
 8008d14:	464b      	mov	r3, r9
 8008d16:	e793      	b.n	8008c40 <_printf_float+0x1d8>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	465a      	mov	r2, fp
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4628      	mov	r0, r5
 8008d20:	47b8      	blx	r7
 8008d22:	3001      	adds	r0, #1
 8008d24:	f43f aefb 	beq.w	8008b1e <_printf_float+0xb6>
 8008d28:	f10a 0a01 	add.w	sl, sl, #1
 8008d2c:	e7ee      	b.n	8008d0c <_printf_float+0x2a4>
 8008d2e:	bf00      	nop
 8008d30:	7fefffff 	.word	0x7fefffff
 8008d34:	0800e454 	.word	0x0800e454
 8008d38:	0800e450 	.word	0x0800e450
 8008d3c:	0800e45c 	.word	0x0800e45c
 8008d40:	0800e458 	.word	0x0800e458
 8008d44:	0800e460 	.word	0x0800e460
 8008d48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d4e:	4553      	cmp	r3, sl
 8008d50:	bfa8      	it	ge
 8008d52:	4653      	movge	r3, sl
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	4699      	mov	r9, r3
 8008d58:	dc36      	bgt.n	8008dc8 <_printf_float+0x360>
 8008d5a:	f04f 0b00 	mov.w	fp, #0
 8008d5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d62:	f104 021a 	add.w	r2, r4, #26
 8008d66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d68:	9306      	str	r3, [sp, #24]
 8008d6a:	eba3 0309 	sub.w	r3, r3, r9
 8008d6e:	455b      	cmp	r3, fp
 8008d70:	dc31      	bgt.n	8008dd6 <_printf_float+0x36e>
 8008d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d74:	459a      	cmp	sl, r3
 8008d76:	dc3a      	bgt.n	8008dee <_printf_float+0x386>
 8008d78:	6823      	ldr	r3, [r4, #0]
 8008d7a:	07da      	lsls	r2, r3, #31
 8008d7c:	d437      	bmi.n	8008dee <_printf_float+0x386>
 8008d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d80:	ebaa 0903 	sub.w	r9, sl, r3
 8008d84:	9b06      	ldr	r3, [sp, #24]
 8008d86:	ebaa 0303 	sub.w	r3, sl, r3
 8008d8a:	4599      	cmp	r9, r3
 8008d8c:	bfa8      	it	ge
 8008d8e:	4699      	movge	r9, r3
 8008d90:	f1b9 0f00 	cmp.w	r9, #0
 8008d94:	dc33      	bgt.n	8008dfe <_printf_float+0x396>
 8008d96:	f04f 0800 	mov.w	r8, #0
 8008d9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d9e:	f104 0b1a 	add.w	fp, r4, #26
 8008da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008da4:	ebaa 0303 	sub.w	r3, sl, r3
 8008da8:	eba3 0309 	sub.w	r3, r3, r9
 8008dac:	4543      	cmp	r3, r8
 8008dae:	f77f af79 	ble.w	8008ca4 <_printf_float+0x23c>
 8008db2:	2301      	movs	r3, #1
 8008db4:	465a      	mov	r2, fp
 8008db6:	4631      	mov	r1, r6
 8008db8:	4628      	mov	r0, r5
 8008dba:	47b8      	blx	r7
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	f43f aeae 	beq.w	8008b1e <_printf_float+0xb6>
 8008dc2:	f108 0801 	add.w	r8, r8, #1
 8008dc6:	e7ec      	b.n	8008da2 <_printf_float+0x33a>
 8008dc8:	4642      	mov	r2, r8
 8008dca:	4631      	mov	r1, r6
 8008dcc:	4628      	mov	r0, r5
 8008dce:	47b8      	blx	r7
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d1c2      	bne.n	8008d5a <_printf_float+0x2f2>
 8008dd4:	e6a3      	b.n	8008b1e <_printf_float+0xb6>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4631      	mov	r1, r6
 8008dda:	4628      	mov	r0, r5
 8008ddc:	9206      	str	r2, [sp, #24]
 8008dde:	47b8      	blx	r7
 8008de0:	3001      	adds	r0, #1
 8008de2:	f43f ae9c 	beq.w	8008b1e <_printf_float+0xb6>
 8008de6:	9a06      	ldr	r2, [sp, #24]
 8008de8:	f10b 0b01 	add.w	fp, fp, #1
 8008dec:	e7bb      	b.n	8008d66 <_printf_float+0x2fe>
 8008dee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008df2:	4631      	mov	r1, r6
 8008df4:	4628      	mov	r0, r5
 8008df6:	47b8      	blx	r7
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d1c0      	bne.n	8008d7e <_printf_float+0x316>
 8008dfc:	e68f      	b.n	8008b1e <_printf_float+0xb6>
 8008dfe:	9a06      	ldr	r2, [sp, #24]
 8008e00:	464b      	mov	r3, r9
 8008e02:	4442      	add	r2, r8
 8008e04:	4631      	mov	r1, r6
 8008e06:	4628      	mov	r0, r5
 8008e08:	47b8      	blx	r7
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	d1c3      	bne.n	8008d96 <_printf_float+0x32e>
 8008e0e:	e686      	b.n	8008b1e <_printf_float+0xb6>
 8008e10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e14:	f1ba 0f01 	cmp.w	sl, #1
 8008e18:	dc01      	bgt.n	8008e1e <_printf_float+0x3b6>
 8008e1a:	07db      	lsls	r3, r3, #31
 8008e1c:	d536      	bpl.n	8008e8c <_printf_float+0x424>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	4642      	mov	r2, r8
 8008e22:	4631      	mov	r1, r6
 8008e24:	4628      	mov	r0, r5
 8008e26:	47b8      	blx	r7
 8008e28:	3001      	adds	r0, #1
 8008e2a:	f43f ae78 	beq.w	8008b1e <_printf_float+0xb6>
 8008e2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e32:	4631      	mov	r1, r6
 8008e34:	4628      	mov	r0, r5
 8008e36:	47b8      	blx	r7
 8008e38:	3001      	adds	r0, #1
 8008e3a:	f43f ae70 	beq.w	8008b1e <_printf_float+0xb6>
 8008e3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e42:	2200      	movs	r2, #0
 8008e44:	2300      	movs	r3, #0
 8008e46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e4a:	f7f7 fe3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e4e:	b9c0      	cbnz	r0, 8008e82 <_printf_float+0x41a>
 8008e50:	4653      	mov	r3, sl
 8008e52:	f108 0201 	add.w	r2, r8, #1
 8008e56:	4631      	mov	r1, r6
 8008e58:	4628      	mov	r0, r5
 8008e5a:	47b8      	blx	r7
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d10c      	bne.n	8008e7a <_printf_float+0x412>
 8008e60:	e65d      	b.n	8008b1e <_printf_float+0xb6>
 8008e62:	2301      	movs	r3, #1
 8008e64:	465a      	mov	r2, fp
 8008e66:	4631      	mov	r1, r6
 8008e68:	4628      	mov	r0, r5
 8008e6a:	47b8      	blx	r7
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	f43f ae56 	beq.w	8008b1e <_printf_float+0xb6>
 8008e72:	f108 0801 	add.w	r8, r8, #1
 8008e76:	45d0      	cmp	r8, sl
 8008e78:	dbf3      	blt.n	8008e62 <_printf_float+0x3fa>
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008e80:	e6df      	b.n	8008c42 <_printf_float+0x1da>
 8008e82:	f04f 0800 	mov.w	r8, #0
 8008e86:	f104 0b1a 	add.w	fp, r4, #26
 8008e8a:	e7f4      	b.n	8008e76 <_printf_float+0x40e>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	4642      	mov	r2, r8
 8008e90:	e7e1      	b.n	8008e56 <_printf_float+0x3ee>
 8008e92:	2301      	movs	r3, #1
 8008e94:	464a      	mov	r2, r9
 8008e96:	4631      	mov	r1, r6
 8008e98:	4628      	mov	r0, r5
 8008e9a:	47b8      	blx	r7
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	f43f ae3e 	beq.w	8008b1e <_printf_float+0xb6>
 8008ea2:	f108 0801 	add.w	r8, r8, #1
 8008ea6:	68e3      	ldr	r3, [r4, #12]
 8008ea8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008eaa:	1a5b      	subs	r3, r3, r1
 8008eac:	4543      	cmp	r3, r8
 8008eae:	dcf0      	bgt.n	8008e92 <_printf_float+0x42a>
 8008eb0:	e6fc      	b.n	8008cac <_printf_float+0x244>
 8008eb2:	f04f 0800 	mov.w	r8, #0
 8008eb6:	f104 0919 	add.w	r9, r4, #25
 8008eba:	e7f4      	b.n	8008ea6 <_printf_float+0x43e>

08008ebc <_printf_common>:
 8008ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec0:	4616      	mov	r6, r2
 8008ec2:	4698      	mov	r8, r3
 8008ec4:	688a      	ldr	r2, [r1, #8]
 8008ec6:	690b      	ldr	r3, [r1, #16]
 8008ec8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	bfb8      	it	lt
 8008ed0:	4613      	movlt	r3, r2
 8008ed2:	6033      	str	r3, [r6, #0]
 8008ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ed8:	4607      	mov	r7, r0
 8008eda:	460c      	mov	r4, r1
 8008edc:	b10a      	cbz	r2, 8008ee2 <_printf_common+0x26>
 8008ede:	3301      	adds	r3, #1
 8008ee0:	6033      	str	r3, [r6, #0]
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	0699      	lsls	r1, r3, #26
 8008ee6:	bf42      	ittt	mi
 8008ee8:	6833      	ldrmi	r3, [r6, #0]
 8008eea:	3302      	addmi	r3, #2
 8008eec:	6033      	strmi	r3, [r6, #0]
 8008eee:	6825      	ldr	r5, [r4, #0]
 8008ef0:	f015 0506 	ands.w	r5, r5, #6
 8008ef4:	d106      	bne.n	8008f04 <_printf_common+0x48>
 8008ef6:	f104 0a19 	add.w	sl, r4, #25
 8008efa:	68e3      	ldr	r3, [r4, #12]
 8008efc:	6832      	ldr	r2, [r6, #0]
 8008efe:	1a9b      	subs	r3, r3, r2
 8008f00:	42ab      	cmp	r3, r5
 8008f02:	dc26      	bgt.n	8008f52 <_printf_common+0x96>
 8008f04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f08:	6822      	ldr	r2, [r4, #0]
 8008f0a:	3b00      	subs	r3, #0
 8008f0c:	bf18      	it	ne
 8008f0e:	2301      	movne	r3, #1
 8008f10:	0692      	lsls	r2, r2, #26
 8008f12:	d42b      	bmi.n	8008f6c <_printf_common+0xb0>
 8008f14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f18:	4641      	mov	r1, r8
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	47c8      	blx	r9
 8008f1e:	3001      	adds	r0, #1
 8008f20:	d01e      	beq.n	8008f60 <_printf_common+0xa4>
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	6922      	ldr	r2, [r4, #16]
 8008f26:	f003 0306 	and.w	r3, r3, #6
 8008f2a:	2b04      	cmp	r3, #4
 8008f2c:	bf02      	ittt	eq
 8008f2e:	68e5      	ldreq	r5, [r4, #12]
 8008f30:	6833      	ldreq	r3, [r6, #0]
 8008f32:	1aed      	subeq	r5, r5, r3
 8008f34:	68a3      	ldr	r3, [r4, #8]
 8008f36:	bf0c      	ite	eq
 8008f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f3c:	2500      	movne	r5, #0
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	bfc4      	itt	gt
 8008f42:	1a9b      	subgt	r3, r3, r2
 8008f44:	18ed      	addgt	r5, r5, r3
 8008f46:	2600      	movs	r6, #0
 8008f48:	341a      	adds	r4, #26
 8008f4a:	42b5      	cmp	r5, r6
 8008f4c:	d11a      	bne.n	8008f84 <_printf_common+0xc8>
 8008f4e:	2000      	movs	r0, #0
 8008f50:	e008      	b.n	8008f64 <_printf_common+0xa8>
 8008f52:	2301      	movs	r3, #1
 8008f54:	4652      	mov	r2, sl
 8008f56:	4641      	mov	r1, r8
 8008f58:	4638      	mov	r0, r7
 8008f5a:	47c8      	blx	r9
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	d103      	bne.n	8008f68 <_printf_common+0xac>
 8008f60:	f04f 30ff 	mov.w	r0, #4294967295
 8008f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f68:	3501      	adds	r5, #1
 8008f6a:	e7c6      	b.n	8008efa <_printf_common+0x3e>
 8008f6c:	18e1      	adds	r1, r4, r3
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	2030      	movs	r0, #48	@ 0x30
 8008f72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f76:	4422      	add	r2, r4
 8008f78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f80:	3302      	adds	r3, #2
 8008f82:	e7c7      	b.n	8008f14 <_printf_common+0x58>
 8008f84:	2301      	movs	r3, #1
 8008f86:	4622      	mov	r2, r4
 8008f88:	4641      	mov	r1, r8
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	47c8      	blx	r9
 8008f8e:	3001      	adds	r0, #1
 8008f90:	d0e6      	beq.n	8008f60 <_printf_common+0xa4>
 8008f92:	3601      	adds	r6, #1
 8008f94:	e7d9      	b.n	8008f4a <_printf_common+0x8e>
	...

08008f98 <_printf_i>:
 8008f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f9c:	7e0f      	ldrb	r7, [r1, #24]
 8008f9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008fa0:	2f78      	cmp	r7, #120	@ 0x78
 8008fa2:	4691      	mov	r9, r2
 8008fa4:	4680      	mov	r8, r0
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	469a      	mov	sl, r3
 8008faa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008fae:	d807      	bhi.n	8008fc0 <_printf_i+0x28>
 8008fb0:	2f62      	cmp	r7, #98	@ 0x62
 8008fb2:	d80a      	bhi.n	8008fca <_printf_i+0x32>
 8008fb4:	2f00      	cmp	r7, #0
 8008fb6:	f000 80d1 	beq.w	800915c <_printf_i+0x1c4>
 8008fba:	2f58      	cmp	r7, #88	@ 0x58
 8008fbc:	f000 80b8 	beq.w	8009130 <_printf_i+0x198>
 8008fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fc8:	e03a      	b.n	8009040 <_printf_i+0xa8>
 8008fca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fce:	2b15      	cmp	r3, #21
 8008fd0:	d8f6      	bhi.n	8008fc0 <_printf_i+0x28>
 8008fd2:	a101      	add	r1, pc, #4	@ (adr r1, 8008fd8 <_printf_i+0x40>)
 8008fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fd8:	08009031 	.word	0x08009031
 8008fdc:	08009045 	.word	0x08009045
 8008fe0:	08008fc1 	.word	0x08008fc1
 8008fe4:	08008fc1 	.word	0x08008fc1
 8008fe8:	08008fc1 	.word	0x08008fc1
 8008fec:	08008fc1 	.word	0x08008fc1
 8008ff0:	08009045 	.word	0x08009045
 8008ff4:	08008fc1 	.word	0x08008fc1
 8008ff8:	08008fc1 	.word	0x08008fc1
 8008ffc:	08008fc1 	.word	0x08008fc1
 8009000:	08008fc1 	.word	0x08008fc1
 8009004:	08009143 	.word	0x08009143
 8009008:	0800906f 	.word	0x0800906f
 800900c:	080090fd 	.word	0x080090fd
 8009010:	08008fc1 	.word	0x08008fc1
 8009014:	08008fc1 	.word	0x08008fc1
 8009018:	08009165 	.word	0x08009165
 800901c:	08008fc1 	.word	0x08008fc1
 8009020:	0800906f 	.word	0x0800906f
 8009024:	08008fc1 	.word	0x08008fc1
 8009028:	08008fc1 	.word	0x08008fc1
 800902c:	08009105 	.word	0x08009105
 8009030:	6833      	ldr	r3, [r6, #0]
 8009032:	1d1a      	adds	r2, r3, #4
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6032      	str	r2, [r6, #0]
 8009038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800903c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009040:	2301      	movs	r3, #1
 8009042:	e09c      	b.n	800917e <_printf_i+0x1e6>
 8009044:	6833      	ldr	r3, [r6, #0]
 8009046:	6820      	ldr	r0, [r4, #0]
 8009048:	1d19      	adds	r1, r3, #4
 800904a:	6031      	str	r1, [r6, #0]
 800904c:	0606      	lsls	r6, r0, #24
 800904e:	d501      	bpl.n	8009054 <_printf_i+0xbc>
 8009050:	681d      	ldr	r5, [r3, #0]
 8009052:	e003      	b.n	800905c <_printf_i+0xc4>
 8009054:	0645      	lsls	r5, r0, #25
 8009056:	d5fb      	bpl.n	8009050 <_printf_i+0xb8>
 8009058:	f9b3 5000 	ldrsh.w	r5, [r3]
 800905c:	2d00      	cmp	r5, #0
 800905e:	da03      	bge.n	8009068 <_printf_i+0xd0>
 8009060:	232d      	movs	r3, #45	@ 0x2d
 8009062:	426d      	negs	r5, r5
 8009064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009068:	4858      	ldr	r0, [pc, #352]	@ (80091cc <_printf_i+0x234>)
 800906a:	230a      	movs	r3, #10
 800906c:	e011      	b.n	8009092 <_printf_i+0xfa>
 800906e:	6821      	ldr	r1, [r4, #0]
 8009070:	6833      	ldr	r3, [r6, #0]
 8009072:	0608      	lsls	r0, r1, #24
 8009074:	f853 5b04 	ldr.w	r5, [r3], #4
 8009078:	d402      	bmi.n	8009080 <_printf_i+0xe8>
 800907a:	0649      	lsls	r1, r1, #25
 800907c:	bf48      	it	mi
 800907e:	b2ad      	uxthmi	r5, r5
 8009080:	2f6f      	cmp	r7, #111	@ 0x6f
 8009082:	4852      	ldr	r0, [pc, #328]	@ (80091cc <_printf_i+0x234>)
 8009084:	6033      	str	r3, [r6, #0]
 8009086:	bf14      	ite	ne
 8009088:	230a      	movne	r3, #10
 800908a:	2308      	moveq	r3, #8
 800908c:	2100      	movs	r1, #0
 800908e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009092:	6866      	ldr	r6, [r4, #4]
 8009094:	60a6      	str	r6, [r4, #8]
 8009096:	2e00      	cmp	r6, #0
 8009098:	db05      	blt.n	80090a6 <_printf_i+0x10e>
 800909a:	6821      	ldr	r1, [r4, #0]
 800909c:	432e      	orrs	r6, r5
 800909e:	f021 0104 	bic.w	r1, r1, #4
 80090a2:	6021      	str	r1, [r4, #0]
 80090a4:	d04b      	beq.n	800913e <_printf_i+0x1a6>
 80090a6:	4616      	mov	r6, r2
 80090a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80090ac:	fb03 5711 	mls	r7, r3, r1, r5
 80090b0:	5dc7      	ldrb	r7, [r0, r7]
 80090b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090b6:	462f      	mov	r7, r5
 80090b8:	42bb      	cmp	r3, r7
 80090ba:	460d      	mov	r5, r1
 80090bc:	d9f4      	bls.n	80090a8 <_printf_i+0x110>
 80090be:	2b08      	cmp	r3, #8
 80090c0:	d10b      	bne.n	80090da <_printf_i+0x142>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	07df      	lsls	r7, r3, #31
 80090c6:	d508      	bpl.n	80090da <_printf_i+0x142>
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	6861      	ldr	r1, [r4, #4]
 80090cc:	4299      	cmp	r1, r3
 80090ce:	bfde      	ittt	le
 80090d0:	2330      	movle	r3, #48	@ 0x30
 80090d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090da:	1b92      	subs	r2, r2, r6
 80090dc:	6122      	str	r2, [r4, #16]
 80090de:	f8cd a000 	str.w	sl, [sp]
 80090e2:	464b      	mov	r3, r9
 80090e4:	aa03      	add	r2, sp, #12
 80090e6:	4621      	mov	r1, r4
 80090e8:	4640      	mov	r0, r8
 80090ea:	f7ff fee7 	bl	8008ebc <_printf_common>
 80090ee:	3001      	adds	r0, #1
 80090f0:	d14a      	bne.n	8009188 <_printf_i+0x1f0>
 80090f2:	f04f 30ff 	mov.w	r0, #4294967295
 80090f6:	b004      	add	sp, #16
 80090f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	f043 0320 	orr.w	r3, r3, #32
 8009102:	6023      	str	r3, [r4, #0]
 8009104:	4832      	ldr	r0, [pc, #200]	@ (80091d0 <_printf_i+0x238>)
 8009106:	2778      	movs	r7, #120	@ 0x78
 8009108:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	6831      	ldr	r1, [r6, #0]
 8009110:	061f      	lsls	r7, r3, #24
 8009112:	f851 5b04 	ldr.w	r5, [r1], #4
 8009116:	d402      	bmi.n	800911e <_printf_i+0x186>
 8009118:	065f      	lsls	r7, r3, #25
 800911a:	bf48      	it	mi
 800911c:	b2ad      	uxthmi	r5, r5
 800911e:	6031      	str	r1, [r6, #0]
 8009120:	07d9      	lsls	r1, r3, #31
 8009122:	bf44      	itt	mi
 8009124:	f043 0320 	orrmi.w	r3, r3, #32
 8009128:	6023      	strmi	r3, [r4, #0]
 800912a:	b11d      	cbz	r5, 8009134 <_printf_i+0x19c>
 800912c:	2310      	movs	r3, #16
 800912e:	e7ad      	b.n	800908c <_printf_i+0xf4>
 8009130:	4826      	ldr	r0, [pc, #152]	@ (80091cc <_printf_i+0x234>)
 8009132:	e7e9      	b.n	8009108 <_printf_i+0x170>
 8009134:	6823      	ldr	r3, [r4, #0]
 8009136:	f023 0320 	bic.w	r3, r3, #32
 800913a:	6023      	str	r3, [r4, #0]
 800913c:	e7f6      	b.n	800912c <_printf_i+0x194>
 800913e:	4616      	mov	r6, r2
 8009140:	e7bd      	b.n	80090be <_printf_i+0x126>
 8009142:	6833      	ldr	r3, [r6, #0]
 8009144:	6825      	ldr	r5, [r4, #0]
 8009146:	6961      	ldr	r1, [r4, #20]
 8009148:	1d18      	adds	r0, r3, #4
 800914a:	6030      	str	r0, [r6, #0]
 800914c:	062e      	lsls	r6, r5, #24
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	d501      	bpl.n	8009156 <_printf_i+0x1be>
 8009152:	6019      	str	r1, [r3, #0]
 8009154:	e002      	b.n	800915c <_printf_i+0x1c4>
 8009156:	0668      	lsls	r0, r5, #25
 8009158:	d5fb      	bpl.n	8009152 <_printf_i+0x1ba>
 800915a:	8019      	strh	r1, [r3, #0]
 800915c:	2300      	movs	r3, #0
 800915e:	6123      	str	r3, [r4, #16]
 8009160:	4616      	mov	r6, r2
 8009162:	e7bc      	b.n	80090de <_printf_i+0x146>
 8009164:	6833      	ldr	r3, [r6, #0]
 8009166:	1d1a      	adds	r2, r3, #4
 8009168:	6032      	str	r2, [r6, #0]
 800916a:	681e      	ldr	r6, [r3, #0]
 800916c:	6862      	ldr	r2, [r4, #4]
 800916e:	2100      	movs	r1, #0
 8009170:	4630      	mov	r0, r6
 8009172:	f7f7 f82d 	bl	80001d0 <memchr>
 8009176:	b108      	cbz	r0, 800917c <_printf_i+0x1e4>
 8009178:	1b80      	subs	r0, r0, r6
 800917a:	6060      	str	r0, [r4, #4]
 800917c:	6863      	ldr	r3, [r4, #4]
 800917e:	6123      	str	r3, [r4, #16]
 8009180:	2300      	movs	r3, #0
 8009182:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009186:	e7aa      	b.n	80090de <_printf_i+0x146>
 8009188:	6923      	ldr	r3, [r4, #16]
 800918a:	4632      	mov	r2, r6
 800918c:	4649      	mov	r1, r9
 800918e:	4640      	mov	r0, r8
 8009190:	47d0      	blx	sl
 8009192:	3001      	adds	r0, #1
 8009194:	d0ad      	beq.n	80090f2 <_printf_i+0x15a>
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	079b      	lsls	r3, r3, #30
 800919a:	d413      	bmi.n	80091c4 <_printf_i+0x22c>
 800919c:	68e0      	ldr	r0, [r4, #12]
 800919e:	9b03      	ldr	r3, [sp, #12]
 80091a0:	4298      	cmp	r0, r3
 80091a2:	bfb8      	it	lt
 80091a4:	4618      	movlt	r0, r3
 80091a6:	e7a6      	b.n	80090f6 <_printf_i+0x15e>
 80091a8:	2301      	movs	r3, #1
 80091aa:	4632      	mov	r2, r6
 80091ac:	4649      	mov	r1, r9
 80091ae:	4640      	mov	r0, r8
 80091b0:	47d0      	blx	sl
 80091b2:	3001      	adds	r0, #1
 80091b4:	d09d      	beq.n	80090f2 <_printf_i+0x15a>
 80091b6:	3501      	adds	r5, #1
 80091b8:	68e3      	ldr	r3, [r4, #12]
 80091ba:	9903      	ldr	r1, [sp, #12]
 80091bc:	1a5b      	subs	r3, r3, r1
 80091be:	42ab      	cmp	r3, r5
 80091c0:	dcf2      	bgt.n	80091a8 <_printf_i+0x210>
 80091c2:	e7eb      	b.n	800919c <_printf_i+0x204>
 80091c4:	2500      	movs	r5, #0
 80091c6:	f104 0619 	add.w	r6, r4, #25
 80091ca:	e7f5      	b.n	80091b8 <_printf_i+0x220>
 80091cc:	0800e462 	.word	0x0800e462
 80091d0:	0800e473 	.word	0x0800e473

080091d4 <_scanf_float>:
 80091d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	b087      	sub	sp, #28
 80091da:	4691      	mov	r9, r2
 80091dc:	9303      	str	r3, [sp, #12]
 80091de:	688b      	ldr	r3, [r1, #8]
 80091e0:	1e5a      	subs	r2, r3, #1
 80091e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80091e6:	bf81      	itttt	hi
 80091e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80091ec:	eb03 0b05 	addhi.w	fp, r3, r5
 80091f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80091f4:	608b      	strhi	r3, [r1, #8]
 80091f6:	680b      	ldr	r3, [r1, #0]
 80091f8:	460a      	mov	r2, r1
 80091fa:	f04f 0500 	mov.w	r5, #0
 80091fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009202:	f842 3b1c 	str.w	r3, [r2], #28
 8009206:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800920a:	4680      	mov	r8, r0
 800920c:	460c      	mov	r4, r1
 800920e:	bf98      	it	ls
 8009210:	f04f 0b00 	movls.w	fp, #0
 8009214:	9201      	str	r2, [sp, #4]
 8009216:	4616      	mov	r6, r2
 8009218:	46aa      	mov	sl, r5
 800921a:	462f      	mov	r7, r5
 800921c:	9502      	str	r5, [sp, #8]
 800921e:	68a2      	ldr	r2, [r4, #8]
 8009220:	b15a      	cbz	r2, 800923a <_scanf_float+0x66>
 8009222:	f8d9 3000 	ldr.w	r3, [r9]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b4e      	cmp	r3, #78	@ 0x4e
 800922a:	d863      	bhi.n	80092f4 <_scanf_float+0x120>
 800922c:	2b40      	cmp	r3, #64	@ 0x40
 800922e:	d83b      	bhi.n	80092a8 <_scanf_float+0xd4>
 8009230:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009234:	b2c8      	uxtb	r0, r1
 8009236:	280e      	cmp	r0, #14
 8009238:	d939      	bls.n	80092ae <_scanf_float+0xda>
 800923a:	b11f      	cbz	r7, 8009244 <_scanf_float+0x70>
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009242:	6023      	str	r3, [r4, #0]
 8009244:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009248:	f1ba 0f01 	cmp.w	sl, #1
 800924c:	f200 8114 	bhi.w	8009478 <_scanf_float+0x2a4>
 8009250:	9b01      	ldr	r3, [sp, #4]
 8009252:	429e      	cmp	r6, r3
 8009254:	f200 8105 	bhi.w	8009462 <_scanf_float+0x28e>
 8009258:	2001      	movs	r0, #1
 800925a:	b007      	add	sp, #28
 800925c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009260:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009264:	2a0d      	cmp	r2, #13
 8009266:	d8e8      	bhi.n	800923a <_scanf_float+0x66>
 8009268:	a101      	add	r1, pc, #4	@ (adr r1, 8009270 <_scanf_float+0x9c>)
 800926a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800926e:	bf00      	nop
 8009270:	080093b9 	.word	0x080093b9
 8009274:	0800923b 	.word	0x0800923b
 8009278:	0800923b 	.word	0x0800923b
 800927c:	0800923b 	.word	0x0800923b
 8009280:	08009415 	.word	0x08009415
 8009284:	080093ef 	.word	0x080093ef
 8009288:	0800923b 	.word	0x0800923b
 800928c:	0800923b 	.word	0x0800923b
 8009290:	080093c7 	.word	0x080093c7
 8009294:	0800923b 	.word	0x0800923b
 8009298:	0800923b 	.word	0x0800923b
 800929c:	0800923b 	.word	0x0800923b
 80092a0:	0800923b 	.word	0x0800923b
 80092a4:	08009383 	.word	0x08009383
 80092a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80092ac:	e7da      	b.n	8009264 <_scanf_float+0x90>
 80092ae:	290e      	cmp	r1, #14
 80092b0:	d8c3      	bhi.n	800923a <_scanf_float+0x66>
 80092b2:	a001      	add	r0, pc, #4	@ (adr r0, 80092b8 <_scanf_float+0xe4>)
 80092b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80092b8:	08009373 	.word	0x08009373
 80092bc:	0800923b 	.word	0x0800923b
 80092c0:	08009373 	.word	0x08009373
 80092c4:	08009403 	.word	0x08009403
 80092c8:	0800923b 	.word	0x0800923b
 80092cc:	08009315 	.word	0x08009315
 80092d0:	08009359 	.word	0x08009359
 80092d4:	08009359 	.word	0x08009359
 80092d8:	08009359 	.word	0x08009359
 80092dc:	08009359 	.word	0x08009359
 80092e0:	08009359 	.word	0x08009359
 80092e4:	08009359 	.word	0x08009359
 80092e8:	08009359 	.word	0x08009359
 80092ec:	08009359 	.word	0x08009359
 80092f0:	08009359 	.word	0x08009359
 80092f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80092f6:	d809      	bhi.n	800930c <_scanf_float+0x138>
 80092f8:	2b60      	cmp	r3, #96	@ 0x60
 80092fa:	d8b1      	bhi.n	8009260 <_scanf_float+0x8c>
 80092fc:	2b54      	cmp	r3, #84	@ 0x54
 80092fe:	d07b      	beq.n	80093f8 <_scanf_float+0x224>
 8009300:	2b59      	cmp	r3, #89	@ 0x59
 8009302:	d19a      	bne.n	800923a <_scanf_float+0x66>
 8009304:	2d07      	cmp	r5, #7
 8009306:	d198      	bne.n	800923a <_scanf_float+0x66>
 8009308:	2508      	movs	r5, #8
 800930a:	e02f      	b.n	800936c <_scanf_float+0x198>
 800930c:	2b74      	cmp	r3, #116	@ 0x74
 800930e:	d073      	beq.n	80093f8 <_scanf_float+0x224>
 8009310:	2b79      	cmp	r3, #121	@ 0x79
 8009312:	e7f6      	b.n	8009302 <_scanf_float+0x12e>
 8009314:	6821      	ldr	r1, [r4, #0]
 8009316:	05c8      	lsls	r0, r1, #23
 8009318:	d51e      	bpl.n	8009358 <_scanf_float+0x184>
 800931a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800931e:	6021      	str	r1, [r4, #0]
 8009320:	3701      	adds	r7, #1
 8009322:	f1bb 0f00 	cmp.w	fp, #0
 8009326:	d003      	beq.n	8009330 <_scanf_float+0x15c>
 8009328:	3201      	adds	r2, #1
 800932a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800932e:	60a2      	str	r2, [r4, #8]
 8009330:	68a3      	ldr	r3, [r4, #8]
 8009332:	3b01      	subs	r3, #1
 8009334:	60a3      	str	r3, [r4, #8]
 8009336:	6923      	ldr	r3, [r4, #16]
 8009338:	3301      	adds	r3, #1
 800933a:	6123      	str	r3, [r4, #16]
 800933c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009340:	3b01      	subs	r3, #1
 8009342:	2b00      	cmp	r3, #0
 8009344:	f8c9 3004 	str.w	r3, [r9, #4]
 8009348:	f340 8082 	ble.w	8009450 <_scanf_float+0x27c>
 800934c:	f8d9 3000 	ldr.w	r3, [r9]
 8009350:	3301      	adds	r3, #1
 8009352:	f8c9 3000 	str.w	r3, [r9]
 8009356:	e762      	b.n	800921e <_scanf_float+0x4a>
 8009358:	eb1a 0105 	adds.w	r1, sl, r5
 800935c:	f47f af6d 	bne.w	800923a <_scanf_float+0x66>
 8009360:	6822      	ldr	r2, [r4, #0]
 8009362:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009366:	6022      	str	r2, [r4, #0]
 8009368:	460d      	mov	r5, r1
 800936a:	468a      	mov	sl, r1
 800936c:	f806 3b01 	strb.w	r3, [r6], #1
 8009370:	e7de      	b.n	8009330 <_scanf_float+0x15c>
 8009372:	6822      	ldr	r2, [r4, #0]
 8009374:	0610      	lsls	r0, r2, #24
 8009376:	f57f af60 	bpl.w	800923a <_scanf_float+0x66>
 800937a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800937e:	6022      	str	r2, [r4, #0]
 8009380:	e7f4      	b.n	800936c <_scanf_float+0x198>
 8009382:	f1ba 0f00 	cmp.w	sl, #0
 8009386:	d10c      	bne.n	80093a2 <_scanf_float+0x1ce>
 8009388:	b977      	cbnz	r7, 80093a8 <_scanf_float+0x1d4>
 800938a:	6822      	ldr	r2, [r4, #0]
 800938c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009390:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009394:	d108      	bne.n	80093a8 <_scanf_float+0x1d4>
 8009396:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800939a:	6022      	str	r2, [r4, #0]
 800939c:	f04f 0a01 	mov.w	sl, #1
 80093a0:	e7e4      	b.n	800936c <_scanf_float+0x198>
 80093a2:	f1ba 0f02 	cmp.w	sl, #2
 80093a6:	d050      	beq.n	800944a <_scanf_float+0x276>
 80093a8:	2d01      	cmp	r5, #1
 80093aa:	d002      	beq.n	80093b2 <_scanf_float+0x1de>
 80093ac:	2d04      	cmp	r5, #4
 80093ae:	f47f af44 	bne.w	800923a <_scanf_float+0x66>
 80093b2:	3501      	adds	r5, #1
 80093b4:	b2ed      	uxtb	r5, r5
 80093b6:	e7d9      	b.n	800936c <_scanf_float+0x198>
 80093b8:	f1ba 0f01 	cmp.w	sl, #1
 80093bc:	f47f af3d 	bne.w	800923a <_scanf_float+0x66>
 80093c0:	f04f 0a02 	mov.w	sl, #2
 80093c4:	e7d2      	b.n	800936c <_scanf_float+0x198>
 80093c6:	b975      	cbnz	r5, 80093e6 <_scanf_float+0x212>
 80093c8:	2f00      	cmp	r7, #0
 80093ca:	f47f af37 	bne.w	800923c <_scanf_float+0x68>
 80093ce:	6822      	ldr	r2, [r4, #0]
 80093d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80093d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80093d8:	f040 8103 	bne.w	80095e2 <_scanf_float+0x40e>
 80093dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80093e0:	6022      	str	r2, [r4, #0]
 80093e2:	2501      	movs	r5, #1
 80093e4:	e7c2      	b.n	800936c <_scanf_float+0x198>
 80093e6:	2d03      	cmp	r5, #3
 80093e8:	d0e3      	beq.n	80093b2 <_scanf_float+0x1de>
 80093ea:	2d05      	cmp	r5, #5
 80093ec:	e7df      	b.n	80093ae <_scanf_float+0x1da>
 80093ee:	2d02      	cmp	r5, #2
 80093f0:	f47f af23 	bne.w	800923a <_scanf_float+0x66>
 80093f4:	2503      	movs	r5, #3
 80093f6:	e7b9      	b.n	800936c <_scanf_float+0x198>
 80093f8:	2d06      	cmp	r5, #6
 80093fa:	f47f af1e 	bne.w	800923a <_scanf_float+0x66>
 80093fe:	2507      	movs	r5, #7
 8009400:	e7b4      	b.n	800936c <_scanf_float+0x198>
 8009402:	6822      	ldr	r2, [r4, #0]
 8009404:	0591      	lsls	r1, r2, #22
 8009406:	f57f af18 	bpl.w	800923a <_scanf_float+0x66>
 800940a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800940e:	6022      	str	r2, [r4, #0]
 8009410:	9702      	str	r7, [sp, #8]
 8009412:	e7ab      	b.n	800936c <_scanf_float+0x198>
 8009414:	6822      	ldr	r2, [r4, #0]
 8009416:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800941a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800941e:	d005      	beq.n	800942c <_scanf_float+0x258>
 8009420:	0550      	lsls	r0, r2, #21
 8009422:	f57f af0a 	bpl.w	800923a <_scanf_float+0x66>
 8009426:	2f00      	cmp	r7, #0
 8009428:	f000 80db 	beq.w	80095e2 <_scanf_float+0x40e>
 800942c:	0591      	lsls	r1, r2, #22
 800942e:	bf58      	it	pl
 8009430:	9902      	ldrpl	r1, [sp, #8]
 8009432:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009436:	bf58      	it	pl
 8009438:	1a79      	subpl	r1, r7, r1
 800943a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800943e:	bf58      	it	pl
 8009440:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009444:	6022      	str	r2, [r4, #0]
 8009446:	2700      	movs	r7, #0
 8009448:	e790      	b.n	800936c <_scanf_float+0x198>
 800944a:	f04f 0a03 	mov.w	sl, #3
 800944e:	e78d      	b.n	800936c <_scanf_float+0x198>
 8009450:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009454:	4649      	mov	r1, r9
 8009456:	4640      	mov	r0, r8
 8009458:	4798      	blx	r3
 800945a:	2800      	cmp	r0, #0
 800945c:	f43f aedf 	beq.w	800921e <_scanf_float+0x4a>
 8009460:	e6eb      	b.n	800923a <_scanf_float+0x66>
 8009462:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009466:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800946a:	464a      	mov	r2, r9
 800946c:	4640      	mov	r0, r8
 800946e:	4798      	blx	r3
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	3b01      	subs	r3, #1
 8009474:	6123      	str	r3, [r4, #16]
 8009476:	e6eb      	b.n	8009250 <_scanf_float+0x7c>
 8009478:	1e6b      	subs	r3, r5, #1
 800947a:	2b06      	cmp	r3, #6
 800947c:	d824      	bhi.n	80094c8 <_scanf_float+0x2f4>
 800947e:	2d02      	cmp	r5, #2
 8009480:	d836      	bhi.n	80094f0 <_scanf_float+0x31c>
 8009482:	9b01      	ldr	r3, [sp, #4]
 8009484:	429e      	cmp	r6, r3
 8009486:	f67f aee7 	bls.w	8009258 <_scanf_float+0x84>
 800948a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800948e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009492:	464a      	mov	r2, r9
 8009494:	4640      	mov	r0, r8
 8009496:	4798      	blx	r3
 8009498:	6923      	ldr	r3, [r4, #16]
 800949a:	3b01      	subs	r3, #1
 800949c:	6123      	str	r3, [r4, #16]
 800949e:	e7f0      	b.n	8009482 <_scanf_float+0x2ae>
 80094a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80094a4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80094a8:	464a      	mov	r2, r9
 80094aa:	4640      	mov	r0, r8
 80094ac:	4798      	blx	r3
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	3b01      	subs	r3, #1
 80094b2:	6123      	str	r3, [r4, #16]
 80094b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094b8:	fa5f fa8a 	uxtb.w	sl, sl
 80094bc:	f1ba 0f02 	cmp.w	sl, #2
 80094c0:	d1ee      	bne.n	80094a0 <_scanf_float+0x2cc>
 80094c2:	3d03      	subs	r5, #3
 80094c4:	b2ed      	uxtb	r5, r5
 80094c6:	1b76      	subs	r6, r6, r5
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	05da      	lsls	r2, r3, #23
 80094cc:	d530      	bpl.n	8009530 <_scanf_float+0x35c>
 80094ce:	055b      	lsls	r3, r3, #21
 80094d0:	d511      	bpl.n	80094f6 <_scanf_float+0x322>
 80094d2:	9b01      	ldr	r3, [sp, #4]
 80094d4:	429e      	cmp	r6, r3
 80094d6:	f67f aebf 	bls.w	8009258 <_scanf_float+0x84>
 80094da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80094de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094e2:	464a      	mov	r2, r9
 80094e4:	4640      	mov	r0, r8
 80094e6:	4798      	blx	r3
 80094e8:	6923      	ldr	r3, [r4, #16]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	6123      	str	r3, [r4, #16]
 80094ee:	e7f0      	b.n	80094d2 <_scanf_float+0x2fe>
 80094f0:	46aa      	mov	sl, r5
 80094f2:	46b3      	mov	fp, r6
 80094f4:	e7de      	b.n	80094b4 <_scanf_float+0x2e0>
 80094f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80094fa:	6923      	ldr	r3, [r4, #16]
 80094fc:	2965      	cmp	r1, #101	@ 0x65
 80094fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8009502:	f106 35ff 	add.w	r5, r6, #4294967295
 8009506:	6123      	str	r3, [r4, #16]
 8009508:	d00c      	beq.n	8009524 <_scanf_float+0x350>
 800950a:	2945      	cmp	r1, #69	@ 0x45
 800950c:	d00a      	beq.n	8009524 <_scanf_float+0x350>
 800950e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009512:	464a      	mov	r2, r9
 8009514:	4640      	mov	r0, r8
 8009516:	4798      	blx	r3
 8009518:	6923      	ldr	r3, [r4, #16]
 800951a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800951e:	3b01      	subs	r3, #1
 8009520:	1eb5      	subs	r5, r6, #2
 8009522:	6123      	str	r3, [r4, #16]
 8009524:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009528:	464a      	mov	r2, r9
 800952a:	4640      	mov	r0, r8
 800952c:	4798      	blx	r3
 800952e:	462e      	mov	r6, r5
 8009530:	6822      	ldr	r2, [r4, #0]
 8009532:	f012 0210 	ands.w	r2, r2, #16
 8009536:	d001      	beq.n	800953c <_scanf_float+0x368>
 8009538:	2000      	movs	r0, #0
 800953a:	e68e      	b.n	800925a <_scanf_float+0x86>
 800953c:	7032      	strb	r2, [r6, #0]
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009548:	d125      	bne.n	8009596 <_scanf_float+0x3c2>
 800954a:	9b02      	ldr	r3, [sp, #8]
 800954c:	429f      	cmp	r7, r3
 800954e:	d00a      	beq.n	8009566 <_scanf_float+0x392>
 8009550:	1bda      	subs	r2, r3, r7
 8009552:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009556:	429e      	cmp	r6, r3
 8009558:	bf28      	it	cs
 800955a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800955e:	4922      	ldr	r1, [pc, #136]	@ (80095e8 <_scanf_float+0x414>)
 8009560:	4630      	mov	r0, r6
 8009562:	f000 f965 	bl	8009830 <siprintf>
 8009566:	9901      	ldr	r1, [sp, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	4640      	mov	r0, r8
 800956c:	f002 fd0c 	bl	800bf88 <_strtod_r>
 8009570:	9b03      	ldr	r3, [sp, #12]
 8009572:	6821      	ldr	r1, [r4, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f011 0f02 	tst.w	r1, #2
 800957a:	ec57 6b10 	vmov	r6, r7, d0
 800957e:	f103 0204 	add.w	r2, r3, #4
 8009582:	d015      	beq.n	80095b0 <_scanf_float+0x3dc>
 8009584:	9903      	ldr	r1, [sp, #12]
 8009586:	600a      	str	r2, [r1, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	e9c3 6700 	strd	r6, r7, [r3]
 800958e:	68e3      	ldr	r3, [r4, #12]
 8009590:	3301      	adds	r3, #1
 8009592:	60e3      	str	r3, [r4, #12]
 8009594:	e7d0      	b.n	8009538 <_scanf_float+0x364>
 8009596:	9b04      	ldr	r3, [sp, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d0e4      	beq.n	8009566 <_scanf_float+0x392>
 800959c:	9905      	ldr	r1, [sp, #20]
 800959e:	230a      	movs	r3, #10
 80095a0:	3101      	adds	r1, #1
 80095a2:	4640      	mov	r0, r8
 80095a4:	f002 fd70 	bl	800c088 <_strtol_r>
 80095a8:	9b04      	ldr	r3, [sp, #16]
 80095aa:	9e05      	ldr	r6, [sp, #20]
 80095ac:	1ac2      	subs	r2, r0, r3
 80095ae:	e7d0      	b.n	8009552 <_scanf_float+0x37e>
 80095b0:	f011 0f04 	tst.w	r1, #4
 80095b4:	9903      	ldr	r1, [sp, #12]
 80095b6:	600a      	str	r2, [r1, #0]
 80095b8:	d1e6      	bne.n	8009588 <_scanf_float+0x3b4>
 80095ba:	681d      	ldr	r5, [r3, #0]
 80095bc:	4632      	mov	r2, r6
 80095be:	463b      	mov	r3, r7
 80095c0:	4630      	mov	r0, r6
 80095c2:	4639      	mov	r1, r7
 80095c4:	f7f7 fab2 	bl	8000b2c <__aeabi_dcmpun>
 80095c8:	b128      	cbz	r0, 80095d6 <_scanf_float+0x402>
 80095ca:	4808      	ldr	r0, [pc, #32]	@ (80095ec <_scanf_float+0x418>)
 80095cc:	f000 fad2 	bl	8009b74 <nanf>
 80095d0:	ed85 0a00 	vstr	s0, [r5]
 80095d4:	e7db      	b.n	800958e <_scanf_float+0x3ba>
 80095d6:	4630      	mov	r0, r6
 80095d8:	4639      	mov	r1, r7
 80095da:	f7f7 fb05 	bl	8000be8 <__aeabi_d2f>
 80095de:	6028      	str	r0, [r5, #0]
 80095e0:	e7d5      	b.n	800958e <_scanf_float+0x3ba>
 80095e2:	2700      	movs	r7, #0
 80095e4:	e62e      	b.n	8009244 <_scanf_float+0x70>
 80095e6:	bf00      	nop
 80095e8:	0800e484 	.word	0x0800e484
 80095ec:	0800e5c5 	.word	0x0800e5c5

080095f0 <std>:
 80095f0:	2300      	movs	r3, #0
 80095f2:	b510      	push	{r4, lr}
 80095f4:	4604      	mov	r4, r0
 80095f6:	e9c0 3300 	strd	r3, r3, [r0]
 80095fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095fe:	6083      	str	r3, [r0, #8]
 8009600:	8181      	strh	r1, [r0, #12]
 8009602:	6643      	str	r3, [r0, #100]	@ 0x64
 8009604:	81c2      	strh	r2, [r0, #14]
 8009606:	6183      	str	r3, [r0, #24]
 8009608:	4619      	mov	r1, r3
 800960a:	2208      	movs	r2, #8
 800960c:	305c      	adds	r0, #92	@ 0x5c
 800960e:	f000 fa23 	bl	8009a58 <memset>
 8009612:	4b0d      	ldr	r3, [pc, #52]	@ (8009648 <std+0x58>)
 8009614:	6263      	str	r3, [r4, #36]	@ 0x24
 8009616:	4b0d      	ldr	r3, [pc, #52]	@ (800964c <std+0x5c>)
 8009618:	62a3      	str	r3, [r4, #40]	@ 0x28
 800961a:	4b0d      	ldr	r3, [pc, #52]	@ (8009650 <std+0x60>)
 800961c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800961e:	4b0d      	ldr	r3, [pc, #52]	@ (8009654 <std+0x64>)
 8009620:	6323      	str	r3, [r4, #48]	@ 0x30
 8009622:	4b0d      	ldr	r3, [pc, #52]	@ (8009658 <std+0x68>)
 8009624:	6224      	str	r4, [r4, #32]
 8009626:	429c      	cmp	r4, r3
 8009628:	d006      	beq.n	8009638 <std+0x48>
 800962a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800962e:	4294      	cmp	r4, r2
 8009630:	d002      	beq.n	8009638 <std+0x48>
 8009632:	33d0      	adds	r3, #208	@ 0xd0
 8009634:	429c      	cmp	r4, r3
 8009636:	d105      	bne.n	8009644 <std+0x54>
 8009638:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800963c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009640:	f000 ba86 	b.w	8009b50 <__retarget_lock_init_recursive>
 8009644:	bd10      	pop	{r4, pc}
 8009646:	bf00      	nop
 8009648:	08009875 	.word	0x08009875
 800964c:	08009897 	.word	0x08009897
 8009650:	080098cf 	.word	0x080098cf
 8009654:	080098f3 	.word	0x080098f3
 8009658:	2000086c 	.word	0x2000086c

0800965c <stdio_exit_handler>:
 800965c:	4a02      	ldr	r2, [pc, #8]	@ (8009668 <stdio_exit_handler+0xc>)
 800965e:	4903      	ldr	r1, [pc, #12]	@ (800966c <stdio_exit_handler+0x10>)
 8009660:	4803      	ldr	r0, [pc, #12]	@ (8009670 <stdio_exit_handler+0x14>)
 8009662:	f000 b869 	b.w	8009738 <_fwalk_sglue>
 8009666:	bf00      	nop
 8009668:	2000000c 	.word	0x2000000c
 800966c:	0800c445 	.word	0x0800c445
 8009670:	2000001c 	.word	0x2000001c

08009674 <cleanup_stdio>:
 8009674:	6841      	ldr	r1, [r0, #4]
 8009676:	4b0c      	ldr	r3, [pc, #48]	@ (80096a8 <cleanup_stdio+0x34>)
 8009678:	4299      	cmp	r1, r3
 800967a:	b510      	push	{r4, lr}
 800967c:	4604      	mov	r4, r0
 800967e:	d001      	beq.n	8009684 <cleanup_stdio+0x10>
 8009680:	f002 fee0 	bl	800c444 <_fflush_r>
 8009684:	68a1      	ldr	r1, [r4, #8]
 8009686:	4b09      	ldr	r3, [pc, #36]	@ (80096ac <cleanup_stdio+0x38>)
 8009688:	4299      	cmp	r1, r3
 800968a:	d002      	beq.n	8009692 <cleanup_stdio+0x1e>
 800968c:	4620      	mov	r0, r4
 800968e:	f002 fed9 	bl	800c444 <_fflush_r>
 8009692:	68e1      	ldr	r1, [r4, #12]
 8009694:	4b06      	ldr	r3, [pc, #24]	@ (80096b0 <cleanup_stdio+0x3c>)
 8009696:	4299      	cmp	r1, r3
 8009698:	d004      	beq.n	80096a4 <cleanup_stdio+0x30>
 800969a:	4620      	mov	r0, r4
 800969c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096a0:	f002 bed0 	b.w	800c444 <_fflush_r>
 80096a4:	bd10      	pop	{r4, pc}
 80096a6:	bf00      	nop
 80096a8:	2000086c 	.word	0x2000086c
 80096ac:	200008d4 	.word	0x200008d4
 80096b0:	2000093c 	.word	0x2000093c

080096b4 <global_stdio_init.part.0>:
 80096b4:	b510      	push	{r4, lr}
 80096b6:	4b0b      	ldr	r3, [pc, #44]	@ (80096e4 <global_stdio_init.part.0+0x30>)
 80096b8:	4c0b      	ldr	r4, [pc, #44]	@ (80096e8 <global_stdio_init.part.0+0x34>)
 80096ba:	4a0c      	ldr	r2, [pc, #48]	@ (80096ec <global_stdio_init.part.0+0x38>)
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	4620      	mov	r0, r4
 80096c0:	2200      	movs	r2, #0
 80096c2:	2104      	movs	r1, #4
 80096c4:	f7ff ff94 	bl	80095f0 <std>
 80096c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80096cc:	2201      	movs	r2, #1
 80096ce:	2109      	movs	r1, #9
 80096d0:	f7ff ff8e 	bl	80095f0 <std>
 80096d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80096d8:	2202      	movs	r2, #2
 80096da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096de:	2112      	movs	r1, #18
 80096e0:	f7ff bf86 	b.w	80095f0 <std>
 80096e4:	200009a4 	.word	0x200009a4
 80096e8:	2000086c 	.word	0x2000086c
 80096ec:	0800965d 	.word	0x0800965d

080096f0 <__sfp_lock_acquire>:
 80096f0:	4801      	ldr	r0, [pc, #4]	@ (80096f8 <__sfp_lock_acquire+0x8>)
 80096f2:	f000 ba2e 	b.w	8009b52 <__retarget_lock_acquire_recursive>
 80096f6:	bf00      	nop
 80096f8:	200009ad 	.word	0x200009ad

080096fc <__sfp_lock_release>:
 80096fc:	4801      	ldr	r0, [pc, #4]	@ (8009704 <__sfp_lock_release+0x8>)
 80096fe:	f000 ba29 	b.w	8009b54 <__retarget_lock_release_recursive>
 8009702:	bf00      	nop
 8009704:	200009ad 	.word	0x200009ad

08009708 <__sinit>:
 8009708:	b510      	push	{r4, lr}
 800970a:	4604      	mov	r4, r0
 800970c:	f7ff fff0 	bl	80096f0 <__sfp_lock_acquire>
 8009710:	6a23      	ldr	r3, [r4, #32]
 8009712:	b11b      	cbz	r3, 800971c <__sinit+0x14>
 8009714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009718:	f7ff bff0 	b.w	80096fc <__sfp_lock_release>
 800971c:	4b04      	ldr	r3, [pc, #16]	@ (8009730 <__sinit+0x28>)
 800971e:	6223      	str	r3, [r4, #32]
 8009720:	4b04      	ldr	r3, [pc, #16]	@ (8009734 <__sinit+0x2c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1f5      	bne.n	8009714 <__sinit+0xc>
 8009728:	f7ff ffc4 	bl	80096b4 <global_stdio_init.part.0>
 800972c:	e7f2      	b.n	8009714 <__sinit+0xc>
 800972e:	bf00      	nop
 8009730:	08009675 	.word	0x08009675
 8009734:	200009a4 	.word	0x200009a4

08009738 <_fwalk_sglue>:
 8009738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800973c:	4607      	mov	r7, r0
 800973e:	4688      	mov	r8, r1
 8009740:	4614      	mov	r4, r2
 8009742:	2600      	movs	r6, #0
 8009744:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009748:	f1b9 0901 	subs.w	r9, r9, #1
 800974c:	d505      	bpl.n	800975a <_fwalk_sglue+0x22>
 800974e:	6824      	ldr	r4, [r4, #0]
 8009750:	2c00      	cmp	r4, #0
 8009752:	d1f7      	bne.n	8009744 <_fwalk_sglue+0xc>
 8009754:	4630      	mov	r0, r6
 8009756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800975a:	89ab      	ldrh	r3, [r5, #12]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d907      	bls.n	8009770 <_fwalk_sglue+0x38>
 8009760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009764:	3301      	adds	r3, #1
 8009766:	d003      	beq.n	8009770 <_fwalk_sglue+0x38>
 8009768:	4629      	mov	r1, r5
 800976a:	4638      	mov	r0, r7
 800976c:	47c0      	blx	r8
 800976e:	4306      	orrs	r6, r0
 8009770:	3568      	adds	r5, #104	@ 0x68
 8009772:	e7e9      	b.n	8009748 <_fwalk_sglue+0x10>

08009774 <_puts_r>:
 8009774:	6a03      	ldr	r3, [r0, #32]
 8009776:	b570      	push	{r4, r5, r6, lr}
 8009778:	6884      	ldr	r4, [r0, #8]
 800977a:	4605      	mov	r5, r0
 800977c:	460e      	mov	r6, r1
 800977e:	b90b      	cbnz	r3, 8009784 <_puts_r+0x10>
 8009780:	f7ff ffc2 	bl	8009708 <__sinit>
 8009784:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009786:	07db      	lsls	r3, r3, #31
 8009788:	d405      	bmi.n	8009796 <_puts_r+0x22>
 800978a:	89a3      	ldrh	r3, [r4, #12]
 800978c:	0598      	lsls	r0, r3, #22
 800978e:	d402      	bmi.n	8009796 <_puts_r+0x22>
 8009790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009792:	f000 f9de 	bl	8009b52 <__retarget_lock_acquire_recursive>
 8009796:	89a3      	ldrh	r3, [r4, #12]
 8009798:	0719      	lsls	r1, r3, #28
 800979a:	d502      	bpl.n	80097a2 <_puts_r+0x2e>
 800979c:	6923      	ldr	r3, [r4, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d135      	bne.n	800980e <_puts_r+0x9a>
 80097a2:	4621      	mov	r1, r4
 80097a4:	4628      	mov	r0, r5
 80097a6:	f000 f8e7 	bl	8009978 <__swsetup_r>
 80097aa:	b380      	cbz	r0, 800980e <_puts_r+0x9a>
 80097ac:	f04f 35ff 	mov.w	r5, #4294967295
 80097b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097b2:	07da      	lsls	r2, r3, #31
 80097b4:	d405      	bmi.n	80097c2 <_puts_r+0x4e>
 80097b6:	89a3      	ldrh	r3, [r4, #12]
 80097b8:	059b      	lsls	r3, r3, #22
 80097ba:	d402      	bmi.n	80097c2 <_puts_r+0x4e>
 80097bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097be:	f000 f9c9 	bl	8009b54 <__retarget_lock_release_recursive>
 80097c2:	4628      	mov	r0, r5
 80097c4:	bd70      	pop	{r4, r5, r6, pc}
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	da04      	bge.n	80097d4 <_puts_r+0x60>
 80097ca:	69a2      	ldr	r2, [r4, #24]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	dc17      	bgt.n	8009800 <_puts_r+0x8c>
 80097d0:	290a      	cmp	r1, #10
 80097d2:	d015      	beq.n	8009800 <_puts_r+0x8c>
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	1c5a      	adds	r2, r3, #1
 80097d8:	6022      	str	r2, [r4, #0]
 80097da:	7019      	strb	r1, [r3, #0]
 80097dc:	68a3      	ldr	r3, [r4, #8]
 80097de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80097e2:	3b01      	subs	r3, #1
 80097e4:	60a3      	str	r3, [r4, #8]
 80097e6:	2900      	cmp	r1, #0
 80097e8:	d1ed      	bne.n	80097c6 <_puts_r+0x52>
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	da11      	bge.n	8009812 <_puts_r+0x9e>
 80097ee:	4622      	mov	r2, r4
 80097f0:	210a      	movs	r1, #10
 80097f2:	4628      	mov	r0, r5
 80097f4:	f000 f881 	bl	80098fa <__swbuf_r>
 80097f8:	3001      	adds	r0, #1
 80097fa:	d0d7      	beq.n	80097ac <_puts_r+0x38>
 80097fc:	250a      	movs	r5, #10
 80097fe:	e7d7      	b.n	80097b0 <_puts_r+0x3c>
 8009800:	4622      	mov	r2, r4
 8009802:	4628      	mov	r0, r5
 8009804:	f000 f879 	bl	80098fa <__swbuf_r>
 8009808:	3001      	adds	r0, #1
 800980a:	d1e7      	bne.n	80097dc <_puts_r+0x68>
 800980c:	e7ce      	b.n	80097ac <_puts_r+0x38>
 800980e:	3e01      	subs	r6, #1
 8009810:	e7e4      	b.n	80097dc <_puts_r+0x68>
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	1c5a      	adds	r2, r3, #1
 8009816:	6022      	str	r2, [r4, #0]
 8009818:	220a      	movs	r2, #10
 800981a:	701a      	strb	r2, [r3, #0]
 800981c:	e7ee      	b.n	80097fc <_puts_r+0x88>
	...

08009820 <puts>:
 8009820:	4b02      	ldr	r3, [pc, #8]	@ (800982c <puts+0xc>)
 8009822:	4601      	mov	r1, r0
 8009824:	6818      	ldr	r0, [r3, #0]
 8009826:	f7ff bfa5 	b.w	8009774 <_puts_r>
 800982a:	bf00      	nop
 800982c:	20000018 	.word	0x20000018

08009830 <siprintf>:
 8009830:	b40e      	push	{r1, r2, r3}
 8009832:	b510      	push	{r4, lr}
 8009834:	b09d      	sub	sp, #116	@ 0x74
 8009836:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009838:	9002      	str	r0, [sp, #8]
 800983a:	9006      	str	r0, [sp, #24]
 800983c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009840:	480a      	ldr	r0, [pc, #40]	@ (800986c <siprintf+0x3c>)
 8009842:	9107      	str	r1, [sp, #28]
 8009844:	9104      	str	r1, [sp, #16]
 8009846:	490a      	ldr	r1, [pc, #40]	@ (8009870 <siprintf+0x40>)
 8009848:	f853 2b04 	ldr.w	r2, [r3], #4
 800984c:	9105      	str	r1, [sp, #20]
 800984e:	2400      	movs	r4, #0
 8009850:	a902      	add	r1, sp, #8
 8009852:	6800      	ldr	r0, [r0, #0]
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009858:	f002 fc74 	bl	800c144 <_svfiprintf_r>
 800985c:	9b02      	ldr	r3, [sp, #8]
 800985e:	701c      	strb	r4, [r3, #0]
 8009860:	b01d      	add	sp, #116	@ 0x74
 8009862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009866:	b003      	add	sp, #12
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	20000018 	.word	0x20000018
 8009870:	ffff0208 	.word	0xffff0208

08009874 <__sread>:
 8009874:	b510      	push	{r4, lr}
 8009876:	460c      	mov	r4, r1
 8009878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800987c:	f000 f91a 	bl	8009ab4 <_read_r>
 8009880:	2800      	cmp	r0, #0
 8009882:	bfab      	itete	ge
 8009884:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009886:	89a3      	ldrhlt	r3, [r4, #12]
 8009888:	181b      	addge	r3, r3, r0
 800988a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800988e:	bfac      	ite	ge
 8009890:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009892:	81a3      	strhlt	r3, [r4, #12]
 8009894:	bd10      	pop	{r4, pc}

08009896 <__swrite>:
 8009896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800989a:	461f      	mov	r7, r3
 800989c:	898b      	ldrh	r3, [r1, #12]
 800989e:	05db      	lsls	r3, r3, #23
 80098a0:	4605      	mov	r5, r0
 80098a2:	460c      	mov	r4, r1
 80098a4:	4616      	mov	r6, r2
 80098a6:	d505      	bpl.n	80098b4 <__swrite+0x1e>
 80098a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ac:	2302      	movs	r3, #2
 80098ae:	2200      	movs	r2, #0
 80098b0:	f000 f8ee 	bl	8009a90 <_lseek_r>
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098be:	81a3      	strh	r3, [r4, #12]
 80098c0:	4632      	mov	r2, r6
 80098c2:	463b      	mov	r3, r7
 80098c4:	4628      	mov	r0, r5
 80098c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098ca:	f000 b905 	b.w	8009ad8 <_write_r>

080098ce <__sseek>:
 80098ce:	b510      	push	{r4, lr}
 80098d0:	460c      	mov	r4, r1
 80098d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d6:	f000 f8db 	bl	8009a90 <_lseek_r>
 80098da:	1c43      	adds	r3, r0, #1
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	bf15      	itete	ne
 80098e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80098e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80098e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80098ea:	81a3      	strheq	r3, [r4, #12]
 80098ec:	bf18      	it	ne
 80098ee:	81a3      	strhne	r3, [r4, #12]
 80098f0:	bd10      	pop	{r4, pc}

080098f2 <__sclose>:
 80098f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f6:	f000 b8bb 	b.w	8009a70 <_close_r>

080098fa <__swbuf_r>:
 80098fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fc:	460e      	mov	r6, r1
 80098fe:	4614      	mov	r4, r2
 8009900:	4605      	mov	r5, r0
 8009902:	b118      	cbz	r0, 800990c <__swbuf_r+0x12>
 8009904:	6a03      	ldr	r3, [r0, #32]
 8009906:	b90b      	cbnz	r3, 800990c <__swbuf_r+0x12>
 8009908:	f7ff fefe 	bl	8009708 <__sinit>
 800990c:	69a3      	ldr	r3, [r4, #24]
 800990e:	60a3      	str	r3, [r4, #8]
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	071a      	lsls	r2, r3, #28
 8009914:	d501      	bpl.n	800991a <__swbuf_r+0x20>
 8009916:	6923      	ldr	r3, [r4, #16]
 8009918:	b943      	cbnz	r3, 800992c <__swbuf_r+0x32>
 800991a:	4621      	mov	r1, r4
 800991c:	4628      	mov	r0, r5
 800991e:	f000 f82b 	bl	8009978 <__swsetup_r>
 8009922:	b118      	cbz	r0, 800992c <__swbuf_r+0x32>
 8009924:	f04f 37ff 	mov.w	r7, #4294967295
 8009928:	4638      	mov	r0, r7
 800992a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	6922      	ldr	r2, [r4, #16]
 8009930:	1a98      	subs	r0, r3, r2
 8009932:	6963      	ldr	r3, [r4, #20]
 8009934:	b2f6      	uxtb	r6, r6
 8009936:	4283      	cmp	r3, r0
 8009938:	4637      	mov	r7, r6
 800993a:	dc05      	bgt.n	8009948 <__swbuf_r+0x4e>
 800993c:	4621      	mov	r1, r4
 800993e:	4628      	mov	r0, r5
 8009940:	f002 fd80 	bl	800c444 <_fflush_r>
 8009944:	2800      	cmp	r0, #0
 8009946:	d1ed      	bne.n	8009924 <__swbuf_r+0x2a>
 8009948:	68a3      	ldr	r3, [r4, #8]
 800994a:	3b01      	subs	r3, #1
 800994c:	60a3      	str	r3, [r4, #8]
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	6022      	str	r2, [r4, #0]
 8009954:	701e      	strb	r6, [r3, #0]
 8009956:	6962      	ldr	r2, [r4, #20]
 8009958:	1c43      	adds	r3, r0, #1
 800995a:	429a      	cmp	r2, r3
 800995c:	d004      	beq.n	8009968 <__swbuf_r+0x6e>
 800995e:	89a3      	ldrh	r3, [r4, #12]
 8009960:	07db      	lsls	r3, r3, #31
 8009962:	d5e1      	bpl.n	8009928 <__swbuf_r+0x2e>
 8009964:	2e0a      	cmp	r6, #10
 8009966:	d1df      	bne.n	8009928 <__swbuf_r+0x2e>
 8009968:	4621      	mov	r1, r4
 800996a:	4628      	mov	r0, r5
 800996c:	f002 fd6a 	bl	800c444 <_fflush_r>
 8009970:	2800      	cmp	r0, #0
 8009972:	d0d9      	beq.n	8009928 <__swbuf_r+0x2e>
 8009974:	e7d6      	b.n	8009924 <__swbuf_r+0x2a>
	...

08009978 <__swsetup_r>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	4b29      	ldr	r3, [pc, #164]	@ (8009a20 <__swsetup_r+0xa8>)
 800997c:	4605      	mov	r5, r0
 800997e:	6818      	ldr	r0, [r3, #0]
 8009980:	460c      	mov	r4, r1
 8009982:	b118      	cbz	r0, 800998c <__swsetup_r+0x14>
 8009984:	6a03      	ldr	r3, [r0, #32]
 8009986:	b90b      	cbnz	r3, 800998c <__swsetup_r+0x14>
 8009988:	f7ff febe 	bl	8009708 <__sinit>
 800998c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009990:	0719      	lsls	r1, r3, #28
 8009992:	d422      	bmi.n	80099da <__swsetup_r+0x62>
 8009994:	06da      	lsls	r2, r3, #27
 8009996:	d407      	bmi.n	80099a8 <__swsetup_r+0x30>
 8009998:	2209      	movs	r2, #9
 800999a:	602a      	str	r2, [r5, #0]
 800999c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099a0:	81a3      	strh	r3, [r4, #12]
 80099a2:	f04f 30ff 	mov.w	r0, #4294967295
 80099a6:	e033      	b.n	8009a10 <__swsetup_r+0x98>
 80099a8:	0758      	lsls	r0, r3, #29
 80099aa:	d512      	bpl.n	80099d2 <__swsetup_r+0x5a>
 80099ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099ae:	b141      	cbz	r1, 80099c2 <__swsetup_r+0x4a>
 80099b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099b4:	4299      	cmp	r1, r3
 80099b6:	d002      	beq.n	80099be <__swsetup_r+0x46>
 80099b8:	4628      	mov	r0, r5
 80099ba:	f000 ff39 	bl	800a830 <_free_r>
 80099be:	2300      	movs	r3, #0
 80099c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80099c2:	89a3      	ldrh	r3, [r4, #12]
 80099c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80099c8:	81a3      	strh	r3, [r4, #12]
 80099ca:	2300      	movs	r3, #0
 80099cc:	6063      	str	r3, [r4, #4]
 80099ce:	6923      	ldr	r3, [r4, #16]
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	f043 0308 	orr.w	r3, r3, #8
 80099d8:	81a3      	strh	r3, [r4, #12]
 80099da:	6923      	ldr	r3, [r4, #16]
 80099dc:	b94b      	cbnz	r3, 80099f2 <__swsetup_r+0x7a>
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80099e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099e8:	d003      	beq.n	80099f2 <__swsetup_r+0x7a>
 80099ea:	4621      	mov	r1, r4
 80099ec:	4628      	mov	r0, r5
 80099ee:	f002 fd77 	bl	800c4e0 <__smakebuf_r>
 80099f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f6:	f013 0201 	ands.w	r2, r3, #1
 80099fa:	d00a      	beq.n	8009a12 <__swsetup_r+0x9a>
 80099fc:	2200      	movs	r2, #0
 80099fe:	60a2      	str	r2, [r4, #8]
 8009a00:	6962      	ldr	r2, [r4, #20]
 8009a02:	4252      	negs	r2, r2
 8009a04:	61a2      	str	r2, [r4, #24]
 8009a06:	6922      	ldr	r2, [r4, #16]
 8009a08:	b942      	cbnz	r2, 8009a1c <__swsetup_r+0xa4>
 8009a0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009a0e:	d1c5      	bne.n	800999c <__swsetup_r+0x24>
 8009a10:	bd38      	pop	{r3, r4, r5, pc}
 8009a12:	0799      	lsls	r1, r3, #30
 8009a14:	bf58      	it	pl
 8009a16:	6962      	ldrpl	r2, [r4, #20]
 8009a18:	60a2      	str	r2, [r4, #8]
 8009a1a:	e7f4      	b.n	8009a06 <__swsetup_r+0x8e>
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	e7f7      	b.n	8009a10 <__swsetup_r+0x98>
 8009a20:	20000018 	.word	0x20000018

08009a24 <memmove>:
 8009a24:	4288      	cmp	r0, r1
 8009a26:	b510      	push	{r4, lr}
 8009a28:	eb01 0402 	add.w	r4, r1, r2
 8009a2c:	d902      	bls.n	8009a34 <memmove+0x10>
 8009a2e:	4284      	cmp	r4, r0
 8009a30:	4623      	mov	r3, r4
 8009a32:	d807      	bhi.n	8009a44 <memmove+0x20>
 8009a34:	1e43      	subs	r3, r0, #1
 8009a36:	42a1      	cmp	r1, r4
 8009a38:	d008      	beq.n	8009a4c <memmove+0x28>
 8009a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a42:	e7f8      	b.n	8009a36 <memmove+0x12>
 8009a44:	4402      	add	r2, r0
 8009a46:	4601      	mov	r1, r0
 8009a48:	428a      	cmp	r2, r1
 8009a4a:	d100      	bne.n	8009a4e <memmove+0x2a>
 8009a4c:	bd10      	pop	{r4, pc}
 8009a4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a56:	e7f7      	b.n	8009a48 <memmove+0x24>

08009a58 <memset>:
 8009a58:	4402      	add	r2, r0
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d100      	bne.n	8009a62 <memset+0xa>
 8009a60:	4770      	bx	lr
 8009a62:	f803 1b01 	strb.w	r1, [r3], #1
 8009a66:	e7f9      	b.n	8009a5c <memset+0x4>

08009a68 <_localeconv_r>:
 8009a68:	4800      	ldr	r0, [pc, #0]	@ (8009a6c <_localeconv_r+0x4>)
 8009a6a:	4770      	bx	lr
 8009a6c:	20000158 	.word	0x20000158

08009a70 <_close_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4d06      	ldr	r5, [pc, #24]	@ (8009a8c <_close_r+0x1c>)
 8009a74:	2300      	movs	r3, #0
 8009a76:	4604      	mov	r4, r0
 8009a78:	4608      	mov	r0, r1
 8009a7a:	602b      	str	r3, [r5, #0]
 8009a7c:	f7f8 fede 	bl	800283c <_close>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d102      	bne.n	8009a8a <_close_r+0x1a>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	b103      	cbz	r3, 8009a8a <_close_r+0x1a>
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	200009a8 	.word	0x200009a8

08009a90 <_lseek_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4d07      	ldr	r5, [pc, #28]	@ (8009ab0 <_lseek_r+0x20>)
 8009a94:	4604      	mov	r4, r0
 8009a96:	4608      	mov	r0, r1
 8009a98:	4611      	mov	r1, r2
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	602a      	str	r2, [r5, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	f7f8 fef3 	bl	800288a <_lseek>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_lseek_r+0x1e>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_lseek_r+0x1e>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	200009a8 	.word	0x200009a8

08009ab4 <_read_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4d07      	ldr	r5, [pc, #28]	@ (8009ad4 <_read_r+0x20>)
 8009ab8:	4604      	mov	r4, r0
 8009aba:	4608      	mov	r0, r1
 8009abc:	4611      	mov	r1, r2
 8009abe:	2200      	movs	r2, #0
 8009ac0:	602a      	str	r2, [r5, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f7f8 fe81 	bl	80027ca <_read>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	d102      	bne.n	8009ad2 <_read_r+0x1e>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	b103      	cbz	r3, 8009ad2 <_read_r+0x1e>
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	bd38      	pop	{r3, r4, r5, pc}
 8009ad4:	200009a8 	.word	0x200009a8

08009ad8 <_write_r>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	4d07      	ldr	r5, [pc, #28]	@ (8009af8 <_write_r+0x20>)
 8009adc:	4604      	mov	r4, r0
 8009ade:	4608      	mov	r0, r1
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	602a      	str	r2, [r5, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f7f8 fe8c 	bl	8002804 <_write>
 8009aec:	1c43      	adds	r3, r0, #1
 8009aee:	d102      	bne.n	8009af6 <_write_r+0x1e>
 8009af0:	682b      	ldr	r3, [r5, #0]
 8009af2:	b103      	cbz	r3, 8009af6 <_write_r+0x1e>
 8009af4:	6023      	str	r3, [r4, #0]
 8009af6:	bd38      	pop	{r3, r4, r5, pc}
 8009af8:	200009a8 	.word	0x200009a8

08009afc <__errno>:
 8009afc:	4b01      	ldr	r3, [pc, #4]	@ (8009b04 <__errno+0x8>)
 8009afe:	6818      	ldr	r0, [r3, #0]
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	20000018 	.word	0x20000018

08009b08 <__libc_init_array>:
 8009b08:	b570      	push	{r4, r5, r6, lr}
 8009b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8009b40 <__libc_init_array+0x38>)
 8009b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8009b44 <__libc_init_array+0x3c>)
 8009b0e:	1b64      	subs	r4, r4, r5
 8009b10:	10a4      	asrs	r4, r4, #2
 8009b12:	2600      	movs	r6, #0
 8009b14:	42a6      	cmp	r6, r4
 8009b16:	d109      	bne.n	8009b2c <__libc_init_array+0x24>
 8009b18:	4d0b      	ldr	r5, [pc, #44]	@ (8009b48 <__libc_init_array+0x40>)
 8009b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8009b4c <__libc_init_array+0x44>)
 8009b1c:	f003 fd6a 	bl	800d5f4 <_init>
 8009b20:	1b64      	subs	r4, r4, r5
 8009b22:	10a4      	asrs	r4, r4, #2
 8009b24:	2600      	movs	r6, #0
 8009b26:	42a6      	cmp	r6, r4
 8009b28:	d105      	bne.n	8009b36 <__libc_init_array+0x2e>
 8009b2a:	bd70      	pop	{r4, r5, r6, pc}
 8009b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b30:	4798      	blx	r3
 8009b32:	3601      	adds	r6, #1
 8009b34:	e7ee      	b.n	8009b14 <__libc_init_array+0xc>
 8009b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b3a:	4798      	blx	r3
 8009b3c:	3601      	adds	r6, #1
 8009b3e:	e7f2      	b.n	8009b26 <__libc_init_array+0x1e>
 8009b40:	0800e8d8 	.word	0x0800e8d8
 8009b44:	0800e8d8 	.word	0x0800e8d8
 8009b48:	0800e8d8 	.word	0x0800e8d8
 8009b4c:	0800e8dc 	.word	0x0800e8dc

08009b50 <__retarget_lock_init_recursive>:
 8009b50:	4770      	bx	lr

08009b52 <__retarget_lock_acquire_recursive>:
 8009b52:	4770      	bx	lr

08009b54 <__retarget_lock_release_recursive>:
 8009b54:	4770      	bx	lr

08009b56 <memcpy>:
 8009b56:	440a      	add	r2, r1
 8009b58:	4291      	cmp	r1, r2
 8009b5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b5e:	d100      	bne.n	8009b62 <memcpy+0xc>
 8009b60:	4770      	bx	lr
 8009b62:	b510      	push	{r4, lr}
 8009b64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b6c:	4291      	cmp	r1, r2
 8009b6e:	d1f9      	bne.n	8009b64 <memcpy+0xe>
 8009b70:	bd10      	pop	{r4, pc}
	...

08009b74 <nanf>:
 8009b74:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009b7c <nanf+0x8>
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	7fc00000 	.word	0x7fc00000

08009b80 <quorem>:
 8009b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b84:	6903      	ldr	r3, [r0, #16]
 8009b86:	690c      	ldr	r4, [r1, #16]
 8009b88:	42a3      	cmp	r3, r4
 8009b8a:	4607      	mov	r7, r0
 8009b8c:	db7e      	blt.n	8009c8c <quorem+0x10c>
 8009b8e:	3c01      	subs	r4, #1
 8009b90:	f101 0814 	add.w	r8, r1, #20
 8009b94:	00a3      	lsls	r3, r4, #2
 8009b96:	f100 0514 	add.w	r5, r0, #20
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ba6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009baa:	3301      	adds	r3, #1
 8009bac:	429a      	cmp	r2, r3
 8009bae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009bb2:	fbb2 f6f3 	udiv	r6, r2, r3
 8009bb6:	d32e      	bcc.n	8009c16 <quorem+0x96>
 8009bb8:	f04f 0a00 	mov.w	sl, #0
 8009bbc:	46c4      	mov	ip, r8
 8009bbe:	46ae      	mov	lr, r5
 8009bc0:	46d3      	mov	fp, sl
 8009bc2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009bc6:	b298      	uxth	r0, r3
 8009bc8:	fb06 a000 	mla	r0, r6, r0, sl
 8009bcc:	0c02      	lsrs	r2, r0, #16
 8009bce:	0c1b      	lsrs	r3, r3, #16
 8009bd0:	fb06 2303 	mla	r3, r6, r3, r2
 8009bd4:	f8de 2000 	ldr.w	r2, [lr]
 8009bd8:	b280      	uxth	r0, r0
 8009bda:	b292      	uxth	r2, r2
 8009bdc:	1a12      	subs	r2, r2, r0
 8009bde:	445a      	add	r2, fp
 8009be0:	f8de 0000 	ldr.w	r0, [lr]
 8009be4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009bee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009bf2:	b292      	uxth	r2, r2
 8009bf4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009bf8:	45e1      	cmp	r9, ip
 8009bfa:	f84e 2b04 	str.w	r2, [lr], #4
 8009bfe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009c02:	d2de      	bcs.n	8009bc2 <quorem+0x42>
 8009c04:	9b00      	ldr	r3, [sp, #0]
 8009c06:	58eb      	ldr	r3, [r5, r3]
 8009c08:	b92b      	cbnz	r3, 8009c16 <quorem+0x96>
 8009c0a:	9b01      	ldr	r3, [sp, #4]
 8009c0c:	3b04      	subs	r3, #4
 8009c0e:	429d      	cmp	r5, r3
 8009c10:	461a      	mov	r2, r3
 8009c12:	d32f      	bcc.n	8009c74 <quorem+0xf4>
 8009c14:	613c      	str	r4, [r7, #16]
 8009c16:	4638      	mov	r0, r7
 8009c18:	f001 f9c6 	bl	800afa8 <__mcmp>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	db25      	blt.n	8009c6c <quorem+0xec>
 8009c20:	4629      	mov	r1, r5
 8009c22:	2000      	movs	r0, #0
 8009c24:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c28:	f8d1 c000 	ldr.w	ip, [r1]
 8009c2c:	fa1f fe82 	uxth.w	lr, r2
 8009c30:	fa1f f38c 	uxth.w	r3, ip
 8009c34:	eba3 030e 	sub.w	r3, r3, lr
 8009c38:	4403      	add	r3, r0
 8009c3a:	0c12      	lsrs	r2, r2, #16
 8009c3c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009c40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c4a:	45c1      	cmp	r9, r8
 8009c4c:	f841 3b04 	str.w	r3, [r1], #4
 8009c50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c54:	d2e6      	bcs.n	8009c24 <quorem+0xa4>
 8009c56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c5e:	b922      	cbnz	r2, 8009c6a <quorem+0xea>
 8009c60:	3b04      	subs	r3, #4
 8009c62:	429d      	cmp	r5, r3
 8009c64:	461a      	mov	r2, r3
 8009c66:	d30b      	bcc.n	8009c80 <quorem+0x100>
 8009c68:	613c      	str	r4, [r7, #16]
 8009c6a:	3601      	adds	r6, #1
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	b003      	add	sp, #12
 8009c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c74:	6812      	ldr	r2, [r2, #0]
 8009c76:	3b04      	subs	r3, #4
 8009c78:	2a00      	cmp	r2, #0
 8009c7a:	d1cb      	bne.n	8009c14 <quorem+0x94>
 8009c7c:	3c01      	subs	r4, #1
 8009c7e:	e7c6      	b.n	8009c0e <quorem+0x8e>
 8009c80:	6812      	ldr	r2, [r2, #0]
 8009c82:	3b04      	subs	r3, #4
 8009c84:	2a00      	cmp	r2, #0
 8009c86:	d1ef      	bne.n	8009c68 <quorem+0xe8>
 8009c88:	3c01      	subs	r4, #1
 8009c8a:	e7ea      	b.n	8009c62 <quorem+0xe2>
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	e7ee      	b.n	8009c6e <quorem+0xee>

08009c90 <_dtoa_r>:
 8009c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	69c7      	ldr	r7, [r0, #28]
 8009c96:	b097      	sub	sp, #92	@ 0x5c
 8009c98:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009c9c:	ec55 4b10 	vmov	r4, r5, d0
 8009ca0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009ca2:	9107      	str	r1, [sp, #28]
 8009ca4:	4681      	mov	r9, r0
 8009ca6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009ca8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009caa:	b97f      	cbnz	r7, 8009ccc <_dtoa_r+0x3c>
 8009cac:	2010      	movs	r0, #16
 8009cae:	f000 fe09 	bl	800a8c4 <malloc>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	f8c9 001c 	str.w	r0, [r9, #28]
 8009cb8:	b920      	cbnz	r0, 8009cc4 <_dtoa_r+0x34>
 8009cba:	4ba9      	ldr	r3, [pc, #676]	@ (8009f60 <_dtoa_r+0x2d0>)
 8009cbc:	21ef      	movs	r1, #239	@ 0xef
 8009cbe:	48a9      	ldr	r0, [pc, #676]	@ (8009f64 <_dtoa_r+0x2d4>)
 8009cc0:	f002 fc96 	bl	800c5f0 <__assert_func>
 8009cc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009cc8:	6007      	str	r7, [r0, #0]
 8009cca:	60c7      	str	r7, [r0, #12]
 8009ccc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009cd0:	6819      	ldr	r1, [r3, #0]
 8009cd2:	b159      	cbz	r1, 8009cec <_dtoa_r+0x5c>
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	604a      	str	r2, [r1, #4]
 8009cd8:	2301      	movs	r3, #1
 8009cda:	4093      	lsls	r3, r2
 8009cdc:	608b      	str	r3, [r1, #8]
 8009cde:	4648      	mov	r0, r9
 8009ce0:	f000 fee6 	bl	800aab0 <_Bfree>
 8009ce4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	1e2b      	subs	r3, r5, #0
 8009cee:	bfb9      	ittee	lt
 8009cf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009cf4:	9305      	strlt	r3, [sp, #20]
 8009cf6:	2300      	movge	r3, #0
 8009cf8:	6033      	strge	r3, [r6, #0]
 8009cfa:	9f05      	ldr	r7, [sp, #20]
 8009cfc:	4b9a      	ldr	r3, [pc, #616]	@ (8009f68 <_dtoa_r+0x2d8>)
 8009cfe:	bfbc      	itt	lt
 8009d00:	2201      	movlt	r2, #1
 8009d02:	6032      	strlt	r2, [r6, #0]
 8009d04:	43bb      	bics	r3, r7
 8009d06:	d112      	bne.n	8009d2e <_dtoa_r+0x9e>
 8009d08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009d0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009d0e:	6013      	str	r3, [r2, #0]
 8009d10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d14:	4323      	orrs	r3, r4
 8009d16:	f000 855a 	beq.w	800a7ce <_dtoa_r+0xb3e>
 8009d1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009d1c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009f7c <_dtoa_r+0x2ec>
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 855c 	beq.w	800a7de <_dtoa_r+0xb4e>
 8009d26:	f10a 0303 	add.w	r3, sl, #3
 8009d2a:	f000 bd56 	b.w	800a7da <_dtoa_r+0xb4a>
 8009d2e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009d32:	2200      	movs	r2, #0
 8009d34:	ec51 0b17 	vmov	r0, r1, d7
 8009d38:	2300      	movs	r3, #0
 8009d3a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009d3e:	f7f6 fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d42:	4680      	mov	r8, r0
 8009d44:	b158      	cbz	r0, 8009d5e <_dtoa_r+0xce>
 8009d46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009d48:	2301      	movs	r3, #1
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009d4e:	b113      	cbz	r3, 8009d56 <_dtoa_r+0xc6>
 8009d50:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009d52:	4b86      	ldr	r3, [pc, #536]	@ (8009f6c <_dtoa_r+0x2dc>)
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009f80 <_dtoa_r+0x2f0>
 8009d5a:	f000 bd40 	b.w	800a7de <_dtoa_r+0xb4e>
 8009d5e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009d62:	aa14      	add	r2, sp, #80	@ 0x50
 8009d64:	a915      	add	r1, sp, #84	@ 0x54
 8009d66:	4648      	mov	r0, r9
 8009d68:	f001 fa3e 	bl	800b1e8 <__d2b>
 8009d6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009d70:	9002      	str	r0, [sp, #8]
 8009d72:	2e00      	cmp	r6, #0
 8009d74:	d078      	beq.n	8009e68 <_dtoa_r+0x1d8>
 8009d76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d78:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009d84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009d88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009d8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009d90:	4619      	mov	r1, r3
 8009d92:	2200      	movs	r2, #0
 8009d94:	4b76      	ldr	r3, [pc, #472]	@ (8009f70 <_dtoa_r+0x2e0>)
 8009d96:	f7f6 fa77 	bl	8000288 <__aeabi_dsub>
 8009d9a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009f48 <_dtoa_r+0x2b8>)
 8009d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da0:	f7f6 fc2a 	bl	80005f8 <__aeabi_dmul>
 8009da4:	a36a      	add	r3, pc, #424	@ (adr r3, 8009f50 <_dtoa_r+0x2c0>)
 8009da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009daa:	f7f6 fa6f 	bl	800028c <__adddf3>
 8009dae:	4604      	mov	r4, r0
 8009db0:	4630      	mov	r0, r6
 8009db2:	460d      	mov	r5, r1
 8009db4:	f7f6 fbb6 	bl	8000524 <__aeabi_i2d>
 8009db8:	a367      	add	r3, pc, #412	@ (adr r3, 8009f58 <_dtoa_r+0x2c8>)
 8009dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbe:	f7f6 fc1b 	bl	80005f8 <__aeabi_dmul>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	4629      	mov	r1, r5
 8009dca:	f7f6 fa5f 	bl	800028c <__adddf3>
 8009dce:	4604      	mov	r4, r0
 8009dd0:	460d      	mov	r5, r1
 8009dd2:	f7f6 fec1 	bl	8000b58 <__aeabi_d2iz>
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	4607      	mov	r7, r0
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4620      	mov	r0, r4
 8009dde:	4629      	mov	r1, r5
 8009de0:	f7f6 fe7c 	bl	8000adc <__aeabi_dcmplt>
 8009de4:	b140      	cbz	r0, 8009df8 <_dtoa_r+0x168>
 8009de6:	4638      	mov	r0, r7
 8009de8:	f7f6 fb9c 	bl	8000524 <__aeabi_i2d>
 8009dec:	4622      	mov	r2, r4
 8009dee:	462b      	mov	r3, r5
 8009df0:	f7f6 fe6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009df4:	b900      	cbnz	r0, 8009df8 <_dtoa_r+0x168>
 8009df6:	3f01      	subs	r7, #1
 8009df8:	2f16      	cmp	r7, #22
 8009dfa:	d852      	bhi.n	8009ea2 <_dtoa_r+0x212>
 8009dfc:	4b5d      	ldr	r3, [pc, #372]	@ (8009f74 <_dtoa_r+0x2e4>)
 8009dfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009e0a:	f7f6 fe67 	bl	8000adc <__aeabi_dcmplt>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	d049      	beq.n	8009ea6 <_dtoa_r+0x216>
 8009e12:	3f01      	subs	r7, #1
 8009e14:	2300      	movs	r3, #0
 8009e16:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009e1a:	1b9b      	subs	r3, r3, r6
 8009e1c:	1e5a      	subs	r2, r3, #1
 8009e1e:	bf45      	ittet	mi
 8009e20:	f1c3 0301 	rsbmi	r3, r3, #1
 8009e24:	9300      	strmi	r3, [sp, #0]
 8009e26:	2300      	movpl	r3, #0
 8009e28:	2300      	movmi	r3, #0
 8009e2a:	9206      	str	r2, [sp, #24]
 8009e2c:	bf54      	ite	pl
 8009e2e:	9300      	strpl	r3, [sp, #0]
 8009e30:	9306      	strmi	r3, [sp, #24]
 8009e32:	2f00      	cmp	r7, #0
 8009e34:	db39      	blt.n	8009eaa <_dtoa_r+0x21a>
 8009e36:	9b06      	ldr	r3, [sp, #24]
 8009e38:	970d      	str	r7, [sp, #52]	@ 0x34
 8009e3a:	443b      	add	r3, r7
 8009e3c:	9306      	str	r3, [sp, #24]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	9308      	str	r3, [sp, #32]
 8009e42:	9b07      	ldr	r3, [sp, #28]
 8009e44:	2b09      	cmp	r3, #9
 8009e46:	d863      	bhi.n	8009f10 <_dtoa_r+0x280>
 8009e48:	2b05      	cmp	r3, #5
 8009e4a:	bfc4      	itt	gt
 8009e4c:	3b04      	subgt	r3, #4
 8009e4e:	9307      	strgt	r3, [sp, #28]
 8009e50:	9b07      	ldr	r3, [sp, #28]
 8009e52:	f1a3 0302 	sub.w	r3, r3, #2
 8009e56:	bfcc      	ite	gt
 8009e58:	2400      	movgt	r4, #0
 8009e5a:	2401      	movle	r4, #1
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d863      	bhi.n	8009f28 <_dtoa_r+0x298>
 8009e60:	e8df f003 	tbb	[pc, r3]
 8009e64:	2b375452 	.word	0x2b375452
 8009e68:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009e6c:	441e      	add	r6, r3
 8009e6e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009e72:	2b20      	cmp	r3, #32
 8009e74:	bfc1      	itttt	gt
 8009e76:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009e7a:	409f      	lslgt	r7, r3
 8009e7c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009e80:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009e84:	bfd6      	itet	le
 8009e86:	f1c3 0320 	rsble	r3, r3, #32
 8009e8a:	ea47 0003 	orrgt.w	r0, r7, r3
 8009e8e:	fa04 f003 	lslle.w	r0, r4, r3
 8009e92:	f7f6 fb37 	bl	8000504 <__aeabi_ui2d>
 8009e96:	2201      	movs	r2, #1
 8009e98:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009e9c:	3e01      	subs	r6, #1
 8009e9e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009ea0:	e776      	b.n	8009d90 <_dtoa_r+0x100>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e7b7      	b.n	8009e16 <_dtoa_r+0x186>
 8009ea6:	9010      	str	r0, [sp, #64]	@ 0x40
 8009ea8:	e7b6      	b.n	8009e18 <_dtoa_r+0x188>
 8009eaa:	9b00      	ldr	r3, [sp, #0]
 8009eac:	1bdb      	subs	r3, r3, r7
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	427b      	negs	r3, r7
 8009eb2:	9308      	str	r3, [sp, #32]
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	930d      	str	r3, [sp, #52]	@ 0x34
 8009eb8:	e7c3      	b.n	8009e42 <_dtoa_r+0x1b2>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ebe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ec0:	eb07 0b03 	add.w	fp, r7, r3
 8009ec4:	f10b 0301 	add.w	r3, fp, #1
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	9303      	str	r3, [sp, #12]
 8009ecc:	bfb8      	it	lt
 8009ece:	2301      	movlt	r3, #1
 8009ed0:	e006      	b.n	8009ee0 <_dtoa_r+0x250>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ed6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	dd28      	ble.n	8009f2e <_dtoa_r+0x29e>
 8009edc:	469b      	mov	fp, r3
 8009ede:	9303      	str	r3, [sp, #12]
 8009ee0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	2204      	movs	r2, #4
 8009ee8:	f102 0514 	add.w	r5, r2, #20
 8009eec:	429d      	cmp	r5, r3
 8009eee:	d926      	bls.n	8009f3e <_dtoa_r+0x2ae>
 8009ef0:	6041      	str	r1, [r0, #4]
 8009ef2:	4648      	mov	r0, r9
 8009ef4:	f000 fd9c 	bl	800aa30 <_Balloc>
 8009ef8:	4682      	mov	sl, r0
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d142      	bne.n	8009f84 <_dtoa_r+0x2f4>
 8009efe:	4b1e      	ldr	r3, [pc, #120]	@ (8009f78 <_dtoa_r+0x2e8>)
 8009f00:	4602      	mov	r2, r0
 8009f02:	f240 11af 	movw	r1, #431	@ 0x1af
 8009f06:	e6da      	b.n	8009cbe <_dtoa_r+0x2e>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	e7e3      	b.n	8009ed4 <_dtoa_r+0x244>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	e7d5      	b.n	8009ebc <_dtoa_r+0x22c>
 8009f10:	2401      	movs	r4, #1
 8009f12:	2300      	movs	r3, #0
 8009f14:	9307      	str	r3, [sp, #28]
 8009f16:	9409      	str	r4, [sp, #36]	@ 0x24
 8009f18:	f04f 3bff 	mov.w	fp, #4294967295
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009f22:	2312      	movs	r3, #18
 8009f24:	920c      	str	r2, [sp, #48]	@ 0x30
 8009f26:	e7db      	b.n	8009ee0 <_dtoa_r+0x250>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f2c:	e7f4      	b.n	8009f18 <_dtoa_r+0x288>
 8009f2e:	f04f 0b01 	mov.w	fp, #1
 8009f32:	f8cd b00c 	str.w	fp, [sp, #12]
 8009f36:	465b      	mov	r3, fp
 8009f38:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009f3c:	e7d0      	b.n	8009ee0 <_dtoa_r+0x250>
 8009f3e:	3101      	adds	r1, #1
 8009f40:	0052      	lsls	r2, r2, #1
 8009f42:	e7d1      	b.n	8009ee8 <_dtoa_r+0x258>
 8009f44:	f3af 8000 	nop.w
 8009f48:	636f4361 	.word	0x636f4361
 8009f4c:	3fd287a7 	.word	0x3fd287a7
 8009f50:	8b60c8b3 	.word	0x8b60c8b3
 8009f54:	3fc68a28 	.word	0x3fc68a28
 8009f58:	509f79fb 	.word	0x509f79fb
 8009f5c:	3fd34413 	.word	0x3fd34413
 8009f60:	0800e496 	.word	0x0800e496
 8009f64:	0800e4ad 	.word	0x0800e4ad
 8009f68:	7ff00000 	.word	0x7ff00000
 8009f6c:	0800e461 	.word	0x0800e461
 8009f70:	3ff80000 	.word	0x3ff80000
 8009f74:	0800e660 	.word	0x0800e660
 8009f78:	0800e505 	.word	0x0800e505
 8009f7c:	0800e492 	.word	0x0800e492
 8009f80:	0800e460 	.word	0x0800e460
 8009f84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009f88:	6018      	str	r0, [r3, #0]
 8009f8a:	9b03      	ldr	r3, [sp, #12]
 8009f8c:	2b0e      	cmp	r3, #14
 8009f8e:	f200 80a1 	bhi.w	800a0d4 <_dtoa_r+0x444>
 8009f92:	2c00      	cmp	r4, #0
 8009f94:	f000 809e 	beq.w	800a0d4 <_dtoa_r+0x444>
 8009f98:	2f00      	cmp	r7, #0
 8009f9a:	dd33      	ble.n	800a004 <_dtoa_r+0x374>
 8009f9c:	4b9c      	ldr	r3, [pc, #624]	@ (800a210 <_dtoa_r+0x580>)
 8009f9e:	f007 020f 	and.w	r2, r7, #15
 8009fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fa6:	ed93 7b00 	vldr	d7, [r3]
 8009faa:	05f8      	lsls	r0, r7, #23
 8009fac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009fb0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009fb4:	d516      	bpl.n	8009fe4 <_dtoa_r+0x354>
 8009fb6:	4b97      	ldr	r3, [pc, #604]	@ (800a214 <_dtoa_r+0x584>)
 8009fb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009fbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fc0:	f7f6 fc44 	bl	800084c <__aeabi_ddiv>
 8009fc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fc8:	f004 040f 	and.w	r4, r4, #15
 8009fcc:	2603      	movs	r6, #3
 8009fce:	4d91      	ldr	r5, [pc, #580]	@ (800a214 <_dtoa_r+0x584>)
 8009fd0:	b954      	cbnz	r4, 8009fe8 <_dtoa_r+0x358>
 8009fd2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009fd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fda:	f7f6 fc37 	bl	800084c <__aeabi_ddiv>
 8009fde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fe2:	e028      	b.n	800a036 <_dtoa_r+0x3a6>
 8009fe4:	2602      	movs	r6, #2
 8009fe6:	e7f2      	b.n	8009fce <_dtoa_r+0x33e>
 8009fe8:	07e1      	lsls	r1, r4, #31
 8009fea:	d508      	bpl.n	8009ffe <_dtoa_r+0x36e>
 8009fec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009ff0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ff4:	f7f6 fb00 	bl	80005f8 <__aeabi_dmul>
 8009ff8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009ffc:	3601      	adds	r6, #1
 8009ffe:	1064      	asrs	r4, r4, #1
 800a000:	3508      	adds	r5, #8
 800a002:	e7e5      	b.n	8009fd0 <_dtoa_r+0x340>
 800a004:	f000 80af 	beq.w	800a166 <_dtoa_r+0x4d6>
 800a008:	427c      	negs	r4, r7
 800a00a:	4b81      	ldr	r3, [pc, #516]	@ (800a210 <_dtoa_r+0x580>)
 800a00c:	4d81      	ldr	r5, [pc, #516]	@ (800a214 <_dtoa_r+0x584>)
 800a00e:	f004 020f 	and.w	r2, r4, #15
 800a012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a01e:	f7f6 faeb 	bl	80005f8 <__aeabi_dmul>
 800a022:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a026:	1124      	asrs	r4, r4, #4
 800a028:	2300      	movs	r3, #0
 800a02a:	2602      	movs	r6, #2
 800a02c:	2c00      	cmp	r4, #0
 800a02e:	f040 808f 	bne.w	800a150 <_dtoa_r+0x4c0>
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1d3      	bne.n	8009fde <_dtoa_r+0x34e>
 800a036:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a038:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f000 8094 	beq.w	800a16a <_dtoa_r+0x4da>
 800a042:	4b75      	ldr	r3, [pc, #468]	@ (800a218 <_dtoa_r+0x588>)
 800a044:	2200      	movs	r2, #0
 800a046:	4620      	mov	r0, r4
 800a048:	4629      	mov	r1, r5
 800a04a:	f7f6 fd47 	bl	8000adc <__aeabi_dcmplt>
 800a04e:	2800      	cmp	r0, #0
 800a050:	f000 808b 	beq.w	800a16a <_dtoa_r+0x4da>
 800a054:	9b03      	ldr	r3, [sp, #12]
 800a056:	2b00      	cmp	r3, #0
 800a058:	f000 8087 	beq.w	800a16a <_dtoa_r+0x4da>
 800a05c:	f1bb 0f00 	cmp.w	fp, #0
 800a060:	dd34      	ble.n	800a0cc <_dtoa_r+0x43c>
 800a062:	4620      	mov	r0, r4
 800a064:	4b6d      	ldr	r3, [pc, #436]	@ (800a21c <_dtoa_r+0x58c>)
 800a066:	2200      	movs	r2, #0
 800a068:	4629      	mov	r1, r5
 800a06a:	f7f6 fac5 	bl	80005f8 <__aeabi_dmul>
 800a06e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a072:	f107 38ff 	add.w	r8, r7, #4294967295
 800a076:	3601      	adds	r6, #1
 800a078:	465c      	mov	r4, fp
 800a07a:	4630      	mov	r0, r6
 800a07c:	f7f6 fa52 	bl	8000524 <__aeabi_i2d>
 800a080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a084:	f7f6 fab8 	bl	80005f8 <__aeabi_dmul>
 800a088:	4b65      	ldr	r3, [pc, #404]	@ (800a220 <_dtoa_r+0x590>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	f7f6 f8fe 	bl	800028c <__adddf3>
 800a090:	4605      	mov	r5, r0
 800a092:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a096:	2c00      	cmp	r4, #0
 800a098:	d16a      	bne.n	800a170 <_dtoa_r+0x4e0>
 800a09a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a09e:	4b61      	ldr	r3, [pc, #388]	@ (800a224 <_dtoa_r+0x594>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f7f6 f8f1 	bl	8000288 <__aeabi_dsub>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a0ae:	462a      	mov	r2, r5
 800a0b0:	4633      	mov	r3, r6
 800a0b2:	f7f6 fd31 	bl	8000b18 <__aeabi_dcmpgt>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	f040 8298 	bne.w	800a5ec <_dtoa_r+0x95c>
 800a0bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0c0:	462a      	mov	r2, r5
 800a0c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a0c6:	f7f6 fd09 	bl	8000adc <__aeabi_dcmplt>
 800a0ca:	bb38      	cbnz	r0, 800a11c <_dtoa_r+0x48c>
 800a0cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a0d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a0d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f2c0 8157 	blt.w	800a38a <_dtoa_r+0x6fa>
 800a0dc:	2f0e      	cmp	r7, #14
 800a0de:	f300 8154 	bgt.w	800a38a <_dtoa_r+0x6fa>
 800a0e2:	4b4b      	ldr	r3, [pc, #300]	@ (800a210 <_dtoa_r+0x580>)
 800a0e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0e8:	ed93 7b00 	vldr	d7, [r3]
 800a0ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	ed8d 7b00 	vstr	d7, [sp]
 800a0f4:	f280 80e5 	bge.w	800a2c2 <_dtoa_r+0x632>
 800a0f8:	9b03      	ldr	r3, [sp, #12]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f300 80e1 	bgt.w	800a2c2 <_dtoa_r+0x632>
 800a100:	d10c      	bne.n	800a11c <_dtoa_r+0x48c>
 800a102:	4b48      	ldr	r3, [pc, #288]	@ (800a224 <_dtoa_r+0x594>)
 800a104:	2200      	movs	r2, #0
 800a106:	ec51 0b17 	vmov	r0, r1, d7
 800a10a:	f7f6 fa75 	bl	80005f8 <__aeabi_dmul>
 800a10e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a112:	f7f6 fcf7 	bl	8000b04 <__aeabi_dcmpge>
 800a116:	2800      	cmp	r0, #0
 800a118:	f000 8266 	beq.w	800a5e8 <_dtoa_r+0x958>
 800a11c:	2400      	movs	r4, #0
 800a11e:	4625      	mov	r5, r4
 800a120:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a122:	4656      	mov	r6, sl
 800a124:	ea6f 0803 	mvn.w	r8, r3
 800a128:	2700      	movs	r7, #0
 800a12a:	4621      	mov	r1, r4
 800a12c:	4648      	mov	r0, r9
 800a12e:	f000 fcbf 	bl	800aab0 <_Bfree>
 800a132:	2d00      	cmp	r5, #0
 800a134:	f000 80bd 	beq.w	800a2b2 <_dtoa_r+0x622>
 800a138:	b12f      	cbz	r7, 800a146 <_dtoa_r+0x4b6>
 800a13a:	42af      	cmp	r7, r5
 800a13c:	d003      	beq.n	800a146 <_dtoa_r+0x4b6>
 800a13e:	4639      	mov	r1, r7
 800a140:	4648      	mov	r0, r9
 800a142:	f000 fcb5 	bl	800aab0 <_Bfree>
 800a146:	4629      	mov	r1, r5
 800a148:	4648      	mov	r0, r9
 800a14a:	f000 fcb1 	bl	800aab0 <_Bfree>
 800a14e:	e0b0      	b.n	800a2b2 <_dtoa_r+0x622>
 800a150:	07e2      	lsls	r2, r4, #31
 800a152:	d505      	bpl.n	800a160 <_dtoa_r+0x4d0>
 800a154:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a158:	f7f6 fa4e 	bl	80005f8 <__aeabi_dmul>
 800a15c:	3601      	adds	r6, #1
 800a15e:	2301      	movs	r3, #1
 800a160:	1064      	asrs	r4, r4, #1
 800a162:	3508      	adds	r5, #8
 800a164:	e762      	b.n	800a02c <_dtoa_r+0x39c>
 800a166:	2602      	movs	r6, #2
 800a168:	e765      	b.n	800a036 <_dtoa_r+0x3a6>
 800a16a:	9c03      	ldr	r4, [sp, #12]
 800a16c:	46b8      	mov	r8, r7
 800a16e:	e784      	b.n	800a07a <_dtoa_r+0x3ea>
 800a170:	4b27      	ldr	r3, [pc, #156]	@ (800a210 <_dtoa_r+0x580>)
 800a172:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a174:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a178:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a17c:	4454      	add	r4, sl
 800a17e:	2900      	cmp	r1, #0
 800a180:	d054      	beq.n	800a22c <_dtoa_r+0x59c>
 800a182:	4929      	ldr	r1, [pc, #164]	@ (800a228 <_dtoa_r+0x598>)
 800a184:	2000      	movs	r0, #0
 800a186:	f7f6 fb61 	bl	800084c <__aeabi_ddiv>
 800a18a:	4633      	mov	r3, r6
 800a18c:	462a      	mov	r2, r5
 800a18e:	f7f6 f87b 	bl	8000288 <__aeabi_dsub>
 800a192:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a196:	4656      	mov	r6, sl
 800a198:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a19c:	f7f6 fcdc 	bl	8000b58 <__aeabi_d2iz>
 800a1a0:	4605      	mov	r5, r0
 800a1a2:	f7f6 f9bf 	bl	8000524 <__aeabi_i2d>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1ae:	f7f6 f86b 	bl	8000288 <__aeabi_dsub>
 800a1b2:	3530      	adds	r5, #48	@ 0x30
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1bc:	f806 5b01 	strb.w	r5, [r6], #1
 800a1c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a1c4:	f7f6 fc8a 	bl	8000adc <__aeabi_dcmplt>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d172      	bne.n	800a2b2 <_dtoa_r+0x622>
 800a1cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1d0:	4911      	ldr	r1, [pc, #68]	@ (800a218 <_dtoa_r+0x588>)
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	f7f6 f858 	bl	8000288 <__aeabi_dsub>
 800a1d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a1dc:	f7f6 fc7e 	bl	8000adc <__aeabi_dcmplt>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	f040 80b4 	bne.w	800a34e <_dtoa_r+0x6be>
 800a1e6:	42a6      	cmp	r6, r4
 800a1e8:	f43f af70 	beq.w	800a0cc <_dtoa_r+0x43c>
 800a1ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a1f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a21c <_dtoa_r+0x58c>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f7f6 fa00 	bl	80005f8 <__aeabi_dmul>
 800a1f8:	4b08      	ldr	r3, [pc, #32]	@ (800a21c <_dtoa_r+0x58c>)
 800a1fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a1fe:	2200      	movs	r2, #0
 800a200:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a204:	f7f6 f9f8 	bl	80005f8 <__aeabi_dmul>
 800a208:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a20c:	e7c4      	b.n	800a198 <_dtoa_r+0x508>
 800a20e:	bf00      	nop
 800a210:	0800e660 	.word	0x0800e660
 800a214:	0800e638 	.word	0x0800e638
 800a218:	3ff00000 	.word	0x3ff00000
 800a21c:	40240000 	.word	0x40240000
 800a220:	401c0000 	.word	0x401c0000
 800a224:	40140000 	.word	0x40140000
 800a228:	3fe00000 	.word	0x3fe00000
 800a22c:	4631      	mov	r1, r6
 800a22e:	4628      	mov	r0, r5
 800a230:	f7f6 f9e2 	bl	80005f8 <__aeabi_dmul>
 800a234:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a238:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a23a:	4656      	mov	r6, sl
 800a23c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a240:	f7f6 fc8a 	bl	8000b58 <__aeabi_d2iz>
 800a244:	4605      	mov	r5, r0
 800a246:	f7f6 f96d 	bl	8000524 <__aeabi_i2d>
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a252:	f7f6 f819 	bl	8000288 <__aeabi_dsub>
 800a256:	3530      	adds	r5, #48	@ 0x30
 800a258:	f806 5b01 	strb.w	r5, [r6], #1
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	42a6      	cmp	r6, r4
 800a262:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a266:	f04f 0200 	mov.w	r2, #0
 800a26a:	d124      	bne.n	800a2b6 <_dtoa_r+0x626>
 800a26c:	4baf      	ldr	r3, [pc, #700]	@ (800a52c <_dtoa_r+0x89c>)
 800a26e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a272:	f7f6 f80b 	bl	800028c <__adddf3>
 800a276:	4602      	mov	r2, r0
 800a278:	460b      	mov	r3, r1
 800a27a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a27e:	f7f6 fc4b 	bl	8000b18 <__aeabi_dcmpgt>
 800a282:	2800      	cmp	r0, #0
 800a284:	d163      	bne.n	800a34e <_dtoa_r+0x6be>
 800a286:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a28a:	49a8      	ldr	r1, [pc, #672]	@ (800a52c <_dtoa_r+0x89c>)
 800a28c:	2000      	movs	r0, #0
 800a28e:	f7f5 fffb 	bl	8000288 <__aeabi_dsub>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a29a:	f7f6 fc1f 	bl	8000adc <__aeabi_dcmplt>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	f43f af14 	beq.w	800a0cc <_dtoa_r+0x43c>
 800a2a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a2a6:	1e73      	subs	r3, r6, #1
 800a2a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a2aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a2ae:	2b30      	cmp	r3, #48	@ 0x30
 800a2b0:	d0f8      	beq.n	800a2a4 <_dtoa_r+0x614>
 800a2b2:	4647      	mov	r7, r8
 800a2b4:	e03b      	b.n	800a32e <_dtoa_r+0x69e>
 800a2b6:	4b9e      	ldr	r3, [pc, #632]	@ (800a530 <_dtoa_r+0x8a0>)
 800a2b8:	f7f6 f99e 	bl	80005f8 <__aeabi_dmul>
 800a2bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2c0:	e7bc      	b.n	800a23c <_dtoa_r+0x5ac>
 800a2c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a2c6:	4656      	mov	r6, sl
 800a2c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	f7f6 fabc 	bl	800084c <__aeabi_ddiv>
 800a2d4:	f7f6 fc40 	bl	8000b58 <__aeabi_d2iz>
 800a2d8:	4680      	mov	r8, r0
 800a2da:	f7f6 f923 	bl	8000524 <__aeabi_i2d>
 800a2de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2e2:	f7f6 f989 	bl	80005f8 <__aeabi_dmul>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a2f2:	f7f5 ffc9 	bl	8000288 <__aeabi_dsub>
 800a2f6:	f806 4b01 	strb.w	r4, [r6], #1
 800a2fa:	9d03      	ldr	r5, [sp, #12]
 800a2fc:	eba6 040a 	sub.w	r4, r6, sl
 800a300:	42a5      	cmp	r5, r4
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	d133      	bne.n	800a370 <_dtoa_r+0x6e0>
 800a308:	f7f5 ffc0 	bl	800028c <__adddf3>
 800a30c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a310:	4604      	mov	r4, r0
 800a312:	460d      	mov	r5, r1
 800a314:	f7f6 fc00 	bl	8000b18 <__aeabi_dcmpgt>
 800a318:	b9c0      	cbnz	r0, 800a34c <_dtoa_r+0x6bc>
 800a31a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a31e:	4620      	mov	r0, r4
 800a320:	4629      	mov	r1, r5
 800a322:	f7f6 fbd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a326:	b110      	cbz	r0, 800a32e <_dtoa_r+0x69e>
 800a328:	f018 0f01 	tst.w	r8, #1
 800a32c:	d10e      	bne.n	800a34c <_dtoa_r+0x6bc>
 800a32e:	9902      	ldr	r1, [sp, #8]
 800a330:	4648      	mov	r0, r9
 800a332:	f000 fbbd 	bl	800aab0 <_Bfree>
 800a336:	2300      	movs	r3, #0
 800a338:	7033      	strb	r3, [r6, #0]
 800a33a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a33c:	3701      	adds	r7, #1
 800a33e:	601f      	str	r7, [r3, #0]
 800a340:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a342:	2b00      	cmp	r3, #0
 800a344:	f000 824b 	beq.w	800a7de <_dtoa_r+0xb4e>
 800a348:	601e      	str	r6, [r3, #0]
 800a34a:	e248      	b.n	800a7de <_dtoa_r+0xb4e>
 800a34c:	46b8      	mov	r8, r7
 800a34e:	4633      	mov	r3, r6
 800a350:	461e      	mov	r6, r3
 800a352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a356:	2a39      	cmp	r2, #57	@ 0x39
 800a358:	d106      	bne.n	800a368 <_dtoa_r+0x6d8>
 800a35a:	459a      	cmp	sl, r3
 800a35c:	d1f8      	bne.n	800a350 <_dtoa_r+0x6c0>
 800a35e:	2230      	movs	r2, #48	@ 0x30
 800a360:	f108 0801 	add.w	r8, r8, #1
 800a364:	f88a 2000 	strb.w	r2, [sl]
 800a368:	781a      	ldrb	r2, [r3, #0]
 800a36a:	3201      	adds	r2, #1
 800a36c:	701a      	strb	r2, [r3, #0]
 800a36e:	e7a0      	b.n	800a2b2 <_dtoa_r+0x622>
 800a370:	4b6f      	ldr	r3, [pc, #444]	@ (800a530 <_dtoa_r+0x8a0>)
 800a372:	2200      	movs	r2, #0
 800a374:	f7f6 f940 	bl	80005f8 <__aeabi_dmul>
 800a378:	2200      	movs	r2, #0
 800a37a:	2300      	movs	r3, #0
 800a37c:	4604      	mov	r4, r0
 800a37e:	460d      	mov	r5, r1
 800a380:	f7f6 fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a384:	2800      	cmp	r0, #0
 800a386:	d09f      	beq.n	800a2c8 <_dtoa_r+0x638>
 800a388:	e7d1      	b.n	800a32e <_dtoa_r+0x69e>
 800a38a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a38c:	2a00      	cmp	r2, #0
 800a38e:	f000 80ea 	beq.w	800a566 <_dtoa_r+0x8d6>
 800a392:	9a07      	ldr	r2, [sp, #28]
 800a394:	2a01      	cmp	r2, #1
 800a396:	f300 80cd 	bgt.w	800a534 <_dtoa_r+0x8a4>
 800a39a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a39c:	2a00      	cmp	r2, #0
 800a39e:	f000 80c1 	beq.w	800a524 <_dtoa_r+0x894>
 800a3a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a3a6:	9c08      	ldr	r4, [sp, #32]
 800a3a8:	9e00      	ldr	r6, [sp, #0]
 800a3aa:	9a00      	ldr	r2, [sp, #0]
 800a3ac:	441a      	add	r2, r3
 800a3ae:	9200      	str	r2, [sp, #0]
 800a3b0:	9a06      	ldr	r2, [sp, #24]
 800a3b2:	2101      	movs	r1, #1
 800a3b4:	441a      	add	r2, r3
 800a3b6:	4648      	mov	r0, r9
 800a3b8:	9206      	str	r2, [sp, #24]
 800a3ba:	f000 fc77 	bl	800acac <__i2b>
 800a3be:	4605      	mov	r5, r0
 800a3c0:	b166      	cbz	r6, 800a3dc <_dtoa_r+0x74c>
 800a3c2:	9b06      	ldr	r3, [sp, #24]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	dd09      	ble.n	800a3dc <_dtoa_r+0x74c>
 800a3c8:	42b3      	cmp	r3, r6
 800a3ca:	9a00      	ldr	r2, [sp, #0]
 800a3cc:	bfa8      	it	ge
 800a3ce:	4633      	movge	r3, r6
 800a3d0:	1ad2      	subs	r2, r2, r3
 800a3d2:	9200      	str	r2, [sp, #0]
 800a3d4:	9a06      	ldr	r2, [sp, #24]
 800a3d6:	1af6      	subs	r6, r6, r3
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	9306      	str	r3, [sp, #24]
 800a3dc:	9b08      	ldr	r3, [sp, #32]
 800a3de:	b30b      	cbz	r3, 800a424 <_dtoa_r+0x794>
 800a3e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f000 80c6 	beq.w	800a574 <_dtoa_r+0x8e4>
 800a3e8:	2c00      	cmp	r4, #0
 800a3ea:	f000 80c0 	beq.w	800a56e <_dtoa_r+0x8de>
 800a3ee:	4629      	mov	r1, r5
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	4648      	mov	r0, r9
 800a3f4:	f000 fd12 	bl	800ae1c <__pow5mult>
 800a3f8:	9a02      	ldr	r2, [sp, #8]
 800a3fa:	4601      	mov	r1, r0
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	4648      	mov	r0, r9
 800a400:	f000 fc6a 	bl	800acd8 <__multiply>
 800a404:	9902      	ldr	r1, [sp, #8]
 800a406:	4680      	mov	r8, r0
 800a408:	4648      	mov	r0, r9
 800a40a:	f000 fb51 	bl	800aab0 <_Bfree>
 800a40e:	9b08      	ldr	r3, [sp, #32]
 800a410:	1b1b      	subs	r3, r3, r4
 800a412:	9308      	str	r3, [sp, #32]
 800a414:	f000 80b1 	beq.w	800a57a <_dtoa_r+0x8ea>
 800a418:	9a08      	ldr	r2, [sp, #32]
 800a41a:	4641      	mov	r1, r8
 800a41c:	4648      	mov	r0, r9
 800a41e:	f000 fcfd 	bl	800ae1c <__pow5mult>
 800a422:	9002      	str	r0, [sp, #8]
 800a424:	2101      	movs	r1, #1
 800a426:	4648      	mov	r0, r9
 800a428:	f000 fc40 	bl	800acac <__i2b>
 800a42c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a42e:	4604      	mov	r4, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	f000 81d8 	beq.w	800a7e6 <_dtoa_r+0xb56>
 800a436:	461a      	mov	r2, r3
 800a438:	4601      	mov	r1, r0
 800a43a:	4648      	mov	r0, r9
 800a43c:	f000 fcee 	bl	800ae1c <__pow5mult>
 800a440:	9b07      	ldr	r3, [sp, #28]
 800a442:	2b01      	cmp	r3, #1
 800a444:	4604      	mov	r4, r0
 800a446:	f300 809f 	bgt.w	800a588 <_dtoa_r+0x8f8>
 800a44a:	9b04      	ldr	r3, [sp, #16]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f040 8097 	bne.w	800a580 <_dtoa_r+0x8f0>
 800a452:	9b05      	ldr	r3, [sp, #20]
 800a454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f040 8093 	bne.w	800a584 <_dtoa_r+0x8f4>
 800a45e:	9b05      	ldr	r3, [sp, #20]
 800a460:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a464:	0d1b      	lsrs	r3, r3, #20
 800a466:	051b      	lsls	r3, r3, #20
 800a468:	b133      	cbz	r3, 800a478 <_dtoa_r+0x7e8>
 800a46a:	9b00      	ldr	r3, [sp, #0]
 800a46c:	3301      	adds	r3, #1
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	9b06      	ldr	r3, [sp, #24]
 800a472:	3301      	adds	r3, #1
 800a474:	9306      	str	r3, [sp, #24]
 800a476:	2301      	movs	r3, #1
 800a478:	9308      	str	r3, [sp, #32]
 800a47a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f000 81b8 	beq.w	800a7f2 <_dtoa_r+0xb62>
 800a482:	6923      	ldr	r3, [r4, #16]
 800a484:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a488:	6918      	ldr	r0, [r3, #16]
 800a48a:	f000 fbc3 	bl	800ac14 <__hi0bits>
 800a48e:	f1c0 0020 	rsb	r0, r0, #32
 800a492:	9b06      	ldr	r3, [sp, #24]
 800a494:	4418      	add	r0, r3
 800a496:	f010 001f 	ands.w	r0, r0, #31
 800a49a:	f000 8082 	beq.w	800a5a2 <_dtoa_r+0x912>
 800a49e:	f1c0 0320 	rsb	r3, r0, #32
 800a4a2:	2b04      	cmp	r3, #4
 800a4a4:	dd73      	ble.n	800a58e <_dtoa_r+0x8fe>
 800a4a6:	9b00      	ldr	r3, [sp, #0]
 800a4a8:	f1c0 001c 	rsb	r0, r0, #28
 800a4ac:	4403      	add	r3, r0
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	9b06      	ldr	r3, [sp, #24]
 800a4b2:	4403      	add	r3, r0
 800a4b4:	4406      	add	r6, r0
 800a4b6:	9306      	str	r3, [sp, #24]
 800a4b8:	9b00      	ldr	r3, [sp, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	dd05      	ble.n	800a4ca <_dtoa_r+0x83a>
 800a4be:	9902      	ldr	r1, [sp, #8]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	4648      	mov	r0, r9
 800a4c4:	f000 fd04 	bl	800aed0 <__lshift>
 800a4c8:	9002      	str	r0, [sp, #8]
 800a4ca:	9b06      	ldr	r3, [sp, #24]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	dd05      	ble.n	800a4dc <_dtoa_r+0x84c>
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	4648      	mov	r0, r9
 800a4d6:	f000 fcfb 	bl	800aed0 <__lshift>
 800a4da:	4604      	mov	r4, r0
 800a4dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d061      	beq.n	800a5a6 <_dtoa_r+0x916>
 800a4e2:	9802      	ldr	r0, [sp, #8]
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	f000 fd5f 	bl	800afa8 <__mcmp>
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	da5b      	bge.n	800a5a6 <_dtoa_r+0x916>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	9902      	ldr	r1, [sp, #8]
 800a4f2:	220a      	movs	r2, #10
 800a4f4:	4648      	mov	r0, r9
 800a4f6:	f000 fafd 	bl	800aaf4 <__multadd>
 800a4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4fc:	9002      	str	r0, [sp, #8]
 800a4fe:	f107 38ff 	add.w	r8, r7, #4294967295
 800a502:	2b00      	cmp	r3, #0
 800a504:	f000 8177 	beq.w	800a7f6 <_dtoa_r+0xb66>
 800a508:	4629      	mov	r1, r5
 800a50a:	2300      	movs	r3, #0
 800a50c:	220a      	movs	r2, #10
 800a50e:	4648      	mov	r0, r9
 800a510:	f000 faf0 	bl	800aaf4 <__multadd>
 800a514:	f1bb 0f00 	cmp.w	fp, #0
 800a518:	4605      	mov	r5, r0
 800a51a:	dc6f      	bgt.n	800a5fc <_dtoa_r+0x96c>
 800a51c:	9b07      	ldr	r3, [sp, #28]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	dc49      	bgt.n	800a5b6 <_dtoa_r+0x926>
 800a522:	e06b      	b.n	800a5fc <_dtoa_r+0x96c>
 800a524:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a526:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a52a:	e73c      	b.n	800a3a6 <_dtoa_r+0x716>
 800a52c:	3fe00000 	.word	0x3fe00000
 800a530:	40240000 	.word	0x40240000
 800a534:	9b03      	ldr	r3, [sp, #12]
 800a536:	1e5c      	subs	r4, r3, #1
 800a538:	9b08      	ldr	r3, [sp, #32]
 800a53a:	42a3      	cmp	r3, r4
 800a53c:	db09      	blt.n	800a552 <_dtoa_r+0x8c2>
 800a53e:	1b1c      	subs	r4, r3, r4
 800a540:	9b03      	ldr	r3, [sp, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	f6bf af30 	bge.w	800a3a8 <_dtoa_r+0x718>
 800a548:	9b00      	ldr	r3, [sp, #0]
 800a54a:	9a03      	ldr	r2, [sp, #12]
 800a54c:	1a9e      	subs	r6, r3, r2
 800a54e:	2300      	movs	r3, #0
 800a550:	e72b      	b.n	800a3aa <_dtoa_r+0x71a>
 800a552:	9b08      	ldr	r3, [sp, #32]
 800a554:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a556:	9408      	str	r4, [sp, #32]
 800a558:	1ae3      	subs	r3, r4, r3
 800a55a:	441a      	add	r2, r3
 800a55c:	9e00      	ldr	r6, [sp, #0]
 800a55e:	9b03      	ldr	r3, [sp, #12]
 800a560:	920d      	str	r2, [sp, #52]	@ 0x34
 800a562:	2400      	movs	r4, #0
 800a564:	e721      	b.n	800a3aa <_dtoa_r+0x71a>
 800a566:	9c08      	ldr	r4, [sp, #32]
 800a568:	9e00      	ldr	r6, [sp, #0]
 800a56a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a56c:	e728      	b.n	800a3c0 <_dtoa_r+0x730>
 800a56e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a572:	e751      	b.n	800a418 <_dtoa_r+0x788>
 800a574:	9a08      	ldr	r2, [sp, #32]
 800a576:	9902      	ldr	r1, [sp, #8]
 800a578:	e750      	b.n	800a41c <_dtoa_r+0x78c>
 800a57a:	f8cd 8008 	str.w	r8, [sp, #8]
 800a57e:	e751      	b.n	800a424 <_dtoa_r+0x794>
 800a580:	2300      	movs	r3, #0
 800a582:	e779      	b.n	800a478 <_dtoa_r+0x7e8>
 800a584:	9b04      	ldr	r3, [sp, #16]
 800a586:	e777      	b.n	800a478 <_dtoa_r+0x7e8>
 800a588:	2300      	movs	r3, #0
 800a58a:	9308      	str	r3, [sp, #32]
 800a58c:	e779      	b.n	800a482 <_dtoa_r+0x7f2>
 800a58e:	d093      	beq.n	800a4b8 <_dtoa_r+0x828>
 800a590:	9a00      	ldr	r2, [sp, #0]
 800a592:	331c      	adds	r3, #28
 800a594:	441a      	add	r2, r3
 800a596:	9200      	str	r2, [sp, #0]
 800a598:	9a06      	ldr	r2, [sp, #24]
 800a59a:	441a      	add	r2, r3
 800a59c:	441e      	add	r6, r3
 800a59e:	9206      	str	r2, [sp, #24]
 800a5a0:	e78a      	b.n	800a4b8 <_dtoa_r+0x828>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	e7f4      	b.n	800a590 <_dtoa_r+0x900>
 800a5a6:	9b03      	ldr	r3, [sp, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	46b8      	mov	r8, r7
 800a5ac:	dc20      	bgt.n	800a5f0 <_dtoa_r+0x960>
 800a5ae:	469b      	mov	fp, r3
 800a5b0:	9b07      	ldr	r3, [sp, #28]
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	dd1e      	ble.n	800a5f4 <_dtoa_r+0x964>
 800a5b6:	f1bb 0f00 	cmp.w	fp, #0
 800a5ba:	f47f adb1 	bne.w	800a120 <_dtoa_r+0x490>
 800a5be:	4621      	mov	r1, r4
 800a5c0:	465b      	mov	r3, fp
 800a5c2:	2205      	movs	r2, #5
 800a5c4:	4648      	mov	r0, r9
 800a5c6:	f000 fa95 	bl	800aaf4 <__multadd>
 800a5ca:	4601      	mov	r1, r0
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	9802      	ldr	r0, [sp, #8]
 800a5d0:	f000 fcea 	bl	800afa8 <__mcmp>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	f77f ada3 	ble.w	800a120 <_dtoa_r+0x490>
 800a5da:	4656      	mov	r6, sl
 800a5dc:	2331      	movs	r3, #49	@ 0x31
 800a5de:	f806 3b01 	strb.w	r3, [r6], #1
 800a5e2:	f108 0801 	add.w	r8, r8, #1
 800a5e6:	e59f      	b.n	800a128 <_dtoa_r+0x498>
 800a5e8:	9c03      	ldr	r4, [sp, #12]
 800a5ea:	46b8      	mov	r8, r7
 800a5ec:	4625      	mov	r5, r4
 800a5ee:	e7f4      	b.n	800a5da <_dtoa_r+0x94a>
 800a5f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a5f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 8101 	beq.w	800a7fe <_dtoa_r+0xb6e>
 800a5fc:	2e00      	cmp	r6, #0
 800a5fe:	dd05      	ble.n	800a60c <_dtoa_r+0x97c>
 800a600:	4629      	mov	r1, r5
 800a602:	4632      	mov	r2, r6
 800a604:	4648      	mov	r0, r9
 800a606:	f000 fc63 	bl	800aed0 <__lshift>
 800a60a:	4605      	mov	r5, r0
 800a60c:	9b08      	ldr	r3, [sp, #32]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d05c      	beq.n	800a6cc <_dtoa_r+0xa3c>
 800a612:	6869      	ldr	r1, [r5, #4]
 800a614:	4648      	mov	r0, r9
 800a616:	f000 fa0b 	bl	800aa30 <_Balloc>
 800a61a:	4606      	mov	r6, r0
 800a61c:	b928      	cbnz	r0, 800a62a <_dtoa_r+0x99a>
 800a61e:	4b82      	ldr	r3, [pc, #520]	@ (800a828 <_dtoa_r+0xb98>)
 800a620:	4602      	mov	r2, r0
 800a622:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a626:	f7ff bb4a 	b.w	8009cbe <_dtoa_r+0x2e>
 800a62a:	692a      	ldr	r2, [r5, #16]
 800a62c:	3202      	adds	r2, #2
 800a62e:	0092      	lsls	r2, r2, #2
 800a630:	f105 010c 	add.w	r1, r5, #12
 800a634:	300c      	adds	r0, #12
 800a636:	f7ff fa8e 	bl	8009b56 <memcpy>
 800a63a:	2201      	movs	r2, #1
 800a63c:	4631      	mov	r1, r6
 800a63e:	4648      	mov	r0, r9
 800a640:	f000 fc46 	bl	800aed0 <__lshift>
 800a644:	f10a 0301 	add.w	r3, sl, #1
 800a648:	9300      	str	r3, [sp, #0]
 800a64a:	eb0a 030b 	add.w	r3, sl, fp
 800a64e:	9308      	str	r3, [sp, #32]
 800a650:	9b04      	ldr	r3, [sp, #16]
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	462f      	mov	r7, r5
 800a658:	9306      	str	r3, [sp, #24]
 800a65a:	4605      	mov	r5, r0
 800a65c:	9b00      	ldr	r3, [sp, #0]
 800a65e:	9802      	ldr	r0, [sp, #8]
 800a660:	4621      	mov	r1, r4
 800a662:	f103 3bff 	add.w	fp, r3, #4294967295
 800a666:	f7ff fa8b 	bl	8009b80 <quorem>
 800a66a:	4603      	mov	r3, r0
 800a66c:	3330      	adds	r3, #48	@ 0x30
 800a66e:	9003      	str	r0, [sp, #12]
 800a670:	4639      	mov	r1, r7
 800a672:	9802      	ldr	r0, [sp, #8]
 800a674:	9309      	str	r3, [sp, #36]	@ 0x24
 800a676:	f000 fc97 	bl	800afa8 <__mcmp>
 800a67a:	462a      	mov	r2, r5
 800a67c:	9004      	str	r0, [sp, #16]
 800a67e:	4621      	mov	r1, r4
 800a680:	4648      	mov	r0, r9
 800a682:	f000 fcad 	bl	800afe0 <__mdiff>
 800a686:	68c2      	ldr	r2, [r0, #12]
 800a688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a68a:	4606      	mov	r6, r0
 800a68c:	bb02      	cbnz	r2, 800a6d0 <_dtoa_r+0xa40>
 800a68e:	4601      	mov	r1, r0
 800a690:	9802      	ldr	r0, [sp, #8]
 800a692:	f000 fc89 	bl	800afa8 <__mcmp>
 800a696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a698:	4602      	mov	r2, r0
 800a69a:	4631      	mov	r1, r6
 800a69c:	4648      	mov	r0, r9
 800a69e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a6a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6a2:	f000 fa05 	bl	800aab0 <_Bfree>
 800a6a6:	9b07      	ldr	r3, [sp, #28]
 800a6a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a6aa:	9e00      	ldr	r6, [sp, #0]
 800a6ac:	ea42 0103 	orr.w	r1, r2, r3
 800a6b0:	9b06      	ldr	r3, [sp, #24]
 800a6b2:	4319      	orrs	r1, r3
 800a6b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6b6:	d10d      	bne.n	800a6d4 <_dtoa_r+0xa44>
 800a6b8:	2b39      	cmp	r3, #57	@ 0x39
 800a6ba:	d027      	beq.n	800a70c <_dtoa_r+0xa7c>
 800a6bc:	9a04      	ldr	r2, [sp, #16]
 800a6be:	2a00      	cmp	r2, #0
 800a6c0:	dd01      	ble.n	800a6c6 <_dtoa_r+0xa36>
 800a6c2:	9b03      	ldr	r3, [sp, #12]
 800a6c4:	3331      	adds	r3, #49	@ 0x31
 800a6c6:	f88b 3000 	strb.w	r3, [fp]
 800a6ca:	e52e      	b.n	800a12a <_dtoa_r+0x49a>
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	e7b9      	b.n	800a644 <_dtoa_r+0x9b4>
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	e7e2      	b.n	800a69a <_dtoa_r+0xa0a>
 800a6d4:	9904      	ldr	r1, [sp, #16]
 800a6d6:	2900      	cmp	r1, #0
 800a6d8:	db04      	blt.n	800a6e4 <_dtoa_r+0xa54>
 800a6da:	9807      	ldr	r0, [sp, #28]
 800a6dc:	4301      	orrs	r1, r0
 800a6de:	9806      	ldr	r0, [sp, #24]
 800a6e0:	4301      	orrs	r1, r0
 800a6e2:	d120      	bne.n	800a726 <_dtoa_r+0xa96>
 800a6e4:	2a00      	cmp	r2, #0
 800a6e6:	ddee      	ble.n	800a6c6 <_dtoa_r+0xa36>
 800a6e8:	9902      	ldr	r1, [sp, #8]
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	4648      	mov	r0, r9
 800a6f0:	f000 fbee 	bl	800aed0 <__lshift>
 800a6f4:	4621      	mov	r1, r4
 800a6f6:	9002      	str	r0, [sp, #8]
 800a6f8:	f000 fc56 	bl	800afa8 <__mcmp>
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	9b00      	ldr	r3, [sp, #0]
 800a700:	dc02      	bgt.n	800a708 <_dtoa_r+0xa78>
 800a702:	d1e0      	bne.n	800a6c6 <_dtoa_r+0xa36>
 800a704:	07da      	lsls	r2, r3, #31
 800a706:	d5de      	bpl.n	800a6c6 <_dtoa_r+0xa36>
 800a708:	2b39      	cmp	r3, #57	@ 0x39
 800a70a:	d1da      	bne.n	800a6c2 <_dtoa_r+0xa32>
 800a70c:	2339      	movs	r3, #57	@ 0x39
 800a70e:	f88b 3000 	strb.w	r3, [fp]
 800a712:	4633      	mov	r3, r6
 800a714:	461e      	mov	r6, r3
 800a716:	3b01      	subs	r3, #1
 800a718:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a71c:	2a39      	cmp	r2, #57	@ 0x39
 800a71e:	d04e      	beq.n	800a7be <_dtoa_r+0xb2e>
 800a720:	3201      	adds	r2, #1
 800a722:	701a      	strb	r2, [r3, #0]
 800a724:	e501      	b.n	800a12a <_dtoa_r+0x49a>
 800a726:	2a00      	cmp	r2, #0
 800a728:	dd03      	ble.n	800a732 <_dtoa_r+0xaa2>
 800a72a:	2b39      	cmp	r3, #57	@ 0x39
 800a72c:	d0ee      	beq.n	800a70c <_dtoa_r+0xa7c>
 800a72e:	3301      	adds	r3, #1
 800a730:	e7c9      	b.n	800a6c6 <_dtoa_r+0xa36>
 800a732:	9a00      	ldr	r2, [sp, #0]
 800a734:	9908      	ldr	r1, [sp, #32]
 800a736:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a73a:	428a      	cmp	r2, r1
 800a73c:	d028      	beq.n	800a790 <_dtoa_r+0xb00>
 800a73e:	9902      	ldr	r1, [sp, #8]
 800a740:	2300      	movs	r3, #0
 800a742:	220a      	movs	r2, #10
 800a744:	4648      	mov	r0, r9
 800a746:	f000 f9d5 	bl	800aaf4 <__multadd>
 800a74a:	42af      	cmp	r7, r5
 800a74c:	9002      	str	r0, [sp, #8]
 800a74e:	f04f 0300 	mov.w	r3, #0
 800a752:	f04f 020a 	mov.w	r2, #10
 800a756:	4639      	mov	r1, r7
 800a758:	4648      	mov	r0, r9
 800a75a:	d107      	bne.n	800a76c <_dtoa_r+0xadc>
 800a75c:	f000 f9ca 	bl	800aaf4 <__multadd>
 800a760:	4607      	mov	r7, r0
 800a762:	4605      	mov	r5, r0
 800a764:	9b00      	ldr	r3, [sp, #0]
 800a766:	3301      	adds	r3, #1
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	e777      	b.n	800a65c <_dtoa_r+0x9cc>
 800a76c:	f000 f9c2 	bl	800aaf4 <__multadd>
 800a770:	4629      	mov	r1, r5
 800a772:	4607      	mov	r7, r0
 800a774:	2300      	movs	r3, #0
 800a776:	220a      	movs	r2, #10
 800a778:	4648      	mov	r0, r9
 800a77a:	f000 f9bb 	bl	800aaf4 <__multadd>
 800a77e:	4605      	mov	r5, r0
 800a780:	e7f0      	b.n	800a764 <_dtoa_r+0xad4>
 800a782:	f1bb 0f00 	cmp.w	fp, #0
 800a786:	bfcc      	ite	gt
 800a788:	465e      	movgt	r6, fp
 800a78a:	2601      	movle	r6, #1
 800a78c:	4456      	add	r6, sl
 800a78e:	2700      	movs	r7, #0
 800a790:	9902      	ldr	r1, [sp, #8]
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	2201      	movs	r2, #1
 800a796:	4648      	mov	r0, r9
 800a798:	f000 fb9a 	bl	800aed0 <__lshift>
 800a79c:	4621      	mov	r1, r4
 800a79e:	9002      	str	r0, [sp, #8]
 800a7a0:	f000 fc02 	bl	800afa8 <__mcmp>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	dcb4      	bgt.n	800a712 <_dtoa_r+0xa82>
 800a7a8:	d102      	bne.n	800a7b0 <_dtoa_r+0xb20>
 800a7aa:	9b00      	ldr	r3, [sp, #0]
 800a7ac:	07db      	lsls	r3, r3, #31
 800a7ae:	d4b0      	bmi.n	800a712 <_dtoa_r+0xa82>
 800a7b0:	4633      	mov	r3, r6
 800a7b2:	461e      	mov	r6, r3
 800a7b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7b8:	2a30      	cmp	r2, #48	@ 0x30
 800a7ba:	d0fa      	beq.n	800a7b2 <_dtoa_r+0xb22>
 800a7bc:	e4b5      	b.n	800a12a <_dtoa_r+0x49a>
 800a7be:	459a      	cmp	sl, r3
 800a7c0:	d1a8      	bne.n	800a714 <_dtoa_r+0xa84>
 800a7c2:	2331      	movs	r3, #49	@ 0x31
 800a7c4:	f108 0801 	add.w	r8, r8, #1
 800a7c8:	f88a 3000 	strb.w	r3, [sl]
 800a7cc:	e4ad      	b.n	800a12a <_dtoa_r+0x49a>
 800a7ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a7d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a82c <_dtoa_r+0xb9c>
 800a7d4:	b11b      	cbz	r3, 800a7de <_dtoa_r+0xb4e>
 800a7d6:	f10a 0308 	add.w	r3, sl, #8
 800a7da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a7dc:	6013      	str	r3, [r2, #0]
 800a7de:	4650      	mov	r0, sl
 800a7e0:	b017      	add	sp, #92	@ 0x5c
 800a7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e6:	9b07      	ldr	r3, [sp, #28]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	f77f ae2e 	ble.w	800a44a <_dtoa_r+0x7ba>
 800a7ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7f0:	9308      	str	r3, [sp, #32]
 800a7f2:	2001      	movs	r0, #1
 800a7f4:	e64d      	b.n	800a492 <_dtoa_r+0x802>
 800a7f6:	f1bb 0f00 	cmp.w	fp, #0
 800a7fa:	f77f aed9 	ble.w	800a5b0 <_dtoa_r+0x920>
 800a7fe:	4656      	mov	r6, sl
 800a800:	9802      	ldr	r0, [sp, #8]
 800a802:	4621      	mov	r1, r4
 800a804:	f7ff f9bc 	bl	8009b80 <quorem>
 800a808:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a80c:	f806 3b01 	strb.w	r3, [r6], #1
 800a810:	eba6 020a 	sub.w	r2, r6, sl
 800a814:	4593      	cmp	fp, r2
 800a816:	ddb4      	ble.n	800a782 <_dtoa_r+0xaf2>
 800a818:	9902      	ldr	r1, [sp, #8]
 800a81a:	2300      	movs	r3, #0
 800a81c:	220a      	movs	r2, #10
 800a81e:	4648      	mov	r0, r9
 800a820:	f000 f968 	bl	800aaf4 <__multadd>
 800a824:	9002      	str	r0, [sp, #8]
 800a826:	e7eb      	b.n	800a800 <_dtoa_r+0xb70>
 800a828:	0800e505 	.word	0x0800e505
 800a82c:	0800e489 	.word	0x0800e489

0800a830 <_free_r>:
 800a830:	b538      	push	{r3, r4, r5, lr}
 800a832:	4605      	mov	r5, r0
 800a834:	2900      	cmp	r1, #0
 800a836:	d041      	beq.n	800a8bc <_free_r+0x8c>
 800a838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a83c:	1f0c      	subs	r4, r1, #4
 800a83e:	2b00      	cmp	r3, #0
 800a840:	bfb8      	it	lt
 800a842:	18e4      	addlt	r4, r4, r3
 800a844:	f000 f8e8 	bl	800aa18 <__malloc_lock>
 800a848:	4a1d      	ldr	r2, [pc, #116]	@ (800a8c0 <_free_r+0x90>)
 800a84a:	6813      	ldr	r3, [r2, #0]
 800a84c:	b933      	cbnz	r3, 800a85c <_free_r+0x2c>
 800a84e:	6063      	str	r3, [r4, #4]
 800a850:	6014      	str	r4, [r2, #0]
 800a852:	4628      	mov	r0, r5
 800a854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a858:	f000 b8e4 	b.w	800aa24 <__malloc_unlock>
 800a85c:	42a3      	cmp	r3, r4
 800a85e:	d908      	bls.n	800a872 <_free_r+0x42>
 800a860:	6820      	ldr	r0, [r4, #0]
 800a862:	1821      	adds	r1, r4, r0
 800a864:	428b      	cmp	r3, r1
 800a866:	bf01      	itttt	eq
 800a868:	6819      	ldreq	r1, [r3, #0]
 800a86a:	685b      	ldreq	r3, [r3, #4]
 800a86c:	1809      	addeq	r1, r1, r0
 800a86e:	6021      	streq	r1, [r4, #0]
 800a870:	e7ed      	b.n	800a84e <_free_r+0x1e>
 800a872:	461a      	mov	r2, r3
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	b10b      	cbz	r3, 800a87c <_free_r+0x4c>
 800a878:	42a3      	cmp	r3, r4
 800a87a:	d9fa      	bls.n	800a872 <_free_r+0x42>
 800a87c:	6811      	ldr	r1, [r2, #0]
 800a87e:	1850      	adds	r0, r2, r1
 800a880:	42a0      	cmp	r0, r4
 800a882:	d10b      	bne.n	800a89c <_free_r+0x6c>
 800a884:	6820      	ldr	r0, [r4, #0]
 800a886:	4401      	add	r1, r0
 800a888:	1850      	adds	r0, r2, r1
 800a88a:	4283      	cmp	r3, r0
 800a88c:	6011      	str	r1, [r2, #0]
 800a88e:	d1e0      	bne.n	800a852 <_free_r+0x22>
 800a890:	6818      	ldr	r0, [r3, #0]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	6053      	str	r3, [r2, #4]
 800a896:	4408      	add	r0, r1
 800a898:	6010      	str	r0, [r2, #0]
 800a89a:	e7da      	b.n	800a852 <_free_r+0x22>
 800a89c:	d902      	bls.n	800a8a4 <_free_r+0x74>
 800a89e:	230c      	movs	r3, #12
 800a8a0:	602b      	str	r3, [r5, #0]
 800a8a2:	e7d6      	b.n	800a852 <_free_r+0x22>
 800a8a4:	6820      	ldr	r0, [r4, #0]
 800a8a6:	1821      	adds	r1, r4, r0
 800a8a8:	428b      	cmp	r3, r1
 800a8aa:	bf04      	itt	eq
 800a8ac:	6819      	ldreq	r1, [r3, #0]
 800a8ae:	685b      	ldreq	r3, [r3, #4]
 800a8b0:	6063      	str	r3, [r4, #4]
 800a8b2:	bf04      	itt	eq
 800a8b4:	1809      	addeq	r1, r1, r0
 800a8b6:	6021      	streq	r1, [r4, #0]
 800a8b8:	6054      	str	r4, [r2, #4]
 800a8ba:	e7ca      	b.n	800a852 <_free_r+0x22>
 800a8bc:	bd38      	pop	{r3, r4, r5, pc}
 800a8be:	bf00      	nop
 800a8c0:	200009b4 	.word	0x200009b4

0800a8c4 <malloc>:
 800a8c4:	4b02      	ldr	r3, [pc, #8]	@ (800a8d0 <malloc+0xc>)
 800a8c6:	4601      	mov	r1, r0
 800a8c8:	6818      	ldr	r0, [r3, #0]
 800a8ca:	f000 b825 	b.w	800a918 <_malloc_r>
 800a8ce:	bf00      	nop
 800a8d0:	20000018 	.word	0x20000018

0800a8d4 <sbrk_aligned>:
 800a8d4:	b570      	push	{r4, r5, r6, lr}
 800a8d6:	4e0f      	ldr	r6, [pc, #60]	@ (800a914 <sbrk_aligned+0x40>)
 800a8d8:	460c      	mov	r4, r1
 800a8da:	6831      	ldr	r1, [r6, #0]
 800a8dc:	4605      	mov	r5, r0
 800a8de:	b911      	cbnz	r1, 800a8e6 <sbrk_aligned+0x12>
 800a8e0:	f001 fe6e 	bl	800c5c0 <_sbrk_r>
 800a8e4:	6030      	str	r0, [r6, #0]
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	f001 fe69 	bl	800c5c0 <_sbrk_r>
 800a8ee:	1c43      	adds	r3, r0, #1
 800a8f0:	d103      	bne.n	800a8fa <sbrk_aligned+0x26>
 800a8f2:	f04f 34ff 	mov.w	r4, #4294967295
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	bd70      	pop	{r4, r5, r6, pc}
 800a8fa:	1cc4      	adds	r4, r0, #3
 800a8fc:	f024 0403 	bic.w	r4, r4, #3
 800a900:	42a0      	cmp	r0, r4
 800a902:	d0f8      	beq.n	800a8f6 <sbrk_aligned+0x22>
 800a904:	1a21      	subs	r1, r4, r0
 800a906:	4628      	mov	r0, r5
 800a908:	f001 fe5a 	bl	800c5c0 <_sbrk_r>
 800a90c:	3001      	adds	r0, #1
 800a90e:	d1f2      	bne.n	800a8f6 <sbrk_aligned+0x22>
 800a910:	e7ef      	b.n	800a8f2 <sbrk_aligned+0x1e>
 800a912:	bf00      	nop
 800a914:	200009b0 	.word	0x200009b0

0800a918 <_malloc_r>:
 800a918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a91c:	1ccd      	adds	r5, r1, #3
 800a91e:	f025 0503 	bic.w	r5, r5, #3
 800a922:	3508      	adds	r5, #8
 800a924:	2d0c      	cmp	r5, #12
 800a926:	bf38      	it	cc
 800a928:	250c      	movcc	r5, #12
 800a92a:	2d00      	cmp	r5, #0
 800a92c:	4606      	mov	r6, r0
 800a92e:	db01      	blt.n	800a934 <_malloc_r+0x1c>
 800a930:	42a9      	cmp	r1, r5
 800a932:	d904      	bls.n	800a93e <_malloc_r+0x26>
 800a934:	230c      	movs	r3, #12
 800a936:	6033      	str	r3, [r6, #0]
 800a938:	2000      	movs	r0, #0
 800a93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a93e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa14 <_malloc_r+0xfc>
 800a942:	f000 f869 	bl	800aa18 <__malloc_lock>
 800a946:	f8d8 3000 	ldr.w	r3, [r8]
 800a94a:	461c      	mov	r4, r3
 800a94c:	bb44      	cbnz	r4, 800a9a0 <_malloc_r+0x88>
 800a94e:	4629      	mov	r1, r5
 800a950:	4630      	mov	r0, r6
 800a952:	f7ff ffbf 	bl	800a8d4 <sbrk_aligned>
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	4604      	mov	r4, r0
 800a95a:	d158      	bne.n	800aa0e <_malloc_r+0xf6>
 800a95c:	f8d8 4000 	ldr.w	r4, [r8]
 800a960:	4627      	mov	r7, r4
 800a962:	2f00      	cmp	r7, #0
 800a964:	d143      	bne.n	800a9ee <_malloc_r+0xd6>
 800a966:	2c00      	cmp	r4, #0
 800a968:	d04b      	beq.n	800aa02 <_malloc_r+0xea>
 800a96a:	6823      	ldr	r3, [r4, #0]
 800a96c:	4639      	mov	r1, r7
 800a96e:	4630      	mov	r0, r6
 800a970:	eb04 0903 	add.w	r9, r4, r3
 800a974:	f001 fe24 	bl	800c5c0 <_sbrk_r>
 800a978:	4581      	cmp	r9, r0
 800a97a:	d142      	bne.n	800aa02 <_malloc_r+0xea>
 800a97c:	6821      	ldr	r1, [r4, #0]
 800a97e:	1a6d      	subs	r5, r5, r1
 800a980:	4629      	mov	r1, r5
 800a982:	4630      	mov	r0, r6
 800a984:	f7ff ffa6 	bl	800a8d4 <sbrk_aligned>
 800a988:	3001      	adds	r0, #1
 800a98a:	d03a      	beq.n	800aa02 <_malloc_r+0xea>
 800a98c:	6823      	ldr	r3, [r4, #0]
 800a98e:	442b      	add	r3, r5
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	f8d8 3000 	ldr.w	r3, [r8]
 800a996:	685a      	ldr	r2, [r3, #4]
 800a998:	bb62      	cbnz	r2, 800a9f4 <_malloc_r+0xdc>
 800a99a:	f8c8 7000 	str.w	r7, [r8]
 800a99e:	e00f      	b.n	800a9c0 <_malloc_r+0xa8>
 800a9a0:	6822      	ldr	r2, [r4, #0]
 800a9a2:	1b52      	subs	r2, r2, r5
 800a9a4:	d420      	bmi.n	800a9e8 <_malloc_r+0xd0>
 800a9a6:	2a0b      	cmp	r2, #11
 800a9a8:	d917      	bls.n	800a9da <_malloc_r+0xc2>
 800a9aa:	1961      	adds	r1, r4, r5
 800a9ac:	42a3      	cmp	r3, r4
 800a9ae:	6025      	str	r5, [r4, #0]
 800a9b0:	bf18      	it	ne
 800a9b2:	6059      	strne	r1, [r3, #4]
 800a9b4:	6863      	ldr	r3, [r4, #4]
 800a9b6:	bf08      	it	eq
 800a9b8:	f8c8 1000 	streq.w	r1, [r8]
 800a9bc:	5162      	str	r2, [r4, r5]
 800a9be:	604b      	str	r3, [r1, #4]
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	f000 f82f 	bl	800aa24 <__malloc_unlock>
 800a9c6:	f104 000b 	add.w	r0, r4, #11
 800a9ca:	1d23      	adds	r3, r4, #4
 800a9cc:	f020 0007 	bic.w	r0, r0, #7
 800a9d0:	1ac2      	subs	r2, r0, r3
 800a9d2:	bf1c      	itt	ne
 800a9d4:	1a1b      	subne	r3, r3, r0
 800a9d6:	50a3      	strne	r3, [r4, r2]
 800a9d8:	e7af      	b.n	800a93a <_malloc_r+0x22>
 800a9da:	6862      	ldr	r2, [r4, #4]
 800a9dc:	42a3      	cmp	r3, r4
 800a9de:	bf0c      	ite	eq
 800a9e0:	f8c8 2000 	streq.w	r2, [r8]
 800a9e4:	605a      	strne	r2, [r3, #4]
 800a9e6:	e7eb      	b.n	800a9c0 <_malloc_r+0xa8>
 800a9e8:	4623      	mov	r3, r4
 800a9ea:	6864      	ldr	r4, [r4, #4]
 800a9ec:	e7ae      	b.n	800a94c <_malloc_r+0x34>
 800a9ee:	463c      	mov	r4, r7
 800a9f0:	687f      	ldr	r7, [r7, #4]
 800a9f2:	e7b6      	b.n	800a962 <_malloc_r+0x4a>
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	42a3      	cmp	r3, r4
 800a9fa:	d1fb      	bne.n	800a9f4 <_malloc_r+0xdc>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	6053      	str	r3, [r2, #4]
 800aa00:	e7de      	b.n	800a9c0 <_malloc_r+0xa8>
 800aa02:	230c      	movs	r3, #12
 800aa04:	6033      	str	r3, [r6, #0]
 800aa06:	4630      	mov	r0, r6
 800aa08:	f000 f80c 	bl	800aa24 <__malloc_unlock>
 800aa0c:	e794      	b.n	800a938 <_malloc_r+0x20>
 800aa0e:	6005      	str	r5, [r0, #0]
 800aa10:	e7d6      	b.n	800a9c0 <_malloc_r+0xa8>
 800aa12:	bf00      	nop
 800aa14:	200009b4 	.word	0x200009b4

0800aa18 <__malloc_lock>:
 800aa18:	4801      	ldr	r0, [pc, #4]	@ (800aa20 <__malloc_lock+0x8>)
 800aa1a:	f7ff b89a 	b.w	8009b52 <__retarget_lock_acquire_recursive>
 800aa1e:	bf00      	nop
 800aa20:	200009ac 	.word	0x200009ac

0800aa24 <__malloc_unlock>:
 800aa24:	4801      	ldr	r0, [pc, #4]	@ (800aa2c <__malloc_unlock+0x8>)
 800aa26:	f7ff b895 	b.w	8009b54 <__retarget_lock_release_recursive>
 800aa2a:	bf00      	nop
 800aa2c:	200009ac 	.word	0x200009ac

0800aa30 <_Balloc>:
 800aa30:	b570      	push	{r4, r5, r6, lr}
 800aa32:	69c6      	ldr	r6, [r0, #28]
 800aa34:	4604      	mov	r4, r0
 800aa36:	460d      	mov	r5, r1
 800aa38:	b976      	cbnz	r6, 800aa58 <_Balloc+0x28>
 800aa3a:	2010      	movs	r0, #16
 800aa3c:	f7ff ff42 	bl	800a8c4 <malloc>
 800aa40:	4602      	mov	r2, r0
 800aa42:	61e0      	str	r0, [r4, #28]
 800aa44:	b920      	cbnz	r0, 800aa50 <_Balloc+0x20>
 800aa46:	4b18      	ldr	r3, [pc, #96]	@ (800aaa8 <_Balloc+0x78>)
 800aa48:	4818      	ldr	r0, [pc, #96]	@ (800aaac <_Balloc+0x7c>)
 800aa4a:	216b      	movs	r1, #107	@ 0x6b
 800aa4c:	f001 fdd0 	bl	800c5f0 <__assert_func>
 800aa50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa54:	6006      	str	r6, [r0, #0]
 800aa56:	60c6      	str	r6, [r0, #12]
 800aa58:	69e6      	ldr	r6, [r4, #28]
 800aa5a:	68f3      	ldr	r3, [r6, #12]
 800aa5c:	b183      	cbz	r3, 800aa80 <_Balloc+0x50>
 800aa5e:	69e3      	ldr	r3, [r4, #28]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa66:	b9b8      	cbnz	r0, 800aa98 <_Balloc+0x68>
 800aa68:	2101      	movs	r1, #1
 800aa6a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa6e:	1d72      	adds	r2, r6, #5
 800aa70:	0092      	lsls	r2, r2, #2
 800aa72:	4620      	mov	r0, r4
 800aa74:	f001 fdda 	bl	800c62c <_calloc_r>
 800aa78:	b160      	cbz	r0, 800aa94 <_Balloc+0x64>
 800aa7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa7e:	e00e      	b.n	800aa9e <_Balloc+0x6e>
 800aa80:	2221      	movs	r2, #33	@ 0x21
 800aa82:	2104      	movs	r1, #4
 800aa84:	4620      	mov	r0, r4
 800aa86:	f001 fdd1 	bl	800c62c <_calloc_r>
 800aa8a:	69e3      	ldr	r3, [r4, #28]
 800aa8c:	60f0      	str	r0, [r6, #12]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1e4      	bne.n	800aa5e <_Balloc+0x2e>
 800aa94:	2000      	movs	r0, #0
 800aa96:	bd70      	pop	{r4, r5, r6, pc}
 800aa98:	6802      	ldr	r2, [r0, #0]
 800aa9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aaa4:	e7f7      	b.n	800aa96 <_Balloc+0x66>
 800aaa6:	bf00      	nop
 800aaa8:	0800e496 	.word	0x0800e496
 800aaac:	0800e516 	.word	0x0800e516

0800aab0 <_Bfree>:
 800aab0:	b570      	push	{r4, r5, r6, lr}
 800aab2:	69c6      	ldr	r6, [r0, #28]
 800aab4:	4605      	mov	r5, r0
 800aab6:	460c      	mov	r4, r1
 800aab8:	b976      	cbnz	r6, 800aad8 <_Bfree+0x28>
 800aaba:	2010      	movs	r0, #16
 800aabc:	f7ff ff02 	bl	800a8c4 <malloc>
 800aac0:	4602      	mov	r2, r0
 800aac2:	61e8      	str	r0, [r5, #28]
 800aac4:	b920      	cbnz	r0, 800aad0 <_Bfree+0x20>
 800aac6:	4b09      	ldr	r3, [pc, #36]	@ (800aaec <_Bfree+0x3c>)
 800aac8:	4809      	ldr	r0, [pc, #36]	@ (800aaf0 <_Bfree+0x40>)
 800aaca:	218f      	movs	r1, #143	@ 0x8f
 800aacc:	f001 fd90 	bl	800c5f0 <__assert_func>
 800aad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aad4:	6006      	str	r6, [r0, #0]
 800aad6:	60c6      	str	r6, [r0, #12]
 800aad8:	b13c      	cbz	r4, 800aaea <_Bfree+0x3a>
 800aada:	69eb      	ldr	r3, [r5, #28]
 800aadc:	6862      	ldr	r2, [r4, #4]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aae4:	6021      	str	r1, [r4, #0]
 800aae6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aaea:	bd70      	pop	{r4, r5, r6, pc}
 800aaec:	0800e496 	.word	0x0800e496
 800aaf0:	0800e516 	.word	0x0800e516

0800aaf4 <__multadd>:
 800aaf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf8:	690d      	ldr	r5, [r1, #16]
 800aafa:	4607      	mov	r7, r0
 800aafc:	460c      	mov	r4, r1
 800aafe:	461e      	mov	r6, r3
 800ab00:	f101 0c14 	add.w	ip, r1, #20
 800ab04:	2000      	movs	r0, #0
 800ab06:	f8dc 3000 	ldr.w	r3, [ip]
 800ab0a:	b299      	uxth	r1, r3
 800ab0c:	fb02 6101 	mla	r1, r2, r1, r6
 800ab10:	0c1e      	lsrs	r6, r3, #16
 800ab12:	0c0b      	lsrs	r3, r1, #16
 800ab14:	fb02 3306 	mla	r3, r2, r6, r3
 800ab18:	b289      	uxth	r1, r1
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab20:	4285      	cmp	r5, r0
 800ab22:	f84c 1b04 	str.w	r1, [ip], #4
 800ab26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab2a:	dcec      	bgt.n	800ab06 <__multadd+0x12>
 800ab2c:	b30e      	cbz	r6, 800ab72 <__multadd+0x7e>
 800ab2e:	68a3      	ldr	r3, [r4, #8]
 800ab30:	42ab      	cmp	r3, r5
 800ab32:	dc19      	bgt.n	800ab68 <__multadd+0x74>
 800ab34:	6861      	ldr	r1, [r4, #4]
 800ab36:	4638      	mov	r0, r7
 800ab38:	3101      	adds	r1, #1
 800ab3a:	f7ff ff79 	bl	800aa30 <_Balloc>
 800ab3e:	4680      	mov	r8, r0
 800ab40:	b928      	cbnz	r0, 800ab4e <__multadd+0x5a>
 800ab42:	4602      	mov	r2, r0
 800ab44:	4b0c      	ldr	r3, [pc, #48]	@ (800ab78 <__multadd+0x84>)
 800ab46:	480d      	ldr	r0, [pc, #52]	@ (800ab7c <__multadd+0x88>)
 800ab48:	21ba      	movs	r1, #186	@ 0xba
 800ab4a:	f001 fd51 	bl	800c5f0 <__assert_func>
 800ab4e:	6922      	ldr	r2, [r4, #16]
 800ab50:	3202      	adds	r2, #2
 800ab52:	f104 010c 	add.w	r1, r4, #12
 800ab56:	0092      	lsls	r2, r2, #2
 800ab58:	300c      	adds	r0, #12
 800ab5a:	f7fe fffc 	bl	8009b56 <memcpy>
 800ab5e:	4621      	mov	r1, r4
 800ab60:	4638      	mov	r0, r7
 800ab62:	f7ff ffa5 	bl	800aab0 <_Bfree>
 800ab66:	4644      	mov	r4, r8
 800ab68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab6c:	3501      	adds	r5, #1
 800ab6e:	615e      	str	r6, [r3, #20]
 800ab70:	6125      	str	r5, [r4, #16]
 800ab72:	4620      	mov	r0, r4
 800ab74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab78:	0800e505 	.word	0x0800e505
 800ab7c:	0800e516 	.word	0x0800e516

0800ab80 <__s2b>:
 800ab80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab84:	460c      	mov	r4, r1
 800ab86:	4615      	mov	r5, r2
 800ab88:	461f      	mov	r7, r3
 800ab8a:	2209      	movs	r2, #9
 800ab8c:	3308      	adds	r3, #8
 800ab8e:	4606      	mov	r6, r0
 800ab90:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab94:	2100      	movs	r1, #0
 800ab96:	2201      	movs	r2, #1
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	db09      	blt.n	800abb0 <__s2b+0x30>
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f7ff ff47 	bl	800aa30 <_Balloc>
 800aba2:	b940      	cbnz	r0, 800abb6 <__s2b+0x36>
 800aba4:	4602      	mov	r2, r0
 800aba6:	4b19      	ldr	r3, [pc, #100]	@ (800ac0c <__s2b+0x8c>)
 800aba8:	4819      	ldr	r0, [pc, #100]	@ (800ac10 <__s2b+0x90>)
 800abaa:	21d3      	movs	r1, #211	@ 0xd3
 800abac:	f001 fd20 	bl	800c5f0 <__assert_func>
 800abb0:	0052      	lsls	r2, r2, #1
 800abb2:	3101      	adds	r1, #1
 800abb4:	e7f0      	b.n	800ab98 <__s2b+0x18>
 800abb6:	9b08      	ldr	r3, [sp, #32]
 800abb8:	6143      	str	r3, [r0, #20]
 800abba:	2d09      	cmp	r5, #9
 800abbc:	f04f 0301 	mov.w	r3, #1
 800abc0:	6103      	str	r3, [r0, #16]
 800abc2:	dd16      	ble.n	800abf2 <__s2b+0x72>
 800abc4:	f104 0909 	add.w	r9, r4, #9
 800abc8:	46c8      	mov	r8, r9
 800abca:	442c      	add	r4, r5
 800abcc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800abd0:	4601      	mov	r1, r0
 800abd2:	3b30      	subs	r3, #48	@ 0x30
 800abd4:	220a      	movs	r2, #10
 800abd6:	4630      	mov	r0, r6
 800abd8:	f7ff ff8c 	bl	800aaf4 <__multadd>
 800abdc:	45a0      	cmp	r8, r4
 800abde:	d1f5      	bne.n	800abcc <__s2b+0x4c>
 800abe0:	f1a5 0408 	sub.w	r4, r5, #8
 800abe4:	444c      	add	r4, r9
 800abe6:	1b2d      	subs	r5, r5, r4
 800abe8:	1963      	adds	r3, r4, r5
 800abea:	42bb      	cmp	r3, r7
 800abec:	db04      	blt.n	800abf8 <__s2b+0x78>
 800abee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abf2:	340a      	adds	r4, #10
 800abf4:	2509      	movs	r5, #9
 800abf6:	e7f6      	b.n	800abe6 <__s2b+0x66>
 800abf8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800abfc:	4601      	mov	r1, r0
 800abfe:	3b30      	subs	r3, #48	@ 0x30
 800ac00:	220a      	movs	r2, #10
 800ac02:	4630      	mov	r0, r6
 800ac04:	f7ff ff76 	bl	800aaf4 <__multadd>
 800ac08:	e7ee      	b.n	800abe8 <__s2b+0x68>
 800ac0a:	bf00      	nop
 800ac0c:	0800e505 	.word	0x0800e505
 800ac10:	0800e516 	.word	0x0800e516

0800ac14 <__hi0bits>:
 800ac14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ac18:	4603      	mov	r3, r0
 800ac1a:	bf36      	itet	cc
 800ac1c:	0403      	lslcc	r3, r0, #16
 800ac1e:	2000      	movcs	r0, #0
 800ac20:	2010      	movcc	r0, #16
 800ac22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac26:	bf3c      	itt	cc
 800ac28:	021b      	lslcc	r3, r3, #8
 800ac2a:	3008      	addcc	r0, #8
 800ac2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac30:	bf3c      	itt	cc
 800ac32:	011b      	lslcc	r3, r3, #4
 800ac34:	3004      	addcc	r0, #4
 800ac36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac3a:	bf3c      	itt	cc
 800ac3c:	009b      	lslcc	r3, r3, #2
 800ac3e:	3002      	addcc	r0, #2
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	db05      	blt.n	800ac50 <__hi0bits+0x3c>
 800ac44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ac48:	f100 0001 	add.w	r0, r0, #1
 800ac4c:	bf08      	it	eq
 800ac4e:	2020      	moveq	r0, #32
 800ac50:	4770      	bx	lr

0800ac52 <__lo0bits>:
 800ac52:	6803      	ldr	r3, [r0, #0]
 800ac54:	4602      	mov	r2, r0
 800ac56:	f013 0007 	ands.w	r0, r3, #7
 800ac5a:	d00b      	beq.n	800ac74 <__lo0bits+0x22>
 800ac5c:	07d9      	lsls	r1, r3, #31
 800ac5e:	d421      	bmi.n	800aca4 <__lo0bits+0x52>
 800ac60:	0798      	lsls	r0, r3, #30
 800ac62:	bf49      	itett	mi
 800ac64:	085b      	lsrmi	r3, r3, #1
 800ac66:	089b      	lsrpl	r3, r3, #2
 800ac68:	2001      	movmi	r0, #1
 800ac6a:	6013      	strmi	r3, [r2, #0]
 800ac6c:	bf5c      	itt	pl
 800ac6e:	6013      	strpl	r3, [r2, #0]
 800ac70:	2002      	movpl	r0, #2
 800ac72:	4770      	bx	lr
 800ac74:	b299      	uxth	r1, r3
 800ac76:	b909      	cbnz	r1, 800ac7c <__lo0bits+0x2a>
 800ac78:	0c1b      	lsrs	r3, r3, #16
 800ac7a:	2010      	movs	r0, #16
 800ac7c:	b2d9      	uxtb	r1, r3
 800ac7e:	b909      	cbnz	r1, 800ac84 <__lo0bits+0x32>
 800ac80:	3008      	adds	r0, #8
 800ac82:	0a1b      	lsrs	r3, r3, #8
 800ac84:	0719      	lsls	r1, r3, #28
 800ac86:	bf04      	itt	eq
 800ac88:	091b      	lsreq	r3, r3, #4
 800ac8a:	3004      	addeq	r0, #4
 800ac8c:	0799      	lsls	r1, r3, #30
 800ac8e:	bf04      	itt	eq
 800ac90:	089b      	lsreq	r3, r3, #2
 800ac92:	3002      	addeq	r0, #2
 800ac94:	07d9      	lsls	r1, r3, #31
 800ac96:	d403      	bmi.n	800aca0 <__lo0bits+0x4e>
 800ac98:	085b      	lsrs	r3, r3, #1
 800ac9a:	f100 0001 	add.w	r0, r0, #1
 800ac9e:	d003      	beq.n	800aca8 <__lo0bits+0x56>
 800aca0:	6013      	str	r3, [r2, #0]
 800aca2:	4770      	bx	lr
 800aca4:	2000      	movs	r0, #0
 800aca6:	4770      	bx	lr
 800aca8:	2020      	movs	r0, #32
 800acaa:	4770      	bx	lr

0800acac <__i2b>:
 800acac:	b510      	push	{r4, lr}
 800acae:	460c      	mov	r4, r1
 800acb0:	2101      	movs	r1, #1
 800acb2:	f7ff febd 	bl	800aa30 <_Balloc>
 800acb6:	4602      	mov	r2, r0
 800acb8:	b928      	cbnz	r0, 800acc6 <__i2b+0x1a>
 800acba:	4b05      	ldr	r3, [pc, #20]	@ (800acd0 <__i2b+0x24>)
 800acbc:	4805      	ldr	r0, [pc, #20]	@ (800acd4 <__i2b+0x28>)
 800acbe:	f240 1145 	movw	r1, #325	@ 0x145
 800acc2:	f001 fc95 	bl	800c5f0 <__assert_func>
 800acc6:	2301      	movs	r3, #1
 800acc8:	6144      	str	r4, [r0, #20]
 800acca:	6103      	str	r3, [r0, #16]
 800accc:	bd10      	pop	{r4, pc}
 800acce:	bf00      	nop
 800acd0:	0800e505 	.word	0x0800e505
 800acd4:	0800e516 	.word	0x0800e516

0800acd8 <__multiply>:
 800acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acdc:	4617      	mov	r7, r2
 800acde:	690a      	ldr	r2, [r1, #16]
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	bfa8      	it	ge
 800ace6:	463b      	movge	r3, r7
 800ace8:	4689      	mov	r9, r1
 800acea:	bfa4      	itt	ge
 800acec:	460f      	movge	r7, r1
 800acee:	4699      	movge	r9, r3
 800acf0:	693d      	ldr	r5, [r7, #16]
 800acf2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	6879      	ldr	r1, [r7, #4]
 800acfa:	eb05 060a 	add.w	r6, r5, sl
 800acfe:	42b3      	cmp	r3, r6
 800ad00:	b085      	sub	sp, #20
 800ad02:	bfb8      	it	lt
 800ad04:	3101      	addlt	r1, #1
 800ad06:	f7ff fe93 	bl	800aa30 <_Balloc>
 800ad0a:	b930      	cbnz	r0, 800ad1a <__multiply+0x42>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	4b41      	ldr	r3, [pc, #260]	@ (800ae14 <__multiply+0x13c>)
 800ad10:	4841      	ldr	r0, [pc, #260]	@ (800ae18 <__multiply+0x140>)
 800ad12:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ad16:	f001 fc6b 	bl	800c5f0 <__assert_func>
 800ad1a:	f100 0414 	add.w	r4, r0, #20
 800ad1e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ad22:	4623      	mov	r3, r4
 800ad24:	2200      	movs	r2, #0
 800ad26:	4573      	cmp	r3, lr
 800ad28:	d320      	bcc.n	800ad6c <__multiply+0x94>
 800ad2a:	f107 0814 	add.w	r8, r7, #20
 800ad2e:	f109 0114 	add.w	r1, r9, #20
 800ad32:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ad36:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ad3a:	9302      	str	r3, [sp, #8]
 800ad3c:	1beb      	subs	r3, r5, r7
 800ad3e:	3b15      	subs	r3, #21
 800ad40:	f023 0303 	bic.w	r3, r3, #3
 800ad44:	3304      	adds	r3, #4
 800ad46:	3715      	adds	r7, #21
 800ad48:	42bd      	cmp	r5, r7
 800ad4a:	bf38      	it	cc
 800ad4c:	2304      	movcc	r3, #4
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	9b02      	ldr	r3, [sp, #8]
 800ad52:	9103      	str	r1, [sp, #12]
 800ad54:	428b      	cmp	r3, r1
 800ad56:	d80c      	bhi.n	800ad72 <__multiply+0x9a>
 800ad58:	2e00      	cmp	r6, #0
 800ad5a:	dd03      	ble.n	800ad64 <__multiply+0x8c>
 800ad5c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d055      	beq.n	800ae10 <__multiply+0x138>
 800ad64:	6106      	str	r6, [r0, #16]
 800ad66:	b005      	add	sp, #20
 800ad68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad6c:	f843 2b04 	str.w	r2, [r3], #4
 800ad70:	e7d9      	b.n	800ad26 <__multiply+0x4e>
 800ad72:	f8b1 a000 	ldrh.w	sl, [r1]
 800ad76:	f1ba 0f00 	cmp.w	sl, #0
 800ad7a:	d01f      	beq.n	800adbc <__multiply+0xe4>
 800ad7c:	46c4      	mov	ip, r8
 800ad7e:	46a1      	mov	r9, r4
 800ad80:	2700      	movs	r7, #0
 800ad82:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ad86:	f8d9 3000 	ldr.w	r3, [r9]
 800ad8a:	fa1f fb82 	uxth.w	fp, r2
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	fb0a 330b 	mla	r3, sl, fp, r3
 800ad94:	443b      	add	r3, r7
 800ad96:	f8d9 7000 	ldr.w	r7, [r9]
 800ad9a:	0c12      	lsrs	r2, r2, #16
 800ad9c:	0c3f      	lsrs	r7, r7, #16
 800ad9e:	fb0a 7202 	mla	r2, sl, r2, r7
 800ada2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adac:	4565      	cmp	r5, ip
 800adae:	f849 3b04 	str.w	r3, [r9], #4
 800adb2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800adb6:	d8e4      	bhi.n	800ad82 <__multiply+0xaa>
 800adb8:	9b01      	ldr	r3, [sp, #4]
 800adba:	50e7      	str	r7, [r4, r3]
 800adbc:	9b03      	ldr	r3, [sp, #12]
 800adbe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800adc2:	3104      	adds	r1, #4
 800adc4:	f1b9 0f00 	cmp.w	r9, #0
 800adc8:	d020      	beq.n	800ae0c <__multiply+0x134>
 800adca:	6823      	ldr	r3, [r4, #0]
 800adcc:	4647      	mov	r7, r8
 800adce:	46a4      	mov	ip, r4
 800add0:	f04f 0a00 	mov.w	sl, #0
 800add4:	f8b7 b000 	ldrh.w	fp, [r7]
 800add8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800addc:	fb09 220b 	mla	r2, r9, fp, r2
 800ade0:	4452      	add	r2, sl
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ade8:	f84c 3b04 	str.w	r3, [ip], #4
 800adec:	f857 3b04 	ldr.w	r3, [r7], #4
 800adf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adf4:	f8bc 3000 	ldrh.w	r3, [ip]
 800adf8:	fb09 330a 	mla	r3, r9, sl, r3
 800adfc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ae00:	42bd      	cmp	r5, r7
 800ae02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae06:	d8e5      	bhi.n	800add4 <__multiply+0xfc>
 800ae08:	9a01      	ldr	r2, [sp, #4]
 800ae0a:	50a3      	str	r3, [r4, r2]
 800ae0c:	3404      	adds	r4, #4
 800ae0e:	e79f      	b.n	800ad50 <__multiply+0x78>
 800ae10:	3e01      	subs	r6, #1
 800ae12:	e7a1      	b.n	800ad58 <__multiply+0x80>
 800ae14:	0800e505 	.word	0x0800e505
 800ae18:	0800e516 	.word	0x0800e516

0800ae1c <__pow5mult>:
 800ae1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae20:	4615      	mov	r5, r2
 800ae22:	f012 0203 	ands.w	r2, r2, #3
 800ae26:	4607      	mov	r7, r0
 800ae28:	460e      	mov	r6, r1
 800ae2a:	d007      	beq.n	800ae3c <__pow5mult+0x20>
 800ae2c:	4c25      	ldr	r4, [pc, #148]	@ (800aec4 <__pow5mult+0xa8>)
 800ae2e:	3a01      	subs	r2, #1
 800ae30:	2300      	movs	r3, #0
 800ae32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae36:	f7ff fe5d 	bl	800aaf4 <__multadd>
 800ae3a:	4606      	mov	r6, r0
 800ae3c:	10ad      	asrs	r5, r5, #2
 800ae3e:	d03d      	beq.n	800aebc <__pow5mult+0xa0>
 800ae40:	69fc      	ldr	r4, [r7, #28]
 800ae42:	b97c      	cbnz	r4, 800ae64 <__pow5mult+0x48>
 800ae44:	2010      	movs	r0, #16
 800ae46:	f7ff fd3d 	bl	800a8c4 <malloc>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	61f8      	str	r0, [r7, #28]
 800ae4e:	b928      	cbnz	r0, 800ae5c <__pow5mult+0x40>
 800ae50:	4b1d      	ldr	r3, [pc, #116]	@ (800aec8 <__pow5mult+0xac>)
 800ae52:	481e      	ldr	r0, [pc, #120]	@ (800aecc <__pow5mult+0xb0>)
 800ae54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ae58:	f001 fbca 	bl	800c5f0 <__assert_func>
 800ae5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae60:	6004      	str	r4, [r0, #0]
 800ae62:	60c4      	str	r4, [r0, #12]
 800ae64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ae68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae6c:	b94c      	cbnz	r4, 800ae82 <__pow5mult+0x66>
 800ae6e:	f240 2171 	movw	r1, #625	@ 0x271
 800ae72:	4638      	mov	r0, r7
 800ae74:	f7ff ff1a 	bl	800acac <__i2b>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae7e:	4604      	mov	r4, r0
 800ae80:	6003      	str	r3, [r0, #0]
 800ae82:	f04f 0900 	mov.w	r9, #0
 800ae86:	07eb      	lsls	r3, r5, #31
 800ae88:	d50a      	bpl.n	800aea0 <__pow5mult+0x84>
 800ae8a:	4631      	mov	r1, r6
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	4638      	mov	r0, r7
 800ae90:	f7ff ff22 	bl	800acd8 <__multiply>
 800ae94:	4631      	mov	r1, r6
 800ae96:	4680      	mov	r8, r0
 800ae98:	4638      	mov	r0, r7
 800ae9a:	f7ff fe09 	bl	800aab0 <_Bfree>
 800ae9e:	4646      	mov	r6, r8
 800aea0:	106d      	asrs	r5, r5, #1
 800aea2:	d00b      	beq.n	800aebc <__pow5mult+0xa0>
 800aea4:	6820      	ldr	r0, [r4, #0]
 800aea6:	b938      	cbnz	r0, 800aeb8 <__pow5mult+0x9c>
 800aea8:	4622      	mov	r2, r4
 800aeaa:	4621      	mov	r1, r4
 800aeac:	4638      	mov	r0, r7
 800aeae:	f7ff ff13 	bl	800acd8 <__multiply>
 800aeb2:	6020      	str	r0, [r4, #0]
 800aeb4:	f8c0 9000 	str.w	r9, [r0]
 800aeb8:	4604      	mov	r4, r0
 800aeba:	e7e4      	b.n	800ae86 <__pow5mult+0x6a>
 800aebc:	4630      	mov	r0, r6
 800aebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aec2:	bf00      	nop
 800aec4:	0800e628 	.word	0x0800e628
 800aec8:	0800e496 	.word	0x0800e496
 800aecc:	0800e516 	.word	0x0800e516

0800aed0 <__lshift>:
 800aed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aed4:	460c      	mov	r4, r1
 800aed6:	6849      	ldr	r1, [r1, #4]
 800aed8:	6923      	ldr	r3, [r4, #16]
 800aeda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aede:	68a3      	ldr	r3, [r4, #8]
 800aee0:	4607      	mov	r7, r0
 800aee2:	4691      	mov	r9, r2
 800aee4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aee8:	f108 0601 	add.w	r6, r8, #1
 800aeec:	42b3      	cmp	r3, r6
 800aeee:	db0b      	blt.n	800af08 <__lshift+0x38>
 800aef0:	4638      	mov	r0, r7
 800aef2:	f7ff fd9d 	bl	800aa30 <_Balloc>
 800aef6:	4605      	mov	r5, r0
 800aef8:	b948      	cbnz	r0, 800af0e <__lshift+0x3e>
 800aefa:	4602      	mov	r2, r0
 800aefc:	4b28      	ldr	r3, [pc, #160]	@ (800afa0 <__lshift+0xd0>)
 800aefe:	4829      	ldr	r0, [pc, #164]	@ (800afa4 <__lshift+0xd4>)
 800af00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800af04:	f001 fb74 	bl	800c5f0 <__assert_func>
 800af08:	3101      	adds	r1, #1
 800af0a:	005b      	lsls	r3, r3, #1
 800af0c:	e7ee      	b.n	800aeec <__lshift+0x1c>
 800af0e:	2300      	movs	r3, #0
 800af10:	f100 0114 	add.w	r1, r0, #20
 800af14:	f100 0210 	add.w	r2, r0, #16
 800af18:	4618      	mov	r0, r3
 800af1a:	4553      	cmp	r3, sl
 800af1c:	db33      	blt.n	800af86 <__lshift+0xb6>
 800af1e:	6920      	ldr	r0, [r4, #16]
 800af20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af24:	f104 0314 	add.w	r3, r4, #20
 800af28:	f019 091f 	ands.w	r9, r9, #31
 800af2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af34:	d02b      	beq.n	800af8e <__lshift+0xbe>
 800af36:	f1c9 0e20 	rsb	lr, r9, #32
 800af3a:	468a      	mov	sl, r1
 800af3c:	2200      	movs	r2, #0
 800af3e:	6818      	ldr	r0, [r3, #0]
 800af40:	fa00 f009 	lsl.w	r0, r0, r9
 800af44:	4310      	orrs	r0, r2
 800af46:	f84a 0b04 	str.w	r0, [sl], #4
 800af4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af4e:	459c      	cmp	ip, r3
 800af50:	fa22 f20e 	lsr.w	r2, r2, lr
 800af54:	d8f3      	bhi.n	800af3e <__lshift+0x6e>
 800af56:	ebac 0304 	sub.w	r3, ip, r4
 800af5a:	3b15      	subs	r3, #21
 800af5c:	f023 0303 	bic.w	r3, r3, #3
 800af60:	3304      	adds	r3, #4
 800af62:	f104 0015 	add.w	r0, r4, #21
 800af66:	4560      	cmp	r0, ip
 800af68:	bf88      	it	hi
 800af6a:	2304      	movhi	r3, #4
 800af6c:	50ca      	str	r2, [r1, r3]
 800af6e:	b10a      	cbz	r2, 800af74 <__lshift+0xa4>
 800af70:	f108 0602 	add.w	r6, r8, #2
 800af74:	3e01      	subs	r6, #1
 800af76:	4638      	mov	r0, r7
 800af78:	612e      	str	r6, [r5, #16]
 800af7a:	4621      	mov	r1, r4
 800af7c:	f7ff fd98 	bl	800aab0 <_Bfree>
 800af80:	4628      	mov	r0, r5
 800af82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af86:	f842 0f04 	str.w	r0, [r2, #4]!
 800af8a:	3301      	adds	r3, #1
 800af8c:	e7c5      	b.n	800af1a <__lshift+0x4a>
 800af8e:	3904      	subs	r1, #4
 800af90:	f853 2b04 	ldr.w	r2, [r3], #4
 800af94:	f841 2f04 	str.w	r2, [r1, #4]!
 800af98:	459c      	cmp	ip, r3
 800af9a:	d8f9      	bhi.n	800af90 <__lshift+0xc0>
 800af9c:	e7ea      	b.n	800af74 <__lshift+0xa4>
 800af9e:	bf00      	nop
 800afa0:	0800e505 	.word	0x0800e505
 800afa4:	0800e516 	.word	0x0800e516

0800afa8 <__mcmp>:
 800afa8:	690a      	ldr	r2, [r1, #16]
 800afaa:	4603      	mov	r3, r0
 800afac:	6900      	ldr	r0, [r0, #16]
 800afae:	1a80      	subs	r0, r0, r2
 800afb0:	b530      	push	{r4, r5, lr}
 800afb2:	d10e      	bne.n	800afd2 <__mcmp+0x2a>
 800afb4:	3314      	adds	r3, #20
 800afb6:	3114      	adds	r1, #20
 800afb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800afbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800afc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800afc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800afc8:	4295      	cmp	r5, r2
 800afca:	d003      	beq.n	800afd4 <__mcmp+0x2c>
 800afcc:	d205      	bcs.n	800afda <__mcmp+0x32>
 800afce:	f04f 30ff 	mov.w	r0, #4294967295
 800afd2:	bd30      	pop	{r4, r5, pc}
 800afd4:	42a3      	cmp	r3, r4
 800afd6:	d3f3      	bcc.n	800afc0 <__mcmp+0x18>
 800afd8:	e7fb      	b.n	800afd2 <__mcmp+0x2a>
 800afda:	2001      	movs	r0, #1
 800afdc:	e7f9      	b.n	800afd2 <__mcmp+0x2a>
	...

0800afe0 <__mdiff>:
 800afe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe4:	4689      	mov	r9, r1
 800afe6:	4606      	mov	r6, r0
 800afe8:	4611      	mov	r1, r2
 800afea:	4648      	mov	r0, r9
 800afec:	4614      	mov	r4, r2
 800afee:	f7ff ffdb 	bl	800afa8 <__mcmp>
 800aff2:	1e05      	subs	r5, r0, #0
 800aff4:	d112      	bne.n	800b01c <__mdiff+0x3c>
 800aff6:	4629      	mov	r1, r5
 800aff8:	4630      	mov	r0, r6
 800affa:	f7ff fd19 	bl	800aa30 <_Balloc>
 800affe:	4602      	mov	r2, r0
 800b000:	b928      	cbnz	r0, 800b00e <__mdiff+0x2e>
 800b002:	4b3f      	ldr	r3, [pc, #252]	@ (800b100 <__mdiff+0x120>)
 800b004:	f240 2137 	movw	r1, #567	@ 0x237
 800b008:	483e      	ldr	r0, [pc, #248]	@ (800b104 <__mdiff+0x124>)
 800b00a:	f001 faf1 	bl	800c5f0 <__assert_func>
 800b00e:	2301      	movs	r3, #1
 800b010:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b014:	4610      	mov	r0, r2
 800b016:	b003      	add	sp, #12
 800b018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01c:	bfbc      	itt	lt
 800b01e:	464b      	movlt	r3, r9
 800b020:	46a1      	movlt	r9, r4
 800b022:	4630      	mov	r0, r6
 800b024:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b028:	bfba      	itte	lt
 800b02a:	461c      	movlt	r4, r3
 800b02c:	2501      	movlt	r5, #1
 800b02e:	2500      	movge	r5, #0
 800b030:	f7ff fcfe 	bl	800aa30 <_Balloc>
 800b034:	4602      	mov	r2, r0
 800b036:	b918      	cbnz	r0, 800b040 <__mdiff+0x60>
 800b038:	4b31      	ldr	r3, [pc, #196]	@ (800b100 <__mdiff+0x120>)
 800b03a:	f240 2145 	movw	r1, #581	@ 0x245
 800b03e:	e7e3      	b.n	800b008 <__mdiff+0x28>
 800b040:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b044:	6926      	ldr	r6, [r4, #16]
 800b046:	60c5      	str	r5, [r0, #12]
 800b048:	f109 0310 	add.w	r3, r9, #16
 800b04c:	f109 0514 	add.w	r5, r9, #20
 800b050:	f104 0e14 	add.w	lr, r4, #20
 800b054:	f100 0b14 	add.w	fp, r0, #20
 800b058:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b05c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b060:	9301      	str	r3, [sp, #4]
 800b062:	46d9      	mov	r9, fp
 800b064:	f04f 0c00 	mov.w	ip, #0
 800b068:	9b01      	ldr	r3, [sp, #4]
 800b06a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b06e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b072:	9301      	str	r3, [sp, #4]
 800b074:	fa1f f38a 	uxth.w	r3, sl
 800b078:	4619      	mov	r1, r3
 800b07a:	b283      	uxth	r3, r0
 800b07c:	1acb      	subs	r3, r1, r3
 800b07e:	0c00      	lsrs	r0, r0, #16
 800b080:	4463      	add	r3, ip
 800b082:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b086:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b090:	4576      	cmp	r6, lr
 800b092:	f849 3b04 	str.w	r3, [r9], #4
 800b096:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b09a:	d8e5      	bhi.n	800b068 <__mdiff+0x88>
 800b09c:	1b33      	subs	r3, r6, r4
 800b09e:	3b15      	subs	r3, #21
 800b0a0:	f023 0303 	bic.w	r3, r3, #3
 800b0a4:	3415      	adds	r4, #21
 800b0a6:	3304      	adds	r3, #4
 800b0a8:	42a6      	cmp	r6, r4
 800b0aa:	bf38      	it	cc
 800b0ac:	2304      	movcc	r3, #4
 800b0ae:	441d      	add	r5, r3
 800b0b0:	445b      	add	r3, fp
 800b0b2:	461e      	mov	r6, r3
 800b0b4:	462c      	mov	r4, r5
 800b0b6:	4544      	cmp	r4, r8
 800b0b8:	d30e      	bcc.n	800b0d8 <__mdiff+0xf8>
 800b0ba:	f108 0103 	add.w	r1, r8, #3
 800b0be:	1b49      	subs	r1, r1, r5
 800b0c0:	f021 0103 	bic.w	r1, r1, #3
 800b0c4:	3d03      	subs	r5, #3
 800b0c6:	45a8      	cmp	r8, r5
 800b0c8:	bf38      	it	cc
 800b0ca:	2100      	movcc	r1, #0
 800b0cc:	440b      	add	r3, r1
 800b0ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b0d2:	b191      	cbz	r1, 800b0fa <__mdiff+0x11a>
 800b0d4:	6117      	str	r7, [r2, #16]
 800b0d6:	e79d      	b.n	800b014 <__mdiff+0x34>
 800b0d8:	f854 1b04 	ldr.w	r1, [r4], #4
 800b0dc:	46e6      	mov	lr, ip
 800b0de:	0c08      	lsrs	r0, r1, #16
 800b0e0:	fa1c fc81 	uxtah	ip, ip, r1
 800b0e4:	4471      	add	r1, lr
 800b0e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b0ea:	b289      	uxth	r1, r1
 800b0ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b0f0:	f846 1b04 	str.w	r1, [r6], #4
 800b0f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b0f8:	e7dd      	b.n	800b0b6 <__mdiff+0xd6>
 800b0fa:	3f01      	subs	r7, #1
 800b0fc:	e7e7      	b.n	800b0ce <__mdiff+0xee>
 800b0fe:	bf00      	nop
 800b100:	0800e505 	.word	0x0800e505
 800b104:	0800e516 	.word	0x0800e516

0800b108 <__ulp>:
 800b108:	b082      	sub	sp, #8
 800b10a:	ed8d 0b00 	vstr	d0, [sp]
 800b10e:	9a01      	ldr	r2, [sp, #4]
 800b110:	4b0f      	ldr	r3, [pc, #60]	@ (800b150 <__ulp+0x48>)
 800b112:	4013      	ands	r3, r2
 800b114:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b118:	2b00      	cmp	r3, #0
 800b11a:	dc08      	bgt.n	800b12e <__ulp+0x26>
 800b11c:	425b      	negs	r3, r3
 800b11e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b122:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b126:	da04      	bge.n	800b132 <__ulp+0x2a>
 800b128:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b12c:	4113      	asrs	r3, r2
 800b12e:	2200      	movs	r2, #0
 800b130:	e008      	b.n	800b144 <__ulp+0x3c>
 800b132:	f1a2 0314 	sub.w	r3, r2, #20
 800b136:	2b1e      	cmp	r3, #30
 800b138:	bfda      	itte	le
 800b13a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b13e:	40da      	lsrle	r2, r3
 800b140:	2201      	movgt	r2, #1
 800b142:	2300      	movs	r3, #0
 800b144:	4619      	mov	r1, r3
 800b146:	4610      	mov	r0, r2
 800b148:	ec41 0b10 	vmov	d0, r0, r1
 800b14c:	b002      	add	sp, #8
 800b14e:	4770      	bx	lr
 800b150:	7ff00000 	.word	0x7ff00000

0800b154 <__b2d>:
 800b154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b158:	6906      	ldr	r6, [r0, #16]
 800b15a:	f100 0814 	add.w	r8, r0, #20
 800b15e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b162:	1f37      	subs	r7, r6, #4
 800b164:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b168:	4610      	mov	r0, r2
 800b16a:	f7ff fd53 	bl	800ac14 <__hi0bits>
 800b16e:	f1c0 0320 	rsb	r3, r0, #32
 800b172:	280a      	cmp	r0, #10
 800b174:	600b      	str	r3, [r1, #0]
 800b176:	491b      	ldr	r1, [pc, #108]	@ (800b1e4 <__b2d+0x90>)
 800b178:	dc15      	bgt.n	800b1a6 <__b2d+0x52>
 800b17a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b17e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b182:	45b8      	cmp	r8, r7
 800b184:	ea43 0501 	orr.w	r5, r3, r1
 800b188:	bf34      	ite	cc
 800b18a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b18e:	2300      	movcs	r3, #0
 800b190:	3015      	adds	r0, #21
 800b192:	fa02 f000 	lsl.w	r0, r2, r0
 800b196:	fa23 f30c 	lsr.w	r3, r3, ip
 800b19a:	4303      	orrs	r3, r0
 800b19c:	461c      	mov	r4, r3
 800b19e:	ec45 4b10 	vmov	d0, r4, r5
 800b1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a6:	45b8      	cmp	r8, r7
 800b1a8:	bf3a      	itte	cc
 800b1aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b1ae:	f1a6 0708 	subcc.w	r7, r6, #8
 800b1b2:	2300      	movcs	r3, #0
 800b1b4:	380b      	subs	r0, #11
 800b1b6:	d012      	beq.n	800b1de <__b2d+0x8a>
 800b1b8:	f1c0 0120 	rsb	r1, r0, #32
 800b1bc:	fa23 f401 	lsr.w	r4, r3, r1
 800b1c0:	4082      	lsls	r2, r0
 800b1c2:	4322      	orrs	r2, r4
 800b1c4:	4547      	cmp	r7, r8
 800b1c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b1ca:	bf8c      	ite	hi
 800b1cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b1d0:	2200      	movls	r2, #0
 800b1d2:	4083      	lsls	r3, r0
 800b1d4:	40ca      	lsrs	r2, r1
 800b1d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	e7de      	b.n	800b19c <__b2d+0x48>
 800b1de:	ea42 0501 	orr.w	r5, r2, r1
 800b1e2:	e7db      	b.n	800b19c <__b2d+0x48>
 800b1e4:	3ff00000 	.word	0x3ff00000

0800b1e8 <__d2b>:
 800b1e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1ec:	460f      	mov	r7, r1
 800b1ee:	2101      	movs	r1, #1
 800b1f0:	ec59 8b10 	vmov	r8, r9, d0
 800b1f4:	4616      	mov	r6, r2
 800b1f6:	f7ff fc1b 	bl	800aa30 <_Balloc>
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	b930      	cbnz	r0, 800b20c <__d2b+0x24>
 800b1fe:	4602      	mov	r2, r0
 800b200:	4b23      	ldr	r3, [pc, #140]	@ (800b290 <__d2b+0xa8>)
 800b202:	4824      	ldr	r0, [pc, #144]	@ (800b294 <__d2b+0xac>)
 800b204:	f240 310f 	movw	r1, #783	@ 0x30f
 800b208:	f001 f9f2 	bl	800c5f0 <__assert_func>
 800b20c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b210:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b214:	b10d      	cbz	r5, 800b21a <__d2b+0x32>
 800b216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b21a:	9301      	str	r3, [sp, #4]
 800b21c:	f1b8 0300 	subs.w	r3, r8, #0
 800b220:	d023      	beq.n	800b26a <__d2b+0x82>
 800b222:	4668      	mov	r0, sp
 800b224:	9300      	str	r3, [sp, #0]
 800b226:	f7ff fd14 	bl	800ac52 <__lo0bits>
 800b22a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b22e:	b1d0      	cbz	r0, 800b266 <__d2b+0x7e>
 800b230:	f1c0 0320 	rsb	r3, r0, #32
 800b234:	fa02 f303 	lsl.w	r3, r2, r3
 800b238:	430b      	orrs	r3, r1
 800b23a:	40c2      	lsrs	r2, r0
 800b23c:	6163      	str	r3, [r4, #20]
 800b23e:	9201      	str	r2, [sp, #4]
 800b240:	9b01      	ldr	r3, [sp, #4]
 800b242:	61a3      	str	r3, [r4, #24]
 800b244:	2b00      	cmp	r3, #0
 800b246:	bf0c      	ite	eq
 800b248:	2201      	moveq	r2, #1
 800b24a:	2202      	movne	r2, #2
 800b24c:	6122      	str	r2, [r4, #16]
 800b24e:	b1a5      	cbz	r5, 800b27a <__d2b+0x92>
 800b250:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b254:	4405      	add	r5, r0
 800b256:	603d      	str	r5, [r7, #0]
 800b258:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b25c:	6030      	str	r0, [r6, #0]
 800b25e:	4620      	mov	r0, r4
 800b260:	b003      	add	sp, #12
 800b262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b266:	6161      	str	r1, [r4, #20]
 800b268:	e7ea      	b.n	800b240 <__d2b+0x58>
 800b26a:	a801      	add	r0, sp, #4
 800b26c:	f7ff fcf1 	bl	800ac52 <__lo0bits>
 800b270:	9b01      	ldr	r3, [sp, #4]
 800b272:	6163      	str	r3, [r4, #20]
 800b274:	3020      	adds	r0, #32
 800b276:	2201      	movs	r2, #1
 800b278:	e7e8      	b.n	800b24c <__d2b+0x64>
 800b27a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b27e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b282:	6038      	str	r0, [r7, #0]
 800b284:	6918      	ldr	r0, [r3, #16]
 800b286:	f7ff fcc5 	bl	800ac14 <__hi0bits>
 800b28a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b28e:	e7e5      	b.n	800b25c <__d2b+0x74>
 800b290:	0800e505 	.word	0x0800e505
 800b294:	0800e516 	.word	0x0800e516

0800b298 <__ratio>:
 800b298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29c:	b085      	sub	sp, #20
 800b29e:	e9cd 1000 	strd	r1, r0, [sp]
 800b2a2:	a902      	add	r1, sp, #8
 800b2a4:	f7ff ff56 	bl	800b154 <__b2d>
 800b2a8:	9800      	ldr	r0, [sp, #0]
 800b2aa:	a903      	add	r1, sp, #12
 800b2ac:	ec55 4b10 	vmov	r4, r5, d0
 800b2b0:	f7ff ff50 	bl	800b154 <__b2d>
 800b2b4:	9b01      	ldr	r3, [sp, #4]
 800b2b6:	6919      	ldr	r1, [r3, #16]
 800b2b8:	9b00      	ldr	r3, [sp, #0]
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	1ac9      	subs	r1, r1, r3
 800b2be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b2c2:	1a9b      	subs	r3, r3, r2
 800b2c4:	ec5b ab10 	vmov	sl, fp, d0
 800b2c8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	bfce      	itee	gt
 800b2d0:	462a      	movgt	r2, r5
 800b2d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b2d6:	465a      	movle	r2, fp
 800b2d8:	462f      	mov	r7, r5
 800b2da:	46d9      	mov	r9, fp
 800b2dc:	bfcc      	ite	gt
 800b2de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b2e2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b2e6:	464b      	mov	r3, r9
 800b2e8:	4652      	mov	r2, sl
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	4639      	mov	r1, r7
 800b2ee:	f7f5 faad 	bl	800084c <__aeabi_ddiv>
 800b2f2:	ec41 0b10 	vmov	d0, r0, r1
 800b2f6:	b005      	add	sp, #20
 800b2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2fc <__copybits>:
 800b2fc:	3901      	subs	r1, #1
 800b2fe:	b570      	push	{r4, r5, r6, lr}
 800b300:	1149      	asrs	r1, r1, #5
 800b302:	6914      	ldr	r4, [r2, #16]
 800b304:	3101      	adds	r1, #1
 800b306:	f102 0314 	add.w	r3, r2, #20
 800b30a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b30e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b312:	1f05      	subs	r5, r0, #4
 800b314:	42a3      	cmp	r3, r4
 800b316:	d30c      	bcc.n	800b332 <__copybits+0x36>
 800b318:	1aa3      	subs	r3, r4, r2
 800b31a:	3b11      	subs	r3, #17
 800b31c:	f023 0303 	bic.w	r3, r3, #3
 800b320:	3211      	adds	r2, #17
 800b322:	42a2      	cmp	r2, r4
 800b324:	bf88      	it	hi
 800b326:	2300      	movhi	r3, #0
 800b328:	4418      	add	r0, r3
 800b32a:	2300      	movs	r3, #0
 800b32c:	4288      	cmp	r0, r1
 800b32e:	d305      	bcc.n	800b33c <__copybits+0x40>
 800b330:	bd70      	pop	{r4, r5, r6, pc}
 800b332:	f853 6b04 	ldr.w	r6, [r3], #4
 800b336:	f845 6f04 	str.w	r6, [r5, #4]!
 800b33a:	e7eb      	b.n	800b314 <__copybits+0x18>
 800b33c:	f840 3b04 	str.w	r3, [r0], #4
 800b340:	e7f4      	b.n	800b32c <__copybits+0x30>

0800b342 <__any_on>:
 800b342:	f100 0214 	add.w	r2, r0, #20
 800b346:	6900      	ldr	r0, [r0, #16]
 800b348:	114b      	asrs	r3, r1, #5
 800b34a:	4298      	cmp	r0, r3
 800b34c:	b510      	push	{r4, lr}
 800b34e:	db11      	blt.n	800b374 <__any_on+0x32>
 800b350:	dd0a      	ble.n	800b368 <__any_on+0x26>
 800b352:	f011 011f 	ands.w	r1, r1, #31
 800b356:	d007      	beq.n	800b368 <__any_on+0x26>
 800b358:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b35c:	fa24 f001 	lsr.w	r0, r4, r1
 800b360:	fa00 f101 	lsl.w	r1, r0, r1
 800b364:	428c      	cmp	r4, r1
 800b366:	d10b      	bne.n	800b380 <__any_on+0x3e>
 800b368:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d803      	bhi.n	800b378 <__any_on+0x36>
 800b370:	2000      	movs	r0, #0
 800b372:	bd10      	pop	{r4, pc}
 800b374:	4603      	mov	r3, r0
 800b376:	e7f7      	b.n	800b368 <__any_on+0x26>
 800b378:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b37c:	2900      	cmp	r1, #0
 800b37e:	d0f5      	beq.n	800b36c <__any_on+0x2a>
 800b380:	2001      	movs	r0, #1
 800b382:	e7f6      	b.n	800b372 <__any_on+0x30>

0800b384 <sulp>:
 800b384:	b570      	push	{r4, r5, r6, lr}
 800b386:	4604      	mov	r4, r0
 800b388:	460d      	mov	r5, r1
 800b38a:	ec45 4b10 	vmov	d0, r4, r5
 800b38e:	4616      	mov	r6, r2
 800b390:	f7ff feba 	bl	800b108 <__ulp>
 800b394:	ec51 0b10 	vmov	r0, r1, d0
 800b398:	b17e      	cbz	r6, 800b3ba <sulp+0x36>
 800b39a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b39e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	dd09      	ble.n	800b3ba <sulp+0x36>
 800b3a6:	051b      	lsls	r3, r3, #20
 800b3a8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b3ac:	2400      	movs	r4, #0
 800b3ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b3b2:	4622      	mov	r2, r4
 800b3b4:	462b      	mov	r3, r5
 800b3b6:	f7f5 f91f 	bl	80005f8 <__aeabi_dmul>
 800b3ba:	ec41 0b10 	vmov	d0, r0, r1
 800b3be:	bd70      	pop	{r4, r5, r6, pc}

0800b3c0 <_strtod_l>:
 800b3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c4:	b09f      	sub	sp, #124	@ 0x7c
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	921a      	str	r2, [sp, #104]	@ 0x68
 800b3ce:	9005      	str	r0, [sp, #20]
 800b3d0:	f04f 0a00 	mov.w	sl, #0
 800b3d4:	f04f 0b00 	mov.w	fp, #0
 800b3d8:	460a      	mov	r2, r1
 800b3da:	9219      	str	r2, [sp, #100]	@ 0x64
 800b3dc:	7811      	ldrb	r1, [r2, #0]
 800b3de:	292b      	cmp	r1, #43	@ 0x2b
 800b3e0:	d04a      	beq.n	800b478 <_strtod_l+0xb8>
 800b3e2:	d838      	bhi.n	800b456 <_strtod_l+0x96>
 800b3e4:	290d      	cmp	r1, #13
 800b3e6:	d832      	bhi.n	800b44e <_strtod_l+0x8e>
 800b3e8:	2908      	cmp	r1, #8
 800b3ea:	d832      	bhi.n	800b452 <_strtod_l+0x92>
 800b3ec:	2900      	cmp	r1, #0
 800b3ee:	d03b      	beq.n	800b468 <_strtod_l+0xa8>
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b3f6:	782a      	ldrb	r2, [r5, #0]
 800b3f8:	2a30      	cmp	r2, #48	@ 0x30
 800b3fa:	f040 80b2 	bne.w	800b562 <_strtod_l+0x1a2>
 800b3fe:	786a      	ldrb	r2, [r5, #1]
 800b400:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b404:	2a58      	cmp	r2, #88	@ 0x58
 800b406:	d16e      	bne.n	800b4e6 <_strtod_l+0x126>
 800b408:	9302      	str	r3, [sp, #8]
 800b40a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b40c:	9301      	str	r3, [sp, #4]
 800b40e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	4a8f      	ldr	r2, [pc, #572]	@ (800b650 <_strtod_l+0x290>)
 800b414:	9805      	ldr	r0, [sp, #20]
 800b416:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b418:	a919      	add	r1, sp, #100	@ 0x64
 800b41a:	f001 f983 	bl	800c724 <__gethex>
 800b41e:	f010 060f 	ands.w	r6, r0, #15
 800b422:	4604      	mov	r4, r0
 800b424:	d005      	beq.n	800b432 <_strtod_l+0x72>
 800b426:	2e06      	cmp	r6, #6
 800b428:	d128      	bne.n	800b47c <_strtod_l+0xbc>
 800b42a:	3501      	adds	r5, #1
 800b42c:	2300      	movs	r3, #0
 800b42e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b430:	930e      	str	r3, [sp, #56]	@ 0x38
 800b432:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b434:	2b00      	cmp	r3, #0
 800b436:	f040 858e 	bne.w	800bf56 <_strtod_l+0xb96>
 800b43a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b43c:	b1cb      	cbz	r3, 800b472 <_strtod_l+0xb2>
 800b43e:	4652      	mov	r2, sl
 800b440:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b444:	ec43 2b10 	vmov	d0, r2, r3
 800b448:	b01f      	add	sp, #124	@ 0x7c
 800b44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44e:	2920      	cmp	r1, #32
 800b450:	d1ce      	bne.n	800b3f0 <_strtod_l+0x30>
 800b452:	3201      	adds	r2, #1
 800b454:	e7c1      	b.n	800b3da <_strtod_l+0x1a>
 800b456:	292d      	cmp	r1, #45	@ 0x2d
 800b458:	d1ca      	bne.n	800b3f0 <_strtod_l+0x30>
 800b45a:	2101      	movs	r1, #1
 800b45c:	910e      	str	r1, [sp, #56]	@ 0x38
 800b45e:	1c51      	adds	r1, r2, #1
 800b460:	9119      	str	r1, [sp, #100]	@ 0x64
 800b462:	7852      	ldrb	r2, [r2, #1]
 800b464:	2a00      	cmp	r2, #0
 800b466:	d1c5      	bne.n	800b3f4 <_strtod_l+0x34>
 800b468:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b46a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f040 8570 	bne.w	800bf52 <_strtod_l+0xb92>
 800b472:	4652      	mov	r2, sl
 800b474:	465b      	mov	r3, fp
 800b476:	e7e5      	b.n	800b444 <_strtod_l+0x84>
 800b478:	2100      	movs	r1, #0
 800b47a:	e7ef      	b.n	800b45c <_strtod_l+0x9c>
 800b47c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b47e:	b13a      	cbz	r2, 800b490 <_strtod_l+0xd0>
 800b480:	2135      	movs	r1, #53	@ 0x35
 800b482:	a81c      	add	r0, sp, #112	@ 0x70
 800b484:	f7ff ff3a 	bl	800b2fc <__copybits>
 800b488:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b48a:	9805      	ldr	r0, [sp, #20]
 800b48c:	f7ff fb10 	bl	800aab0 <_Bfree>
 800b490:	3e01      	subs	r6, #1
 800b492:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b494:	2e04      	cmp	r6, #4
 800b496:	d806      	bhi.n	800b4a6 <_strtod_l+0xe6>
 800b498:	e8df f006 	tbb	[pc, r6]
 800b49c:	201d0314 	.word	0x201d0314
 800b4a0:	14          	.byte	0x14
 800b4a1:	00          	.byte	0x00
 800b4a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b4a6:	05e1      	lsls	r1, r4, #23
 800b4a8:	bf48      	it	mi
 800b4aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b4ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4b2:	0d1b      	lsrs	r3, r3, #20
 800b4b4:	051b      	lsls	r3, r3, #20
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d1bb      	bne.n	800b432 <_strtod_l+0x72>
 800b4ba:	f7fe fb1f 	bl	8009afc <__errno>
 800b4be:	2322      	movs	r3, #34	@ 0x22
 800b4c0:	6003      	str	r3, [r0, #0]
 800b4c2:	e7b6      	b.n	800b432 <_strtod_l+0x72>
 800b4c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b4c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b4cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b4d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b4d4:	e7e7      	b.n	800b4a6 <_strtod_l+0xe6>
 800b4d6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b658 <_strtod_l+0x298>
 800b4da:	e7e4      	b.n	800b4a6 <_strtod_l+0xe6>
 800b4dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b4e0:	f04f 3aff 	mov.w	sl, #4294967295
 800b4e4:	e7df      	b.n	800b4a6 <_strtod_l+0xe6>
 800b4e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4e8:	1c5a      	adds	r2, r3, #1
 800b4ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4ec:	785b      	ldrb	r3, [r3, #1]
 800b4ee:	2b30      	cmp	r3, #48	@ 0x30
 800b4f0:	d0f9      	beq.n	800b4e6 <_strtod_l+0x126>
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d09d      	beq.n	800b432 <_strtod_l+0x72>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	2700      	movs	r7, #0
 800b4fa:	9308      	str	r3, [sp, #32]
 800b4fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4fe:	930c      	str	r3, [sp, #48]	@ 0x30
 800b500:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b502:	46b9      	mov	r9, r7
 800b504:	220a      	movs	r2, #10
 800b506:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b508:	7805      	ldrb	r5, [r0, #0]
 800b50a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b50e:	b2d9      	uxtb	r1, r3
 800b510:	2909      	cmp	r1, #9
 800b512:	d928      	bls.n	800b566 <_strtod_l+0x1a6>
 800b514:	494f      	ldr	r1, [pc, #316]	@ (800b654 <_strtod_l+0x294>)
 800b516:	2201      	movs	r2, #1
 800b518:	f001 f81e 	bl	800c558 <strncmp>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d032      	beq.n	800b586 <_strtod_l+0x1c6>
 800b520:	2000      	movs	r0, #0
 800b522:	462a      	mov	r2, r5
 800b524:	900a      	str	r0, [sp, #40]	@ 0x28
 800b526:	464d      	mov	r5, r9
 800b528:	4603      	mov	r3, r0
 800b52a:	2a65      	cmp	r2, #101	@ 0x65
 800b52c:	d001      	beq.n	800b532 <_strtod_l+0x172>
 800b52e:	2a45      	cmp	r2, #69	@ 0x45
 800b530:	d114      	bne.n	800b55c <_strtod_l+0x19c>
 800b532:	b91d      	cbnz	r5, 800b53c <_strtod_l+0x17c>
 800b534:	9a08      	ldr	r2, [sp, #32]
 800b536:	4302      	orrs	r2, r0
 800b538:	d096      	beq.n	800b468 <_strtod_l+0xa8>
 800b53a:	2500      	movs	r5, #0
 800b53c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b53e:	1c62      	adds	r2, r4, #1
 800b540:	9219      	str	r2, [sp, #100]	@ 0x64
 800b542:	7862      	ldrb	r2, [r4, #1]
 800b544:	2a2b      	cmp	r2, #43	@ 0x2b
 800b546:	d07a      	beq.n	800b63e <_strtod_l+0x27e>
 800b548:	2a2d      	cmp	r2, #45	@ 0x2d
 800b54a:	d07e      	beq.n	800b64a <_strtod_l+0x28a>
 800b54c:	f04f 0c00 	mov.w	ip, #0
 800b550:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b554:	2909      	cmp	r1, #9
 800b556:	f240 8085 	bls.w	800b664 <_strtod_l+0x2a4>
 800b55a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b55c:	f04f 0800 	mov.w	r8, #0
 800b560:	e0a5      	b.n	800b6ae <_strtod_l+0x2ee>
 800b562:	2300      	movs	r3, #0
 800b564:	e7c8      	b.n	800b4f8 <_strtod_l+0x138>
 800b566:	f1b9 0f08 	cmp.w	r9, #8
 800b56a:	bfd8      	it	le
 800b56c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b56e:	f100 0001 	add.w	r0, r0, #1
 800b572:	bfda      	itte	le
 800b574:	fb02 3301 	mlale	r3, r2, r1, r3
 800b578:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b57a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b57e:	f109 0901 	add.w	r9, r9, #1
 800b582:	9019      	str	r0, [sp, #100]	@ 0x64
 800b584:	e7bf      	b.n	800b506 <_strtod_l+0x146>
 800b586:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b588:	1c5a      	adds	r2, r3, #1
 800b58a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b58c:	785a      	ldrb	r2, [r3, #1]
 800b58e:	f1b9 0f00 	cmp.w	r9, #0
 800b592:	d03b      	beq.n	800b60c <_strtod_l+0x24c>
 800b594:	900a      	str	r0, [sp, #40]	@ 0x28
 800b596:	464d      	mov	r5, r9
 800b598:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b59c:	2b09      	cmp	r3, #9
 800b59e:	d912      	bls.n	800b5c6 <_strtod_l+0x206>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e7c2      	b.n	800b52a <_strtod_l+0x16a>
 800b5a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5a6:	1c5a      	adds	r2, r3, #1
 800b5a8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5aa:	785a      	ldrb	r2, [r3, #1]
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	2a30      	cmp	r2, #48	@ 0x30
 800b5b0:	d0f8      	beq.n	800b5a4 <_strtod_l+0x1e4>
 800b5b2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b5b6:	2b08      	cmp	r3, #8
 800b5b8:	f200 84d2 	bhi.w	800bf60 <_strtod_l+0xba0>
 800b5bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5be:	900a      	str	r0, [sp, #40]	@ 0x28
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5c4:	4605      	mov	r5, r0
 800b5c6:	3a30      	subs	r2, #48	@ 0x30
 800b5c8:	f100 0301 	add.w	r3, r0, #1
 800b5cc:	d018      	beq.n	800b600 <_strtod_l+0x240>
 800b5ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b5d0:	4419      	add	r1, r3
 800b5d2:	910a      	str	r1, [sp, #40]	@ 0x28
 800b5d4:	462e      	mov	r6, r5
 800b5d6:	f04f 0e0a 	mov.w	lr, #10
 800b5da:	1c71      	adds	r1, r6, #1
 800b5dc:	eba1 0c05 	sub.w	ip, r1, r5
 800b5e0:	4563      	cmp	r3, ip
 800b5e2:	dc15      	bgt.n	800b610 <_strtod_l+0x250>
 800b5e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b5e8:	182b      	adds	r3, r5, r0
 800b5ea:	2b08      	cmp	r3, #8
 800b5ec:	f105 0501 	add.w	r5, r5, #1
 800b5f0:	4405      	add	r5, r0
 800b5f2:	dc1a      	bgt.n	800b62a <_strtod_l+0x26a>
 800b5f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b5f6:	230a      	movs	r3, #10
 800b5f8:	fb03 2301 	mla	r3, r3, r1, r2
 800b5fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5fe:	2300      	movs	r3, #0
 800b600:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b602:	1c51      	adds	r1, r2, #1
 800b604:	9119      	str	r1, [sp, #100]	@ 0x64
 800b606:	7852      	ldrb	r2, [r2, #1]
 800b608:	4618      	mov	r0, r3
 800b60a:	e7c5      	b.n	800b598 <_strtod_l+0x1d8>
 800b60c:	4648      	mov	r0, r9
 800b60e:	e7ce      	b.n	800b5ae <_strtod_l+0x1ee>
 800b610:	2e08      	cmp	r6, #8
 800b612:	dc05      	bgt.n	800b620 <_strtod_l+0x260>
 800b614:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b616:	fb0e f606 	mul.w	r6, lr, r6
 800b61a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b61c:	460e      	mov	r6, r1
 800b61e:	e7dc      	b.n	800b5da <_strtod_l+0x21a>
 800b620:	2910      	cmp	r1, #16
 800b622:	bfd8      	it	le
 800b624:	fb0e f707 	mulle.w	r7, lr, r7
 800b628:	e7f8      	b.n	800b61c <_strtod_l+0x25c>
 800b62a:	2b0f      	cmp	r3, #15
 800b62c:	bfdc      	itt	le
 800b62e:	230a      	movle	r3, #10
 800b630:	fb03 2707 	mlale	r7, r3, r7, r2
 800b634:	e7e3      	b.n	800b5fe <_strtod_l+0x23e>
 800b636:	2300      	movs	r3, #0
 800b638:	930a      	str	r3, [sp, #40]	@ 0x28
 800b63a:	2301      	movs	r3, #1
 800b63c:	e77a      	b.n	800b534 <_strtod_l+0x174>
 800b63e:	f04f 0c00 	mov.w	ip, #0
 800b642:	1ca2      	adds	r2, r4, #2
 800b644:	9219      	str	r2, [sp, #100]	@ 0x64
 800b646:	78a2      	ldrb	r2, [r4, #2]
 800b648:	e782      	b.n	800b550 <_strtod_l+0x190>
 800b64a:	f04f 0c01 	mov.w	ip, #1
 800b64e:	e7f8      	b.n	800b642 <_strtod_l+0x282>
 800b650:	0800e73c 	.word	0x0800e73c
 800b654:	0800e56f 	.word	0x0800e56f
 800b658:	7ff00000 	.word	0x7ff00000
 800b65c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b65e:	1c51      	adds	r1, r2, #1
 800b660:	9119      	str	r1, [sp, #100]	@ 0x64
 800b662:	7852      	ldrb	r2, [r2, #1]
 800b664:	2a30      	cmp	r2, #48	@ 0x30
 800b666:	d0f9      	beq.n	800b65c <_strtod_l+0x29c>
 800b668:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b66c:	2908      	cmp	r1, #8
 800b66e:	f63f af75 	bhi.w	800b55c <_strtod_l+0x19c>
 800b672:	3a30      	subs	r2, #48	@ 0x30
 800b674:	9209      	str	r2, [sp, #36]	@ 0x24
 800b676:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b678:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b67a:	f04f 080a 	mov.w	r8, #10
 800b67e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b680:	1c56      	adds	r6, r2, #1
 800b682:	9619      	str	r6, [sp, #100]	@ 0x64
 800b684:	7852      	ldrb	r2, [r2, #1]
 800b686:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b68a:	f1be 0f09 	cmp.w	lr, #9
 800b68e:	d939      	bls.n	800b704 <_strtod_l+0x344>
 800b690:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b692:	1a76      	subs	r6, r6, r1
 800b694:	2e08      	cmp	r6, #8
 800b696:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b69a:	dc03      	bgt.n	800b6a4 <_strtod_l+0x2e4>
 800b69c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b69e:	4588      	cmp	r8, r1
 800b6a0:	bfa8      	it	ge
 800b6a2:	4688      	movge	r8, r1
 800b6a4:	f1bc 0f00 	cmp.w	ip, #0
 800b6a8:	d001      	beq.n	800b6ae <_strtod_l+0x2ee>
 800b6aa:	f1c8 0800 	rsb	r8, r8, #0
 800b6ae:	2d00      	cmp	r5, #0
 800b6b0:	d14e      	bne.n	800b750 <_strtod_l+0x390>
 800b6b2:	9908      	ldr	r1, [sp, #32]
 800b6b4:	4308      	orrs	r0, r1
 800b6b6:	f47f aebc 	bne.w	800b432 <_strtod_l+0x72>
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	f47f aed4 	bne.w	800b468 <_strtod_l+0xa8>
 800b6c0:	2a69      	cmp	r2, #105	@ 0x69
 800b6c2:	d028      	beq.n	800b716 <_strtod_l+0x356>
 800b6c4:	dc25      	bgt.n	800b712 <_strtod_l+0x352>
 800b6c6:	2a49      	cmp	r2, #73	@ 0x49
 800b6c8:	d025      	beq.n	800b716 <_strtod_l+0x356>
 800b6ca:	2a4e      	cmp	r2, #78	@ 0x4e
 800b6cc:	f47f aecc 	bne.w	800b468 <_strtod_l+0xa8>
 800b6d0:	499a      	ldr	r1, [pc, #616]	@ (800b93c <_strtod_l+0x57c>)
 800b6d2:	a819      	add	r0, sp, #100	@ 0x64
 800b6d4:	f001 fa48 	bl	800cb68 <__match>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	f43f aec5 	beq.w	800b468 <_strtod_l+0xa8>
 800b6de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	2b28      	cmp	r3, #40	@ 0x28
 800b6e4:	d12e      	bne.n	800b744 <_strtod_l+0x384>
 800b6e6:	4996      	ldr	r1, [pc, #600]	@ (800b940 <_strtod_l+0x580>)
 800b6e8:	aa1c      	add	r2, sp, #112	@ 0x70
 800b6ea:	a819      	add	r0, sp, #100	@ 0x64
 800b6ec:	f001 fa50 	bl	800cb90 <__hexnan>
 800b6f0:	2805      	cmp	r0, #5
 800b6f2:	d127      	bne.n	800b744 <_strtod_l+0x384>
 800b6f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b6f6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b6fa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b6fe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b702:	e696      	b.n	800b432 <_strtod_l+0x72>
 800b704:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b706:	fb08 2101 	mla	r1, r8, r1, r2
 800b70a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b70e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b710:	e7b5      	b.n	800b67e <_strtod_l+0x2be>
 800b712:	2a6e      	cmp	r2, #110	@ 0x6e
 800b714:	e7da      	b.n	800b6cc <_strtod_l+0x30c>
 800b716:	498b      	ldr	r1, [pc, #556]	@ (800b944 <_strtod_l+0x584>)
 800b718:	a819      	add	r0, sp, #100	@ 0x64
 800b71a:	f001 fa25 	bl	800cb68 <__match>
 800b71e:	2800      	cmp	r0, #0
 800b720:	f43f aea2 	beq.w	800b468 <_strtod_l+0xa8>
 800b724:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b726:	4988      	ldr	r1, [pc, #544]	@ (800b948 <_strtod_l+0x588>)
 800b728:	3b01      	subs	r3, #1
 800b72a:	a819      	add	r0, sp, #100	@ 0x64
 800b72c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b72e:	f001 fa1b 	bl	800cb68 <__match>
 800b732:	b910      	cbnz	r0, 800b73a <_strtod_l+0x37a>
 800b734:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b736:	3301      	adds	r3, #1
 800b738:	9319      	str	r3, [sp, #100]	@ 0x64
 800b73a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b958 <_strtod_l+0x598>
 800b73e:	f04f 0a00 	mov.w	sl, #0
 800b742:	e676      	b.n	800b432 <_strtod_l+0x72>
 800b744:	4881      	ldr	r0, [pc, #516]	@ (800b94c <_strtod_l+0x58c>)
 800b746:	f000 ff4b 	bl	800c5e0 <nan>
 800b74a:	ec5b ab10 	vmov	sl, fp, d0
 800b74e:	e670      	b.n	800b432 <_strtod_l+0x72>
 800b750:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b752:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b754:	eba8 0303 	sub.w	r3, r8, r3
 800b758:	f1b9 0f00 	cmp.w	r9, #0
 800b75c:	bf08      	it	eq
 800b75e:	46a9      	moveq	r9, r5
 800b760:	2d10      	cmp	r5, #16
 800b762:	9309      	str	r3, [sp, #36]	@ 0x24
 800b764:	462c      	mov	r4, r5
 800b766:	bfa8      	it	ge
 800b768:	2410      	movge	r4, #16
 800b76a:	f7f4 fecb 	bl	8000504 <__aeabi_ui2d>
 800b76e:	2d09      	cmp	r5, #9
 800b770:	4682      	mov	sl, r0
 800b772:	468b      	mov	fp, r1
 800b774:	dc13      	bgt.n	800b79e <_strtod_l+0x3de>
 800b776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f43f ae5a 	beq.w	800b432 <_strtod_l+0x72>
 800b77e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b780:	dd78      	ble.n	800b874 <_strtod_l+0x4b4>
 800b782:	2b16      	cmp	r3, #22
 800b784:	dc5f      	bgt.n	800b846 <_strtod_l+0x486>
 800b786:	4972      	ldr	r1, [pc, #456]	@ (800b950 <_strtod_l+0x590>)
 800b788:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b78c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b790:	4652      	mov	r2, sl
 800b792:	465b      	mov	r3, fp
 800b794:	f7f4 ff30 	bl	80005f8 <__aeabi_dmul>
 800b798:	4682      	mov	sl, r0
 800b79a:	468b      	mov	fp, r1
 800b79c:	e649      	b.n	800b432 <_strtod_l+0x72>
 800b79e:	4b6c      	ldr	r3, [pc, #432]	@ (800b950 <_strtod_l+0x590>)
 800b7a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b7a8:	f7f4 ff26 	bl	80005f8 <__aeabi_dmul>
 800b7ac:	4682      	mov	sl, r0
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	468b      	mov	fp, r1
 800b7b2:	f7f4 fea7 	bl	8000504 <__aeabi_ui2d>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	4650      	mov	r0, sl
 800b7bc:	4659      	mov	r1, fp
 800b7be:	f7f4 fd65 	bl	800028c <__adddf3>
 800b7c2:	2d0f      	cmp	r5, #15
 800b7c4:	4682      	mov	sl, r0
 800b7c6:	468b      	mov	fp, r1
 800b7c8:	ddd5      	ble.n	800b776 <_strtod_l+0x3b6>
 800b7ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7cc:	1b2c      	subs	r4, r5, r4
 800b7ce:	441c      	add	r4, r3
 800b7d0:	2c00      	cmp	r4, #0
 800b7d2:	f340 8093 	ble.w	800b8fc <_strtod_l+0x53c>
 800b7d6:	f014 030f 	ands.w	r3, r4, #15
 800b7da:	d00a      	beq.n	800b7f2 <_strtod_l+0x432>
 800b7dc:	495c      	ldr	r1, [pc, #368]	@ (800b950 <_strtod_l+0x590>)
 800b7de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b7e2:	4652      	mov	r2, sl
 800b7e4:	465b      	mov	r3, fp
 800b7e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7ea:	f7f4 ff05 	bl	80005f8 <__aeabi_dmul>
 800b7ee:	4682      	mov	sl, r0
 800b7f0:	468b      	mov	fp, r1
 800b7f2:	f034 040f 	bics.w	r4, r4, #15
 800b7f6:	d073      	beq.n	800b8e0 <_strtod_l+0x520>
 800b7f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b7fc:	dd49      	ble.n	800b892 <_strtod_l+0x4d2>
 800b7fe:	2400      	movs	r4, #0
 800b800:	46a0      	mov	r8, r4
 800b802:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b804:	46a1      	mov	r9, r4
 800b806:	9a05      	ldr	r2, [sp, #20]
 800b808:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b958 <_strtod_l+0x598>
 800b80c:	2322      	movs	r3, #34	@ 0x22
 800b80e:	6013      	str	r3, [r2, #0]
 800b810:	f04f 0a00 	mov.w	sl, #0
 800b814:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b816:	2b00      	cmp	r3, #0
 800b818:	f43f ae0b 	beq.w	800b432 <_strtod_l+0x72>
 800b81c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b81e:	9805      	ldr	r0, [sp, #20]
 800b820:	f7ff f946 	bl	800aab0 <_Bfree>
 800b824:	9805      	ldr	r0, [sp, #20]
 800b826:	4649      	mov	r1, r9
 800b828:	f7ff f942 	bl	800aab0 <_Bfree>
 800b82c:	9805      	ldr	r0, [sp, #20]
 800b82e:	4641      	mov	r1, r8
 800b830:	f7ff f93e 	bl	800aab0 <_Bfree>
 800b834:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b836:	9805      	ldr	r0, [sp, #20]
 800b838:	f7ff f93a 	bl	800aab0 <_Bfree>
 800b83c:	9805      	ldr	r0, [sp, #20]
 800b83e:	4621      	mov	r1, r4
 800b840:	f7ff f936 	bl	800aab0 <_Bfree>
 800b844:	e5f5      	b.n	800b432 <_strtod_l+0x72>
 800b846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b848:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b84c:	4293      	cmp	r3, r2
 800b84e:	dbbc      	blt.n	800b7ca <_strtod_l+0x40a>
 800b850:	4c3f      	ldr	r4, [pc, #252]	@ (800b950 <_strtod_l+0x590>)
 800b852:	f1c5 050f 	rsb	r5, r5, #15
 800b856:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b85a:	4652      	mov	r2, sl
 800b85c:	465b      	mov	r3, fp
 800b85e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b862:	f7f4 fec9 	bl	80005f8 <__aeabi_dmul>
 800b866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b868:	1b5d      	subs	r5, r3, r5
 800b86a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b86e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b872:	e78f      	b.n	800b794 <_strtod_l+0x3d4>
 800b874:	3316      	adds	r3, #22
 800b876:	dba8      	blt.n	800b7ca <_strtod_l+0x40a>
 800b878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b87a:	eba3 0808 	sub.w	r8, r3, r8
 800b87e:	4b34      	ldr	r3, [pc, #208]	@ (800b950 <_strtod_l+0x590>)
 800b880:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b884:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b888:	4650      	mov	r0, sl
 800b88a:	4659      	mov	r1, fp
 800b88c:	f7f4 ffde 	bl	800084c <__aeabi_ddiv>
 800b890:	e782      	b.n	800b798 <_strtod_l+0x3d8>
 800b892:	2300      	movs	r3, #0
 800b894:	4f2f      	ldr	r7, [pc, #188]	@ (800b954 <_strtod_l+0x594>)
 800b896:	1124      	asrs	r4, r4, #4
 800b898:	4650      	mov	r0, sl
 800b89a:	4659      	mov	r1, fp
 800b89c:	461e      	mov	r6, r3
 800b89e:	2c01      	cmp	r4, #1
 800b8a0:	dc21      	bgt.n	800b8e6 <_strtod_l+0x526>
 800b8a2:	b10b      	cbz	r3, 800b8a8 <_strtod_l+0x4e8>
 800b8a4:	4682      	mov	sl, r0
 800b8a6:	468b      	mov	fp, r1
 800b8a8:	492a      	ldr	r1, [pc, #168]	@ (800b954 <_strtod_l+0x594>)
 800b8aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b8ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b8b2:	4652      	mov	r2, sl
 800b8b4:	465b      	mov	r3, fp
 800b8b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8ba:	f7f4 fe9d 	bl	80005f8 <__aeabi_dmul>
 800b8be:	4b26      	ldr	r3, [pc, #152]	@ (800b958 <_strtod_l+0x598>)
 800b8c0:	460a      	mov	r2, r1
 800b8c2:	400b      	ands	r3, r1
 800b8c4:	4925      	ldr	r1, [pc, #148]	@ (800b95c <_strtod_l+0x59c>)
 800b8c6:	428b      	cmp	r3, r1
 800b8c8:	4682      	mov	sl, r0
 800b8ca:	d898      	bhi.n	800b7fe <_strtod_l+0x43e>
 800b8cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b8d0:	428b      	cmp	r3, r1
 800b8d2:	bf86      	itte	hi
 800b8d4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b960 <_strtod_l+0x5a0>
 800b8d8:	f04f 3aff 	movhi.w	sl, #4294967295
 800b8dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	9308      	str	r3, [sp, #32]
 800b8e4:	e076      	b.n	800b9d4 <_strtod_l+0x614>
 800b8e6:	07e2      	lsls	r2, r4, #31
 800b8e8:	d504      	bpl.n	800b8f4 <_strtod_l+0x534>
 800b8ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8ee:	f7f4 fe83 	bl	80005f8 <__aeabi_dmul>
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	3601      	adds	r6, #1
 800b8f6:	1064      	asrs	r4, r4, #1
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	e7d0      	b.n	800b89e <_strtod_l+0x4de>
 800b8fc:	d0f0      	beq.n	800b8e0 <_strtod_l+0x520>
 800b8fe:	4264      	negs	r4, r4
 800b900:	f014 020f 	ands.w	r2, r4, #15
 800b904:	d00a      	beq.n	800b91c <_strtod_l+0x55c>
 800b906:	4b12      	ldr	r3, [pc, #72]	@ (800b950 <_strtod_l+0x590>)
 800b908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b90c:	4650      	mov	r0, sl
 800b90e:	4659      	mov	r1, fp
 800b910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b914:	f7f4 ff9a 	bl	800084c <__aeabi_ddiv>
 800b918:	4682      	mov	sl, r0
 800b91a:	468b      	mov	fp, r1
 800b91c:	1124      	asrs	r4, r4, #4
 800b91e:	d0df      	beq.n	800b8e0 <_strtod_l+0x520>
 800b920:	2c1f      	cmp	r4, #31
 800b922:	dd1f      	ble.n	800b964 <_strtod_l+0x5a4>
 800b924:	2400      	movs	r4, #0
 800b926:	46a0      	mov	r8, r4
 800b928:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b92a:	46a1      	mov	r9, r4
 800b92c:	9a05      	ldr	r2, [sp, #20]
 800b92e:	2322      	movs	r3, #34	@ 0x22
 800b930:	f04f 0a00 	mov.w	sl, #0
 800b934:	f04f 0b00 	mov.w	fp, #0
 800b938:	6013      	str	r3, [r2, #0]
 800b93a:	e76b      	b.n	800b814 <_strtod_l+0x454>
 800b93c:	0800e45d 	.word	0x0800e45d
 800b940:	0800e728 	.word	0x0800e728
 800b944:	0800e455 	.word	0x0800e455
 800b948:	0800e48c 	.word	0x0800e48c
 800b94c:	0800e5c5 	.word	0x0800e5c5
 800b950:	0800e660 	.word	0x0800e660
 800b954:	0800e638 	.word	0x0800e638
 800b958:	7ff00000 	.word	0x7ff00000
 800b95c:	7ca00000 	.word	0x7ca00000
 800b960:	7fefffff 	.word	0x7fefffff
 800b964:	f014 0310 	ands.w	r3, r4, #16
 800b968:	bf18      	it	ne
 800b96a:	236a      	movne	r3, #106	@ 0x6a
 800b96c:	4ea9      	ldr	r6, [pc, #676]	@ (800bc14 <_strtod_l+0x854>)
 800b96e:	9308      	str	r3, [sp, #32]
 800b970:	4650      	mov	r0, sl
 800b972:	4659      	mov	r1, fp
 800b974:	2300      	movs	r3, #0
 800b976:	07e7      	lsls	r7, r4, #31
 800b978:	d504      	bpl.n	800b984 <_strtod_l+0x5c4>
 800b97a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b97e:	f7f4 fe3b 	bl	80005f8 <__aeabi_dmul>
 800b982:	2301      	movs	r3, #1
 800b984:	1064      	asrs	r4, r4, #1
 800b986:	f106 0608 	add.w	r6, r6, #8
 800b98a:	d1f4      	bne.n	800b976 <_strtod_l+0x5b6>
 800b98c:	b10b      	cbz	r3, 800b992 <_strtod_l+0x5d2>
 800b98e:	4682      	mov	sl, r0
 800b990:	468b      	mov	fp, r1
 800b992:	9b08      	ldr	r3, [sp, #32]
 800b994:	b1b3      	cbz	r3, 800b9c4 <_strtod_l+0x604>
 800b996:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b99a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	4659      	mov	r1, fp
 800b9a2:	dd0f      	ble.n	800b9c4 <_strtod_l+0x604>
 800b9a4:	2b1f      	cmp	r3, #31
 800b9a6:	dd56      	ble.n	800ba56 <_strtod_l+0x696>
 800b9a8:	2b34      	cmp	r3, #52	@ 0x34
 800b9aa:	bfde      	ittt	le
 800b9ac:	f04f 33ff 	movle.w	r3, #4294967295
 800b9b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b9b4:	4093      	lslle	r3, r2
 800b9b6:	f04f 0a00 	mov.w	sl, #0
 800b9ba:	bfcc      	ite	gt
 800b9bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b9c0:	ea03 0b01 	andle.w	fp, r3, r1
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	4650      	mov	r0, sl
 800b9ca:	4659      	mov	r1, fp
 800b9cc:	f7f5 f87c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d1a7      	bne.n	800b924 <_strtod_l+0x564>
 800b9d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b9da:	9805      	ldr	r0, [sp, #20]
 800b9dc:	462b      	mov	r3, r5
 800b9de:	464a      	mov	r2, r9
 800b9e0:	f7ff f8ce 	bl	800ab80 <__s2b>
 800b9e4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	f43f af09 	beq.w	800b7fe <_strtod_l+0x43e>
 800b9ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9f0:	2a00      	cmp	r2, #0
 800b9f2:	eba3 0308 	sub.w	r3, r3, r8
 800b9f6:	bfa8      	it	ge
 800b9f8:	2300      	movge	r3, #0
 800b9fa:	9312      	str	r3, [sp, #72]	@ 0x48
 800b9fc:	2400      	movs	r4, #0
 800b9fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ba02:	9316      	str	r3, [sp, #88]	@ 0x58
 800ba04:	46a0      	mov	r8, r4
 800ba06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba08:	9805      	ldr	r0, [sp, #20]
 800ba0a:	6859      	ldr	r1, [r3, #4]
 800ba0c:	f7ff f810 	bl	800aa30 <_Balloc>
 800ba10:	4681      	mov	r9, r0
 800ba12:	2800      	cmp	r0, #0
 800ba14:	f43f aef7 	beq.w	800b806 <_strtod_l+0x446>
 800ba18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba1a:	691a      	ldr	r2, [r3, #16]
 800ba1c:	3202      	adds	r2, #2
 800ba1e:	f103 010c 	add.w	r1, r3, #12
 800ba22:	0092      	lsls	r2, r2, #2
 800ba24:	300c      	adds	r0, #12
 800ba26:	f7fe f896 	bl	8009b56 <memcpy>
 800ba2a:	ec4b ab10 	vmov	d0, sl, fp
 800ba2e:	9805      	ldr	r0, [sp, #20]
 800ba30:	aa1c      	add	r2, sp, #112	@ 0x70
 800ba32:	a91b      	add	r1, sp, #108	@ 0x6c
 800ba34:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ba38:	f7ff fbd6 	bl	800b1e8 <__d2b>
 800ba3c:	901a      	str	r0, [sp, #104]	@ 0x68
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	f43f aee1 	beq.w	800b806 <_strtod_l+0x446>
 800ba44:	9805      	ldr	r0, [sp, #20]
 800ba46:	2101      	movs	r1, #1
 800ba48:	f7ff f930 	bl	800acac <__i2b>
 800ba4c:	4680      	mov	r8, r0
 800ba4e:	b948      	cbnz	r0, 800ba64 <_strtod_l+0x6a4>
 800ba50:	f04f 0800 	mov.w	r8, #0
 800ba54:	e6d7      	b.n	800b806 <_strtod_l+0x446>
 800ba56:	f04f 32ff 	mov.w	r2, #4294967295
 800ba5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba5e:	ea03 0a0a 	and.w	sl, r3, sl
 800ba62:	e7af      	b.n	800b9c4 <_strtod_l+0x604>
 800ba64:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ba66:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ba68:	2d00      	cmp	r5, #0
 800ba6a:	bfab      	itete	ge
 800ba6c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ba6e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ba70:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ba72:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ba74:	bfac      	ite	ge
 800ba76:	18ef      	addge	r7, r5, r3
 800ba78:	1b5e      	sublt	r6, r3, r5
 800ba7a:	9b08      	ldr	r3, [sp, #32]
 800ba7c:	1aed      	subs	r5, r5, r3
 800ba7e:	4415      	add	r5, r2
 800ba80:	4b65      	ldr	r3, [pc, #404]	@ (800bc18 <_strtod_l+0x858>)
 800ba82:	3d01      	subs	r5, #1
 800ba84:	429d      	cmp	r5, r3
 800ba86:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ba8a:	da50      	bge.n	800bb2e <_strtod_l+0x76e>
 800ba8c:	1b5b      	subs	r3, r3, r5
 800ba8e:	2b1f      	cmp	r3, #31
 800ba90:	eba2 0203 	sub.w	r2, r2, r3
 800ba94:	f04f 0101 	mov.w	r1, #1
 800ba98:	dc3d      	bgt.n	800bb16 <_strtod_l+0x756>
 800ba9a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba9e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800baa0:	2300      	movs	r3, #0
 800baa2:	9310      	str	r3, [sp, #64]	@ 0x40
 800baa4:	18bd      	adds	r5, r7, r2
 800baa6:	9b08      	ldr	r3, [sp, #32]
 800baa8:	42af      	cmp	r7, r5
 800baaa:	4416      	add	r6, r2
 800baac:	441e      	add	r6, r3
 800baae:	463b      	mov	r3, r7
 800bab0:	bfa8      	it	ge
 800bab2:	462b      	movge	r3, r5
 800bab4:	42b3      	cmp	r3, r6
 800bab6:	bfa8      	it	ge
 800bab8:	4633      	movge	r3, r6
 800baba:	2b00      	cmp	r3, #0
 800babc:	bfc2      	ittt	gt
 800babe:	1aed      	subgt	r5, r5, r3
 800bac0:	1af6      	subgt	r6, r6, r3
 800bac2:	1aff      	subgt	r7, r7, r3
 800bac4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	dd16      	ble.n	800baf8 <_strtod_l+0x738>
 800baca:	4641      	mov	r1, r8
 800bacc:	9805      	ldr	r0, [sp, #20]
 800bace:	461a      	mov	r2, r3
 800bad0:	f7ff f9a4 	bl	800ae1c <__pow5mult>
 800bad4:	4680      	mov	r8, r0
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d0ba      	beq.n	800ba50 <_strtod_l+0x690>
 800bada:	4601      	mov	r1, r0
 800badc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bade:	9805      	ldr	r0, [sp, #20]
 800bae0:	f7ff f8fa 	bl	800acd8 <__multiply>
 800bae4:	900a      	str	r0, [sp, #40]	@ 0x28
 800bae6:	2800      	cmp	r0, #0
 800bae8:	f43f ae8d 	beq.w	800b806 <_strtod_l+0x446>
 800baec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800baee:	9805      	ldr	r0, [sp, #20]
 800baf0:	f7fe ffde 	bl	800aab0 <_Bfree>
 800baf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baf6:	931a      	str	r3, [sp, #104]	@ 0x68
 800baf8:	2d00      	cmp	r5, #0
 800bafa:	dc1d      	bgt.n	800bb38 <_strtod_l+0x778>
 800bafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	dd23      	ble.n	800bb4a <_strtod_l+0x78a>
 800bb02:	4649      	mov	r1, r9
 800bb04:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bb06:	9805      	ldr	r0, [sp, #20]
 800bb08:	f7ff f988 	bl	800ae1c <__pow5mult>
 800bb0c:	4681      	mov	r9, r0
 800bb0e:	b9e0      	cbnz	r0, 800bb4a <_strtod_l+0x78a>
 800bb10:	f04f 0900 	mov.w	r9, #0
 800bb14:	e677      	b.n	800b806 <_strtod_l+0x446>
 800bb16:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bb1a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bb1e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bb22:	35e2      	adds	r5, #226	@ 0xe2
 800bb24:	fa01 f305 	lsl.w	r3, r1, r5
 800bb28:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb2a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bb2c:	e7ba      	b.n	800baa4 <_strtod_l+0x6e4>
 800bb2e:	2300      	movs	r3, #0
 800bb30:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb32:	2301      	movs	r3, #1
 800bb34:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb36:	e7b5      	b.n	800baa4 <_strtod_l+0x6e4>
 800bb38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb3a:	9805      	ldr	r0, [sp, #20]
 800bb3c:	462a      	mov	r2, r5
 800bb3e:	f7ff f9c7 	bl	800aed0 <__lshift>
 800bb42:	901a      	str	r0, [sp, #104]	@ 0x68
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d1d9      	bne.n	800bafc <_strtod_l+0x73c>
 800bb48:	e65d      	b.n	800b806 <_strtod_l+0x446>
 800bb4a:	2e00      	cmp	r6, #0
 800bb4c:	dd07      	ble.n	800bb5e <_strtod_l+0x79e>
 800bb4e:	4649      	mov	r1, r9
 800bb50:	9805      	ldr	r0, [sp, #20]
 800bb52:	4632      	mov	r2, r6
 800bb54:	f7ff f9bc 	bl	800aed0 <__lshift>
 800bb58:	4681      	mov	r9, r0
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d0d8      	beq.n	800bb10 <_strtod_l+0x750>
 800bb5e:	2f00      	cmp	r7, #0
 800bb60:	dd08      	ble.n	800bb74 <_strtod_l+0x7b4>
 800bb62:	4641      	mov	r1, r8
 800bb64:	9805      	ldr	r0, [sp, #20]
 800bb66:	463a      	mov	r2, r7
 800bb68:	f7ff f9b2 	bl	800aed0 <__lshift>
 800bb6c:	4680      	mov	r8, r0
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	f43f ae49 	beq.w	800b806 <_strtod_l+0x446>
 800bb74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb76:	9805      	ldr	r0, [sp, #20]
 800bb78:	464a      	mov	r2, r9
 800bb7a:	f7ff fa31 	bl	800afe0 <__mdiff>
 800bb7e:	4604      	mov	r4, r0
 800bb80:	2800      	cmp	r0, #0
 800bb82:	f43f ae40 	beq.w	800b806 <_strtod_l+0x446>
 800bb86:	68c3      	ldr	r3, [r0, #12]
 800bb88:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	60c3      	str	r3, [r0, #12]
 800bb8e:	4641      	mov	r1, r8
 800bb90:	f7ff fa0a 	bl	800afa8 <__mcmp>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	da45      	bge.n	800bc24 <_strtod_l+0x864>
 800bb98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb9a:	ea53 030a 	orrs.w	r3, r3, sl
 800bb9e:	d16b      	bne.n	800bc78 <_strtod_l+0x8b8>
 800bba0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d167      	bne.n	800bc78 <_strtod_l+0x8b8>
 800bba8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bbac:	0d1b      	lsrs	r3, r3, #20
 800bbae:	051b      	lsls	r3, r3, #20
 800bbb0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bbb4:	d960      	bls.n	800bc78 <_strtod_l+0x8b8>
 800bbb6:	6963      	ldr	r3, [r4, #20]
 800bbb8:	b913      	cbnz	r3, 800bbc0 <_strtod_l+0x800>
 800bbba:	6923      	ldr	r3, [r4, #16]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	dd5b      	ble.n	800bc78 <_strtod_l+0x8b8>
 800bbc0:	4621      	mov	r1, r4
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	9805      	ldr	r0, [sp, #20]
 800bbc6:	f7ff f983 	bl	800aed0 <__lshift>
 800bbca:	4641      	mov	r1, r8
 800bbcc:	4604      	mov	r4, r0
 800bbce:	f7ff f9eb 	bl	800afa8 <__mcmp>
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	dd50      	ble.n	800bc78 <_strtod_l+0x8b8>
 800bbd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bbda:	9a08      	ldr	r2, [sp, #32]
 800bbdc:	0d1b      	lsrs	r3, r3, #20
 800bbde:	051b      	lsls	r3, r3, #20
 800bbe0:	2a00      	cmp	r2, #0
 800bbe2:	d06a      	beq.n	800bcba <_strtod_l+0x8fa>
 800bbe4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bbe8:	d867      	bhi.n	800bcba <_strtod_l+0x8fa>
 800bbea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bbee:	f67f ae9d 	bls.w	800b92c <_strtod_l+0x56c>
 800bbf2:	4b0a      	ldr	r3, [pc, #40]	@ (800bc1c <_strtod_l+0x85c>)
 800bbf4:	4650      	mov	r0, sl
 800bbf6:	4659      	mov	r1, fp
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f7f4 fcfd 	bl	80005f8 <__aeabi_dmul>
 800bbfe:	4b08      	ldr	r3, [pc, #32]	@ (800bc20 <_strtod_l+0x860>)
 800bc00:	400b      	ands	r3, r1
 800bc02:	4682      	mov	sl, r0
 800bc04:	468b      	mov	fp, r1
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	f47f ae08 	bne.w	800b81c <_strtod_l+0x45c>
 800bc0c:	9a05      	ldr	r2, [sp, #20]
 800bc0e:	2322      	movs	r3, #34	@ 0x22
 800bc10:	6013      	str	r3, [r2, #0]
 800bc12:	e603      	b.n	800b81c <_strtod_l+0x45c>
 800bc14:	0800e750 	.word	0x0800e750
 800bc18:	fffffc02 	.word	0xfffffc02
 800bc1c:	39500000 	.word	0x39500000
 800bc20:	7ff00000 	.word	0x7ff00000
 800bc24:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bc28:	d165      	bne.n	800bcf6 <_strtod_l+0x936>
 800bc2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bc2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc30:	b35a      	cbz	r2, 800bc8a <_strtod_l+0x8ca>
 800bc32:	4a9f      	ldr	r2, [pc, #636]	@ (800beb0 <_strtod_l+0xaf0>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d12b      	bne.n	800bc90 <_strtod_l+0x8d0>
 800bc38:	9b08      	ldr	r3, [sp, #32]
 800bc3a:	4651      	mov	r1, sl
 800bc3c:	b303      	cbz	r3, 800bc80 <_strtod_l+0x8c0>
 800bc3e:	4b9d      	ldr	r3, [pc, #628]	@ (800beb4 <_strtod_l+0xaf4>)
 800bc40:	465a      	mov	r2, fp
 800bc42:	4013      	ands	r3, r2
 800bc44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bc48:	f04f 32ff 	mov.w	r2, #4294967295
 800bc4c:	d81b      	bhi.n	800bc86 <_strtod_l+0x8c6>
 800bc4e:	0d1b      	lsrs	r3, r3, #20
 800bc50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bc54:	fa02 f303 	lsl.w	r3, r2, r3
 800bc58:	4299      	cmp	r1, r3
 800bc5a:	d119      	bne.n	800bc90 <_strtod_l+0x8d0>
 800bc5c:	4b96      	ldr	r3, [pc, #600]	@ (800beb8 <_strtod_l+0xaf8>)
 800bc5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d102      	bne.n	800bc6a <_strtod_l+0x8aa>
 800bc64:	3101      	adds	r1, #1
 800bc66:	f43f adce 	beq.w	800b806 <_strtod_l+0x446>
 800bc6a:	4b92      	ldr	r3, [pc, #584]	@ (800beb4 <_strtod_l+0xaf4>)
 800bc6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc6e:	401a      	ands	r2, r3
 800bc70:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bc74:	f04f 0a00 	mov.w	sl, #0
 800bc78:	9b08      	ldr	r3, [sp, #32]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d1b9      	bne.n	800bbf2 <_strtod_l+0x832>
 800bc7e:	e5cd      	b.n	800b81c <_strtod_l+0x45c>
 800bc80:	f04f 33ff 	mov.w	r3, #4294967295
 800bc84:	e7e8      	b.n	800bc58 <_strtod_l+0x898>
 800bc86:	4613      	mov	r3, r2
 800bc88:	e7e6      	b.n	800bc58 <_strtod_l+0x898>
 800bc8a:	ea53 030a 	orrs.w	r3, r3, sl
 800bc8e:	d0a2      	beq.n	800bbd6 <_strtod_l+0x816>
 800bc90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc92:	b1db      	cbz	r3, 800bccc <_strtod_l+0x90c>
 800bc94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc96:	4213      	tst	r3, r2
 800bc98:	d0ee      	beq.n	800bc78 <_strtod_l+0x8b8>
 800bc9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc9c:	9a08      	ldr	r2, [sp, #32]
 800bc9e:	4650      	mov	r0, sl
 800bca0:	4659      	mov	r1, fp
 800bca2:	b1bb      	cbz	r3, 800bcd4 <_strtod_l+0x914>
 800bca4:	f7ff fb6e 	bl	800b384 <sulp>
 800bca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcac:	ec53 2b10 	vmov	r2, r3, d0
 800bcb0:	f7f4 faec 	bl	800028c <__adddf3>
 800bcb4:	4682      	mov	sl, r0
 800bcb6:	468b      	mov	fp, r1
 800bcb8:	e7de      	b.n	800bc78 <_strtod_l+0x8b8>
 800bcba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bcbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bcc2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bcc6:	f04f 3aff 	mov.w	sl, #4294967295
 800bcca:	e7d5      	b.n	800bc78 <_strtod_l+0x8b8>
 800bccc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bcce:	ea13 0f0a 	tst.w	r3, sl
 800bcd2:	e7e1      	b.n	800bc98 <_strtod_l+0x8d8>
 800bcd4:	f7ff fb56 	bl	800b384 <sulp>
 800bcd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcdc:	ec53 2b10 	vmov	r2, r3, d0
 800bce0:	f7f4 fad2 	bl	8000288 <__aeabi_dsub>
 800bce4:	2200      	movs	r2, #0
 800bce6:	2300      	movs	r3, #0
 800bce8:	4682      	mov	sl, r0
 800bcea:	468b      	mov	fp, r1
 800bcec:	f7f4 feec 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	d0c1      	beq.n	800bc78 <_strtod_l+0x8b8>
 800bcf4:	e61a      	b.n	800b92c <_strtod_l+0x56c>
 800bcf6:	4641      	mov	r1, r8
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f7ff facd 	bl	800b298 <__ratio>
 800bcfe:	ec57 6b10 	vmov	r6, r7, d0
 800bd02:	2200      	movs	r2, #0
 800bd04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bd08:	4630      	mov	r0, r6
 800bd0a:	4639      	mov	r1, r7
 800bd0c:	f7f4 fef0 	bl	8000af0 <__aeabi_dcmple>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d06f      	beq.n	800bdf4 <_strtod_l+0xa34>
 800bd14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d17a      	bne.n	800be10 <_strtod_l+0xa50>
 800bd1a:	f1ba 0f00 	cmp.w	sl, #0
 800bd1e:	d158      	bne.n	800bdd2 <_strtod_l+0xa12>
 800bd20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d15a      	bne.n	800bde0 <_strtod_l+0xa20>
 800bd2a:	4b64      	ldr	r3, [pc, #400]	@ (800bebc <_strtod_l+0xafc>)
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	4630      	mov	r0, r6
 800bd30:	4639      	mov	r1, r7
 800bd32:	f7f4 fed3 	bl	8000adc <__aeabi_dcmplt>
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d159      	bne.n	800bdee <_strtod_l+0xa2e>
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	4b60      	ldr	r3, [pc, #384]	@ (800bec0 <_strtod_l+0xb00>)
 800bd40:	2200      	movs	r2, #0
 800bd42:	f7f4 fc59 	bl	80005f8 <__aeabi_dmul>
 800bd46:	4606      	mov	r6, r0
 800bd48:	460f      	mov	r7, r1
 800bd4a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bd4e:	9606      	str	r6, [sp, #24]
 800bd50:	9307      	str	r3, [sp, #28]
 800bd52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd56:	4d57      	ldr	r5, [pc, #348]	@ (800beb4 <_strtod_l+0xaf4>)
 800bd58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bd5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd5e:	401d      	ands	r5, r3
 800bd60:	4b58      	ldr	r3, [pc, #352]	@ (800bec4 <_strtod_l+0xb04>)
 800bd62:	429d      	cmp	r5, r3
 800bd64:	f040 80b2 	bne.w	800becc <_strtod_l+0xb0c>
 800bd68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd6a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bd6e:	ec4b ab10 	vmov	d0, sl, fp
 800bd72:	f7ff f9c9 	bl	800b108 <__ulp>
 800bd76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd7a:	ec51 0b10 	vmov	r0, r1, d0
 800bd7e:	f7f4 fc3b 	bl	80005f8 <__aeabi_dmul>
 800bd82:	4652      	mov	r2, sl
 800bd84:	465b      	mov	r3, fp
 800bd86:	f7f4 fa81 	bl	800028c <__adddf3>
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	4949      	ldr	r1, [pc, #292]	@ (800beb4 <_strtod_l+0xaf4>)
 800bd8e:	4a4e      	ldr	r2, [pc, #312]	@ (800bec8 <_strtod_l+0xb08>)
 800bd90:	4019      	ands	r1, r3
 800bd92:	4291      	cmp	r1, r2
 800bd94:	4682      	mov	sl, r0
 800bd96:	d942      	bls.n	800be1e <_strtod_l+0xa5e>
 800bd98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bd9a:	4b47      	ldr	r3, [pc, #284]	@ (800beb8 <_strtod_l+0xaf8>)
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d103      	bne.n	800bda8 <_strtod_l+0x9e8>
 800bda0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bda2:	3301      	adds	r3, #1
 800bda4:	f43f ad2f 	beq.w	800b806 <_strtod_l+0x446>
 800bda8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800beb8 <_strtod_l+0xaf8>
 800bdac:	f04f 3aff 	mov.w	sl, #4294967295
 800bdb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bdb2:	9805      	ldr	r0, [sp, #20]
 800bdb4:	f7fe fe7c 	bl	800aab0 <_Bfree>
 800bdb8:	9805      	ldr	r0, [sp, #20]
 800bdba:	4649      	mov	r1, r9
 800bdbc:	f7fe fe78 	bl	800aab0 <_Bfree>
 800bdc0:	9805      	ldr	r0, [sp, #20]
 800bdc2:	4641      	mov	r1, r8
 800bdc4:	f7fe fe74 	bl	800aab0 <_Bfree>
 800bdc8:	9805      	ldr	r0, [sp, #20]
 800bdca:	4621      	mov	r1, r4
 800bdcc:	f7fe fe70 	bl	800aab0 <_Bfree>
 800bdd0:	e619      	b.n	800ba06 <_strtod_l+0x646>
 800bdd2:	f1ba 0f01 	cmp.w	sl, #1
 800bdd6:	d103      	bne.n	800bde0 <_strtod_l+0xa20>
 800bdd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f43f ada6 	beq.w	800b92c <_strtod_l+0x56c>
 800bde0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800be90 <_strtod_l+0xad0>
 800bde4:	4f35      	ldr	r7, [pc, #212]	@ (800bebc <_strtod_l+0xafc>)
 800bde6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bdea:	2600      	movs	r6, #0
 800bdec:	e7b1      	b.n	800bd52 <_strtod_l+0x992>
 800bdee:	4f34      	ldr	r7, [pc, #208]	@ (800bec0 <_strtod_l+0xb00>)
 800bdf0:	2600      	movs	r6, #0
 800bdf2:	e7aa      	b.n	800bd4a <_strtod_l+0x98a>
 800bdf4:	4b32      	ldr	r3, [pc, #200]	@ (800bec0 <_strtod_l+0xb00>)
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	4639      	mov	r1, r7
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f7f4 fbfc 	bl	80005f8 <__aeabi_dmul>
 800be00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be02:	4606      	mov	r6, r0
 800be04:	460f      	mov	r7, r1
 800be06:	2b00      	cmp	r3, #0
 800be08:	d09f      	beq.n	800bd4a <_strtod_l+0x98a>
 800be0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800be0e:	e7a0      	b.n	800bd52 <_strtod_l+0x992>
 800be10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800be98 <_strtod_l+0xad8>
 800be14:	ed8d 7b06 	vstr	d7, [sp, #24]
 800be18:	ec57 6b17 	vmov	r6, r7, d7
 800be1c:	e799      	b.n	800bd52 <_strtod_l+0x992>
 800be1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800be22:	9b08      	ldr	r3, [sp, #32]
 800be24:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d1c1      	bne.n	800bdb0 <_strtod_l+0x9f0>
 800be2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be30:	0d1b      	lsrs	r3, r3, #20
 800be32:	051b      	lsls	r3, r3, #20
 800be34:	429d      	cmp	r5, r3
 800be36:	d1bb      	bne.n	800bdb0 <_strtod_l+0x9f0>
 800be38:	4630      	mov	r0, r6
 800be3a:	4639      	mov	r1, r7
 800be3c:	f7f4 ff3c 	bl	8000cb8 <__aeabi_d2lz>
 800be40:	f7f4 fbac 	bl	800059c <__aeabi_l2d>
 800be44:	4602      	mov	r2, r0
 800be46:	460b      	mov	r3, r1
 800be48:	4630      	mov	r0, r6
 800be4a:	4639      	mov	r1, r7
 800be4c:	f7f4 fa1c 	bl	8000288 <__aeabi_dsub>
 800be50:	460b      	mov	r3, r1
 800be52:	4602      	mov	r2, r0
 800be54:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800be58:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800be5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be5e:	ea46 060a 	orr.w	r6, r6, sl
 800be62:	431e      	orrs	r6, r3
 800be64:	d06f      	beq.n	800bf46 <_strtod_l+0xb86>
 800be66:	a30e      	add	r3, pc, #56	@ (adr r3, 800bea0 <_strtod_l+0xae0>)
 800be68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6c:	f7f4 fe36 	bl	8000adc <__aeabi_dcmplt>
 800be70:	2800      	cmp	r0, #0
 800be72:	f47f acd3 	bne.w	800b81c <_strtod_l+0x45c>
 800be76:	a30c      	add	r3, pc, #48	@ (adr r3, 800bea8 <_strtod_l+0xae8>)
 800be78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be80:	f7f4 fe4a 	bl	8000b18 <__aeabi_dcmpgt>
 800be84:	2800      	cmp	r0, #0
 800be86:	d093      	beq.n	800bdb0 <_strtod_l+0x9f0>
 800be88:	e4c8      	b.n	800b81c <_strtod_l+0x45c>
 800be8a:	bf00      	nop
 800be8c:	f3af 8000 	nop.w
 800be90:	00000000 	.word	0x00000000
 800be94:	bff00000 	.word	0xbff00000
 800be98:	00000000 	.word	0x00000000
 800be9c:	3ff00000 	.word	0x3ff00000
 800bea0:	94a03595 	.word	0x94a03595
 800bea4:	3fdfffff 	.word	0x3fdfffff
 800bea8:	35afe535 	.word	0x35afe535
 800beac:	3fe00000 	.word	0x3fe00000
 800beb0:	000fffff 	.word	0x000fffff
 800beb4:	7ff00000 	.word	0x7ff00000
 800beb8:	7fefffff 	.word	0x7fefffff
 800bebc:	3ff00000 	.word	0x3ff00000
 800bec0:	3fe00000 	.word	0x3fe00000
 800bec4:	7fe00000 	.word	0x7fe00000
 800bec8:	7c9fffff 	.word	0x7c9fffff
 800becc:	9b08      	ldr	r3, [sp, #32]
 800bece:	b323      	cbz	r3, 800bf1a <_strtod_l+0xb5a>
 800bed0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bed4:	d821      	bhi.n	800bf1a <_strtod_l+0xb5a>
 800bed6:	a328      	add	r3, pc, #160	@ (adr r3, 800bf78 <_strtod_l+0xbb8>)
 800bed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bedc:	4630      	mov	r0, r6
 800bede:	4639      	mov	r1, r7
 800bee0:	f7f4 fe06 	bl	8000af0 <__aeabi_dcmple>
 800bee4:	b1a0      	cbz	r0, 800bf10 <_strtod_l+0xb50>
 800bee6:	4639      	mov	r1, r7
 800bee8:	4630      	mov	r0, r6
 800beea:	f7f4 fe5d 	bl	8000ba8 <__aeabi_d2uiz>
 800beee:	2801      	cmp	r0, #1
 800bef0:	bf38      	it	cc
 800bef2:	2001      	movcc	r0, #1
 800bef4:	f7f4 fb06 	bl	8000504 <__aeabi_ui2d>
 800bef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800befa:	4606      	mov	r6, r0
 800befc:	460f      	mov	r7, r1
 800befe:	b9fb      	cbnz	r3, 800bf40 <_strtod_l+0xb80>
 800bf00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf04:	9014      	str	r0, [sp, #80]	@ 0x50
 800bf06:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bf0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bf16:	1b5b      	subs	r3, r3, r5
 800bf18:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf1a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bf1e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bf22:	f7ff f8f1 	bl	800b108 <__ulp>
 800bf26:	4650      	mov	r0, sl
 800bf28:	ec53 2b10 	vmov	r2, r3, d0
 800bf2c:	4659      	mov	r1, fp
 800bf2e:	f7f4 fb63 	bl	80005f8 <__aeabi_dmul>
 800bf32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bf36:	f7f4 f9a9 	bl	800028c <__adddf3>
 800bf3a:	4682      	mov	sl, r0
 800bf3c:	468b      	mov	fp, r1
 800bf3e:	e770      	b.n	800be22 <_strtod_l+0xa62>
 800bf40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bf44:	e7e0      	b.n	800bf08 <_strtod_l+0xb48>
 800bf46:	a30e      	add	r3, pc, #56	@ (adr r3, 800bf80 <_strtod_l+0xbc0>)
 800bf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4c:	f7f4 fdc6 	bl	8000adc <__aeabi_dcmplt>
 800bf50:	e798      	b.n	800be84 <_strtod_l+0xac4>
 800bf52:	2300      	movs	r3, #0
 800bf54:	930e      	str	r3, [sp, #56]	@ 0x38
 800bf56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bf58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf5a:	6013      	str	r3, [r2, #0]
 800bf5c:	f7ff ba6d 	b.w	800b43a <_strtod_l+0x7a>
 800bf60:	2a65      	cmp	r2, #101	@ 0x65
 800bf62:	f43f ab68 	beq.w	800b636 <_strtod_l+0x276>
 800bf66:	2a45      	cmp	r2, #69	@ 0x45
 800bf68:	f43f ab65 	beq.w	800b636 <_strtod_l+0x276>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	f7ff bba0 	b.w	800b6b2 <_strtod_l+0x2f2>
 800bf72:	bf00      	nop
 800bf74:	f3af 8000 	nop.w
 800bf78:	ffc00000 	.word	0xffc00000
 800bf7c:	41dfffff 	.word	0x41dfffff
 800bf80:	94a03595 	.word	0x94a03595
 800bf84:	3fcfffff 	.word	0x3fcfffff

0800bf88 <_strtod_r>:
 800bf88:	4b01      	ldr	r3, [pc, #4]	@ (800bf90 <_strtod_r+0x8>)
 800bf8a:	f7ff ba19 	b.w	800b3c0 <_strtod_l>
 800bf8e:	bf00      	nop
 800bf90:	20000068 	.word	0x20000068

0800bf94 <_strtol_l.isra.0>:
 800bf94:	2b24      	cmp	r3, #36	@ 0x24
 800bf96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf9a:	4686      	mov	lr, r0
 800bf9c:	4690      	mov	r8, r2
 800bf9e:	d801      	bhi.n	800bfa4 <_strtol_l.isra.0+0x10>
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d106      	bne.n	800bfb2 <_strtol_l.isra.0+0x1e>
 800bfa4:	f7fd fdaa 	bl	8009afc <__errno>
 800bfa8:	2316      	movs	r3, #22
 800bfaa:	6003      	str	r3, [r0, #0]
 800bfac:	2000      	movs	r0, #0
 800bfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb2:	4834      	ldr	r0, [pc, #208]	@ (800c084 <_strtol_l.isra.0+0xf0>)
 800bfb4:	460d      	mov	r5, r1
 800bfb6:	462a      	mov	r2, r5
 800bfb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfbc:	5d06      	ldrb	r6, [r0, r4]
 800bfbe:	f016 0608 	ands.w	r6, r6, #8
 800bfc2:	d1f8      	bne.n	800bfb6 <_strtol_l.isra.0+0x22>
 800bfc4:	2c2d      	cmp	r4, #45	@ 0x2d
 800bfc6:	d110      	bne.n	800bfea <_strtol_l.isra.0+0x56>
 800bfc8:	782c      	ldrb	r4, [r5, #0]
 800bfca:	2601      	movs	r6, #1
 800bfcc:	1c95      	adds	r5, r2, #2
 800bfce:	f033 0210 	bics.w	r2, r3, #16
 800bfd2:	d115      	bne.n	800c000 <_strtol_l.isra.0+0x6c>
 800bfd4:	2c30      	cmp	r4, #48	@ 0x30
 800bfd6:	d10d      	bne.n	800bff4 <_strtol_l.isra.0+0x60>
 800bfd8:	782a      	ldrb	r2, [r5, #0]
 800bfda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bfde:	2a58      	cmp	r2, #88	@ 0x58
 800bfe0:	d108      	bne.n	800bff4 <_strtol_l.isra.0+0x60>
 800bfe2:	786c      	ldrb	r4, [r5, #1]
 800bfe4:	3502      	adds	r5, #2
 800bfe6:	2310      	movs	r3, #16
 800bfe8:	e00a      	b.n	800c000 <_strtol_l.isra.0+0x6c>
 800bfea:	2c2b      	cmp	r4, #43	@ 0x2b
 800bfec:	bf04      	itt	eq
 800bfee:	782c      	ldrbeq	r4, [r5, #0]
 800bff0:	1c95      	addeq	r5, r2, #2
 800bff2:	e7ec      	b.n	800bfce <_strtol_l.isra.0+0x3a>
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1f6      	bne.n	800bfe6 <_strtol_l.isra.0+0x52>
 800bff8:	2c30      	cmp	r4, #48	@ 0x30
 800bffa:	bf14      	ite	ne
 800bffc:	230a      	movne	r3, #10
 800bffe:	2308      	moveq	r3, #8
 800c000:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c004:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c008:	2200      	movs	r2, #0
 800c00a:	fbbc f9f3 	udiv	r9, ip, r3
 800c00e:	4610      	mov	r0, r2
 800c010:	fb03 ca19 	mls	sl, r3, r9, ip
 800c014:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c018:	2f09      	cmp	r7, #9
 800c01a:	d80f      	bhi.n	800c03c <_strtol_l.isra.0+0xa8>
 800c01c:	463c      	mov	r4, r7
 800c01e:	42a3      	cmp	r3, r4
 800c020:	dd1b      	ble.n	800c05a <_strtol_l.isra.0+0xc6>
 800c022:	1c57      	adds	r7, r2, #1
 800c024:	d007      	beq.n	800c036 <_strtol_l.isra.0+0xa2>
 800c026:	4581      	cmp	r9, r0
 800c028:	d314      	bcc.n	800c054 <_strtol_l.isra.0+0xc0>
 800c02a:	d101      	bne.n	800c030 <_strtol_l.isra.0+0x9c>
 800c02c:	45a2      	cmp	sl, r4
 800c02e:	db11      	blt.n	800c054 <_strtol_l.isra.0+0xc0>
 800c030:	fb00 4003 	mla	r0, r0, r3, r4
 800c034:	2201      	movs	r2, #1
 800c036:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c03a:	e7eb      	b.n	800c014 <_strtol_l.isra.0+0x80>
 800c03c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c040:	2f19      	cmp	r7, #25
 800c042:	d801      	bhi.n	800c048 <_strtol_l.isra.0+0xb4>
 800c044:	3c37      	subs	r4, #55	@ 0x37
 800c046:	e7ea      	b.n	800c01e <_strtol_l.isra.0+0x8a>
 800c048:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c04c:	2f19      	cmp	r7, #25
 800c04e:	d804      	bhi.n	800c05a <_strtol_l.isra.0+0xc6>
 800c050:	3c57      	subs	r4, #87	@ 0x57
 800c052:	e7e4      	b.n	800c01e <_strtol_l.isra.0+0x8a>
 800c054:	f04f 32ff 	mov.w	r2, #4294967295
 800c058:	e7ed      	b.n	800c036 <_strtol_l.isra.0+0xa2>
 800c05a:	1c53      	adds	r3, r2, #1
 800c05c:	d108      	bne.n	800c070 <_strtol_l.isra.0+0xdc>
 800c05e:	2322      	movs	r3, #34	@ 0x22
 800c060:	f8ce 3000 	str.w	r3, [lr]
 800c064:	4660      	mov	r0, ip
 800c066:	f1b8 0f00 	cmp.w	r8, #0
 800c06a:	d0a0      	beq.n	800bfae <_strtol_l.isra.0+0x1a>
 800c06c:	1e69      	subs	r1, r5, #1
 800c06e:	e006      	b.n	800c07e <_strtol_l.isra.0+0xea>
 800c070:	b106      	cbz	r6, 800c074 <_strtol_l.isra.0+0xe0>
 800c072:	4240      	negs	r0, r0
 800c074:	f1b8 0f00 	cmp.w	r8, #0
 800c078:	d099      	beq.n	800bfae <_strtol_l.isra.0+0x1a>
 800c07a:	2a00      	cmp	r2, #0
 800c07c:	d1f6      	bne.n	800c06c <_strtol_l.isra.0+0xd8>
 800c07e:	f8c8 1000 	str.w	r1, [r8]
 800c082:	e794      	b.n	800bfae <_strtol_l.isra.0+0x1a>
 800c084:	0800e779 	.word	0x0800e779

0800c088 <_strtol_r>:
 800c088:	f7ff bf84 	b.w	800bf94 <_strtol_l.isra.0>

0800c08c <__ssputs_r>:
 800c08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c090:	688e      	ldr	r6, [r1, #8]
 800c092:	461f      	mov	r7, r3
 800c094:	42be      	cmp	r6, r7
 800c096:	680b      	ldr	r3, [r1, #0]
 800c098:	4682      	mov	sl, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	4690      	mov	r8, r2
 800c09e:	d82d      	bhi.n	800c0fc <__ssputs_r+0x70>
 800c0a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c0a8:	d026      	beq.n	800c0f8 <__ssputs_r+0x6c>
 800c0aa:	6965      	ldr	r5, [r4, #20]
 800c0ac:	6909      	ldr	r1, [r1, #16]
 800c0ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0b2:	eba3 0901 	sub.w	r9, r3, r1
 800c0b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0ba:	1c7b      	adds	r3, r7, #1
 800c0bc:	444b      	add	r3, r9
 800c0be:	106d      	asrs	r5, r5, #1
 800c0c0:	429d      	cmp	r5, r3
 800c0c2:	bf38      	it	cc
 800c0c4:	461d      	movcc	r5, r3
 800c0c6:	0553      	lsls	r3, r2, #21
 800c0c8:	d527      	bpl.n	800c11a <__ssputs_r+0x8e>
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	f7fe fc24 	bl	800a918 <_malloc_r>
 800c0d0:	4606      	mov	r6, r0
 800c0d2:	b360      	cbz	r0, 800c12e <__ssputs_r+0xa2>
 800c0d4:	6921      	ldr	r1, [r4, #16]
 800c0d6:	464a      	mov	r2, r9
 800c0d8:	f7fd fd3d 	bl	8009b56 <memcpy>
 800c0dc:	89a3      	ldrh	r3, [r4, #12]
 800c0de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c0e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0e6:	81a3      	strh	r3, [r4, #12]
 800c0e8:	6126      	str	r6, [r4, #16]
 800c0ea:	6165      	str	r5, [r4, #20]
 800c0ec:	444e      	add	r6, r9
 800c0ee:	eba5 0509 	sub.w	r5, r5, r9
 800c0f2:	6026      	str	r6, [r4, #0]
 800c0f4:	60a5      	str	r5, [r4, #8]
 800c0f6:	463e      	mov	r6, r7
 800c0f8:	42be      	cmp	r6, r7
 800c0fa:	d900      	bls.n	800c0fe <__ssputs_r+0x72>
 800c0fc:	463e      	mov	r6, r7
 800c0fe:	6820      	ldr	r0, [r4, #0]
 800c100:	4632      	mov	r2, r6
 800c102:	4641      	mov	r1, r8
 800c104:	f7fd fc8e 	bl	8009a24 <memmove>
 800c108:	68a3      	ldr	r3, [r4, #8]
 800c10a:	1b9b      	subs	r3, r3, r6
 800c10c:	60a3      	str	r3, [r4, #8]
 800c10e:	6823      	ldr	r3, [r4, #0]
 800c110:	4433      	add	r3, r6
 800c112:	6023      	str	r3, [r4, #0]
 800c114:	2000      	movs	r0, #0
 800c116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c11a:	462a      	mov	r2, r5
 800c11c:	f000 fde5 	bl	800ccea <_realloc_r>
 800c120:	4606      	mov	r6, r0
 800c122:	2800      	cmp	r0, #0
 800c124:	d1e0      	bne.n	800c0e8 <__ssputs_r+0x5c>
 800c126:	6921      	ldr	r1, [r4, #16]
 800c128:	4650      	mov	r0, sl
 800c12a:	f7fe fb81 	bl	800a830 <_free_r>
 800c12e:	230c      	movs	r3, #12
 800c130:	f8ca 3000 	str.w	r3, [sl]
 800c134:	89a3      	ldrh	r3, [r4, #12]
 800c136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c13a:	81a3      	strh	r3, [r4, #12]
 800c13c:	f04f 30ff 	mov.w	r0, #4294967295
 800c140:	e7e9      	b.n	800c116 <__ssputs_r+0x8a>
	...

0800c144 <_svfiprintf_r>:
 800c144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c148:	4698      	mov	r8, r3
 800c14a:	898b      	ldrh	r3, [r1, #12]
 800c14c:	061b      	lsls	r3, r3, #24
 800c14e:	b09d      	sub	sp, #116	@ 0x74
 800c150:	4607      	mov	r7, r0
 800c152:	460d      	mov	r5, r1
 800c154:	4614      	mov	r4, r2
 800c156:	d510      	bpl.n	800c17a <_svfiprintf_r+0x36>
 800c158:	690b      	ldr	r3, [r1, #16]
 800c15a:	b973      	cbnz	r3, 800c17a <_svfiprintf_r+0x36>
 800c15c:	2140      	movs	r1, #64	@ 0x40
 800c15e:	f7fe fbdb 	bl	800a918 <_malloc_r>
 800c162:	6028      	str	r0, [r5, #0]
 800c164:	6128      	str	r0, [r5, #16]
 800c166:	b930      	cbnz	r0, 800c176 <_svfiprintf_r+0x32>
 800c168:	230c      	movs	r3, #12
 800c16a:	603b      	str	r3, [r7, #0]
 800c16c:	f04f 30ff 	mov.w	r0, #4294967295
 800c170:	b01d      	add	sp, #116	@ 0x74
 800c172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c176:	2340      	movs	r3, #64	@ 0x40
 800c178:	616b      	str	r3, [r5, #20]
 800c17a:	2300      	movs	r3, #0
 800c17c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c17e:	2320      	movs	r3, #32
 800c180:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c184:	f8cd 800c 	str.w	r8, [sp, #12]
 800c188:	2330      	movs	r3, #48	@ 0x30
 800c18a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c328 <_svfiprintf_r+0x1e4>
 800c18e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c192:	f04f 0901 	mov.w	r9, #1
 800c196:	4623      	mov	r3, r4
 800c198:	469a      	mov	sl, r3
 800c19a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c19e:	b10a      	cbz	r2, 800c1a4 <_svfiprintf_r+0x60>
 800c1a0:	2a25      	cmp	r2, #37	@ 0x25
 800c1a2:	d1f9      	bne.n	800c198 <_svfiprintf_r+0x54>
 800c1a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c1a8:	d00b      	beq.n	800c1c2 <_svfiprintf_r+0x7e>
 800c1aa:	465b      	mov	r3, fp
 800c1ac:	4622      	mov	r2, r4
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	4638      	mov	r0, r7
 800c1b2:	f7ff ff6b 	bl	800c08c <__ssputs_r>
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	f000 80a7 	beq.w	800c30a <_svfiprintf_r+0x1c6>
 800c1bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1be:	445a      	add	r2, fp
 800c1c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f000 809f 	beq.w	800c30a <_svfiprintf_r+0x1c6>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1d6:	f10a 0a01 	add.w	sl, sl, #1
 800c1da:	9304      	str	r3, [sp, #16]
 800c1dc:	9307      	str	r3, [sp, #28]
 800c1de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c1e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1e4:	4654      	mov	r4, sl
 800c1e6:	2205      	movs	r2, #5
 800c1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ec:	484e      	ldr	r0, [pc, #312]	@ (800c328 <_svfiprintf_r+0x1e4>)
 800c1ee:	f7f3 ffef 	bl	80001d0 <memchr>
 800c1f2:	9a04      	ldr	r2, [sp, #16]
 800c1f4:	b9d8      	cbnz	r0, 800c22e <_svfiprintf_r+0xea>
 800c1f6:	06d0      	lsls	r0, r2, #27
 800c1f8:	bf44      	itt	mi
 800c1fa:	2320      	movmi	r3, #32
 800c1fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c200:	0711      	lsls	r1, r2, #28
 800c202:	bf44      	itt	mi
 800c204:	232b      	movmi	r3, #43	@ 0x2b
 800c206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c20a:	f89a 3000 	ldrb.w	r3, [sl]
 800c20e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c210:	d015      	beq.n	800c23e <_svfiprintf_r+0xfa>
 800c212:	9a07      	ldr	r2, [sp, #28]
 800c214:	4654      	mov	r4, sl
 800c216:	2000      	movs	r0, #0
 800c218:	f04f 0c0a 	mov.w	ip, #10
 800c21c:	4621      	mov	r1, r4
 800c21e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c222:	3b30      	subs	r3, #48	@ 0x30
 800c224:	2b09      	cmp	r3, #9
 800c226:	d94b      	bls.n	800c2c0 <_svfiprintf_r+0x17c>
 800c228:	b1b0      	cbz	r0, 800c258 <_svfiprintf_r+0x114>
 800c22a:	9207      	str	r2, [sp, #28]
 800c22c:	e014      	b.n	800c258 <_svfiprintf_r+0x114>
 800c22e:	eba0 0308 	sub.w	r3, r0, r8
 800c232:	fa09 f303 	lsl.w	r3, r9, r3
 800c236:	4313      	orrs	r3, r2
 800c238:	9304      	str	r3, [sp, #16]
 800c23a:	46a2      	mov	sl, r4
 800c23c:	e7d2      	b.n	800c1e4 <_svfiprintf_r+0xa0>
 800c23e:	9b03      	ldr	r3, [sp, #12]
 800c240:	1d19      	adds	r1, r3, #4
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	9103      	str	r1, [sp, #12]
 800c246:	2b00      	cmp	r3, #0
 800c248:	bfbb      	ittet	lt
 800c24a:	425b      	neglt	r3, r3
 800c24c:	f042 0202 	orrlt.w	r2, r2, #2
 800c250:	9307      	strge	r3, [sp, #28]
 800c252:	9307      	strlt	r3, [sp, #28]
 800c254:	bfb8      	it	lt
 800c256:	9204      	strlt	r2, [sp, #16]
 800c258:	7823      	ldrb	r3, [r4, #0]
 800c25a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c25c:	d10a      	bne.n	800c274 <_svfiprintf_r+0x130>
 800c25e:	7863      	ldrb	r3, [r4, #1]
 800c260:	2b2a      	cmp	r3, #42	@ 0x2a
 800c262:	d132      	bne.n	800c2ca <_svfiprintf_r+0x186>
 800c264:	9b03      	ldr	r3, [sp, #12]
 800c266:	1d1a      	adds	r2, r3, #4
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	9203      	str	r2, [sp, #12]
 800c26c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c270:	3402      	adds	r4, #2
 800c272:	9305      	str	r3, [sp, #20]
 800c274:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c338 <_svfiprintf_r+0x1f4>
 800c278:	7821      	ldrb	r1, [r4, #0]
 800c27a:	2203      	movs	r2, #3
 800c27c:	4650      	mov	r0, sl
 800c27e:	f7f3 ffa7 	bl	80001d0 <memchr>
 800c282:	b138      	cbz	r0, 800c294 <_svfiprintf_r+0x150>
 800c284:	9b04      	ldr	r3, [sp, #16]
 800c286:	eba0 000a 	sub.w	r0, r0, sl
 800c28a:	2240      	movs	r2, #64	@ 0x40
 800c28c:	4082      	lsls	r2, r0
 800c28e:	4313      	orrs	r3, r2
 800c290:	3401      	adds	r4, #1
 800c292:	9304      	str	r3, [sp, #16]
 800c294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c298:	4824      	ldr	r0, [pc, #144]	@ (800c32c <_svfiprintf_r+0x1e8>)
 800c29a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c29e:	2206      	movs	r2, #6
 800c2a0:	f7f3 ff96 	bl	80001d0 <memchr>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d036      	beq.n	800c316 <_svfiprintf_r+0x1d2>
 800c2a8:	4b21      	ldr	r3, [pc, #132]	@ (800c330 <_svfiprintf_r+0x1ec>)
 800c2aa:	bb1b      	cbnz	r3, 800c2f4 <_svfiprintf_r+0x1b0>
 800c2ac:	9b03      	ldr	r3, [sp, #12]
 800c2ae:	3307      	adds	r3, #7
 800c2b0:	f023 0307 	bic.w	r3, r3, #7
 800c2b4:	3308      	adds	r3, #8
 800c2b6:	9303      	str	r3, [sp, #12]
 800c2b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2ba:	4433      	add	r3, r6
 800c2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2be:	e76a      	b.n	800c196 <_svfiprintf_r+0x52>
 800c2c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2c4:	460c      	mov	r4, r1
 800c2c6:	2001      	movs	r0, #1
 800c2c8:	e7a8      	b.n	800c21c <_svfiprintf_r+0xd8>
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	3401      	adds	r4, #1
 800c2ce:	9305      	str	r3, [sp, #20]
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	f04f 0c0a 	mov.w	ip, #10
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2dc:	3a30      	subs	r2, #48	@ 0x30
 800c2de:	2a09      	cmp	r2, #9
 800c2e0:	d903      	bls.n	800c2ea <_svfiprintf_r+0x1a6>
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d0c6      	beq.n	800c274 <_svfiprintf_r+0x130>
 800c2e6:	9105      	str	r1, [sp, #20]
 800c2e8:	e7c4      	b.n	800c274 <_svfiprintf_r+0x130>
 800c2ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e7f0      	b.n	800c2d6 <_svfiprintf_r+0x192>
 800c2f4:	ab03      	add	r3, sp, #12
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	462a      	mov	r2, r5
 800c2fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c334 <_svfiprintf_r+0x1f0>)
 800c2fc:	a904      	add	r1, sp, #16
 800c2fe:	4638      	mov	r0, r7
 800c300:	f7fc fbb2 	bl	8008a68 <_printf_float>
 800c304:	1c42      	adds	r2, r0, #1
 800c306:	4606      	mov	r6, r0
 800c308:	d1d6      	bne.n	800c2b8 <_svfiprintf_r+0x174>
 800c30a:	89ab      	ldrh	r3, [r5, #12]
 800c30c:	065b      	lsls	r3, r3, #25
 800c30e:	f53f af2d 	bmi.w	800c16c <_svfiprintf_r+0x28>
 800c312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c314:	e72c      	b.n	800c170 <_svfiprintf_r+0x2c>
 800c316:	ab03      	add	r3, sp, #12
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	462a      	mov	r2, r5
 800c31c:	4b05      	ldr	r3, [pc, #20]	@ (800c334 <_svfiprintf_r+0x1f0>)
 800c31e:	a904      	add	r1, sp, #16
 800c320:	4638      	mov	r0, r7
 800c322:	f7fc fe39 	bl	8008f98 <_printf_i>
 800c326:	e7ed      	b.n	800c304 <_svfiprintf_r+0x1c0>
 800c328:	0800e571 	.word	0x0800e571
 800c32c:	0800e57b 	.word	0x0800e57b
 800c330:	08008a69 	.word	0x08008a69
 800c334:	0800c08d 	.word	0x0800c08d
 800c338:	0800e577 	.word	0x0800e577

0800c33c <__sflush_r>:
 800c33c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c344:	0716      	lsls	r6, r2, #28
 800c346:	4605      	mov	r5, r0
 800c348:	460c      	mov	r4, r1
 800c34a:	d454      	bmi.n	800c3f6 <__sflush_r+0xba>
 800c34c:	684b      	ldr	r3, [r1, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	dc02      	bgt.n	800c358 <__sflush_r+0x1c>
 800c352:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c354:	2b00      	cmp	r3, #0
 800c356:	dd48      	ble.n	800c3ea <__sflush_r+0xae>
 800c358:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c35a:	2e00      	cmp	r6, #0
 800c35c:	d045      	beq.n	800c3ea <__sflush_r+0xae>
 800c35e:	2300      	movs	r3, #0
 800c360:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c364:	682f      	ldr	r7, [r5, #0]
 800c366:	6a21      	ldr	r1, [r4, #32]
 800c368:	602b      	str	r3, [r5, #0]
 800c36a:	d030      	beq.n	800c3ce <__sflush_r+0x92>
 800c36c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c36e:	89a3      	ldrh	r3, [r4, #12]
 800c370:	0759      	lsls	r1, r3, #29
 800c372:	d505      	bpl.n	800c380 <__sflush_r+0x44>
 800c374:	6863      	ldr	r3, [r4, #4]
 800c376:	1ad2      	subs	r2, r2, r3
 800c378:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c37a:	b10b      	cbz	r3, 800c380 <__sflush_r+0x44>
 800c37c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c37e:	1ad2      	subs	r2, r2, r3
 800c380:	2300      	movs	r3, #0
 800c382:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c384:	6a21      	ldr	r1, [r4, #32]
 800c386:	4628      	mov	r0, r5
 800c388:	47b0      	blx	r6
 800c38a:	1c43      	adds	r3, r0, #1
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	d106      	bne.n	800c39e <__sflush_r+0x62>
 800c390:	6829      	ldr	r1, [r5, #0]
 800c392:	291d      	cmp	r1, #29
 800c394:	d82b      	bhi.n	800c3ee <__sflush_r+0xb2>
 800c396:	4a2a      	ldr	r2, [pc, #168]	@ (800c440 <__sflush_r+0x104>)
 800c398:	40ca      	lsrs	r2, r1
 800c39a:	07d6      	lsls	r6, r2, #31
 800c39c:	d527      	bpl.n	800c3ee <__sflush_r+0xb2>
 800c39e:	2200      	movs	r2, #0
 800c3a0:	6062      	str	r2, [r4, #4]
 800c3a2:	04d9      	lsls	r1, r3, #19
 800c3a4:	6922      	ldr	r2, [r4, #16]
 800c3a6:	6022      	str	r2, [r4, #0]
 800c3a8:	d504      	bpl.n	800c3b4 <__sflush_r+0x78>
 800c3aa:	1c42      	adds	r2, r0, #1
 800c3ac:	d101      	bne.n	800c3b2 <__sflush_r+0x76>
 800c3ae:	682b      	ldr	r3, [r5, #0]
 800c3b0:	b903      	cbnz	r3, 800c3b4 <__sflush_r+0x78>
 800c3b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c3b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3b6:	602f      	str	r7, [r5, #0]
 800c3b8:	b1b9      	cbz	r1, 800c3ea <__sflush_r+0xae>
 800c3ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3be:	4299      	cmp	r1, r3
 800c3c0:	d002      	beq.n	800c3c8 <__sflush_r+0x8c>
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	f7fe fa34 	bl	800a830 <_free_r>
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3cc:	e00d      	b.n	800c3ea <__sflush_r+0xae>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	47b0      	blx	r6
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	1c50      	adds	r0, r2, #1
 800c3d8:	d1c9      	bne.n	800c36e <__sflush_r+0x32>
 800c3da:	682b      	ldr	r3, [r5, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d0c6      	beq.n	800c36e <__sflush_r+0x32>
 800c3e0:	2b1d      	cmp	r3, #29
 800c3e2:	d001      	beq.n	800c3e8 <__sflush_r+0xac>
 800c3e4:	2b16      	cmp	r3, #22
 800c3e6:	d11e      	bne.n	800c426 <__sflush_r+0xea>
 800c3e8:	602f      	str	r7, [r5, #0]
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	e022      	b.n	800c434 <__sflush_r+0xf8>
 800c3ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3f2:	b21b      	sxth	r3, r3
 800c3f4:	e01b      	b.n	800c42e <__sflush_r+0xf2>
 800c3f6:	690f      	ldr	r7, [r1, #16]
 800c3f8:	2f00      	cmp	r7, #0
 800c3fa:	d0f6      	beq.n	800c3ea <__sflush_r+0xae>
 800c3fc:	0793      	lsls	r3, r2, #30
 800c3fe:	680e      	ldr	r6, [r1, #0]
 800c400:	bf08      	it	eq
 800c402:	694b      	ldreq	r3, [r1, #20]
 800c404:	600f      	str	r7, [r1, #0]
 800c406:	bf18      	it	ne
 800c408:	2300      	movne	r3, #0
 800c40a:	eba6 0807 	sub.w	r8, r6, r7
 800c40e:	608b      	str	r3, [r1, #8]
 800c410:	f1b8 0f00 	cmp.w	r8, #0
 800c414:	dde9      	ble.n	800c3ea <__sflush_r+0xae>
 800c416:	6a21      	ldr	r1, [r4, #32]
 800c418:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c41a:	4643      	mov	r3, r8
 800c41c:	463a      	mov	r2, r7
 800c41e:	4628      	mov	r0, r5
 800c420:	47b0      	blx	r6
 800c422:	2800      	cmp	r0, #0
 800c424:	dc08      	bgt.n	800c438 <__sflush_r+0xfc>
 800c426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c42a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c42e:	81a3      	strh	r3, [r4, #12]
 800c430:	f04f 30ff 	mov.w	r0, #4294967295
 800c434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c438:	4407      	add	r7, r0
 800c43a:	eba8 0800 	sub.w	r8, r8, r0
 800c43e:	e7e7      	b.n	800c410 <__sflush_r+0xd4>
 800c440:	20400001 	.word	0x20400001

0800c444 <_fflush_r>:
 800c444:	b538      	push	{r3, r4, r5, lr}
 800c446:	690b      	ldr	r3, [r1, #16]
 800c448:	4605      	mov	r5, r0
 800c44a:	460c      	mov	r4, r1
 800c44c:	b913      	cbnz	r3, 800c454 <_fflush_r+0x10>
 800c44e:	2500      	movs	r5, #0
 800c450:	4628      	mov	r0, r5
 800c452:	bd38      	pop	{r3, r4, r5, pc}
 800c454:	b118      	cbz	r0, 800c45e <_fflush_r+0x1a>
 800c456:	6a03      	ldr	r3, [r0, #32]
 800c458:	b90b      	cbnz	r3, 800c45e <_fflush_r+0x1a>
 800c45a:	f7fd f955 	bl	8009708 <__sinit>
 800c45e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d0f3      	beq.n	800c44e <_fflush_r+0xa>
 800c466:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c468:	07d0      	lsls	r0, r2, #31
 800c46a:	d404      	bmi.n	800c476 <_fflush_r+0x32>
 800c46c:	0599      	lsls	r1, r3, #22
 800c46e:	d402      	bmi.n	800c476 <_fflush_r+0x32>
 800c470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c472:	f7fd fb6e 	bl	8009b52 <__retarget_lock_acquire_recursive>
 800c476:	4628      	mov	r0, r5
 800c478:	4621      	mov	r1, r4
 800c47a:	f7ff ff5f 	bl	800c33c <__sflush_r>
 800c47e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c480:	07da      	lsls	r2, r3, #31
 800c482:	4605      	mov	r5, r0
 800c484:	d4e4      	bmi.n	800c450 <_fflush_r+0xc>
 800c486:	89a3      	ldrh	r3, [r4, #12]
 800c488:	059b      	lsls	r3, r3, #22
 800c48a:	d4e1      	bmi.n	800c450 <_fflush_r+0xc>
 800c48c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c48e:	f7fd fb61 	bl	8009b54 <__retarget_lock_release_recursive>
 800c492:	e7dd      	b.n	800c450 <_fflush_r+0xc>

0800c494 <__swhatbuf_r>:
 800c494:	b570      	push	{r4, r5, r6, lr}
 800c496:	460c      	mov	r4, r1
 800c498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c49c:	2900      	cmp	r1, #0
 800c49e:	b096      	sub	sp, #88	@ 0x58
 800c4a0:	4615      	mov	r5, r2
 800c4a2:	461e      	mov	r6, r3
 800c4a4:	da0d      	bge.n	800c4c2 <__swhatbuf_r+0x2e>
 800c4a6:	89a3      	ldrh	r3, [r4, #12]
 800c4a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c4ac:	f04f 0100 	mov.w	r1, #0
 800c4b0:	bf14      	ite	ne
 800c4b2:	2340      	movne	r3, #64	@ 0x40
 800c4b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	6031      	str	r1, [r6, #0]
 800c4bc:	602b      	str	r3, [r5, #0]
 800c4be:	b016      	add	sp, #88	@ 0x58
 800c4c0:	bd70      	pop	{r4, r5, r6, pc}
 800c4c2:	466a      	mov	r2, sp
 800c4c4:	f000 f85a 	bl	800c57c <_fstat_r>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	dbec      	blt.n	800c4a6 <__swhatbuf_r+0x12>
 800c4cc:	9901      	ldr	r1, [sp, #4]
 800c4ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c4d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c4d6:	4259      	negs	r1, r3
 800c4d8:	4159      	adcs	r1, r3
 800c4da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4de:	e7eb      	b.n	800c4b8 <__swhatbuf_r+0x24>

0800c4e0 <__smakebuf_r>:
 800c4e0:	898b      	ldrh	r3, [r1, #12]
 800c4e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4e4:	079d      	lsls	r5, r3, #30
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	460c      	mov	r4, r1
 800c4ea:	d507      	bpl.n	800c4fc <__smakebuf_r+0x1c>
 800c4ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	6123      	str	r3, [r4, #16]
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	6163      	str	r3, [r4, #20]
 800c4f8:	b003      	add	sp, #12
 800c4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4fc:	ab01      	add	r3, sp, #4
 800c4fe:	466a      	mov	r2, sp
 800c500:	f7ff ffc8 	bl	800c494 <__swhatbuf_r>
 800c504:	9f00      	ldr	r7, [sp, #0]
 800c506:	4605      	mov	r5, r0
 800c508:	4639      	mov	r1, r7
 800c50a:	4630      	mov	r0, r6
 800c50c:	f7fe fa04 	bl	800a918 <_malloc_r>
 800c510:	b948      	cbnz	r0, 800c526 <__smakebuf_r+0x46>
 800c512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c516:	059a      	lsls	r2, r3, #22
 800c518:	d4ee      	bmi.n	800c4f8 <__smakebuf_r+0x18>
 800c51a:	f023 0303 	bic.w	r3, r3, #3
 800c51e:	f043 0302 	orr.w	r3, r3, #2
 800c522:	81a3      	strh	r3, [r4, #12]
 800c524:	e7e2      	b.n	800c4ec <__smakebuf_r+0xc>
 800c526:	89a3      	ldrh	r3, [r4, #12]
 800c528:	6020      	str	r0, [r4, #0]
 800c52a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c52e:	81a3      	strh	r3, [r4, #12]
 800c530:	9b01      	ldr	r3, [sp, #4]
 800c532:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c536:	b15b      	cbz	r3, 800c550 <__smakebuf_r+0x70>
 800c538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c53c:	4630      	mov	r0, r6
 800c53e:	f000 f82f 	bl	800c5a0 <_isatty_r>
 800c542:	b128      	cbz	r0, 800c550 <__smakebuf_r+0x70>
 800c544:	89a3      	ldrh	r3, [r4, #12]
 800c546:	f023 0303 	bic.w	r3, r3, #3
 800c54a:	f043 0301 	orr.w	r3, r3, #1
 800c54e:	81a3      	strh	r3, [r4, #12]
 800c550:	89a3      	ldrh	r3, [r4, #12]
 800c552:	431d      	orrs	r5, r3
 800c554:	81a5      	strh	r5, [r4, #12]
 800c556:	e7cf      	b.n	800c4f8 <__smakebuf_r+0x18>

0800c558 <strncmp>:
 800c558:	b510      	push	{r4, lr}
 800c55a:	b16a      	cbz	r2, 800c578 <strncmp+0x20>
 800c55c:	3901      	subs	r1, #1
 800c55e:	1884      	adds	r4, r0, r2
 800c560:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c564:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c568:	429a      	cmp	r2, r3
 800c56a:	d103      	bne.n	800c574 <strncmp+0x1c>
 800c56c:	42a0      	cmp	r0, r4
 800c56e:	d001      	beq.n	800c574 <strncmp+0x1c>
 800c570:	2a00      	cmp	r2, #0
 800c572:	d1f5      	bne.n	800c560 <strncmp+0x8>
 800c574:	1ad0      	subs	r0, r2, r3
 800c576:	bd10      	pop	{r4, pc}
 800c578:	4610      	mov	r0, r2
 800c57a:	e7fc      	b.n	800c576 <strncmp+0x1e>

0800c57c <_fstat_r>:
 800c57c:	b538      	push	{r3, r4, r5, lr}
 800c57e:	4d07      	ldr	r5, [pc, #28]	@ (800c59c <_fstat_r+0x20>)
 800c580:	2300      	movs	r3, #0
 800c582:	4604      	mov	r4, r0
 800c584:	4608      	mov	r0, r1
 800c586:	4611      	mov	r1, r2
 800c588:	602b      	str	r3, [r5, #0]
 800c58a:	f7f6 f963 	bl	8002854 <_fstat>
 800c58e:	1c43      	adds	r3, r0, #1
 800c590:	d102      	bne.n	800c598 <_fstat_r+0x1c>
 800c592:	682b      	ldr	r3, [r5, #0]
 800c594:	b103      	cbz	r3, 800c598 <_fstat_r+0x1c>
 800c596:	6023      	str	r3, [r4, #0]
 800c598:	bd38      	pop	{r3, r4, r5, pc}
 800c59a:	bf00      	nop
 800c59c:	200009a8 	.word	0x200009a8

0800c5a0 <_isatty_r>:
 800c5a0:	b538      	push	{r3, r4, r5, lr}
 800c5a2:	4d06      	ldr	r5, [pc, #24]	@ (800c5bc <_isatty_r+0x1c>)
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	4608      	mov	r0, r1
 800c5aa:	602b      	str	r3, [r5, #0]
 800c5ac:	f7f6 f962 	bl	8002874 <_isatty>
 800c5b0:	1c43      	adds	r3, r0, #1
 800c5b2:	d102      	bne.n	800c5ba <_isatty_r+0x1a>
 800c5b4:	682b      	ldr	r3, [r5, #0]
 800c5b6:	b103      	cbz	r3, 800c5ba <_isatty_r+0x1a>
 800c5b8:	6023      	str	r3, [r4, #0]
 800c5ba:	bd38      	pop	{r3, r4, r5, pc}
 800c5bc:	200009a8 	.word	0x200009a8

0800c5c0 <_sbrk_r>:
 800c5c0:	b538      	push	{r3, r4, r5, lr}
 800c5c2:	4d06      	ldr	r5, [pc, #24]	@ (800c5dc <_sbrk_r+0x1c>)
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	4608      	mov	r0, r1
 800c5ca:	602b      	str	r3, [r5, #0]
 800c5cc:	f7f6 f96a 	bl	80028a4 <_sbrk>
 800c5d0:	1c43      	adds	r3, r0, #1
 800c5d2:	d102      	bne.n	800c5da <_sbrk_r+0x1a>
 800c5d4:	682b      	ldr	r3, [r5, #0]
 800c5d6:	b103      	cbz	r3, 800c5da <_sbrk_r+0x1a>
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	200009a8 	.word	0x200009a8

0800c5e0 <nan>:
 800c5e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c5e8 <nan+0x8>
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop
 800c5e8:	00000000 	.word	0x00000000
 800c5ec:	7ff80000 	.word	0x7ff80000

0800c5f0 <__assert_func>:
 800c5f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5f2:	4614      	mov	r4, r2
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	4b09      	ldr	r3, [pc, #36]	@ (800c61c <__assert_func+0x2c>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	68d8      	ldr	r0, [r3, #12]
 800c5fe:	b14c      	cbz	r4, 800c614 <__assert_func+0x24>
 800c600:	4b07      	ldr	r3, [pc, #28]	@ (800c620 <__assert_func+0x30>)
 800c602:	9100      	str	r1, [sp, #0]
 800c604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c608:	4906      	ldr	r1, [pc, #24]	@ (800c624 <__assert_func+0x34>)
 800c60a:	462b      	mov	r3, r5
 800c60c:	f000 fba8 	bl	800cd60 <fiprintf>
 800c610:	f000 fbb8 	bl	800cd84 <abort>
 800c614:	4b04      	ldr	r3, [pc, #16]	@ (800c628 <__assert_func+0x38>)
 800c616:	461c      	mov	r4, r3
 800c618:	e7f3      	b.n	800c602 <__assert_func+0x12>
 800c61a:	bf00      	nop
 800c61c:	20000018 	.word	0x20000018
 800c620:	0800e58a 	.word	0x0800e58a
 800c624:	0800e597 	.word	0x0800e597
 800c628:	0800e5c5 	.word	0x0800e5c5

0800c62c <_calloc_r>:
 800c62c:	b570      	push	{r4, r5, r6, lr}
 800c62e:	fba1 5402 	umull	r5, r4, r1, r2
 800c632:	b934      	cbnz	r4, 800c642 <_calloc_r+0x16>
 800c634:	4629      	mov	r1, r5
 800c636:	f7fe f96f 	bl	800a918 <_malloc_r>
 800c63a:	4606      	mov	r6, r0
 800c63c:	b928      	cbnz	r0, 800c64a <_calloc_r+0x1e>
 800c63e:	4630      	mov	r0, r6
 800c640:	bd70      	pop	{r4, r5, r6, pc}
 800c642:	220c      	movs	r2, #12
 800c644:	6002      	str	r2, [r0, #0]
 800c646:	2600      	movs	r6, #0
 800c648:	e7f9      	b.n	800c63e <_calloc_r+0x12>
 800c64a:	462a      	mov	r2, r5
 800c64c:	4621      	mov	r1, r4
 800c64e:	f7fd fa03 	bl	8009a58 <memset>
 800c652:	e7f4      	b.n	800c63e <_calloc_r+0x12>

0800c654 <rshift>:
 800c654:	6903      	ldr	r3, [r0, #16]
 800c656:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c65a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c65e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c662:	f100 0414 	add.w	r4, r0, #20
 800c666:	dd45      	ble.n	800c6f4 <rshift+0xa0>
 800c668:	f011 011f 	ands.w	r1, r1, #31
 800c66c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c670:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c674:	d10c      	bne.n	800c690 <rshift+0x3c>
 800c676:	f100 0710 	add.w	r7, r0, #16
 800c67a:	4629      	mov	r1, r5
 800c67c:	42b1      	cmp	r1, r6
 800c67e:	d334      	bcc.n	800c6ea <rshift+0x96>
 800c680:	1a9b      	subs	r3, r3, r2
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	1eea      	subs	r2, r5, #3
 800c686:	4296      	cmp	r6, r2
 800c688:	bf38      	it	cc
 800c68a:	2300      	movcc	r3, #0
 800c68c:	4423      	add	r3, r4
 800c68e:	e015      	b.n	800c6bc <rshift+0x68>
 800c690:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c694:	f1c1 0820 	rsb	r8, r1, #32
 800c698:	40cf      	lsrs	r7, r1
 800c69a:	f105 0e04 	add.w	lr, r5, #4
 800c69e:	46a1      	mov	r9, r4
 800c6a0:	4576      	cmp	r6, lr
 800c6a2:	46f4      	mov	ip, lr
 800c6a4:	d815      	bhi.n	800c6d2 <rshift+0x7e>
 800c6a6:	1a9a      	subs	r2, r3, r2
 800c6a8:	0092      	lsls	r2, r2, #2
 800c6aa:	3a04      	subs	r2, #4
 800c6ac:	3501      	adds	r5, #1
 800c6ae:	42ae      	cmp	r6, r5
 800c6b0:	bf38      	it	cc
 800c6b2:	2200      	movcc	r2, #0
 800c6b4:	18a3      	adds	r3, r4, r2
 800c6b6:	50a7      	str	r7, [r4, r2]
 800c6b8:	b107      	cbz	r7, 800c6bc <rshift+0x68>
 800c6ba:	3304      	adds	r3, #4
 800c6bc:	1b1a      	subs	r2, r3, r4
 800c6be:	42a3      	cmp	r3, r4
 800c6c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c6c4:	bf08      	it	eq
 800c6c6:	2300      	moveq	r3, #0
 800c6c8:	6102      	str	r2, [r0, #16]
 800c6ca:	bf08      	it	eq
 800c6cc:	6143      	streq	r3, [r0, #20]
 800c6ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6d2:	f8dc c000 	ldr.w	ip, [ip]
 800c6d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c6da:	ea4c 0707 	orr.w	r7, ip, r7
 800c6de:	f849 7b04 	str.w	r7, [r9], #4
 800c6e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c6e6:	40cf      	lsrs	r7, r1
 800c6e8:	e7da      	b.n	800c6a0 <rshift+0x4c>
 800c6ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800c6ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800c6f2:	e7c3      	b.n	800c67c <rshift+0x28>
 800c6f4:	4623      	mov	r3, r4
 800c6f6:	e7e1      	b.n	800c6bc <rshift+0x68>

0800c6f8 <__hexdig_fun>:
 800c6f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c6fc:	2b09      	cmp	r3, #9
 800c6fe:	d802      	bhi.n	800c706 <__hexdig_fun+0xe>
 800c700:	3820      	subs	r0, #32
 800c702:	b2c0      	uxtb	r0, r0
 800c704:	4770      	bx	lr
 800c706:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c70a:	2b05      	cmp	r3, #5
 800c70c:	d801      	bhi.n	800c712 <__hexdig_fun+0x1a>
 800c70e:	3847      	subs	r0, #71	@ 0x47
 800c710:	e7f7      	b.n	800c702 <__hexdig_fun+0xa>
 800c712:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c716:	2b05      	cmp	r3, #5
 800c718:	d801      	bhi.n	800c71e <__hexdig_fun+0x26>
 800c71a:	3827      	subs	r0, #39	@ 0x27
 800c71c:	e7f1      	b.n	800c702 <__hexdig_fun+0xa>
 800c71e:	2000      	movs	r0, #0
 800c720:	4770      	bx	lr
	...

0800c724 <__gethex>:
 800c724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c728:	b085      	sub	sp, #20
 800c72a:	468a      	mov	sl, r1
 800c72c:	9302      	str	r3, [sp, #8]
 800c72e:	680b      	ldr	r3, [r1, #0]
 800c730:	9001      	str	r0, [sp, #4]
 800c732:	4690      	mov	r8, r2
 800c734:	1c9c      	adds	r4, r3, #2
 800c736:	46a1      	mov	r9, r4
 800c738:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c73c:	2830      	cmp	r0, #48	@ 0x30
 800c73e:	d0fa      	beq.n	800c736 <__gethex+0x12>
 800c740:	eba9 0303 	sub.w	r3, r9, r3
 800c744:	f1a3 0b02 	sub.w	fp, r3, #2
 800c748:	f7ff ffd6 	bl	800c6f8 <__hexdig_fun>
 800c74c:	4605      	mov	r5, r0
 800c74e:	2800      	cmp	r0, #0
 800c750:	d168      	bne.n	800c824 <__gethex+0x100>
 800c752:	49a0      	ldr	r1, [pc, #640]	@ (800c9d4 <__gethex+0x2b0>)
 800c754:	2201      	movs	r2, #1
 800c756:	4648      	mov	r0, r9
 800c758:	f7ff fefe 	bl	800c558 <strncmp>
 800c75c:	4607      	mov	r7, r0
 800c75e:	2800      	cmp	r0, #0
 800c760:	d167      	bne.n	800c832 <__gethex+0x10e>
 800c762:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c766:	4626      	mov	r6, r4
 800c768:	f7ff ffc6 	bl	800c6f8 <__hexdig_fun>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	d062      	beq.n	800c836 <__gethex+0x112>
 800c770:	4623      	mov	r3, r4
 800c772:	7818      	ldrb	r0, [r3, #0]
 800c774:	2830      	cmp	r0, #48	@ 0x30
 800c776:	4699      	mov	r9, r3
 800c778:	f103 0301 	add.w	r3, r3, #1
 800c77c:	d0f9      	beq.n	800c772 <__gethex+0x4e>
 800c77e:	f7ff ffbb 	bl	800c6f8 <__hexdig_fun>
 800c782:	fab0 f580 	clz	r5, r0
 800c786:	096d      	lsrs	r5, r5, #5
 800c788:	f04f 0b01 	mov.w	fp, #1
 800c78c:	464a      	mov	r2, r9
 800c78e:	4616      	mov	r6, r2
 800c790:	3201      	adds	r2, #1
 800c792:	7830      	ldrb	r0, [r6, #0]
 800c794:	f7ff ffb0 	bl	800c6f8 <__hexdig_fun>
 800c798:	2800      	cmp	r0, #0
 800c79a:	d1f8      	bne.n	800c78e <__gethex+0x6a>
 800c79c:	498d      	ldr	r1, [pc, #564]	@ (800c9d4 <__gethex+0x2b0>)
 800c79e:	2201      	movs	r2, #1
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	f7ff fed9 	bl	800c558 <strncmp>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d13f      	bne.n	800c82a <__gethex+0x106>
 800c7aa:	b944      	cbnz	r4, 800c7be <__gethex+0x9a>
 800c7ac:	1c74      	adds	r4, r6, #1
 800c7ae:	4622      	mov	r2, r4
 800c7b0:	4616      	mov	r6, r2
 800c7b2:	3201      	adds	r2, #1
 800c7b4:	7830      	ldrb	r0, [r6, #0]
 800c7b6:	f7ff ff9f 	bl	800c6f8 <__hexdig_fun>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	d1f8      	bne.n	800c7b0 <__gethex+0x8c>
 800c7be:	1ba4      	subs	r4, r4, r6
 800c7c0:	00a7      	lsls	r7, r4, #2
 800c7c2:	7833      	ldrb	r3, [r6, #0]
 800c7c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c7c8:	2b50      	cmp	r3, #80	@ 0x50
 800c7ca:	d13e      	bne.n	800c84a <__gethex+0x126>
 800c7cc:	7873      	ldrb	r3, [r6, #1]
 800c7ce:	2b2b      	cmp	r3, #43	@ 0x2b
 800c7d0:	d033      	beq.n	800c83a <__gethex+0x116>
 800c7d2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c7d4:	d034      	beq.n	800c840 <__gethex+0x11c>
 800c7d6:	1c71      	adds	r1, r6, #1
 800c7d8:	2400      	movs	r4, #0
 800c7da:	7808      	ldrb	r0, [r1, #0]
 800c7dc:	f7ff ff8c 	bl	800c6f8 <__hexdig_fun>
 800c7e0:	1e43      	subs	r3, r0, #1
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	2b18      	cmp	r3, #24
 800c7e6:	d830      	bhi.n	800c84a <__gethex+0x126>
 800c7e8:	f1a0 0210 	sub.w	r2, r0, #16
 800c7ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c7f0:	f7ff ff82 	bl	800c6f8 <__hexdig_fun>
 800c7f4:	f100 3cff 	add.w	ip, r0, #4294967295
 800c7f8:	fa5f fc8c 	uxtb.w	ip, ip
 800c7fc:	f1bc 0f18 	cmp.w	ip, #24
 800c800:	f04f 030a 	mov.w	r3, #10
 800c804:	d91e      	bls.n	800c844 <__gethex+0x120>
 800c806:	b104      	cbz	r4, 800c80a <__gethex+0xe6>
 800c808:	4252      	negs	r2, r2
 800c80a:	4417      	add	r7, r2
 800c80c:	f8ca 1000 	str.w	r1, [sl]
 800c810:	b1ed      	cbz	r5, 800c84e <__gethex+0x12a>
 800c812:	f1bb 0f00 	cmp.w	fp, #0
 800c816:	bf0c      	ite	eq
 800c818:	2506      	moveq	r5, #6
 800c81a:	2500      	movne	r5, #0
 800c81c:	4628      	mov	r0, r5
 800c81e:	b005      	add	sp, #20
 800c820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c824:	2500      	movs	r5, #0
 800c826:	462c      	mov	r4, r5
 800c828:	e7b0      	b.n	800c78c <__gethex+0x68>
 800c82a:	2c00      	cmp	r4, #0
 800c82c:	d1c7      	bne.n	800c7be <__gethex+0x9a>
 800c82e:	4627      	mov	r7, r4
 800c830:	e7c7      	b.n	800c7c2 <__gethex+0x9e>
 800c832:	464e      	mov	r6, r9
 800c834:	462f      	mov	r7, r5
 800c836:	2501      	movs	r5, #1
 800c838:	e7c3      	b.n	800c7c2 <__gethex+0x9e>
 800c83a:	2400      	movs	r4, #0
 800c83c:	1cb1      	adds	r1, r6, #2
 800c83e:	e7cc      	b.n	800c7da <__gethex+0xb6>
 800c840:	2401      	movs	r4, #1
 800c842:	e7fb      	b.n	800c83c <__gethex+0x118>
 800c844:	fb03 0002 	mla	r0, r3, r2, r0
 800c848:	e7ce      	b.n	800c7e8 <__gethex+0xc4>
 800c84a:	4631      	mov	r1, r6
 800c84c:	e7de      	b.n	800c80c <__gethex+0xe8>
 800c84e:	eba6 0309 	sub.w	r3, r6, r9
 800c852:	3b01      	subs	r3, #1
 800c854:	4629      	mov	r1, r5
 800c856:	2b07      	cmp	r3, #7
 800c858:	dc0a      	bgt.n	800c870 <__gethex+0x14c>
 800c85a:	9801      	ldr	r0, [sp, #4]
 800c85c:	f7fe f8e8 	bl	800aa30 <_Balloc>
 800c860:	4604      	mov	r4, r0
 800c862:	b940      	cbnz	r0, 800c876 <__gethex+0x152>
 800c864:	4b5c      	ldr	r3, [pc, #368]	@ (800c9d8 <__gethex+0x2b4>)
 800c866:	4602      	mov	r2, r0
 800c868:	21e4      	movs	r1, #228	@ 0xe4
 800c86a:	485c      	ldr	r0, [pc, #368]	@ (800c9dc <__gethex+0x2b8>)
 800c86c:	f7ff fec0 	bl	800c5f0 <__assert_func>
 800c870:	3101      	adds	r1, #1
 800c872:	105b      	asrs	r3, r3, #1
 800c874:	e7ef      	b.n	800c856 <__gethex+0x132>
 800c876:	f100 0a14 	add.w	sl, r0, #20
 800c87a:	2300      	movs	r3, #0
 800c87c:	4655      	mov	r5, sl
 800c87e:	469b      	mov	fp, r3
 800c880:	45b1      	cmp	r9, r6
 800c882:	d337      	bcc.n	800c8f4 <__gethex+0x1d0>
 800c884:	f845 bb04 	str.w	fp, [r5], #4
 800c888:	eba5 050a 	sub.w	r5, r5, sl
 800c88c:	10ad      	asrs	r5, r5, #2
 800c88e:	6125      	str	r5, [r4, #16]
 800c890:	4658      	mov	r0, fp
 800c892:	f7fe f9bf 	bl	800ac14 <__hi0bits>
 800c896:	016d      	lsls	r5, r5, #5
 800c898:	f8d8 6000 	ldr.w	r6, [r8]
 800c89c:	1a2d      	subs	r5, r5, r0
 800c89e:	42b5      	cmp	r5, r6
 800c8a0:	dd54      	ble.n	800c94c <__gethex+0x228>
 800c8a2:	1bad      	subs	r5, r5, r6
 800c8a4:	4629      	mov	r1, r5
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f7fe fd4b 	bl	800b342 <__any_on>
 800c8ac:	4681      	mov	r9, r0
 800c8ae:	b178      	cbz	r0, 800c8d0 <__gethex+0x1ac>
 800c8b0:	1e6b      	subs	r3, r5, #1
 800c8b2:	1159      	asrs	r1, r3, #5
 800c8b4:	f003 021f 	and.w	r2, r3, #31
 800c8b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c8bc:	f04f 0901 	mov.w	r9, #1
 800c8c0:	fa09 f202 	lsl.w	r2, r9, r2
 800c8c4:	420a      	tst	r2, r1
 800c8c6:	d003      	beq.n	800c8d0 <__gethex+0x1ac>
 800c8c8:	454b      	cmp	r3, r9
 800c8ca:	dc36      	bgt.n	800c93a <__gethex+0x216>
 800c8cc:	f04f 0902 	mov.w	r9, #2
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f7ff febe 	bl	800c654 <rshift>
 800c8d8:	442f      	add	r7, r5
 800c8da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8de:	42bb      	cmp	r3, r7
 800c8e0:	da42      	bge.n	800c968 <__gethex+0x244>
 800c8e2:	9801      	ldr	r0, [sp, #4]
 800c8e4:	4621      	mov	r1, r4
 800c8e6:	f7fe f8e3 	bl	800aab0 <_Bfree>
 800c8ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	6013      	str	r3, [r2, #0]
 800c8f0:	25a3      	movs	r5, #163	@ 0xa3
 800c8f2:	e793      	b.n	800c81c <__gethex+0xf8>
 800c8f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c8f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c8fa:	d012      	beq.n	800c922 <__gethex+0x1fe>
 800c8fc:	2b20      	cmp	r3, #32
 800c8fe:	d104      	bne.n	800c90a <__gethex+0x1e6>
 800c900:	f845 bb04 	str.w	fp, [r5], #4
 800c904:	f04f 0b00 	mov.w	fp, #0
 800c908:	465b      	mov	r3, fp
 800c90a:	7830      	ldrb	r0, [r6, #0]
 800c90c:	9303      	str	r3, [sp, #12]
 800c90e:	f7ff fef3 	bl	800c6f8 <__hexdig_fun>
 800c912:	9b03      	ldr	r3, [sp, #12]
 800c914:	f000 000f 	and.w	r0, r0, #15
 800c918:	4098      	lsls	r0, r3
 800c91a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c91e:	3304      	adds	r3, #4
 800c920:	e7ae      	b.n	800c880 <__gethex+0x15c>
 800c922:	45b1      	cmp	r9, r6
 800c924:	d8ea      	bhi.n	800c8fc <__gethex+0x1d8>
 800c926:	492b      	ldr	r1, [pc, #172]	@ (800c9d4 <__gethex+0x2b0>)
 800c928:	9303      	str	r3, [sp, #12]
 800c92a:	2201      	movs	r2, #1
 800c92c:	4630      	mov	r0, r6
 800c92e:	f7ff fe13 	bl	800c558 <strncmp>
 800c932:	9b03      	ldr	r3, [sp, #12]
 800c934:	2800      	cmp	r0, #0
 800c936:	d1e1      	bne.n	800c8fc <__gethex+0x1d8>
 800c938:	e7a2      	b.n	800c880 <__gethex+0x15c>
 800c93a:	1ea9      	subs	r1, r5, #2
 800c93c:	4620      	mov	r0, r4
 800c93e:	f7fe fd00 	bl	800b342 <__any_on>
 800c942:	2800      	cmp	r0, #0
 800c944:	d0c2      	beq.n	800c8cc <__gethex+0x1a8>
 800c946:	f04f 0903 	mov.w	r9, #3
 800c94a:	e7c1      	b.n	800c8d0 <__gethex+0x1ac>
 800c94c:	da09      	bge.n	800c962 <__gethex+0x23e>
 800c94e:	1b75      	subs	r5, r6, r5
 800c950:	4621      	mov	r1, r4
 800c952:	9801      	ldr	r0, [sp, #4]
 800c954:	462a      	mov	r2, r5
 800c956:	f7fe fabb 	bl	800aed0 <__lshift>
 800c95a:	1b7f      	subs	r7, r7, r5
 800c95c:	4604      	mov	r4, r0
 800c95e:	f100 0a14 	add.w	sl, r0, #20
 800c962:	f04f 0900 	mov.w	r9, #0
 800c966:	e7b8      	b.n	800c8da <__gethex+0x1b6>
 800c968:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c96c:	42bd      	cmp	r5, r7
 800c96e:	dd6f      	ble.n	800ca50 <__gethex+0x32c>
 800c970:	1bed      	subs	r5, r5, r7
 800c972:	42ae      	cmp	r6, r5
 800c974:	dc34      	bgt.n	800c9e0 <__gethex+0x2bc>
 800c976:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	d022      	beq.n	800c9c4 <__gethex+0x2a0>
 800c97e:	2b03      	cmp	r3, #3
 800c980:	d024      	beq.n	800c9cc <__gethex+0x2a8>
 800c982:	2b01      	cmp	r3, #1
 800c984:	d115      	bne.n	800c9b2 <__gethex+0x28e>
 800c986:	42ae      	cmp	r6, r5
 800c988:	d113      	bne.n	800c9b2 <__gethex+0x28e>
 800c98a:	2e01      	cmp	r6, #1
 800c98c:	d10b      	bne.n	800c9a6 <__gethex+0x282>
 800c98e:	9a02      	ldr	r2, [sp, #8]
 800c990:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c994:	6013      	str	r3, [r2, #0]
 800c996:	2301      	movs	r3, #1
 800c998:	6123      	str	r3, [r4, #16]
 800c99a:	f8ca 3000 	str.w	r3, [sl]
 800c99e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9a0:	2562      	movs	r5, #98	@ 0x62
 800c9a2:	601c      	str	r4, [r3, #0]
 800c9a4:	e73a      	b.n	800c81c <__gethex+0xf8>
 800c9a6:	1e71      	subs	r1, r6, #1
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f7fe fcca 	bl	800b342 <__any_on>
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	d1ed      	bne.n	800c98e <__gethex+0x26a>
 800c9b2:	9801      	ldr	r0, [sp, #4]
 800c9b4:	4621      	mov	r1, r4
 800c9b6:	f7fe f87b 	bl	800aab0 <_Bfree>
 800c9ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9bc:	2300      	movs	r3, #0
 800c9be:	6013      	str	r3, [r2, #0]
 800c9c0:	2550      	movs	r5, #80	@ 0x50
 800c9c2:	e72b      	b.n	800c81c <__gethex+0xf8>
 800c9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1f3      	bne.n	800c9b2 <__gethex+0x28e>
 800c9ca:	e7e0      	b.n	800c98e <__gethex+0x26a>
 800c9cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d1dd      	bne.n	800c98e <__gethex+0x26a>
 800c9d2:	e7ee      	b.n	800c9b2 <__gethex+0x28e>
 800c9d4:	0800e56f 	.word	0x0800e56f
 800c9d8:	0800e505 	.word	0x0800e505
 800c9dc:	0800e5c6 	.word	0x0800e5c6
 800c9e0:	1e6f      	subs	r7, r5, #1
 800c9e2:	f1b9 0f00 	cmp.w	r9, #0
 800c9e6:	d130      	bne.n	800ca4a <__gethex+0x326>
 800c9e8:	b127      	cbz	r7, 800c9f4 <__gethex+0x2d0>
 800c9ea:	4639      	mov	r1, r7
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f7fe fca8 	bl	800b342 <__any_on>
 800c9f2:	4681      	mov	r9, r0
 800c9f4:	117a      	asrs	r2, r7, #5
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c9fc:	f007 071f 	and.w	r7, r7, #31
 800ca00:	40bb      	lsls	r3, r7
 800ca02:	4213      	tst	r3, r2
 800ca04:	4629      	mov	r1, r5
 800ca06:	4620      	mov	r0, r4
 800ca08:	bf18      	it	ne
 800ca0a:	f049 0902 	orrne.w	r9, r9, #2
 800ca0e:	f7ff fe21 	bl	800c654 <rshift>
 800ca12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ca16:	1b76      	subs	r6, r6, r5
 800ca18:	2502      	movs	r5, #2
 800ca1a:	f1b9 0f00 	cmp.w	r9, #0
 800ca1e:	d047      	beq.n	800cab0 <__gethex+0x38c>
 800ca20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca24:	2b02      	cmp	r3, #2
 800ca26:	d015      	beq.n	800ca54 <__gethex+0x330>
 800ca28:	2b03      	cmp	r3, #3
 800ca2a:	d017      	beq.n	800ca5c <__gethex+0x338>
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d109      	bne.n	800ca44 <__gethex+0x320>
 800ca30:	f019 0f02 	tst.w	r9, #2
 800ca34:	d006      	beq.n	800ca44 <__gethex+0x320>
 800ca36:	f8da 3000 	ldr.w	r3, [sl]
 800ca3a:	ea49 0903 	orr.w	r9, r9, r3
 800ca3e:	f019 0f01 	tst.w	r9, #1
 800ca42:	d10e      	bne.n	800ca62 <__gethex+0x33e>
 800ca44:	f045 0510 	orr.w	r5, r5, #16
 800ca48:	e032      	b.n	800cab0 <__gethex+0x38c>
 800ca4a:	f04f 0901 	mov.w	r9, #1
 800ca4e:	e7d1      	b.n	800c9f4 <__gethex+0x2d0>
 800ca50:	2501      	movs	r5, #1
 800ca52:	e7e2      	b.n	800ca1a <__gethex+0x2f6>
 800ca54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca56:	f1c3 0301 	rsb	r3, r3, #1
 800ca5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d0f0      	beq.n	800ca44 <__gethex+0x320>
 800ca62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ca66:	f104 0314 	add.w	r3, r4, #20
 800ca6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ca6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ca72:	f04f 0c00 	mov.w	ip, #0
 800ca76:	4618      	mov	r0, r3
 800ca78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ca80:	d01b      	beq.n	800caba <__gethex+0x396>
 800ca82:	3201      	adds	r2, #1
 800ca84:	6002      	str	r2, [r0, #0]
 800ca86:	2d02      	cmp	r5, #2
 800ca88:	f104 0314 	add.w	r3, r4, #20
 800ca8c:	d13c      	bne.n	800cb08 <__gethex+0x3e4>
 800ca8e:	f8d8 2000 	ldr.w	r2, [r8]
 800ca92:	3a01      	subs	r2, #1
 800ca94:	42b2      	cmp	r2, r6
 800ca96:	d109      	bne.n	800caac <__gethex+0x388>
 800ca98:	1171      	asrs	r1, r6, #5
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800caa0:	f006 061f 	and.w	r6, r6, #31
 800caa4:	fa02 f606 	lsl.w	r6, r2, r6
 800caa8:	421e      	tst	r6, r3
 800caaa:	d13a      	bne.n	800cb22 <__gethex+0x3fe>
 800caac:	f045 0520 	orr.w	r5, r5, #32
 800cab0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cab2:	601c      	str	r4, [r3, #0]
 800cab4:	9b02      	ldr	r3, [sp, #8]
 800cab6:	601f      	str	r7, [r3, #0]
 800cab8:	e6b0      	b.n	800c81c <__gethex+0xf8>
 800caba:	4299      	cmp	r1, r3
 800cabc:	f843 cc04 	str.w	ip, [r3, #-4]
 800cac0:	d8d9      	bhi.n	800ca76 <__gethex+0x352>
 800cac2:	68a3      	ldr	r3, [r4, #8]
 800cac4:	459b      	cmp	fp, r3
 800cac6:	db17      	blt.n	800caf8 <__gethex+0x3d4>
 800cac8:	6861      	ldr	r1, [r4, #4]
 800caca:	9801      	ldr	r0, [sp, #4]
 800cacc:	3101      	adds	r1, #1
 800cace:	f7fd ffaf 	bl	800aa30 <_Balloc>
 800cad2:	4681      	mov	r9, r0
 800cad4:	b918      	cbnz	r0, 800cade <__gethex+0x3ba>
 800cad6:	4b1a      	ldr	r3, [pc, #104]	@ (800cb40 <__gethex+0x41c>)
 800cad8:	4602      	mov	r2, r0
 800cada:	2184      	movs	r1, #132	@ 0x84
 800cadc:	e6c5      	b.n	800c86a <__gethex+0x146>
 800cade:	6922      	ldr	r2, [r4, #16]
 800cae0:	3202      	adds	r2, #2
 800cae2:	f104 010c 	add.w	r1, r4, #12
 800cae6:	0092      	lsls	r2, r2, #2
 800cae8:	300c      	adds	r0, #12
 800caea:	f7fd f834 	bl	8009b56 <memcpy>
 800caee:	4621      	mov	r1, r4
 800caf0:	9801      	ldr	r0, [sp, #4]
 800caf2:	f7fd ffdd 	bl	800aab0 <_Bfree>
 800caf6:	464c      	mov	r4, r9
 800caf8:	6923      	ldr	r3, [r4, #16]
 800cafa:	1c5a      	adds	r2, r3, #1
 800cafc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb00:	6122      	str	r2, [r4, #16]
 800cb02:	2201      	movs	r2, #1
 800cb04:	615a      	str	r2, [r3, #20]
 800cb06:	e7be      	b.n	800ca86 <__gethex+0x362>
 800cb08:	6922      	ldr	r2, [r4, #16]
 800cb0a:	455a      	cmp	r2, fp
 800cb0c:	dd0b      	ble.n	800cb26 <__gethex+0x402>
 800cb0e:	2101      	movs	r1, #1
 800cb10:	4620      	mov	r0, r4
 800cb12:	f7ff fd9f 	bl	800c654 <rshift>
 800cb16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb1a:	3701      	adds	r7, #1
 800cb1c:	42bb      	cmp	r3, r7
 800cb1e:	f6ff aee0 	blt.w	800c8e2 <__gethex+0x1be>
 800cb22:	2501      	movs	r5, #1
 800cb24:	e7c2      	b.n	800caac <__gethex+0x388>
 800cb26:	f016 061f 	ands.w	r6, r6, #31
 800cb2a:	d0fa      	beq.n	800cb22 <__gethex+0x3fe>
 800cb2c:	4453      	add	r3, sl
 800cb2e:	f1c6 0620 	rsb	r6, r6, #32
 800cb32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cb36:	f7fe f86d 	bl	800ac14 <__hi0bits>
 800cb3a:	42b0      	cmp	r0, r6
 800cb3c:	dbe7      	blt.n	800cb0e <__gethex+0x3ea>
 800cb3e:	e7f0      	b.n	800cb22 <__gethex+0x3fe>
 800cb40:	0800e505 	.word	0x0800e505

0800cb44 <L_shift>:
 800cb44:	f1c2 0208 	rsb	r2, r2, #8
 800cb48:	0092      	lsls	r2, r2, #2
 800cb4a:	b570      	push	{r4, r5, r6, lr}
 800cb4c:	f1c2 0620 	rsb	r6, r2, #32
 800cb50:	6843      	ldr	r3, [r0, #4]
 800cb52:	6804      	ldr	r4, [r0, #0]
 800cb54:	fa03 f506 	lsl.w	r5, r3, r6
 800cb58:	432c      	orrs	r4, r5
 800cb5a:	40d3      	lsrs	r3, r2
 800cb5c:	6004      	str	r4, [r0, #0]
 800cb5e:	f840 3f04 	str.w	r3, [r0, #4]!
 800cb62:	4288      	cmp	r0, r1
 800cb64:	d3f4      	bcc.n	800cb50 <L_shift+0xc>
 800cb66:	bd70      	pop	{r4, r5, r6, pc}

0800cb68 <__match>:
 800cb68:	b530      	push	{r4, r5, lr}
 800cb6a:	6803      	ldr	r3, [r0, #0]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb72:	b914      	cbnz	r4, 800cb7a <__match+0x12>
 800cb74:	6003      	str	r3, [r0, #0]
 800cb76:	2001      	movs	r0, #1
 800cb78:	bd30      	pop	{r4, r5, pc}
 800cb7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb7e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cb82:	2d19      	cmp	r5, #25
 800cb84:	bf98      	it	ls
 800cb86:	3220      	addls	r2, #32
 800cb88:	42a2      	cmp	r2, r4
 800cb8a:	d0f0      	beq.n	800cb6e <__match+0x6>
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	e7f3      	b.n	800cb78 <__match+0x10>

0800cb90 <__hexnan>:
 800cb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb94:	680b      	ldr	r3, [r1, #0]
 800cb96:	6801      	ldr	r1, [r0, #0]
 800cb98:	115e      	asrs	r6, r3, #5
 800cb9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb9e:	f013 031f 	ands.w	r3, r3, #31
 800cba2:	b087      	sub	sp, #28
 800cba4:	bf18      	it	ne
 800cba6:	3604      	addne	r6, #4
 800cba8:	2500      	movs	r5, #0
 800cbaa:	1f37      	subs	r7, r6, #4
 800cbac:	4682      	mov	sl, r0
 800cbae:	4690      	mov	r8, r2
 800cbb0:	9301      	str	r3, [sp, #4]
 800cbb2:	f846 5c04 	str.w	r5, [r6, #-4]
 800cbb6:	46b9      	mov	r9, r7
 800cbb8:	463c      	mov	r4, r7
 800cbba:	9502      	str	r5, [sp, #8]
 800cbbc:	46ab      	mov	fp, r5
 800cbbe:	784a      	ldrb	r2, [r1, #1]
 800cbc0:	1c4b      	adds	r3, r1, #1
 800cbc2:	9303      	str	r3, [sp, #12]
 800cbc4:	b342      	cbz	r2, 800cc18 <__hexnan+0x88>
 800cbc6:	4610      	mov	r0, r2
 800cbc8:	9105      	str	r1, [sp, #20]
 800cbca:	9204      	str	r2, [sp, #16]
 800cbcc:	f7ff fd94 	bl	800c6f8 <__hexdig_fun>
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	d151      	bne.n	800cc78 <__hexnan+0xe8>
 800cbd4:	9a04      	ldr	r2, [sp, #16]
 800cbd6:	9905      	ldr	r1, [sp, #20]
 800cbd8:	2a20      	cmp	r2, #32
 800cbda:	d818      	bhi.n	800cc0e <__hexnan+0x7e>
 800cbdc:	9b02      	ldr	r3, [sp, #8]
 800cbde:	459b      	cmp	fp, r3
 800cbe0:	dd13      	ble.n	800cc0a <__hexnan+0x7a>
 800cbe2:	454c      	cmp	r4, r9
 800cbe4:	d206      	bcs.n	800cbf4 <__hexnan+0x64>
 800cbe6:	2d07      	cmp	r5, #7
 800cbe8:	dc04      	bgt.n	800cbf4 <__hexnan+0x64>
 800cbea:	462a      	mov	r2, r5
 800cbec:	4649      	mov	r1, r9
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f7ff ffa8 	bl	800cb44 <L_shift>
 800cbf4:	4544      	cmp	r4, r8
 800cbf6:	d952      	bls.n	800cc9e <__hexnan+0x10e>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	f1a4 0904 	sub.w	r9, r4, #4
 800cbfe:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc02:	f8cd b008 	str.w	fp, [sp, #8]
 800cc06:	464c      	mov	r4, r9
 800cc08:	461d      	mov	r5, r3
 800cc0a:	9903      	ldr	r1, [sp, #12]
 800cc0c:	e7d7      	b.n	800cbbe <__hexnan+0x2e>
 800cc0e:	2a29      	cmp	r2, #41	@ 0x29
 800cc10:	d157      	bne.n	800ccc2 <__hexnan+0x132>
 800cc12:	3102      	adds	r1, #2
 800cc14:	f8ca 1000 	str.w	r1, [sl]
 800cc18:	f1bb 0f00 	cmp.w	fp, #0
 800cc1c:	d051      	beq.n	800ccc2 <__hexnan+0x132>
 800cc1e:	454c      	cmp	r4, r9
 800cc20:	d206      	bcs.n	800cc30 <__hexnan+0xa0>
 800cc22:	2d07      	cmp	r5, #7
 800cc24:	dc04      	bgt.n	800cc30 <__hexnan+0xa0>
 800cc26:	462a      	mov	r2, r5
 800cc28:	4649      	mov	r1, r9
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f7ff ff8a 	bl	800cb44 <L_shift>
 800cc30:	4544      	cmp	r4, r8
 800cc32:	d936      	bls.n	800cca2 <__hexnan+0x112>
 800cc34:	f1a8 0204 	sub.w	r2, r8, #4
 800cc38:	4623      	mov	r3, r4
 800cc3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800cc3e:	f842 1f04 	str.w	r1, [r2, #4]!
 800cc42:	429f      	cmp	r7, r3
 800cc44:	d2f9      	bcs.n	800cc3a <__hexnan+0xaa>
 800cc46:	1b3b      	subs	r3, r7, r4
 800cc48:	f023 0303 	bic.w	r3, r3, #3
 800cc4c:	3304      	adds	r3, #4
 800cc4e:	3401      	adds	r4, #1
 800cc50:	3e03      	subs	r6, #3
 800cc52:	42b4      	cmp	r4, r6
 800cc54:	bf88      	it	hi
 800cc56:	2304      	movhi	r3, #4
 800cc58:	4443      	add	r3, r8
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	f843 2b04 	str.w	r2, [r3], #4
 800cc60:	429f      	cmp	r7, r3
 800cc62:	d2fb      	bcs.n	800cc5c <__hexnan+0xcc>
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	b91b      	cbnz	r3, 800cc70 <__hexnan+0xe0>
 800cc68:	4547      	cmp	r7, r8
 800cc6a:	d128      	bne.n	800ccbe <__hexnan+0x12e>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	603b      	str	r3, [r7, #0]
 800cc70:	2005      	movs	r0, #5
 800cc72:	b007      	add	sp, #28
 800cc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc78:	3501      	adds	r5, #1
 800cc7a:	2d08      	cmp	r5, #8
 800cc7c:	f10b 0b01 	add.w	fp, fp, #1
 800cc80:	dd06      	ble.n	800cc90 <__hexnan+0x100>
 800cc82:	4544      	cmp	r4, r8
 800cc84:	d9c1      	bls.n	800cc0a <__hexnan+0x7a>
 800cc86:	2300      	movs	r3, #0
 800cc88:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc8c:	2501      	movs	r5, #1
 800cc8e:	3c04      	subs	r4, #4
 800cc90:	6822      	ldr	r2, [r4, #0]
 800cc92:	f000 000f 	and.w	r0, r0, #15
 800cc96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cc9a:	6020      	str	r0, [r4, #0]
 800cc9c:	e7b5      	b.n	800cc0a <__hexnan+0x7a>
 800cc9e:	2508      	movs	r5, #8
 800cca0:	e7b3      	b.n	800cc0a <__hexnan+0x7a>
 800cca2:	9b01      	ldr	r3, [sp, #4]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d0dd      	beq.n	800cc64 <__hexnan+0xd4>
 800cca8:	f1c3 0320 	rsb	r3, r3, #32
 800ccac:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb0:	40da      	lsrs	r2, r3
 800ccb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ccb6:	4013      	ands	r3, r2
 800ccb8:	f846 3c04 	str.w	r3, [r6, #-4]
 800ccbc:	e7d2      	b.n	800cc64 <__hexnan+0xd4>
 800ccbe:	3f04      	subs	r7, #4
 800ccc0:	e7d0      	b.n	800cc64 <__hexnan+0xd4>
 800ccc2:	2004      	movs	r0, #4
 800ccc4:	e7d5      	b.n	800cc72 <__hexnan+0xe2>

0800ccc6 <__ascii_mbtowc>:
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	b901      	cbnz	r1, 800cccc <__ascii_mbtowc+0x6>
 800ccca:	a901      	add	r1, sp, #4
 800cccc:	b142      	cbz	r2, 800cce0 <__ascii_mbtowc+0x1a>
 800ccce:	b14b      	cbz	r3, 800cce4 <__ascii_mbtowc+0x1e>
 800ccd0:	7813      	ldrb	r3, [r2, #0]
 800ccd2:	600b      	str	r3, [r1, #0]
 800ccd4:	7812      	ldrb	r2, [r2, #0]
 800ccd6:	1e10      	subs	r0, r2, #0
 800ccd8:	bf18      	it	ne
 800ccda:	2001      	movne	r0, #1
 800ccdc:	b002      	add	sp, #8
 800ccde:	4770      	bx	lr
 800cce0:	4610      	mov	r0, r2
 800cce2:	e7fb      	b.n	800ccdc <__ascii_mbtowc+0x16>
 800cce4:	f06f 0001 	mvn.w	r0, #1
 800cce8:	e7f8      	b.n	800ccdc <__ascii_mbtowc+0x16>

0800ccea <_realloc_r>:
 800ccea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccee:	4607      	mov	r7, r0
 800ccf0:	4614      	mov	r4, r2
 800ccf2:	460d      	mov	r5, r1
 800ccf4:	b921      	cbnz	r1, 800cd00 <_realloc_r+0x16>
 800ccf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccfa:	4611      	mov	r1, r2
 800ccfc:	f7fd be0c 	b.w	800a918 <_malloc_r>
 800cd00:	b92a      	cbnz	r2, 800cd0e <_realloc_r+0x24>
 800cd02:	f7fd fd95 	bl	800a830 <_free_r>
 800cd06:	4625      	mov	r5, r4
 800cd08:	4628      	mov	r0, r5
 800cd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd0e:	f000 f840 	bl	800cd92 <_malloc_usable_size_r>
 800cd12:	4284      	cmp	r4, r0
 800cd14:	4606      	mov	r6, r0
 800cd16:	d802      	bhi.n	800cd1e <_realloc_r+0x34>
 800cd18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd1c:	d8f4      	bhi.n	800cd08 <_realloc_r+0x1e>
 800cd1e:	4621      	mov	r1, r4
 800cd20:	4638      	mov	r0, r7
 800cd22:	f7fd fdf9 	bl	800a918 <_malloc_r>
 800cd26:	4680      	mov	r8, r0
 800cd28:	b908      	cbnz	r0, 800cd2e <_realloc_r+0x44>
 800cd2a:	4645      	mov	r5, r8
 800cd2c:	e7ec      	b.n	800cd08 <_realloc_r+0x1e>
 800cd2e:	42b4      	cmp	r4, r6
 800cd30:	4622      	mov	r2, r4
 800cd32:	4629      	mov	r1, r5
 800cd34:	bf28      	it	cs
 800cd36:	4632      	movcs	r2, r6
 800cd38:	f7fc ff0d 	bl	8009b56 <memcpy>
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	4638      	mov	r0, r7
 800cd40:	f7fd fd76 	bl	800a830 <_free_r>
 800cd44:	e7f1      	b.n	800cd2a <_realloc_r+0x40>

0800cd46 <__ascii_wctomb>:
 800cd46:	4603      	mov	r3, r0
 800cd48:	4608      	mov	r0, r1
 800cd4a:	b141      	cbz	r1, 800cd5e <__ascii_wctomb+0x18>
 800cd4c:	2aff      	cmp	r2, #255	@ 0xff
 800cd4e:	d904      	bls.n	800cd5a <__ascii_wctomb+0x14>
 800cd50:	228a      	movs	r2, #138	@ 0x8a
 800cd52:	601a      	str	r2, [r3, #0]
 800cd54:	f04f 30ff 	mov.w	r0, #4294967295
 800cd58:	4770      	bx	lr
 800cd5a:	700a      	strb	r2, [r1, #0]
 800cd5c:	2001      	movs	r0, #1
 800cd5e:	4770      	bx	lr

0800cd60 <fiprintf>:
 800cd60:	b40e      	push	{r1, r2, r3}
 800cd62:	b503      	push	{r0, r1, lr}
 800cd64:	4601      	mov	r1, r0
 800cd66:	ab03      	add	r3, sp, #12
 800cd68:	4805      	ldr	r0, [pc, #20]	@ (800cd80 <fiprintf+0x20>)
 800cd6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd6e:	6800      	ldr	r0, [r0, #0]
 800cd70:	9301      	str	r3, [sp, #4]
 800cd72:	f000 f83f 	bl	800cdf4 <_vfiprintf_r>
 800cd76:	b002      	add	sp, #8
 800cd78:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd7c:	b003      	add	sp, #12
 800cd7e:	4770      	bx	lr
 800cd80:	20000018 	.word	0x20000018

0800cd84 <abort>:
 800cd84:	b508      	push	{r3, lr}
 800cd86:	2006      	movs	r0, #6
 800cd88:	f000 f974 	bl	800d074 <raise>
 800cd8c:	2001      	movs	r0, #1
 800cd8e:	f7f5 fd11 	bl	80027b4 <_exit>

0800cd92 <_malloc_usable_size_r>:
 800cd92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd96:	1f18      	subs	r0, r3, #4
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	bfbc      	itt	lt
 800cd9c:	580b      	ldrlt	r3, [r1, r0]
 800cd9e:	18c0      	addlt	r0, r0, r3
 800cda0:	4770      	bx	lr

0800cda2 <__sfputc_r>:
 800cda2:	6893      	ldr	r3, [r2, #8]
 800cda4:	3b01      	subs	r3, #1
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	b410      	push	{r4}
 800cdaa:	6093      	str	r3, [r2, #8]
 800cdac:	da08      	bge.n	800cdc0 <__sfputc_r+0x1e>
 800cdae:	6994      	ldr	r4, [r2, #24]
 800cdb0:	42a3      	cmp	r3, r4
 800cdb2:	db01      	blt.n	800cdb8 <__sfputc_r+0x16>
 800cdb4:	290a      	cmp	r1, #10
 800cdb6:	d103      	bne.n	800cdc0 <__sfputc_r+0x1e>
 800cdb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdbc:	f7fc bd9d 	b.w	80098fa <__swbuf_r>
 800cdc0:	6813      	ldr	r3, [r2, #0]
 800cdc2:	1c58      	adds	r0, r3, #1
 800cdc4:	6010      	str	r0, [r2, #0]
 800cdc6:	7019      	strb	r1, [r3, #0]
 800cdc8:	4608      	mov	r0, r1
 800cdca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <__sfputs_r>:
 800cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd2:	4606      	mov	r6, r0
 800cdd4:	460f      	mov	r7, r1
 800cdd6:	4614      	mov	r4, r2
 800cdd8:	18d5      	adds	r5, r2, r3
 800cdda:	42ac      	cmp	r4, r5
 800cddc:	d101      	bne.n	800cde2 <__sfputs_r+0x12>
 800cdde:	2000      	movs	r0, #0
 800cde0:	e007      	b.n	800cdf2 <__sfputs_r+0x22>
 800cde2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cde6:	463a      	mov	r2, r7
 800cde8:	4630      	mov	r0, r6
 800cdea:	f7ff ffda 	bl	800cda2 <__sfputc_r>
 800cdee:	1c43      	adds	r3, r0, #1
 800cdf0:	d1f3      	bne.n	800cdda <__sfputs_r+0xa>
 800cdf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cdf4 <_vfiprintf_r>:
 800cdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf8:	460d      	mov	r5, r1
 800cdfa:	b09d      	sub	sp, #116	@ 0x74
 800cdfc:	4614      	mov	r4, r2
 800cdfe:	4698      	mov	r8, r3
 800ce00:	4606      	mov	r6, r0
 800ce02:	b118      	cbz	r0, 800ce0c <_vfiprintf_r+0x18>
 800ce04:	6a03      	ldr	r3, [r0, #32]
 800ce06:	b90b      	cbnz	r3, 800ce0c <_vfiprintf_r+0x18>
 800ce08:	f7fc fc7e 	bl	8009708 <__sinit>
 800ce0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce0e:	07d9      	lsls	r1, r3, #31
 800ce10:	d405      	bmi.n	800ce1e <_vfiprintf_r+0x2a>
 800ce12:	89ab      	ldrh	r3, [r5, #12]
 800ce14:	059a      	lsls	r2, r3, #22
 800ce16:	d402      	bmi.n	800ce1e <_vfiprintf_r+0x2a>
 800ce18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce1a:	f7fc fe9a 	bl	8009b52 <__retarget_lock_acquire_recursive>
 800ce1e:	89ab      	ldrh	r3, [r5, #12]
 800ce20:	071b      	lsls	r3, r3, #28
 800ce22:	d501      	bpl.n	800ce28 <_vfiprintf_r+0x34>
 800ce24:	692b      	ldr	r3, [r5, #16]
 800ce26:	b99b      	cbnz	r3, 800ce50 <_vfiprintf_r+0x5c>
 800ce28:	4629      	mov	r1, r5
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f7fc fda4 	bl	8009978 <__swsetup_r>
 800ce30:	b170      	cbz	r0, 800ce50 <_vfiprintf_r+0x5c>
 800ce32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce34:	07dc      	lsls	r4, r3, #31
 800ce36:	d504      	bpl.n	800ce42 <_vfiprintf_r+0x4e>
 800ce38:	f04f 30ff 	mov.w	r0, #4294967295
 800ce3c:	b01d      	add	sp, #116	@ 0x74
 800ce3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce42:	89ab      	ldrh	r3, [r5, #12]
 800ce44:	0598      	lsls	r0, r3, #22
 800ce46:	d4f7      	bmi.n	800ce38 <_vfiprintf_r+0x44>
 800ce48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce4a:	f7fc fe83 	bl	8009b54 <__retarget_lock_release_recursive>
 800ce4e:	e7f3      	b.n	800ce38 <_vfiprintf_r+0x44>
 800ce50:	2300      	movs	r3, #0
 800ce52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce54:	2320      	movs	r3, #32
 800ce56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce5e:	2330      	movs	r3, #48	@ 0x30
 800ce60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d010 <_vfiprintf_r+0x21c>
 800ce64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce68:	f04f 0901 	mov.w	r9, #1
 800ce6c:	4623      	mov	r3, r4
 800ce6e:	469a      	mov	sl, r3
 800ce70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce74:	b10a      	cbz	r2, 800ce7a <_vfiprintf_r+0x86>
 800ce76:	2a25      	cmp	r2, #37	@ 0x25
 800ce78:	d1f9      	bne.n	800ce6e <_vfiprintf_r+0x7a>
 800ce7a:	ebba 0b04 	subs.w	fp, sl, r4
 800ce7e:	d00b      	beq.n	800ce98 <_vfiprintf_r+0xa4>
 800ce80:	465b      	mov	r3, fp
 800ce82:	4622      	mov	r2, r4
 800ce84:	4629      	mov	r1, r5
 800ce86:	4630      	mov	r0, r6
 800ce88:	f7ff ffa2 	bl	800cdd0 <__sfputs_r>
 800ce8c:	3001      	adds	r0, #1
 800ce8e:	f000 80a7 	beq.w	800cfe0 <_vfiprintf_r+0x1ec>
 800ce92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce94:	445a      	add	r2, fp
 800ce96:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce98:	f89a 3000 	ldrb.w	r3, [sl]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f000 809f 	beq.w	800cfe0 <_vfiprintf_r+0x1ec>
 800cea2:	2300      	movs	r3, #0
 800cea4:	f04f 32ff 	mov.w	r2, #4294967295
 800cea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceac:	f10a 0a01 	add.w	sl, sl, #1
 800ceb0:	9304      	str	r3, [sp, #16]
 800ceb2:	9307      	str	r3, [sp, #28]
 800ceb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ceb8:	931a      	str	r3, [sp, #104]	@ 0x68
 800ceba:	4654      	mov	r4, sl
 800cebc:	2205      	movs	r2, #5
 800cebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec2:	4853      	ldr	r0, [pc, #332]	@ (800d010 <_vfiprintf_r+0x21c>)
 800cec4:	f7f3 f984 	bl	80001d0 <memchr>
 800cec8:	9a04      	ldr	r2, [sp, #16]
 800ceca:	b9d8      	cbnz	r0, 800cf04 <_vfiprintf_r+0x110>
 800cecc:	06d1      	lsls	r1, r2, #27
 800cece:	bf44      	itt	mi
 800ced0:	2320      	movmi	r3, #32
 800ced2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ced6:	0713      	lsls	r3, r2, #28
 800ced8:	bf44      	itt	mi
 800ceda:	232b      	movmi	r3, #43	@ 0x2b
 800cedc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cee0:	f89a 3000 	ldrb.w	r3, [sl]
 800cee4:	2b2a      	cmp	r3, #42	@ 0x2a
 800cee6:	d015      	beq.n	800cf14 <_vfiprintf_r+0x120>
 800cee8:	9a07      	ldr	r2, [sp, #28]
 800ceea:	4654      	mov	r4, sl
 800ceec:	2000      	movs	r0, #0
 800ceee:	f04f 0c0a 	mov.w	ip, #10
 800cef2:	4621      	mov	r1, r4
 800cef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cef8:	3b30      	subs	r3, #48	@ 0x30
 800cefa:	2b09      	cmp	r3, #9
 800cefc:	d94b      	bls.n	800cf96 <_vfiprintf_r+0x1a2>
 800cefe:	b1b0      	cbz	r0, 800cf2e <_vfiprintf_r+0x13a>
 800cf00:	9207      	str	r2, [sp, #28]
 800cf02:	e014      	b.n	800cf2e <_vfiprintf_r+0x13a>
 800cf04:	eba0 0308 	sub.w	r3, r0, r8
 800cf08:	fa09 f303 	lsl.w	r3, r9, r3
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	9304      	str	r3, [sp, #16]
 800cf10:	46a2      	mov	sl, r4
 800cf12:	e7d2      	b.n	800ceba <_vfiprintf_r+0xc6>
 800cf14:	9b03      	ldr	r3, [sp, #12]
 800cf16:	1d19      	adds	r1, r3, #4
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	9103      	str	r1, [sp, #12]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	bfbb      	ittet	lt
 800cf20:	425b      	neglt	r3, r3
 800cf22:	f042 0202 	orrlt.w	r2, r2, #2
 800cf26:	9307      	strge	r3, [sp, #28]
 800cf28:	9307      	strlt	r3, [sp, #28]
 800cf2a:	bfb8      	it	lt
 800cf2c:	9204      	strlt	r2, [sp, #16]
 800cf2e:	7823      	ldrb	r3, [r4, #0]
 800cf30:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf32:	d10a      	bne.n	800cf4a <_vfiprintf_r+0x156>
 800cf34:	7863      	ldrb	r3, [r4, #1]
 800cf36:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf38:	d132      	bne.n	800cfa0 <_vfiprintf_r+0x1ac>
 800cf3a:	9b03      	ldr	r3, [sp, #12]
 800cf3c:	1d1a      	adds	r2, r3, #4
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	9203      	str	r2, [sp, #12]
 800cf42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf46:	3402      	adds	r4, #2
 800cf48:	9305      	str	r3, [sp, #20]
 800cf4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d020 <_vfiprintf_r+0x22c>
 800cf4e:	7821      	ldrb	r1, [r4, #0]
 800cf50:	2203      	movs	r2, #3
 800cf52:	4650      	mov	r0, sl
 800cf54:	f7f3 f93c 	bl	80001d0 <memchr>
 800cf58:	b138      	cbz	r0, 800cf6a <_vfiprintf_r+0x176>
 800cf5a:	9b04      	ldr	r3, [sp, #16]
 800cf5c:	eba0 000a 	sub.w	r0, r0, sl
 800cf60:	2240      	movs	r2, #64	@ 0x40
 800cf62:	4082      	lsls	r2, r0
 800cf64:	4313      	orrs	r3, r2
 800cf66:	3401      	adds	r4, #1
 800cf68:	9304      	str	r3, [sp, #16]
 800cf6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf6e:	4829      	ldr	r0, [pc, #164]	@ (800d014 <_vfiprintf_r+0x220>)
 800cf70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf74:	2206      	movs	r2, #6
 800cf76:	f7f3 f92b 	bl	80001d0 <memchr>
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d03f      	beq.n	800cffe <_vfiprintf_r+0x20a>
 800cf7e:	4b26      	ldr	r3, [pc, #152]	@ (800d018 <_vfiprintf_r+0x224>)
 800cf80:	bb1b      	cbnz	r3, 800cfca <_vfiprintf_r+0x1d6>
 800cf82:	9b03      	ldr	r3, [sp, #12]
 800cf84:	3307      	adds	r3, #7
 800cf86:	f023 0307 	bic.w	r3, r3, #7
 800cf8a:	3308      	adds	r3, #8
 800cf8c:	9303      	str	r3, [sp, #12]
 800cf8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf90:	443b      	add	r3, r7
 800cf92:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf94:	e76a      	b.n	800ce6c <_vfiprintf_r+0x78>
 800cf96:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf9a:	460c      	mov	r4, r1
 800cf9c:	2001      	movs	r0, #1
 800cf9e:	e7a8      	b.n	800cef2 <_vfiprintf_r+0xfe>
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	3401      	adds	r4, #1
 800cfa4:	9305      	str	r3, [sp, #20]
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	f04f 0c0a 	mov.w	ip, #10
 800cfac:	4620      	mov	r0, r4
 800cfae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfb2:	3a30      	subs	r2, #48	@ 0x30
 800cfb4:	2a09      	cmp	r2, #9
 800cfb6:	d903      	bls.n	800cfc0 <_vfiprintf_r+0x1cc>
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d0c6      	beq.n	800cf4a <_vfiprintf_r+0x156>
 800cfbc:	9105      	str	r1, [sp, #20]
 800cfbe:	e7c4      	b.n	800cf4a <_vfiprintf_r+0x156>
 800cfc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e7f0      	b.n	800cfac <_vfiprintf_r+0x1b8>
 800cfca:	ab03      	add	r3, sp, #12
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	462a      	mov	r2, r5
 800cfd0:	4b12      	ldr	r3, [pc, #72]	@ (800d01c <_vfiprintf_r+0x228>)
 800cfd2:	a904      	add	r1, sp, #16
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	f7fb fd47 	bl	8008a68 <_printf_float>
 800cfda:	4607      	mov	r7, r0
 800cfdc:	1c78      	adds	r0, r7, #1
 800cfde:	d1d6      	bne.n	800cf8e <_vfiprintf_r+0x19a>
 800cfe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfe2:	07d9      	lsls	r1, r3, #31
 800cfe4:	d405      	bmi.n	800cff2 <_vfiprintf_r+0x1fe>
 800cfe6:	89ab      	ldrh	r3, [r5, #12]
 800cfe8:	059a      	lsls	r2, r3, #22
 800cfea:	d402      	bmi.n	800cff2 <_vfiprintf_r+0x1fe>
 800cfec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfee:	f7fc fdb1 	bl	8009b54 <__retarget_lock_release_recursive>
 800cff2:	89ab      	ldrh	r3, [r5, #12]
 800cff4:	065b      	lsls	r3, r3, #25
 800cff6:	f53f af1f 	bmi.w	800ce38 <_vfiprintf_r+0x44>
 800cffa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cffc:	e71e      	b.n	800ce3c <_vfiprintf_r+0x48>
 800cffe:	ab03      	add	r3, sp, #12
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	462a      	mov	r2, r5
 800d004:	4b05      	ldr	r3, [pc, #20]	@ (800d01c <_vfiprintf_r+0x228>)
 800d006:	a904      	add	r1, sp, #16
 800d008:	4630      	mov	r0, r6
 800d00a:	f7fb ffc5 	bl	8008f98 <_printf_i>
 800d00e:	e7e4      	b.n	800cfda <_vfiprintf_r+0x1e6>
 800d010:	0800e571 	.word	0x0800e571
 800d014:	0800e57b 	.word	0x0800e57b
 800d018:	08008a69 	.word	0x08008a69
 800d01c:	0800cdd1 	.word	0x0800cdd1
 800d020:	0800e577 	.word	0x0800e577

0800d024 <_raise_r>:
 800d024:	291f      	cmp	r1, #31
 800d026:	b538      	push	{r3, r4, r5, lr}
 800d028:	4605      	mov	r5, r0
 800d02a:	460c      	mov	r4, r1
 800d02c:	d904      	bls.n	800d038 <_raise_r+0x14>
 800d02e:	2316      	movs	r3, #22
 800d030:	6003      	str	r3, [r0, #0]
 800d032:	f04f 30ff 	mov.w	r0, #4294967295
 800d036:	bd38      	pop	{r3, r4, r5, pc}
 800d038:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d03a:	b112      	cbz	r2, 800d042 <_raise_r+0x1e>
 800d03c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d040:	b94b      	cbnz	r3, 800d056 <_raise_r+0x32>
 800d042:	4628      	mov	r0, r5
 800d044:	f000 f830 	bl	800d0a8 <_getpid_r>
 800d048:	4622      	mov	r2, r4
 800d04a:	4601      	mov	r1, r0
 800d04c:	4628      	mov	r0, r5
 800d04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d052:	f000 b817 	b.w	800d084 <_kill_r>
 800d056:	2b01      	cmp	r3, #1
 800d058:	d00a      	beq.n	800d070 <_raise_r+0x4c>
 800d05a:	1c59      	adds	r1, r3, #1
 800d05c:	d103      	bne.n	800d066 <_raise_r+0x42>
 800d05e:	2316      	movs	r3, #22
 800d060:	6003      	str	r3, [r0, #0]
 800d062:	2001      	movs	r0, #1
 800d064:	e7e7      	b.n	800d036 <_raise_r+0x12>
 800d066:	2100      	movs	r1, #0
 800d068:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d06c:	4620      	mov	r0, r4
 800d06e:	4798      	blx	r3
 800d070:	2000      	movs	r0, #0
 800d072:	e7e0      	b.n	800d036 <_raise_r+0x12>

0800d074 <raise>:
 800d074:	4b02      	ldr	r3, [pc, #8]	@ (800d080 <raise+0xc>)
 800d076:	4601      	mov	r1, r0
 800d078:	6818      	ldr	r0, [r3, #0]
 800d07a:	f7ff bfd3 	b.w	800d024 <_raise_r>
 800d07e:	bf00      	nop
 800d080:	20000018 	.word	0x20000018

0800d084 <_kill_r>:
 800d084:	b538      	push	{r3, r4, r5, lr}
 800d086:	4d07      	ldr	r5, [pc, #28]	@ (800d0a4 <_kill_r+0x20>)
 800d088:	2300      	movs	r3, #0
 800d08a:	4604      	mov	r4, r0
 800d08c:	4608      	mov	r0, r1
 800d08e:	4611      	mov	r1, r2
 800d090:	602b      	str	r3, [r5, #0]
 800d092:	f7f5 fb7f 	bl	8002794 <_kill>
 800d096:	1c43      	adds	r3, r0, #1
 800d098:	d102      	bne.n	800d0a0 <_kill_r+0x1c>
 800d09a:	682b      	ldr	r3, [r5, #0]
 800d09c:	b103      	cbz	r3, 800d0a0 <_kill_r+0x1c>
 800d09e:	6023      	str	r3, [r4, #0]
 800d0a0:	bd38      	pop	{r3, r4, r5, pc}
 800d0a2:	bf00      	nop
 800d0a4:	200009a8 	.word	0x200009a8

0800d0a8 <_getpid_r>:
 800d0a8:	f7f5 bb6c 	b.w	8002784 <_getpid>

0800d0ac <sqrt>:
 800d0ac:	b538      	push	{r3, r4, r5, lr}
 800d0ae:	ed2d 8b02 	vpush	{d8}
 800d0b2:	ec55 4b10 	vmov	r4, r5, d0
 800d0b6:	f000 f9c7 	bl	800d448 <__ieee754_sqrt>
 800d0ba:	4622      	mov	r2, r4
 800d0bc:	462b      	mov	r3, r5
 800d0be:	4620      	mov	r0, r4
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	eeb0 8a40 	vmov.f32	s16, s0
 800d0c6:	eef0 8a60 	vmov.f32	s17, s1
 800d0ca:	f7f3 fd2f 	bl	8000b2c <__aeabi_dcmpun>
 800d0ce:	b990      	cbnz	r0, 800d0f6 <sqrt+0x4a>
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	4629      	mov	r1, r5
 800d0d8:	f7f3 fd00 	bl	8000adc <__aeabi_dcmplt>
 800d0dc:	b158      	cbz	r0, 800d0f6 <sqrt+0x4a>
 800d0de:	f7fc fd0d 	bl	8009afc <__errno>
 800d0e2:	2321      	movs	r3, #33	@ 0x21
 800d0e4:	6003      	str	r3, [r0, #0]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	4610      	mov	r0, r2
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	f7f3 fbad 	bl	800084c <__aeabi_ddiv>
 800d0f2:	ec41 0b18 	vmov	d8, r0, r1
 800d0f6:	eeb0 0a48 	vmov.f32	s0, s16
 800d0fa:	eef0 0a68 	vmov.f32	s1, s17
 800d0fe:	ecbd 8b02 	vpop	{d8}
 800d102:	bd38      	pop	{r3, r4, r5, pc}
 800d104:	0000      	movs	r0, r0
	...

0800d108 <atan>:
 800d108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10c:	ec55 4b10 	vmov	r4, r5, d0
 800d110:	4bbf      	ldr	r3, [pc, #764]	@ (800d410 <atan+0x308>)
 800d112:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d116:	429e      	cmp	r6, r3
 800d118:	46ab      	mov	fp, r5
 800d11a:	d918      	bls.n	800d14e <atan+0x46>
 800d11c:	4bbd      	ldr	r3, [pc, #756]	@ (800d414 <atan+0x30c>)
 800d11e:	429e      	cmp	r6, r3
 800d120:	d801      	bhi.n	800d126 <atan+0x1e>
 800d122:	d109      	bne.n	800d138 <atan+0x30>
 800d124:	b144      	cbz	r4, 800d138 <atan+0x30>
 800d126:	4622      	mov	r2, r4
 800d128:	462b      	mov	r3, r5
 800d12a:	4620      	mov	r0, r4
 800d12c:	4629      	mov	r1, r5
 800d12e:	f7f3 f8ad 	bl	800028c <__adddf3>
 800d132:	4604      	mov	r4, r0
 800d134:	460d      	mov	r5, r1
 800d136:	e006      	b.n	800d146 <atan+0x3e>
 800d138:	f1bb 0f00 	cmp.w	fp, #0
 800d13c:	f340 812b 	ble.w	800d396 <atan+0x28e>
 800d140:	a597      	add	r5, pc, #604	@ (adr r5, 800d3a0 <atan+0x298>)
 800d142:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d146:	ec45 4b10 	vmov	d0, r4, r5
 800d14a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d14e:	4bb2      	ldr	r3, [pc, #712]	@ (800d418 <atan+0x310>)
 800d150:	429e      	cmp	r6, r3
 800d152:	d813      	bhi.n	800d17c <atan+0x74>
 800d154:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d158:	429e      	cmp	r6, r3
 800d15a:	d80c      	bhi.n	800d176 <atan+0x6e>
 800d15c:	a392      	add	r3, pc, #584	@ (adr r3, 800d3a8 <atan+0x2a0>)
 800d15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d162:	4620      	mov	r0, r4
 800d164:	4629      	mov	r1, r5
 800d166:	f7f3 f891 	bl	800028c <__adddf3>
 800d16a:	4bac      	ldr	r3, [pc, #688]	@ (800d41c <atan+0x314>)
 800d16c:	2200      	movs	r2, #0
 800d16e:	f7f3 fcd3 	bl	8000b18 <__aeabi_dcmpgt>
 800d172:	2800      	cmp	r0, #0
 800d174:	d1e7      	bne.n	800d146 <atan+0x3e>
 800d176:	f04f 3aff 	mov.w	sl, #4294967295
 800d17a:	e029      	b.n	800d1d0 <atan+0xc8>
 800d17c:	f000 f95c 	bl	800d438 <fabs>
 800d180:	4ba7      	ldr	r3, [pc, #668]	@ (800d420 <atan+0x318>)
 800d182:	429e      	cmp	r6, r3
 800d184:	ec55 4b10 	vmov	r4, r5, d0
 800d188:	f200 80bc 	bhi.w	800d304 <atan+0x1fc>
 800d18c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d190:	429e      	cmp	r6, r3
 800d192:	f200 809e 	bhi.w	800d2d2 <atan+0x1ca>
 800d196:	4622      	mov	r2, r4
 800d198:	462b      	mov	r3, r5
 800d19a:	4620      	mov	r0, r4
 800d19c:	4629      	mov	r1, r5
 800d19e:	f7f3 f875 	bl	800028c <__adddf3>
 800d1a2:	4b9e      	ldr	r3, [pc, #632]	@ (800d41c <atan+0x314>)
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f7f3 f86f 	bl	8000288 <__aeabi_dsub>
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	4606      	mov	r6, r0
 800d1ae:	460f      	mov	r7, r1
 800d1b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	4629      	mov	r1, r5
 800d1b8:	f7f3 f868 	bl	800028c <__adddf3>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	460b      	mov	r3, r1
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	4639      	mov	r1, r7
 800d1c4:	f7f3 fb42 	bl	800084c <__aeabi_ddiv>
 800d1c8:	f04f 0a00 	mov.w	sl, #0
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	460d      	mov	r5, r1
 800d1d0:	4622      	mov	r2, r4
 800d1d2:	462b      	mov	r3, r5
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	4629      	mov	r1, r5
 800d1d8:	f7f3 fa0e 	bl	80005f8 <__aeabi_dmul>
 800d1dc:	4602      	mov	r2, r0
 800d1de:	460b      	mov	r3, r1
 800d1e0:	4680      	mov	r8, r0
 800d1e2:	4689      	mov	r9, r1
 800d1e4:	f7f3 fa08 	bl	80005f8 <__aeabi_dmul>
 800d1e8:	a371      	add	r3, pc, #452	@ (adr r3, 800d3b0 <atan+0x2a8>)
 800d1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ee:	4606      	mov	r6, r0
 800d1f0:	460f      	mov	r7, r1
 800d1f2:	f7f3 fa01 	bl	80005f8 <__aeabi_dmul>
 800d1f6:	a370      	add	r3, pc, #448	@ (adr r3, 800d3b8 <atan+0x2b0>)
 800d1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fc:	f7f3 f846 	bl	800028c <__adddf3>
 800d200:	4632      	mov	r2, r6
 800d202:	463b      	mov	r3, r7
 800d204:	f7f3 f9f8 	bl	80005f8 <__aeabi_dmul>
 800d208:	a36d      	add	r3, pc, #436	@ (adr r3, 800d3c0 <atan+0x2b8>)
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	f7f3 f83d 	bl	800028c <__adddf3>
 800d212:	4632      	mov	r2, r6
 800d214:	463b      	mov	r3, r7
 800d216:	f7f3 f9ef 	bl	80005f8 <__aeabi_dmul>
 800d21a:	a36b      	add	r3, pc, #428	@ (adr r3, 800d3c8 <atan+0x2c0>)
 800d21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d220:	f7f3 f834 	bl	800028c <__adddf3>
 800d224:	4632      	mov	r2, r6
 800d226:	463b      	mov	r3, r7
 800d228:	f7f3 f9e6 	bl	80005f8 <__aeabi_dmul>
 800d22c:	a368      	add	r3, pc, #416	@ (adr r3, 800d3d0 <atan+0x2c8>)
 800d22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d232:	f7f3 f82b 	bl	800028c <__adddf3>
 800d236:	4632      	mov	r2, r6
 800d238:	463b      	mov	r3, r7
 800d23a:	f7f3 f9dd 	bl	80005f8 <__aeabi_dmul>
 800d23e:	a366      	add	r3, pc, #408	@ (adr r3, 800d3d8 <atan+0x2d0>)
 800d240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d244:	f7f3 f822 	bl	800028c <__adddf3>
 800d248:	4642      	mov	r2, r8
 800d24a:	464b      	mov	r3, r9
 800d24c:	f7f3 f9d4 	bl	80005f8 <__aeabi_dmul>
 800d250:	a363      	add	r3, pc, #396	@ (adr r3, 800d3e0 <atan+0x2d8>)
 800d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d256:	4680      	mov	r8, r0
 800d258:	4689      	mov	r9, r1
 800d25a:	4630      	mov	r0, r6
 800d25c:	4639      	mov	r1, r7
 800d25e:	f7f3 f9cb 	bl	80005f8 <__aeabi_dmul>
 800d262:	a361      	add	r3, pc, #388	@ (adr r3, 800d3e8 <atan+0x2e0>)
 800d264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d268:	f7f3 f80e 	bl	8000288 <__aeabi_dsub>
 800d26c:	4632      	mov	r2, r6
 800d26e:	463b      	mov	r3, r7
 800d270:	f7f3 f9c2 	bl	80005f8 <__aeabi_dmul>
 800d274:	a35e      	add	r3, pc, #376	@ (adr r3, 800d3f0 <atan+0x2e8>)
 800d276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27a:	f7f3 f805 	bl	8000288 <__aeabi_dsub>
 800d27e:	4632      	mov	r2, r6
 800d280:	463b      	mov	r3, r7
 800d282:	f7f3 f9b9 	bl	80005f8 <__aeabi_dmul>
 800d286:	a35c      	add	r3, pc, #368	@ (adr r3, 800d3f8 <atan+0x2f0>)
 800d288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28c:	f7f2 fffc 	bl	8000288 <__aeabi_dsub>
 800d290:	4632      	mov	r2, r6
 800d292:	463b      	mov	r3, r7
 800d294:	f7f3 f9b0 	bl	80005f8 <__aeabi_dmul>
 800d298:	a359      	add	r3, pc, #356	@ (adr r3, 800d400 <atan+0x2f8>)
 800d29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29e:	f7f2 fff3 	bl	8000288 <__aeabi_dsub>
 800d2a2:	4632      	mov	r2, r6
 800d2a4:	463b      	mov	r3, r7
 800d2a6:	f7f3 f9a7 	bl	80005f8 <__aeabi_dmul>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	4640      	mov	r0, r8
 800d2b0:	4649      	mov	r1, r9
 800d2b2:	f7f2 ffeb 	bl	800028c <__adddf3>
 800d2b6:	4622      	mov	r2, r4
 800d2b8:	462b      	mov	r3, r5
 800d2ba:	f7f3 f99d 	bl	80005f8 <__aeabi_dmul>
 800d2be:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	d148      	bne.n	800d35a <atan+0x252>
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	4629      	mov	r1, r5
 800d2cc:	f7f2 ffdc 	bl	8000288 <__aeabi_dsub>
 800d2d0:	e72f      	b.n	800d132 <atan+0x2a>
 800d2d2:	4b52      	ldr	r3, [pc, #328]	@ (800d41c <atan+0x314>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	4629      	mov	r1, r5
 800d2da:	f7f2 ffd5 	bl	8000288 <__aeabi_dsub>
 800d2de:	4b4f      	ldr	r3, [pc, #316]	@ (800d41c <atan+0x314>)
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	460f      	mov	r7, r1
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	4629      	mov	r1, r5
 800d2ea:	f7f2 ffcf 	bl	800028c <__adddf3>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	4639      	mov	r1, r7
 800d2f6:	f7f3 faa9 	bl	800084c <__aeabi_ddiv>
 800d2fa:	f04f 0a01 	mov.w	sl, #1
 800d2fe:	4604      	mov	r4, r0
 800d300:	460d      	mov	r5, r1
 800d302:	e765      	b.n	800d1d0 <atan+0xc8>
 800d304:	4b47      	ldr	r3, [pc, #284]	@ (800d424 <atan+0x31c>)
 800d306:	429e      	cmp	r6, r3
 800d308:	d21c      	bcs.n	800d344 <atan+0x23c>
 800d30a:	4b47      	ldr	r3, [pc, #284]	@ (800d428 <atan+0x320>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	4620      	mov	r0, r4
 800d310:	4629      	mov	r1, r5
 800d312:	f7f2 ffb9 	bl	8000288 <__aeabi_dsub>
 800d316:	4b44      	ldr	r3, [pc, #272]	@ (800d428 <atan+0x320>)
 800d318:	4606      	mov	r6, r0
 800d31a:	460f      	mov	r7, r1
 800d31c:	2200      	movs	r2, #0
 800d31e:	4620      	mov	r0, r4
 800d320:	4629      	mov	r1, r5
 800d322:	f7f3 f969 	bl	80005f8 <__aeabi_dmul>
 800d326:	4b3d      	ldr	r3, [pc, #244]	@ (800d41c <atan+0x314>)
 800d328:	2200      	movs	r2, #0
 800d32a:	f7f2 ffaf 	bl	800028c <__adddf3>
 800d32e:	4602      	mov	r2, r0
 800d330:	460b      	mov	r3, r1
 800d332:	4630      	mov	r0, r6
 800d334:	4639      	mov	r1, r7
 800d336:	f7f3 fa89 	bl	800084c <__aeabi_ddiv>
 800d33a:	f04f 0a02 	mov.w	sl, #2
 800d33e:	4604      	mov	r4, r0
 800d340:	460d      	mov	r5, r1
 800d342:	e745      	b.n	800d1d0 <atan+0xc8>
 800d344:	4622      	mov	r2, r4
 800d346:	462b      	mov	r3, r5
 800d348:	4938      	ldr	r1, [pc, #224]	@ (800d42c <atan+0x324>)
 800d34a:	2000      	movs	r0, #0
 800d34c:	f7f3 fa7e 	bl	800084c <__aeabi_ddiv>
 800d350:	f04f 0a03 	mov.w	sl, #3
 800d354:	4604      	mov	r4, r0
 800d356:	460d      	mov	r5, r1
 800d358:	e73a      	b.n	800d1d0 <atan+0xc8>
 800d35a:	4b35      	ldr	r3, [pc, #212]	@ (800d430 <atan+0x328>)
 800d35c:	4e35      	ldr	r6, [pc, #212]	@ (800d434 <atan+0x32c>)
 800d35e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d366:	f7f2 ff8f 	bl	8000288 <__aeabi_dsub>
 800d36a:	4622      	mov	r2, r4
 800d36c:	462b      	mov	r3, r5
 800d36e:	f7f2 ff8b 	bl	8000288 <__aeabi_dsub>
 800d372:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d376:	4602      	mov	r2, r0
 800d378:	460b      	mov	r3, r1
 800d37a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d37e:	f7f2 ff83 	bl	8000288 <__aeabi_dsub>
 800d382:	f1bb 0f00 	cmp.w	fp, #0
 800d386:	4604      	mov	r4, r0
 800d388:	460d      	mov	r5, r1
 800d38a:	f6bf aedc 	bge.w	800d146 <atan+0x3e>
 800d38e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d392:	461d      	mov	r5, r3
 800d394:	e6d7      	b.n	800d146 <atan+0x3e>
 800d396:	a51c      	add	r5, pc, #112	@ (adr r5, 800d408 <atan+0x300>)
 800d398:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d39c:	e6d3      	b.n	800d146 <atan+0x3e>
 800d39e:	bf00      	nop
 800d3a0:	54442d18 	.word	0x54442d18
 800d3a4:	3ff921fb 	.word	0x3ff921fb
 800d3a8:	8800759c 	.word	0x8800759c
 800d3ac:	7e37e43c 	.word	0x7e37e43c
 800d3b0:	e322da11 	.word	0xe322da11
 800d3b4:	3f90ad3a 	.word	0x3f90ad3a
 800d3b8:	24760deb 	.word	0x24760deb
 800d3bc:	3fa97b4b 	.word	0x3fa97b4b
 800d3c0:	a0d03d51 	.word	0xa0d03d51
 800d3c4:	3fb10d66 	.word	0x3fb10d66
 800d3c8:	c54c206e 	.word	0xc54c206e
 800d3cc:	3fb745cd 	.word	0x3fb745cd
 800d3d0:	920083ff 	.word	0x920083ff
 800d3d4:	3fc24924 	.word	0x3fc24924
 800d3d8:	5555550d 	.word	0x5555550d
 800d3dc:	3fd55555 	.word	0x3fd55555
 800d3e0:	2c6a6c2f 	.word	0x2c6a6c2f
 800d3e4:	bfa2b444 	.word	0xbfa2b444
 800d3e8:	52defd9a 	.word	0x52defd9a
 800d3ec:	3fadde2d 	.word	0x3fadde2d
 800d3f0:	af749a6d 	.word	0xaf749a6d
 800d3f4:	3fb3b0f2 	.word	0x3fb3b0f2
 800d3f8:	fe231671 	.word	0xfe231671
 800d3fc:	3fbc71c6 	.word	0x3fbc71c6
 800d400:	9998ebc4 	.word	0x9998ebc4
 800d404:	3fc99999 	.word	0x3fc99999
 800d408:	54442d18 	.word	0x54442d18
 800d40c:	bff921fb 	.word	0xbff921fb
 800d410:	440fffff 	.word	0x440fffff
 800d414:	7ff00000 	.word	0x7ff00000
 800d418:	3fdbffff 	.word	0x3fdbffff
 800d41c:	3ff00000 	.word	0x3ff00000
 800d420:	3ff2ffff 	.word	0x3ff2ffff
 800d424:	40038000 	.word	0x40038000
 800d428:	3ff80000 	.word	0x3ff80000
 800d42c:	bff00000 	.word	0xbff00000
 800d430:	0800e880 	.word	0x0800e880
 800d434:	0800e8a0 	.word	0x0800e8a0

0800d438 <fabs>:
 800d438:	ec51 0b10 	vmov	r0, r1, d0
 800d43c:	4602      	mov	r2, r0
 800d43e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d442:	ec43 2b10 	vmov	d0, r2, r3
 800d446:	4770      	bx	lr

0800d448 <__ieee754_sqrt>:
 800d448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44c:	4a66      	ldr	r2, [pc, #408]	@ (800d5e8 <__ieee754_sqrt+0x1a0>)
 800d44e:	ec55 4b10 	vmov	r4, r5, d0
 800d452:	43aa      	bics	r2, r5
 800d454:	462b      	mov	r3, r5
 800d456:	4621      	mov	r1, r4
 800d458:	d110      	bne.n	800d47c <__ieee754_sqrt+0x34>
 800d45a:	4622      	mov	r2, r4
 800d45c:	4620      	mov	r0, r4
 800d45e:	4629      	mov	r1, r5
 800d460:	f7f3 f8ca 	bl	80005f8 <__aeabi_dmul>
 800d464:	4602      	mov	r2, r0
 800d466:	460b      	mov	r3, r1
 800d468:	4620      	mov	r0, r4
 800d46a:	4629      	mov	r1, r5
 800d46c:	f7f2 ff0e 	bl	800028c <__adddf3>
 800d470:	4604      	mov	r4, r0
 800d472:	460d      	mov	r5, r1
 800d474:	ec45 4b10 	vmov	d0, r4, r5
 800d478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47c:	2d00      	cmp	r5, #0
 800d47e:	dc0e      	bgt.n	800d49e <__ieee754_sqrt+0x56>
 800d480:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d484:	4322      	orrs	r2, r4
 800d486:	d0f5      	beq.n	800d474 <__ieee754_sqrt+0x2c>
 800d488:	b19d      	cbz	r5, 800d4b2 <__ieee754_sqrt+0x6a>
 800d48a:	4622      	mov	r2, r4
 800d48c:	4620      	mov	r0, r4
 800d48e:	4629      	mov	r1, r5
 800d490:	f7f2 fefa 	bl	8000288 <__aeabi_dsub>
 800d494:	4602      	mov	r2, r0
 800d496:	460b      	mov	r3, r1
 800d498:	f7f3 f9d8 	bl	800084c <__aeabi_ddiv>
 800d49c:	e7e8      	b.n	800d470 <__ieee754_sqrt+0x28>
 800d49e:	152a      	asrs	r2, r5, #20
 800d4a0:	d115      	bne.n	800d4ce <__ieee754_sqrt+0x86>
 800d4a2:	2000      	movs	r0, #0
 800d4a4:	e009      	b.n	800d4ba <__ieee754_sqrt+0x72>
 800d4a6:	0acb      	lsrs	r3, r1, #11
 800d4a8:	3a15      	subs	r2, #21
 800d4aa:	0549      	lsls	r1, r1, #21
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d0fa      	beq.n	800d4a6 <__ieee754_sqrt+0x5e>
 800d4b0:	e7f7      	b.n	800d4a2 <__ieee754_sqrt+0x5a>
 800d4b2:	462a      	mov	r2, r5
 800d4b4:	e7fa      	b.n	800d4ac <__ieee754_sqrt+0x64>
 800d4b6:	005b      	lsls	r3, r3, #1
 800d4b8:	3001      	adds	r0, #1
 800d4ba:	02dc      	lsls	r4, r3, #11
 800d4bc:	d5fb      	bpl.n	800d4b6 <__ieee754_sqrt+0x6e>
 800d4be:	1e44      	subs	r4, r0, #1
 800d4c0:	1b12      	subs	r2, r2, r4
 800d4c2:	f1c0 0420 	rsb	r4, r0, #32
 800d4c6:	fa21 f404 	lsr.w	r4, r1, r4
 800d4ca:	4323      	orrs	r3, r4
 800d4cc:	4081      	lsls	r1, r0
 800d4ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4d2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800d4d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d4da:	07d2      	lsls	r2, r2, #31
 800d4dc:	bf5c      	itt	pl
 800d4de:	005b      	lslpl	r3, r3, #1
 800d4e0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d4e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d4e8:	bf58      	it	pl
 800d4ea:	0049      	lslpl	r1, r1, #1
 800d4ec:	2600      	movs	r6, #0
 800d4ee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d4f2:	107f      	asrs	r7, r7, #1
 800d4f4:	0049      	lsls	r1, r1, #1
 800d4f6:	2016      	movs	r0, #22
 800d4f8:	4632      	mov	r2, r6
 800d4fa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d4fe:	1915      	adds	r5, r2, r4
 800d500:	429d      	cmp	r5, r3
 800d502:	bfde      	ittt	le
 800d504:	192a      	addle	r2, r5, r4
 800d506:	1b5b      	suble	r3, r3, r5
 800d508:	1936      	addle	r6, r6, r4
 800d50a:	0fcd      	lsrs	r5, r1, #31
 800d50c:	3801      	subs	r0, #1
 800d50e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800d512:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d516:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d51a:	d1f0      	bne.n	800d4fe <__ieee754_sqrt+0xb6>
 800d51c:	4605      	mov	r5, r0
 800d51e:	2420      	movs	r4, #32
 800d520:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d524:	4293      	cmp	r3, r2
 800d526:	eb0c 0e00 	add.w	lr, ip, r0
 800d52a:	dc02      	bgt.n	800d532 <__ieee754_sqrt+0xea>
 800d52c:	d113      	bne.n	800d556 <__ieee754_sqrt+0x10e>
 800d52e:	458e      	cmp	lr, r1
 800d530:	d811      	bhi.n	800d556 <__ieee754_sqrt+0x10e>
 800d532:	f1be 0f00 	cmp.w	lr, #0
 800d536:	eb0e 000c 	add.w	r0, lr, ip
 800d53a:	da3f      	bge.n	800d5bc <__ieee754_sqrt+0x174>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	db3d      	blt.n	800d5bc <__ieee754_sqrt+0x174>
 800d540:	f102 0801 	add.w	r8, r2, #1
 800d544:	1a9b      	subs	r3, r3, r2
 800d546:	458e      	cmp	lr, r1
 800d548:	bf88      	it	hi
 800d54a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d54e:	eba1 010e 	sub.w	r1, r1, lr
 800d552:	4465      	add	r5, ip
 800d554:	4642      	mov	r2, r8
 800d556:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d55a:	3c01      	subs	r4, #1
 800d55c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d560:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d564:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d568:	d1dc      	bne.n	800d524 <__ieee754_sqrt+0xdc>
 800d56a:	4319      	orrs	r1, r3
 800d56c:	d01b      	beq.n	800d5a6 <__ieee754_sqrt+0x15e>
 800d56e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800d5ec <__ieee754_sqrt+0x1a4>
 800d572:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800d5f0 <__ieee754_sqrt+0x1a8>
 800d576:	e9da 0100 	ldrd	r0, r1, [sl]
 800d57a:	e9db 2300 	ldrd	r2, r3, [fp]
 800d57e:	f7f2 fe83 	bl	8000288 <__aeabi_dsub>
 800d582:	e9da 8900 	ldrd	r8, r9, [sl]
 800d586:	4602      	mov	r2, r0
 800d588:	460b      	mov	r3, r1
 800d58a:	4640      	mov	r0, r8
 800d58c:	4649      	mov	r1, r9
 800d58e:	f7f3 faaf 	bl	8000af0 <__aeabi_dcmple>
 800d592:	b140      	cbz	r0, 800d5a6 <__ieee754_sqrt+0x15e>
 800d594:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d598:	e9da 0100 	ldrd	r0, r1, [sl]
 800d59c:	e9db 2300 	ldrd	r2, r3, [fp]
 800d5a0:	d10e      	bne.n	800d5c0 <__ieee754_sqrt+0x178>
 800d5a2:	3601      	adds	r6, #1
 800d5a4:	4625      	mov	r5, r4
 800d5a6:	1073      	asrs	r3, r6, #1
 800d5a8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800d5ac:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800d5b0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800d5b4:	086b      	lsrs	r3, r5, #1
 800d5b6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800d5ba:	e759      	b.n	800d470 <__ieee754_sqrt+0x28>
 800d5bc:	4690      	mov	r8, r2
 800d5be:	e7c1      	b.n	800d544 <__ieee754_sqrt+0xfc>
 800d5c0:	f7f2 fe64 	bl	800028c <__adddf3>
 800d5c4:	e9da 8900 	ldrd	r8, r9, [sl]
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4640      	mov	r0, r8
 800d5ce:	4649      	mov	r1, r9
 800d5d0:	f7f3 fa84 	bl	8000adc <__aeabi_dcmplt>
 800d5d4:	b120      	cbz	r0, 800d5e0 <__ieee754_sqrt+0x198>
 800d5d6:	1cab      	adds	r3, r5, #2
 800d5d8:	bf08      	it	eq
 800d5da:	3601      	addeq	r6, #1
 800d5dc:	3502      	adds	r5, #2
 800d5de:	e7e2      	b.n	800d5a6 <__ieee754_sqrt+0x15e>
 800d5e0:	1c6b      	adds	r3, r5, #1
 800d5e2:	f023 0501 	bic.w	r5, r3, #1
 800d5e6:	e7de      	b.n	800d5a6 <__ieee754_sqrt+0x15e>
 800d5e8:	7ff00000 	.word	0x7ff00000
 800d5ec:	0800e8c8 	.word	0x0800e8c8
 800d5f0:	0800e8c0 	.word	0x0800e8c0

0800d5f4 <_init>:
 800d5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f6:	bf00      	nop
 800d5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5fa:	bc08      	pop	{r3}
 800d5fc:	469e      	mov	lr, r3
 800d5fe:	4770      	bx	lr

0800d600 <_fini>:
 800d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d602:	bf00      	nop
 800d604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d606:	bc08      	pop	{r3}
 800d608:	469e      	mov	lr, r3
 800d60a:	4770      	bx	lr
